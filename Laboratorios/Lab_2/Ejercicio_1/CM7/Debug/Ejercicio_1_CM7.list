
Ejercicio_1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006604  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006928  08006928  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006930  08006930  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006930  08006930  00016930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  24000074  080069ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000690  080069ac  00020690  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019746  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bab  00000000  00000000  000397e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003c398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ae26  00000000  00000000  0003ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d6d  00000000  00000000  00079876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186605  00000000  00000000  000925e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00218be8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005954  00000000  00000000  00218c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800688c 	.word	0x0800688c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800688c 	.word	0x0800688c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b092      	sub	sp, #72	; 0x48
 80007b4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b3f      	ldr	r3, [pc, #252]	; (80008bc <main+0x10c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	647a      	str	r2, [r7, #68]	; 0x44
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 fa11 	bl	8000c00 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fbc7 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f875 	bl	80008d0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <main+0x10c>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a33      	ldr	r2, [pc, #204]	; (80008bc <main+0x10c>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <main+0x10c>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f000 ff09 	bl	800161c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f000 ff1f 	bl	8001650 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <main+0x10c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	647a      	str	r2, [r7, #68]	; 0x44
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 f9e3 	bl	8000c00 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f999 	bl	8000b70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083e:	f000 f919 	bl	8000a74 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000842:	f000 f963 	bl	8000b0c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000846:	f000 f8c7 	bl	80009d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  uart_buf_len = sprintf(uart_buf, "Timer test\r\n");
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	491c      	ldr	r1, [pc, #112]	; (80008c0 <main+0x110>)
 8000850:	4618      	mov	r0, r3
 8000852:	f005 fbad 	bl	8005fb0 <siprintf>
 8000856:	4603      	mov	r3, r0
 8000858:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Almanena en uart_buf_len el número de caracteres del string formateado de uart_buf*/
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800085c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000860:	f107 0108 	add.w	r1, r7, #8
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	4817      	ldr	r0, [pc, #92]	; (80008c4 <main+0x114>)
 8000868:	f003 ffb0 	bl	80047cc <HAL_UART_Transmit>
  /* Envía por el puerto Tx del USART3 (PD9) el mensaje formateado en uart_buf en bloques
   * en tamaños de trama de 8 bits*/
  HAL_TIM_Base_Start(&htim2);
 800086c:	4816      	ldr	r0, [pc, #88]	; (80008c8 <main+0x118>)
 800086e:	f003 fc2f 	bl	80040d0 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  timer_val = __HAL_TIM_GET_COUNTER(&htim2);
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <main+0x118>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000878:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_Delay(150);
 800087a:	2096      	movs	r0, #150	; 0x96
 800087c:	f000 fc0a 	bl	8001094 <HAL_Delay>
	  timer_val = __HAL_TIM_GET_COUNTER(&htim2) - timer_val;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <main+0x118>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  uart_buf_len = sprintf(uart_buf, "%u us\r\n", timer_val);
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000892:	490e      	ldr	r1, [pc, #56]	; (80008cc <main+0x11c>)
 8000894:	4618      	mov	r0, r3
 8000896:	f005 fb8b 	bl	8005fb0 <siprintf>
 800089a:	4603      	mov	r3, r0
 800089c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80008a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80008a4:	f107 0108 	add.w	r1, r7, #8
 80008a8:	2364      	movs	r3, #100	; 0x64
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <main+0x114>)
 80008ac:	f003 ff8e 	bl	80047cc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80008b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b4:	f000 fbee 	bl	8001094 <HAL_Delay>
	  timer_val = __HAL_TIM_GET_COUNTER(&htim2);
 80008b8:	e7db      	b.n	8000872 <main+0xc2>
 80008ba:	bf00      	nop
 80008bc:	58024400 	.word	0x58024400
 80008c0:	080068a4 	.word	0x080068a4
 80008c4:	240000dc 	.word	0x240000dc
 80008c8:	24000090 	.word	0x24000090
 80008cc:	080068b4 	.word	0x080068b4

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09c      	sub	sp, #112	; 0x70
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	224c      	movs	r2, #76	; 0x4c
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f005 fb5e 	bl	8005fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2220      	movs	r2, #32
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f005 fb58 	bl	8005fa0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008f0:	2004      	movs	r0, #4
 80008f2:	f001 f809 	bl	8001908 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b34      	ldr	r3, [pc, #208]	; (80009cc <SystemClock_Config+0xfc>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	4a33      	ldr	r2, [pc, #204]	; (80009cc <SystemClock_Config+0xfc>)
 8000900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000904:	6193      	str	r3, [r2, #24]
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <SystemClock_Config+0xfc>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <SystemClock_Config+0x100>)
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	4a2e      	ldr	r2, [pc, #184]	; (80009d0 <SystemClock_Config+0x100>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <SystemClock_Config+0x100>)
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000928:	bf00      	nop
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <SystemClock_Config+0xfc>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000936:	d1f8      	bne.n	800092a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000938:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <SystemClock_Config+0x104>)
 800093a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093c:	f023 0303 	bic.w	r3, r3, #3
 8000940:	4a24      	ldr	r2, [pc, #144]	; (80009d4 <SystemClock_Config+0x104>)
 8000942:	f043 0302 	orr.w	r3, r3, #2
 8000946:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	2301      	movs	r3, #1
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800094c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000956:	2302      	movs	r3, #2
 8000958:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800095e:	2378      	movs	r3, #120	; 0x78
 8000960:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000962:	2302      	movs	r3, #2
 8000964:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000966:	2302      	movs	r3, #2
 8000968:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800096e:	230c      	movs	r3, #12
 8000970:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000972:	2300      	movs	r3, #0
 8000974:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4618      	mov	r0, r3
 8000980:	f001 f82c 	bl	80019dc <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800098a:	f000 f939 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	233f      	movs	r3, #63	; 0x3f
 8000990:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2303      	movs	r3, #3
 8000994:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800099a:	2308      	movs	r3, #8
 800099c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800099e:	2340      	movs	r3, #64	; 0x40
 80009a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009a2:	2340      	movs	r3, #64	; 0x40
 80009a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ac:	2340      	movs	r3, #64	; 0x40
 80009ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2104      	movs	r1, #4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 fc3f 	bl	8002238 <HAL_RCC_ClockConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80009c0:	f000 f91e 	bl	8000c00 <Error_Handler>
  }
}
 80009c4:	bf00      	nop
 80009c6:	3770      	adds	r7, #112	; 0x70
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58024800 	.word	0x58024800
 80009d0:	58000400 	.word	0x58000400
 80009d4:	58024400 	.word	0x58024400

080009d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_TIM2_Init+0x98>)
 80009f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a00:	22f0      	movs	r2, #240	; 0xf0
 8000a02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a1e:	4814      	ldr	r0, [pc, #80]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a20:	f003 fafe 	bl	8004020 <HAL_TIM_Base_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a2a:	f000 f8e9 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a3c:	f003 fbb8 	bl	80041b0 <HAL_TIM_ConfigClockSource>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a46:	f000 f8db 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a58:	f003 fdda 	bl	8004610 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a62:	f000 f8cd 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	24000090 	.word	0x24000090

08000a74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <MX_USART3_UART_Init+0x94>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000abe:	f003 fe35 	bl	800472c <HAL_UART_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ac8:	f000 f89a 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ad0:	f004 fe68 	bl	80057a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ada:	f000 f891 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ae2:	f004 fe9d 	bl	8005820 <HAL_UARTEx_SetRxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aec:	f000 f888 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000af2:	f004 fe1e 	bl	8005732 <HAL_UARTEx_DisableFifoMode>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000afc:	f000 f880 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	240000dc 	.word	0x240000dc
 8000b08:	40004800 	.word	0x40004800

08000b0c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b14:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b18:	2209      	movs	r2, #9
 8000b1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b54:	f000 fd90 	bl	8001678 <HAL_PCD_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b5e:	f000 f84f 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2400016c 	.word	0x2400016c
 8000b6c:	40080000 	.word	0x40080000

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_GPIO_Init+0x8c>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	4a1f      	ldr	r2, [pc, #124]	; (8000bfc <MX_GPIO_Init+0x8c>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_GPIO_Init+0x8c>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_GPIO_Init+0x8c>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <MX_GPIO_Init+0x8c>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_GPIO_Init+0x8c>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_GPIO_Init+0x8c>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb8:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <MX_GPIO_Init+0x8c>)
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_GPIO_Init+0x8c>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	f003 0308 	and.w	r3, r3, #8
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_GPIO_Init+0x8c>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd6:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <MX_GPIO_Init+0x8c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_GPIO_Init+0x8c>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	58024400 	.word	0x58024400

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_MspInit+0x30>)
 8000c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c18:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x30>)
 8000c1a:	f043 0302 	orr.w	r3, r3, #2
 8000c1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x30>)
 8000c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	58024400 	.word	0x58024400

08000c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c50:	d10e      	bne.n	8000c70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_TIM_Base_MspInit+0x3c>)
 8000c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c58:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_TIM_Base_MspInit+0x3c>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_TIM_Base_MspInit+0x3c>)
 8000c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	58024400 	.word	0x58024400

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0b8      	sub	sp, #224	; 0xe0
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	22bc      	movs	r2, #188	; 0xbc
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f005 f97d 	bl	8005fa0 <memset>
  if(huart->Instance==USART3)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a25      	ldr	r2, [pc, #148]	; (8000d40 <HAL_UART_MspInit+0xc0>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d142      	bne.n	8000d36 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 fe46 	bl	8002950 <HAL_RCCEx_PeriphCLKConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cca:	f7ff ff99 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d24:	2307      	movs	r3, #7
 8000d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_UART_MspInit+0xc8>)
 8000d32:	f000 fac3 	bl	80012bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	37e0      	adds	r7, #224	; 0xe0
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40004800 	.word	0x40004800
 8000d44:	58024400 	.word	0x58024400
 8000d48:	58020c00 	.word	0x58020c00

08000d4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0b8      	sub	sp, #224	; 0xe0
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	22bc      	movs	r2, #188	; 0xbc
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f005 f917 	bl	8005fa0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a36      	ldr	r2, [pc, #216]	; (8000e50 <HAL_PCD_MspInit+0x104>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d165      	bne.n	8000e48 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000d86:	2318      	movs	r3, #24
 8000d88:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000d96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d9a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000da0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000da4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 fdcf 	bl	8002950 <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000db8:	f7ff ff22 	bl	8000c00 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000dbc:	f000 fdfe 	bl	80019bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <HAL_PCD_MspInit+0x108>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <HAL_PCD_MspInit+0x108>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <HAL_PCD_MspInit+0x108>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000dde:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000de2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000df8:	230a      	movs	r3, #10
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e02:	4619      	mov	r1, r3
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <HAL_PCD_MspInit+0x10c>)
 8000e06:	f000 fa59 	bl	80012bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e22:	4619      	mov	r1, r3
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <HAL_PCD_MspInit+0x10c>)
 8000e26:	f000 fa49 	bl	80012bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_PCD_MspInit+0x108>)
 8000e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_PCD_MspInit+0x108>)
 8000e32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_PCD_MspInit+0x108>)
 8000e3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	37e0      	adds	r7, #224	; 0xe0
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40080000 	.word	0x40080000
 8000e54:	58024400 	.word	0x58024400
 8000e58:	58020000 	.word	0x58020000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea8:	f000 f8d4 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f005 f834 	bl	8005f4c <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	24080000 	.word	0x24080000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	24000678 	.word	0x24000678
 8000f18:	24000690 	.word	0x24000690

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f20:	f7ff fbb0 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f26:	490d      	ldr	r1, [pc, #52]	; (8000f5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	; (8000f68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f005 f805 	bl	8005f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fc2f 	bl	80007b0 <main>
  bx  lr
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f54:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f5c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000f60:	08006938 	.word	0x08006938
  ldr r2, =_sbss
 8000f64:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000f68:	24000690 	.word	0x24000690

08000f6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC3_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f76:	2003      	movs	r0, #3
 8000f78:	f000 f96e 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f7c:	f001 fb12 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_Init+0x68>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	f003 030f 	and.w	r3, r3, #15
 8000f8c:	4913      	ldr	r1, [pc, #76]	; (8000fdc <HAL_Init+0x6c>)
 8000f8e:	5ccb      	ldrb	r3, [r1, r3]
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
 8000f98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_Init+0x68>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_Init+0x6c>)
 8000fa4:	5cd3      	ldrb	r3, [r2, r3]
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_Init+0x70>)
 8000fb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_Init+0x74>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f814 	bl	8000fe8 <HAL_InitTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e002      	b.n	8000fd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fca:	f7ff fe1f 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	080068bc 	.word	0x080068bc
 8000fe0:	24000004 	.word	0x24000004
 8000fe4:	24000000 	.word	0x24000000

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_InitTick+0x60>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e021      	b.n	8001040 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_InitTick+0x64>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_InitTick+0x60>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f945 	bl	80012a2 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f91d 	bl	800126e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_InitTick+0x68>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2400000c 	.word	0x2400000c
 800104c:	24000000 	.word	0x24000000
 8001050:	24000008 	.word	0x24000008

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	2400000c 	.word	0x2400000c
 8001078:	2400067c 	.word	0x2400067c

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2400067c 	.word	0x2400067c

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2400000c 	.word	0x2400000c

080010dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetREVID+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0c1b      	lsrs	r3, r3, #16
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	5c001000 	.word	0x5c001000

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <__NVIC_SetPriorityGrouping+0x40>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	4313      	orrs	r3, r2
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x40>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	05fa0000 	.word	0x05fa0000

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff8e 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff47 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff5e 	bl	800113c <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff90 	bl	80011ac <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5f 	bl	8001158 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffb2 	bl	8001214 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012ca:	4b89      	ldr	r3, [pc, #548]	; (80014f0 <HAL_GPIO_Init+0x234>)
 80012cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012ce:	e194      	b.n	80015fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8186 	beq.w	80015f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d005      	beq.n	8001300 <HAL_GPIO_Init+0x44>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d130      	bne.n	8001362 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001336:	2201      	movs	r2, #1
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f003 0201 	and.w	r2, r3, #1
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b03      	cmp	r3, #3
 800136c:	d017      	beq.n	800139e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d123      	bne.n	80013f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	69b9      	ldr	r1, [r7, #24]
 80013ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0203 	and.w	r2, r3, #3
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 80e0 	beq.w	80015f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001434:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <HAL_GPIO_Init+0x238>)
 8001436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800143a:	4a2e      	ldr	r2, [pc, #184]	; (80014f4 <HAL_GPIO_Init+0x238>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <HAL_GPIO_Init+0x238>)
 8001446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001452:	4a29      	ldr	r2, [pc, #164]	; (80014f8 <HAL_GPIO_Init+0x23c>)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a20      	ldr	r2, [pc, #128]	; (80014fc <HAL_GPIO_Init+0x240>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d052      	beq.n	8001524 <HAL_GPIO_Init+0x268>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <HAL_GPIO_Init+0x244>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d031      	beq.n	80014ea <HAL_GPIO_Init+0x22e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <HAL_GPIO_Init+0x248>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d02b      	beq.n	80014e6 <HAL_GPIO_Init+0x22a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <HAL_GPIO_Init+0x24c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d025      	beq.n	80014e2 <HAL_GPIO_Init+0x226>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a1c      	ldr	r2, [pc, #112]	; (800150c <HAL_GPIO_Init+0x250>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d01f      	beq.n	80014de <HAL_GPIO_Init+0x222>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <HAL_GPIO_Init+0x254>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d019      	beq.n	80014da <HAL_GPIO_Init+0x21e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <HAL_GPIO_Init+0x258>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0x21a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_GPIO_Init+0x25c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00d      	beq.n	80014d2 <HAL_GPIO_Init+0x216>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a18      	ldr	r2, [pc, #96]	; (800151c <HAL_GPIO_Init+0x260>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d007      	beq.n	80014ce <HAL_GPIO_Init+0x212>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_GPIO_Init+0x264>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_GPIO_Init+0x20e>
 80014c6:	2309      	movs	r3, #9
 80014c8:	e02d      	b.n	8001526 <HAL_GPIO_Init+0x26a>
 80014ca:	230a      	movs	r3, #10
 80014cc:	e02b      	b.n	8001526 <HAL_GPIO_Init+0x26a>
 80014ce:	2308      	movs	r3, #8
 80014d0:	e029      	b.n	8001526 <HAL_GPIO_Init+0x26a>
 80014d2:	2307      	movs	r3, #7
 80014d4:	e027      	b.n	8001526 <HAL_GPIO_Init+0x26a>
 80014d6:	2306      	movs	r3, #6
 80014d8:	e025      	b.n	8001526 <HAL_GPIO_Init+0x26a>
 80014da:	2305      	movs	r3, #5
 80014dc:	e023      	b.n	8001526 <HAL_GPIO_Init+0x26a>
 80014de:	2304      	movs	r3, #4
 80014e0:	e021      	b.n	8001526 <HAL_GPIO_Init+0x26a>
 80014e2:	2303      	movs	r3, #3
 80014e4:	e01f      	b.n	8001526 <HAL_GPIO_Init+0x26a>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e01d      	b.n	8001526 <HAL_GPIO_Init+0x26a>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e01b      	b.n	8001526 <HAL_GPIO_Init+0x26a>
 80014ee:	bf00      	nop
 80014f0:	58000080 	.word	0x58000080
 80014f4:	58024400 	.word	0x58024400
 80014f8:	58000400 	.word	0x58000400
 80014fc:	58020000 	.word	0x58020000
 8001500:	58020400 	.word	0x58020400
 8001504:	58020800 	.word	0x58020800
 8001508:	58020c00 	.word	0x58020c00
 800150c:	58021000 	.word	0x58021000
 8001510:	58021400 	.word	0x58021400
 8001514:	58021800 	.word	0x58021800
 8001518:	58021c00 	.word	0x58021c00
 800151c:	58022000 	.word	0x58022000
 8001520:	58022400 	.word	0x58022400
 8001524:	2300      	movs	r3, #0
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	f002 0203 	and.w	r2, r2, #3
 800152c:	0092      	lsls	r2, r2, #2
 800152e:	4093      	lsls	r3, r2
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001536:	4938      	ldr	r1, [pc, #224]	; (8001618 <HAL_GPIO_Init+0x35c>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800156a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	3301      	adds	r3, #1
 80015f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	f47f ae63 	bne.w	80012d0 <HAL_GPIO_Init+0x14>
  }
}
 800160a:	bf00      	nop
 800160c:	bf00      	nop
 800160e:	3724      	adds	r7, #36	; 0x24
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	58000400 	.word	0x58000400

0800161c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001624:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_HSEM_FastTake+0x2c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3320      	adds	r3, #32
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_HSEM_FastTake+0x30>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	e000      	b.n	800163a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	58026400 	.word	0x58026400
 800164c:	80000300 	.word	0x80000300

08001650 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800165a:	4906      	ldr	r1, [pc, #24]	; (8001674 <HAL_HSEM_Release+0x24>)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	58026400 	.word	0x58026400

08001678 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167a:	b08f      	sub	sp, #60	; 0x3c
 800167c:	af0a      	add	r7, sp, #40	; 0x28
 800167e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e116      	b.n	80018b8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d106      	bne.n	80016aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fb51 	bl	8000d4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2203      	movs	r2, #3
 80016ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f004 f9a3 	bl	8005a14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	687e      	ldr	r6, [r7, #4]
 80016d6:	466d      	mov	r5, sp
 80016d8:	f106 0410 	add.w	r4, r6, #16
 80016dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ec:	1d33      	adds	r3, r6, #4
 80016ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f0:	6838      	ldr	r0, [r7, #0]
 80016f2:	f004 f921 	bl	8005938 <USB_CoreInit>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0d7      	b.n	80018b8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f004 f991 	bl	8005a36 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e04a      	b.n	80017b0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	333d      	adds	r3, #61	; 0x3d
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	333c      	adds	r3, #60	; 0x3c
 800173e:	7bfa      	ldrb	r2, [r7, #15]
 8001740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	b298      	uxth	r0, r3
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3344      	adds	r3, #68	; 0x44
 8001756:	4602      	mov	r2, r0
 8001758:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800175a:	7bfa      	ldrb	r2, [r7, #15]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	3340      	adds	r3, #64	; 0x40
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3348      	adds	r3, #72	; 0x48
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4413      	add	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	334c      	adds	r3, #76	; 0x4c
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	3354      	adds	r3, #84	; 0x54
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	3301      	adds	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d3af      	bcc.n	800171a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e044      	b.n	800184a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	3301      	adds	r3, #1
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	d3b5      	bcc.n	80017c0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	687e      	ldr	r6, [r7, #4]
 800185c:	466d      	mov	r5, sp
 800185e:	f106 0410 	add.w	r4, r6, #16
 8001862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800186e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001872:	1d33      	adds	r3, r6, #4
 8001874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001876:	6838      	ldr	r0, [r7, #0]
 8001878:	f004 f92a 	bl	8005ad0 <USB_DevInit>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2202      	movs	r2, #2
 8001886:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e014      	b.n	80018b8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d102      	bne.n	80018ac <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f80a 	bl	80018c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f004 fae8 	bl	8005e86 <USB_DevDisconnect>

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_PCDEx_ActivateLPM+0x44>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	10000003 	.word	0x10000003

08001908 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	2b06      	cmp	r3, #6
 800191a:	d00a      	beq.n	8001932 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800191c:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e040      	b.n	80019b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e03e      	b.n	80019b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800193a:	491f      	ldr	r1, [pc, #124]	; (80019b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4313      	orrs	r3, r2
 8001940:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001942:	f7ff fb9b 	bl	800107c <HAL_GetTick>
 8001946:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001948:	e009      	b.n	800195e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800194a:	f7ff fb97 	bl	800107c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001958:	d901      	bls.n	800195e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e028      	b.n	80019b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800196a:	d1ee      	bne.n	800194a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b1e      	cmp	r3, #30
 8001970:	d008      	beq.n	8001984 <HAL_PWREx_ConfigSupply+0x7c>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b2e      	cmp	r3, #46	; 0x2e
 8001976:	d005      	beq.n	8001984 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b1d      	cmp	r3, #29
 800197c:	d002      	beq.n	8001984 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b2d      	cmp	r3, #45	; 0x2d
 8001982:	d114      	bne.n	80019ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001984:	f7ff fb7a 	bl	800107c <HAL_GetTick>
 8001988:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800198a:	e009      	b.n	80019a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800198c:	f7ff fb76 	bl	800107c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800199a:	d901      	bls.n	80019a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e007      	b.n	80019b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ac:	d1ee      	bne.n	800198c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	58024800 	.word	0x58024800

080019bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ca:	60d3      	str	r3, [r2, #12]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	58024800 	.word	0x58024800

080019dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	; 0x30
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f000 bc1d 	b.w	800222a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 8087 	beq.w	8001b0c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fe:	4b99      	ldr	r3, [pc, #612]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a08:	4b96      	ldr	r3, [pc, #600]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a10:	2b10      	cmp	r3, #16
 8001a12:	d007      	beq.n	8001a24 <HAL_RCC_OscConfig+0x48>
 8001a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a16:	2b18      	cmp	r3, #24
 8001a18:	d110      	bne.n	8001a3c <HAL_RCC_OscConfig+0x60>
 8001a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d10b      	bne.n	8001a3c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a24:	4b8f      	ldr	r3, [pc, #572]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d06c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x12e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d168      	bne.n	8001b0a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e3f6      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a44:	d106      	bne.n	8001a54 <HAL_RCC_OscConfig+0x78>
 8001a46:	4b87      	ldr	r3, [pc, #540]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a86      	ldr	r2, [pc, #536]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e02e      	b.n	8001ab2 <HAL_RCC_OscConfig+0xd6>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10c      	bne.n	8001a76 <HAL_RCC_OscConfig+0x9a>
 8001a5c:	4b81      	ldr	r3, [pc, #516]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a80      	ldr	r2, [pc, #512]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b7e      	ldr	r3, [pc, #504]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a7d      	ldr	r2, [pc, #500]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	e01d      	b.n	8001ab2 <HAL_RCC_OscConfig+0xd6>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0xbe>
 8001a80:	4b78      	ldr	r3, [pc, #480]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a77      	ldr	r2, [pc, #476]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b75      	ldr	r3, [pc, #468]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a74      	ldr	r2, [pc, #464]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0xd6>
 8001a9a:	4b72      	ldr	r3, [pc, #456]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a71      	ldr	r2, [pc, #452]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b6f      	ldr	r3, [pc, #444]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a6e      	ldr	r2, [pc, #440]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d013      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff fadf 	bl	800107c <HAL_GetTick>
 8001abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fadb 	bl	800107c <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b64      	cmp	r3, #100	; 0x64
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e3aa      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ad4:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0xe6>
 8001ae0:	e014      	b.n	8001b0c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff facb 	bl	800107c <HAL_GetTick>
 8001ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aea:	f7ff fac7 	bl	800107c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b64      	cmp	r3, #100	; 0x64
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e396      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001afc:	4b59      	ldr	r3, [pc, #356]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x10e>
 8001b08:	e000      	b.n	8001b0c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80cb 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1a:	4b52      	ldr	r3, [pc, #328]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b22:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b24:	4b4f      	ldr	r3, [pc, #316]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_RCC_OscConfig+0x164>
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	2b18      	cmp	r3, #24
 8001b34:	d156      	bne.n	8001be4 <HAL_RCC_OscConfig+0x208>
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d151      	bne.n	8001be4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b40:	4b48      	ldr	r3, [pc, #288]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_OscConfig+0x17c>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e368      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b58:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 0219 	bic.w	r2, r3, #25
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	493f      	ldr	r1, [pc, #252]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b6a:	f7ff fa87 	bl	800107c <HAL_GetTick>
 8001b6e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b72:	f7ff fa83 	bl	800107c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e352      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b84:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	f7ff faa4 	bl	80010dc <HAL_GetREVID>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d817      	bhi.n	8001bce <HAL_RCC_OscConfig+0x1f2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b40      	cmp	r3, #64	; 0x40
 8001ba4:	d108      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x1dc>
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001bae:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb6:	e07b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	031b      	lsls	r3, r3, #12
 8001bc6:	4927      	ldr	r1, [pc, #156]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bcc:	e070      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	061b      	lsls	r3, r3, #24
 8001bdc:	4921      	ldr	r1, [pc, #132]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be2:	e065      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d048      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 0219 	bic.w	r2, r3, #25
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	491a      	ldr	r1, [pc, #104]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fa3d 	bl	800107c <HAL_GetTick>
 8001c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff fa39 	bl	800107c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e308      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	f7ff fa5a 	bl	80010dc <HAL_GetREVID>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d81a      	bhi.n	8001c68 <HAL_RCC_OscConfig+0x28c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d108      	bne.n	8001c4c <HAL_RCC_OscConfig+0x270>
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	6053      	str	r3, [r2, #4]
 8001c4a:	e031      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2d4>
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	031b      	lsls	r3, r3, #12
 8001c5a:	4902      	ldr	r1, [pc, #8]	; (8001c64 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
 8001c60:	e026      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2d4>
 8001c62:	bf00      	nop
 8001c64:	58024400 	.word	0x58024400
 8001c68:	4b9a      	ldr	r3, [pc, #616]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	061b      	lsls	r3, r3, #24
 8001c76:	4997      	ldr	r1, [pc, #604]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
 8001c7c:	e018      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7e:	4b95      	ldr	r3, [pc, #596]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a94      	ldr	r2, [pc, #592]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f9f7 	bl	800107c <HAL_GetTick>
 8001c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c92:	f7ff f9f3 	bl	800107c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e2c2      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ca4:	4b8b      	ldr	r3, [pc, #556]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80a9 	beq.w	8001e10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cbe:	4b85      	ldr	r3, [pc, #532]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cc8:	4b82      	ldr	r3, [pc, #520]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d007      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x308>
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b18      	cmp	r3, #24
 8001cd8:	d13a      	bne.n	8001d50 <HAL_RCC_OscConfig+0x374>
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d135      	bne.n	8001d50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ce4:	4b7b      	ldr	r3, [pc, #492]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_OscConfig+0x320>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	2b80      	cmp	r3, #128	; 0x80
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e296      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cfc:	f7ff f9ee 	bl	80010dc <HAL_GetREVID>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d817      	bhi.n	8001d3a <HAL_RCC_OscConfig+0x35e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	d108      	bne.n	8001d24 <HAL_RCC_OscConfig+0x348>
 8001d12:	4b70      	ldr	r3, [pc, #448]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d1a:	4a6e      	ldr	r2, [pc, #440]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001d1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d20:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d22:	e075      	b.n	8001e10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d24:	4b6b      	ldr	r3, [pc, #428]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	069b      	lsls	r3, r3, #26
 8001d32:	4968      	ldr	r1, [pc, #416]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d38:	e06a      	b.n	8001e10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d3a:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	061b      	lsls	r3, r3, #24
 8001d48:	4962      	ldr	r1, [pc, #392]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d4e:	e05f      	b.n	8001e10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d042      	beq.n	8001dde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d58:	4b5e      	ldr	r3, [pc, #376]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a5d      	ldr	r2, [pc, #372]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff f98a 	bl	800107c <HAL_GetTick>
 8001d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d6c:	f7ff f986 	bl	800107c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e255      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d7e:	4b55      	ldr	r3, [pc, #340]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d8a:	f7ff f9a7 	bl	80010dc <HAL_GetREVID>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d817      	bhi.n	8001dc8 <HAL_RCC_OscConfig+0x3ec>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d108      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3d6>
 8001da0:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001da8:	4a4a      	ldr	r2, [pc, #296]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001daa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dae:	6053      	str	r3, [r2, #4]
 8001db0:	e02e      	b.n	8001e10 <HAL_RCC_OscConfig+0x434>
 8001db2:	4b48      	ldr	r3, [pc, #288]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	069b      	lsls	r3, r3, #26
 8001dc0:	4944      	ldr	r1, [pc, #272]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
 8001dc6:	e023      	b.n	8001e10 <HAL_RCC_OscConfig+0x434>
 8001dc8:	4b42      	ldr	r3, [pc, #264]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	493f      	ldr	r1, [pc, #252]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60cb      	str	r3, [r1, #12]
 8001ddc:	e018      	b.n	8001e10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a3c      	ldr	r2, [pc, #240]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f947 	bl	800107c <HAL_GetTick>
 8001dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001df2:	f7ff f943 	bl	800107c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e212      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d036      	beq.n	8001e8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d019      	beq.n	8001e58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e28:	4a2a      	ldr	r2, [pc, #168]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e30:	f7ff f924 	bl	800107c <HAL_GetTick>
 8001e34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e38:	f7ff f920 	bl	800107c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e1ef      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x45c>
 8001e56:	e018      	b.n	8001e8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001e5e:	f023 0301 	bic.w	r3, r3, #1
 8001e62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e64:	f7ff f90a 	bl	800107c <HAL_GetTick>
 8001e68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7ff f906 	bl	800107c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e1d5      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d039      	beq.n	8001f0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d01c      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f8e7 	bl	800107c <HAL_GetTick>
 8001eae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001eb2:	f7ff f8e3 	bl	800107c <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e1b2      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_RCC_OscConfig+0x4f8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x4d6>
 8001ed0:	e01b      	b.n	8001f0a <HAL_RCC_OscConfig+0x52e>
 8001ed2:	bf00      	nop
 8001ed4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ed8:	4b9b      	ldr	r3, [pc, #620]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a9a      	ldr	r2, [pc, #616]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ee2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f8ca 	bl	800107c <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001eec:	f7ff f8c6 	bl	800107c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e195      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001efe:	4b92      	ldr	r3, [pc, #584]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8081 	beq.w	800201a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f18:	4b8c      	ldr	r3, [pc, #560]	; (800214c <HAL_RCC_OscConfig+0x770>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a8b      	ldr	r2, [pc, #556]	; (800214c <HAL_RCC_OscConfig+0x770>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f24:	f7ff f8aa 	bl	800107c <HAL_GetTick>
 8001f28:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7ff f8a6 	bl	800107c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e175      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f3e:	4b83      	ldr	r3, [pc, #524]	; (800214c <HAL_RCC_OscConfig+0x770>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d106      	bne.n	8001f60 <HAL_RCC_OscConfig+0x584>
 8001f52:	4b7d      	ldr	r3, [pc, #500]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a7c      	ldr	r2, [pc, #496]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	e02d      	b.n	8001fbc <HAL_RCC_OscConfig+0x5e0>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x5a6>
 8001f68:	4b77      	ldr	r3, [pc, #476]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	4a76      	ldr	r2, [pc, #472]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	6713      	str	r3, [r2, #112]	; 0x70
 8001f74:	4b74      	ldr	r3, [pc, #464]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	4a73      	ldr	r2, [pc, #460]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001f7a:	f023 0304 	bic.w	r3, r3, #4
 8001f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f80:	e01c      	b.n	8001fbc <HAL_RCC_OscConfig+0x5e0>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x5c8>
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	4a6e      	ldr	r2, [pc, #440]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	6713      	str	r3, [r2, #112]	; 0x70
 8001f96:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	4a6b      	ldr	r2, [pc, #428]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0x5e0>
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	4a67      	ldr	r2, [pc, #412]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb0:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb4:	4a64      	ldr	r2, [pc, #400]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001fb6:	f023 0304 	bic.w	r3, r3, #4
 8001fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d015      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff f85a 	bl	800107c <HAL_GetTick>
 8001fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fcc:	f7ff f856 	bl	800107c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e123      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fe2:	4b59      	ldr	r3, [pc, #356]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0ee      	beq.n	8001fcc <HAL_RCC_OscConfig+0x5f0>
 8001fee:	e014      	b.n	800201a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff f844 	bl	800107c <HAL_GetTick>
 8001ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7ff f840 	bl	800107c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e10d      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800200e:	4b4e      	ldr	r3, [pc, #312]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1ee      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8102 	beq.w	8002228 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800202c:	2b18      	cmp	r3, #24
 800202e:	f000 80bd 	beq.w	80021ac <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2b02      	cmp	r3, #2
 8002038:	f040 809e 	bne.w	8002178 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b42      	ldr	r3, [pc, #264]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a41      	ldr	r2, [pc, #260]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7ff f818 	bl	800107c <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002050:	f7ff f814 	bl	800107c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e0e3      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002062:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002072:	4b37      	ldr	r3, [pc, #220]	; (8002150 <HAL_RCC_OscConfig+0x774>)
 8002074:	4013      	ands	r3, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	430a      	orrs	r2, r1
 8002082:	4931      	ldr	r1, [pc, #196]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002084:	4313      	orrs	r3, r2
 8002086:	628b      	str	r3, [r1, #40]	; 0x28
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	3b01      	subs	r3, #1
 800208e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	3b01      	subs	r3, #1
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	b29b      	uxth	r3, r3
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	3b01      	subs	r3, #1
 80020a4:	041b      	lsls	r3, r3, #16
 80020a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b0:	3b01      	subs	r3, #1
 80020b2:	061b      	lsls	r3, r3, #24
 80020b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80020b8:	4923      	ldr	r1, [pc, #140]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020ca:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 80020cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ce:	4b21      	ldr	r3, [pc, #132]	; (8002154 <HAL_RCC_OscConfig+0x778>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020d6:	00d2      	lsls	r2, r2, #3
 80020d8:	491b      	ldr	r1, [pc, #108]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f023 020c 	bic.w	r2, r3, #12
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4917      	ldr	r1, [pc, #92]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	f023 0202 	bic.w	r2, r3, #2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	4912      	ldr	r1, [pc, #72]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002118:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	4a07      	ldr	r2, [pc, #28]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <HAL_RCC_OscConfig+0x76c>)
 8002138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800213c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7fe ff9d 	bl	800107c <HAL_GetTick>
 8002142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002144:	e011      	b.n	800216a <HAL_RCC_OscConfig+0x78e>
 8002146:	bf00      	nop
 8002148:	58024400 	.word	0x58024400
 800214c:	58024800 	.word	0x58024800
 8002150:	fffffc0c 	.word	0xfffffc0c
 8002154:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe ff90 	bl	800107c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e05f      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800216a:	4b32      	ldr	r3, [pc, #200]	; (8002234 <HAL_RCC_OscConfig+0x858>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x77c>
 8002176:	e057      	b.n	8002228 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <HAL_RCC_OscConfig+0x858>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2d      	ldr	r2, [pc, #180]	; (8002234 <HAL_RCC_OscConfig+0x858>)
 800217e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe ff7a 	bl	800107c <HAL_GetTick>
 8002188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7fe ff76 	bl	800107c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e045      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800219e:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_RCC_OscConfig+0x858>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x7b0>
 80021aa:	e03d      	b.n	8002228 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_RCC_OscConfig+0x858>)
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_RCC_OscConfig+0x858>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d031      	beq.n	8002224 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f003 0203 	and.w	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d12a      	bne.n	8002224 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d122      	bne.n	8002224 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d11a      	bne.n	8002224 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	0a5b      	lsrs	r3, r3, #9
 80021f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d111      	bne.n	8002224 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	0c1b      	lsrs	r3, r3, #16
 8002204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d108      	bne.n	8002224 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	0e1b      	lsrs	r3, r3, #24
 8002216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3730      	adds	r7, #48	; 0x30
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	58024400 	.word	0x58024400

08002238 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e19c      	b.n	8002586 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800224c:	4b8a      	ldr	r3, [pc, #552]	; (8002478 <HAL_RCC_ClockConfig+0x240>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d910      	bls.n	800227c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b87      	ldr	r3, [pc, #540]	; (8002478 <HAL_RCC_ClockConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 020f 	bic.w	r2, r3, #15
 8002262:	4985      	ldr	r1, [pc, #532]	; (8002478 <HAL_RCC_ClockConfig+0x240>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b83      	ldr	r3, [pc, #524]	; (8002478 <HAL_RCC_ClockConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e184      	b.n	8002586 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d010      	beq.n	80022aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	4b7b      	ldr	r3, [pc, #492]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002294:	429a      	cmp	r2, r3
 8002296:	d908      	bls.n	80022aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002298:	4b78      	ldr	r3, [pc, #480]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	4975      	ldr	r1, [pc, #468]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d010      	beq.n	80022d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	4b70      	ldr	r3, [pc, #448]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d908      	bls.n	80022d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022c6:	4b6d      	ldr	r3, [pc, #436]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	496a      	ldr	r1, [pc, #424]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d010      	beq.n	8002306 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699a      	ldr	r2, [r3, #24]
 80022e8:	4b64      	ldr	r3, [pc, #400]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d908      	bls.n	8002306 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022f4:	4b61      	ldr	r3, [pc, #388]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	495e      	ldr	r1, [pc, #376]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 8002302:	4313      	orrs	r3, r2
 8002304:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	d010      	beq.n	8002334 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	4b59      	ldr	r3, [pc, #356]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800231e:	429a      	cmp	r2, r3
 8002320:	d908      	bls.n	8002334 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002322:	4b56      	ldr	r3, [pc, #344]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4953      	ldr	r1, [pc, #332]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 8002330:	4313      	orrs	r3, r2
 8002332:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d010      	beq.n	8002362 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	4b4d      	ldr	r3, [pc, #308]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	429a      	cmp	r2, r3
 800234e:	d908      	bls.n	8002362 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	4b4a      	ldr	r3, [pc, #296]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f023 020f 	bic.w	r2, r3, #15
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4947      	ldr	r1, [pc, #284]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 800235e:	4313      	orrs	r3, r2
 8002360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d055      	beq.n	800241a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4940      	ldr	r1, [pc, #256]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 800237c:	4313      	orrs	r3, r2
 800237e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d107      	bne.n	8002398 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002388:	4b3c      	ldr	r3, [pc, #240]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d121      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0f6      	b.n	8002586 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d115      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0ea      	b.n	8002586 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023b8:	4b30      	ldr	r3, [pc, #192]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d109      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0de      	b.n	8002586 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023c8:	4b2c      	ldr	r3, [pc, #176]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0d6      	b.n	8002586 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023d8:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f023 0207 	bic.w	r2, r3, #7
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4925      	ldr	r1, [pc, #148]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe fe47 	bl	800107c <HAL_GetTick>
 80023ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f2:	f7fe fe43 	bl	800107c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0be      	b.n	8002586 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002408:	4b1c      	ldr	r3, [pc, #112]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	429a      	cmp	r2, r3
 8002418:	d1eb      	bne.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d010      	beq.n	8002448 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	429a      	cmp	r2, r3
 8002434:	d208      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f023 020f 	bic.w	r2, r3, #15
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	490e      	ldr	r1, [pc, #56]	; (800247c <HAL_RCC_ClockConfig+0x244>)
 8002444:	4313      	orrs	r3, r2
 8002446:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_ClockConfig+0x240>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d214      	bcs.n	8002480 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_RCC_ClockConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 020f 	bic.w	r2, r3, #15
 800245e:	4906      	ldr	r1, [pc, #24]	; (8002478 <HAL_RCC_ClockConfig+0x240>)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <HAL_RCC_ClockConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e086      	b.n	8002586 <HAL_RCC_ClockConfig+0x34e>
 8002478:	52002000 	.word	0x52002000
 800247c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d010      	beq.n	80024ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002498:	429a      	cmp	r2, r3
 800249a:	d208      	bcs.n	80024ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800249c:	4b3c      	ldr	r3, [pc, #240]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	4939      	ldr	r1, [pc, #228]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d010      	beq.n	80024dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d208      	bcs.n	80024dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024ca:	4b31      	ldr	r3, [pc, #196]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	492e      	ldr	r1, [pc, #184]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d010      	beq.n	800250a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699a      	ldr	r2, [r3, #24]
 80024ec:	4b28      	ldr	r3, [pc, #160]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d208      	bcs.n	800250a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024f8:	4b25      	ldr	r3, [pc, #148]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4922      	ldr	r1, [pc, #136]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 8002506:	4313      	orrs	r3, r2
 8002508:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b00      	cmp	r3, #0
 8002514:	d010      	beq.n	8002538 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002522:	429a      	cmp	r2, r3
 8002524:	d208      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002526:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4917      	ldr	r1, [pc, #92]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 8002534:	4313      	orrs	r3, r2
 8002536:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002538:	f000 f834 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 800253c:	4602      	mov	r2, r0
 800253e:	4b14      	ldr	r3, [pc, #80]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	4912      	ldr	r1, [pc, #72]	; (8002594 <HAL_RCC_ClockConfig+0x35c>)
 800254a:	5ccb      	ldrb	r3, [r1, r3]
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_RCC_ClockConfig+0x358>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <HAL_RCC_ClockConfig+0x35c>)
 8002560:	5cd3      	ldrb	r3, [r2, r3]
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <HAL_RCC_ClockConfig+0x360>)
 800256e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002570:	4a0a      	ldr	r2, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x364>)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_RCC_ClockConfig+0x368>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fd34 	bl	8000fe8 <HAL_InitTick>
 8002580:	4603      	mov	r3, r0
 8002582:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	58024400 	.word	0x58024400
 8002594:	080068bc 	.word	0x080068bc
 8002598:	24000004 	.word	0x24000004
 800259c:	24000000 	.word	0x24000000
 80025a0:	24000008 	.word	0x24000008

080025a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025aa:	4bb3      	ldr	r3, [pc, #716]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025b2:	2b18      	cmp	r3, #24
 80025b4:	f200 8155 	bhi.w	8002862 <HAL_RCC_GetSysClockFreq+0x2be>
 80025b8:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025be:	bf00      	nop
 80025c0:	08002625 	.word	0x08002625
 80025c4:	08002863 	.word	0x08002863
 80025c8:	08002863 	.word	0x08002863
 80025cc:	08002863 	.word	0x08002863
 80025d0:	08002863 	.word	0x08002863
 80025d4:	08002863 	.word	0x08002863
 80025d8:	08002863 	.word	0x08002863
 80025dc:	08002863 	.word	0x08002863
 80025e0:	0800264b 	.word	0x0800264b
 80025e4:	08002863 	.word	0x08002863
 80025e8:	08002863 	.word	0x08002863
 80025ec:	08002863 	.word	0x08002863
 80025f0:	08002863 	.word	0x08002863
 80025f4:	08002863 	.word	0x08002863
 80025f8:	08002863 	.word	0x08002863
 80025fc:	08002863 	.word	0x08002863
 8002600:	08002651 	.word	0x08002651
 8002604:	08002863 	.word	0x08002863
 8002608:	08002863 	.word	0x08002863
 800260c:	08002863 	.word	0x08002863
 8002610:	08002863 	.word	0x08002863
 8002614:	08002863 	.word	0x08002863
 8002618:	08002863 	.word	0x08002863
 800261c:	08002863 	.word	0x08002863
 8002620:	08002657 	.word	0x08002657
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002624:	4b94      	ldr	r3, [pc, #592]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b00      	cmp	r3, #0
 800262e:	d009      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002630:	4b91      	ldr	r3, [pc, #580]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	08db      	lsrs	r3, r3, #3
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	4a90      	ldr	r2, [pc, #576]	; (800287c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
 8002640:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002642:	e111      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002644:	4b8d      	ldr	r3, [pc, #564]	; (800287c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002646:	61bb      	str	r3, [r7, #24]
    break;
 8002648:	e10e      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800264a:	4b8d      	ldr	r3, [pc, #564]	; (8002880 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800264c:	61bb      	str	r3, [r7, #24]
    break;
 800264e:	e10b      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002650:	4b8c      	ldr	r3, [pc, #560]	; (8002884 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002652:	61bb      	str	r3, [r7, #24]
    break;
 8002654:	e108      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002656:	4b88      	ldr	r3, [pc, #544]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002660:	4b85      	ldr	r3, [pc, #532]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800266a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800266c:	4b82      	ldr	r3, [pc, #520]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002676:	4b80      	ldr	r3, [pc, #512]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267a:	08db      	lsrs	r3, r3, #3
 800267c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80e1 	beq.w	800285c <HAL_RCC_GetSysClockFreq+0x2b8>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b02      	cmp	r3, #2
 800269e:	f000 8083 	beq.w	80027a8 <HAL_RCC_GetSysClockFreq+0x204>
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	f200 80a1 	bhi.w	80027ec <HAL_RCC_GetSysClockFreq+0x248>
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x114>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d056      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x1c0>
 80026b6:	e099      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026b8:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d02d      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80026c4:	4b6c      	ldr	r3, [pc, #432]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	08db      	lsrs	r3, r3, #3
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	4a6b      	ldr	r2, [pc, #428]	; (800287c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
 80026d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	ee07 3a90 	vmov	s15, r3
 80026dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ee:	4b62      	ldr	r3, [pc, #392]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002702:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002888 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800270a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800270e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800271e:	e087      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800288c <HAL_RCC_GetSysClockFreq+0x2e8>
 800272e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002732:	4b51      	ldr	r3, [pc, #324]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002742:	ed97 6a02 	vldr	s12, [r7, #8]
 8002746:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002888 <HAL_RCC_GetSysClockFreq+0x2e4>
 800274a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800274e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800275a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002762:	e065      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002890 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002776:	4b40      	ldr	r3, [pc, #256]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002786:	ed97 6a02 	vldr	s12, [r7, #8]
 800278a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002888 <HAL_RCC_GetSysClockFreq+0x2e4>
 800278e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800279a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800279e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027a6:	e043      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002894 <HAL_RCC_GetSysClockFreq+0x2f0>
 80027b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ba:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002888 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027ea:	e021      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002890 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027fe:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002812:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002888 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800281a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800281e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800282e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	0a5b      	lsrs	r3, r3, #9
 8002836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800283a:	3301      	adds	r3, #1
 800283c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002848:	edd7 6a07 	vldr	s13, [r7, #28]
 800284c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002854:	ee17 3a90 	vmov	r3, s15
 8002858:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800285a:	e005      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    break;
 8002860:	e002      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002864:	61bb      	str	r3, [r7, #24]
    break;
 8002866:	bf00      	nop
  }

  return sysclockfreq;
 8002868:	69bb      	ldr	r3, [r7, #24]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	58024400 	.word	0x58024400
 800287c:	03d09000 	.word	0x03d09000
 8002880:	003d0900 	.word	0x003d0900
 8002884:	007a1200 	.word	0x007a1200
 8002888:	46000000 	.word	0x46000000
 800288c:	4c742400 	.word	0x4c742400
 8002890:	4a742400 	.word	0x4a742400
 8002894:	4af42400 	.word	0x4af42400

08002898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800289e:	f7ff fe81 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	490f      	ldr	r1, [pc, #60]	; (80028ec <HAL_RCC_GetHCLKFreq+0x54>)
 80028b0:	5ccb      	ldrb	r3, [r1, r3]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_RCC_GetHCLKFreq+0x54>)
 80028c6:	5cd3      	ldrb	r3, [r2, r3]
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80028d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028d6:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	58024400 	.word	0x58024400
 80028ec:	080068bc 	.word	0x080068bc
 80028f0:	24000004 	.word	0x24000004
 80028f4:	24000000 	.word	0x24000000

080028f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028fc:	f7ff ffcc 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4904      	ldr	r1, [pc, #16]	; (8002920 <HAL_RCC_GetPCLK1Freq+0x28>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	58024400 	.word	0x58024400
 8002920:	080068bc 	.word	0x080068bc

08002924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002928:	f7ff ffb6 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4904      	ldr	r1, [pc, #16]	; (800294c <HAL_RCC_GetPCLK2Freq+0x28>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}
 8002948:	58024400 	.word	0x58024400
 800294c:	080068bc 	.word	0x080068bc

08002950 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002958:	2300      	movs	r3, #0
 800295a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800295c:	2300      	movs	r3, #0
 800295e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d03f      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002970:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002974:	d02a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002976:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800297a:	d824      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800297c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002980:	d018      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002986:	d81e      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800298c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002990:	d007      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002992:	e018      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002994:	4ba3      	ldr	r3, [pc, #652]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	4aa2      	ldr	r2, [pc, #648]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800299a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029a0:	e015      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2102      	movs	r1, #2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 f9d5 	bl	8003d58 <RCCEx_PLL2_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029b2:	e00c      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3324      	adds	r3, #36	; 0x24
 80029b8:	2102      	movs	r1, #2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 fa7e 	bl	8003ebc <RCCEx_PLL3_Config>
 80029c0:	4603      	mov	r3, r0
 80029c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029c4:	e003      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
      break;
 80029ca:	e000      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d109      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80029d4:	4b93      	ldr	r3, [pc, #588]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029e0:	4990      	ldr	r1, [pc, #576]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	650b      	str	r3, [r1, #80]	; 0x50
 80029e6:	e001      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
 80029ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d03d      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d826      	bhi.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a00:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a1d 	.word	0x08002a1d
 8002a0c:	08002a2b 	.word	0x08002a2b
 8002a10:	08002a3d 	.word	0x08002a3d
 8002a14:	08002a55 	.word	0x08002a55
 8002a18:	08002a55 	.word	0x08002a55
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a1c:	4b81      	ldr	r3, [pc, #516]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	4a80      	ldr	r2, [pc, #512]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a28:	e015      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 f991 	bl	8003d58 <RCCEx_PLL2_Config>
 8002a36:	4603      	mov	r3, r0
 8002a38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a3a:	e00c      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3324      	adds	r3, #36	; 0x24
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 fa3a 	bl	8003ebc <RCCEx_PLL3_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a4c:	e003      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
      break;
 8002a52:	e000      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d109      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a5c:	4b71      	ldr	r3, [pc, #452]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a60:	f023 0207 	bic.w	r2, r3, #7
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	496e      	ldr	r1, [pc, #440]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8002a6e:	e001      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d042      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a88:	d02b      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8e:	d825      	bhi.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a90:	2bc0      	cmp	r3, #192	; 0xc0
 8002a92:	d028      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a94:	2bc0      	cmp	r3, #192	; 0xc0
 8002a96:	d821      	bhi.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a98:	2b80      	cmp	r3, #128	; 0x80
 8002a9a:	d016      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002a9c:	2b80      	cmp	r3, #128	; 0x80
 8002a9e:	d81d      	bhi.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d007      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002aa8:	e018      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aaa:	4b5e      	ldr	r3, [pc, #376]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	4a5d      	ldr	r2, [pc, #372]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ab6:	e017      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f001 f94a 	bl	8003d58 <RCCEx_PLL2_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ac8:	e00e      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3324      	adds	r3, #36	; 0x24
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 f9f3 	bl	8003ebc <RCCEx_PLL3_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ada:	e005      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	75fb      	strb	r3, [r7, #23]
      break;
 8002ae0:	e002      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002aee:	4b4d      	ldr	r3, [pc, #308]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	494a      	ldr	r1, [pc, #296]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	650b      	str	r3, [r1, #80]	; 0x50
 8002b00:	e001      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
 8002b04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d049      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b1c:	d030      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002b1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b22:	d82a      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b28:	d02c      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002b2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b2e:	d824      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b34:	d018      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3a:	d81e      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b44:	d007      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002b46:	e018      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b48:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	4a35      	ldr	r2, [pc, #212]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b54:	e017      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 f8fb 	bl	8003d58 <RCCEx_PLL2_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b66:	e00e      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3324      	adds	r3, #36	; 0x24
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f001 f9a4 	bl	8003ebc <RCCEx_PLL3_Config>
 8002b74:	4603      	mov	r3, r0
 8002b76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b78:	e005      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b7e:	e002      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b80:	bf00      	nop
 8002b82:	e000      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b9a:	4922      	ldr	r1, [pc, #136]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	658b      	str	r3, [r1, #88]	; 0x58
 8002ba0:	e001      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
 8002ba4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d04b      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bbc:	d030      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bc2:	d82a      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002bc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bc8:	d02e      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002bca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bce:	d824      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bd4:	d018      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bda:	d81e      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be4:	d007      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002be6:	e018      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bf4:	e019      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f001 f8ab 	bl	8003d58 <RCCEx_PLL2_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002c06:	e010      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3324      	adds	r3, #36	; 0x24
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 f954 	bl	8003ebc <RCCEx_PLL3_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c18:	e007      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c1e:	e004      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002c20:	bf00      	nop
 8002c22:	e002      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002c24:	58024400 	.word	0x58024400
      break;
 8002c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c30:	4b99      	ldr	r3, [pc, #612]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c3e:	4996      	ldr	r1, [pc, #600]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	658b      	str	r3, [r1, #88]	; 0x58
 8002c44:	e001      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d032      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5a:	2b30      	cmp	r3, #48	; 0x30
 8002c5c:	d01c      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002c5e:	2b30      	cmp	r3, #48	; 0x30
 8002c60:	d817      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d00c      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d813      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d016      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d10f      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c72:	4b89      	ldr	r3, [pc, #548]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	4a88      	ldr	r2, [pc, #544]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c7e:	e00e      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2102      	movs	r1, #2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 f866 	bl	8003d58 <RCCEx_PLL2_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c90:	e005      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
      break;
 8002c96:	e002      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002c98:	bf00      	nop
 8002c9a:	e000      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ca4:	4b7c      	ldr	r3, [pc, #496]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb0:	4979      	ldr	r1, [pc, #484]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002cb6:	e001      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d047      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cd0:	d030      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cd6:	d82a      	bhi.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002cd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cdc:	d02c      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002cde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ce2:	d824      	bhi.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce8:	d018      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cee:	d81e      	bhi.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf8:	d007      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002cfa:	e018      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cfc:	4b66      	ldr	r3, [pc, #408]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	4a65      	ldr	r2, [pc, #404]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d08:	e017      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f001 f821 	bl	8003d58 <RCCEx_PLL2_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d1a:	e00e      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3324      	adds	r3, #36	; 0x24
 8002d20:	2100      	movs	r1, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 f8ca 	bl	8003ebc <RCCEx_PLL3_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d2c:	e005      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
      break;
 8002d32:	e002      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d34:	bf00      	nop
 8002d36:	e000      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d40:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	4952      	ldr	r1, [pc, #328]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	650b      	str	r3, [r1, #80]	; 0x50
 8002d52:	e001      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d049      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6c:	d02e      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002d6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d72:	d828      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d78:	d02a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d7e:	d822      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d84:	d026      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002d86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d8a:	d81c      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d90:	d010      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d96:	d816      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01d      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da0:	d111      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2101      	movs	r1, #1
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 ffd5 	bl	8003d58 <RCCEx_PLL2_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002db2:	e012      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3324      	adds	r3, #36	; 0x24
 8002db8:	2101      	movs	r1, #1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 f87e 	bl	8003ebc <RCCEx_PLL3_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002dc4:	e009      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8002dca:	e006      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002dcc:	bf00      	nop
 8002dce:	e004      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002dd0:	bf00      	nop
 8002dd2:	e002      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002dd4:	bf00      	nop
 8002dd6:	e000      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002de0:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dec:	492a      	ldr	r1, [pc, #168]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	650b      	str	r3, [r1, #80]	; 0x50
 8002df2:	e001      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
 8002df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d04d      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e0e:	d02e      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e14:	d828      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1a:	d02a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e20:	d822      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e26:	d026      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002e28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e2c:	d81c      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e32:	d010      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e38:	d816      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01d      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e42:	d111      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3304      	adds	r3, #4
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 ff84 	bl	8003d58 <RCCEx_PLL2_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e54:	e012      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3324      	adds	r3, #36	; 0x24
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f001 f82d 	bl	8003ebc <RCCEx_PLL3_Config>
 8002e62:	4603      	mov	r3, r0
 8002e64:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e66:	e009      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e6c:	e006      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e6e:	bf00      	nop
 8002e70:	e004      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e72:	bf00      	nop
 8002e74:	e002      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e76:	bf00      	nop
 8002e78:	e000      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e90:	4901      	ldr	r1, [pc, #4]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	658b      	str	r3, [r1, #88]	; 0x58
 8002e96:	e003      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02f      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb4:	d00e      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eba:	d814      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002ec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ec4:	d10f      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec6:	4baf      	ldr	r3, [pc, #700]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	4aae      	ldr	r2, [pc, #696]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ed2:	e00c      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	2101      	movs	r1, #1
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 ff3c 	bl	8003d58 <RCCEx_PLL2_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ee4:	e003      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8002eea:	e000      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ef4:	4ba3      	ldr	r3, [pc, #652]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f00:	49a0      	ldr	r1, [pc, #640]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	650b      	str	r3, [r1, #80]	; 0x50
 8002f06:	e001      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d032      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d81b      	bhi.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002f20:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f5f 	.word	0x08002f5f
 8002f2c:	08002f39 	.word	0x08002f39
 8002f30:	08002f47 	.word	0x08002f47
 8002f34:	08002f5f 	.word	0x08002f5f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f38:	4b92      	ldr	r3, [pc, #584]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	4a91      	ldr	r2, [pc, #580]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f44:	e00c      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 ff03 	bl	8003d58 <RCCEx_PLL2_Config>
 8002f52:	4603      	mov	r3, r0
 8002f54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f56:	e003      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f5c:	e000      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f66:	4b87      	ldr	r3, [pc, #540]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4984      	ldr	r1, [pc, #528]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f78:	e001      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 8086 	beq.w	8003098 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f8c:	4b7e      	ldr	r3, [pc, #504]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a7d      	ldr	r2, [pc, #500]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f98:	f7fe f870 	bl	800107c <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f9e:	e009      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa0:	f7fe f86c 	bl	800107c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d902      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	75fb      	strb	r3, [r7, #23]
        break;
 8002fb2:	e005      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb4:	4b74      	ldr	r3, [pc, #464]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ef      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d166      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002fc6:	4b6f      	ldr	r3, [pc, #444]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fd0:	4053      	eors	r3, r2
 8002fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d013      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fda:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fe4:	4b67      	ldr	r3, [pc, #412]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a66      	ldr	r2, [pc, #408]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff0:	4b64      	ldr	r3, [pc, #400]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	4a63      	ldr	r2, [pc, #396]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ffc:	4a61      	ldr	r2, [pc, #388]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300c:	d115      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe f835 	bl	800107c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003014:	e00b      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe f831 	bl	800107c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d902      	bls.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	75fb      	strb	r3, [r7, #23]
            break;
 800302c:	e005      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800302e:	4b55      	ldr	r3, [pc, #340]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0ed      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d126      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800304e:	d10d      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003050:	4b4c      	ldr	r3, [pc, #304]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800305e:	0919      	lsrs	r1, r3, #4
 8003060:	4b4a      	ldr	r3, [pc, #296]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003062:	400b      	ands	r3, r1
 8003064:	4947      	ldr	r1, [pc, #284]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003066:	4313      	orrs	r3, r2
 8003068:	610b      	str	r3, [r1, #16]
 800306a:	e005      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800306c:	4b45      	ldr	r3, [pc, #276]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	4a44      	ldr	r2, [pc, #272]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003072:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003076:	6113      	str	r3, [r2, #16]
 8003078:	4b42      	ldr	r3, [pc, #264]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800307a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003086:	493f      	ldr	r1, [pc, #252]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003088:	4313      	orrs	r3, r2
 800308a:	670b      	str	r3, [r1, #112]	; 0x70
 800308c:	e004      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	75bb      	strb	r3, [r7, #22]
 8003092:	e001      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8085 	beq.w	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030aa:	2b28      	cmp	r3, #40	; 0x28
 80030ac:	d866      	bhi.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80030ae:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80030b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b4:	08003191 	.word	0x08003191
 80030b8:	0800317d 	.word	0x0800317d
 80030bc:	0800317d 	.word	0x0800317d
 80030c0:	0800317d 	.word	0x0800317d
 80030c4:	0800317d 	.word	0x0800317d
 80030c8:	0800317d 	.word	0x0800317d
 80030cc:	0800317d 	.word	0x0800317d
 80030d0:	0800317d 	.word	0x0800317d
 80030d4:	08003159 	.word	0x08003159
 80030d8:	0800317d 	.word	0x0800317d
 80030dc:	0800317d 	.word	0x0800317d
 80030e0:	0800317d 	.word	0x0800317d
 80030e4:	0800317d 	.word	0x0800317d
 80030e8:	0800317d 	.word	0x0800317d
 80030ec:	0800317d 	.word	0x0800317d
 80030f0:	0800317d 	.word	0x0800317d
 80030f4:	0800316b 	.word	0x0800316b
 80030f8:	0800317d 	.word	0x0800317d
 80030fc:	0800317d 	.word	0x0800317d
 8003100:	0800317d 	.word	0x0800317d
 8003104:	0800317d 	.word	0x0800317d
 8003108:	0800317d 	.word	0x0800317d
 800310c:	0800317d 	.word	0x0800317d
 8003110:	0800317d 	.word	0x0800317d
 8003114:	08003191 	.word	0x08003191
 8003118:	0800317d 	.word	0x0800317d
 800311c:	0800317d 	.word	0x0800317d
 8003120:	0800317d 	.word	0x0800317d
 8003124:	0800317d 	.word	0x0800317d
 8003128:	0800317d 	.word	0x0800317d
 800312c:	0800317d 	.word	0x0800317d
 8003130:	0800317d 	.word	0x0800317d
 8003134:	08003191 	.word	0x08003191
 8003138:	0800317d 	.word	0x0800317d
 800313c:	0800317d 	.word	0x0800317d
 8003140:	0800317d 	.word	0x0800317d
 8003144:	0800317d 	.word	0x0800317d
 8003148:	0800317d 	.word	0x0800317d
 800314c:	0800317d 	.word	0x0800317d
 8003150:	0800317d 	.word	0x0800317d
 8003154:	08003191 	.word	0x08003191
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fdfa 	bl	8003d58 <RCCEx_PLL2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003168:	e013      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3324      	adds	r3, #36	; 0x24
 800316e:	2101      	movs	r1, #1
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fea3 	bl	8003ebc <RCCEx_PLL3_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800317a:	e00a      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	75fb      	strb	r3, [r7, #23]
      break;
 8003180:	e007      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003182:	bf00      	nop
 8003184:	58024400 	.word	0x58024400
 8003188:	58024800 	.word	0x58024800
 800318c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003192:	7dfb      	ldrb	r3, [r7, #23]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003198:	4b96      	ldr	r3, [pc, #600]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a4:	4993      	ldr	r1, [pc, #588]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	654b      	str	r3, [r1, #84]	; 0x54
 80031aa:	e001      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
 80031ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d038      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d821      	bhi.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	0800320f 	.word	0x0800320f
 80031d0:	080031e5 	.word	0x080031e5
 80031d4:	080031f7 	.word	0x080031f7
 80031d8:	0800320f 	.word	0x0800320f
 80031dc:	0800320f 	.word	0x0800320f
 80031e0:	0800320f 	.word	0x0800320f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	2101      	movs	r1, #1
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fdb4 	bl	8003d58 <RCCEx_PLL2_Config>
 80031f0:	4603      	mov	r3, r0
 80031f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031f4:	e00c      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3324      	adds	r3, #36	; 0x24
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fe5d 	bl	8003ebc <RCCEx_PLL3_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003206:	e003      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
      break;
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800320e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003216:	4b77      	ldr	r3, [pc, #476]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	f023 0207 	bic.w	r2, r3, #7
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	4974      	ldr	r1, [pc, #464]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003224:	4313      	orrs	r3, r2
 8003226:	654b      	str	r3, [r1, #84]	; 0x54
 8003228:	e001      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322a:	7dfb      	ldrb	r3, [r7, #23]
 800322c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	2b05      	cmp	r3, #5
 8003242:	d821      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003244:	a201      	add	r2, pc, #4	; (adr r2, 800324c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	0800328f 	.word	0x0800328f
 8003250:	08003265 	.word	0x08003265
 8003254:	08003277 	.word	0x08003277
 8003258:	0800328f 	.word	0x0800328f
 800325c:	0800328f 	.word	0x0800328f
 8003260:	0800328f 	.word	0x0800328f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	2101      	movs	r1, #1
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fd74 	bl	8003d58 <RCCEx_PLL2_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003274:	e00c      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3324      	adds	r3, #36	; 0x24
 800327a:	2101      	movs	r1, #1
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fe1d 	bl	8003ebc <RCCEx_PLL3_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003286:	e003      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	75fb      	strb	r3, [r7, #23]
      break;
 800328c:	e000      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800328e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003296:	4b57      	ldr	r3, [pc, #348]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f023 0207 	bic.w	r2, r3, #7
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	4953      	ldr	r1, [pc, #332]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	658b      	str	r3, [r1, #88]	; 0x58
 80032aa:	e001      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d04b      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c6:	d02e      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80032c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032cc:	d828      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d02a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d822      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80032da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032de:	d026      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80032e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032e4:	d81c      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80032e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ea:	d010      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80032ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f0:	d816      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01d      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80032f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032fa:	d111      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3304      	adds	r3, #4
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fd28 	bl	8003d58 <RCCEx_PLL2_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800330c:	e012      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3324      	adds	r3, #36	; 0x24
 8003312:	2102      	movs	r1, #2
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fdd1 	bl	8003ebc <RCCEx_PLL3_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800331e:	e009      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
      break;
 8003324:	e006      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003326:	bf00      	nop
 8003328:	e004      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800332a:	bf00      	nop
 800332c:	e002      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800332e:	bf00      	nop
 8003330:	e000      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800333a:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003348:	492a      	ldr	r1, [pc, #168]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800334a:	4313      	orrs	r3, r2
 800334c:	654b      	str	r3, [r1, #84]	; 0x54
 800334e:	e001      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d04d      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003366:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800336a:	d02e      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800336c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003370:	d828      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	d02a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337c:	d822      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800337e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003382:	d026      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003388:	d81c      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800338a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338e:	d010      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	d816      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01d      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d111      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fcd6 	bl	8003d58 <RCCEx_PLL2_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80033b0:	e012      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3324      	adds	r3, #36	; 0x24
 80033b6:	2102      	movs	r1, #2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fd7f 	bl	8003ebc <RCCEx_PLL3_Config>
 80033be:	4603      	mov	r3, r0
 80033c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80033c2:	e009      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	75fb      	strb	r3, [r7, #23]
      break;
 80033c8:	e006      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80033ca:	bf00      	nop
 80033cc:	e004      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80033ce:	bf00      	nop
 80033d0:	e002      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80033d2:	bf00      	nop
 80033d4:	e000      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80033d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ec:	4901      	ldr	r1, [pc, #4]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	658b      	str	r3, [r1, #88]	; 0x58
 80033f2:	e003      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80033f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003404:	2b00      	cmp	r3, #0
 8003406:	d04b      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800340e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003412:	d02e      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003414:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003418:	d828      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800341a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341e:	d02a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d822      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003426:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800342a:	d026      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800342c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003430:	d81c      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003436:	d010      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800343c:	d816      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01d      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003446:	d111      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3304      	adds	r3, #4
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fc82 	bl	8003d58 <RCCEx_PLL2_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003458:	e012      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3324      	adds	r3, #36	; 0x24
 800345e:	2102      	movs	r1, #2
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fd2b 	bl	8003ebc <RCCEx_PLL3_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800346a:	e009      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	75fb      	strb	r3, [r7, #23]
      break;
 8003470:	e006      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003472:	bf00      	nop
 8003474:	e004      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800347e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003486:	4b9d      	ldr	r3, [pc, #628]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003494:	4999      	ldr	r1, [pc, #612]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003496:	4313      	orrs	r3, r2
 8003498:	658b      	str	r3, [r1, #88]	; 0x58
 800349a:	e001      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b6:	d10a      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3324      	adds	r3, #36	; 0x24
 80034bc:	2102      	movs	r1, #2
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fcfc 	bl	8003ebc <RCCEx_PLL3_Config>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034ce:	4b8b      	ldr	r3, [pc, #556]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034dc:	4987      	ldr	r1, [pc, #540]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f8:	d10a      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3324      	adds	r3, #36	; 0x24
 80034fe:	2102      	movs	r1, #2
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fcdb 	bl	8003ebc <RCCEx_PLL3_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003510:	4b7a      	ldr	r3, [pc, #488]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351e:	4977      	ldr	r1, [pc, #476]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003520:	4313      	orrs	r3, r2
 8003522:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d034      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800353a:	d01d      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800353c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003540:	d817      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354a:	d009      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800354c:	e011      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fbff 	bl	8003d58 <RCCEx_PLL2_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800355e:	e00c      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3324      	adds	r3, #36	; 0x24
 8003564:	2102      	movs	r1, #2
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fca8 	bl	8003ebc <RCCEx_PLL3_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003570:	e003      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	75fb      	strb	r3, [r7, #23]
      break;
 8003576:	e000      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800357a:	7dfb      	ldrb	r3, [r7, #23]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003580:	4b5e      	ldr	r3, [pc, #376]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800358e:	495b      	ldr	r1, [pc, #364]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003590:	4313      	orrs	r3, r2
 8003592:	658b      	str	r3, [r1, #88]	; 0x58
 8003594:	e001      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d033      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035b0:	d01c      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80035b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035b6:	d816      	bhi.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80035b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035bc:	d003      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80035be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c2:	d007      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80035c4:	e00f      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c6:	4b4d      	ldr	r3, [pc, #308]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	4a4c      	ldr	r2, [pc, #304]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80035d2:	e00c      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3324      	adds	r3, #36	; 0x24
 80035d8:	2101      	movs	r1, #1
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fc6e 	bl	8003ebc <RCCEx_PLL3_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80035e4:	e003      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ea:	e000      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80035ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10a      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f4:	4b41      	ldr	r3, [pc, #260]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003602:	493e      	ldr	r1, [pc, #248]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003604:	4313      	orrs	r3, r2
 8003606:	654b      	str	r3, [r1, #84]	; 0x54
 8003608:	e001      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d029      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003626:	d007      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003628:	e00f      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	4a33      	ldr	r2, [pc, #204]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003636:	e00b      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3304      	adds	r3, #4
 800363c:	2102      	movs	r1, #2
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fb8a 	bl	8003d58 <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003648:	e002      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	75fb      	strb	r3, [r7, #23]
      break;
 800364e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003662:	4926      	ldr	r1, [pc, #152]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003664:	4313      	orrs	r3, r2
 8003666:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003668:	e001      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3324      	adds	r3, #36	; 0x24
 800367e:	2102      	movs	r1, #2
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fc1b 	bl	8003ebc <RCCEx_PLL3_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d033      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a4:	d017      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80036a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036aa:	d811      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80036ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b0:	d013      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80036b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b6:	d80b      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d010      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80036bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c0:	d106      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c2:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	4a0d      	ldr	r2, [pc, #52]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80036ce:	e007      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	75fb      	strb	r3, [r7, #23]
      break;
 80036d4:	e004      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80036d6:	bf00      	nop
 80036d8:	e002      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80036da:	bf00      	nop
 80036dc:	e000      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80036de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f2:	4902      	ldr	r1, [pc, #8]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	654b      	str	r3, [r1, #84]	; 0x54
 80036f8:	e004      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80036fa:	bf00      	nop
 80036fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003710:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	492e      	ldr	r1, [pc, #184]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800371e:	4313      	orrs	r3, r2
 8003720:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800372e:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800373c:	4926      	ldr	r1, [pc, #152]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800373e:	4313      	orrs	r3, r2
 8003740:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d008      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800374e:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003752:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800375a:	491f      	ldr	r1, [pc, #124]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800375c:	4313      	orrs	r3, r2
 800375e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	4a19      	ldr	r2, [pc, #100]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003776:	6113      	str	r3, [r2, #16]
 8003778:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003782:	4915      	ldr	r1, [pc, #84]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003784:	4313      	orrs	r3, r2
 8003786:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	da08      	bge.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003790:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003794:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	490e      	ldr	r1, [pc, #56]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	4906      	ldr	r1, [pc, #24]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80037c2:	7dbb      	ldrb	r3, [r7, #22]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	58024400 	.word	0x58024400

080037dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80037e0:	f7ff f85a 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	4904      	ldr	r1, [pc, #16]	; (8003804 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	58024400 	.word	0x58024400
 8003804:	080068bc 	.word	0x080068bc

08003808 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003810:	4ba1      	ldr	r3, [pc, #644]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800381a:	4b9f      	ldr	r3, [pc, #636]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	0b1b      	lsrs	r3, r3, #12
 8003820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003824:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003826:	4b9c      	ldr	r3, [pc, #624]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003832:	4b99      	ldr	r3, [pc, #612]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	08db      	lsrs	r3, r3, #3
 8003838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8111 	beq.w	8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b02      	cmp	r3, #2
 800385a:	f000 8083 	beq.w	8003964 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b02      	cmp	r3, #2
 8003862:	f200 80a1 	bhi.w	80039a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d056      	beq.n	8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003872:	e099      	b.n	80039a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003874:	4b88      	ldr	r3, [pc, #544]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d02d      	beq.n	80038dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003880:	4b85      	ldr	r3, [pc, #532]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	08db      	lsrs	r3, r3, #3
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	4a84      	ldr	r2, [pc, #528]	; (8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
 8003890:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	ee07 3a90 	vmov	s15, r3
 8003898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038aa:	4b7b      	ldr	r3, [pc, #492]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80038be:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80038da:	e087      	b.n	80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80038ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ee:	4b6a      	ldr	r3, [pc, #424]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003902:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800391e:	e065      	b.n	80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800392e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003932:	4b59      	ldr	r3, [pc, #356]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003942:	ed97 6a03 	vldr	s12, [r7, #12]
 8003946:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800394a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003962:	e043      	b.n	80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003976:	4b48      	ldr	r3, [pc, #288]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003986:	ed97 6a03 	vldr	s12, [r7, #12]
 800398a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039a6:	e021      	b.n	80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ba:	4b37      	ldr	r3, [pc, #220]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	0a5b      	lsrs	r3, r3, #9
 80039f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a12:	ee17 2a90 	vmov	r2, s15
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003a1a:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	0c1b      	lsrs	r3, r3, #16
 8003a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a24:	ee07 3a90 	vmov	s15, r3
 8003a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a40:	ee17 2a90 	vmov	r2, s15
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	0e1b      	lsrs	r3, r3, #24
 8003a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a6e:	ee17 2a90 	vmov	r2, s15
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a76:	e008      	b.n	8003a8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
}
 8003a8a:	bf00      	nop
 8003a8c:	3724      	adds	r7, #36	; 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	58024400 	.word	0x58024400
 8003a9c:	03d09000 	.word	0x03d09000
 8003aa0:	46000000 	.word	0x46000000
 8003aa4:	4c742400 	.word	0x4c742400
 8003aa8:	4a742400 	.word	0x4a742400
 8003aac:	4af42400 	.word	0x4af42400

08003ab0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ab8:	4ba1      	ldr	r3, [pc, #644]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003ac2:	4b9f      	ldr	r3, [pc, #636]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	0d1b      	lsrs	r3, r3, #20
 8003ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003acc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ace:	4b9c      	ldr	r3, [pc, #624]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003ada:	4b99      	ldr	r3, [pc, #612]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	08db      	lsrs	r3, r3, #3
 8003ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8111 	beq.w	8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	f000 8083 	beq.w	8003c0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	f200 80a1 	bhi.w	8003c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d056      	beq.n	8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b1a:	e099      	b.n	8003c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b1c:	4b88      	ldr	r3, [pc, #544]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02d      	beq.n	8003b84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b28:	4b85      	ldr	r3, [pc, #532]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	08db      	lsrs	r3, r3, #3
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	4a84      	ldr	r2, [pc, #528]	; (8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
 8003b38:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b52:	4b7b      	ldr	r3, [pc, #492]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b82:	e087      	b.n	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b96:	4b6a      	ldr	r3, [pc, #424]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003baa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bc6:	e065      	b.n	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bda:	4b59      	ldr	r3, [pc, #356]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c0a:	e043      	b.n	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1e:	4b48      	ldr	r3, [pc, #288]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c4e:	e021      	b.n	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c62:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003c94:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	0a5b      	lsrs	r3, r3, #9
 8003c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cba:	ee17 2a90 	vmov	r2, s15
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003cc2:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce8:	ee17 2a90 	vmov	r2, s15
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003cf0:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	0e1b      	lsrs	r3, r3, #24
 8003cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d16:	ee17 2a90 	vmov	r2, s15
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d1e:	e008      	b.n	8003d32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	609a      	str	r2, [r3, #8]
}
 8003d32:	bf00      	nop
 8003d34:	3724      	adds	r7, #36	; 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	58024400 	.word	0x58024400
 8003d44:	03d09000 	.word	0x03d09000
 8003d48:	46000000 	.word	0x46000000
 8003d4c:	4c742400 	.word	0x4c742400
 8003d50:	4a742400 	.word	0x4a742400
 8003d54:	4af42400 	.word	0x4af42400

08003d58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d66:	4b53      	ldr	r3, [pc, #332]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d101      	bne.n	8003d76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e099      	b.n	8003eaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d76:	4b4f      	ldr	r3, [pc, #316]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a4e      	ldr	r2, [pc, #312]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003d7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d82:	f7fd f97b 	bl	800107c <HAL_GetTick>
 8003d86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d88:	e008      	b.n	8003d9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d8a:	f7fd f977 	bl	800107c <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e086      	b.n	8003eaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d9c:	4b45      	ldr	r3, [pc, #276]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f0      	bne.n	8003d8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003da8:	4b42      	ldr	r3, [pc, #264]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	031b      	lsls	r3, r3, #12
 8003db6:	493f      	ldr	r1, [pc, #252]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	628b      	str	r3, [r1, #40]	; 0x28
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	025b      	lsls	r3, r3, #9
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	061b      	lsls	r3, r3, #24
 8003de8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003dec:	4931      	ldr	r1, [pc, #196]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003df2:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	492d      	ldr	r1, [pc, #180]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e04:	4b2b      	ldr	r3, [pc, #172]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	f023 0220 	bic.w	r2, r3, #32
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	4928      	ldr	r1, [pc, #160]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e16:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e1c:	f023 0310 	bic.w	r3, r3, #16
 8003e20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <RCCEx_PLL2_Config+0x160>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	69d2      	ldr	r2, [r2, #28]
 8003e2e:	00d2      	lsls	r2, r2, #3
 8003e30:	4920      	ldr	r1, [pc, #128]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e36:	4b1f      	ldr	r3, [pc, #124]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e3c:	f043 0310 	orr.w	r3, r3, #16
 8003e40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e48:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	4a19      	ldr	r2, [pc, #100]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e54:	e00f      	b.n	8003e76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d106      	bne.n	8003e6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e5c:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e68:	e005      	b.n	8003e76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e6a:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a0e      	ldr	r2, [pc, #56]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e82:	f7fd f8fb 	bl	800107c <HAL_GetTick>
 8003e86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e88:	e008      	b.n	8003e9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e8a:	f7fd f8f7 	bl	800107c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e006      	b.n	8003eaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <RCCEx_PLL2_Config+0x15c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	ffff0007 	.word	0xffff0007

08003ebc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003eca:	4b53      	ldr	r3, [pc, #332]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d101      	bne.n	8003eda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e099      	b.n	800400e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003eda:	4b4f      	ldr	r3, [pc, #316]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a4e      	ldr	r2, [pc, #312]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee6:	f7fd f8c9 	bl	800107c <HAL_GetTick>
 8003eea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003eec:	e008      	b.n	8003f00 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003eee:	f7fd f8c5 	bl	800107c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e086      	b.n	800400e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f00:	4b45      	ldr	r3, [pc, #276]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f0      	bne.n	8003eee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f0c:	4b42      	ldr	r3, [pc, #264]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	051b      	lsls	r3, r3, #20
 8003f1a:	493f      	ldr	r1, [pc, #252]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	628b      	str	r3, [r1, #40]	; 0x28
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	025b      	lsls	r3, r3, #9
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	061b      	lsls	r3, r3, #24
 8003f4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f50:	4931      	ldr	r1, [pc, #196]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f56:	4b30      	ldr	r3, [pc, #192]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	492d      	ldr	r1, [pc, #180]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f68:	4b2b      	ldr	r3, [pc, #172]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	4928      	ldr	r1, [pc, #160]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f7a:	4b27      	ldr	r3, [pc, #156]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	4a26      	ldr	r2, [pc, #152]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f86:	4b24      	ldr	r3, [pc, #144]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8a:	4b24      	ldr	r3, [pc, #144]	; (800401c <RCCEx_PLL3_Config+0x160>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	69d2      	ldr	r2, [r2, #28]
 8003f92:	00d2      	lsls	r2, r2, #3
 8003f94:	4920      	ldr	r1, [pc, #128]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f9a:	4b1f      	ldr	r3, [pc, #124]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	4a1e      	ldr	r2, [pc, #120]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d106      	bne.n	8003fba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003fac:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	4a19      	ldr	r2, [pc, #100]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003fb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fb8:	e00f      	b.n	8003fda <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d106      	bne.n	8003fce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003fc0:	4b15      	ldr	r3, [pc, #84]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	4a14      	ldr	r2, [pc, #80]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003fc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fcc:	e005      	b.n	8003fda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003fce:	4b12      	ldr	r3, [pc, #72]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	4a11      	ldr	r2, [pc, #68]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003fda:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe6:	f7fd f849 	bl	800107c <HAL_GetTick>
 8003fea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fec:	e008      	b.n	8004000 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003fee:	f7fd f845 	bl	800107c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e006      	b.n	800400e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <RCCEx_PLL3_Config+0x15c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800400c:	7bfb      	ldrb	r3, [r7, #15]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	58024400 	.word	0x58024400
 800401c:	ffff0007 	.word	0xffff0007

08004020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e049      	b.n	80040c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fc fdfa 	bl	8000c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 f99e 	bl	80043a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d001      	beq.n	80040e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e04c      	b.n	8004182 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a26      	ldr	r2, [pc, #152]	; (8004190 <HAL_TIM_Base_Start+0xc0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d022      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d01d      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a22      	ldr	r2, [pc, #136]	; (8004194 <HAL_TIM_Base_Start+0xc4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d018      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a21      	ldr	r2, [pc, #132]	; (8004198 <HAL_TIM_Base_Start+0xc8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1f      	ldr	r2, [pc, #124]	; (800419c <HAL_TIM_Base_Start+0xcc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <HAL_TIM_Base_Start+0xd0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <HAL_TIM_Base_Start+0xd4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <HAL_TIM_Base_Start+0xd8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d115      	bne.n	800416c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_TIM_Base_Start+0xdc>)
 8004148:	4013      	ands	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b06      	cmp	r3, #6
 8004150:	d015      	beq.n	800417e <HAL_TIM_Base_Start+0xae>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004158:	d011      	beq.n	800417e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416a:	e008      	b.n	800417e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e000      	b.n	8004180 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40010000 	.word	0x40010000
 8004194:	40000400 	.word	0x40000400
 8004198:	40000800 	.word	0x40000800
 800419c:	40000c00 	.word	0x40000c00
 80041a0:	40010400 	.word	0x40010400
 80041a4:	40001800 	.word	0x40001800
 80041a8:	40014000 	.word	0x40014000
 80041ac:	00010007 	.word	0x00010007

080041b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_TIM_ConfigClockSource+0x1c>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e0dc      	b.n	8004386 <HAL_TIM_ConfigClockSource+0x1d6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	4b6a      	ldr	r3, [pc, #424]	; (8004390 <HAL_TIM_ConfigClockSource+0x1e0>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a64      	ldr	r2, [pc, #400]	; (8004394 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	f000 80a9 	beq.w	800435a <HAL_TIM_ConfigClockSource+0x1aa>
 8004208:	4a62      	ldr	r2, [pc, #392]	; (8004394 <HAL_TIM_ConfigClockSource+0x1e4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	f200 80ae 	bhi.w	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 8004210:	4a61      	ldr	r2, [pc, #388]	; (8004398 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	f000 80a1 	beq.w	800435a <HAL_TIM_ConfigClockSource+0x1aa>
 8004218:	4a5f      	ldr	r2, [pc, #380]	; (8004398 <HAL_TIM_ConfigClockSource+0x1e8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	f200 80a6 	bhi.w	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 8004220:	4a5e      	ldr	r2, [pc, #376]	; (800439c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004222:	4293      	cmp	r3, r2
 8004224:	f000 8099 	beq.w	800435a <HAL_TIM_ConfigClockSource+0x1aa>
 8004228:	4a5c      	ldr	r2, [pc, #368]	; (800439c <HAL_TIM_ConfigClockSource+0x1ec>)
 800422a:	4293      	cmp	r3, r2
 800422c:	f200 809e 	bhi.w	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 8004230:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004234:	f000 8091 	beq.w	800435a <HAL_TIM_ConfigClockSource+0x1aa>
 8004238:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800423c:	f200 8096 	bhi.w	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 8004240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004244:	f000 8089 	beq.w	800435a <HAL_TIM_ConfigClockSource+0x1aa>
 8004248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800424c:	f200 808e 	bhi.w	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 8004250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004254:	d03e      	beq.n	80042d4 <HAL_TIM_ConfigClockSource+0x124>
 8004256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425a:	f200 8087 	bhi.w	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004262:	f000 8086 	beq.w	8004372 <HAL_TIM_ConfigClockSource+0x1c2>
 8004266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426a:	d87f      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 800426c:	2b70      	cmp	r3, #112	; 0x70
 800426e:	d01a      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0xf6>
 8004270:	2b70      	cmp	r3, #112	; 0x70
 8004272:	d87b      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 8004274:	2b60      	cmp	r3, #96	; 0x60
 8004276:	d050      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x16a>
 8004278:	2b60      	cmp	r3, #96	; 0x60
 800427a:	d877      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 800427c:	2b50      	cmp	r3, #80	; 0x50
 800427e:	d03c      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0x14a>
 8004280:	2b50      	cmp	r3, #80	; 0x50
 8004282:	d873      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d058      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x18a>
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	d86f      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 800428c:	2b30      	cmp	r3, #48	; 0x30
 800428e:	d064      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x1aa>
 8004290:	2b30      	cmp	r3, #48	; 0x30
 8004292:	d86b      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 8004294:	2b20      	cmp	r3, #32
 8004296:	d060      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x1aa>
 8004298:	2b20      	cmp	r3, #32
 800429a:	d867      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x1bc>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d05c      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x1aa>
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d05a      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x1aa>
 80042a4:	e062      	b.n	800436c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6899      	ldr	r1, [r3, #8]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f000 f98b 	bl	80045d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	609a      	str	r2, [r3, #8]
      break;
 80042d2:	e04f      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6899      	ldr	r1, [r3, #8]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f000 f974 	bl	80045d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042f6:	609a      	str	r2, [r3, #8]
      break;
 80042f8:	e03c      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6859      	ldr	r1, [r3, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	461a      	mov	r2, r3
 8004308:	f000 f8e4 	bl	80044d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2150      	movs	r1, #80	; 0x50
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f93e 	bl	8004594 <TIM_ITRx_SetConfig>
      break;
 8004318:	e02c      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	461a      	mov	r2, r3
 8004328:	f000 f903 	bl	8004532 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2160      	movs	r1, #96	; 0x60
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f92e 	bl	8004594 <TIM_ITRx_SetConfig>
      break;
 8004338:	e01c      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	461a      	mov	r2, r3
 8004348:	f000 f8c4 	bl	80044d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2140      	movs	r1, #64	; 0x40
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f91e 	bl	8004594 <TIM_ITRx_SetConfig>
      break;
 8004358:	e00c      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f000 f915 	bl	8004594 <TIM_ITRx_SetConfig>
      break;
 800436a:	e003      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
      break;
 8004370:	e000      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	ffceff88 	.word	0xffceff88
 8004394:	00100040 	.word	0x00100040
 8004398:	00100030 	.word	0x00100030
 800439c:	00100020 	.word	0x00100020

080043a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a40      	ldr	r2, [pc, #256]	; (80044b4 <TIM_Base_SetConfig+0x114>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d013      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043be:	d00f      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a3d      	ldr	r2, [pc, #244]	; (80044b8 <TIM_Base_SetConfig+0x118>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00b      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a3c      	ldr	r2, [pc, #240]	; (80044bc <TIM_Base_SetConfig+0x11c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a3b      	ldr	r2, [pc, #236]	; (80044c0 <TIM_Base_SetConfig+0x120>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a3a      	ldr	r2, [pc, #232]	; (80044c4 <TIM_Base_SetConfig+0x124>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d108      	bne.n	80043f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a2f      	ldr	r2, [pc, #188]	; (80044b4 <TIM_Base_SetConfig+0x114>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01f      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004400:	d01b      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a2c      	ldr	r2, [pc, #176]	; (80044b8 <TIM_Base_SetConfig+0x118>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d017      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a2b      	ldr	r2, [pc, #172]	; (80044bc <TIM_Base_SetConfig+0x11c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d013      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a2a      	ldr	r2, [pc, #168]	; (80044c0 <TIM_Base_SetConfig+0x120>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00f      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a29      	ldr	r2, [pc, #164]	; (80044c4 <TIM_Base_SetConfig+0x124>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00b      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a28      	ldr	r2, [pc, #160]	; (80044c8 <TIM_Base_SetConfig+0x128>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d007      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a27      	ldr	r2, [pc, #156]	; (80044cc <TIM_Base_SetConfig+0x12c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d003      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a26      	ldr	r2, [pc, #152]	; (80044d0 <TIM_Base_SetConfig+0x130>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d108      	bne.n	800444c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a10      	ldr	r2, [pc, #64]	; (80044b4 <TIM_Base_SetConfig+0x114>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00f      	beq.n	8004498 <TIM_Base_SetConfig+0xf8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <TIM_Base_SetConfig+0x124>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00b      	beq.n	8004498 <TIM_Base_SetConfig+0xf8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a11      	ldr	r2, [pc, #68]	; (80044c8 <TIM_Base_SetConfig+0x128>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d007      	beq.n	8004498 <TIM_Base_SetConfig+0xf8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a10      	ldr	r2, [pc, #64]	; (80044cc <TIM_Base_SetConfig+0x12c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_Base_SetConfig+0xf8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <TIM_Base_SetConfig+0x130>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d103      	bne.n	80044a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	615a      	str	r2, [r3, #20]
}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800
 80044c0:	40000c00 	.word	0x40000c00
 80044c4:	40010400 	.word	0x40010400
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40014400 	.word	0x40014400
 80044d0:	40014800 	.word	0x40014800

080044d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f023 0201 	bic.w	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f023 030a 	bic.w	r3, r3, #10
 8004510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004532:	b480      	push	{r7}
 8004534:	b087      	sub	sp, #28
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0210 	bic.w	r2, r3, #16
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800455c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	031b      	lsls	r3, r3, #12
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800456e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4b09      	ldr	r3, [pc, #36]	; (80045cc <TIM_ITRx_SetConfig+0x38>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f043 0307 	orr.w	r3, r3, #7
 80045b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	609a      	str	r2, [r3, #8]
}
 80045be:	bf00      	nop
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	ffcfff8f 	.word	0xffcfff8f

080045d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	021a      	lsls	r2, r3, #8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004624:	2302      	movs	r3, #2
 8004626:	e06d      	b.n	8004704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a30      	ldr	r2, [pc, #192]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a2f      	ldr	r2, [pc, #188]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d108      	bne.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004662:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004674:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a20      	ldr	r2, [pc, #128]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d022      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469a:	d01d      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d018      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1c      	ldr	r2, [pc, #112]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1a      	ldr	r2, [pc, #104]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00e      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a15      	ldr	r2, [pc, #84]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d009      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a16      	ldr	r2, [pc, #88]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d004      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a15      	ldr	r2, [pc, #84]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d10c      	bne.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40010000 	.word	0x40010000
 8004714:	40010400 	.word	0x40010400
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40001800 	.word	0x40001800
 8004728:	40014000 	.word	0x40014000

0800472c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e042      	b.n	80047c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7fc fa95 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2224      	movs	r2, #36	; 0x24
 800475a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f8c2 	bl	80048f8 <UART_SetConfig>
 8004774:	4603      	mov	r3, r0
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e022      	b.n	80047c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fe1e 	bl	80053c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800479a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fea5 	bl	800550c <UART_CheckIdleState>
 80047c2:	4603      	mov	r3, r0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	f040 8083 	bne.w	80048ee <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <HAL_UART_Transmit+0x28>
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e07b      	b.n	80048f0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_UART_Transmit+0x3a>
 8004802:	2302      	movs	r3, #2
 8004804:	e074      	b.n	80048f0 <HAL_UART_Transmit+0x124>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2221      	movs	r2, #33	; 0x21
 800481a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800481e:	f7fc fc2d 	bl	800107c <HAL_GetTick>
 8004822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	88fa      	ldrh	r2, [r7, #6]
 8004828:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	88fa      	ldrh	r2, [r7, #6]
 8004830:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483c:	d108      	bne.n	8004850 <HAL_UART_Transmit+0x84>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e003      	b.n	8004858 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004854:	2300      	movs	r3, #0
 8004856:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004860:	e02c      	b.n	80048bc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2200      	movs	r2, #0
 800486a:	2180      	movs	r1, #128	; 0x80
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 fe98 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e039      	b.n	80048f0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10b      	bne.n	800489a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004890:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	3302      	adds	r3, #2
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	e007      	b.n	80048aa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	781a      	ldrb	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1cc      	bne.n	8004862 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2200      	movs	r2, #0
 80048d0:	2140      	movs	r1, #64	; 0x40
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 fe65 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e006      	b.n	80048f0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
  }
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048fc:	b092      	sub	sp, #72	; 0x48
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	431a      	orrs	r2, r3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	431a      	orrs	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	4313      	orrs	r3, r2
 800491e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4bbe      	ldr	r3, [pc, #760]	; (8004c20 <UART_SetConfig+0x328>)
 8004928:	4013      	ands	r3, r2
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004930:	430b      	orrs	r3, r1
 8004932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4ab3      	ldr	r2, [pc, #716]	; (8004c24 <UART_SetConfig+0x32c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004960:	4313      	orrs	r3, r2
 8004962:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	4baf      	ldr	r3, [pc, #700]	; (8004c28 <UART_SetConfig+0x330>)
 800496c:	4013      	ands	r3, r2
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004974:	430b      	orrs	r3, r1
 8004976:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	f023 010f 	bic.w	r1, r3, #15
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4aa6      	ldr	r2, [pc, #664]	; (8004c2c <UART_SetConfig+0x334>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d177      	bne.n	8004a88 <UART_SetConfig+0x190>
 8004998:	4ba5      	ldr	r3, [pc, #660]	; (8004c30 <UART_SetConfig+0x338>)
 800499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049a0:	2b28      	cmp	r3, #40	; 0x28
 80049a2:	d86d      	bhi.n	8004a80 <UART_SetConfig+0x188>
 80049a4:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <UART_SetConfig+0xb4>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	08004a51 	.word	0x08004a51
 80049b0:	08004a81 	.word	0x08004a81
 80049b4:	08004a81 	.word	0x08004a81
 80049b8:	08004a81 	.word	0x08004a81
 80049bc:	08004a81 	.word	0x08004a81
 80049c0:	08004a81 	.word	0x08004a81
 80049c4:	08004a81 	.word	0x08004a81
 80049c8:	08004a81 	.word	0x08004a81
 80049cc:	08004a59 	.word	0x08004a59
 80049d0:	08004a81 	.word	0x08004a81
 80049d4:	08004a81 	.word	0x08004a81
 80049d8:	08004a81 	.word	0x08004a81
 80049dc:	08004a81 	.word	0x08004a81
 80049e0:	08004a81 	.word	0x08004a81
 80049e4:	08004a81 	.word	0x08004a81
 80049e8:	08004a81 	.word	0x08004a81
 80049ec:	08004a61 	.word	0x08004a61
 80049f0:	08004a81 	.word	0x08004a81
 80049f4:	08004a81 	.word	0x08004a81
 80049f8:	08004a81 	.word	0x08004a81
 80049fc:	08004a81 	.word	0x08004a81
 8004a00:	08004a81 	.word	0x08004a81
 8004a04:	08004a81 	.word	0x08004a81
 8004a08:	08004a81 	.word	0x08004a81
 8004a0c:	08004a69 	.word	0x08004a69
 8004a10:	08004a81 	.word	0x08004a81
 8004a14:	08004a81 	.word	0x08004a81
 8004a18:	08004a81 	.word	0x08004a81
 8004a1c:	08004a81 	.word	0x08004a81
 8004a20:	08004a81 	.word	0x08004a81
 8004a24:	08004a81 	.word	0x08004a81
 8004a28:	08004a81 	.word	0x08004a81
 8004a2c:	08004a71 	.word	0x08004a71
 8004a30:	08004a81 	.word	0x08004a81
 8004a34:	08004a81 	.word	0x08004a81
 8004a38:	08004a81 	.word	0x08004a81
 8004a3c:	08004a81 	.word	0x08004a81
 8004a40:	08004a81 	.word	0x08004a81
 8004a44:	08004a81 	.word	0x08004a81
 8004a48:	08004a81 	.word	0x08004a81
 8004a4c:	08004a79 	.word	0x08004a79
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a56:	e222      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a5e:	e21e      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004a60:	2308      	movs	r3, #8
 8004a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a66:	e21a      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a6e:	e216      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004a70:	2320      	movs	r3, #32
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a76:	e212      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004a78:	2340      	movs	r3, #64	; 0x40
 8004a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a7e:	e20e      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a86:	e20a      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a69      	ldr	r2, [pc, #420]	; (8004c34 <UART_SetConfig+0x33c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d130      	bne.n	8004af4 <UART_SetConfig+0x1fc>
 8004a92:	4b67      	ldr	r3, [pc, #412]	; (8004c30 <UART_SetConfig+0x338>)
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b05      	cmp	r3, #5
 8004a9c:	d826      	bhi.n	8004aec <UART_SetConfig+0x1f4>
 8004a9e:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <UART_SetConfig+0x1ac>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004abd 	.word	0x08004abd
 8004aa8:	08004ac5 	.word	0x08004ac5
 8004aac:	08004acd 	.word	0x08004acd
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004add 	.word	0x08004add
 8004ab8:	08004ae5 	.word	0x08004ae5
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ac2:	e1ec      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aca:	e1e8      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004acc:	2308      	movs	r3, #8
 8004ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ad2:	e1e4      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004ad4:	2310      	movs	r3, #16
 8004ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ada:	e1e0      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004adc:	2320      	movs	r3, #32
 8004ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ae2:	e1dc      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004ae4:	2340      	movs	r3, #64	; 0x40
 8004ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aea:	e1d8      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004af2:	e1d4      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a4f      	ldr	r2, [pc, #316]	; (8004c38 <UART_SetConfig+0x340>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d130      	bne.n	8004b60 <UART_SetConfig+0x268>
 8004afe:	4b4c      	ldr	r3, [pc, #304]	; (8004c30 <UART_SetConfig+0x338>)
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d826      	bhi.n	8004b58 <UART_SetConfig+0x260>
 8004b0a:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <UART_SetConfig+0x218>)
 8004b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b10:	08004b29 	.word	0x08004b29
 8004b14:	08004b31 	.word	0x08004b31
 8004b18:	08004b39 	.word	0x08004b39
 8004b1c:	08004b41 	.word	0x08004b41
 8004b20:	08004b49 	.word	0x08004b49
 8004b24:	08004b51 	.word	0x08004b51
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b2e:	e1b6      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004b30:	2304      	movs	r3, #4
 8004b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b36:	e1b2      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004b38:	2308      	movs	r3, #8
 8004b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b3e:	e1ae      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004b40:	2310      	movs	r3, #16
 8004b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b46:	e1aa      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004b48:	2320      	movs	r3, #32
 8004b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b4e:	e1a6      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004b50:	2340      	movs	r3, #64	; 0x40
 8004b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b56:	e1a2      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b5e:	e19e      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a35      	ldr	r2, [pc, #212]	; (8004c3c <UART_SetConfig+0x344>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d130      	bne.n	8004bcc <UART_SetConfig+0x2d4>
 8004b6a:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <UART_SetConfig+0x338>)
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	2b05      	cmp	r3, #5
 8004b74:	d826      	bhi.n	8004bc4 <UART_SetConfig+0x2cc>
 8004b76:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <UART_SetConfig+0x284>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004b95 	.word	0x08004b95
 8004b80:	08004b9d 	.word	0x08004b9d
 8004b84:	08004ba5 	.word	0x08004ba5
 8004b88:	08004bad 	.word	0x08004bad
 8004b8c:	08004bb5 	.word	0x08004bb5
 8004b90:	08004bbd 	.word	0x08004bbd
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b9a:	e180      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ba2:	e17c      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004baa:	e178      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004bac:	2310      	movs	r3, #16
 8004bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bb2:	e174      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004bb4:	2320      	movs	r3, #32
 8004bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bba:	e170      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004bbc:	2340      	movs	r3, #64	; 0x40
 8004bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bc2:	e16c      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bca:	e168      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <UART_SetConfig+0x348>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d142      	bne.n	8004c5c <UART_SetConfig+0x364>
 8004bd6:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <UART_SetConfig+0x338>)
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	2b05      	cmp	r3, #5
 8004be0:	d838      	bhi.n	8004c54 <UART_SetConfig+0x35c>
 8004be2:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <UART_SetConfig+0x2f0>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004c01 	.word	0x08004c01
 8004bec:	08004c09 	.word	0x08004c09
 8004bf0:	08004c11 	.word	0x08004c11
 8004bf4:	08004c19 	.word	0x08004c19
 8004bf8:	08004c45 	.word	0x08004c45
 8004bfc:	08004c4d 	.word	0x08004c4d
 8004c00:	2300      	movs	r3, #0
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c06:	e14a      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c0e:	e146      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004c10:	2308      	movs	r3, #8
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c16:	e142      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c1e:	e13e      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004c20:	cfff69f3 	.word	0xcfff69f3
 8004c24:	58000c00 	.word	0x58000c00
 8004c28:	11fff4ff 	.word	0x11fff4ff
 8004c2c:	40011000 	.word	0x40011000
 8004c30:	58024400 	.word	0x58024400
 8004c34:	40004400 	.word	0x40004400
 8004c38:	40004800 	.word	0x40004800
 8004c3c:	40004c00 	.word	0x40004c00
 8004c40:	40005000 	.word	0x40005000
 8004c44:	2320      	movs	r3, #32
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c4a:	e128      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c52:	e124      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c5a:	e120      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4acb      	ldr	r2, [pc, #812]	; (8004f90 <UART_SetConfig+0x698>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d176      	bne.n	8004d54 <UART_SetConfig+0x45c>
 8004c66:	4bcb      	ldr	r3, [pc, #812]	; (8004f94 <UART_SetConfig+0x69c>)
 8004c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c6e:	2b28      	cmp	r3, #40	; 0x28
 8004c70:	d86c      	bhi.n	8004d4c <UART_SetConfig+0x454>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <UART_SetConfig+0x380>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004d1d 	.word	0x08004d1d
 8004c7c:	08004d4d 	.word	0x08004d4d
 8004c80:	08004d4d 	.word	0x08004d4d
 8004c84:	08004d4d 	.word	0x08004d4d
 8004c88:	08004d4d 	.word	0x08004d4d
 8004c8c:	08004d4d 	.word	0x08004d4d
 8004c90:	08004d4d 	.word	0x08004d4d
 8004c94:	08004d4d 	.word	0x08004d4d
 8004c98:	08004d25 	.word	0x08004d25
 8004c9c:	08004d4d 	.word	0x08004d4d
 8004ca0:	08004d4d 	.word	0x08004d4d
 8004ca4:	08004d4d 	.word	0x08004d4d
 8004ca8:	08004d4d 	.word	0x08004d4d
 8004cac:	08004d4d 	.word	0x08004d4d
 8004cb0:	08004d4d 	.word	0x08004d4d
 8004cb4:	08004d4d 	.word	0x08004d4d
 8004cb8:	08004d2d 	.word	0x08004d2d
 8004cbc:	08004d4d 	.word	0x08004d4d
 8004cc0:	08004d4d 	.word	0x08004d4d
 8004cc4:	08004d4d 	.word	0x08004d4d
 8004cc8:	08004d4d 	.word	0x08004d4d
 8004ccc:	08004d4d 	.word	0x08004d4d
 8004cd0:	08004d4d 	.word	0x08004d4d
 8004cd4:	08004d4d 	.word	0x08004d4d
 8004cd8:	08004d35 	.word	0x08004d35
 8004cdc:	08004d4d 	.word	0x08004d4d
 8004ce0:	08004d4d 	.word	0x08004d4d
 8004ce4:	08004d4d 	.word	0x08004d4d
 8004ce8:	08004d4d 	.word	0x08004d4d
 8004cec:	08004d4d 	.word	0x08004d4d
 8004cf0:	08004d4d 	.word	0x08004d4d
 8004cf4:	08004d4d 	.word	0x08004d4d
 8004cf8:	08004d3d 	.word	0x08004d3d
 8004cfc:	08004d4d 	.word	0x08004d4d
 8004d00:	08004d4d 	.word	0x08004d4d
 8004d04:	08004d4d 	.word	0x08004d4d
 8004d08:	08004d4d 	.word	0x08004d4d
 8004d0c:	08004d4d 	.word	0x08004d4d
 8004d10:	08004d4d 	.word	0x08004d4d
 8004d14:	08004d4d 	.word	0x08004d4d
 8004d18:	08004d45 	.word	0x08004d45
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d22:	e0bc      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004d24:	2304      	movs	r3, #4
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d2a:	e0b8      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d32:	e0b4      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004d34:	2310      	movs	r3, #16
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3a:	e0b0      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d42:	e0ac      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004d44:	2340      	movs	r3, #64	; 0x40
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4a:	e0a8      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d52:	e0a4      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a8f      	ldr	r2, [pc, #572]	; (8004f98 <UART_SetConfig+0x6a0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d130      	bne.n	8004dc0 <UART_SetConfig+0x4c8>
 8004d5e:	4b8d      	ldr	r3, [pc, #564]	; (8004f94 <UART_SetConfig+0x69c>)
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	2b05      	cmp	r3, #5
 8004d68:	d826      	bhi.n	8004db8 <UART_SetConfig+0x4c0>
 8004d6a:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <UART_SetConfig+0x478>)
 8004d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d70:	08004d89 	.word	0x08004d89
 8004d74:	08004d91 	.word	0x08004d91
 8004d78:	08004d99 	.word	0x08004d99
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004da9 	.word	0x08004da9
 8004d84:	08004db1 	.word	0x08004db1
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d8e:	e086      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004d90:	2304      	movs	r3, #4
 8004d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d96:	e082      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004d98:	2308      	movs	r3, #8
 8004d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d9e:	e07e      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004da0:	2310      	movs	r3, #16
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004da6:	e07a      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004da8:	2320      	movs	r3, #32
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dae:	e076      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004db0:	2340      	movs	r3, #64	; 0x40
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db6:	e072      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dbe:	e06e      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a75      	ldr	r2, [pc, #468]	; (8004f9c <UART_SetConfig+0x6a4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d130      	bne.n	8004e2c <UART_SetConfig+0x534>
 8004dca:	4b72      	ldr	r3, [pc, #456]	; (8004f94 <UART_SetConfig+0x69c>)
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d826      	bhi.n	8004e24 <UART_SetConfig+0x52c>
 8004dd6:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <UART_SetConfig+0x4e4>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004df5 	.word	0x08004df5
 8004de0:	08004dfd 	.word	0x08004dfd
 8004de4:	08004e05 	.word	0x08004e05
 8004de8:	08004e0d 	.word	0x08004e0d
 8004dec:	08004e15 	.word	0x08004e15
 8004df0:	08004e1d 	.word	0x08004e1d
 8004df4:	2300      	movs	r3, #0
 8004df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dfa:	e050      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e02:	e04c      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e04:	2308      	movs	r3, #8
 8004e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e0a:	e048      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e12:	e044      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e14:	2320      	movs	r3, #32
 8004e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1a:	e040      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e1c:	2340      	movs	r3, #64	; 0x40
 8004e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e22:	e03c      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e24:	2380      	movs	r3, #128	; 0x80
 8004e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2a:	e038      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a5b      	ldr	r2, [pc, #364]	; (8004fa0 <UART_SetConfig+0x6a8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d130      	bne.n	8004e98 <UART_SetConfig+0x5a0>
 8004e36:	4b57      	ldr	r3, [pc, #348]	; (8004f94 <UART_SetConfig+0x69c>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	2b05      	cmp	r3, #5
 8004e40:	d826      	bhi.n	8004e90 <UART_SetConfig+0x598>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <UART_SetConfig+0x550>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e61 	.word	0x08004e61
 8004e4c:	08004e69 	.word	0x08004e69
 8004e50:	08004e71 	.word	0x08004e71
 8004e54:	08004e79 	.word	0x08004e79
 8004e58:	08004e81 	.word	0x08004e81
 8004e5c:	08004e89 	.word	0x08004e89
 8004e60:	2302      	movs	r3, #2
 8004e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e66:	e01a      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e6e:	e016      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e70:	2308      	movs	r3, #8
 8004e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e76:	e012      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e7e:	e00e      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e80:	2320      	movs	r3, #32
 8004e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e86:	e00a      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e88:	2340      	movs	r3, #64	; 0x40
 8004e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e8e:	e006      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e96:	e002      	b.n	8004e9e <UART_SetConfig+0x5a6>
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a3f      	ldr	r2, [pc, #252]	; (8004fa0 <UART_SetConfig+0x6a8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	f040 80f8 	bne.w	800509a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004eaa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	dc46      	bgt.n	8004f40 <UART_SetConfig+0x648>
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	f2c0 8082 	blt.w	8004fbc <UART_SetConfig+0x6c4>
 8004eb8:	3b02      	subs	r3, #2
 8004eba:	2b1e      	cmp	r3, #30
 8004ebc:	d87e      	bhi.n	8004fbc <UART_SetConfig+0x6c4>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <UART_SetConfig+0x5cc>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004f47 	.word	0x08004f47
 8004ec8:	08004fbd 	.word	0x08004fbd
 8004ecc:	08004f4f 	.word	0x08004f4f
 8004ed0:	08004fbd 	.word	0x08004fbd
 8004ed4:	08004fbd 	.word	0x08004fbd
 8004ed8:	08004fbd 	.word	0x08004fbd
 8004edc:	08004f5f 	.word	0x08004f5f
 8004ee0:	08004fbd 	.word	0x08004fbd
 8004ee4:	08004fbd 	.word	0x08004fbd
 8004ee8:	08004fbd 	.word	0x08004fbd
 8004eec:	08004fbd 	.word	0x08004fbd
 8004ef0:	08004fbd 	.word	0x08004fbd
 8004ef4:	08004fbd 	.word	0x08004fbd
 8004ef8:	08004fbd 	.word	0x08004fbd
 8004efc:	08004f6f 	.word	0x08004f6f
 8004f00:	08004fbd 	.word	0x08004fbd
 8004f04:	08004fbd 	.word	0x08004fbd
 8004f08:	08004fbd 	.word	0x08004fbd
 8004f0c:	08004fbd 	.word	0x08004fbd
 8004f10:	08004fbd 	.word	0x08004fbd
 8004f14:	08004fbd 	.word	0x08004fbd
 8004f18:	08004fbd 	.word	0x08004fbd
 8004f1c:	08004fbd 	.word	0x08004fbd
 8004f20:	08004fbd 	.word	0x08004fbd
 8004f24:	08004fbd 	.word	0x08004fbd
 8004f28:	08004fbd 	.word	0x08004fbd
 8004f2c:	08004fbd 	.word	0x08004fbd
 8004f30:	08004fbd 	.word	0x08004fbd
 8004f34:	08004fbd 	.word	0x08004fbd
 8004f38:	08004fbd 	.word	0x08004fbd
 8004f3c:	08004faf 	.word	0x08004faf
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d037      	beq.n	8004fb4 <UART_SetConfig+0x6bc>
 8004f44:	e03a      	b.n	8004fbc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004f46:	f7fe fc49 	bl	80037dc <HAL_RCCEx_GetD3PCLK1Freq>
 8004f4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f4c:	e03c      	b.n	8004fc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe fc58 	bl	8003808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f5c:	e034      	b.n	8004fc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f5e:	f107 0318 	add.w	r3, r7, #24
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe fda4 	bl	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f6c:	e02c      	b.n	8004fc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <UART_SetConfig+0x69c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d016      	beq.n	8004fa8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <UART_SetConfig+0x69c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	08db      	lsrs	r3, r3, #3
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <UART_SetConfig+0x6ac>)
 8004f86:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f8c:	e01c      	b.n	8004fc8 <UART_SetConfig+0x6d0>
 8004f8e:	bf00      	nop
 8004f90:	40011400 	.word	0x40011400
 8004f94:	58024400 	.word	0x58024400
 8004f98:	40007800 	.word	0x40007800
 8004f9c:	40007c00 	.word	0x40007c00
 8004fa0:	58000c00 	.word	0x58000c00
 8004fa4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004fa8:	4b9d      	ldr	r3, [pc, #628]	; (8005220 <UART_SetConfig+0x928>)
 8004faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fac:	e00c      	b.n	8004fc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fae:	4b9d      	ldr	r3, [pc, #628]	; (8005224 <UART_SetConfig+0x92c>)
 8004fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fb2:	e009      	b.n	8004fc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fba:	e005      	b.n	8004fc8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004fc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 81de 	beq.w	800538c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	4a94      	ldr	r2, [pc, #592]	; (8005228 <UART_SetConfig+0x930>)
 8004fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fde:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fe2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d305      	bcc.n	8005000 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d903      	bls.n	8005008 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005006:	e1c1      	b.n	800538c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500a:	2200      	movs	r2, #0
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	60fa      	str	r2, [r7, #12]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	4a84      	ldr	r2, [pc, #528]	; (8005228 <UART_SetConfig+0x930>)
 8005016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800501a:	b29b      	uxth	r3, r3
 800501c:	2200      	movs	r2, #0
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005026:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800502a:	f7fb f9a9 	bl	8000380 <__aeabi_uldivmod>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	020b      	lsls	r3, r1, #8
 8005040:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005044:	0202      	lsls	r2, r0, #8
 8005046:	6979      	ldr	r1, [r7, #20]
 8005048:	6849      	ldr	r1, [r1, #4]
 800504a:	0849      	lsrs	r1, r1, #1
 800504c:	2000      	movs	r0, #0
 800504e:	460c      	mov	r4, r1
 8005050:	4605      	mov	r5, r0
 8005052:	eb12 0804 	adds.w	r8, r2, r4
 8005056:	eb43 0905 	adc.w	r9, r3, r5
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	469a      	mov	sl, r3
 8005062:	4693      	mov	fp, r2
 8005064:	4652      	mov	r2, sl
 8005066:	465b      	mov	r3, fp
 8005068:	4640      	mov	r0, r8
 800506a:	4649      	mov	r1, r9
 800506c:	f7fb f988 	bl	8000380 <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4613      	mov	r3, r2
 8005076:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800507e:	d308      	bcc.n	8005092 <UART_SetConfig+0x79a>
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005086:	d204      	bcs.n	8005092 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800508e:	60da      	str	r2, [r3, #12]
 8005090:	e17c      	b.n	800538c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005098:	e178      	b.n	800538c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a2:	f040 80c5 	bne.w	8005230 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80050a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	dc48      	bgt.n	8005140 <UART_SetConfig+0x848>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	db7b      	blt.n	80051aa <UART_SetConfig+0x8b2>
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d879      	bhi.n	80051aa <UART_SetConfig+0x8b2>
 80050b6:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <UART_SetConfig+0x7c4>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	08005147 	.word	0x08005147
 80050c0:	0800514f 	.word	0x0800514f
 80050c4:	080051ab 	.word	0x080051ab
 80050c8:	080051ab 	.word	0x080051ab
 80050cc:	08005157 	.word	0x08005157
 80050d0:	080051ab 	.word	0x080051ab
 80050d4:	080051ab 	.word	0x080051ab
 80050d8:	080051ab 	.word	0x080051ab
 80050dc:	08005167 	.word	0x08005167
 80050e0:	080051ab 	.word	0x080051ab
 80050e4:	080051ab 	.word	0x080051ab
 80050e8:	080051ab 	.word	0x080051ab
 80050ec:	080051ab 	.word	0x080051ab
 80050f0:	080051ab 	.word	0x080051ab
 80050f4:	080051ab 	.word	0x080051ab
 80050f8:	080051ab 	.word	0x080051ab
 80050fc:	08005177 	.word	0x08005177
 8005100:	080051ab 	.word	0x080051ab
 8005104:	080051ab 	.word	0x080051ab
 8005108:	080051ab 	.word	0x080051ab
 800510c:	080051ab 	.word	0x080051ab
 8005110:	080051ab 	.word	0x080051ab
 8005114:	080051ab 	.word	0x080051ab
 8005118:	080051ab 	.word	0x080051ab
 800511c:	080051ab 	.word	0x080051ab
 8005120:	080051ab 	.word	0x080051ab
 8005124:	080051ab 	.word	0x080051ab
 8005128:	080051ab 	.word	0x080051ab
 800512c:	080051ab 	.word	0x080051ab
 8005130:	080051ab 	.word	0x080051ab
 8005134:	080051ab 	.word	0x080051ab
 8005138:	080051ab 	.word	0x080051ab
 800513c:	0800519d 	.word	0x0800519d
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d02e      	beq.n	80051a2 <UART_SetConfig+0x8aa>
 8005144:	e031      	b.n	80051aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005146:	f7fd fbd7 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 800514a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800514c:	e033      	b.n	80051b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800514e:	f7fd fbe9 	bl	8002924 <HAL_RCC_GetPCLK2Freq>
 8005152:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005154:	e02f      	b.n	80051b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe fb54 	bl	8003808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005164:	e027      	b.n	80051b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005166:	f107 0318 	add.w	r3, r7, #24
 800516a:	4618      	mov	r0, r3
 800516c:	f7fe fca0 	bl	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005174:	e01f      	b.n	80051b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005176:	4b2d      	ldr	r3, [pc, #180]	; (800522c <UART_SetConfig+0x934>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005182:	4b2a      	ldr	r3, [pc, #168]	; (800522c <UART_SetConfig+0x934>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	08db      	lsrs	r3, r3, #3
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	4a24      	ldr	r2, [pc, #144]	; (8005220 <UART_SetConfig+0x928>)
 800518e:	fa22 f303 	lsr.w	r3, r2, r3
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005194:	e00f      	b.n	80051b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005196:	4b22      	ldr	r3, [pc, #136]	; (8005220 <UART_SetConfig+0x928>)
 8005198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800519a:	e00c      	b.n	80051b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800519c:	4b21      	ldr	r3, [pc, #132]	; (8005224 <UART_SetConfig+0x92c>)
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051a0:	e009      	b.n	80051b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051a8:	e005      	b.n	80051b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80051b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80e7 	beq.w	800538c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	4a19      	ldr	r2, [pc, #100]	; (8005228 <UART_SetConfig+0x930>)
 80051c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c8:	461a      	mov	r2, r3
 80051ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80051d0:	005a      	lsls	r2, r3, #1
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	441a      	add	r2, r3
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	2b0f      	cmp	r3, #15
 80051e8:	d916      	bls.n	8005218 <UART_SetConfig+0x920>
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f0:	d212      	bcs.n	8005218 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f023 030f 	bic.w	r3, r3, #15
 80051fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	b29b      	uxth	r3, r3
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	b29a      	uxth	r2, r3
 8005208:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800520a:	4313      	orrs	r3, r2
 800520c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005214:	60da      	str	r2, [r3, #12]
 8005216:	e0b9      	b.n	800538c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800521e:	e0b5      	b.n	800538c <UART_SetConfig+0xa94>
 8005220:	03d09000 	.word	0x03d09000
 8005224:	003d0900 	.word	0x003d0900
 8005228:	080068cc 	.word	0x080068cc
 800522c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005230:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005234:	2b20      	cmp	r3, #32
 8005236:	dc49      	bgt.n	80052cc <UART_SetConfig+0x9d4>
 8005238:	2b00      	cmp	r3, #0
 800523a:	db7c      	blt.n	8005336 <UART_SetConfig+0xa3e>
 800523c:	2b20      	cmp	r3, #32
 800523e:	d87a      	bhi.n	8005336 <UART_SetConfig+0xa3e>
 8005240:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <UART_SetConfig+0x950>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	080052d3 	.word	0x080052d3
 800524c:	080052db 	.word	0x080052db
 8005250:	08005337 	.word	0x08005337
 8005254:	08005337 	.word	0x08005337
 8005258:	080052e3 	.word	0x080052e3
 800525c:	08005337 	.word	0x08005337
 8005260:	08005337 	.word	0x08005337
 8005264:	08005337 	.word	0x08005337
 8005268:	080052f3 	.word	0x080052f3
 800526c:	08005337 	.word	0x08005337
 8005270:	08005337 	.word	0x08005337
 8005274:	08005337 	.word	0x08005337
 8005278:	08005337 	.word	0x08005337
 800527c:	08005337 	.word	0x08005337
 8005280:	08005337 	.word	0x08005337
 8005284:	08005337 	.word	0x08005337
 8005288:	08005303 	.word	0x08005303
 800528c:	08005337 	.word	0x08005337
 8005290:	08005337 	.word	0x08005337
 8005294:	08005337 	.word	0x08005337
 8005298:	08005337 	.word	0x08005337
 800529c:	08005337 	.word	0x08005337
 80052a0:	08005337 	.word	0x08005337
 80052a4:	08005337 	.word	0x08005337
 80052a8:	08005337 	.word	0x08005337
 80052ac:	08005337 	.word	0x08005337
 80052b0:	08005337 	.word	0x08005337
 80052b4:	08005337 	.word	0x08005337
 80052b8:	08005337 	.word	0x08005337
 80052bc:	08005337 	.word	0x08005337
 80052c0:	08005337 	.word	0x08005337
 80052c4:	08005337 	.word	0x08005337
 80052c8:	08005329 	.word	0x08005329
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d02e      	beq.n	800532e <UART_SetConfig+0xa36>
 80052d0:	e031      	b.n	8005336 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d2:	f7fd fb11 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 80052d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052d8:	e033      	b.n	8005342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052da:	f7fd fb23 	bl	8002924 <HAL_RCC_GetPCLK2Freq>
 80052de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052e0:	e02f      	b.n	8005342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fa8e 	bl	8003808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052f0:	e027      	b.n	8005342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052f2:	f107 0318 	add.w	r3, r7, #24
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe fbda 	bl	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005300:	e01f      	b.n	8005342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005302:	4b2d      	ldr	r3, [pc, #180]	; (80053b8 <UART_SetConfig+0xac0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800530e:	4b2a      	ldr	r3, [pc, #168]	; (80053b8 <UART_SetConfig+0xac0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	08db      	lsrs	r3, r3, #3
 8005314:	f003 0303 	and.w	r3, r3, #3
 8005318:	4a28      	ldr	r2, [pc, #160]	; (80053bc <UART_SetConfig+0xac4>)
 800531a:	fa22 f303 	lsr.w	r3, r2, r3
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005320:	e00f      	b.n	8005342 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005322:	4b26      	ldr	r3, [pc, #152]	; (80053bc <UART_SetConfig+0xac4>)
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005326:	e00c      	b.n	8005342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005328:	4b25      	ldr	r3, [pc, #148]	; (80053c0 <UART_SetConfig+0xac8>)
 800532a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800532c:	e009      	b.n	8005342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800532e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005334:	e005      	b.n	8005342 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005340:	bf00      	nop
    }

    if (pclk != 0U)
 8005342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005344:	2b00      	cmp	r3, #0
 8005346:	d021      	beq.n	800538c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <UART_SetConfig+0xacc>)
 800534e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005352:	461a      	mov	r2, r3
 8005354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005356:	fbb3 f2f2 	udiv	r2, r3, r2
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	441a      	add	r2, r3
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	fbb2 f3f3 	udiv	r3, r2, r3
 800536a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	2b0f      	cmp	r3, #15
 8005370:	d909      	bls.n	8005386 <UART_SetConfig+0xa8e>
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005378:	d205      	bcs.n	8005386 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	b29a      	uxth	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60da      	str	r2, [r3, #12]
 8005384:	e002      	b.n	800538c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2201      	movs	r2, #1
 8005390:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2201      	movs	r2, #1
 8005398:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2200      	movs	r2, #0
 80053a0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2200      	movs	r2, #0
 80053a6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80053a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3748      	adds	r7, #72	; 0x48
 80053b0:	46bd      	mov	sp, r7
 80053b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b6:	bf00      	nop
 80053b8:	58024400 	.word	0x58024400
 80053bc:	03d09000 	.word	0x03d09000
 80053c0:	003d0900 	.word	0x003d0900
 80053c4:	080068cc 	.word	0x080068cc

080053c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01a      	beq.n	80054de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054c6:	d10a      	bne.n	80054de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	605a      	str	r2, [r3, #4]
  }
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af02      	add	r7, sp, #8
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800551c:	f7fb fdae 	bl	800107c <HAL_GetTick>
 8005520:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b08      	cmp	r3, #8
 800552e:	d10e      	bne.n	800554e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f82f 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e025      	b.n	800559a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b04      	cmp	r3, #4
 800555a:	d10e      	bne.n	800557a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800555c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f819 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e00f      	b.n	800559a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b09c      	sub	sp, #112	; 0x70
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	603b      	str	r3, [r7, #0]
 80055ae:	4613      	mov	r3, r2
 80055b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b2:	e0a9      	b.n	8005708 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	f000 80a5 	beq.w	8005708 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055be:	f7fb fd5d 	bl	800107c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d302      	bcc.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80055ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d140      	bne.n	8005656 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055e8:	667b      	str	r3, [r7, #100]	; 0x64
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e6      	bne.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3308      	adds	r3, #8
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	663b      	str	r3, [r7, #96]	; 0x60
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3308      	adds	r3, #8
 8005624:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005626:	64ba      	str	r2, [r7, #72]	; 0x48
 8005628:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800562c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e5      	bne.n	8005606 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2220      	movs	r2, #32
 8005646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e069      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d051      	beq.n	8005708 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005672:	d149      	bne.n	8005708 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800567c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005692:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	461a      	mov	r2, r3
 800569a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
 800569e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056a4:	e841 2300 	strex	r3, r2, [r1]
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e6      	bne.n	800567e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	613b      	str	r3, [r7, #16]
   return(result);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f023 0301 	bic.w	r3, r3, #1
 80056c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3308      	adds	r3, #8
 80056ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056d0:	623a      	str	r2, [r7, #32]
 80056d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	69f9      	ldr	r1, [r7, #28]
 80056d6:	6a3a      	ldr	r2, [r7, #32]
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e5      	bne.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e010      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69da      	ldr	r2, [r3, #28]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4013      	ands	r3, r2
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	429a      	cmp	r2, r3
 8005716:	bf0c      	ite	eq
 8005718:	2301      	moveq	r3, #1
 800571a:	2300      	movne	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	429a      	cmp	r2, r3
 8005724:	f43f af46 	beq.w	80055b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3770      	adds	r7, #112	; 0x70
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_UARTEx_DisableFifoMode+0x16>
 8005744:	2302      	movs	r3, #2
 8005746:	e027      	b.n	8005798 <HAL_UARTEx_DisableFifoMode+0x66>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2224      	movs	r2, #36	; 0x24
 8005754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0201 	bic.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005776:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e02d      	b.n	8005818 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2224      	movs	r2, #36	; 0x24
 80057c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f84f 	bl	800589c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005834:	2302      	movs	r3, #2
 8005836:	e02d      	b.n	8005894 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2224      	movs	r2, #36	; 0x24
 8005844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0201 	bic.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f811 	bl	800589c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d108      	bne.n	80058be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058bc:	e031      	b.n	8005922 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058be:	2310      	movs	r3, #16
 80058c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058c2:	2310      	movs	r3, #16
 80058c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	0e5b      	lsrs	r3, r3, #25
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	0f5b      	lsrs	r3, r3, #29
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058e6:	7bbb      	ldrb	r3, [r7, #14]
 80058e8:	7b3a      	ldrb	r2, [r7, #12]
 80058ea:	4911      	ldr	r1, [pc, #68]	; (8005930 <UARTEx_SetNbDataToProcess+0x94>)
 80058ec:	5c8a      	ldrb	r2, [r1, r2]
 80058ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058f2:	7b3a      	ldrb	r2, [r7, #12]
 80058f4:	490f      	ldr	r1, [pc, #60]	; (8005934 <UARTEx_SetNbDataToProcess+0x98>)
 80058f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	7b7a      	ldrb	r2, [r7, #13]
 8005908:	4909      	ldr	r1, [pc, #36]	; (8005930 <UARTEx_SetNbDataToProcess+0x94>)
 800590a:	5c8a      	ldrb	r2, [r1, r2]
 800590c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005910:	7b7a      	ldrb	r2, [r7, #13]
 8005912:	4908      	ldr	r1, [pc, #32]	; (8005934 <UARTEx_SetNbDataToProcess+0x98>)
 8005914:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005916:	fb93 f3f2 	sdiv	r3, r3, r2
 800591a:	b29a      	uxth	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	080068e4 	.word	0x080068e4
 8005934:	080068ec 	.word	0x080068ec

08005938 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005938:	b084      	sub	sp, #16
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	f107 001c 	add.w	r0, r7, #28
 8005946:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	2b01      	cmp	r3, #1
 800594e:	d120      	bne.n	8005992 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005954:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	4b2a      	ldr	r3, [pc, #168]	; (8005a0c <USB_CoreInit+0xd4>)
 8005962:	4013      	ands	r3, r2
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005976:	2b01      	cmp	r3, #1
 8005978:	d105      	bne.n	8005986 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 faac 	bl	8005ee4 <USB_CoreReset>
 800598c:	4603      	mov	r3, r0
 800598e:	73fb      	strb	r3, [r7, #15]
 8005990:	e01a      	b.n	80059c8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 faa0 	bl	8005ee4 <USB_CoreReset>
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	639a      	str	r2, [r3, #56]	; 0x38
 80059ba:	e005      	b.n	80059c8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d116      	bne.n	80059fc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059dc:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <USB_CoreInit+0xd8>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f043 0206 	orr.w	r2, r3, #6
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f043 0220 	orr.w	r2, r3, #32
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a08:	b004      	add	sp, #16
 8005a0a:	4770      	bx	lr
 8005a0c:	ffbdffbf 	.word	0xffbdffbf
 8005a10:	03ee0000 	.word	0x03ee0000

08005a14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f023 0201 	bic.w	r2, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d115      	bne.n	8005a84 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a64:	2001      	movs	r0, #1
 8005a66:	f7fb fb15 	bl	8001094 <HAL_Delay>
      ms++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fa29 	bl	8005ec8 <USB_GetMode>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d01e      	beq.n	8005aba <USB_SetCurrentMode+0x84>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b31      	cmp	r3, #49	; 0x31
 8005a80:	d9f0      	bls.n	8005a64 <USB_SetCurrentMode+0x2e>
 8005a82:	e01a      	b.n	8005aba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d115      	bne.n	8005ab6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a96:	2001      	movs	r0, #1
 8005a98:	f7fb fafc 	bl	8001094 <HAL_Delay>
      ms++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa10 	bl	8005ec8 <USB_GetMode>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <USB_SetCurrentMode+0x84>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b31      	cmp	r3, #49	; 0x31
 8005ab2:	d9f0      	bls.n	8005a96 <USB_SetCurrentMode+0x60>
 8005ab4:	e001      	b.n	8005aba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e005      	b.n	8005ac6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b32      	cmp	r3, #50	; 0x32
 8005abe:	d101      	bne.n	8005ac4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005aea:	2300      	movs	r3, #0
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	e009      	b.n	8005b04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	3340      	adds	r3, #64	; 0x40
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	2200      	movs	r2, #0
 8005afc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	3301      	adds	r3, #1
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b0e      	cmp	r3, #14
 8005b08:	d9f2      	bls.n	8005af0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d11c      	bne.n	8005b4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b1e:	f043 0302 	orr.w	r3, r3, #2
 8005b22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	e005      	b.n	8005b56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b68:	4619      	mov	r1, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b70:	461a      	mov	r2, r3
 8005b72:	680b      	ldr	r3, [r1, #0]
 8005b74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d10c      	bne.n	8005b96 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b82:	2100      	movs	r1, #0
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f965 	bl	8005e54 <USB_SetDevSpeed>
 8005b8a:	e008      	b.n	8005b9e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f960 	bl	8005e54 <USB_SetDevSpeed>
 8005b94:	e003      	b.n	8005b9e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b96:	2103      	movs	r1, #3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f95b 	bl	8005e54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b9e:	2110      	movs	r1, #16
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f8f3 	bl	8005d8c <USB_FlushTxFifo>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f91f 	bl	8005df4 <USB_FlushRxFifo>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	2300      	movs	r3, #0
 8005bca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bde:	461a      	mov	r2, r3
 8005be0:	2300      	movs	r3, #0
 8005be2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be4:	2300      	movs	r3, #0
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	e043      	b.n	8005c72 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c00:	d118      	bne.n	8005c34 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	461a      	mov	r2, r3
 8005c16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	e013      	b.n	8005c46 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	e008      	b.n	8005c46 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	461a      	mov	r2, r3
 8005c42:	2300      	movs	r3, #0
 8005c44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c52:	461a      	mov	r2, r3
 8005c54:	2300      	movs	r3, #0
 8005c56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	461a      	mov	r2, r3
 8005c66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d3b7      	bcc.n	8005bea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	e043      	b.n	8005d08 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c96:	d118      	bne.n	8005cca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	461a      	mov	r2, r3
 8005cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	e013      	b.n	8005cdc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	e008      	b.n	8005cdc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	2300      	movs	r3, #0
 8005cda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2300      	movs	r3, #0
 8005cec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	3301      	adds	r3, #1
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d3b7      	bcc.n	8005c80 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d105      	bne.n	8005d44 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	f043 0210 	orr.w	r2, r3, #16
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	4b0e      	ldr	r3, [pc, #56]	; (8005d84 <USB_DevInit+0x2b4>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f043 0208 	orr.w	r2, r3, #8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d105      	bne.n	8005d74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <USB_DevInit+0x2b8>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d80:	b004      	add	sp, #16
 8005d82:	4770      	bx	lr
 8005d84:	803c3800 	.word	0x803c3800
 8005d88:	40000004 	.word	0x40000004

08005d8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a13      	ldr	r2, [pc, #76]	; (8005df0 <USB_FlushTxFifo+0x64>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d901      	bls.n	8005dac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e01b      	b.n	8005de4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	daf2      	bge.n	8005d9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	019b      	lsls	r3, r3, #6
 8005dbc:	f043 0220 	orr.w	r2, r3, #32
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a08      	ldr	r2, [pc, #32]	; (8005df0 <USB_FlushTxFifo+0x64>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e006      	b.n	8005de4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d0f0      	beq.n	8005dc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	00030d40 	.word	0x00030d40

08005df4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3301      	adds	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4a11      	ldr	r2, [pc, #68]	; (8005e50 <USB_FlushRxFifo+0x5c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d901      	bls.n	8005e12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e018      	b.n	8005e44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	daf2      	bge.n	8005e00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2210      	movs	r2, #16
 8005e22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3301      	adds	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <USB_FlushRxFifo+0x5c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e006      	b.n	8005e44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b10      	cmp	r3, #16
 8005e40:	d0f0      	beq.n	8005e24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	00030d40 	.word	0x00030d40

08005e54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e74:	4313      	orrs	r3, r2
 8005e76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ea0:	f023 0303 	bic.w	r3, r3, #3
 8005ea4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eb4:	f043 0302 	orr.w	r3, r3, #2
 8005eb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4a13      	ldr	r2, [pc, #76]	; (8005f48 <USB_CoreReset+0x64>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d901      	bls.n	8005f02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e01b      	b.n	8005f3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	daf2      	bge.n	8005ef0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f043 0201 	orr.w	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a09      	ldr	r2, [pc, #36]	; (8005f48 <USB_CoreReset+0x64>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d901      	bls.n	8005f2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e006      	b.n	8005f3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d0f0      	beq.n	8005f1a <USB_CoreReset+0x36>

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	00030d40 	.word	0x00030d40

08005f4c <__errno>:
 8005f4c:	4b01      	ldr	r3, [pc, #4]	; (8005f54 <__errno+0x8>)
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	24000010 	.word	0x24000010

08005f58 <__libc_init_array>:
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	4d0d      	ldr	r5, [pc, #52]	; (8005f90 <__libc_init_array+0x38>)
 8005f5c:	4c0d      	ldr	r4, [pc, #52]	; (8005f94 <__libc_init_array+0x3c>)
 8005f5e:	1b64      	subs	r4, r4, r5
 8005f60:	10a4      	asrs	r4, r4, #2
 8005f62:	2600      	movs	r6, #0
 8005f64:	42a6      	cmp	r6, r4
 8005f66:	d109      	bne.n	8005f7c <__libc_init_array+0x24>
 8005f68:	4d0b      	ldr	r5, [pc, #44]	; (8005f98 <__libc_init_array+0x40>)
 8005f6a:	4c0c      	ldr	r4, [pc, #48]	; (8005f9c <__libc_init_array+0x44>)
 8005f6c:	f000 fc8e 	bl	800688c <_init>
 8005f70:	1b64      	subs	r4, r4, r5
 8005f72:	10a4      	asrs	r4, r4, #2
 8005f74:	2600      	movs	r6, #0
 8005f76:	42a6      	cmp	r6, r4
 8005f78:	d105      	bne.n	8005f86 <__libc_init_array+0x2e>
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f80:	4798      	blx	r3
 8005f82:	3601      	adds	r6, #1
 8005f84:	e7ee      	b.n	8005f64 <__libc_init_array+0xc>
 8005f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f8a:	4798      	blx	r3
 8005f8c:	3601      	adds	r6, #1
 8005f8e:	e7f2      	b.n	8005f76 <__libc_init_array+0x1e>
 8005f90:	08006930 	.word	0x08006930
 8005f94:	08006930 	.word	0x08006930
 8005f98:	08006930 	.word	0x08006930
 8005f9c:	08006934 	.word	0x08006934

08005fa0 <memset>:
 8005fa0:	4402      	add	r2, r0
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d100      	bne.n	8005faa <memset+0xa>
 8005fa8:	4770      	bx	lr
 8005faa:	f803 1b01 	strb.w	r1, [r3], #1
 8005fae:	e7f9      	b.n	8005fa4 <memset+0x4>

08005fb0 <siprintf>:
 8005fb0:	b40e      	push	{r1, r2, r3}
 8005fb2:	b500      	push	{lr}
 8005fb4:	b09c      	sub	sp, #112	; 0x70
 8005fb6:	ab1d      	add	r3, sp, #116	; 0x74
 8005fb8:	9002      	str	r0, [sp, #8]
 8005fba:	9006      	str	r0, [sp, #24]
 8005fbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fc0:	4809      	ldr	r0, [pc, #36]	; (8005fe8 <siprintf+0x38>)
 8005fc2:	9107      	str	r1, [sp, #28]
 8005fc4:	9104      	str	r1, [sp, #16]
 8005fc6:	4909      	ldr	r1, [pc, #36]	; (8005fec <siprintf+0x3c>)
 8005fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fcc:	9105      	str	r1, [sp, #20]
 8005fce:	6800      	ldr	r0, [r0, #0]
 8005fd0:	9301      	str	r3, [sp, #4]
 8005fd2:	a902      	add	r1, sp, #8
 8005fd4:	f000 f868 	bl	80060a8 <_svfiprintf_r>
 8005fd8:	9b02      	ldr	r3, [sp, #8]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	b01c      	add	sp, #112	; 0x70
 8005fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fe4:	b003      	add	sp, #12
 8005fe6:	4770      	bx	lr
 8005fe8:	24000010 	.word	0x24000010
 8005fec:	ffff0208 	.word	0xffff0208

08005ff0 <__ssputs_r>:
 8005ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff4:	688e      	ldr	r6, [r1, #8]
 8005ff6:	429e      	cmp	r6, r3
 8005ff8:	4682      	mov	sl, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	4690      	mov	r8, r2
 8005ffe:	461f      	mov	r7, r3
 8006000:	d838      	bhi.n	8006074 <__ssputs_r+0x84>
 8006002:	898a      	ldrh	r2, [r1, #12]
 8006004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006008:	d032      	beq.n	8006070 <__ssputs_r+0x80>
 800600a:	6825      	ldr	r5, [r4, #0]
 800600c:	6909      	ldr	r1, [r1, #16]
 800600e:	eba5 0901 	sub.w	r9, r5, r1
 8006012:	6965      	ldr	r5, [r4, #20]
 8006014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006018:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800601c:	3301      	adds	r3, #1
 800601e:	444b      	add	r3, r9
 8006020:	106d      	asrs	r5, r5, #1
 8006022:	429d      	cmp	r5, r3
 8006024:	bf38      	it	cc
 8006026:	461d      	movcc	r5, r3
 8006028:	0553      	lsls	r3, r2, #21
 800602a:	d531      	bpl.n	8006090 <__ssputs_r+0xa0>
 800602c:	4629      	mov	r1, r5
 800602e:	f000 fb63 	bl	80066f8 <_malloc_r>
 8006032:	4606      	mov	r6, r0
 8006034:	b950      	cbnz	r0, 800604c <__ssputs_r+0x5c>
 8006036:	230c      	movs	r3, #12
 8006038:	f8ca 3000 	str.w	r3, [sl]
 800603c:	89a3      	ldrh	r3, [r4, #12]
 800603e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006042:	81a3      	strh	r3, [r4, #12]
 8006044:	f04f 30ff 	mov.w	r0, #4294967295
 8006048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604c:	6921      	ldr	r1, [r4, #16]
 800604e:	464a      	mov	r2, r9
 8006050:	f000 fabe 	bl	80065d0 <memcpy>
 8006054:	89a3      	ldrh	r3, [r4, #12]
 8006056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800605a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605e:	81a3      	strh	r3, [r4, #12]
 8006060:	6126      	str	r6, [r4, #16]
 8006062:	6165      	str	r5, [r4, #20]
 8006064:	444e      	add	r6, r9
 8006066:	eba5 0509 	sub.w	r5, r5, r9
 800606a:	6026      	str	r6, [r4, #0]
 800606c:	60a5      	str	r5, [r4, #8]
 800606e:	463e      	mov	r6, r7
 8006070:	42be      	cmp	r6, r7
 8006072:	d900      	bls.n	8006076 <__ssputs_r+0x86>
 8006074:	463e      	mov	r6, r7
 8006076:	6820      	ldr	r0, [r4, #0]
 8006078:	4632      	mov	r2, r6
 800607a:	4641      	mov	r1, r8
 800607c:	f000 fab6 	bl	80065ec <memmove>
 8006080:	68a3      	ldr	r3, [r4, #8]
 8006082:	1b9b      	subs	r3, r3, r6
 8006084:	60a3      	str	r3, [r4, #8]
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	4433      	add	r3, r6
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	2000      	movs	r0, #0
 800608e:	e7db      	b.n	8006048 <__ssputs_r+0x58>
 8006090:	462a      	mov	r2, r5
 8006092:	f000 fba5 	bl	80067e0 <_realloc_r>
 8006096:	4606      	mov	r6, r0
 8006098:	2800      	cmp	r0, #0
 800609a:	d1e1      	bne.n	8006060 <__ssputs_r+0x70>
 800609c:	6921      	ldr	r1, [r4, #16]
 800609e:	4650      	mov	r0, sl
 80060a0:	f000 fabe 	bl	8006620 <_free_r>
 80060a4:	e7c7      	b.n	8006036 <__ssputs_r+0x46>
	...

080060a8 <_svfiprintf_r>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	4698      	mov	r8, r3
 80060ae:	898b      	ldrh	r3, [r1, #12]
 80060b0:	061b      	lsls	r3, r3, #24
 80060b2:	b09d      	sub	sp, #116	; 0x74
 80060b4:	4607      	mov	r7, r0
 80060b6:	460d      	mov	r5, r1
 80060b8:	4614      	mov	r4, r2
 80060ba:	d50e      	bpl.n	80060da <_svfiprintf_r+0x32>
 80060bc:	690b      	ldr	r3, [r1, #16]
 80060be:	b963      	cbnz	r3, 80060da <_svfiprintf_r+0x32>
 80060c0:	2140      	movs	r1, #64	; 0x40
 80060c2:	f000 fb19 	bl	80066f8 <_malloc_r>
 80060c6:	6028      	str	r0, [r5, #0]
 80060c8:	6128      	str	r0, [r5, #16]
 80060ca:	b920      	cbnz	r0, 80060d6 <_svfiprintf_r+0x2e>
 80060cc:	230c      	movs	r3, #12
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295
 80060d4:	e0d1      	b.n	800627a <_svfiprintf_r+0x1d2>
 80060d6:	2340      	movs	r3, #64	; 0x40
 80060d8:	616b      	str	r3, [r5, #20]
 80060da:	2300      	movs	r3, #0
 80060dc:	9309      	str	r3, [sp, #36]	; 0x24
 80060de:	2320      	movs	r3, #32
 80060e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80060e8:	2330      	movs	r3, #48	; 0x30
 80060ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006294 <_svfiprintf_r+0x1ec>
 80060ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060f2:	f04f 0901 	mov.w	r9, #1
 80060f6:	4623      	mov	r3, r4
 80060f8:	469a      	mov	sl, r3
 80060fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060fe:	b10a      	cbz	r2, 8006104 <_svfiprintf_r+0x5c>
 8006100:	2a25      	cmp	r2, #37	; 0x25
 8006102:	d1f9      	bne.n	80060f8 <_svfiprintf_r+0x50>
 8006104:	ebba 0b04 	subs.w	fp, sl, r4
 8006108:	d00b      	beq.n	8006122 <_svfiprintf_r+0x7a>
 800610a:	465b      	mov	r3, fp
 800610c:	4622      	mov	r2, r4
 800610e:	4629      	mov	r1, r5
 8006110:	4638      	mov	r0, r7
 8006112:	f7ff ff6d 	bl	8005ff0 <__ssputs_r>
 8006116:	3001      	adds	r0, #1
 8006118:	f000 80aa 	beq.w	8006270 <_svfiprintf_r+0x1c8>
 800611c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800611e:	445a      	add	r2, fp
 8006120:	9209      	str	r2, [sp, #36]	; 0x24
 8006122:	f89a 3000 	ldrb.w	r3, [sl]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 80a2 	beq.w	8006270 <_svfiprintf_r+0x1c8>
 800612c:	2300      	movs	r3, #0
 800612e:	f04f 32ff 	mov.w	r2, #4294967295
 8006132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006136:	f10a 0a01 	add.w	sl, sl, #1
 800613a:	9304      	str	r3, [sp, #16]
 800613c:	9307      	str	r3, [sp, #28]
 800613e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006142:	931a      	str	r3, [sp, #104]	; 0x68
 8006144:	4654      	mov	r4, sl
 8006146:	2205      	movs	r2, #5
 8006148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614c:	4851      	ldr	r0, [pc, #324]	; (8006294 <_svfiprintf_r+0x1ec>)
 800614e:	f7fa f8c7 	bl	80002e0 <memchr>
 8006152:	9a04      	ldr	r2, [sp, #16]
 8006154:	b9d8      	cbnz	r0, 800618e <_svfiprintf_r+0xe6>
 8006156:	06d0      	lsls	r0, r2, #27
 8006158:	bf44      	itt	mi
 800615a:	2320      	movmi	r3, #32
 800615c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006160:	0711      	lsls	r1, r2, #28
 8006162:	bf44      	itt	mi
 8006164:	232b      	movmi	r3, #43	; 0x2b
 8006166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800616a:	f89a 3000 	ldrb.w	r3, [sl]
 800616e:	2b2a      	cmp	r3, #42	; 0x2a
 8006170:	d015      	beq.n	800619e <_svfiprintf_r+0xf6>
 8006172:	9a07      	ldr	r2, [sp, #28]
 8006174:	4654      	mov	r4, sl
 8006176:	2000      	movs	r0, #0
 8006178:	f04f 0c0a 	mov.w	ip, #10
 800617c:	4621      	mov	r1, r4
 800617e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006182:	3b30      	subs	r3, #48	; 0x30
 8006184:	2b09      	cmp	r3, #9
 8006186:	d94e      	bls.n	8006226 <_svfiprintf_r+0x17e>
 8006188:	b1b0      	cbz	r0, 80061b8 <_svfiprintf_r+0x110>
 800618a:	9207      	str	r2, [sp, #28]
 800618c:	e014      	b.n	80061b8 <_svfiprintf_r+0x110>
 800618e:	eba0 0308 	sub.w	r3, r0, r8
 8006192:	fa09 f303 	lsl.w	r3, r9, r3
 8006196:	4313      	orrs	r3, r2
 8006198:	9304      	str	r3, [sp, #16]
 800619a:	46a2      	mov	sl, r4
 800619c:	e7d2      	b.n	8006144 <_svfiprintf_r+0x9c>
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	1d19      	adds	r1, r3, #4
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	9103      	str	r1, [sp, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bfbb      	ittet	lt
 80061aa:	425b      	neglt	r3, r3
 80061ac:	f042 0202 	orrlt.w	r2, r2, #2
 80061b0:	9307      	strge	r3, [sp, #28]
 80061b2:	9307      	strlt	r3, [sp, #28]
 80061b4:	bfb8      	it	lt
 80061b6:	9204      	strlt	r2, [sp, #16]
 80061b8:	7823      	ldrb	r3, [r4, #0]
 80061ba:	2b2e      	cmp	r3, #46	; 0x2e
 80061bc:	d10c      	bne.n	80061d8 <_svfiprintf_r+0x130>
 80061be:	7863      	ldrb	r3, [r4, #1]
 80061c0:	2b2a      	cmp	r3, #42	; 0x2a
 80061c2:	d135      	bne.n	8006230 <_svfiprintf_r+0x188>
 80061c4:	9b03      	ldr	r3, [sp, #12]
 80061c6:	1d1a      	adds	r2, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	9203      	str	r2, [sp, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bfb8      	it	lt
 80061d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80061d4:	3402      	adds	r4, #2
 80061d6:	9305      	str	r3, [sp, #20]
 80061d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80062a4 <_svfiprintf_r+0x1fc>
 80061dc:	7821      	ldrb	r1, [r4, #0]
 80061de:	2203      	movs	r2, #3
 80061e0:	4650      	mov	r0, sl
 80061e2:	f7fa f87d 	bl	80002e0 <memchr>
 80061e6:	b140      	cbz	r0, 80061fa <_svfiprintf_r+0x152>
 80061e8:	2340      	movs	r3, #64	; 0x40
 80061ea:	eba0 000a 	sub.w	r0, r0, sl
 80061ee:	fa03 f000 	lsl.w	r0, r3, r0
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	4303      	orrs	r3, r0
 80061f6:	3401      	adds	r4, #1
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061fe:	4826      	ldr	r0, [pc, #152]	; (8006298 <_svfiprintf_r+0x1f0>)
 8006200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006204:	2206      	movs	r2, #6
 8006206:	f7fa f86b 	bl	80002e0 <memchr>
 800620a:	2800      	cmp	r0, #0
 800620c:	d038      	beq.n	8006280 <_svfiprintf_r+0x1d8>
 800620e:	4b23      	ldr	r3, [pc, #140]	; (800629c <_svfiprintf_r+0x1f4>)
 8006210:	bb1b      	cbnz	r3, 800625a <_svfiprintf_r+0x1b2>
 8006212:	9b03      	ldr	r3, [sp, #12]
 8006214:	3307      	adds	r3, #7
 8006216:	f023 0307 	bic.w	r3, r3, #7
 800621a:	3308      	adds	r3, #8
 800621c:	9303      	str	r3, [sp, #12]
 800621e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006220:	4433      	add	r3, r6
 8006222:	9309      	str	r3, [sp, #36]	; 0x24
 8006224:	e767      	b.n	80060f6 <_svfiprintf_r+0x4e>
 8006226:	fb0c 3202 	mla	r2, ip, r2, r3
 800622a:	460c      	mov	r4, r1
 800622c:	2001      	movs	r0, #1
 800622e:	e7a5      	b.n	800617c <_svfiprintf_r+0xd4>
 8006230:	2300      	movs	r3, #0
 8006232:	3401      	adds	r4, #1
 8006234:	9305      	str	r3, [sp, #20]
 8006236:	4619      	mov	r1, r3
 8006238:	f04f 0c0a 	mov.w	ip, #10
 800623c:	4620      	mov	r0, r4
 800623e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006242:	3a30      	subs	r2, #48	; 0x30
 8006244:	2a09      	cmp	r2, #9
 8006246:	d903      	bls.n	8006250 <_svfiprintf_r+0x1a8>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0c5      	beq.n	80061d8 <_svfiprintf_r+0x130>
 800624c:	9105      	str	r1, [sp, #20]
 800624e:	e7c3      	b.n	80061d8 <_svfiprintf_r+0x130>
 8006250:	fb0c 2101 	mla	r1, ip, r1, r2
 8006254:	4604      	mov	r4, r0
 8006256:	2301      	movs	r3, #1
 8006258:	e7f0      	b.n	800623c <_svfiprintf_r+0x194>
 800625a:	ab03      	add	r3, sp, #12
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	462a      	mov	r2, r5
 8006260:	4b0f      	ldr	r3, [pc, #60]	; (80062a0 <_svfiprintf_r+0x1f8>)
 8006262:	a904      	add	r1, sp, #16
 8006264:	4638      	mov	r0, r7
 8006266:	f3af 8000 	nop.w
 800626a:	1c42      	adds	r2, r0, #1
 800626c:	4606      	mov	r6, r0
 800626e:	d1d6      	bne.n	800621e <_svfiprintf_r+0x176>
 8006270:	89ab      	ldrh	r3, [r5, #12]
 8006272:	065b      	lsls	r3, r3, #25
 8006274:	f53f af2c 	bmi.w	80060d0 <_svfiprintf_r+0x28>
 8006278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800627a:	b01d      	add	sp, #116	; 0x74
 800627c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006280:	ab03      	add	r3, sp, #12
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	462a      	mov	r2, r5
 8006286:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <_svfiprintf_r+0x1f8>)
 8006288:	a904      	add	r1, sp, #16
 800628a:	4638      	mov	r0, r7
 800628c:	f000 f87a 	bl	8006384 <_printf_i>
 8006290:	e7eb      	b.n	800626a <_svfiprintf_r+0x1c2>
 8006292:	bf00      	nop
 8006294:	080068f4 	.word	0x080068f4
 8006298:	080068fe 	.word	0x080068fe
 800629c:	00000000 	.word	0x00000000
 80062a0:	08005ff1 	.word	0x08005ff1
 80062a4:	080068fa 	.word	0x080068fa

080062a8 <_printf_common>:
 80062a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ac:	4616      	mov	r6, r2
 80062ae:	4699      	mov	r9, r3
 80062b0:	688a      	ldr	r2, [r1, #8]
 80062b2:	690b      	ldr	r3, [r1, #16]
 80062b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062b8:	4293      	cmp	r3, r2
 80062ba:	bfb8      	it	lt
 80062bc:	4613      	movlt	r3, r2
 80062be:	6033      	str	r3, [r6, #0]
 80062c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062c4:	4607      	mov	r7, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	b10a      	cbz	r2, 80062ce <_printf_common+0x26>
 80062ca:	3301      	adds	r3, #1
 80062cc:	6033      	str	r3, [r6, #0]
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	0699      	lsls	r1, r3, #26
 80062d2:	bf42      	ittt	mi
 80062d4:	6833      	ldrmi	r3, [r6, #0]
 80062d6:	3302      	addmi	r3, #2
 80062d8:	6033      	strmi	r3, [r6, #0]
 80062da:	6825      	ldr	r5, [r4, #0]
 80062dc:	f015 0506 	ands.w	r5, r5, #6
 80062e0:	d106      	bne.n	80062f0 <_printf_common+0x48>
 80062e2:	f104 0a19 	add.w	sl, r4, #25
 80062e6:	68e3      	ldr	r3, [r4, #12]
 80062e8:	6832      	ldr	r2, [r6, #0]
 80062ea:	1a9b      	subs	r3, r3, r2
 80062ec:	42ab      	cmp	r3, r5
 80062ee:	dc26      	bgt.n	800633e <_printf_common+0x96>
 80062f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062f4:	1e13      	subs	r3, r2, #0
 80062f6:	6822      	ldr	r2, [r4, #0]
 80062f8:	bf18      	it	ne
 80062fa:	2301      	movne	r3, #1
 80062fc:	0692      	lsls	r2, r2, #26
 80062fe:	d42b      	bmi.n	8006358 <_printf_common+0xb0>
 8006300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006304:	4649      	mov	r1, r9
 8006306:	4638      	mov	r0, r7
 8006308:	47c0      	blx	r8
 800630a:	3001      	adds	r0, #1
 800630c:	d01e      	beq.n	800634c <_printf_common+0xa4>
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	68e5      	ldr	r5, [r4, #12]
 8006312:	6832      	ldr	r2, [r6, #0]
 8006314:	f003 0306 	and.w	r3, r3, #6
 8006318:	2b04      	cmp	r3, #4
 800631a:	bf08      	it	eq
 800631c:	1aad      	subeq	r5, r5, r2
 800631e:	68a3      	ldr	r3, [r4, #8]
 8006320:	6922      	ldr	r2, [r4, #16]
 8006322:	bf0c      	ite	eq
 8006324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006328:	2500      	movne	r5, #0
 800632a:	4293      	cmp	r3, r2
 800632c:	bfc4      	itt	gt
 800632e:	1a9b      	subgt	r3, r3, r2
 8006330:	18ed      	addgt	r5, r5, r3
 8006332:	2600      	movs	r6, #0
 8006334:	341a      	adds	r4, #26
 8006336:	42b5      	cmp	r5, r6
 8006338:	d11a      	bne.n	8006370 <_printf_common+0xc8>
 800633a:	2000      	movs	r0, #0
 800633c:	e008      	b.n	8006350 <_printf_common+0xa8>
 800633e:	2301      	movs	r3, #1
 8006340:	4652      	mov	r2, sl
 8006342:	4649      	mov	r1, r9
 8006344:	4638      	mov	r0, r7
 8006346:	47c0      	blx	r8
 8006348:	3001      	adds	r0, #1
 800634a:	d103      	bne.n	8006354 <_printf_common+0xac>
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006354:	3501      	adds	r5, #1
 8006356:	e7c6      	b.n	80062e6 <_printf_common+0x3e>
 8006358:	18e1      	adds	r1, r4, r3
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	2030      	movs	r0, #48	; 0x30
 800635e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006362:	4422      	add	r2, r4
 8006364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800636c:	3302      	adds	r3, #2
 800636e:	e7c7      	b.n	8006300 <_printf_common+0x58>
 8006370:	2301      	movs	r3, #1
 8006372:	4622      	mov	r2, r4
 8006374:	4649      	mov	r1, r9
 8006376:	4638      	mov	r0, r7
 8006378:	47c0      	blx	r8
 800637a:	3001      	adds	r0, #1
 800637c:	d0e6      	beq.n	800634c <_printf_common+0xa4>
 800637e:	3601      	adds	r6, #1
 8006380:	e7d9      	b.n	8006336 <_printf_common+0x8e>
	...

08006384 <_printf_i>:
 8006384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006388:	7e0f      	ldrb	r7, [r1, #24]
 800638a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800638c:	2f78      	cmp	r7, #120	; 0x78
 800638e:	4691      	mov	r9, r2
 8006390:	4680      	mov	r8, r0
 8006392:	460c      	mov	r4, r1
 8006394:	469a      	mov	sl, r3
 8006396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800639a:	d807      	bhi.n	80063ac <_printf_i+0x28>
 800639c:	2f62      	cmp	r7, #98	; 0x62
 800639e:	d80a      	bhi.n	80063b6 <_printf_i+0x32>
 80063a0:	2f00      	cmp	r7, #0
 80063a2:	f000 80d8 	beq.w	8006556 <_printf_i+0x1d2>
 80063a6:	2f58      	cmp	r7, #88	; 0x58
 80063a8:	f000 80a3 	beq.w	80064f2 <_printf_i+0x16e>
 80063ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063b4:	e03a      	b.n	800642c <_printf_i+0xa8>
 80063b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063ba:	2b15      	cmp	r3, #21
 80063bc:	d8f6      	bhi.n	80063ac <_printf_i+0x28>
 80063be:	a101      	add	r1, pc, #4	; (adr r1, 80063c4 <_printf_i+0x40>)
 80063c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063c4:	0800641d 	.word	0x0800641d
 80063c8:	08006431 	.word	0x08006431
 80063cc:	080063ad 	.word	0x080063ad
 80063d0:	080063ad 	.word	0x080063ad
 80063d4:	080063ad 	.word	0x080063ad
 80063d8:	080063ad 	.word	0x080063ad
 80063dc:	08006431 	.word	0x08006431
 80063e0:	080063ad 	.word	0x080063ad
 80063e4:	080063ad 	.word	0x080063ad
 80063e8:	080063ad 	.word	0x080063ad
 80063ec:	080063ad 	.word	0x080063ad
 80063f0:	0800653d 	.word	0x0800653d
 80063f4:	08006461 	.word	0x08006461
 80063f8:	0800651f 	.word	0x0800651f
 80063fc:	080063ad 	.word	0x080063ad
 8006400:	080063ad 	.word	0x080063ad
 8006404:	0800655f 	.word	0x0800655f
 8006408:	080063ad 	.word	0x080063ad
 800640c:	08006461 	.word	0x08006461
 8006410:	080063ad 	.word	0x080063ad
 8006414:	080063ad 	.word	0x080063ad
 8006418:	08006527 	.word	0x08006527
 800641c:	682b      	ldr	r3, [r5, #0]
 800641e:	1d1a      	adds	r2, r3, #4
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	602a      	str	r2, [r5, #0]
 8006424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800642c:	2301      	movs	r3, #1
 800642e:	e0a3      	b.n	8006578 <_printf_i+0x1f4>
 8006430:	6820      	ldr	r0, [r4, #0]
 8006432:	6829      	ldr	r1, [r5, #0]
 8006434:	0606      	lsls	r6, r0, #24
 8006436:	f101 0304 	add.w	r3, r1, #4
 800643a:	d50a      	bpl.n	8006452 <_printf_i+0xce>
 800643c:	680e      	ldr	r6, [r1, #0]
 800643e:	602b      	str	r3, [r5, #0]
 8006440:	2e00      	cmp	r6, #0
 8006442:	da03      	bge.n	800644c <_printf_i+0xc8>
 8006444:	232d      	movs	r3, #45	; 0x2d
 8006446:	4276      	negs	r6, r6
 8006448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800644c:	485e      	ldr	r0, [pc, #376]	; (80065c8 <_printf_i+0x244>)
 800644e:	230a      	movs	r3, #10
 8006450:	e019      	b.n	8006486 <_printf_i+0x102>
 8006452:	680e      	ldr	r6, [r1, #0]
 8006454:	602b      	str	r3, [r5, #0]
 8006456:	f010 0f40 	tst.w	r0, #64	; 0x40
 800645a:	bf18      	it	ne
 800645c:	b236      	sxthne	r6, r6
 800645e:	e7ef      	b.n	8006440 <_printf_i+0xbc>
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	6820      	ldr	r0, [r4, #0]
 8006464:	1d19      	adds	r1, r3, #4
 8006466:	6029      	str	r1, [r5, #0]
 8006468:	0601      	lsls	r1, r0, #24
 800646a:	d501      	bpl.n	8006470 <_printf_i+0xec>
 800646c:	681e      	ldr	r6, [r3, #0]
 800646e:	e002      	b.n	8006476 <_printf_i+0xf2>
 8006470:	0646      	lsls	r6, r0, #25
 8006472:	d5fb      	bpl.n	800646c <_printf_i+0xe8>
 8006474:	881e      	ldrh	r6, [r3, #0]
 8006476:	4854      	ldr	r0, [pc, #336]	; (80065c8 <_printf_i+0x244>)
 8006478:	2f6f      	cmp	r7, #111	; 0x6f
 800647a:	bf0c      	ite	eq
 800647c:	2308      	moveq	r3, #8
 800647e:	230a      	movne	r3, #10
 8006480:	2100      	movs	r1, #0
 8006482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006486:	6865      	ldr	r5, [r4, #4]
 8006488:	60a5      	str	r5, [r4, #8]
 800648a:	2d00      	cmp	r5, #0
 800648c:	bfa2      	ittt	ge
 800648e:	6821      	ldrge	r1, [r4, #0]
 8006490:	f021 0104 	bicge.w	r1, r1, #4
 8006494:	6021      	strge	r1, [r4, #0]
 8006496:	b90e      	cbnz	r6, 800649c <_printf_i+0x118>
 8006498:	2d00      	cmp	r5, #0
 800649a:	d04d      	beq.n	8006538 <_printf_i+0x1b4>
 800649c:	4615      	mov	r5, r2
 800649e:	fbb6 f1f3 	udiv	r1, r6, r3
 80064a2:	fb03 6711 	mls	r7, r3, r1, r6
 80064a6:	5dc7      	ldrb	r7, [r0, r7]
 80064a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064ac:	4637      	mov	r7, r6
 80064ae:	42bb      	cmp	r3, r7
 80064b0:	460e      	mov	r6, r1
 80064b2:	d9f4      	bls.n	800649e <_printf_i+0x11a>
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d10b      	bne.n	80064d0 <_printf_i+0x14c>
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	07de      	lsls	r6, r3, #31
 80064bc:	d508      	bpl.n	80064d0 <_printf_i+0x14c>
 80064be:	6923      	ldr	r3, [r4, #16]
 80064c0:	6861      	ldr	r1, [r4, #4]
 80064c2:	4299      	cmp	r1, r3
 80064c4:	bfde      	ittt	le
 80064c6:	2330      	movle	r3, #48	; 0x30
 80064c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064d0:	1b52      	subs	r2, r2, r5
 80064d2:	6122      	str	r2, [r4, #16]
 80064d4:	f8cd a000 	str.w	sl, [sp]
 80064d8:	464b      	mov	r3, r9
 80064da:	aa03      	add	r2, sp, #12
 80064dc:	4621      	mov	r1, r4
 80064de:	4640      	mov	r0, r8
 80064e0:	f7ff fee2 	bl	80062a8 <_printf_common>
 80064e4:	3001      	adds	r0, #1
 80064e6:	d14c      	bne.n	8006582 <_printf_i+0x1fe>
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ec:	b004      	add	sp, #16
 80064ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f2:	4835      	ldr	r0, [pc, #212]	; (80065c8 <_printf_i+0x244>)
 80064f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064f8:	6829      	ldr	r1, [r5, #0]
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006500:	6029      	str	r1, [r5, #0]
 8006502:	061d      	lsls	r5, r3, #24
 8006504:	d514      	bpl.n	8006530 <_printf_i+0x1ac>
 8006506:	07df      	lsls	r7, r3, #31
 8006508:	bf44      	itt	mi
 800650a:	f043 0320 	orrmi.w	r3, r3, #32
 800650e:	6023      	strmi	r3, [r4, #0]
 8006510:	b91e      	cbnz	r6, 800651a <_printf_i+0x196>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	f023 0320 	bic.w	r3, r3, #32
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	2310      	movs	r3, #16
 800651c:	e7b0      	b.n	8006480 <_printf_i+0xfc>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	f043 0320 	orr.w	r3, r3, #32
 8006524:	6023      	str	r3, [r4, #0]
 8006526:	2378      	movs	r3, #120	; 0x78
 8006528:	4828      	ldr	r0, [pc, #160]	; (80065cc <_printf_i+0x248>)
 800652a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800652e:	e7e3      	b.n	80064f8 <_printf_i+0x174>
 8006530:	0659      	lsls	r1, r3, #25
 8006532:	bf48      	it	mi
 8006534:	b2b6      	uxthmi	r6, r6
 8006536:	e7e6      	b.n	8006506 <_printf_i+0x182>
 8006538:	4615      	mov	r5, r2
 800653a:	e7bb      	b.n	80064b4 <_printf_i+0x130>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	6826      	ldr	r6, [r4, #0]
 8006540:	6961      	ldr	r1, [r4, #20]
 8006542:	1d18      	adds	r0, r3, #4
 8006544:	6028      	str	r0, [r5, #0]
 8006546:	0635      	lsls	r5, r6, #24
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	d501      	bpl.n	8006550 <_printf_i+0x1cc>
 800654c:	6019      	str	r1, [r3, #0]
 800654e:	e002      	b.n	8006556 <_printf_i+0x1d2>
 8006550:	0670      	lsls	r0, r6, #25
 8006552:	d5fb      	bpl.n	800654c <_printf_i+0x1c8>
 8006554:	8019      	strh	r1, [r3, #0]
 8006556:	2300      	movs	r3, #0
 8006558:	6123      	str	r3, [r4, #16]
 800655a:	4615      	mov	r5, r2
 800655c:	e7ba      	b.n	80064d4 <_printf_i+0x150>
 800655e:	682b      	ldr	r3, [r5, #0]
 8006560:	1d1a      	adds	r2, r3, #4
 8006562:	602a      	str	r2, [r5, #0]
 8006564:	681d      	ldr	r5, [r3, #0]
 8006566:	6862      	ldr	r2, [r4, #4]
 8006568:	2100      	movs	r1, #0
 800656a:	4628      	mov	r0, r5
 800656c:	f7f9 feb8 	bl	80002e0 <memchr>
 8006570:	b108      	cbz	r0, 8006576 <_printf_i+0x1f2>
 8006572:	1b40      	subs	r0, r0, r5
 8006574:	6060      	str	r0, [r4, #4]
 8006576:	6863      	ldr	r3, [r4, #4]
 8006578:	6123      	str	r3, [r4, #16]
 800657a:	2300      	movs	r3, #0
 800657c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006580:	e7a8      	b.n	80064d4 <_printf_i+0x150>
 8006582:	6923      	ldr	r3, [r4, #16]
 8006584:	462a      	mov	r2, r5
 8006586:	4649      	mov	r1, r9
 8006588:	4640      	mov	r0, r8
 800658a:	47d0      	blx	sl
 800658c:	3001      	adds	r0, #1
 800658e:	d0ab      	beq.n	80064e8 <_printf_i+0x164>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	079b      	lsls	r3, r3, #30
 8006594:	d413      	bmi.n	80065be <_printf_i+0x23a>
 8006596:	68e0      	ldr	r0, [r4, #12]
 8006598:	9b03      	ldr	r3, [sp, #12]
 800659a:	4298      	cmp	r0, r3
 800659c:	bfb8      	it	lt
 800659e:	4618      	movlt	r0, r3
 80065a0:	e7a4      	b.n	80064ec <_printf_i+0x168>
 80065a2:	2301      	movs	r3, #1
 80065a4:	4632      	mov	r2, r6
 80065a6:	4649      	mov	r1, r9
 80065a8:	4640      	mov	r0, r8
 80065aa:	47d0      	blx	sl
 80065ac:	3001      	adds	r0, #1
 80065ae:	d09b      	beq.n	80064e8 <_printf_i+0x164>
 80065b0:	3501      	adds	r5, #1
 80065b2:	68e3      	ldr	r3, [r4, #12]
 80065b4:	9903      	ldr	r1, [sp, #12]
 80065b6:	1a5b      	subs	r3, r3, r1
 80065b8:	42ab      	cmp	r3, r5
 80065ba:	dcf2      	bgt.n	80065a2 <_printf_i+0x21e>
 80065bc:	e7eb      	b.n	8006596 <_printf_i+0x212>
 80065be:	2500      	movs	r5, #0
 80065c0:	f104 0619 	add.w	r6, r4, #25
 80065c4:	e7f5      	b.n	80065b2 <_printf_i+0x22e>
 80065c6:	bf00      	nop
 80065c8:	08006905 	.word	0x08006905
 80065cc:	08006916 	.word	0x08006916

080065d0 <memcpy>:
 80065d0:	440a      	add	r2, r1
 80065d2:	4291      	cmp	r1, r2
 80065d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065d8:	d100      	bne.n	80065dc <memcpy+0xc>
 80065da:	4770      	bx	lr
 80065dc:	b510      	push	{r4, lr}
 80065de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065e6:	4291      	cmp	r1, r2
 80065e8:	d1f9      	bne.n	80065de <memcpy+0xe>
 80065ea:	bd10      	pop	{r4, pc}

080065ec <memmove>:
 80065ec:	4288      	cmp	r0, r1
 80065ee:	b510      	push	{r4, lr}
 80065f0:	eb01 0402 	add.w	r4, r1, r2
 80065f4:	d902      	bls.n	80065fc <memmove+0x10>
 80065f6:	4284      	cmp	r4, r0
 80065f8:	4623      	mov	r3, r4
 80065fa:	d807      	bhi.n	800660c <memmove+0x20>
 80065fc:	1e43      	subs	r3, r0, #1
 80065fe:	42a1      	cmp	r1, r4
 8006600:	d008      	beq.n	8006614 <memmove+0x28>
 8006602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800660a:	e7f8      	b.n	80065fe <memmove+0x12>
 800660c:	4402      	add	r2, r0
 800660e:	4601      	mov	r1, r0
 8006610:	428a      	cmp	r2, r1
 8006612:	d100      	bne.n	8006616 <memmove+0x2a>
 8006614:	bd10      	pop	{r4, pc}
 8006616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800661a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800661e:	e7f7      	b.n	8006610 <memmove+0x24>

08006620 <_free_r>:
 8006620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006622:	2900      	cmp	r1, #0
 8006624:	d044      	beq.n	80066b0 <_free_r+0x90>
 8006626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800662a:	9001      	str	r0, [sp, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	f1a1 0404 	sub.w	r4, r1, #4
 8006632:	bfb8      	it	lt
 8006634:	18e4      	addlt	r4, r4, r3
 8006636:	f000 f913 	bl	8006860 <__malloc_lock>
 800663a:	4a1e      	ldr	r2, [pc, #120]	; (80066b4 <_free_r+0x94>)
 800663c:	9801      	ldr	r0, [sp, #4]
 800663e:	6813      	ldr	r3, [r2, #0]
 8006640:	b933      	cbnz	r3, 8006650 <_free_r+0x30>
 8006642:	6063      	str	r3, [r4, #4]
 8006644:	6014      	str	r4, [r2, #0]
 8006646:	b003      	add	sp, #12
 8006648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800664c:	f000 b90e 	b.w	800686c <__malloc_unlock>
 8006650:	42a3      	cmp	r3, r4
 8006652:	d908      	bls.n	8006666 <_free_r+0x46>
 8006654:	6825      	ldr	r5, [r4, #0]
 8006656:	1961      	adds	r1, r4, r5
 8006658:	428b      	cmp	r3, r1
 800665a:	bf01      	itttt	eq
 800665c:	6819      	ldreq	r1, [r3, #0]
 800665e:	685b      	ldreq	r3, [r3, #4]
 8006660:	1949      	addeq	r1, r1, r5
 8006662:	6021      	streq	r1, [r4, #0]
 8006664:	e7ed      	b.n	8006642 <_free_r+0x22>
 8006666:	461a      	mov	r2, r3
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	b10b      	cbz	r3, 8006670 <_free_r+0x50>
 800666c:	42a3      	cmp	r3, r4
 800666e:	d9fa      	bls.n	8006666 <_free_r+0x46>
 8006670:	6811      	ldr	r1, [r2, #0]
 8006672:	1855      	adds	r5, r2, r1
 8006674:	42a5      	cmp	r5, r4
 8006676:	d10b      	bne.n	8006690 <_free_r+0x70>
 8006678:	6824      	ldr	r4, [r4, #0]
 800667a:	4421      	add	r1, r4
 800667c:	1854      	adds	r4, r2, r1
 800667e:	42a3      	cmp	r3, r4
 8006680:	6011      	str	r1, [r2, #0]
 8006682:	d1e0      	bne.n	8006646 <_free_r+0x26>
 8006684:	681c      	ldr	r4, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	6053      	str	r3, [r2, #4]
 800668a:	4421      	add	r1, r4
 800668c:	6011      	str	r1, [r2, #0]
 800668e:	e7da      	b.n	8006646 <_free_r+0x26>
 8006690:	d902      	bls.n	8006698 <_free_r+0x78>
 8006692:	230c      	movs	r3, #12
 8006694:	6003      	str	r3, [r0, #0]
 8006696:	e7d6      	b.n	8006646 <_free_r+0x26>
 8006698:	6825      	ldr	r5, [r4, #0]
 800669a:	1961      	adds	r1, r4, r5
 800669c:	428b      	cmp	r3, r1
 800669e:	bf04      	itt	eq
 80066a0:	6819      	ldreq	r1, [r3, #0]
 80066a2:	685b      	ldreq	r3, [r3, #4]
 80066a4:	6063      	str	r3, [r4, #4]
 80066a6:	bf04      	itt	eq
 80066a8:	1949      	addeq	r1, r1, r5
 80066aa:	6021      	streq	r1, [r4, #0]
 80066ac:	6054      	str	r4, [r2, #4]
 80066ae:	e7ca      	b.n	8006646 <_free_r+0x26>
 80066b0:	b003      	add	sp, #12
 80066b2:	bd30      	pop	{r4, r5, pc}
 80066b4:	24000680 	.word	0x24000680

080066b8 <sbrk_aligned>:
 80066b8:	b570      	push	{r4, r5, r6, lr}
 80066ba:	4e0e      	ldr	r6, [pc, #56]	; (80066f4 <sbrk_aligned+0x3c>)
 80066bc:	460c      	mov	r4, r1
 80066be:	6831      	ldr	r1, [r6, #0]
 80066c0:	4605      	mov	r5, r0
 80066c2:	b911      	cbnz	r1, 80066ca <sbrk_aligned+0x12>
 80066c4:	f000 f8bc 	bl	8006840 <_sbrk_r>
 80066c8:	6030      	str	r0, [r6, #0]
 80066ca:	4621      	mov	r1, r4
 80066cc:	4628      	mov	r0, r5
 80066ce:	f000 f8b7 	bl	8006840 <_sbrk_r>
 80066d2:	1c43      	adds	r3, r0, #1
 80066d4:	d00a      	beq.n	80066ec <sbrk_aligned+0x34>
 80066d6:	1cc4      	adds	r4, r0, #3
 80066d8:	f024 0403 	bic.w	r4, r4, #3
 80066dc:	42a0      	cmp	r0, r4
 80066de:	d007      	beq.n	80066f0 <sbrk_aligned+0x38>
 80066e0:	1a21      	subs	r1, r4, r0
 80066e2:	4628      	mov	r0, r5
 80066e4:	f000 f8ac 	bl	8006840 <_sbrk_r>
 80066e8:	3001      	adds	r0, #1
 80066ea:	d101      	bne.n	80066f0 <sbrk_aligned+0x38>
 80066ec:	f04f 34ff 	mov.w	r4, #4294967295
 80066f0:	4620      	mov	r0, r4
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	24000684 	.word	0x24000684

080066f8 <_malloc_r>:
 80066f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066fc:	1ccd      	adds	r5, r1, #3
 80066fe:	f025 0503 	bic.w	r5, r5, #3
 8006702:	3508      	adds	r5, #8
 8006704:	2d0c      	cmp	r5, #12
 8006706:	bf38      	it	cc
 8006708:	250c      	movcc	r5, #12
 800670a:	2d00      	cmp	r5, #0
 800670c:	4607      	mov	r7, r0
 800670e:	db01      	blt.n	8006714 <_malloc_r+0x1c>
 8006710:	42a9      	cmp	r1, r5
 8006712:	d905      	bls.n	8006720 <_malloc_r+0x28>
 8006714:	230c      	movs	r3, #12
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	2600      	movs	r6, #0
 800671a:	4630      	mov	r0, r6
 800671c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006720:	4e2e      	ldr	r6, [pc, #184]	; (80067dc <_malloc_r+0xe4>)
 8006722:	f000 f89d 	bl	8006860 <__malloc_lock>
 8006726:	6833      	ldr	r3, [r6, #0]
 8006728:	461c      	mov	r4, r3
 800672a:	bb34      	cbnz	r4, 800677a <_malloc_r+0x82>
 800672c:	4629      	mov	r1, r5
 800672e:	4638      	mov	r0, r7
 8006730:	f7ff ffc2 	bl	80066b8 <sbrk_aligned>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	4604      	mov	r4, r0
 8006738:	d14d      	bne.n	80067d6 <_malloc_r+0xde>
 800673a:	6834      	ldr	r4, [r6, #0]
 800673c:	4626      	mov	r6, r4
 800673e:	2e00      	cmp	r6, #0
 8006740:	d140      	bne.n	80067c4 <_malloc_r+0xcc>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	4631      	mov	r1, r6
 8006746:	4638      	mov	r0, r7
 8006748:	eb04 0803 	add.w	r8, r4, r3
 800674c:	f000 f878 	bl	8006840 <_sbrk_r>
 8006750:	4580      	cmp	r8, r0
 8006752:	d13a      	bne.n	80067ca <_malloc_r+0xd2>
 8006754:	6821      	ldr	r1, [r4, #0]
 8006756:	3503      	adds	r5, #3
 8006758:	1a6d      	subs	r5, r5, r1
 800675a:	f025 0503 	bic.w	r5, r5, #3
 800675e:	3508      	adds	r5, #8
 8006760:	2d0c      	cmp	r5, #12
 8006762:	bf38      	it	cc
 8006764:	250c      	movcc	r5, #12
 8006766:	4629      	mov	r1, r5
 8006768:	4638      	mov	r0, r7
 800676a:	f7ff ffa5 	bl	80066b8 <sbrk_aligned>
 800676e:	3001      	adds	r0, #1
 8006770:	d02b      	beq.n	80067ca <_malloc_r+0xd2>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	442b      	add	r3, r5
 8006776:	6023      	str	r3, [r4, #0]
 8006778:	e00e      	b.n	8006798 <_malloc_r+0xa0>
 800677a:	6822      	ldr	r2, [r4, #0]
 800677c:	1b52      	subs	r2, r2, r5
 800677e:	d41e      	bmi.n	80067be <_malloc_r+0xc6>
 8006780:	2a0b      	cmp	r2, #11
 8006782:	d916      	bls.n	80067b2 <_malloc_r+0xba>
 8006784:	1961      	adds	r1, r4, r5
 8006786:	42a3      	cmp	r3, r4
 8006788:	6025      	str	r5, [r4, #0]
 800678a:	bf18      	it	ne
 800678c:	6059      	strne	r1, [r3, #4]
 800678e:	6863      	ldr	r3, [r4, #4]
 8006790:	bf08      	it	eq
 8006792:	6031      	streq	r1, [r6, #0]
 8006794:	5162      	str	r2, [r4, r5]
 8006796:	604b      	str	r3, [r1, #4]
 8006798:	4638      	mov	r0, r7
 800679a:	f104 060b 	add.w	r6, r4, #11
 800679e:	f000 f865 	bl	800686c <__malloc_unlock>
 80067a2:	f026 0607 	bic.w	r6, r6, #7
 80067a6:	1d23      	adds	r3, r4, #4
 80067a8:	1af2      	subs	r2, r6, r3
 80067aa:	d0b6      	beq.n	800671a <_malloc_r+0x22>
 80067ac:	1b9b      	subs	r3, r3, r6
 80067ae:	50a3      	str	r3, [r4, r2]
 80067b0:	e7b3      	b.n	800671a <_malloc_r+0x22>
 80067b2:	6862      	ldr	r2, [r4, #4]
 80067b4:	42a3      	cmp	r3, r4
 80067b6:	bf0c      	ite	eq
 80067b8:	6032      	streq	r2, [r6, #0]
 80067ba:	605a      	strne	r2, [r3, #4]
 80067bc:	e7ec      	b.n	8006798 <_malloc_r+0xa0>
 80067be:	4623      	mov	r3, r4
 80067c0:	6864      	ldr	r4, [r4, #4]
 80067c2:	e7b2      	b.n	800672a <_malloc_r+0x32>
 80067c4:	4634      	mov	r4, r6
 80067c6:	6876      	ldr	r6, [r6, #4]
 80067c8:	e7b9      	b.n	800673e <_malloc_r+0x46>
 80067ca:	230c      	movs	r3, #12
 80067cc:	603b      	str	r3, [r7, #0]
 80067ce:	4638      	mov	r0, r7
 80067d0:	f000 f84c 	bl	800686c <__malloc_unlock>
 80067d4:	e7a1      	b.n	800671a <_malloc_r+0x22>
 80067d6:	6025      	str	r5, [r4, #0]
 80067d8:	e7de      	b.n	8006798 <_malloc_r+0xa0>
 80067da:	bf00      	nop
 80067dc:	24000680 	.word	0x24000680

080067e0 <_realloc_r>:
 80067e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e4:	4680      	mov	r8, r0
 80067e6:	4614      	mov	r4, r2
 80067e8:	460e      	mov	r6, r1
 80067ea:	b921      	cbnz	r1, 80067f6 <_realloc_r+0x16>
 80067ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067f0:	4611      	mov	r1, r2
 80067f2:	f7ff bf81 	b.w	80066f8 <_malloc_r>
 80067f6:	b92a      	cbnz	r2, 8006804 <_realloc_r+0x24>
 80067f8:	f7ff ff12 	bl	8006620 <_free_r>
 80067fc:	4625      	mov	r5, r4
 80067fe:	4628      	mov	r0, r5
 8006800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006804:	f000 f838 	bl	8006878 <_malloc_usable_size_r>
 8006808:	4284      	cmp	r4, r0
 800680a:	4607      	mov	r7, r0
 800680c:	d802      	bhi.n	8006814 <_realloc_r+0x34>
 800680e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006812:	d812      	bhi.n	800683a <_realloc_r+0x5a>
 8006814:	4621      	mov	r1, r4
 8006816:	4640      	mov	r0, r8
 8006818:	f7ff ff6e 	bl	80066f8 <_malloc_r>
 800681c:	4605      	mov	r5, r0
 800681e:	2800      	cmp	r0, #0
 8006820:	d0ed      	beq.n	80067fe <_realloc_r+0x1e>
 8006822:	42bc      	cmp	r4, r7
 8006824:	4622      	mov	r2, r4
 8006826:	4631      	mov	r1, r6
 8006828:	bf28      	it	cs
 800682a:	463a      	movcs	r2, r7
 800682c:	f7ff fed0 	bl	80065d0 <memcpy>
 8006830:	4631      	mov	r1, r6
 8006832:	4640      	mov	r0, r8
 8006834:	f7ff fef4 	bl	8006620 <_free_r>
 8006838:	e7e1      	b.n	80067fe <_realloc_r+0x1e>
 800683a:	4635      	mov	r5, r6
 800683c:	e7df      	b.n	80067fe <_realloc_r+0x1e>
	...

08006840 <_sbrk_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4d06      	ldr	r5, [pc, #24]	; (800685c <_sbrk_r+0x1c>)
 8006844:	2300      	movs	r3, #0
 8006846:	4604      	mov	r4, r0
 8006848:	4608      	mov	r0, r1
 800684a:	602b      	str	r3, [r5, #0]
 800684c:	f7fa fb30 	bl	8000eb0 <_sbrk>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d102      	bne.n	800685a <_sbrk_r+0x1a>
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	b103      	cbz	r3, 800685a <_sbrk_r+0x1a>
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	bd38      	pop	{r3, r4, r5, pc}
 800685c:	24000688 	.word	0x24000688

08006860 <__malloc_lock>:
 8006860:	4801      	ldr	r0, [pc, #4]	; (8006868 <__malloc_lock+0x8>)
 8006862:	f000 b811 	b.w	8006888 <__retarget_lock_acquire_recursive>
 8006866:	bf00      	nop
 8006868:	2400068c 	.word	0x2400068c

0800686c <__malloc_unlock>:
 800686c:	4801      	ldr	r0, [pc, #4]	; (8006874 <__malloc_unlock+0x8>)
 800686e:	f000 b80c 	b.w	800688a <__retarget_lock_release_recursive>
 8006872:	bf00      	nop
 8006874:	2400068c 	.word	0x2400068c

08006878 <_malloc_usable_size_r>:
 8006878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800687c:	1f18      	subs	r0, r3, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	bfbc      	itt	lt
 8006882:	580b      	ldrlt	r3, [r1, r0]
 8006884:	18c0      	addlt	r0, r0, r3
 8006886:	4770      	bx	lr

08006888 <__retarget_lock_acquire_recursive>:
 8006888:	4770      	bx	lr

0800688a <__retarget_lock_release_recursive>:
 800688a:	4770      	bx	lr

0800688c <_init>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	bf00      	nop
 8006890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006892:	bc08      	pop	{r3}
 8006894:	469e      	mov	lr, r3
 8006896:	4770      	bx	lr

08006898 <_fini>:
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	bf00      	nop
 800689c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689e:	bc08      	pop	{r3}
 80068a0:	469e      	mov	lr, r3
 80068a2:	4770      	bx	lr
