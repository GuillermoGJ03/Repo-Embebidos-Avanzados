
Ejercicio_extra_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bff0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800c290  0800c290  0001c290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c764  0800c764  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c764  0800c764  0001c764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c76c  0800c76c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c76c  0800c76c  0001c76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c770  0800c770  0001c770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800c774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  240001e0  0800c954  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240008b0  0800c954  000208b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f36f  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f0  00000000  00000000  0003f57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  00042a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  000442b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c294  00000000  00000000  000459b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002067b  00000000  00000000  00081c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001897d5  00000000  00000000  000a22c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022ba9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007884  00000000  00000000  0022baec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c278 	.word	0x0800c278

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800c278 	.word	0x0800c278

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007cc:	bf00      	nop
 80007ce:	4b3f      	ldr	r3, [pc, #252]	; (80008cc <main+0x10c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x24>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dcf4      	bgt.n	80007ce <main+0xe>
  if ( timeout < 0 )
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da01      	bge.n	80007ee <main+0x2e>
  {
  Error_Handler();
 80007ea:	f000 fd6d 	bl	80012c8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f001 f82b 	bl	8001848 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_I2C_Init(&hi2c4);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f87d 	bl	80008f0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b35      	ldr	r3, [pc, #212]	; (80008cc <main+0x10c>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a33      	ldr	r2, [pc, #204]	; (80008cc <main+0x10c>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <main+0x10c>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f002 f931 	bl	8002a7c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f002 f947 	bl	8002ab0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000828:	bf00      	nop
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <main+0x10c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x80>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6a>
if ( timeout < 0 )
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8a>
{
Error_Handler();
 8000846:	f000 fd3f 	bl	80012c8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 f9e1 	bl	8000c10 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084e:	f000 f961 	bl	8000b14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000852:	f000 f9ab 	bl	8000bac <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 8000856:	f000 f8cf 	bl	80009f8 <MX_I2C4_Init>
  MX_TIM2_Init();
 800085a:	f000 f90d 	bl	8000a78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, Rx_data, 4);
 800085e:	2204      	movs	r2, #4
 8000860:	491b      	ldr	r1, [pc, #108]	; (80008d0 <main+0x110>)
 8000862:	481c      	ldr	r0, [pc, #112]	; (80008d4 <main+0x114>)
 8000864:	f006 f90c 	bl	8006a80 <HAL_UART_Receive_IT>

  // Revisión de conexión del dispositivo
  status = HAL_I2C_IsDeviceReady(&hi2c4, MPU6050_ADDR, 1, 3000);
 8000868:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800086c:	2201      	movs	r2, #1
 800086e:	21d0      	movs	r1, #208	; 0xd0
 8000870:	4819      	ldr	r0, [pc, #100]	; (80008d8 <main+0x118>)
 8000872:	f002 fbef 	bl	8003054 <HAL_I2C_IsDeviceReady>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <main+0x11c>)
 800087c:	701a      	strb	r2, [r3, #0]
  if (status == HAL_OK) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <main+0x11c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d105      	bne.n	8000892 <main+0xd2>
 8000886:	2201      	movs	r2, #1
 8000888:	2101      	movs	r1, #1
 800088a:	4815      	ldr	r0, [pc, #84]	; (80008e0 <main+0x120>)
 800088c:	f002 f8c2 	bl	8002a14 <HAL_GPIO_WritePin>
 8000890:	e005      	b.n	800089e <main+0xde>
  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000898:	4811      	ldr	r0, [pc, #68]	; (80008e0 <main+0x120>)
 800089a:	f002 f8bb 	bl	8002a14 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800089e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a2:	f001 f863 	bl	800196c <HAL_Delay>

  // Inicialización del MPU6050
  MPU6050_init();
 80008a6:	f000 fa35 	bl	8000d14 <MPU6050_init>

  // Prueba de comunicación UART
  uart_buf_len = sprintf(uart_buf, "MPU6050 test\r\n");
 80008aa:	490e      	ldr	r1, [pc, #56]	; (80008e4 <main+0x124>)
 80008ac:	480e      	ldr	r0, [pc, #56]	; (80008e8 <main+0x128>)
 80008ae:	f009 fae9 	bl	8009e84 <siprintf>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <main+0x12c>)
 80008b8:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <main+0x12c>)
 80008bc:	881a      	ldrh	r2, [r3, #0]
 80008be:	2364      	movs	r3, #100	; 0x64
 80008c0:	4909      	ldr	r1, [pc, #36]	; (80008e8 <main+0x128>)
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <main+0x114>)
 80008c4:	f006 f846 	bl	8006954 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <main+0x108>
 80008ca:	bf00      	nop
 80008cc:	58024400 	.word	0x58024400
 80008d0:	24000894 	.word	0x24000894
 80008d4:	24000294 	.word	0x24000294
 80008d8:	240001fc 	.word	0x240001fc
 80008dc:	2400085c 	.word	0x2400085c
 80008e0:	58020400 	.word	0x58020400
 80008e4:	0800c290 	.word	0x0800c290
 80008e8:	24000860 	.word	0x24000860
 80008ec:	24000892 	.word	0x24000892

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	; 0x70
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	224c      	movs	r2, #76	; 0x4c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f008 fe74 	bl	80095ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f008 fe6e 	bl	80095ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000910:	2004      	movs	r0, #4
 8000912:	f003 f92d 	bl	8003b70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b34      	ldr	r3, [pc, #208]	; (80009ec <SystemClock_Config+0xfc>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a33      	ldr	r2, [pc, #204]	; (80009ec <SystemClock_Config+0xfc>)
 8000920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b31      	ldr	r3, [pc, #196]	; (80009ec <SystemClock_Config+0xfc>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <SystemClock_Config+0x100>)
 8000932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000934:	4a2e      	ldr	r2, [pc, #184]	; (80009f0 <SystemClock_Config+0x100>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800093c:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <SystemClock_Config+0x100>)
 800093e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000948:	bf00      	nop
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <SystemClock_Config+0xfc>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000956:	d1f8      	bne.n	800094a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <SystemClock_Config+0x104>)
 800095a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095c:	f023 0303 	bic.w	r3, r3, #3
 8000960:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <SystemClock_Config+0x104>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000968:	2301      	movs	r3, #1
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800096c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000972:	2302      	movs	r3, #2
 8000974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000976:	2302      	movs	r3, #2
 8000978:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800097a:	2301      	movs	r3, #1
 800097c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800097e:	2378      	movs	r3, #120	; 0x78
 8000980:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800098e:	230c      	movs	r3, #12
 8000990:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000992:	2300      	movs	r3, #0
 8000994:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 f950 	bl	8003c44 <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009aa:	f000 fc8d 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	233f      	movs	r3, #63	; 0x3f
 80009b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2303      	movs	r3, #3
 80009b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009ba:	2308      	movs	r3, #8
 80009bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009be:	2340      	movs	r3, #64	; 0x40
 80009c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c2:	2340      	movs	r3, #64	; 0x40
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009cc:	2340      	movs	r3, #64	; 0x40
 80009ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2104      	movs	r1, #4
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 fd63 	bl	80044a0 <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80009e0:	f000 fc72 	bl	80012c8 <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3770      	adds	r7, #112	; 0x70
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	58024800 	.word	0x58024800
 80009f0:	58000400 	.word	0x58000400
 80009f4:	58024400 	.word	0x58024400

080009f8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_I2C4_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <MX_I2C4_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_I2C4_Init+0x74>)
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <MX_I2C4_Init+0x7c>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_I2C4_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_I2C4_Init+0x74>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_I2C4_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_I2C4_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_I2C4_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_I2C4_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_I2C4_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a32:	480e      	ldr	r0, [pc, #56]	; (8000a6c <MX_I2C4_Init+0x74>)
 8000a34:	f002 f850 	bl	8002ad8 <HAL_I2C_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a3e:	f000 fc43 	bl	80012c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <MX_I2C4_Init+0x74>)
 8000a46:	f002 feb3 	bl	80037b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a50:	f000 fc3a 	bl	80012c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_I2C4_Init+0x74>)
 8000a58:	f002 fef5 	bl	8003846 <HAL_I2CEx_ConfigDigitalFilter>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 fc31 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	240001fc 	.word	0x240001fc
 8000a70:	58001c00 	.word	0x58001c00
 8000a74:	307075b1 	.word	0x307075b1

08000a78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <MX_TIM2_Init+0x98>)
 8000a98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_TIM2_Init+0x98>)
 8000aa0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000aa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_TIM2_Init+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_TIM2_Init+0x98>)
 8000aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_TIM2_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_TIM2_Init+0x98>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ac0:	4813      	ldr	r0, [pc, #76]	; (8000b10 <MX_TIM2_Init+0x98>)
 8000ac2:	f005 fbe1 	bl	8006288 <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000acc:	f000 fbfc 	bl	80012c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	4619      	mov	r1, r3
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <MX_TIM2_Init+0x98>)
 8000ade:	f005 fc2b 	bl	8006338 <HAL_TIM_ConfigClockSource>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ae8:	f000 fbee 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_TIM2_Init+0x98>)
 8000afa:	f005 fe4d 	bl	8006798 <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b04:	f000 fbe0 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	24000248 	.word	0x24000248

08000b14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <MX_USART3_UART_Init+0x94>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5c:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b5e:	f005 fea9 	bl	80068b4 <HAL_UART_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b68:	f000 fbae 	bl	80012c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b70:	f008 f93d 	bl	8008dee <HAL_UARTEx_SetTxFifoThreshold>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7a:	f000 fba5 	bl	80012c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b82:	f008 f972 	bl	8008e6a <HAL_UARTEx_SetRxFifoThreshold>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b8c:	f000 fb9c 	bl	80012c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b92:	f008 f8f3 	bl	8008d7c <HAL_UARTEx_DisableFifoMode>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 fb94 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	24000294 	.word	0x24000294
 8000ba8:	40004800 	.word	0x40004800

08000bac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb2:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb8:	2209      	movs	r2, #9
 8000bba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bca:	2202      	movs	r2, #2
 8000bcc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf4:	f002 fe73 	bl	80038de <HAL_PCD_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bfe:	f000 fb63 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	24000324 	.word	0x24000324
 8000c0c:	40080000 	.word	0x40080000

08000c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	; 0x30
 8000c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4b39      	ldr	r3, [pc, #228]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a37      	ldr	r2, [pc, #220]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c44:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	4a30      	ldr	r2, [pc, #192]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c54:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000c88:	f043 0320 	orr.w	r3, r3, #32
 8000c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000ca6:	f043 0308 	orr.w	r3, r3, #8
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_GPIO_Init+0xfc>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <MX_GPIO_Init+0x100>)
 8000ce2:	f001 fe97 	bl	8002a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ce6:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_GPIO_Init+0x100>)
 8000d00:	f001 fcd8 	bl	80026b4 <HAL_GPIO_Init>

}
 8000d04:	bf00      	nop
 8000d06:	3730      	adds	r7, #48	; 0x30
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	58020400 	.word	0x58020400

08000d14 <MPU6050_init>:

/* USER CODE BEGIN 4 */
void MPU6050_init(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 3000);
 8000d1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d1e:	9302      	str	r3, [sp, #8]
 8000d20:	2301      	movs	r3, #1
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <MPU6050_init+0xd4>)
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2301      	movs	r3, #1
 8000d2a:	2275      	movs	r2, #117	; 0x75
 8000d2c:	21d0      	movs	r1, #208	; 0xd0
 8000d2e:	482f      	ldr	r0, [pc, #188]	; (8000dec <MPU6050_init+0xd8>)
 8000d30:	f002 f876 	bl	8002e20 <HAL_I2C_Mem_Read>
	uart_buf_len = sprintf(uart_buf, "Dirección: %u \r\n", check);
 8000d34:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <MPU6050_init+0xd4>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	492d      	ldr	r1, [pc, #180]	; (8000df0 <MPU6050_init+0xdc>)
 8000d3c:	482d      	ldr	r0, [pc, #180]	; (8000df4 <MPU6050_init+0xe0>)
 8000d3e:	f009 f8a1 	bl	8009e84 <siprintf>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <MPU6050_init+0xe4>)
 8000d48:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <MPU6050_init+0xe4>)
 8000d4c:	881a      	ldrh	r2, [r3, #0]
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	4928      	ldr	r1, [pc, #160]	; (8000df4 <MPU6050_init+0xe0>)
 8000d52:	482a      	ldr	r0, [pc, #168]	; (8000dfc <MPU6050_init+0xe8>)
 8000d54:	f005 fdfe 	bl	8006954 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5c:	f000 fe06 	bl	800196c <HAL_Delay>

	data = 0x00;
 8000d60:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <MPU6050_init+0xec>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 3000);
 8000d66:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <MPU6050_init+0xec>)
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2301      	movs	r3, #1
 8000d76:	226b      	movs	r2, #107	; 0x6b
 8000d78:	21d0      	movs	r1, #208	; 0xd0
 8000d7a:	481c      	ldr	r0, [pc, #112]	; (8000dec <MPU6050_init+0xd8>)
 8000d7c:	f001 ff3c 	bl	8002bf8 <HAL_I2C_Mem_Write>
	data = 0b10000111;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MPU6050_init+0xec>)
 8000d82:	2287      	movs	r2, #135	; 0x87
 8000d84:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, SMPLRT_DIV, 1, &data, 1, 3000);
 8000d86:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MPU6050_init+0xec>)
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2301      	movs	r3, #1
 8000d96:	2219      	movs	r2, #25
 8000d98:	21d0      	movs	r1, #208	; 0xd0
 8000d9a:	4814      	ldr	r0, [pc, #80]	; (8000dec <MPU6050_init+0xd8>)
 8000d9c:	f001 ff2c 	bl	8002bf8 <HAL_I2C_Mem_Write>
	data = 0x00;
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MPU6050_init+0xec>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, GYRO_CONFIG, 1, &data, 1, 3000);
 8000da6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000daa:	9302      	str	r3, [sp, #8]
 8000dac:	2301      	movs	r3, #1
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MPU6050_init+0xec>)
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2301      	movs	r3, #1
 8000db6:	221b      	movs	r2, #27
 8000db8:	21d0      	movs	r1, #208	; 0xd0
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <MPU6050_init+0xd8>)
 8000dbc:	f001 ff1c 	bl	8002bf8 <HAL_I2C_Mem_Write>
	data = 0x00;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MPU6050_init+0xec>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, ACCEL_CONFIG, 1, &data, 1, 3000);
 8000dc6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000dca:	9302      	str	r3, [sp, #8]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MPU6050_init+0xec>)
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	221c      	movs	r2, #28
 8000dd8:	21d0      	movs	r1, #208	; 0xd0
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <MPU6050_init+0xd8>)
 8000ddc:	f001 ff0c 	bl	8002bf8 <HAL_I2C_Mem_Write>

}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24000830 	.word	0x24000830
 8000dec:	240001fc 	.word	0x240001fc
 8000df0:	0800c2a0 	.word	0x0800c2a0
 8000df4:	24000860 	.word	0x24000860
 8000df8:	24000892 	.word	0x24000892
 8000dfc:	24000294 	.word	0x24000294
 8000e00:	24000831 	.word	0x24000831
 8000e04:	00000000 	.word	0x00000000

08000e08 <MPU6050_read_acc>:

void MPU6050_read_acc(void){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af04      	add	r7, sp, #16
	uint8_t read_acc[6];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, ACCEL_XOUT_H, 1, read_acc, 6, 3000);
 8000e0e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2306      	movs	r3, #6
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	463b      	mov	r3, r7
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	223b      	movs	r2, #59	; 0x3b
 8000e20:	21d0      	movs	r1, #208	; 0xd0
 8000e22:	4833      	ldr	r0, [pc, #204]	; (8000ef0 <MPU6050_read_acc+0xe8>)
 8000e24:	f001 fffc 	bl	8002e20 <HAL_I2C_Mem_Read>

	acc_X_read = (int16_t)(read_acc[0] << 8 | read_acc[1]);
 8000e28:	783b      	ldrb	r3, [r7, #0]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	787b      	ldrb	r3, [r7, #1]
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <MPU6050_read_acc+0xec>)
 8000e38:	801a      	strh	r2, [r3, #0]
	acc_Y_read = (int16_t)(read_acc[2] << 8 | read_acc[3]);
 8000e3a:	78bb      	ldrb	r3, [r7, #2]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <MPU6050_read_acc+0xf0>)
 8000e4a:	801a      	strh	r2, [r3, #0]
	acc_Z_read = (int16_t)(read_acc[4] << 8 | read_acc[5]);
 8000e4c:	793b      	ldrb	r3, [r7, #4]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	797b      	ldrb	r3, [r7, #5]
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <MPU6050_read_acc+0xf4>)
 8000e5c:	801a      	strh	r2, [r3, #0]

	acc_X = (acc_X_read/16384.0) * 9.81;
 8000e5e:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <MPU6050_read_acc+0xec>)
 8000e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e64:	ee07 3a90 	vmov	s15, r3
 8000e68:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e6c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000ee0 <MPU6050_read_acc+0xd8>
 8000e70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e74:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000ee8 <MPU6050_read_acc+0xe0>
 8000e78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MPU6050_read_acc+0xf8>)
 8000e82:	edc3 7a00 	vstr	s15, [r3]
	acc_Y = (acc_Y_read/16384.0) * 9.81;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <MPU6050_read_acc+0xf0>)
 8000e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e94:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000ee0 <MPU6050_read_acc+0xd8>
 8000e98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e9c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000ee8 <MPU6050_read_acc+0xe0>
 8000ea0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ea4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MPU6050_read_acc+0xfc>)
 8000eaa:	edc3 7a00 	vstr	s15, [r3]
	acc_Z = (acc_Z_read/16384.0) * 9.81;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MPU6050_read_acc+0xf4>)
 8000eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ebc:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000ee0 <MPU6050_read_acc+0xd8>
 8000ec0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ec4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000ee8 <MPU6050_read_acc+0xe0>
 8000ec8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ecc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <MPU6050_read_acc+0x100>)
 8000ed2:	edc3 7a00 	vstr	s15, [r3]

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	00000000 	.word	0x00000000
 8000ee4:	40d00000 	.word	0x40d00000
 8000ee8:	51eb851f 	.word	0x51eb851f
 8000eec:	40239eb8 	.word	0x40239eb8
 8000ef0:	240001fc 	.word	0x240001fc
 8000ef4:	24000832 	.word	0x24000832
 8000ef8:	24000834 	.word	0x24000834
 8000efc:	24000836 	.word	0x24000836
 8000f00:	24000844 	.word	0x24000844
 8000f04:	24000848 	.word	0x24000848
 8000f08:	2400084c 	.word	0x2400084c
 8000f0c:	00000000 	.word	0x00000000

08000f10 <MPU6050_read_gyro>:

void MPU6050_read_gyro(void){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af04      	add	r7, sp, #16
	uint8_t read_gyro[6];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, GYRO_XOUT_H, 1, read_gyro, 6, 3000);
 8000f16:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	2306      	movs	r3, #6
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	463b      	mov	r3, r7
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	2243      	movs	r2, #67	; 0x43
 8000f28:	21d0      	movs	r1, #208	; 0xd0
 8000f2a:	482b      	ldr	r0, [pc, #172]	; (8000fd8 <MPU6050_read_gyro+0xc8>)
 8000f2c:	f001 ff78 	bl	8002e20 <HAL_I2C_Mem_Read>

	gyr_X_read = (int16_t)(read_gyro[0] << 8 | read_gyro[1]);
 8000f30:	783b      	ldrb	r3, [r7, #0]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	787b      	ldrb	r3, [r7, #1]
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <MPU6050_read_gyro+0xcc>)
 8000f40:	801a      	strh	r2, [r3, #0]
	gyr_Y_read = (int16_t)(read_gyro[2] << 8 | read_gyro[3]);
 8000f42:	78bb      	ldrb	r3, [r7, #2]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <MPU6050_read_gyro+0xd0>)
 8000f52:	801a      	strh	r2, [r3, #0]
	gyr_Z_read = (int16_t)(read_gyro[4] << 8 | read_gyro[5]);
 8000f54:	793b      	ldrb	r3, [r7, #4]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	797b      	ldrb	r3, [r7, #5]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <MPU6050_read_gyro+0xd4>)
 8000f64:	801a      	strh	r2, [r3, #0]

	gyr_X = gyr_X_read/131.0;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MPU6050_read_gyro+0xcc>)
 8000f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f74:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8000fd0 <MPU6050_read_gyro+0xc0>
 8000f78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MPU6050_read_gyro+0xd8>)
 8000f82:	edc3 7a00 	vstr	s15, [r3]
	gyr_Y = gyr_Y_read/131.0;
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MPU6050_read_gyro+0xd0>)
 8000f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f94:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8000fd0 <MPU6050_read_gyro+0xc0>
 8000f98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MPU6050_read_gyro+0xdc>)
 8000fa2:	edc3 7a00 	vstr	s15, [r3]
	gyr_Z = gyr_Z_read/131.0;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MPU6050_read_gyro+0xd4>)
 8000fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fb4:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8000fd0 <MPU6050_read_gyro+0xc0>
 8000fb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MPU6050_read_gyro+0xe0>)
 8000fc2:	edc3 7a00 	vstr	s15, [r3]
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	40606000 	.word	0x40606000
 8000fd8:	240001fc 	.word	0x240001fc
 8000fdc:	24000838 	.word	0x24000838
 8000fe0:	2400083a 	.word	0x2400083a
 8000fe4:	2400083c 	.word	0x2400083c
 8000fe8:	24000850 	.word	0x24000850
 8000fec:	24000854 	.word	0x24000854
 8000ff0:	24000858 	.word	0x24000858
 8000ff4:	00000000 	.word	0x00000000

08000ff8 <MPU6050_read_temp>:

void MPU6050_read_temp(void){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af04      	add	r7, sp, #16
	uint8_t read_temp[2];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, TEMP_OUT_H, 1, read_temp, 2, 3000);
 8000ffe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2302      	movs	r3, #2
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2241      	movs	r2, #65	; 0x41
 8001010:	21d0      	movs	r1, #208	; 0xd0
 8001012:	4817      	ldr	r0, [pc, #92]	; (8001070 <MPU6050_read_temp+0x78>)
 8001014:	f001 ff04 	bl	8002e20 <HAL_I2C_Mem_Read>

	temp_read = (int16_t)(read_temp[0] << 8 | read_temp[1]);
 8001018:	793b      	ldrb	r3, [r7, #4]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	797b      	ldrb	r3, [r7, #5]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21a      	sxth	r2, r3
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <MPU6050_read_temp+0x7c>)
 8001028:	801a      	strh	r2, [r3, #0]

	temp = (temp_read/340.0) + 36.53;
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MPU6050_read_temp+0x7c>)
 800102c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001038:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001060 <MPU6050_read_temp+0x68>
 800103c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001040:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001068 <MPU6050_read_temp+0x70>
 8001044:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001048:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <MPU6050_read_temp+0x80>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	f3af 8000 	nop.w
 8001060:	00000000 	.word	0x00000000
 8001064:	40754000 	.word	0x40754000
 8001068:	0a3d70a4 	.word	0x0a3d70a4
 800106c:	404243d7 	.word	0x404243d7
 8001070:	240001fc 	.word	0x240001fc
 8001074:	2400083e 	.word	0x2400083e
 8001078:	24000840 	.word	0x24000840

0800107c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001084:	2101      	movs	r1, #1
 8001086:	487c      	ldr	r0, [pc, #496]	; (8001278 <HAL_UART_RxCpltCallback+0x1fc>)
 8001088:	f001 fcdd 	bl	8002a46 <HAL_GPIO_TogglePin>
	if(huart == &huart3){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a7b      	ldr	r2, [pc, #492]	; (800127c <HAL_UART_RxCpltCallback+0x200>)
 8001090:	4293      	cmp	r3, r2
 8001092:	f040 80e8 	bne.w	8001266 <HAL_UART_RxCpltCallback+0x1ea>
		if(Rx_data[0] == 'a' | Rx_data[0] == 'A'){
 8001096:	4b7a      	ldr	r3, [pc, #488]	; (8001280 <HAL_UART_RxCpltCallback+0x204>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b61      	cmp	r3, #97	; 0x61
 800109c:	bf0c      	ite	eq
 800109e:	2301      	moveq	r3, #1
 80010a0:	2300      	movne	r3, #0
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b76      	ldr	r3, [pc, #472]	; (8001280 <HAL_UART_RxCpltCallback+0x204>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b41      	cmp	r3, #65	; 0x41
 80010aa:	bf0c      	ite	eq
 80010ac:	2301      	moveq	r3, #1
 80010ae:	2300      	movne	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d044      	beq.n	8001144 <HAL_UART_RxCpltCallback+0xc8>
			MPU6050_read_acc();
 80010ba:	f7ff fea5 	bl	8000e08 <MPU6050_read_acc>
			uart_buf_len = sprintf(uart_buf, "AccX = %.2f m/s^2 \r\n", acc_X);
 80010be:	4b71      	ldr	r3, [pc, #452]	; (8001284 <HAL_UART_RxCpltCallback+0x208>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c8:	ec53 2b17 	vmov	r2, r3, d7
 80010cc:	496e      	ldr	r1, [pc, #440]	; (8001288 <HAL_UART_RxCpltCallback+0x20c>)
 80010ce:	486f      	ldr	r0, [pc, #444]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 80010d0:	f008 fed8 	bl	8009e84 <siprintf>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b6d      	ldr	r3, [pc, #436]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 80010da:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80010dc:	4b6c      	ldr	r3, [pc, #432]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 80010de:	881a      	ldrh	r2, [r3, #0]
 80010e0:	2364      	movs	r3, #100	; 0x64
 80010e2:	496a      	ldr	r1, [pc, #424]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 80010e4:	4865      	ldr	r0, [pc, #404]	; (800127c <HAL_UART_RxCpltCallback+0x200>)
 80010e6:	f005 fc35 	bl	8006954 <HAL_UART_Transmit>
			uart_buf_len = sprintf(uart_buf, "AccY = %.2f m/s^2 \r\n", acc_Y);
 80010ea:	4b6a      	ldr	r3, [pc, #424]	; (8001294 <HAL_UART_RxCpltCallback+0x218>)
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f4:	ec53 2b17 	vmov	r2, r3, d7
 80010f8:	4967      	ldr	r1, [pc, #412]	; (8001298 <HAL_UART_RxCpltCallback+0x21c>)
 80010fa:	4864      	ldr	r0, [pc, #400]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 80010fc:	f008 fec2 	bl	8009e84 <siprintf>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b62      	ldr	r3, [pc, #392]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 8001106:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001108:	4b61      	ldr	r3, [pc, #388]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 800110a:	881a      	ldrh	r2, [r3, #0]
 800110c:	2364      	movs	r3, #100	; 0x64
 800110e:	495f      	ldr	r1, [pc, #380]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 8001110:	485a      	ldr	r0, [pc, #360]	; (800127c <HAL_UART_RxCpltCallback+0x200>)
 8001112:	f005 fc1f 	bl	8006954 <HAL_UART_Transmit>
			uart_buf_len = sprintf(uart_buf, "AccZ = %.2f m/s^2 \r\n", acc_Z);
 8001116:	4b61      	ldr	r3, [pc, #388]	; (800129c <HAL_UART_RxCpltCallback+0x220>)
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001120:	ec53 2b17 	vmov	r2, r3, d7
 8001124:	495e      	ldr	r1, [pc, #376]	; (80012a0 <HAL_UART_RxCpltCallback+0x224>)
 8001126:	4859      	ldr	r0, [pc, #356]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 8001128:	f008 feac 	bl	8009e84 <siprintf>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	4b57      	ldr	r3, [pc, #348]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 8001132:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001134:	4b56      	ldr	r3, [pc, #344]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 8001136:	881a      	ldrh	r2, [r3, #0]
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	4954      	ldr	r1, [pc, #336]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 800113c:	484f      	ldr	r0, [pc, #316]	; (800127c <HAL_UART_RxCpltCallback+0x200>)
 800113e:	f005 fc09 	bl	8006954 <HAL_UART_Transmit>
 8001142:	e090      	b.n	8001266 <HAL_UART_RxCpltCallback+0x1ea>
		} else if(Rx_data[0] == 'g' | Rx_data[0] == 'G'){
 8001144:	4b4e      	ldr	r3, [pc, #312]	; (8001280 <HAL_UART_RxCpltCallback+0x204>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b67      	cmp	r3, #103	; 0x67
 800114a:	bf0c      	ite	eq
 800114c:	2301      	moveq	r3, #1
 800114e:	2300      	movne	r3, #0
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b4b      	ldr	r3, [pc, #300]	; (8001280 <HAL_UART_RxCpltCallback+0x204>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b47      	cmp	r3, #71	; 0x47
 8001158:	bf0c      	ite	eq
 800115a:	2301      	moveq	r3, #1
 800115c:	2300      	movne	r3, #0
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d044      	beq.n	80011f2 <HAL_UART_RxCpltCallback+0x176>
			MPU6050_read_gyro();
 8001168:	f7ff fed2 	bl	8000f10 <MPU6050_read_gyro>
			uart_buf_len = sprintf(uart_buf, "GyrX = %.2f °/s \r\n", gyr_X);
 800116c:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <HAL_UART_RxCpltCallback+0x228>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001176:	ec53 2b17 	vmov	r2, r3, d7
 800117a:	494b      	ldr	r1, [pc, #300]	; (80012a8 <HAL_UART_RxCpltCallback+0x22c>)
 800117c:	4843      	ldr	r0, [pc, #268]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 800117e:	f008 fe81 	bl	8009e84 <siprintf>
 8001182:	4603      	mov	r3, r0
 8001184:	b29a      	uxth	r2, r3
 8001186:	4b42      	ldr	r3, [pc, #264]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 8001188:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 800118a:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 800118c:	881a      	ldrh	r2, [r3, #0]
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	493e      	ldr	r1, [pc, #248]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 8001192:	483a      	ldr	r0, [pc, #232]	; (800127c <HAL_UART_RxCpltCallback+0x200>)
 8001194:	f005 fbde 	bl	8006954 <HAL_UART_Transmit>
			uart_buf_len = sprintf(uart_buf, "GyrY = %.2f °/s \r\n", gyr_Y);
 8001198:	4b44      	ldr	r3, [pc, #272]	; (80012ac <HAL_UART_RxCpltCallback+0x230>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a2:	ec53 2b17 	vmov	r2, r3, d7
 80011a6:	4942      	ldr	r1, [pc, #264]	; (80012b0 <HAL_UART_RxCpltCallback+0x234>)
 80011a8:	4838      	ldr	r0, [pc, #224]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 80011aa:	f008 fe6b 	bl	8009e84 <siprintf>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 80011b4:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80011b6:	4b36      	ldr	r3, [pc, #216]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 80011b8:	881a      	ldrh	r2, [r3, #0]
 80011ba:	2364      	movs	r3, #100	; 0x64
 80011bc:	4933      	ldr	r1, [pc, #204]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 80011be:	482f      	ldr	r0, [pc, #188]	; (800127c <HAL_UART_RxCpltCallback+0x200>)
 80011c0:	f005 fbc8 	bl	8006954 <HAL_UART_Transmit>
			uart_buf_len = sprintf(uart_buf, "GyrZ = %.2f °/s \r\n\n", gyr_Z);
 80011c4:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <HAL_UART_RxCpltCallback+0x238>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ce:	ec53 2b17 	vmov	r2, r3, d7
 80011d2:	4939      	ldr	r1, [pc, #228]	; (80012b8 <HAL_UART_RxCpltCallback+0x23c>)
 80011d4:	482d      	ldr	r0, [pc, #180]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 80011d6:	f008 fe55 	bl	8009e84 <siprintf>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 80011e0:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80011e2:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 80011e4:	881a      	ldrh	r2, [r3, #0]
 80011e6:	2364      	movs	r3, #100	; 0x64
 80011e8:	4928      	ldr	r1, [pc, #160]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 80011ea:	4824      	ldr	r0, [pc, #144]	; (800127c <HAL_UART_RxCpltCallback+0x200>)
 80011ec:	f005 fbb2 	bl	8006954 <HAL_UART_Transmit>
 80011f0:	e039      	b.n	8001266 <HAL_UART_RxCpltCallback+0x1ea>
		} else if(Rx_data[0] == 't' | Rx_data[0] == 'T'){
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_UART_RxCpltCallback+0x204>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b74      	cmp	r3, #116	; 0x74
 80011f8:	bf0c      	ite	eq
 80011fa:	2301      	moveq	r3, #1
 80011fc:	2300      	movne	r3, #0
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <HAL_UART_RxCpltCallback+0x204>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b54      	cmp	r3, #84	; 0x54
 8001206:	bf0c      	ite	eq
 8001208:	2301      	moveq	r3, #1
 800120a:	2300      	movne	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d018      	beq.n	8001248 <HAL_UART_RxCpltCallback+0x1cc>
			MPU6050_read_temp();
 8001216:	f7ff feef 	bl	8000ff8 <MPU6050_read_temp>
			uart_buf_len = sprintf(uart_buf, "Temp: %.2f \r\n", temp);
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_UART_RxCpltCallback+0x240>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001224:	ec53 2b17 	vmov	r2, r3, d7
 8001228:	4925      	ldr	r1, [pc, #148]	; (80012c0 <HAL_UART_RxCpltCallback+0x244>)
 800122a:	4818      	ldr	r0, [pc, #96]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 800122c:	f008 fe2a 	bl	8009e84 <siprintf>
 8001230:	4603      	mov	r3, r0
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 8001236:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 800123a:	881a      	ldrh	r2, [r3, #0]
 800123c:	2364      	movs	r3, #100	; 0x64
 800123e:	4913      	ldr	r1, [pc, #76]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 8001240:	480e      	ldr	r0, [pc, #56]	; (800127c <HAL_UART_RxCpltCallback+0x200>)
 8001242:	f005 fb87 	bl	8006954 <HAL_UART_Transmit>
 8001246:	e00e      	b.n	8001266 <HAL_UART_RxCpltCallback+0x1ea>
		} else{
			uart_buf_len = sprintf(uart_buf, "NA\r\n");
 8001248:	491e      	ldr	r1, [pc, #120]	; (80012c4 <HAL_UART_RxCpltCallback+0x248>)
 800124a:	4810      	ldr	r0, [pc, #64]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 800124c:	f008 fe1a 	bl	8009e84 <siprintf>
 8001250:	4603      	mov	r3, r0
 8001252:	b29a      	uxth	r2, r3
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 8001256:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_UART_RxCpltCallback+0x214>)
 800125a:	881a      	ldrh	r2, [r3, #0]
 800125c:	2364      	movs	r3, #100	; 0x64
 800125e:	490b      	ldr	r1, [pc, #44]	; (800128c <HAL_UART_RxCpltCallback+0x210>)
 8001260:	4806      	ldr	r0, [pc, #24]	; (800127c <HAL_UART_RxCpltCallback+0x200>)
 8001262:	f005 fb77 	bl	8006954 <HAL_UART_Transmit>
		}
	}

	HAL_UART_Receive_IT(&huart3, Rx_data, 4); //Reinicia la interrupcion
 8001266:	2204      	movs	r2, #4
 8001268:	4905      	ldr	r1, [pc, #20]	; (8001280 <HAL_UART_RxCpltCallback+0x204>)
 800126a:	4804      	ldr	r0, [pc, #16]	; (800127c <HAL_UART_RxCpltCallback+0x200>)
 800126c:	f005 fc08 	bl	8006a80 <HAL_UART_Receive_IT>

}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	58020400 	.word	0x58020400
 800127c:	24000294 	.word	0x24000294
 8001280:	24000894 	.word	0x24000894
 8001284:	24000844 	.word	0x24000844
 8001288:	0800c2b4 	.word	0x0800c2b4
 800128c:	24000860 	.word	0x24000860
 8001290:	24000892 	.word	0x24000892
 8001294:	24000848 	.word	0x24000848
 8001298:	0800c2cc 	.word	0x0800c2cc
 800129c:	2400084c 	.word	0x2400084c
 80012a0:	0800c2e4 	.word	0x0800c2e4
 80012a4:	24000850 	.word	0x24000850
 80012a8:	0800c2fc 	.word	0x0800c2fc
 80012ac:	24000854 	.word	0x24000854
 80012b0:	0800c310 	.word	0x0800c310
 80012b4:	24000858 	.word	0x24000858
 80012b8:	0800c324 	.word	0x0800c324
 80012bc:	24000840 	.word	0x24000840
 80012c0:	0800c33c 	.word	0x0800c33c
 80012c4:	0800c34c 	.word	0x0800c34c

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <Error_Handler+0x8>
	...

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_MspInit+0x30>)
 80012dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x30>)
 80012e2:	f043 0302 	orr.w	r3, r3, #2
 80012e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x30>)
 80012ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	58024400 	.word	0x58024400

08001308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0b8      	sub	sp, #224	; 0xe0
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	22bc      	movs	r2, #188	; 0xbc
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f008 f95f 	bl	80095ec <memset>
  if(hi2c->Instance==I2C4)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <HAL_I2C_MspInit+0xc0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d142      	bne.n	80013be <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001338:	2310      	movs	r3, #16
 800133a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fc36 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001352:	f7ff ffb9 	bl	80012c8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_I2C_MspInit+0xc4>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <HAL_I2C_MspInit+0xc4>)
 800135e:	f043 0320 	orr.w	r3, r3, #32
 8001362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_I2C_MspInit+0xc4>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136c:	f003 0320 	and.w	r3, r3, #32
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001374:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001378:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137c:	2312      	movs	r3, #18
 800137e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800138e:	2304      	movs	r3, #4
 8001390:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001394:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001398:	4619      	mov	r1, r3
 800139a:	480d      	ldr	r0, [pc, #52]	; (80013d0 <HAL_I2C_MspInit+0xc8>)
 800139c:	f001 f98a 	bl	80026b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_I2C_MspInit+0xc4>)
 80013a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <HAL_I2C_MspInit+0xc4>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_I2C_MspInit+0xc4>)
 80013b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	37e0      	adds	r7, #224	; 0xe0
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	58001c00 	.word	0x58001c00
 80013cc:	58024400 	.word	0x58024400
 80013d0:	58021400 	.word	0x58021400

080013d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e4:	d10e      	bne.n	8001404 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_TIM_Base_MspInit+0x3c>)
 80013e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ec:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_TIM_Base_MspInit+0x3c>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_TIM_Base_MspInit+0x3c>)
 80013f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	58024400 	.word	0x58024400

08001414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0b8      	sub	sp, #224	; 0xe0
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	22bc      	movs	r2, #188	; 0xbc
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f008 f8d9 	bl	80095ec <memset>
  if(huart->Instance==USART3)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_UART_MspInit+0xd0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d14a      	bne.n	80014da <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001444:	2302      	movs	r3, #2
 8001446:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fbb0 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800145e:	f7ff ff33 	bl	80012c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <HAL_UART_MspInit+0xd4>)
 8001464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001468:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <HAL_UART_MspInit+0xd4>)
 800146a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_UART_MspInit+0xd4>)
 8001474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_UART_MspInit+0xd4>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <HAL_UART_MspInit+0xd4>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_UART_MspInit+0xd4>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800149e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b8:	2307      	movs	r3, #7
 80014ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014c2:	4619      	mov	r1, r3
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <HAL_UART_MspInit+0xd8>)
 80014c6:	f001 f8f5 	bl	80026b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2027      	movs	r0, #39	; 0x27
 80014d0:	f000 fb57 	bl	8001b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014d4:	2027      	movs	r0, #39	; 0x27
 80014d6:	f000 fb6e 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	37e0      	adds	r7, #224	; 0xe0
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40004800 	.word	0x40004800
 80014e8:	58024400 	.word	0x58024400
 80014ec:	58020c00 	.word	0x58020c00

080014f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0b8      	sub	sp, #224	; 0xe0
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	22bc      	movs	r2, #188	; 0xbc
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f008 f86b 	bl	80095ec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a36      	ldr	r2, [pc, #216]	; (80015f4 <HAL_PCD_MspInit+0x104>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d165      	bne.n	80015ec <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001520:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001524:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001526:	2301      	movs	r3, #1
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 800152a:	2318      	movs	r3, #24
 800152c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800152e:	2302      	movs	r3, #2
 8001530:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001532:	2304      	movs	r3, #4
 8001534:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001536:	2302      	movs	r3, #2
 8001538:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800153a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001544:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4618      	mov	r0, r3
 8001552:	f003 fb31 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800155c:	f7ff feb4 	bl	80012c8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001560:	f002 fb60 	bl	8003c24 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_PCD_MspInit+0x108>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <HAL_PCD_MspInit+0x108>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_PCD_MspInit+0x108>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001582:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001586:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800159c:	230a      	movs	r3, #10
 800159e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015a6:	4619      	mov	r1, r3
 80015a8:	4814      	ldr	r0, [pc, #80]	; (80015fc <HAL_PCD_MspInit+0x10c>)
 80015aa:	f001 f883 	bl	80026b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <HAL_PCD_MspInit+0x10c>)
 80015ca:	f001 f873 	bl	80026b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_PCD_MspInit+0x108>)
 80015d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015d4:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_PCD_MspInit+0x108>)
 80015d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_PCD_MspInit+0x108>)
 80015e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	37e0      	adds	r7, #224	; 0xe0
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40080000 	.word	0x40080000
 80015f8:	58024400 	.word	0x58024400
 80015fc:	58020000 	.word	0x58020000

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <NMI_Handler+0x4>

08001606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <MemManage_Handler+0x4>

08001612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <UsageFault_Handler+0x4>

0800161e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164c:	f000 f96e 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <USART3_IRQHandler+0x10>)
 800165a:	f005 fa67 	bl	8006b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	24000294 	.word	0x24000294

08001668 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
	return 1;
 800166c:	2301      	movs	r3, #1
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_kill>:

int _kill(int pid, int sig)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001682:	f007 ff89 	bl	8009598 <__errno>
 8001686:	4603      	mov	r3, r0
 8001688:	2216      	movs	r2, #22
 800168a:	601a      	str	r2, [r3, #0]
	return -1;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_exit>:

void _exit (int status)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ffe7 	bl	8001678 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016aa:	e7fe      	b.n	80016aa <_exit+0x12>

080016ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e00a      	b.n	80016d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016be:	f3af 8000 	nop.w
 80016c2:	4601      	mov	r1, r0
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	b2ca      	uxtb	r2, r1
 80016cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbf0      	blt.n	80016be <_read+0x12>
	}

return len;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e009      	b.n	800170c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60ba      	str	r2, [r7, #8]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf1      	blt.n	80016f8 <_write+0x12>
	}
	return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_close>:

int _close(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	605a      	str	r2, [r3, #4]
	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_isatty>:

int _isatty(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	return 1;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f007 feee 	bl	8009598 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	24080000 	.word	0x24080000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	24000898 	.word	0x24000898
 80017f0:	240008b0 	.word	0x240008b0

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017f8:	f7fe ff4c 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017fe:	490d      	ldr	r1, [pc, #52]	; (8001834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001814:	4c0a      	ldr	r4, [pc, #40]	; (8001840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001822:	f007 febf 	bl	80095a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7fe ffcb 	bl	80007c0 <main>
  bx  lr
 800182a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800182c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001830:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001834:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001838:	0800c774 	.word	0x0800c774
  ldr r2, =_sbss
 800183c:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001840:	240008b0 	.word	0x240008b0

08001844 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC3_IRQHandler>
	...

08001848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184e:	2003      	movs	r0, #3
 8001850:	f000 f98c 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001854:	f002 ffda 	bl	800480c <HAL_RCC_GetSysClockFreq>
 8001858:	4602      	mov	r2, r0
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_Init+0x68>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	f003 030f 	and.w	r3, r3, #15
 8001864:	4913      	ldr	r1, [pc, #76]	; (80018b4 <HAL_Init+0x6c>)
 8001866:	5ccb      	ldrb	r3, [r1, r3]
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	fa22 f303 	lsr.w	r3, r2, r3
 8001870:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_Init+0x68>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_Init+0x6c>)
 800187c:	5cd3      	ldrb	r3, [r2, r3]
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_Init+0x70>)
 800188a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800188c:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <HAL_Init+0x74>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001892:	2000      	movs	r0, #0
 8001894:	f000 f814 	bl	80018c0 <HAL_InitTick>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e002      	b.n	80018a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018a2:	f7ff fd17 	bl	80012d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	58024400 	.word	0x58024400
 80018b4:	0800c354 	.word	0x0800c354
 80018b8:	24000004 	.word	0x24000004
 80018bc:	24000000 	.word	0x24000000

080018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_InitTick+0x60>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e021      	b.n	8001918 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_InitTick+0x64>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_InitTick+0x60>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f971 	bl	8001bd2 <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00e      	b.n	8001918 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d80a      	bhi.n	8001916 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f000 f93b 	bl	8001b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HAL_InitTick+0x68>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	2400000c 	.word	0x2400000c
 8001924:	24000000 	.word	0x24000000
 8001928:	24000008 	.word	0x24000008

0800192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x20>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x24>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_IncTick+0x24>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	2400000c 	.word	0x2400000c
 8001950:	2400089c 	.word	0x2400089c

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2400089c 	.word	0x2400089c

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_Delay+0x44>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffde 	bl	8001954 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2400000c 	.word	0x2400000c

080019b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <HAL_GetREVID+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0c1b      	lsrs	r3, r3, #16
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	5c001000 	.word	0x5c001000

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <__NVIC_SetPriorityGrouping+0x40>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <__NVIC_SetPriorityGrouping+0x40>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	05fa0000 	.word	0x05fa0000

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4907      	ldr	r1, [pc, #28]	; (8001a68 <__NVIC_EnableIRQ+0x38>)
 8001a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b38:	d301      	bcc.n	8001b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00f      	b.n	8001b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <SysTick_Config+0x40>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b46:	210f      	movs	r1, #15
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f7ff ff8e 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <SysTick_Config+0x40>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <SysTick_Config+0x40>)
 8001b58:	2207      	movs	r2, #7
 8001b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	e000e010 	.word	0xe000e010

08001b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff29 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff40 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff90 	bl	8001ac0 <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5f 	bl	8001a6c <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff33 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa4 	bl	8001b28 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff feae 	bl	8001954 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e2dc      	b.n	80021be <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d008      	beq.n	8001c22 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e2cd      	b.n	80021be <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a76      	ldr	r2, [pc, #472]	; (8001e00 <HAL_DMA_Abort+0x214>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d04a      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a74      	ldr	r2, [pc, #464]	; (8001e04 <HAL_DMA_Abort+0x218>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d045      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a73      	ldr	r2, [pc, #460]	; (8001e08 <HAL_DMA_Abort+0x21c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d040      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a71      	ldr	r2, [pc, #452]	; (8001e0c <HAL_DMA_Abort+0x220>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d03b      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a70      	ldr	r2, [pc, #448]	; (8001e10 <HAL_DMA_Abort+0x224>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d036      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6e      	ldr	r2, [pc, #440]	; (8001e14 <HAL_DMA_Abort+0x228>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d031      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a6d      	ldr	r2, [pc, #436]	; (8001e18 <HAL_DMA_Abort+0x22c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d02c      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a6b      	ldr	r2, [pc, #428]	; (8001e1c <HAL_DMA_Abort+0x230>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d027      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a6a      	ldr	r2, [pc, #424]	; (8001e20 <HAL_DMA_Abort+0x234>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d022      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a68      	ldr	r2, [pc, #416]	; (8001e24 <HAL_DMA_Abort+0x238>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d01d      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a67      	ldr	r2, [pc, #412]	; (8001e28 <HAL_DMA_Abort+0x23c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d018      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a65      	ldr	r2, [pc, #404]	; (8001e2c <HAL_DMA_Abort+0x240>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a64      	ldr	r2, [pc, #400]	; (8001e30 <HAL_DMA_Abort+0x244>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00e      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a62      	ldr	r2, [pc, #392]	; (8001e34 <HAL_DMA_Abort+0x248>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d009      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a61      	ldr	r2, [pc, #388]	; (8001e38 <HAL_DMA_Abort+0x24c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d004      	beq.n	8001cc2 <HAL_DMA_Abort+0xd6>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a5f      	ldr	r2, [pc, #380]	; (8001e3c <HAL_DMA_Abort+0x250>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_DMA_Abort+0xda>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_DMA_Abort+0xdc>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d013      	beq.n	8001cf4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 021e 	bic.w	r2, r2, #30
 8001cda:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e00a      	b.n	8001d0a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 020e 	bic.w	r2, r2, #14
 8001d02:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a3c      	ldr	r2, [pc, #240]	; (8001e00 <HAL_DMA_Abort+0x214>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d072      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a3a      	ldr	r2, [pc, #232]	; (8001e04 <HAL_DMA_Abort+0x218>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d06d      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a39      	ldr	r2, [pc, #228]	; (8001e08 <HAL_DMA_Abort+0x21c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d068      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a37      	ldr	r2, [pc, #220]	; (8001e0c <HAL_DMA_Abort+0x220>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d063      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a36      	ldr	r2, [pc, #216]	; (8001e10 <HAL_DMA_Abort+0x224>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d05e      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <HAL_DMA_Abort+0x228>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d059      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a33      	ldr	r2, [pc, #204]	; (8001e18 <HAL_DMA_Abort+0x22c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d054      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a31      	ldr	r2, [pc, #196]	; (8001e1c <HAL_DMA_Abort+0x230>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d04f      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a30      	ldr	r2, [pc, #192]	; (8001e20 <HAL_DMA_Abort+0x234>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d04a      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a2e      	ldr	r2, [pc, #184]	; (8001e24 <HAL_DMA_Abort+0x238>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d045      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2d      	ldr	r2, [pc, #180]	; (8001e28 <HAL_DMA_Abort+0x23c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d040      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <HAL_DMA_Abort+0x240>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d03b      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a2a      	ldr	r2, [pc, #168]	; (8001e30 <HAL_DMA_Abort+0x244>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d036      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <HAL_DMA_Abort+0x248>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d031      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <HAL_DMA_Abort+0x24c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d02c      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a25      	ldr	r2, [pc, #148]	; (8001e3c <HAL_DMA_Abort+0x250>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d027      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a24      	ldr	r2, [pc, #144]	; (8001e40 <HAL_DMA_Abort+0x254>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d022      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <HAL_DMA_Abort+0x258>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01d      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <HAL_DMA_Abort+0x25c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d018      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <HAL_DMA_Abort+0x260>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <HAL_DMA_Abort+0x264>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00e      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_DMA_Abort+0x268>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_DMA_Abort+0x26c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d004      	beq.n	8001dfa <HAL_DMA_Abort+0x20e>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <HAL_DMA_Abort+0x270>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d132      	bne.n	8001e60 <HAL_DMA_Abort+0x274>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e031      	b.n	8001e62 <HAL_DMA_Abort+0x276>
 8001dfe:	bf00      	nop
 8001e00:	40020010 	.word	0x40020010
 8001e04:	40020028 	.word	0x40020028
 8001e08:	40020040 	.word	0x40020040
 8001e0c:	40020058 	.word	0x40020058
 8001e10:	40020070 	.word	0x40020070
 8001e14:	40020088 	.word	0x40020088
 8001e18:	400200a0 	.word	0x400200a0
 8001e1c:	400200b8 	.word	0x400200b8
 8001e20:	40020410 	.word	0x40020410
 8001e24:	40020428 	.word	0x40020428
 8001e28:	40020440 	.word	0x40020440
 8001e2c:	40020458 	.word	0x40020458
 8001e30:	40020470 	.word	0x40020470
 8001e34:	40020488 	.word	0x40020488
 8001e38:	400204a0 	.word	0x400204a0
 8001e3c:	400204b8 	.word	0x400204b8
 8001e40:	58025408 	.word	0x58025408
 8001e44:	5802541c 	.word	0x5802541c
 8001e48:	58025430 	.word	0x58025430
 8001e4c:	58025444 	.word	0x58025444
 8001e50:	58025458 	.word	0x58025458
 8001e54:	5802546c 	.word	0x5802546c
 8001e58:	58025480 	.word	0x58025480
 8001e5c:	58025494 	.word	0x58025494
 8001e60:	2300      	movs	r3, #0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d007      	beq.n	8001e76 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6d      	ldr	r2, [pc, #436]	; (8002030 <HAL_DMA_Abort+0x444>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d04a      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a6b      	ldr	r2, [pc, #428]	; (8002034 <HAL_DMA_Abort+0x448>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d045      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6a      	ldr	r2, [pc, #424]	; (8002038 <HAL_DMA_Abort+0x44c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d040      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a68      	ldr	r2, [pc, #416]	; (800203c <HAL_DMA_Abort+0x450>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d03b      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a67      	ldr	r2, [pc, #412]	; (8002040 <HAL_DMA_Abort+0x454>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d036      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a65      	ldr	r2, [pc, #404]	; (8002044 <HAL_DMA_Abort+0x458>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d031      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a64      	ldr	r2, [pc, #400]	; (8002048 <HAL_DMA_Abort+0x45c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d02c      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a62      	ldr	r2, [pc, #392]	; (800204c <HAL_DMA_Abort+0x460>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d027      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a61      	ldr	r2, [pc, #388]	; (8002050 <HAL_DMA_Abort+0x464>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d022      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a5f      	ldr	r2, [pc, #380]	; (8002054 <HAL_DMA_Abort+0x468>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01d      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a5e      	ldr	r2, [pc, #376]	; (8002058 <HAL_DMA_Abort+0x46c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d018      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a5c      	ldr	r2, [pc, #368]	; (800205c <HAL_DMA_Abort+0x470>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a5b      	ldr	r2, [pc, #364]	; (8002060 <HAL_DMA_Abort+0x474>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00e      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a59      	ldr	r2, [pc, #356]	; (8002064 <HAL_DMA_Abort+0x478>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a58      	ldr	r2, [pc, #352]	; (8002068 <HAL_DMA_Abort+0x47c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_DMA_Abort+0x32a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a56      	ldr	r2, [pc, #344]	; (800206c <HAL_DMA_Abort+0x480>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d108      	bne.n	8001f28 <HAL_DMA_Abort+0x33c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0201 	bic.w	r2, r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e007      	b.n	8001f38 <HAL_DMA_Abort+0x34c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f38:	e013      	b.n	8001f62 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f3a:	f7ff fd0b 	bl	8001954 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	d90c      	bls.n	8001f62 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2203      	movs	r2, #3
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e12d      	b.n	80021be <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1e5      	bne.n	8001f3a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <HAL_DMA_Abort+0x444>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d04a      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a2d      	ldr	r2, [pc, #180]	; (8002034 <HAL_DMA_Abort+0x448>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d045      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <HAL_DMA_Abort+0x44c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d040      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a2a      	ldr	r2, [pc, #168]	; (800203c <HAL_DMA_Abort+0x450>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d03b      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a29      	ldr	r2, [pc, #164]	; (8002040 <HAL_DMA_Abort+0x454>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d036      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a27      	ldr	r2, [pc, #156]	; (8002044 <HAL_DMA_Abort+0x458>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d031      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a26      	ldr	r2, [pc, #152]	; (8002048 <HAL_DMA_Abort+0x45c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d02c      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a24      	ldr	r2, [pc, #144]	; (800204c <HAL_DMA_Abort+0x460>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d027      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a23      	ldr	r2, [pc, #140]	; (8002050 <HAL_DMA_Abort+0x464>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d022      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a21      	ldr	r2, [pc, #132]	; (8002054 <HAL_DMA_Abort+0x468>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01d      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a20      	ldr	r2, [pc, #128]	; (8002058 <HAL_DMA_Abort+0x46c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d018      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1e      	ldr	r2, [pc, #120]	; (800205c <HAL_DMA_Abort+0x470>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <HAL_DMA_Abort+0x474>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00e      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <HAL_DMA_Abort+0x478>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d009      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_DMA_Abort+0x47c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d004      	beq.n	800200e <HAL_DMA_Abort+0x422>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a18      	ldr	r2, [pc, #96]	; (800206c <HAL_DMA_Abort+0x480>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d101      	bne.n	8002012 <HAL_DMA_Abort+0x426>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_DMA_Abort+0x428>
 8002012:	2300      	movs	r3, #0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d02b      	beq.n	8002070 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	223f      	movs	r2, #63	; 0x3f
 8002028:	409a      	lsls	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	e02a      	b.n	8002086 <HAL_DMA_Abort+0x49a>
 8002030:	40020010 	.word	0x40020010
 8002034:	40020028 	.word	0x40020028
 8002038:	40020040 	.word	0x40020040
 800203c:	40020058 	.word	0x40020058
 8002040:	40020070 	.word	0x40020070
 8002044:	40020088 	.word	0x40020088
 8002048:	400200a0 	.word	0x400200a0
 800204c:	400200b8 	.word	0x400200b8
 8002050:	40020410 	.word	0x40020410
 8002054:	40020428 	.word	0x40020428
 8002058:	40020440 	.word	0x40020440
 800205c:	40020458 	.word	0x40020458
 8002060:	40020470 	.word	0x40020470
 8002064:	40020488 	.word	0x40020488
 8002068:	400204a0 	.word	0x400204a0
 800206c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	2201      	movs	r2, #1
 8002080:	409a      	lsls	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a4f      	ldr	r2, [pc, #316]	; (80021c8 <HAL_DMA_Abort+0x5dc>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d072      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a4d      	ldr	r2, [pc, #308]	; (80021cc <HAL_DMA_Abort+0x5e0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d06d      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a4c      	ldr	r2, [pc, #304]	; (80021d0 <HAL_DMA_Abort+0x5e4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d068      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a4a      	ldr	r2, [pc, #296]	; (80021d4 <HAL_DMA_Abort+0x5e8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d063      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a49      	ldr	r2, [pc, #292]	; (80021d8 <HAL_DMA_Abort+0x5ec>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d05e      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a47      	ldr	r2, [pc, #284]	; (80021dc <HAL_DMA_Abort+0x5f0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d059      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a46      	ldr	r2, [pc, #280]	; (80021e0 <HAL_DMA_Abort+0x5f4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d054      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a44      	ldr	r2, [pc, #272]	; (80021e4 <HAL_DMA_Abort+0x5f8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d04f      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a43      	ldr	r2, [pc, #268]	; (80021e8 <HAL_DMA_Abort+0x5fc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d04a      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a41      	ldr	r2, [pc, #260]	; (80021ec <HAL_DMA_Abort+0x600>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d045      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a40      	ldr	r2, [pc, #256]	; (80021f0 <HAL_DMA_Abort+0x604>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d040      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a3e      	ldr	r2, [pc, #248]	; (80021f4 <HAL_DMA_Abort+0x608>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d03b      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a3d      	ldr	r2, [pc, #244]	; (80021f8 <HAL_DMA_Abort+0x60c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d036      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a3b      	ldr	r2, [pc, #236]	; (80021fc <HAL_DMA_Abort+0x610>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d031      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a3a      	ldr	r2, [pc, #232]	; (8002200 <HAL_DMA_Abort+0x614>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d02c      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a38      	ldr	r2, [pc, #224]	; (8002204 <HAL_DMA_Abort+0x618>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d027      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a37      	ldr	r2, [pc, #220]	; (8002208 <HAL_DMA_Abort+0x61c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d022      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a35      	ldr	r2, [pc, #212]	; (800220c <HAL_DMA_Abort+0x620>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a34      	ldr	r2, [pc, #208]	; (8002210 <HAL_DMA_Abort+0x624>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d018      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a32      	ldr	r2, [pc, #200]	; (8002214 <HAL_DMA_Abort+0x628>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a31      	ldr	r2, [pc, #196]	; (8002218 <HAL_DMA_Abort+0x62c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00e      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2f      	ldr	r2, [pc, #188]	; (800221c <HAL_DMA_Abort+0x630>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2e      	ldr	r2, [pc, #184]	; (8002220 <HAL_DMA_Abort+0x634>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d004      	beq.n	8002176 <HAL_DMA_Abort+0x58a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <HAL_DMA_Abort+0x638>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_DMA_Abort+0x58e>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_DMA_Abort+0x590>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d015      	beq.n	80021ac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002188:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021aa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40020010 	.word	0x40020010
 80021cc:	40020028 	.word	0x40020028
 80021d0:	40020040 	.word	0x40020040
 80021d4:	40020058 	.word	0x40020058
 80021d8:	40020070 	.word	0x40020070
 80021dc:	40020088 	.word	0x40020088
 80021e0:	400200a0 	.word	0x400200a0
 80021e4:	400200b8 	.word	0x400200b8
 80021e8:	40020410 	.word	0x40020410
 80021ec:	40020428 	.word	0x40020428
 80021f0:	40020440 	.word	0x40020440
 80021f4:	40020458 	.word	0x40020458
 80021f8:	40020470 	.word	0x40020470
 80021fc:	40020488 	.word	0x40020488
 8002200:	400204a0 	.word	0x400204a0
 8002204:	400204b8 	.word	0x400204b8
 8002208:	58025408 	.word	0x58025408
 800220c:	5802541c 	.word	0x5802541c
 8002210:	58025430 	.word	0x58025430
 8002214:	58025444 	.word	0x58025444
 8002218:	58025458 	.word	0x58025458
 800221c:	5802546c 	.word	0x5802546c
 8002220:	58025480 	.word	0x58025480
 8002224:	58025494 	.word	0x58025494

08002228 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e237      	b.n	80026aa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d004      	beq.n	8002250 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e22c      	b.n	80026aa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a5c      	ldr	r2, [pc, #368]	; (80023c8 <HAL_DMA_Abort_IT+0x1a0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d04a      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a5b      	ldr	r2, [pc, #364]	; (80023cc <HAL_DMA_Abort_IT+0x1a4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d045      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a59      	ldr	r2, [pc, #356]	; (80023d0 <HAL_DMA_Abort_IT+0x1a8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d040      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <HAL_DMA_Abort_IT+0x1ac>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d03b      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a56      	ldr	r2, [pc, #344]	; (80023d8 <HAL_DMA_Abort_IT+0x1b0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d036      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a55      	ldr	r2, [pc, #340]	; (80023dc <HAL_DMA_Abort_IT+0x1b4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d031      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a53      	ldr	r2, [pc, #332]	; (80023e0 <HAL_DMA_Abort_IT+0x1b8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d02c      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a52      	ldr	r2, [pc, #328]	; (80023e4 <HAL_DMA_Abort_IT+0x1bc>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d027      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a50      	ldr	r2, [pc, #320]	; (80023e8 <HAL_DMA_Abort_IT+0x1c0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d022      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a4f      	ldr	r2, [pc, #316]	; (80023ec <HAL_DMA_Abort_IT+0x1c4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d01d      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a4d      	ldr	r2, [pc, #308]	; (80023f0 <HAL_DMA_Abort_IT+0x1c8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d018      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a4c      	ldr	r2, [pc, #304]	; (80023f4 <HAL_DMA_Abort_IT+0x1cc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d013      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a4a      	ldr	r2, [pc, #296]	; (80023f8 <HAL_DMA_Abort_IT+0x1d0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00e      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a49      	ldr	r2, [pc, #292]	; (80023fc <HAL_DMA_Abort_IT+0x1d4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d009      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a47      	ldr	r2, [pc, #284]	; (8002400 <HAL_DMA_Abort_IT+0x1d8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d004      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a46      	ldr	r2, [pc, #280]	; (8002404 <HAL_DMA_Abort_IT+0x1dc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_DMA_Abort_IT+0xcc>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_DMA_Abort_IT+0xce>
 80022f4:	2300      	movs	r3, #0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8086 	beq.w	8002408 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2204      	movs	r2, #4
 8002300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2f      	ldr	r2, [pc, #188]	; (80023c8 <HAL_DMA_Abort_IT+0x1a0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d04a      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2e      	ldr	r2, [pc, #184]	; (80023cc <HAL_DMA_Abort_IT+0x1a4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d045      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2c      	ldr	r2, [pc, #176]	; (80023d0 <HAL_DMA_Abort_IT+0x1a8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d040      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2b      	ldr	r2, [pc, #172]	; (80023d4 <HAL_DMA_Abort_IT+0x1ac>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d03b      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <HAL_DMA_Abort_IT+0x1b0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d036      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a28      	ldr	r2, [pc, #160]	; (80023dc <HAL_DMA_Abort_IT+0x1b4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d031      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <HAL_DMA_Abort_IT+0x1b8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d02c      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <HAL_DMA_Abort_IT+0x1bc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d027      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a23      	ldr	r2, [pc, #140]	; (80023e8 <HAL_DMA_Abort_IT+0x1c0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d022      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a22      	ldr	r2, [pc, #136]	; (80023ec <HAL_DMA_Abort_IT+0x1c4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d01d      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <HAL_DMA_Abort_IT+0x1c8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d018      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <HAL_DMA_Abort_IT+0x1cc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d013      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_DMA_Abort_IT+0x1d0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00e      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <HAL_DMA_Abort_IT+0x1d4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d009      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <HAL_DMA_Abort_IT+0x1d8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d004      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x17c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a19      	ldr	r2, [pc, #100]	; (8002404 <HAL_DMA_Abort_IT+0x1dc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d108      	bne.n	80023b6 <HAL_DMA_Abort_IT+0x18e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	e178      	b.n	80026a8 <HAL_DMA_Abort_IT+0x480>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e16f      	b.n	80026a8 <HAL_DMA_Abort_IT+0x480>
 80023c8:	40020010 	.word	0x40020010
 80023cc:	40020028 	.word	0x40020028
 80023d0:	40020040 	.word	0x40020040
 80023d4:	40020058 	.word	0x40020058
 80023d8:	40020070 	.word	0x40020070
 80023dc:	40020088 	.word	0x40020088
 80023e0:	400200a0 	.word	0x400200a0
 80023e4:	400200b8 	.word	0x400200b8
 80023e8:	40020410 	.word	0x40020410
 80023ec:	40020428 	.word	0x40020428
 80023f0:	40020440 	.word	0x40020440
 80023f4:	40020458 	.word	0x40020458
 80023f8:	40020470 	.word	0x40020470
 80023fc:	40020488 	.word	0x40020488
 8002400:	400204a0 	.word	0x400204a0
 8002404:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 020e 	bic.w	r2, r2, #14
 8002416:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6c      	ldr	r2, [pc, #432]	; (80025d0 <HAL_DMA_Abort_IT+0x3a8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d04a      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6b      	ldr	r2, [pc, #428]	; (80025d4 <HAL_DMA_Abort_IT+0x3ac>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d045      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a69      	ldr	r2, [pc, #420]	; (80025d8 <HAL_DMA_Abort_IT+0x3b0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d040      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a68      	ldr	r2, [pc, #416]	; (80025dc <HAL_DMA_Abort_IT+0x3b4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d03b      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a66      	ldr	r2, [pc, #408]	; (80025e0 <HAL_DMA_Abort_IT+0x3b8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d036      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a65      	ldr	r2, [pc, #404]	; (80025e4 <HAL_DMA_Abort_IT+0x3bc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d031      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a63      	ldr	r2, [pc, #396]	; (80025e8 <HAL_DMA_Abort_IT+0x3c0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02c      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a62      	ldr	r2, [pc, #392]	; (80025ec <HAL_DMA_Abort_IT+0x3c4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d027      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a60      	ldr	r2, [pc, #384]	; (80025f0 <HAL_DMA_Abort_IT+0x3c8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d022      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a5f      	ldr	r2, [pc, #380]	; (80025f4 <HAL_DMA_Abort_IT+0x3cc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d01d      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a5d      	ldr	r2, [pc, #372]	; (80025f8 <HAL_DMA_Abort_IT+0x3d0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d018      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a5c      	ldr	r2, [pc, #368]	; (80025fc <HAL_DMA_Abort_IT+0x3d4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d013      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a5a      	ldr	r2, [pc, #360]	; (8002600 <HAL_DMA_Abort_IT+0x3d8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00e      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a59      	ldr	r2, [pc, #356]	; (8002604 <HAL_DMA_Abort_IT+0x3dc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d009      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a57      	ldr	r2, [pc, #348]	; (8002608 <HAL_DMA_Abort_IT+0x3e0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x290>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a56      	ldr	r2, [pc, #344]	; (800260c <HAL_DMA_Abort_IT+0x3e4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d108      	bne.n	80024ca <HAL_DMA_Abort_IT+0x2a2>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e007      	b.n	80024da <HAL_DMA_Abort_IT+0x2b2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0201 	bic.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a3c      	ldr	r2, [pc, #240]	; (80025d0 <HAL_DMA_Abort_IT+0x3a8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d072      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a3a      	ldr	r2, [pc, #232]	; (80025d4 <HAL_DMA_Abort_IT+0x3ac>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d06d      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a39      	ldr	r2, [pc, #228]	; (80025d8 <HAL_DMA_Abort_IT+0x3b0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d068      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a37      	ldr	r2, [pc, #220]	; (80025dc <HAL_DMA_Abort_IT+0x3b4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d063      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a36      	ldr	r2, [pc, #216]	; (80025e0 <HAL_DMA_Abort_IT+0x3b8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d05e      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a34      	ldr	r2, [pc, #208]	; (80025e4 <HAL_DMA_Abort_IT+0x3bc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d059      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a33      	ldr	r2, [pc, #204]	; (80025e8 <HAL_DMA_Abort_IT+0x3c0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d054      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a31      	ldr	r2, [pc, #196]	; (80025ec <HAL_DMA_Abort_IT+0x3c4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d04f      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a30      	ldr	r2, [pc, #192]	; (80025f0 <HAL_DMA_Abort_IT+0x3c8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d04a      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2e      	ldr	r2, [pc, #184]	; (80025f4 <HAL_DMA_Abort_IT+0x3cc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d045      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2d      	ldr	r2, [pc, #180]	; (80025f8 <HAL_DMA_Abort_IT+0x3d0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d040      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2b      	ldr	r2, [pc, #172]	; (80025fc <HAL_DMA_Abort_IT+0x3d4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d03b      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <HAL_DMA_Abort_IT+0x3d8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d036      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a28      	ldr	r2, [pc, #160]	; (8002604 <HAL_DMA_Abort_IT+0x3dc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d031      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a27      	ldr	r2, [pc, #156]	; (8002608 <HAL_DMA_Abort_IT+0x3e0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d02c      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a25      	ldr	r2, [pc, #148]	; (800260c <HAL_DMA_Abort_IT+0x3e4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d027      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a24      	ldr	r2, [pc, #144]	; (8002610 <HAL_DMA_Abort_IT+0x3e8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d022      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a22      	ldr	r2, [pc, #136]	; (8002614 <HAL_DMA_Abort_IT+0x3ec>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d01d      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a21      	ldr	r2, [pc, #132]	; (8002618 <HAL_DMA_Abort_IT+0x3f0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d018      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_DMA_Abort_IT+0x3f4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <HAL_DMA_Abort_IT+0x3f8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00e      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_DMA_Abort_IT+0x3fc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d009      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <HAL_DMA_Abort_IT+0x400>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d004      	beq.n	80025ca <HAL_DMA_Abort_IT+0x3a2>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a19      	ldr	r2, [pc, #100]	; (800262c <HAL_DMA_Abort_IT+0x404>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d132      	bne.n	8002630 <HAL_DMA_Abort_IT+0x408>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e031      	b.n	8002632 <HAL_DMA_Abort_IT+0x40a>
 80025ce:	bf00      	nop
 80025d0:	40020010 	.word	0x40020010
 80025d4:	40020028 	.word	0x40020028
 80025d8:	40020040 	.word	0x40020040
 80025dc:	40020058 	.word	0x40020058
 80025e0:	40020070 	.word	0x40020070
 80025e4:	40020088 	.word	0x40020088
 80025e8:	400200a0 	.word	0x400200a0
 80025ec:	400200b8 	.word	0x400200b8
 80025f0:	40020410 	.word	0x40020410
 80025f4:	40020428 	.word	0x40020428
 80025f8:	40020440 	.word	0x40020440
 80025fc:	40020458 	.word	0x40020458
 8002600:	40020470 	.word	0x40020470
 8002604:	40020488 	.word	0x40020488
 8002608:	400204a0 	.word	0x400204a0
 800260c:	400204b8 	.word	0x400204b8
 8002610:	58025408 	.word	0x58025408
 8002614:	5802541c 	.word	0x5802541c
 8002618:	58025430 	.word	0x58025430
 800261c:	58025444 	.word	0x58025444
 8002620:	58025458 	.word	0x58025458
 8002624:	5802546c 	.word	0x5802546c
 8002628:	58025480 	.word	0x58025480
 800262c:	58025494 	.word	0x58025494
 8002630:	2300      	movs	r3, #0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d028      	beq.n	8002688 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002644:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	2201      	movs	r2, #1
 8002656:	409a      	lsls	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002664:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800267c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002686:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026c2:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <HAL_GPIO_Init+0x234>)
 80026c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026c6:	e194      	b.n	80029f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8186 	beq.w	80029ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d005      	beq.n	80026f8 <HAL_GPIO_Init+0x44>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d130      	bne.n	800275a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800272e:	2201      	movs	r2, #1
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0201 	and.w	r2, r3, #1
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b03      	cmp	r3, #3
 8002764:	d017      	beq.n	8002796 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d123      	bne.n	80027ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	08da      	lsrs	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3208      	adds	r2, #8
 80027e4:	69b9      	ldr	r1, [r7, #24]
 80027e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0203 	and.w	r2, r3, #3
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80e0 	beq.w	80029ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282c:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <HAL_GPIO_Init+0x238>)
 800282e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002832:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <HAL_GPIO_Init+0x238>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_GPIO_Init+0x238>)
 800283e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284a:	4a29      	ldr	r2, [pc, #164]	; (80028f0 <HAL_GPIO_Init+0x23c>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a20      	ldr	r2, [pc, #128]	; (80028f4 <HAL_GPIO_Init+0x240>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d052      	beq.n	800291c <HAL_GPIO_Init+0x268>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <HAL_GPIO_Init+0x244>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d031      	beq.n	80028e2 <HAL_GPIO_Init+0x22e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <HAL_GPIO_Init+0x248>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d02b      	beq.n	80028de <HAL_GPIO_Init+0x22a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <HAL_GPIO_Init+0x24c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d025      	beq.n	80028da <HAL_GPIO_Init+0x226>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <HAL_GPIO_Init+0x250>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01f      	beq.n	80028d6 <HAL_GPIO_Init+0x222>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <HAL_GPIO_Init+0x254>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d019      	beq.n	80028d2 <HAL_GPIO_Init+0x21e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_GPIO_Init+0x258>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0x21a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <HAL_GPIO_Init+0x25c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00d      	beq.n	80028ca <HAL_GPIO_Init+0x216>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a18      	ldr	r2, [pc, #96]	; (8002914 <HAL_GPIO_Init+0x260>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <HAL_GPIO_Init+0x212>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <HAL_GPIO_Init+0x264>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_GPIO_Init+0x20e>
 80028be:	2309      	movs	r3, #9
 80028c0:	e02d      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028c2:	230a      	movs	r3, #10
 80028c4:	e02b      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028c6:	2308      	movs	r3, #8
 80028c8:	e029      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028ca:	2307      	movs	r3, #7
 80028cc:	e027      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028ce:	2306      	movs	r3, #6
 80028d0:	e025      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028d2:	2305      	movs	r3, #5
 80028d4:	e023      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e021      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028da:	2303      	movs	r3, #3
 80028dc:	e01f      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028de:	2302      	movs	r3, #2
 80028e0:	e01d      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e01b      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028e6:	bf00      	nop
 80028e8:	58000080 	.word	0x58000080
 80028ec:	58024400 	.word	0x58024400
 80028f0:	58000400 	.word	0x58000400
 80028f4:	58020000 	.word	0x58020000
 80028f8:	58020400 	.word	0x58020400
 80028fc:	58020800 	.word	0x58020800
 8002900:	58020c00 	.word	0x58020c00
 8002904:	58021000 	.word	0x58021000
 8002908:	58021400 	.word	0x58021400
 800290c:	58021800 	.word	0x58021800
 8002910:	58021c00 	.word	0x58021c00
 8002914:	58022000 	.word	0x58022000
 8002918:	58022400 	.word	0x58022400
 800291c:	2300      	movs	r3, #0
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	f002 0203 	and.w	r2, r2, #3
 8002924:	0092      	lsls	r2, r2, #2
 8002926:	4093      	lsls	r3, r2
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800292e:	4938      	ldr	r1, [pc, #224]	; (8002a10 <HAL_GPIO_Init+0x35c>)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	3302      	adds	r3, #2
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800296a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	3301      	adds	r3, #1
 80029f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f47f ae63 	bne.w	80026c8 <HAL_GPIO_Init+0x14>
  }
}
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
 8002a06:	3724      	adds	r7, #36	; 0x24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	58000400 	.word	0x58000400

08002a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
 8002a20:	4613      	mov	r3, r2
 8002a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a24:	787b      	ldrb	r3, [r7, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a30:	e003      	b.n	8002a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	041a      	lsls	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	619a      	str	r2, [r3, #24]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a58:	887a      	ldrh	r2, [r7, #2]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	041a      	lsls	r2, r3, #16
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	400b      	ands	r3, r1
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	619a      	str	r2, [r3, #24]
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002a84:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <HAL_HSEM_FastTake+0x2c>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3320      	adds	r3, #32
 8002a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_HSEM_FastTake+0x30>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d101      	bne.n	8002a98 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e000      	b.n	8002a9a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	58026400 	.word	0x58026400
 8002aac:	80000300 	.word	0x80000300

08002ab0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002aba:	4906      	ldr	r1, [pc, #24]	; (8002ad4 <HAL_HSEM_Release+0x24>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	58026400 	.word	0x58026400

08002ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e07f      	b.n	8002bea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe fc02 	bl	8001308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2224      	movs	r2, #36	; 0x24
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d107      	bne.n	8002b52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	e006      	b.n	8002b60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d104      	bne.n	8002b72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_I2C_Init+0x11c>)
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69d9      	ldr	r1, [r3, #28]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1a      	ldr	r2, [r3, #32]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	02008000 	.word	0x02008000

08002bf8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	4608      	mov	r0, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	817b      	strh	r3, [r7, #10]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	813b      	strh	r3, [r7, #8]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	f040 80f9 	bne.w	8002e12 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_I2C_Mem_Write+0x34>
 8002c26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0ed      	b.n	8002e14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Mem_Write+0x4e>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0e6      	b.n	8002e14 <HAL_I2C_Mem_Write+0x21c>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c4e:	f7fe fe81 	bl	8001954 <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2319      	movs	r3, #25
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fbcb 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0d1      	b.n	8002e14 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2221      	movs	r2, #33	; 0x21
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2240      	movs	r2, #64	; 0x40
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c98:	88f8      	ldrh	r0, [r7, #6]
 8002c9a:	893a      	ldrh	r2, [r7, #8]
 8002c9c:	8979      	ldrh	r1, [r7, #10]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fadb 	bl	8003264 <I2C_RequestMemoryWrite>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0a9      	b.n	8002e14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2bff      	cmp	r3, #255	; 0xff
 8002cc8:	d90e      	bls.n	8002ce8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	8979      	ldrh	r1, [r7, #10]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fd33 	bl	800374c <I2C_TransferConfig>
 8002ce6:	e00f      	b.n	8002d08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	8979      	ldrh	r1, [r7, #10]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fd22 	bl	800374c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fbb5 	bl	800347c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e07b      	b.n	8002e14 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d034      	beq.n	8002dc0 <HAL_I2C_Mem_Write+0x1c8>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d130      	bne.n	8002dc0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	2200      	movs	r2, #0
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fb47 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e04d      	b.n	8002e14 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2bff      	cmp	r3, #255	; 0xff
 8002d80:	d90e      	bls.n	8002da0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	22ff      	movs	r2, #255	; 0xff
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	8979      	ldrh	r1, [r7, #10]
 8002d90:	2300      	movs	r3, #0
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fcd7 	bl	800374c <I2C_TransferConfig>
 8002d9e:	e00f      	b.n	8002dc0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	8979      	ldrh	r1, [r7, #10]
 8002db2:	2300      	movs	r3, #0
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fcc6 	bl	800374c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d19e      	bne.n	8002d08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fb94 	bl	80034fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e01a      	b.n	8002e14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2220      	movs	r2, #32
 8002de4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_I2C_Mem_Write+0x224>)
 8002df2:	400b      	ands	r3, r1
 8002df4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
  }
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	fe00e800 	.word	0xfe00e800

08002e20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	817b      	strh	r3, [r7, #10]
 8002e32:	460b      	mov	r3, r1
 8002e34:	813b      	strh	r3, [r7, #8]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	f040 80fd 	bne.w	8003042 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_I2C_Mem_Read+0x34>
 8002e4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0f1      	b.n	8003044 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_I2C_Mem_Read+0x4e>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e0ea      	b.n	8003044 <HAL_I2C_Mem_Read+0x224>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e76:	f7fe fd6d 	bl	8001954 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2319      	movs	r3, #25
 8002e82:	2201      	movs	r2, #1
 8002e84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fab7 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0d5      	b.n	8003044 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2222      	movs	r2, #34	; 0x22
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2240      	movs	r2, #64	; 0x40
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a3a      	ldr	r2, [r7, #32]
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ec0:	88f8      	ldrh	r0, [r7, #6]
 8002ec2:	893a      	ldrh	r2, [r7, #8]
 8002ec4:	8979      	ldrh	r1, [r7, #10]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	4603      	mov	r3, r0
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fa1b 	bl	800330c <I2C_RequestMemoryRead>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0ad      	b.n	8003044 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2bff      	cmp	r3, #255	; 0xff
 8002ef0:	d90e      	bls.n	8002f10 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	22ff      	movs	r2, #255	; 0xff
 8002ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	8979      	ldrh	r1, [r7, #10]
 8002f00:	4b52      	ldr	r3, [pc, #328]	; (800304c <HAL_I2C_Mem_Read+0x22c>)
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 fc1f 	bl	800374c <I2C_TransferConfig>
 8002f0e:	e00f      	b.n	8002f30 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	8979      	ldrh	r1, [r7, #10]
 8002f22:	4b4a      	ldr	r3, [pc, #296]	; (800304c <HAL_I2C_Mem_Read+0x22c>)
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fc0e 	bl	800374c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	2200      	movs	r2, #0
 8002f38:	2104      	movs	r1, #4
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fa5e 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e07c      	b.n	8003044 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d034      	beq.n	8002ff0 <HAL_I2C_Mem_Read+0x1d0>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d130      	bne.n	8002ff0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	2200      	movs	r2, #0
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fa2f 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e04d      	b.n	8003044 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2bff      	cmp	r3, #255	; 0xff
 8002fb0:	d90e      	bls.n	8002fd0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	22ff      	movs	r2, #255	; 0xff
 8002fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	8979      	ldrh	r1, [r7, #10]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fbbf 	bl	800374c <I2C_TransferConfig>
 8002fce:	e00f      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	8979      	ldrh	r1, [r7, #10]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fbae 	bl	800374c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d19a      	bne.n	8002f30 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fa7c 	bl	80034fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e01a      	b.n	8003044 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2220      	movs	r2, #32
 8003014:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_I2C_Mem_Read+0x230>)
 8003022:	400b      	ands	r3, r1
 8003024:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	80002400 	.word	0x80002400
 8003050:	fe00e800 	.word	0xfe00e800

08003054 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	460b      	mov	r3, r1
 8003062:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b20      	cmp	r3, #32
 8003072:	f040 80ef 	bne.w	8003254 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003084:	d101      	bne.n	800308a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003086:	2302      	movs	r3, #2
 8003088:	e0e5      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_I2C_IsDeviceReady+0x44>
 8003094:	2302      	movs	r3, #2
 8003096:	e0de      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x202>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2224      	movs	r2, #36	; 0x24
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d105      	bne.n	80030c2 <HAL_I2C_IsDeviceReady+0x6e>
 80030b6:	897b      	ldrh	r3, [r7, #10]
 80030b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030bc:	4b68      	ldr	r3, [pc, #416]	; (8003260 <HAL_I2C_IsDeviceReady+0x20c>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	e004      	b.n	80030cc <HAL_I2C_IsDeviceReady+0x78>
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80030d2:	f7fe fc3f 	bl	8001954 <HAL_GetTick>
 80030d6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003104:	e034      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d01a      	beq.n	8003144 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800310e:	f7fe fc21 	bl	8001954 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d302      	bcc.n	8003124 <HAL_I2C_IsDeviceReady+0xd0>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10f      	bne.n	8003144 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	f043 0220 	orr.w	r2, r3, #32
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e088      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b20      	cmp	r3, #32
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b10      	cmp	r3, #16
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003170:	7ffb      	ldrb	r3, [r7, #31]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_I2C_IsDeviceReady+0x128>
 8003176:	7fbb      	ldrb	r3, [r7, #30]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0c4      	beq.n	8003106 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b10      	cmp	r3, #16
 8003188:	d01a      	beq.n	80031c0 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2200      	movs	r2, #0
 8003192:	2120      	movs	r1, #32
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f931 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e058      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2220      	movs	r2, #32
 80031aa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e04a      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	2120      	movs	r1, #32
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f916 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e03d      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2210      	movs	r2, #16
 80031e0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2220      	movs	r2, #32
 80031e8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d118      	bne.n	8003224 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003200:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	2120      	movs	r1, #32
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f8f5 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e01c      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2220      	movs	r2, #32
 8003222:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3301      	adds	r3, #1
 8003228:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	f63f af3d 	bhi.w	80030ae <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	02002000 	.word	0x02002000

08003264 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	461a      	mov	r2, r3
 8003272:	4603      	mov	r3, r0
 8003274:	817b      	strh	r3, [r7, #10]
 8003276:	460b      	mov	r3, r1
 8003278:	813b      	strh	r3, [r7, #8]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	8979      	ldrh	r1, [r7, #10]
 8003284:	4b20      	ldr	r3, [pc, #128]	; (8003308 <I2C_RequestMemoryWrite+0xa4>)
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fa5d 	bl	800374c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	69b9      	ldr	r1, [r7, #24]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f8f0 	bl	800347c <I2C_WaitOnTXISFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e02c      	b.n	8003300 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032ac:	893b      	ldrh	r3, [r7, #8]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	629a      	str	r2, [r3, #40]	; 0x28
 80032b6:	e015      	b.n	80032e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032b8:	893b      	ldrh	r3, [r7, #8]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	b29b      	uxth	r3, r3
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	69b9      	ldr	r1, [r7, #24]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f8d6 	bl	800347c <I2C_WaitOnTXISFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e012      	b.n	8003300 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032da:	893b      	ldrh	r3, [r7, #8]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2200      	movs	r2, #0
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f884 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	80002000 	.word	0x80002000

0800330c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	817b      	strh	r3, [r7, #10]
 800331e:	460b      	mov	r3, r1
 8003320:	813b      	strh	r3, [r7, #8]
 8003322:	4613      	mov	r3, r2
 8003324:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	8979      	ldrh	r1, [r7, #10]
 800332c:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <I2C_RequestMemoryRead+0xa4>)
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2300      	movs	r3, #0
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fa0a 	bl	800374c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	69b9      	ldr	r1, [r7, #24]
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f89d 	bl	800347c <I2C_WaitOnTXISFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e02c      	b.n	80033a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d105      	bne.n	800335e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003352:	893b      	ldrh	r3, [r7, #8]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
 800335c:	e015      	b.n	800338a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800335e:	893b      	ldrh	r3, [r7, #8]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	b29b      	uxth	r3, r3
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	69b9      	ldr	r1, [r7, #24]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f883 	bl	800347c <I2C_WaitOnTXISFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e012      	b.n	80033a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003380:	893b      	ldrh	r3, [r7, #8]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2200      	movs	r2, #0
 8003392:	2140      	movs	r1, #64	; 0x40
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f831 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	80002000 	.word	0x80002000

080033b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d103      	bne.n	80033d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d007      	beq.n	80033f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	619a      	str	r2, [r3, #24]
  }
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800340c:	e022      	b.n	8003454 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003414:	d01e      	beq.n	8003454 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003416:	f7fe fa9d 	bl	8001954 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d302      	bcc.n	800342c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d113      	bne.n	8003454 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e00f      	b.n	8003474 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4013      	ands	r3, r2
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	429a      	cmp	r2, r3
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	429a      	cmp	r2, r3
 8003470:	d0cd      	beq.n	800340e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003488:	e02c      	b.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f870 	bl	8003574 <I2C_IsErrorOccurred>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e02a      	b.n	80034f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d01e      	beq.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a6:	f7fe fa55 	bl	8001954 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d113      	bne.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e007      	b.n	80034f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d1cb      	bne.n	800348a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003508:	e028      	b.n	800355c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f830 	bl	8003574 <I2C_IsErrorOccurred>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e026      	b.n	800356c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351e:	f7fe fa19 	bl	8001954 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	d302      	bcc.n	8003534 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d113      	bne.n	800355c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	f043 0220 	orr.w	r2, r3, #32
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e007      	b.n	800356c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b20      	cmp	r3, #32
 8003568:	d1cf      	bne.n	800350a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d075      	beq.n	800368c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2210      	movs	r2, #16
 80035a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035a8:	e056      	b.n	8003658 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d052      	beq.n	8003658 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7fe f9cf 	bl	8001954 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <I2C_IsErrorOccurred+0x54>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d147      	bne.n	8003658 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ea:	d12e      	bne.n	800364a <I2C_IsErrorOccurred+0xd6>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035f2:	d02a      	beq.n	800364a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d027      	beq.n	800364a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003608:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800360a:	f7fe f9a3 	bl	8001954 <HAL_GetTick>
 800360e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003610:	e01b      	b.n	800364a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003612:	f7fe f99f 	bl	8001954 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b19      	cmp	r3, #25
 800361e:	d914      	bls.n	800364a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b20      	cmp	r3, #32
 8003656:	d1dc      	bne.n	8003612 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b20      	cmp	r3, #32
 8003664:	d003      	beq.n	800366e <I2C_IsErrorOccurred+0xfa>
 8003666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800366a:	2b00      	cmp	r3, #0
 800366c:	d09d      	beq.n	80035aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800366e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003672:	2b00      	cmp	r3, #0
 8003674:	d103      	bne.n	800367e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2220      	movs	r2, #32
 800367c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f043 0304 	orr.w	r3, r3, #4
 8003684:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	f043 0308 	orr.w	r3, r3, #8
 80036c6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00b      	beq.n	80036fa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d01c      	beq.n	800373c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f7ff fe56 	bl	80033b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <I2C_IsErrorOccurred+0x1d4>)
 8003714:	400b      	ands	r3, r1
 8003716:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	431a      	orrs	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800373c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003740:	4618      	mov	r0, r3
 8003742:	3728      	adds	r7, #40	; 0x28
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	fe00e800 	.word	0xfe00e800

0800374c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	460b      	mov	r3, r1
 8003758:	817b      	strh	r3, [r7, #10]
 800375a:	4613      	mov	r3, r2
 800375c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800375e:	897b      	ldrh	r3, [r7, #10]
 8003760:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003764:	7a7b      	ldrb	r3, [r7, #9]
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800376c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	4313      	orrs	r3, r2
 8003776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800377a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	0d5b      	lsrs	r3, r3, #21
 8003786:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <I2C_TransferConfig+0x60>)
 800378c:	430b      	orrs	r3, r1
 800378e:	43db      	mvns	r3, r3
 8003790:	ea02 0103 	and.w	r1, r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	430a      	orrs	r2, r1
 800379c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	03ff63ff 	.word	0x03ff63ff

080037b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d138      	bne.n	8003838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e032      	b.n	800383a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	; 0x24
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b20      	cmp	r3, #32
 800385a:	d139      	bne.n	80038d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003866:	2302      	movs	r3, #2
 8003868:	e033      	b.n	80038d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2224      	movs	r2, #36	; 0x24
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e0:	b08f      	sub	sp, #60	; 0x3c
 80038e2:	af0a      	add	r7, sp, #40	; 0x28
 80038e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e116      	b.n	8003b1e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd fdf0 	bl	80014f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2203      	movs	r2, #3
 8003914:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f005 fb96 	bl	8009060 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	687e      	ldr	r6, [r7, #4]
 800393c:	466d      	mov	r5, sp
 800393e:	f106 0410 	add.w	r4, r6, #16
 8003942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800394a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800394e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003952:	1d33      	adds	r3, r6, #4
 8003954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003956:	6838      	ldr	r0, [r7, #0]
 8003958:	f005 fb14 	bl	8008f84 <USB_CoreInit>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d005      	beq.n	800396e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e0d7      	b.n	8003b1e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f005 fb84 	bl	8009082 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	e04a      	b.n	8003a16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	333d      	adds	r3, #61	; 0x3d
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	333c      	adds	r3, #60	; 0x3c
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	b298      	uxth	r0, r3
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	3344      	adds	r3, #68	; 0x44
 80039bc:	4602      	mov	r2, r0
 80039be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	3340      	adds	r3, #64	; 0x40
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3348      	adds	r3, #72	; 0x48
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039e8:	7bfa      	ldrb	r2, [r7, #15]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	334c      	adds	r3, #76	; 0x4c
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039fc:	7bfa      	ldrb	r2, [r7, #15]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	3354      	adds	r3, #84	; 0x54
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	3301      	adds	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	7bfa      	ldrb	r2, [r7, #15]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d3af      	bcc.n	8003980 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	73fb      	strb	r3, [r7, #15]
 8003a24:	e044      	b.n	8003ab0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a26:	7bfa      	ldrb	r2, [r7, #15]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a4e:	7bfa      	ldrb	r2, [r7, #15]
 8003a50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a94:	7bfa      	ldrb	r2, [r7, #15]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	3301      	adds	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	7bfa      	ldrb	r2, [r7, #15]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d3b5      	bcc.n	8003a26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	687e      	ldr	r6, [r7, #4]
 8003ac2:	466d      	mov	r5, sp
 8003ac4:	f106 0410 	add.w	r4, r6, #16
 8003ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ad4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ad8:	1d33      	adds	r3, r6, #4
 8003ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003adc:	6838      	ldr	r0, [r7, #0]
 8003ade:	f005 fb1d 	bl	800911c <USB_DevInit>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e014      	b.n	8003b1e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d102      	bne.n	8003b12 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f80b 	bl	8003b28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f005 fcdb 	bl	80094d2 <USB_DevDisconnect>

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_PCDEx_ActivateLPM+0x44>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	10000003 	.word	0x10000003

08003b70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003b78:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	2b06      	cmp	r3, #6
 8003b82:	d00a      	beq.n	8003b9a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b84:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d001      	beq.n	8003b96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e040      	b.n	8003c18 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e03e      	b.n	8003c18 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b9a:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003ba2:	491f      	ldr	r1, [pc, #124]	; (8003c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003baa:	f7fd fed3 	bl	8001954 <HAL_GetTick>
 8003bae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bb0:	e009      	b.n	8003bc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bb2:	f7fd fecf 	bl	8001954 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bc0:	d901      	bls.n	8003bc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e028      	b.n	8003c18 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd2:	d1ee      	bne.n	8003bb2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b1e      	cmp	r3, #30
 8003bd8:	d008      	beq.n	8003bec <HAL_PWREx_ConfigSupply+0x7c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8003bde:	d005      	beq.n	8003bec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b1d      	cmp	r3, #29
 8003be4:	d002      	beq.n	8003bec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b2d      	cmp	r3, #45	; 0x2d
 8003bea:	d114      	bne.n	8003c16 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003bec:	f7fd feb2 	bl	8001954 <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003bf2:	e009      	b.n	8003c08 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bf4:	f7fd feae 	bl	8001954 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c02:	d901      	bls.n	8003c08 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e007      	b.n	8003c18 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d1ee      	bne.n	8003bf4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	58024800 	.word	0x58024800

08003c24 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c32:	60d3      	str	r3, [r2, #12]
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	58024800 	.word	0x58024800

08003c44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08c      	sub	sp, #48	; 0x30
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f000 bc1d 	b.w	8004492 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8087 	beq.w	8003d74 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c66:	4b99      	ldr	r3, [pc, #612]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c70:	4b96      	ldr	r3, [pc, #600]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d007      	beq.n	8003c8c <HAL_RCC_OscConfig+0x48>
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	2b18      	cmp	r3, #24
 8003c80:	d110      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x60>
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	4b8f      	ldr	r3, [pc, #572]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d06c      	beq.n	8003d72 <HAL_RCC_OscConfig+0x12e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d168      	bne.n	8003d72 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e3f6      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cac:	d106      	bne.n	8003cbc <HAL_RCC_OscConfig+0x78>
 8003cae:	4b87      	ldr	r3, [pc, #540]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a86      	ldr	r2, [pc, #536]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e02e      	b.n	8003d1a <HAL_RCC_OscConfig+0xd6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10c      	bne.n	8003cde <HAL_RCC_OscConfig+0x9a>
 8003cc4:	4b81      	ldr	r3, [pc, #516]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a80      	ldr	r2, [pc, #512]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b7e      	ldr	r3, [pc, #504]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a7d      	ldr	r2, [pc, #500]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	e01d      	b.n	8003d1a <HAL_RCC_OscConfig+0xd6>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ce6:	d10c      	bne.n	8003d02 <HAL_RCC_OscConfig+0xbe>
 8003ce8:	4b78      	ldr	r3, [pc, #480]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a77      	ldr	r2, [pc, #476]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003cee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b75      	ldr	r3, [pc, #468]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a74      	ldr	r2, [pc, #464]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	e00b      	b.n	8003d1a <HAL_RCC_OscConfig+0xd6>
 8003d02:	4b72      	ldr	r3, [pc, #456]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a71      	ldr	r2, [pc, #452]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b6f      	ldr	r3, [pc, #444]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6e      	ldr	r2, [pc, #440]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d013      	beq.n	8003d4a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fd fe17 	bl	8001954 <HAL_GetTick>
 8003d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d2a:	f7fd fe13 	bl	8001954 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b64      	cmp	r3, #100	; 0x64
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e3aa      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d3c:	4b63      	ldr	r3, [pc, #396]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0xe6>
 8003d48:	e014      	b.n	8003d74 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fd fe03 	bl	8001954 <HAL_GetTick>
 8003d4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d52:	f7fd fdff 	bl	8001954 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b64      	cmp	r3, #100	; 0x64
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e396      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d64:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x10e>
 8003d70:	e000      	b.n	8003d74 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80cb 	beq.w	8003f18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d82:	4b52      	ldr	r3, [pc, #328]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d8a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d007      	beq.n	8003da8 <HAL_RCC_OscConfig+0x164>
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	2b18      	cmp	r3, #24
 8003d9c:	d156      	bne.n	8003e4c <HAL_RCC_OscConfig+0x208>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d151      	bne.n	8003e4c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da8:	4b48      	ldr	r3, [pc, #288]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x17c>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e368      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003dc0:	4b42      	ldr	r3, [pc, #264]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 0219 	bic.w	r2, r3, #25
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	493f      	ldr	r1, [pc, #252]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dd2:	f7fd fdbf 	bl	8001954 <HAL_GetTick>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dda:	f7fd fdbb 	bl	8001954 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e352      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dec:	4b37      	ldr	r3, [pc, #220]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df8:	f7fd fddc 	bl	80019b4 <HAL_GetREVID>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d817      	bhi.n	8003e36 <HAL_RCC_OscConfig+0x1f2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b40      	cmp	r3, #64	; 0x40
 8003e0c:	d108      	bne.n	8003e20 <HAL_RCC_OscConfig+0x1dc>
 8003e0e:	4b2f      	ldr	r3, [pc, #188]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003e16:	4a2d      	ldr	r2, [pc, #180]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e1e:	e07b      	b.n	8003f18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	031b      	lsls	r3, r3, #12
 8003e2e:	4927      	ldr	r1, [pc, #156]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e34:	e070      	b.n	8003f18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e36:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	061b      	lsls	r3, r3, #24
 8003e44:	4921      	ldr	r1, [pc, #132]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e4a:	e065      	b.n	8003f18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d048      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e54:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f023 0219 	bic.w	r2, r3, #25
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	491a      	ldr	r1, [pc, #104]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fd fd75 	bl	8001954 <HAL_GetTick>
 8003e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fd fd71 	bl	8001954 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e308      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	f7fd fd92 	bl	80019b4 <HAL_GetREVID>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d81a      	bhi.n	8003ed0 <HAL_RCC_OscConfig+0x28c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d108      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x270>
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003eaa:	4a08      	ldr	r2, [pc, #32]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb0:	6053      	str	r3, [r2, #4]
 8003eb2:	e031      	b.n	8003f18 <HAL_RCC_OscConfig+0x2d4>
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	031b      	lsls	r3, r3, #12
 8003ec2:	4902      	ldr	r1, [pc, #8]	; (8003ecc <HAL_RCC_OscConfig+0x288>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
 8003ec8:	e026      	b.n	8003f18 <HAL_RCC_OscConfig+0x2d4>
 8003eca:	bf00      	nop
 8003ecc:	58024400 	.word	0x58024400
 8003ed0:	4b9a      	ldr	r3, [pc, #616]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	4997      	ldr	r1, [pc, #604]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]
 8003ee4:	e018      	b.n	8003f18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee6:	4b95      	ldr	r3, [pc, #596]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a94      	ldr	r2, [pc, #592]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fd fd2f 	bl	8001954 <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003efa:	f7fd fd2b 	bl	8001954 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e2c2      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f0c:	4b8b      	ldr	r3, [pc, #556]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80a9 	beq.w	8004078 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f26:	4b85      	ldr	r3, [pc, #532]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f30:	4b82      	ldr	r3, [pc, #520]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d007      	beq.n	8003f4c <HAL_RCC_OscConfig+0x308>
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b18      	cmp	r3, #24
 8003f40:	d13a      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x374>
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d135      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f4c:	4b7b      	ldr	r3, [pc, #492]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_OscConfig+0x320>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	2b80      	cmp	r3, #128	; 0x80
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e296      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f64:	f7fd fd26 	bl	80019b4 <HAL_GetREVID>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d817      	bhi.n	8003fa2 <HAL_RCC_OscConfig+0x35e>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d108      	bne.n	8003f8c <HAL_RCC_OscConfig+0x348>
 8003f7a:	4b70      	ldr	r3, [pc, #448]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f82:	4a6e      	ldr	r2, [pc, #440]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003f84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f88:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f8a:	e075      	b.n	8004078 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f8c:	4b6b      	ldr	r3, [pc, #428]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	069b      	lsls	r3, r3, #26
 8003f9a:	4968      	ldr	r1, [pc, #416]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fa0:	e06a      	b.n	8004078 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fa2:	4b66      	ldr	r3, [pc, #408]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	061b      	lsls	r3, r3, #24
 8003fb0:	4962      	ldr	r1, [pc, #392]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fb6:	e05f      	b.n	8004078 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d042      	beq.n	8004046 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003fc0:	4b5e      	ldr	r3, [pc, #376]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a5d      	ldr	r2, [pc, #372]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fd fcc2 	bl	8001954 <HAL_GetTick>
 8003fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003fd4:	f7fd fcbe 	bl	8001954 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e255      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fe6:	4b55      	ldr	r3, [pc, #340]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ff2:	f7fd fcdf 	bl	80019b4 <HAL_GetREVID>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d817      	bhi.n	8004030 <HAL_RCC_OscConfig+0x3ec>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	2b20      	cmp	r3, #32
 8004006:	d108      	bne.n	800401a <HAL_RCC_OscConfig+0x3d6>
 8004008:	4b4c      	ldr	r3, [pc, #304]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004010:	4a4a      	ldr	r2, [pc, #296]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8004012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004016:	6053      	str	r3, [r2, #4]
 8004018:	e02e      	b.n	8004078 <HAL_RCC_OscConfig+0x434>
 800401a:	4b48      	ldr	r3, [pc, #288]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	069b      	lsls	r3, r3, #26
 8004028:	4944      	ldr	r1, [pc, #272]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
 800402e:	e023      	b.n	8004078 <HAL_RCC_OscConfig+0x434>
 8004030:	4b42      	ldr	r3, [pc, #264]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	061b      	lsls	r3, r3, #24
 800403e:	493f      	ldr	r1, [pc, #252]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8004040:	4313      	orrs	r3, r2
 8004042:	60cb      	str	r3, [r1, #12]
 8004044:	e018      	b.n	8004078 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004046:	4b3d      	ldr	r3, [pc, #244]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3c      	ldr	r2, [pc, #240]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 800404c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fd fc7f 	bl	8001954 <HAL_GetTick>
 8004056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800405a:	f7fd fc7b 	bl	8001954 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e212      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800406c:	4b33      	ldr	r3, [pc, #204]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f0      	bne.n	800405a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d036      	beq.n	80040f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d019      	beq.n	80040c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800408c:	4b2b      	ldr	r3, [pc, #172]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 800408e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004090:	4a2a      	ldr	r2, [pc, #168]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fd fc5c 	bl	8001954 <HAL_GetTick>
 800409c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040a0:	f7fd fc58 	bl	8001954 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e1ef      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040b2:	4b22      	ldr	r3, [pc, #136]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 80040b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x45c>
 80040be:	e018      	b.n	80040f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c0:	4b1e      	ldr	r3, [pc, #120]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 80040c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c4:	4a1d      	ldr	r2, [pc, #116]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040cc:	f7fd fc42 	bl	8001954 <HAL_GetTick>
 80040d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d4:	f7fd fc3e 	bl	8001954 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e1d5      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 80040e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d039      	beq.n	8004172 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01c      	beq.n	8004140 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004106:	4b0d      	ldr	r3, [pc, #52]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a0c      	ldr	r2, [pc, #48]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 800410c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004110:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004112:	f7fd fc1f 	bl	8001954 <HAL_GetTick>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800411a:	f7fd fc1b 	bl	8001954 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e1b2      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <HAL_RCC_OscConfig+0x4f8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x4d6>
 8004138:	e01b      	b.n	8004172 <HAL_RCC_OscConfig+0x52e>
 800413a:	bf00      	nop
 800413c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004140:	4b9b      	ldr	r3, [pc, #620]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a9a      	ldr	r2, [pc, #616]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800414a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800414c:	f7fd fc02 	bl	8001954 <HAL_GetTick>
 8004150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004154:	f7fd fbfe 	bl	8001954 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e195      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004166:	4b92      	ldr	r3, [pc, #584]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8081 	beq.w	8004282 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004180:	4b8c      	ldr	r3, [pc, #560]	; (80043b4 <HAL_RCC_OscConfig+0x770>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a8b      	ldr	r2, [pc, #556]	; (80043b4 <HAL_RCC_OscConfig+0x770>)
 8004186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800418c:	f7fd fbe2 	bl	8001954 <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004194:	f7fd fbde 	bl	8001954 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	; 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e175      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041a6:	4b83      	ldr	r3, [pc, #524]	; (80043b4 <HAL_RCC_OscConfig+0x770>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d106      	bne.n	80041c8 <HAL_RCC_OscConfig+0x584>
 80041ba:	4b7d      	ldr	r3, [pc, #500]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	4a7c      	ldr	r2, [pc, #496]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	6713      	str	r3, [r2, #112]	; 0x70
 80041c6:	e02d      	b.n	8004224 <HAL_RCC_OscConfig+0x5e0>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10c      	bne.n	80041ea <HAL_RCC_OscConfig+0x5a6>
 80041d0:	4b77      	ldr	r3, [pc, #476]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d4:	4a76      	ldr	r2, [pc, #472]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	6713      	str	r3, [r2, #112]	; 0x70
 80041dc:	4b74      	ldr	r3, [pc, #464]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	4a73      	ldr	r2, [pc, #460]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80041e2:	f023 0304 	bic.w	r3, r3, #4
 80041e6:	6713      	str	r3, [r2, #112]	; 0x70
 80041e8:	e01c      	b.n	8004224 <HAL_RCC_OscConfig+0x5e0>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b05      	cmp	r3, #5
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0x5c8>
 80041f2:	4b6f      	ldr	r3, [pc, #444]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80041f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f6:	4a6e      	ldr	r2, [pc, #440]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80041f8:	f043 0304 	orr.w	r3, r3, #4
 80041fc:	6713      	str	r3, [r2, #112]	; 0x70
 80041fe:	4b6c      	ldr	r3, [pc, #432]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	4a6b      	ldr	r2, [pc, #428]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6713      	str	r3, [r2, #112]	; 0x70
 800420a:	e00b      	b.n	8004224 <HAL_RCC_OscConfig+0x5e0>
 800420c:	4b68      	ldr	r3, [pc, #416]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	4a67      	ldr	r2, [pc, #412]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	6713      	str	r3, [r2, #112]	; 0x70
 8004218:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	4a64      	ldr	r2, [pc, #400]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 800421e:	f023 0304 	bic.w	r3, r3, #4
 8004222:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d015      	beq.n	8004258 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fd fb92 	bl	8001954 <HAL_GetTick>
 8004230:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004232:	e00a      	b.n	800424a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004234:	f7fd fb8e 	bl	8001954 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e123      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800424a:	4b59      	ldr	r3, [pc, #356]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0ee      	beq.n	8004234 <HAL_RCC_OscConfig+0x5f0>
 8004256:	e014      	b.n	8004282 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fd fb7c 	bl	8001954 <HAL_GetTick>
 800425c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800425e:	e00a      	b.n	8004276 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004260:	f7fd fb78 	bl	8001954 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	; 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e10d      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004276:	4b4e      	ldr	r3, [pc, #312]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1ee      	bne.n	8004260 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8102 	beq.w	8004490 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800428c:	4b48      	ldr	r3, [pc, #288]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004294:	2b18      	cmp	r3, #24
 8004296:	f000 80bd 	beq.w	8004414 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	2b02      	cmp	r3, #2
 80042a0:	f040 809e 	bne.w	80043e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a4:	4b42      	ldr	r3, [pc, #264]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a41      	ldr	r2, [pc, #260]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80042aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fd fb50 	bl	8001954 <HAL_GetTick>
 80042b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b8:	f7fd fb4c 	bl	8001954 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0e3      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042ca:	4b39      	ldr	r3, [pc, #228]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d6:	4b36      	ldr	r3, [pc, #216]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80042d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042da:	4b37      	ldr	r3, [pc, #220]	; (80043b8 <HAL_RCC_OscConfig+0x774>)
 80042dc:	4013      	ands	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042e6:	0112      	lsls	r2, r2, #4
 80042e8:	430a      	orrs	r2, r1
 80042ea:	4931      	ldr	r1, [pc, #196]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	628b      	str	r3, [r1, #40]	; 0x28
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	3b01      	subs	r3, #1
 80042f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	3b01      	subs	r3, #1
 8004300:	025b      	lsls	r3, r3, #9
 8004302:	b29b      	uxth	r3, r3
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	3b01      	subs	r3, #1
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	3b01      	subs	r3, #1
 800431a:	061b      	lsls	r3, r3, #24
 800431c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004320:	4923      	ldr	r1, [pc, #140]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004332:	4b1f      	ldr	r3, [pc, #124]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004336:	4b21      	ldr	r3, [pc, #132]	; (80043bc <HAL_RCC_OscConfig+0x778>)
 8004338:	4013      	ands	r3, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800433e:	00d2      	lsls	r2, r2, #3
 8004340:	491b      	ldr	r1, [pc, #108]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004342:	4313      	orrs	r3, r2
 8004344:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004346:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	f023 020c 	bic.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	4917      	ldr	r1, [pc, #92]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004354:	4313      	orrs	r3, r2
 8004356:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004358:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	f023 0202 	bic.w	r2, r3, #2
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	4912      	ldr	r1, [pc, #72]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004366:	4313      	orrs	r3, r2
 8004368:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	4a10      	ldr	r2, [pc, #64]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004374:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004376:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 800437c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004380:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800438c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <HAL_RCC_OscConfig+0x76c>)
 80043a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fd fad5 	bl	8001954 <HAL_GetTick>
 80043aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043ac:	e011      	b.n	80043d2 <HAL_RCC_OscConfig+0x78e>
 80043ae:	bf00      	nop
 80043b0:	58024400 	.word	0x58024400
 80043b4:	58024800 	.word	0x58024800
 80043b8:	fffffc0c 	.word	0xfffffc0c
 80043bc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fd fac8 	bl	8001954 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e05f      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043d2:	4b32      	ldr	r3, [pc, #200]	; (800449c <HAL_RCC_OscConfig+0x858>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x77c>
 80043de:	e057      	b.n	8004490 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e0:	4b2e      	ldr	r3, [pc, #184]	; (800449c <HAL_RCC_OscConfig+0x858>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a2d      	ldr	r2, [pc, #180]	; (800449c <HAL_RCC_OscConfig+0x858>)
 80043e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd fab2 	bl	8001954 <HAL_GetTick>
 80043f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fd faae 	bl	8001954 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e045      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004406:	4b25      	ldr	r3, [pc, #148]	; (800449c <HAL_RCC_OscConfig+0x858>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x7b0>
 8004412:	e03d      	b.n	8004490 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004414:	4b21      	ldr	r3, [pc, #132]	; (800449c <HAL_RCC_OscConfig+0x858>)
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800441a:	4b20      	ldr	r3, [pc, #128]	; (800449c <HAL_RCC_OscConfig+0x858>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	2b01      	cmp	r3, #1
 8004426:	d031      	beq.n	800448c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f003 0203 	and.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d12a      	bne.n	800448c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d122      	bne.n	800448c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d11a      	bne.n	800448c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	0a5b      	lsrs	r3, r3, #9
 800445a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004462:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d111      	bne.n	800448c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	0c1b      	lsrs	r3, r3, #16
 800446c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d108      	bne.n	800448c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	0e1b      	lsrs	r3, r3, #24
 800447e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3730      	adds	r7, #48	; 0x30
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	58024400 	.word	0x58024400

080044a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e19c      	b.n	80047ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b4:	4b8a      	ldr	r3, [pc, #552]	; (80046e0 <HAL_RCC_ClockConfig+0x240>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d910      	bls.n	80044e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b87      	ldr	r3, [pc, #540]	; (80046e0 <HAL_RCC_ClockConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 020f 	bic.w	r2, r3, #15
 80044ca:	4985      	ldr	r1, [pc, #532]	; (80046e0 <HAL_RCC_ClockConfig+0x240>)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	4b83      	ldr	r3, [pc, #524]	; (80046e0 <HAL_RCC_ClockConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d001      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e184      	b.n	80047ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d010      	beq.n	8004512 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	4b7b      	ldr	r3, [pc, #492]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d908      	bls.n	8004512 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004500:	4b78      	ldr	r3, [pc, #480]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	4975      	ldr	r1, [pc, #468]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 800450e:	4313      	orrs	r3, r2
 8004510:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d010      	beq.n	8004540 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	4b70      	ldr	r3, [pc, #448]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800452a:	429a      	cmp	r2, r3
 800452c:	d908      	bls.n	8004540 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800452e:	4b6d      	ldr	r3, [pc, #436]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	496a      	ldr	r1, [pc, #424]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 800453c:	4313      	orrs	r3, r2
 800453e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d010      	beq.n	800456e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	4b64      	ldr	r3, [pc, #400]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004558:	429a      	cmp	r2, r3
 800455a:	d908      	bls.n	800456e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800455c:	4b61      	ldr	r3, [pc, #388]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	495e      	ldr	r1, [pc, #376]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 800456a:	4313      	orrs	r3, r2
 800456c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	4b59      	ldr	r3, [pc, #356]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004586:	429a      	cmp	r2, r3
 8004588:	d908      	bls.n	800459c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800458a:	4b56      	ldr	r3, [pc, #344]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	4953      	ldr	r1, [pc, #332]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 8004598:	4313      	orrs	r3, r2
 800459a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d010      	beq.n	80045ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	4b4d      	ldr	r3, [pc, #308]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d908      	bls.n	80045ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b8:	4b4a      	ldr	r3, [pc, #296]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f023 020f 	bic.w	r2, r3, #15
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4947      	ldr	r1, [pc, #284]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d055      	beq.n	8004682 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80045d6:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	4940      	ldr	r1, [pc, #256]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045f0:	4b3c      	ldr	r3, [pc, #240]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d121      	bne.n	8004640 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0f6      	b.n	80047ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d107      	bne.n	8004618 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004608:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d115      	bne.n	8004640 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0ea      	b.n	80047ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d107      	bne.n	8004630 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004620:	4b30      	ldr	r3, [pc, #192]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e0de      	b.n	80047ee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004630:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0d6      	b.n	80047ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f023 0207 	bic.w	r2, r3, #7
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4925      	ldr	r1, [pc, #148]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 800464e:	4313      	orrs	r3, r2
 8004650:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004652:	f7fd f97f 	bl	8001954 <HAL_GetTick>
 8004656:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004658:	e00a      	b.n	8004670 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465a:	f7fd f97b 	bl	8001954 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e0be      	b.n	80047ee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004670:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	429a      	cmp	r2, r3
 8004680:	d1eb      	bne.n	800465a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d010      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	429a      	cmp	r2, r3
 800469c:	d208      	bcs.n	80046b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800469e:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f023 020f 	bic.w	r2, r3, #15
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	490e      	ldr	r1, [pc, #56]	; (80046e4 <HAL_RCC_ClockConfig+0x244>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_ClockConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d214      	bcs.n	80046e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <HAL_RCC_ClockConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 020f 	bic.w	r2, r3, #15
 80046c6:	4906      	ldr	r1, [pc, #24]	; (80046e0 <HAL_RCC_ClockConfig+0x240>)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ce:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <HAL_RCC_ClockConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e086      	b.n	80047ee <HAL_RCC_ClockConfig+0x34e>
 80046e0:	52002000 	.word	0x52002000
 80046e4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d010      	beq.n	8004716 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004700:	429a      	cmp	r2, r3
 8004702:	d208      	bcs.n	8004716 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004704:	4b3c      	ldr	r3, [pc, #240]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	4939      	ldr	r1, [pc, #228]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 8004712:	4313      	orrs	r3, r2
 8004714:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d010      	beq.n	8004744 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800472e:	429a      	cmp	r2, r3
 8004730:	d208      	bcs.n	8004744 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004732:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	492e      	ldr	r1, [pc, #184]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 8004740:	4313      	orrs	r3, r2
 8004742:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b00      	cmp	r3, #0
 800474e:	d010      	beq.n	8004772 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800475c:	429a      	cmp	r2, r3
 800475e:	d208      	bcs.n	8004772 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004760:	4b25      	ldr	r3, [pc, #148]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	4922      	ldr	r1, [pc, #136]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 800476e:	4313      	orrs	r3, r2
 8004770:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d010      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800478a:	429a      	cmp	r2, r3
 800478c:	d208      	bcs.n	80047a0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800478e:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4917      	ldr	r1, [pc, #92]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 800479c:	4313      	orrs	r3, r2
 800479e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80047a0:	f000 f834 	bl	800480c <HAL_RCC_GetSysClockFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	4912      	ldr	r1, [pc, #72]	; (80047fc <HAL_RCC_ClockConfig+0x35c>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
 80047bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047be:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <HAL_RCC_ClockConfig+0x358>)
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	4a0d      	ldr	r2, [pc, #52]	; (80047fc <HAL_RCC_ClockConfig+0x35c>)
 80047c8:	5cd3      	ldrb	r3, [r2, r3]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
 80047d4:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <HAL_RCC_ClockConfig+0x360>)
 80047d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047d8:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <HAL_RCC_ClockConfig+0x364>)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <HAL_RCC_ClockConfig+0x368>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fd f86c 	bl	80018c0 <HAL_InitTick>
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	58024400 	.word	0x58024400
 80047fc:	0800c354 	.word	0x0800c354
 8004800:	24000004 	.word	0x24000004
 8004804:	24000000 	.word	0x24000000
 8004808:	24000008 	.word	0x24000008

0800480c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	; 0x24
 8004810:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004812:	4bb3      	ldr	r3, [pc, #716]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800481a:	2b18      	cmp	r3, #24
 800481c:	f200 8155 	bhi.w	8004aca <HAL_RCC_GetSysClockFreq+0x2be>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	0800488d 	.word	0x0800488d
 800482c:	08004acb 	.word	0x08004acb
 8004830:	08004acb 	.word	0x08004acb
 8004834:	08004acb 	.word	0x08004acb
 8004838:	08004acb 	.word	0x08004acb
 800483c:	08004acb 	.word	0x08004acb
 8004840:	08004acb 	.word	0x08004acb
 8004844:	08004acb 	.word	0x08004acb
 8004848:	080048b3 	.word	0x080048b3
 800484c:	08004acb 	.word	0x08004acb
 8004850:	08004acb 	.word	0x08004acb
 8004854:	08004acb 	.word	0x08004acb
 8004858:	08004acb 	.word	0x08004acb
 800485c:	08004acb 	.word	0x08004acb
 8004860:	08004acb 	.word	0x08004acb
 8004864:	08004acb 	.word	0x08004acb
 8004868:	080048b9 	.word	0x080048b9
 800486c:	08004acb 	.word	0x08004acb
 8004870:	08004acb 	.word	0x08004acb
 8004874:	08004acb 	.word	0x08004acb
 8004878:	08004acb 	.word	0x08004acb
 800487c:	08004acb 	.word	0x08004acb
 8004880:	08004acb 	.word	0x08004acb
 8004884:	08004acb 	.word	0x08004acb
 8004888:	080048bf 	.word	0x080048bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800488c:	4b94      	ldr	r3, [pc, #592]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004898:	4b91      	ldr	r3, [pc, #580]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	08db      	lsrs	r3, r3, #3
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	4a90      	ldr	r2, [pc, #576]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80048aa:	e111      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80048ac:	4b8d      	ldr	r3, [pc, #564]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048ae:	61bb      	str	r3, [r7, #24]
    break;
 80048b0:	e10e      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80048b2:	4b8d      	ldr	r3, [pc, #564]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048b4:	61bb      	str	r3, [r7, #24]
    break;
 80048b6:	e10b      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80048b8:	4b8c      	ldr	r3, [pc, #560]	; (8004aec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80048ba:	61bb      	str	r3, [r7, #24]
    break;
 80048bc:	e108      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048be:	4b88      	ldr	r3, [pc, #544]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80048c8:	4b85      	ldr	r3, [pc, #532]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80048d4:	4b82      	ldr	r3, [pc, #520]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80048de:	4b80      	ldr	r3, [pc, #512]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e2:	08db      	lsrs	r3, r3, #3
 80048e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80e1 	beq.w	8004ac4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b02      	cmp	r3, #2
 8004906:	f000 8083 	beq.w	8004a10 <HAL_RCC_GetSysClockFreq+0x204>
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b02      	cmp	r3, #2
 800490e:	f200 80a1 	bhi.w	8004a54 <HAL_RCC_GetSysClockFreq+0x248>
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0x114>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d056      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800491e:	e099      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004920:	4b6f      	ldr	r3, [pc, #444]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d02d      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800492c:	4b6c      	ldr	r3, [pc, #432]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	08db      	lsrs	r3, r3, #3
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	4a6b      	ldr	r2, [pc, #428]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004938:	fa22 f303 	lsr.w	r3, r2, r3
 800493c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	ee07 3a90 	vmov	s15, r3
 8004944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004956:	4b62      	ldr	r3, [pc, #392]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004966:	ed97 6a02 	vldr	s12, [r7, #8]
 800496a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004af0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800496e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800497a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800497e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004982:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004986:	e087      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004af4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499a:	4b51      	ldr	r3, [pc, #324]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004af0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ca:	e065      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004af8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80049da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049de:	4b40      	ldr	r3, [pc, #256]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80049f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004af0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a0e:	e043      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004afc <HAL_RCC_GetSysClockFreq+0x2f0>
 8004a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a22:	4b2f      	ldr	r3, [pc, #188]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a36:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004af0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a52:	e021      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004af8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	4b1e      	ldr	r3, [pc, #120]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a7a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004af0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a96:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004a98:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	0a5b      	lsrs	r3, r3, #9
 8004a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004abc:	ee17 3a90 	vmov	r3, s15
 8004ac0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004ac2:	e005      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61bb      	str	r3, [r7, #24]
    break;
 8004ac8:	e002      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004aca:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004acc:	61bb      	str	r3, [r7, #24]
    break;
 8004ace:	bf00      	nop
  }

  return sysclockfreq;
 8004ad0:	69bb      	ldr	r3, [r7, #24]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3724      	adds	r7, #36	; 0x24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	58024400 	.word	0x58024400
 8004ae4:	03d09000 	.word	0x03d09000
 8004ae8:	003d0900 	.word	0x003d0900
 8004aec:	007a1200 	.word	0x007a1200
 8004af0:	46000000 	.word	0x46000000
 8004af4:	4c742400 	.word	0x4c742400
 8004af8:	4a742400 	.word	0x4a742400
 8004afc:	4af42400 	.word	0x4af42400

08004b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b06:	f7ff fe81 	bl	800480c <HAL_RCC_GetSysClockFreq>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	490f      	ldr	r1, [pc, #60]	; (8004b54 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b18:	5ccb      	ldrb	r3, [r1, r3]
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b22:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b24:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	4a09      	ldr	r2, [pc, #36]	; (8004b54 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b2e:	5cd3      	ldrb	r3, [r2, r3]
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3a:	4a07      	ldr	r2, [pc, #28]	; (8004b58 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b3c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b3e:	4a07      	ldr	r2, [pc, #28]	; (8004b5c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b46:	681b      	ldr	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	58024400 	.word	0x58024400
 8004b54:	0800c354 	.word	0x0800c354
 8004b58:	24000004 	.word	0x24000004
 8004b5c:	24000000 	.word	0x24000000

08004b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004b64:	f7ff ffcc 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	091b      	lsrs	r3, r3, #4
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4904      	ldr	r1, [pc, #16]	; (8004b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b76:	5ccb      	ldrb	r3, [r1, r3]
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	58024400 	.word	0x58024400
 8004b88:	0800c354 	.word	0x0800c354

08004b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004b90:	f7ff ffb6 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	4904      	ldr	r1, [pc, #16]	; (8004bb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ba2:	5ccb      	ldrb	r3, [r1, r3]
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	0800c354 	.word	0x0800c354

08004bb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d03f      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bdc:	d02a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004bde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004be2:	d824      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004be4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004be8:	d018      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bee:	d81e      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf8:	d007      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004bfa:	e018      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bfc:	4ba3      	ldr	r3, [pc, #652]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	4aa2      	ldr	r2, [pc, #648]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c08:	e015      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	2102      	movs	r1, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 f9d5 	bl	8005fc0 <RCCEx_PLL2_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c1a:	e00c      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3324      	adds	r3, #36	; 0x24
 8004c20:	2102      	movs	r1, #2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f001 fa7e 	bl	8006124 <RCCEx_PLL3_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c2c:	e003      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	75fb      	strb	r3, [r7, #23]
      break;
 8004c32:	e000      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c3c:	4b93      	ldr	r3, [pc, #588]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c48:	4990      	ldr	r1, [pc, #576]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	650b      	str	r3, [r1, #80]	; 0x50
 8004c4e:	e001      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
 8004c52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d03d      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d826      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004c85 	.word	0x08004c85
 8004c74:	08004c93 	.word	0x08004c93
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	08004cbd 	.word	0x08004cbd
 8004c80:	08004cbd 	.word	0x08004cbd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c84:	4b81      	ldr	r3, [pc, #516]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	4a80      	ldr	r2, [pc, #512]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c90:	e015      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	2100      	movs	r1, #0
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f001 f991 	bl	8005fc0 <RCCEx_PLL2_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ca2:	e00c      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3324      	adds	r3, #36	; 0x24
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f001 fa3a 	bl	8006124 <RCCEx_PLL3_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cb4:	e003      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cba:	e000      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cc4:	4b71      	ldr	r3, [pc, #452]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc8:	f023 0207 	bic.w	r2, r3, #7
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	496e      	ldr	r1, [pc, #440]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	650b      	str	r3, [r1, #80]	; 0x50
 8004cd6:	e001      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
 8004cda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d042      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf0:	d02b      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf6:	d825      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004cf8:	2bc0      	cmp	r3, #192	; 0xc0
 8004cfa:	d028      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cfc:	2bc0      	cmp	r3, #192	; 0xc0
 8004cfe:	d821      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d016      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d81d      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d007      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004d10:	e018      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d12:	4b5e      	ldr	r3, [pc, #376]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	4a5d      	ldr	r2, [pc, #372]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d1e:	e017      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3304      	adds	r3, #4
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 f94a 	bl	8005fc0 <RCCEx_PLL2_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d30:	e00e      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3324      	adds	r3, #36	; 0x24
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f001 f9f3 	bl	8006124 <RCCEx_PLL3_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d42:	e005      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	75fb      	strb	r3, [r7, #23]
      break;
 8004d48:	e002      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e000      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d56:	4b4d      	ldr	r3, [pc, #308]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	494a      	ldr	r1, [pc, #296]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	650b      	str	r3, [r1, #80]	; 0x50
 8004d68:	e001      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d049      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d84:	d030      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004d86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d8a:	d82a      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004d8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d90:	d02c      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004d92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d96:	d824      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9c:	d018      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da2:	d81e      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dac:	d007      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004dae:	e018      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db0:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4a35      	ldr	r2, [pc, #212]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dbc:	e017      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 f8fb 	bl	8005fc0 <RCCEx_PLL2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004dce:	e00e      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3324      	adds	r3, #36	; 0x24
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 f9a4 	bl	8006124 <RCCEx_PLL3_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004de0:	e005      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
      break;
 8004de6:	e002      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004de8:	bf00      	nop
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e02:	4922      	ldr	r1, [pc, #136]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	658b      	str	r3, [r1, #88]	; 0x58
 8004e08:	e001      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d04b      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e24:	d030      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004e26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e2a:	d82a      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e30:	d02e      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004e32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e36:	d824      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e3c:	d018      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e42:	d81e      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e4c:	d007      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004e4e:	e018      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e50:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	4a0d      	ldr	r2, [pc, #52]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e5c:	e019      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2100      	movs	r1, #0
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 f8ab 	bl	8005fc0 <RCCEx_PLL2_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e6e:	e010      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3324      	adds	r3, #36	; 0x24
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 f954 	bl	8006124 <RCCEx_PLL3_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e80:	e007      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
      break;
 8004e86:	e004      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004e88:	bf00      	nop
 8004e8a:	e002      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004e8c:	58024400 	.word	0x58024400
      break;
 8004e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004e98:	4b99      	ldr	r3, [pc, #612]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ea6:	4996      	ldr	r1, [pc, #600]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	658b      	str	r3, [r1, #88]	; 0x58
 8004eac:	e001      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
 8004eb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d032      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec2:	2b30      	cmp	r3, #48	; 0x30
 8004ec4:	d01c      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004ec6:	2b30      	cmp	r3, #48	; 0x30
 8004ec8:	d817      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d813      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d10f      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eda:	4b89      	ldr	r3, [pc, #548]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	4a88      	ldr	r2, [pc, #544]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ee6:	e00e      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3304      	adds	r3, #4
 8004eec:	2102      	movs	r1, #2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 f866 	bl	8005fc0 <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ef8:	e005      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75fb      	strb	r3, [r7, #23]
      break;
 8004efe:	e002      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004f00:	bf00      	nop
 8004f02:	e000      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d109      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f0c:	4b7c      	ldr	r3, [pc, #496]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f18:	4979      	ldr	r1, [pc, #484]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f1e:	e001      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
 8004f22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d047      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f38:	d030      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f3e:	d82a      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004f40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f44:	d02c      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004f46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f4a:	d824      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f50:	d018      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f56:	d81e      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f60:	d007      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004f62:	e018      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f64:	4b66      	ldr	r3, [pc, #408]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	4a65      	ldr	r2, [pc, #404]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f70:	e017      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3304      	adds	r3, #4
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f001 f821 	bl	8005fc0 <RCCEx_PLL2_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f82:	e00e      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3324      	adds	r3, #36	; 0x24
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 f8ca 	bl	8006124 <RCCEx_PLL3_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f94:	e005      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	75fb      	strb	r3, [r7, #23]
      break;
 8004f9a:	e002      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004f9c:	bf00      	nop
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004fa8:	4b55      	ldr	r3, [pc, #340]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb4:	4952      	ldr	r1, [pc, #328]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	650b      	str	r3, [r1, #80]	; 0x50
 8004fba:	e001      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d049      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fd4:	d02e      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fda:	d828      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004fdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fe0:	d02a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004fe2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fe6:	d822      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004fe8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fec:	d026      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004fee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ff2:	d81c      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ff8:	d010      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ffe:	d816      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01d      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005008:	d111      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3304      	adds	r3, #4
 800500e:	2101      	movs	r1, #1
 8005010:	4618      	mov	r0, r3
 8005012:	f000 ffd5 	bl	8005fc0 <RCCEx_PLL2_Config>
 8005016:	4603      	mov	r3, r0
 8005018:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800501a:	e012      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3324      	adds	r3, #36	; 0x24
 8005020:	2101      	movs	r1, #1
 8005022:	4618      	mov	r0, r3
 8005024:	f001 f87e 	bl	8006124 <RCCEx_PLL3_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800502c:	e009      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]
      break;
 8005032:	e006      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005034:	bf00      	nop
 8005036:	e004      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005038:	bf00      	nop
 800503a:	e002      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005042:	7dfb      	ldrb	r3, [r7, #23]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005048:	4b2d      	ldr	r3, [pc, #180]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800504a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005054:	492a      	ldr	r1, [pc, #168]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005056:	4313      	orrs	r3, r2
 8005058:	650b      	str	r3, [r1, #80]	; 0x50
 800505a:	e001      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d04d      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005076:	d02e      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800507c:	d828      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005082:	d02a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d822      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800508a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800508e:	d026      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005090:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005094:	d81c      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509a:	d010      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x506>
 800509c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a0:	d816      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01d      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80050a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050aa:	d111      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	2101      	movs	r1, #1
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 ff84 	bl	8005fc0 <RCCEx_PLL2_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80050bc:	e012      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3324      	adds	r3, #36	; 0x24
 80050c2:	2101      	movs	r1, #1
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 f82d 	bl	8006124 <RCCEx_PLL3_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80050ce:	e009      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	75fb      	strb	r3, [r7, #23]
      break;
 80050d4:	e006      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80050d6:	bf00      	nop
 80050d8:	e004      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80050da:	bf00      	nop
 80050dc:	e002      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80050e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10c      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050f8:	4901      	ldr	r1, [pc, #4]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	658b      	str	r3, [r1, #88]	; 0x58
 80050fe:	e003      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005100:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d02f      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511c:	d00e      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800511e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005122:	d814      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d015      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800512c:	d10f      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800512e:	4baf      	ldr	r3, [pc, #700]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	4aae      	ldr	r2, [pc, #696]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005138:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800513a:	e00c      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f000 ff3c 	bl	8005fc0 <RCCEx_PLL2_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800514c:	e003      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	75fb      	strb	r3, [r7, #23]
      break;
 8005152:	e000      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005156:	7dfb      	ldrb	r3, [r7, #23]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d109      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800515c:	4ba3      	ldr	r3, [pc, #652]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800515e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005160:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005168:	49a0      	ldr	r1, [pc, #640]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800516a:	4313      	orrs	r3, r2
 800516c:	650b      	str	r3, [r1, #80]	; 0x50
 800516e:	e001      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005170:	7dfb      	ldrb	r3, [r7, #23]
 8005172:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d032      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005184:	2b03      	cmp	r3, #3
 8005186:	d81b      	bhi.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005188:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	080051c7 	.word	0x080051c7
 8005194:	080051a1 	.word	0x080051a1
 8005198:	080051af 	.word	0x080051af
 800519c:	080051c7 	.word	0x080051c7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a0:	4b92      	ldr	r3, [pc, #584]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	4a91      	ldr	r2, [pc, #580]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051ac:	e00c      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	2102      	movs	r1, #2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 ff03 	bl	8005fc0 <RCCEx_PLL2_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051be:	e003      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	75fb      	strb	r3, [r7, #23]
      break;
 80051c4:	e000      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80051c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051ce:	4b87      	ldr	r3, [pc, #540]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d2:	f023 0203 	bic.w	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051da:	4984      	ldr	r1, [pc, #528]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80051e0:	e001      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 8086 	beq.w	8005300 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051f4:	4b7e      	ldr	r3, [pc, #504]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a7d      	ldr	r2, [pc, #500]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80051fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005200:	f7fc fba8 	bl	8001954 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005206:	e009      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005208:	f7fc fba4 	bl	8001954 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b64      	cmp	r3, #100	; 0x64
 8005214:	d902      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	75fb      	strb	r3, [r7, #23]
        break;
 800521a:	e005      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800521c:	4b74      	ldr	r3, [pc, #464]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0ef      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d166      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800522e:	4b6f      	ldr	r3, [pc, #444]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005230:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005238:	4053      	eors	r3, r2
 800523a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523e:	2b00      	cmp	r3, #0
 8005240:	d013      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005242:	4b6a      	ldr	r3, [pc, #424]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800524c:	4b67      	ldr	r3, [pc, #412]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4a66      	ldr	r2, [pc, #408]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005258:	4b64      	ldr	r3, [pc, #400]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	4a63      	ldr	r2, [pc, #396]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800525e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005262:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005264:	4a61      	ldr	r2, [pc, #388]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005274:	d115      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005276:	f7fc fb6d 	bl	8001954 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800527c:	e00b      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527e:	f7fc fb69 	bl	8001954 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f241 3288 	movw	r2, #5000	; 0x1388
 800528c:	4293      	cmp	r3, r2
 800528e:	d902      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	75fb      	strb	r3, [r7, #23]
            break;
 8005294:	e005      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005296:	4b55      	ldr	r3, [pc, #340]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0ed      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d126      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b6:	d10d      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80052b8:	4b4c      	ldr	r3, [pc, #304]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052c6:	0919      	lsrs	r1, r3, #4
 80052c8:	4b4a      	ldr	r3, [pc, #296]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80052ca:	400b      	ands	r3, r1
 80052cc:	4947      	ldr	r1, [pc, #284]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	610b      	str	r3, [r1, #16]
 80052d2:	e005      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80052d4:	4b45      	ldr	r3, [pc, #276]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	4a44      	ldr	r2, [pc, #272]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052de:	6113      	str	r3, [r2, #16]
 80052e0:	4b42      	ldr	r3, [pc, #264]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ee:	493f      	ldr	r1, [pc, #252]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	670b      	str	r3, [r1, #112]	; 0x70
 80052f4:	e004      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
 80052f8:	75bb      	strb	r3, [r7, #22]
 80052fa:	e001      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
 80052fe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8085 	beq.w	8005418 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005312:	2b28      	cmp	r3, #40	; 0x28
 8005314:	d866      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005316:	a201      	add	r2, pc, #4	; (adr r2, 800531c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	080053f9 	.word	0x080053f9
 8005320:	080053e5 	.word	0x080053e5
 8005324:	080053e5 	.word	0x080053e5
 8005328:	080053e5 	.word	0x080053e5
 800532c:	080053e5 	.word	0x080053e5
 8005330:	080053e5 	.word	0x080053e5
 8005334:	080053e5 	.word	0x080053e5
 8005338:	080053e5 	.word	0x080053e5
 800533c:	080053c1 	.word	0x080053c1
 8005340:	080053e5 	.word	0x080053e5
 8005344:	080053e5 	.word	0x080053e5
 8005348:	080053e5 	.word	0x080053e5
 800534c:	080053e5 	.word	0x080053e5
 8005350:	080053e5 	.word	0x080053e5
 8005354:	080053e5 	.word	0x080053e5
 8005358:	080053e5 	.word	0x080053e5
 800535c:	080053d3 	.word	0x080053d3
 8005360:	080053e5 	.word	0x080053e5
 8005364:	080053e5 	.word	0x080053e5
 8005368:	080053e5 	.word	0x080053e5
 800536c:	080053e5 	.word	0x080053e5
 8005370:	080053e5 	.word	0x080053e5
 8005374:	080053e5 	.word	0x080053e5
 8005378:	080053e5 	.word	0x080053e5
 800537c:	080053f9 	.word	0x080053f9
 8005380:	080053e5 	.word	0x080053e5
 8005384:	080053e5 	.word	0x080053e5
 8005388:	080053e5 	.word	0x080053e5
 800538c:	080053e5 	.word	0x080053e5
 8005390:	080053e5 	.word	0x080053e5
 8005394:	080053e5 	.word	0x080053e5
 8005398:	080053e5 	.word	0x080053e5
 800539c:	080053f9 	.word	0x080053f9
 80053a0:	080053e5 	.word	0x080053e5
 80053a4:	080053e5 	.word	0x080053e5
 80053a8:	080053e5 	.word	0x080053e5
 80053ac:	080053e5 	.word	0x080053e5
 80053b0:	080053e5 	.word	0x080053e5
 80053b4:	080053e5 	.word	0x080053e5
 80053b8:	080053e5 	.word	0x080053e5
 80053bc:	080053f9 	.word	0x080053f9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3304      	adds	r3, #4
 80053c4:	2101      	movs	r1, #1
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fdfa 	bl	8005fc0 <RCCEx_PLL2_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80053d0:	e013      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3324      	adds	r3, #36	; 0x24
 80053d6:	2101      	movs	r1, #1
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fea3 	bl	8006124 <RCCEx_PLL3_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80053e2:	e00a      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	75fb      	strb	r3, [r7, #23]
      break;
 80053e8:	e007      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 80053ea:	bf00      	nop
 80053ec:	58024400 	.word	0x58024400
 80053f0:	58024800 	.word	0x58024800
 80053f4:	00ffffcf 	.word	0x00ffffcf
      break;
 80053f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d109      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005400:	4b96      	ldr	r3, [pc, #600]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800540c:	4993      	ldr	r1, [pc, #588]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	654b      	str	r3, [r1, #84]	; 0x54
 8005412:	e001      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d038      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005428:	2b05      	cmp	r3, #5
 800542a:	d821      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005477 	.word	0x08005477
 8005438:	0800544d 	.word	0x0800544d
 800543c:	0800545f 	.word	0x0800545f
 8005440:	08005477 	.word	0x08005477
 8005444:	08005477 	.word	0x08005477
 8005448:	08005477 	.word	0x08005477
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	2101      	movs	r1, #1
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fdb4 	bl	8005fc0 <RCCEx_PLL2_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800545c:	e00c      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3324      	adds	r3, #36	; 0x24
 8005462:	2101      	movs	r1, #1
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fe5d 	bl	8006124 <RCCEx_PLL3_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800546e:	e003      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	75fb      	strb	r3, [r7, #23]
      break;
 8005474:	e000      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800547e:	4b77      	ldr	r3, [pc, #476]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	f023 0207 	bic.w	r2, r3, #7
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548a:	4974      	ldr	r1, [pc, #464]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800548c:	4313      	orrs	r3, r2
 800548e:	654b      	str	r3, [r1, #84]	; 0x54
 8005490:	e001      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d03a      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	d821      	bhi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80054ac:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054f7 	.word	0x080054f7
 80054b8:	080054cd 	.word	0x080054cd
 80054bc:	080054df 	.word	0x080054df
 80054c0:	080054f7 	.word	0x080054f7
 80054c4:	080054f7 	.word	0x080054f7
 80054c8:	080054f7 	.word	0x080054f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	2101      	movs	r1, #1
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fd74 	bl	8005fc0 <RCCEx_PLL2_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80054dc:	e00c      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3324      	adds	r3, #36	; 0x24
 80054e2:	2101      	movs	r1, #1
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fe1d 	bl	8006124 <RCCEx_PLL3_Config>
 80054ea:	4603      	mov	r3, r0
 80054ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80054ee:	e003      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	75fb      	strb	r3, [r7, #23]
      break;
 80054f4:	e000      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80054f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054fe:	4b57      	ldr	r3, [pc, #348]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005502:	f023 0207 	bic.w	r2, r3, #7
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550c:	4953      	ldr	r1, [pc, #332]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800550e:	4313      	orrs	r3, r2
 8005510:	658b      	str	r3, [r1, #88]	; 0x58
 8005512:	e001      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	d04b      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800552a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800552e:	d02e      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005534:	d828      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553a:	d02a      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005540:	d822      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005542:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005546:	d026      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005548:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800554c:	d81c      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800554e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005552:	d010      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005558:	d816      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01d      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800555e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005562:	d111      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fd28 	bl	8005fc0 <RCCEx_PLL2_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005574:	e012      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3324      	adds	r3, #36	; 0x24
 800557a:	2102      	movs	r1, #2
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fdd1 	bl	8006124 <RCCEx_PLL3_Config>
 8005582:	4603      	mov	r3, r0
 8005584:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005586:	e009      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	75fb      	strb	r3, [r7, #23]
      break;
 800558c:	e006      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800558e:	bf00      	nop
 8005590:	e004      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005592:	bf00      	nop
 8005594:	e002      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005596:	bf00      	nop
 8005598:	e000      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800559a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055a2:	4b2e      	ldr	r3, [pc, #184]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b0:	492a      	ldr	r1, [pc, #168]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	654b      	str	r3, [r1, #84]	; 0x54
 80055b6:	e001      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d04d      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055d2:	d02e      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80055d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055d8:	d828      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055de:	d02a      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80055e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e4:	d822      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80055e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ea:	d026      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80055ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f0:	d81c      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80055f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f6:	d010      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80055f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055fc:	d816      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01d      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005606:	d111      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fcd6 	bl	8005fc0 <RCCEx_PLL2_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005618:	e012      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3324      	adds	r3, #36	; 0x24
 800561e:	2102      	movs	r1, #2
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fd7f 	bl	8006124 <RCCEx_PLL3_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800562a:	e009      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	75fb      	strb	r3, [r7, #23]
      break;
 8005630:	e006      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005632:	bf00      	nop
 8005634:	e004      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005636:	bf00      	nop
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800563e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005640:	7dfb      	ldrb	r3, [r7, #23]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10c      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005654:	4901      	ldr	r1, [pc, #4]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005656:	4313      	orrs	r3, r2
 8005658:	658b      	str	r3, [r1, #88]	; 0x58
 800565a:	e003      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800565c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005660:	7dfb      	ldrb	r3, [r7, #23]
 8005662:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566c:	2b00      	cmp	r3, #0
 800566e:	d04b      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005676:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800567a:	d02e      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800567c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005680:	d828      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005686:	d02a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800568c:	d822      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800568e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005692:	d026      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005694:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005698:	d81c      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800569a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800569e:	d010      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80056a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056a4:	d816      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d01d      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80056aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ae:	d111      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fc82 	bl	8005fc0 <RCCEx_PLL2_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056c0:	e012      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3324      	adds	r3, #36	; 0x24
 80056c6:	2102      	movs	r1, #2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fd2b 	bl	8006124 <RCCEx_PLL3_Config>
 80056ce:	4603      	mov	r3, r0
 80056d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056d2:	e009      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	75fb      	strb	r3, [r7, #23]
      break;
 80056d8:	e006      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80056da:	bf00      	nop
 80056dc:	e004      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80056de:	bf00      	nop
 80056e0:	e002      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80056e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80056ee:	4b9d      	ldr	r3, [pc, #628]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056fc:	4999      	ldr	r1, [pc, #612]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	658b      	str	r3, [r1, #88]	; 0x58
 8005702:	e001      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005704:	7dfb      	ldrb	r3, [r7, #23]
 8005706:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800571a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571e:	d10a      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3324      	adds	r3, #36	; 0x24
 8005724:	2102      	movs	r1, #2
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fcfc 	bl	8006124 <RCCEx_PLL3_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005736:	4b8b      	ldr	r3, [pc, #556]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005744:	4987      	ldr	r1, [pc, #540]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005746:	4313      	orrs	r3, r2
 8005748:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800575c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005760:	d10a      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3324      	adds	r3, #36	; 0x24
 8005766:	2102      	movs	r1, #2
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fcdb 	bl	8006124 <RCCEx_PLL3_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005778:	4b7a      	ldr	r3, [pc, #488]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800577a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005786:	4977      	ldr	r1, [pc, #476]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005788:	4313      	orrs	r3, r2
 800578a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d034      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800579e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a2:	d01d      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80057a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a8:	d817      	bhi.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80057ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b2:	d009      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80057b4:	e011      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3304      	adds	r3, #4
 80057ba:	2100      	movs	r1, #0
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fbff 	bl	8005fc0 <RCCEx_PLL2_Config>
 80057c2:	4603      	mov	r3, r0
 80057c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057c6:	e00c      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3324      	adds	r3, #36	; 0x24
 80057cc:	2102      	movs	r1, #2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fca8 	bl	8006124 <RCCEx_PLL3_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057d8:	e003      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	75fb      	strb	r3, [r7, #23]
      break;
 80057de:	e000      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80057e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e8:	4b5e      	ldr	r3, [pc, #376]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057f6:	495b      	ldr	r1, [pc, #364]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	658b      	str	r3, [r1, #88]	; 0x58
 80057fc:	e001      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d033      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005814:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005818:	d01c      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800581a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800581e:	d816      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005824:	d003      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800582a:	d007      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800582c:	e00f      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582e:	4b4d      	ldr	r3, [pc, #308]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	4a4c      	ldr	r2, [pc, #304]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005838:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800583a:	e00c      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3324      	adds	r3, #36	; 0x24
 8005840:	2101      	movs	r1, #1
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fc6e 	bl	8006124 <RCCEx_PLL3_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800584c:	e003      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	75fb      	strb	r3, [r7, #23]
      break;
 8005852:	e000      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005856:	7dfb      	ldrb	r3, [r7, #23]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800585c:	4b41      	ldr	r3, [pc, #260]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800585e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800586a:	493e      	ldr	r1, [pc, #248]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800586c:	4313      	orrs	r3, r2
 800586e:	654b      	str	r3, [r1, #84]	; 0x54
 8005870:	e001      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005872:	7dfb      	ldrb	r3, [r7, #23]
 8005874:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d029      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800588a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588e:	d007      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005890:	e00f      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005892:	4b34      	ldr	r3, [pc, #208]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	4a33      	ldr	r2, [pc, #204]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800589c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800589e:	e00b      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3304      	adds	r3, #4
 80058a4:	2102      	movs	r1, #2
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fb8a 	bl	8005fc0 <RCCEx_PLL2_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058b0:	e002      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
      break;
 80058b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058be:	4b29      	ldr	r3, [pc, #164]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80058c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ca:	4926      	ldr	r1, [pc, #152]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058d0:	e001      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
 80058d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3324      	adds	r3, #36	; 0x24
 80058e6:	2102      	movs	r1, #2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fc1b 	bl	8006124 <RCCEx_PLL3_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d033      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800590c:	d017      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800590e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005912:	d811      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005918:	d013      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800591a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591e:	d80b      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d010      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005928:	d106      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800592a:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	4a0d      	ldr	r2, [pc, #52]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005934:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005936:	e007      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	75fb      	strb	r3, [r7, #23]
      break;
 800593c:	e004      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800593e:	bf00      	nop
 8005940:	e002      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005942:	bf00      	nop
 8005944:	e000      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10c      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800595a:	4902      	ldr	r1, [pc, #8]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800595c:	4313      	orrs	r3, r2
 800595e:	654b      	str	r3, [r1, #84]	; 0x54
 8005960:	e004      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005962:	bf00      	nop
 8005964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	7dfb      	ldrb	r3, [r7, #23]
 800596a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005978:	4b31      	ldr	r3, [pc, #196]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800597a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800597c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	492e      	ldr	r1, [pc, #184]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005986:	4313      	orrs	r3, r2
 8005988:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d009      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005996:	4b2a      	ldr	r3, [pc, #168]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059a4:	4926      	ldr	r1, [pc, #152]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059b6:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c2:	491f      	ldr	r1, [pc, #124]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00d      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059d4:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059de:	6113      	str	r3, [r2, #16]
 80059e0:	4b17      	ldr	r3, [pc, #92]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80059ea:	4915      	ldr	r1, [pc, #84]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	da08      	bge.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059f8:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a04:	490e      	ldr	r1, [pc, #56]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d009      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	4906      	ldr	r1, [pc, #24]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005a2a:	7dbb      	ldrb	r3, [r7, #22]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	e000      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	58024400 	.word	0x58024400

08005a44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a48:	f7ff f85a 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	091b      	lsrs	r3, r3, #4
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	4904      	ldr	r1, [pc, #16]	; (8005a6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a5a:	5ccb      	ldrb	r3, [r1, r3]
 8005a5c:	f003 031f 	and.w	r3, r3, #31
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	58024400 	.word	0x58024400
 8005a6c:	0800c354 	.word	0x0800c354

08005a70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b089      	sub	sp, #36	; 0x24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a78:	4ba1      	ldr	r3, [pc, #644]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005a82:	4b9f      	ldr	r3, [pc, #636]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	0b1b      	lsrs	r3, r3, #12
 8005a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a8e:	4b9c      	ldr	r3, [pc, #624]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	091b      	lsrs	r3, r3, #4
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005a9a:	4b99      	ldr	r3, [pc, #612]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	08db      	lsrs	r3, r3, #3
 8005aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	fb02 f303 	mul.w	r3, r2, r3
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8111 	beq.w	8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	f000 8083 	beq.w	8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	f200 80a1 	bhi.w	8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d056      	beq.n	8005b88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ada:	e099      	b.n	8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005adc:	4b88      	ldr	r3, [pc, #544]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d02d      	beq.n	8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ae8:	4b85      	ldr	r3, [pc, #532]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	08db      	lsrs	r3, r3, #3
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	4a84      	ldr	r2, [pc, #528]	; (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
 8005af8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	ee07 3a90 	vmov	s15, r3
 8005b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b12:	4b7b      	ldr	r3, [pc, #492]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b42:	e087      	b.n	8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b56:	4b6a      	ldr	r3, [pc, #424]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b86:	e065      	b.n	8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b9a:	4b59      	ldr	r3, [pc, #356]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bca:	e043      	b.n	8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bde:	4b48      	ldr	r3, [pc, #288]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c0e:	e021      	b.n	8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c22:	4b37      	ldr	r3, [pc, #220]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005c54:	4b2a      	ldr	r3, [pc, #168]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	0a5b      	lsrs	r3, r3, #9
 8005c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c7a:	ee17 2a90 	vmov	r2, s15
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005c82:	4b1f      	ldr	r3, [pc, #124]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	0c1b      	lsrs	r3, r3, #16
 8005c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ca8:	ee17 2a90 	vmov	r2, s15
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005cb0:	4b13      	ldr	r3, [pc, #76]	; (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	0e1b      	lsrs	r3, r3, #24
 8005cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cd6:	ee17 2a90 	vmov	r2, s15
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005cde:	e008      	b.n	8005cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	609a      	str	r2, [r3, #8]
}
 8005cf2:	bf00      	nop
 8005cf4:	3724      	adds	r7, #36	; 0x24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	58024400 	.word	0x58024400
 8005d04:	03d09000 	.word	0x03d09000
 8005d08:	46000000 	.word	0x46000000
 8005d0c:	4c742400 	.word	0x4c742400
 8005d10:	4a742400 	.word	0x4a742400
 8005d14:	4af42400 	.word	0x4af42400

08005d18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b089      	sub	sp, #36	; 0x24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d20:	4ba1      	ldr	r3, [pc, #644]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005d2a:	4b9f      	ldr	r3, [pc, #636]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	0d1b      	lsrs	r3, r3, #20
 8005d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d36:	4b9c      	ldr	r3, [pc, #624]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	0a1b      	lsrs	r3, r3, #8
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005d42:	4b99      	ldr	r3, [pc, #612]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	08db      	lsrs	r3, r3, #3
 8005d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	fb02 f303 	mul.w	r3, r2, r3
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8111 	beq.w	8005f88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	f000 8083 	beq.w	8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	f200 80a1 	bhi.w	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d056      	beq.n	8005e30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d82:	e099      	b.n	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d84:	4b88      	ldr	r3, [pc, #544]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d02d      	beq.n	8005dec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d90:	4b85      	ldr	r3, [pc, #532]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	08db      	lsrs	r3, r3, #3
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	4a84      	ldr	r2, [pc, #528]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005da0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	ee07 3a90 	vmov	s15, r3
 8005da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dba:	4b7b      	ldr	r3, [pc, #492]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005dea:	e087      	b.n	8005efc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfe:	4b6a      	ldr	r3, [pc, #424]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e12:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e2e:	e065      	b.n	8005efc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e42:	4b59      	ldr	r3, [pc, #356]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e56:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e72:	e043      	b.n	8005efc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005fbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e86:	4b48      	ldr	r3, [pc, #288]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eb6:	e021      	b.n	8005efc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eca:	4b37      	ldr	r3, [pc, #220]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ede:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005efa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005efc:	4b2a      	ldr	r3, [pc, #168]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	0a5b      	lsrs	r3, r3, #9
 8005f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f22:	ee17 2a90 	vmov	r2, s15
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005f2a:	4b1f      	ldr	r3, [pc, #124]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f34:	ee07 3a90 	vmov	s15, r3
 8005f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f50:	ee17 2a90 	vmov	r2, s15
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005f58:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	0e1b      	lsrs	r3, r3, #24
 8005f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f7e:	ee17 2a90 	vmov	r2, s15
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f86:	e008      	b.n	8005f9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	609a      	str	r2, [r3, #8]
}
 8005f9a:	bf00      	nop
 8005f9c:	3724      	adds	r7, #36	; 0x24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	58024400 	.word	0x58024400
 8005fac:	03d09000 	.word	0x03d09000
 8005fb0:	46000000 	.word	0x46000000
 8005fb4:	4c742400 	.word	0x4c742400
 8005fb8:	4a742400 	.word	0x4a742400
 8005fbc:	4af42400 	.word	0x4af42400

08005fc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fce:	4b53      	ldr	r3, [pc, #332]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d101      	bne.n	8005fde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e099      	b.n	8006112 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005fde:	4b4f      	ldr	r3, [pc, #316]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a4e      	ldr	r2, [pc, #312]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 8005fe4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fea:	f7fb fcb3 	bl	8001954 <HAL_GetTick>
 8005fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ff0:	e008      	b.n	8006004 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ff2:	f7fb fcaf 	bl	8001954 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e086      	b.n	8006112 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006004:	4b45      	ldr	r3, [pc, #276]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f0      	bne.n	8005ff2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006010:	4b42      	ldr	r3, [pc, #264]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	031b      	lsls	r3, r3, #12
 800601e:	493f      	ldr	r1, [pc, #252]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 8006020:	4313      	orrs	r3, r2
 8006022:	628b      	str	r3, [r1, #40]	; 0x28
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	3b01      	subs	r3, #1
 800602a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	3b01      	subs	r3, #1
 8006034:	025b      	lsls	r3, r3, #9
 8006036:	b29b      	uxth	r3, r3
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	3b01      	subs	r3, #1
 8006040:	041b      	lsls	r3, r3, #16
 8006042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	3b01      	subs	r3, #1
 800604e:	061b      	lsls	r3, r3, #24
 8006050:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006054:	4931      	ldr	r1, [pc, #196]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 8006056:	4313      	orrs	r3, r2
 8006058:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800605a:	4b30      	ldr	r3, [pc, #192]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	492d      	ldr	r1, [pc, #180]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 8006068:	4313      	orrs	r3, r2
 800606a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800606c:	4b2b      	ldr	r3, [pc, #172]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	f023 0220 	bic.w	r2, r3, #32
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	4928      	ldr	r1, [pc, #160]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 800607a:	4313      	orrs	r3, r2
 800607c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800607e:	4b27      	ldr	r3, [pc, #156]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	4a26      	ldr	r2, [pc, #152]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 8006084:	f023 0310 	bic.w	r3, r3, #16
 8006088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800608a:	4b24      	ldr	r3, [pc, #144]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 800608c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800608e:	4b24      	ldr	r3, [pc, #144]	; (8006120 <RCCEx_PLL2_Config+0x160>)
 8006090:	4013      	ands	r3, r2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	69d2      	ldr	r2, [r2, #28]
 8006096:	00d2      	lsls	r2, r2, #3
 8006098:	4920      	ldr	r1, [pc, #128]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 800609a:	4313      	orrs	r3, r2
 800609c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800609e:	4b1f      	ldr	r3, [pc, #124]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	4a1e      	ldr	r2, [pc, #120]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 80060a4:	f043 0310 	orr.w	r3, r3, #16
 80060a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d106      	bne.n	80060be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80060b0:	4b1a      	ldr	r3, [pc, #104]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 80060b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060bc:	e00f      	b.n	80060de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d106      	bne.n	80060d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80060c4:	4b15      	ldr	r3, [pc, #84]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	4a14      	ldr	r2, [pc, #80]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 80060ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060d0:	e005      	b.n	80060de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80060d2:	4b12      	ldr	r3, [pc, #72]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	4a11      	ldr	r2, [pc, #68]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 80060d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80060de:	4b0f      	ldr	r3, [pc, #60]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a0e      	ldr	r2, [pc, #56]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 80060e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ea:	f7fb fc33 	bl	8001954 <HAL_GetTick>
 80060ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060f0:	e008      	b.n	8006104 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80060f2:	f7fb fc2f 	bl	8001954 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d901      	bls.n	8006104 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e006      	b.n	8006112 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <RCCEx_PLL2_Config+0x15c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0f0      	beq.n	80060f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006110:	7bfb      	ldrb	r3, [r7, #15]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	58024400 	.word	0x58024400
 8006120:	ffff0007 	.word	0xffff0007

08006124 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006132:	4b53      	ldr	r3, [pc, #332]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b03      	cmp	r3, #3
 800613c:	d101      	bne.n	8006142 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e099      	b.n	8006276 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006142:	4b4f      	ldr	r3, [pc, #316]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a4e      	ldr	r2, [pc, #312]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 8006148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800614c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800614e:	f7fb fc01 	bl	8001954 <HAL_GetTick>
 8006152:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006154:	e008      	b.n	8006168 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006156:	f7fb fbfd 	bl	8001954 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e086      	b.n	8006276 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006168:	4b45      	ldr	r3, [pc, #276]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f0      	bne.n	8006156 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006174:	4b42      	ldr	r3, [pc, #264]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	051b      	lsls	r3, r3, #20
 8006182:	493f      	ldr	r1, [pc, #252]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 8006184:	4313      	orrs	r3, r2
 8006186:	628b      	str	r3, [r1, #40]	; 0x28
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	3b01      	subs	r3, #1
 800618e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	3b01      	subs	r3, #1
 8006198:	025b      	lsls	r3, r3, #9
 800619a:	b29b      	uxth	r3, r3
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	061b      	lsls	r3, r3, #24
 80061b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061b8:	4931      	ldr	r1, [pc, #196]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80061be:	4b30      	ldr	r3, [pc, #192]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	492d      	ldr	r1, [pc, #180]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80061d0:	4b2b      	ldr	r3, [pc, #172]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	4928      	ldr	r1, [pc, #160]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80061e2:	4b27      	ldr	r3, [pc, #156]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	4a26      	ldr	r2, [pc, #152]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 80061e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80061ee:	4b24      	ldr	r3, [pc, #144]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 80061f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061f2:	4b24      	ldr	r3, [pc, #144]	; (8006284 <RCCEx_PLL3_Config+0x160>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	69d2      	ldr	r2, [r2, #28]
 80061fa:	00d2      	lsls	r2, r2, #3
 80061fc:	4920      	ldr	r1, [pc, #128]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006202:	4b1f      	ldr	r3, [pc, #124]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	4a1e      	ldr	r2, [pc, #120]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 8006208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006214:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	4a19      	ldr	r2, [pc, #100]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 800621a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800621e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006220:	e00f      	b.n	8006242 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d106      	bne.n	8006236 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006228:	4b15      	ldr	r3, [pc, #84]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	4a14      	ldr	r2, [pc, #80]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 800622e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006234:	e005      	b.n	8006242 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006236:	4b12      	ldr	r3, [pc, #72]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	4a11      	ldr	r2, [pc, #68]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 800623c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006240:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a0e      	ldr	r2, [pc, #56]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 8006248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800624c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800624e:	f7fb fb81 	bl	8001954 <HAL_GetTick>
 8006252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006254:	e008      	b.n	8006268 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006256:	f7fb fb7d 	bl	8001954 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e006      	b.n	8006276 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006268:	4b05      	ldr	r3, [pc, #20]	; (8006280 <RCCEx_PLL3_Config+0x15c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f0      	beq.n	8006256 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	58024400 	.word	0x58024400
 8006284:	ffff0007 	.word	0xffff0007

08006288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e049      	b.n	800632e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fb f890 	bl	80013d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f000 f92e 	bl	8006528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIM_ConfigClockSource+0x1c>
 8006350:	2302      	movs	r3, #2
 8006352:	e0dc      	b.n	800650e <HAL_TIM_ConfigClockSource+0x1d6>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	4b6a      	ldr	r3, [pc, #424]	; (8006518 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006370:	4013      	ands	r3, r2
 8006372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800637a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a64      	ldr	r2, [pc, #400]	; (800651c <HAL_TIM_ConfigClockSource+0x1e4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	f000 80a9 	beq.w	80064e2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006390:	4a62      	ldr	r2, [pc, #392]	; (800651c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	f200 80ae 	bhi.w	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006398:	4a61      	ldr	r2, [pc, #388]	; (8006520 <HAL_TIM_ConfigClockSource+0x1e8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	f000 80a1 	beq.w	80064e2 <HAL_TIM_ConfigClockSource+0x1aa>
 80063a0:	4a5f      	ldr	r2, [pc, #380]	; (8006520 <HAL_TIM_ConfigClockSource+0x1e8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	f200 80a6 	bhi.w	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063a8:	4a5e      	ldr	r2, [pc, #376]	; (8006524 <HAL_TIM_ConfigClockSource+0x1ec>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	f000 8099 	beq.w	80064e2 <HAL_TIM_ConfigClockSource+0x1aa>
 80063b0:	4a5c      	ldr	r2, [pc, #368]	; (8006524 <HAL_TIM_ConfigClockSource+0x1ec>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	f200 809e 	bhi.w	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063bc:	f000 8091 	beq.w	80064e2 <HAL_TIM_ConfigClockSource+0x1aa>
 80063c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063c4:	f200 8096 	bhi.w	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063cc:	f000 8089 	beq.w	80064e2 <HAL_TIM_ConfigClockSource+0x1aa>
 80063d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063d4:	f200 808e 	bhi.w	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063dc:	d03e      	beq.n	800645c <HAL_TIM_ConfigClockSource+0x124>
 80063de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e2:	f200 8087 	bhi.w	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ea:	f000 8086 	beq.w	80064fa <HAL_TIM_ConfigClockSource+0x1c2>
 80063ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f2:	d87f      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063f4:	2b70      	cmp	r3, #112	; 0x70
 80063f6:	d01a      	beq.n	800642e <HAL_TIM_ConfigClockSource+0xf6>
 80063f8:	2b70      	cmp	r3, #112	; 0x70
 80063fa:	d87b      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063fc:	2b60      	cmp	r3, #96	; 0x60
 80063fe:	d050      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0x16a>
 8006400:	2b60      	cmp	r3, #96	; 0x60
 8006402:	d877      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006404:	2b50      	cmp	r3, #80	; 0x50
 8006406:	d03c      	beq.n	8006482 <HAL_TIM_ConfigClockSource+0x14a>
 8006408:	2b50      	cmp	r3, #80	; 0x50
 800640a:	d873      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	d058      	beq.n	80064c2 <HAL_TIM_ConfigClockSource+0x18a>
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d86f      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006414:	2b30      	cmp	r3, #48	; 0x30
 8006416:	d064      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006418:	2b30      	cmp	r3, #48	; 0x30
 800641a:	d86b      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800641c:	2b20      	cmp	r3, #32
 800641e:	d060      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006420:	2b20      	cmp	r3, #32
 8006422:	d867      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006424:	2b00      	cmp	r3, #0
 8006426:	d05c      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006428:	2b10      	cmp	r3, #16
 800642a:	d05a      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800642c:	e062      	b.n	80064f4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6899      	ldr	r1, [r3, #8]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f000 f98b 	bl	8006758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006450:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	609a      	str	r2, [r3, #8]
      break;
 800645a:	e04f      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	6899      	ldr	r1, [r3, #8]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f000 f974 	bl	8006758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800647e:	609a      	str	r2, [r3, #8]
      break;
 8006480:	e03c      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6859      	ldr	r1, [r3, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	461a      	mov	r2, r3
 8006490:	f000 f8e4 	bl	800665c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2150      	movs	r1, #80	; 0x50
 800649a:	4618      	mov	r0, r3
 800649c:	f000 f93e 	bl	800671c <TIM_ITRx_SetConfig>
      break;
 80064a0:	e02c      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	6859      	ldr	r1, [r3, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f000 f903 	bl	80066ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2160      	movs	r1, #96	; 0x60
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 f92e 	bl	800671c <TIM_ITRx_SetConfig>
      break;
 80064c0:	e01c      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	6859      	ldr	r1, [r3, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f000 f8c4 	bl	800665c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2140      	movs	r1, #64	; 0x40
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 f91e 	bl	800671c <TIM_ITRx_SetConfig>
      break;
 80064e0:	e00c      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f000 f915 	bl	800671c <TIM_ITRx_SetConfig>
      break;
 80064f2:	e003      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	73fb      	strb	r3, [r7, #15]
      break;
 80064f8:	e000      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80064fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	ffceff88 	.word	0xffceff88
 800651c:	00100040 	.word	0x00100040
 8006520:	00100030 	.word	0x00100030
 8006524:	00100020 	.word	0x00100020

08006528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a40      	ldr	r2, [pc, #256]	; (800663c <TIM_Base_SetConfig+0x114>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006546:	d00f      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a3d      	ldr	r2, [pc, #244]	; (8006640 <TIM_Base_SetConfig+0x118>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00b      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a3c      	ldr	r2, [pc, #240]	; (8006644 <TIM_Base_SetConfig+0x11c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d007      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a3b      	ldr	r2, [pc, #236]	; (8006648 <TIM_Base_SetConfig+0x120>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d003      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a3a      	ldr	r2, [pc, #232]	; (800664c <TIM_Base_SetConfig+0x124>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d108      	bne.n	800657a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a2f      	ldr	r2, [pc, #188]	; (800663c <TIM_Base_SetConfig+0x114>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d01f      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006588:	d01b      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2c      	ldr	r2, [pc, #176]	; (8006640 <TIM_Base_SetConfig+0x118>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d017      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a2b      	ldr	r2, [pc, #172]	; (8006644 <TIM_Base_SetConfig+0x11c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d013      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a2a      	ldr	r2, [pc, #168]	; (8006648 <TIM_Base_SetConfig+0x120>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00f      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a29      	ldr	r2, [pc, #164]	; (800664c <TIM_Base_SetConfig+0x124>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00b      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a28      	ldr	r2, [pc, #160]	; (8006650 <TIM_Base_SetConfig+0x128>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d007      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a27      	ldr	r2, [pc, #156]	; (8006654 <TIM_Base_SetConfig+0x12c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a26      	ldr	r2, [pc, #152]	; (8006658 <TIM_Base_SetConfig+0x130>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d108      	bne.n	80065d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a10      	ldr	r2, [pc, #64]	; (800663c <TIM_Base_SetConfig+0x114>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00f      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a12      	ldr	r2, [pc, #72]	; (800664c <TIM_Base_SetConfig+0x124>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00b      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a11      	ldr	r2, [pc, #68]	; (8006650 <TIM_Base_SetConfig+0x128>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d007      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a10      	ldr	r2, [pc, #64]	; (8006654 <TIM_Base_SetConfig+0x12c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d003      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a0f      	ldr	r2, [pc, #60]	; (8006658 <TIM_Base_SetConfig+0x130>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d103      	bne.n	8006628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	691a      	ldr	r2, [r3, #16]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	615a      	str	r2, [r3, #20]
}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40010000 	.word	0x40010000
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40000c00 	.word	0x40000c00
 800664c:	40010400 	.word	0x40010400
 8006650:	40014000 	.word	0x40014000
 8006654:	40014400 	.word	0x40014400
 8006658:	40014800 	.word	0x40014800

0800665c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	f023 0201 	bic.w	r2, r3, #1
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f023 030a 	bic.w	r3, r3, #10
 8006698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b087      	sub	sp, #28
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f023 0210 	bic.w	r2, r3, #16
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	031b      	lsls	r3, r3, #12
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4b09      	ldr	r3, [pc, #36]	; (8006754 <TIM_ITRx_SetConfig+0x38>)
 8006730:	4013      	ands	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4313      	orrs	r3, r2
 800673a:	f043 0307 	orr.w	r3, r3, #7
 800673e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	609a      	str	r2, [r3, #8]
}
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	ffcfff8f 	.word	0xffcfff8f

08006758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	021a      	lsls	r2, r3, #8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	431a      	orrs	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4313      	orrs	r3, r2
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	609a      	str	r2, [r3, #8]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e06d      	b.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a30      	ldr	r2, [pc, #192]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a2f      	ldr	r2, [pc, #188]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d108      	bne.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a20      	ldr	r2, [pc, #128]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d022      	beq.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006822:	d01d      	beq.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a1d      	ldr	r2, [pc, #116]	; (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d018      	beq.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1c      	ldr	r2, [pc, #112]	; (80068a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d013      	beq.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1a      	ldr	r2, [pc, #104]	; (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00e      	beq.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a15      	ldr	r2, [pc, #84]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d009      	beq.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a16      	ldr	r2, [pc, #88]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a15      	ldr	r2, [pc, #84]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d10c      	bne.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006866:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	4313      	orrs	r3, r2
 8006870:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	40010000 	.word	0x40010000
 800689c:	40010400 	.word	0x40010400
 80068a0:	40000400 	.word	0x40000400
 80068a4:	40000800 	.word	0x40000800
 80068a8:	40000c00 	.word	0x40000c00
 80068ac:	40001800 	.word	0x40001800
 80068b0:	40014000 	.word	0x40014000

080068b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e042      	b.n	800694c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d106      	bne.n	80068de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7fa fd9b 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2224      	movs	r2, #36	; 0x24
 80068e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0201 	bic.w	r2, r2, #1
 80068f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fcd6 	bl	80072a8 <UART_SetConfig>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e022      	b.n	800694c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 fa32 	bl	8007d78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 fab9 	bl	8007ebc <UART_CheckIdleState>
 800694a:	4603      	mov	r3, r0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08a      	sub	sp, #40	; 0x28
 8006958:	af02      	add	r7, sp, #8
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	4613      	mov	r3, r2
 8006962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800696a:	2b20      	cmp	r3, #32
 800696c:	f040 8083 	bne.w	8006a76 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_UART_Transmit+0x28>
 8006976:	88fb      	ldrh	r3, [r7, #6]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e07b      	b.n	8006a78 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006986:	2b01      	cmp	r3, #1
 8006988:	d101      	bne.n	800698e <HAL_UART_Transmit+0x3a>
 800698a:	2302      	movs	r3, #2
 800698c:	e074      	b.n	8006a78 <HAL_UART_Transmit+0x124>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2221      	movs	r2, #33	; 0x21
 80069a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069a6:	f7fa ffd5 	bl	8001954 <HAL_GetTick>
 80069aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	88fa      	ldrh	r2, [r7, #6]
 80069b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c4:	d108      	bne.n	80069d8 <HAL_UART_Transmit+0x84>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	e003      	b.n	80069e0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80069e8:	e02c      	b.n	8006a44 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2200      	movs	r2, #0
 80069f2:	2180      	movs	r1, #128	; 0x80
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f001 faac 	bl	8007f52 <UART_WaitOnFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e039      	b.n	8006a78 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	3302      	adds	r3, #2
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	e007      	b.n	8006a32 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1cc      	bne.n	80069ea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2200      	movs	r2, #0
 8006a58:	2140      	movs	r1, #64	; 0x40
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f001 fa79 	bl	8007f52 <UART_WaitOnFlagUntilTimeout>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e006      	b.n	8006a78 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	e000      	b.n	8006a78 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006a76:	2302      	movs	r3, #2
  }
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3720      	adds	r7, #32
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08a      	sub	sp, #40	; 0x28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d142      	bne.n	8006b1e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_UART_Receive_IT+0x24>
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e03b      	b.n	8006b20 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <HAL_UART_Receive_IT+0x36>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e034      	b.n	8006b20 <HAL_UART_Receive_IT+0xa0>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a17      	ldr	r2, [pc, #92]	; (8006b28 <HAL_UART_Receive_IT+0xa8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01f      	beq.n	8006b0e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d018      	beq.n	8006b0e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	623b      	str	r3, [r7, #32]
 8006afc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	69f9      	ldr	r1, [r7, #28]
 8006b00:	6a3a      	ldr	r2, [r7, #32]
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e6      	bne.n	8006adc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	461a      	mov	r2, r3
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f001 fae5 	bl	80080e4 <UART_Start_Receive_IT>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	e000      	b.n	8006b20 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006b1e:	2302      	movs	r3, #2
  }
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3728      	adds	r7, #40	; 0x28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	58000c00 	.word	0x58000c00

08006b2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b0ba      	sub	sp, #232	; 0xe8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b56:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d11b      	bne.n	8006ba0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d015      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b78:	f003 0320 	and.w	r3, r3, #32
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d105      	bne.n	8006b8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d009      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 835a 	beq.w	800724a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	4798      	blx	r3
      }
      return;
 8006b9e:	e354      	b.n	800724a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 811f 	beq.w	8006de8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006baa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006bae:	4b8b      	ldr	r3, [pc, #556]	; (8006ddc <HAL_UART_IRQHandler+0x2b0>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006bb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bba:	4b89      	ldr	r3, [pc, #548]	; (8006de0 <HAL_UART_IRQHandler+0x2b4>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8112 	beq.w	8006de8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d011      	beq.n	8006bf4 <HAL_UART_IRQHandler+0xc8>
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2201      	movs	r2, #1
 8006be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bea:	f043 0201 	orr.w	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d011      	beq.n	8006c24 <HAL_UART_IRQHandler+0xf8>
 8006c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00b      	beq.n	8006c24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2202      	movs	r2, #2
 8006c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c1a:	f043 0204 	orr.w	r2, r3, #4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d011      	beq.n	8006c54 <HAL_UART_IRQHandler+0x128>
 8006c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00b      	beq.n	8006c54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2204      	movs	r2, #4
 8006c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c4a:	f043 0202 	orr.w	r2, r3, #2
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d017      	beq.n	8006c90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d105      	bne.n	8006c78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c70:	4b5a      	ldr	r3, [pc, #360]	; (8006ddc <HAL_UART_IRQHandler+0x2b0>)
 8006c72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00b      	beq.n	8006c90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c86:	f043 0208 	orr.w	r2, r3, #8
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d012      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x196>
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00c      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cb8:	f043 0220 	orr.w	r2, r3, #32
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 82c0 	beq.w	800724e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d013      	beq.n	8006d02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d105      	bne.n	8006cf2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d005      	beq.n	8006d26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d04f      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fb06 	bl	8008338 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d141      	bne.n	8006dbe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3308      	adds	r3, #8
 8006d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3308      	adds	r3, #8
 8006d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1d9      	bne.n	8006d3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d013      	beq.n	8006db6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d92:	4a14      	ldr	r2, [pc, #80]	; (8006de4 <HAL_UART_IRQHandler+0x2b8>)
 8006d94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fb fa44 	bl	8002228 <HAL_DMA_Abort_IT>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d017      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db4:	e00f      	b.n	8006dd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fa60 	bl	800727c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dbc:	e00b      	b.n	8006dd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa5c 	bl	800727c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc4:	e007      	b.n	8006dd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fa58 	bl	800727c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006dd4:	e23b      	b.n	800724e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd6:	bf00      	nop
    return;
 8006dd8:	e239      	b.n	800724e <HAL_UART_IRQHandler+0x722>
 8006dda:	bf00      	nop
 8006ddc:	10000001 	.word	0x10000001
 8006de0:	04000120 	.word	0x04000120
 8006de4:	08008405 	.word	0x08008405

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	f040 81ce 	bne.w	800718e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 81c7 	beq.w	800718e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 81c0 	beq.w	800718e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2210      	movs	r2, #16
 8006e14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e20:	2b40      	cmp	r3, #64	; 0x40
 8006e22:	f040 813b 	bne.w	800709c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a8b      	ldr	r2, [pc, #556]	; (800705c <HAL_UART_IRQHandler+0x530>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d059      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a89      	ldr	r2, [pc, #548]	; (8007060 <HAL_UART_IRQHandler+0x534>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d053      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a87      	ldr	r2, [pc, #540]	; (8007064 <HAL_UART_IRQHandler+0x538>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d04d      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a85      	ldr	r2, [pc, #532]	; (8007068 <HAL_UART_IRQHandler+0x53c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d047      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a83      	ldr	r2, [pc, #524]	; (800706c <HAL_UART_IRQHandler+0x540>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d041      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a81      	ldr	r2, [pc, #516]	; (8007070 <HAL_UART_IRQHandler+0x544>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d03b      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a7f      	ldr	r2, [pc, #508]	; (8007074 <HAL_UART_IRQHandler+0x548>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d035      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a7d      	ldr	r2, [pc, #500]	; (8007078 <HAL_UART_IRQHandler+0x54c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d02f      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a7b      	ldr	r2, [pc, #492]	; (800707c <HAL_UART_IRQHandler+0x550>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d029      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a79      	ldr	r2, [pc, #484]	; (8007080 <HAL_UART_IRQHandler+0x554>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d023      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a77      	ldr	r2, [pc, #476]	; (8007084 <HAL_UART_IRQHandler+0x558>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d01d      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a75      	ldr	r2, [pc, #468]	; (8007088 <HAL_UART_IRQHandler+0x55c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d017      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a73      	ldr	r2, [pc, #460]	; (800708c <HAL_UART_IRQHandler+0x560>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d011      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a71      	ldr	r2, [pc, #452]	; (8007090 <HAL_UART_IRQHandler+0x564>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d00b      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a6f      	ldr	r2, [pc, #444]	; (8007094 <HAL_UART_IRQHandler+0x568>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d005      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x3ba>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a6d      	ldr	r2, [pc, #436]	; (8007098 <HAL_UART_IRQHandler+0x56c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d105      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x3c6>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	e004      	b.n	8006efc <HAL_UART_IRQHandler+0x3d0>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 81a4 	beq.w	8007252 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f14:	429a      	cmp	r2, r3
 8006f16:	f080 819c 	bcs.w	8007252 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2e:	f000 8086 	beq.w	800703e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f60:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1da      	bne.n	8006f32 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fa0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fa8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e1      	bne.n	8006f7c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fc2:	e853 3f00 	ldrex	r3, [r3]
 8006fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fdc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fe2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e3      	bne.n	8006fb8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800700c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800700e:	f023 0310 	bic.w	r3, r3, #16
 8007012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007020:	65bb      	str	r3, [r7, #88]	; 0x58
 8007022:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007028:	e841 2300 	strex	r3, r2, [r1]
 800702c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800702e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e4      	bne.n	8006ffe <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007038:	4618      	mov	r0, r3
 800703a:	f7fa fdd7 	bl	8001bec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800704a:	b29b      	uxth	r3, r3
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	b29b      	uxth	r3, r3
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f91c 	bl	8007290 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007058:	e0fb      	b.n	8007252 <HAL_UART_IRQHandler+0x726>
 800705a:	bf00      	nop
 800705c:	40020010 	.word	0x40020010
 8007060:	40020028 	.word	0x40020028
 8007064:	40020040 	.word	0x40020040
 8007068:	40020058 	.word	0x40020058
 800706c:	40020070 	.word	0x40020070
 8007070:	40020088 	.word	0x40020088
 8007074:	400200a0 	.word	0x400200a0
 8007078:	400200b8 	.word	0x400200b8
 800707c:	40020410 	.word	0x40020410
 8007080:	40020428 	.word	0x40020428
 8007084:	40020440 	.word	0x40020440
 8007088:	40020458 	.word	0x40020458
 800708c:	40020470 	.word	0x40020470
 8007090:	40020488 	.word	0x40020488
 8007094:	400204a0 	.word	0x400204a0
 8007098:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 80cc 	beq.w	8007256 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80070be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80c7 	beq.w	8007256 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070ea:	647b      	str	r3, [r7, #68]	; 0x44
 80070ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e4      	bne.n	80070c8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	623b      	str	r3, [r7, #32]
   return(result);
 800710e:	6a3a      	ldr	r2, [r7, #32]
 8007110:	4b54      	ldr	r3, [pc, #336]	; (8007264 <HAL_UART_IRQHandler+0x738>)
 8007112:	4013      	ands	r3, r2
 8007114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3308      	adds	r3, #8
 800711e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007122:	633a      	str	r2, [r7, #48]	; 0x30
 8007124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e3      	bne.n	80070fe <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2220      	movs	r2, #32
 800713a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	60fb      	str	r3, [r7, #12]
   return(result);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0310 	bic.w	r3, r3, #16
 800715e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800716c:	61fb      	str	r3, [r7, #28]
 800716e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	69b9      	ldr	r1, [r7, #24]
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	617b      	str	r3, [r7, #20]
   return(result);
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e4      	bne.n	800714a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f882 	bl	8007290 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800718c:	e063      	b.n	8007256 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800718e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00e      	beq.n	80071b8 <HAL_UART_IRQHandler+0x68c>
 800719a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800719e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d008      	beq.n	80071b8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 fdc5 	bl	8008d40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071b6:	e051      	b.n	800725c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d014      	beq.n	80071ee <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d105      	bne.n	80071dc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80071d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d03a      	beq.n	800725a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	4798      	blx	r3
    }
    return;
 80071ec:	e035      	b.n	800725a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d009      	beq.n	800720e <HAL_UART_IRQHandler+0x6e2>
 80071fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 f912 	bl	8008430 <UART_EndTransmit_IT>
    return;
 800720c:	e026      	b.n	800725c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800720e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d009      	beq.n	800722e <HAL_UART_IRQHandler+0x702>
 800721a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800721e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 fd9e 	bl	8008d68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800722c:	e016      	b.n	800725c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800722e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d010      	beq.n	800725c <HAL_UART_IRQHandler+0x730>
 800723a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723e:	2b00      	cmp	r3, #0
 8007240:	da0c      	bge.n	800725c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 fd86 	bl	8008d54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007248:	e008      	b.n	800725c <HAL_UART_IRQHandler+0x730>
      return;
 800724a:	bf00      	nop
 800724c:	e006      	b.n	800725c <HAL_UART_IRQHandler+0x730>
    return;
 800724e:	bf00      	nop
 8007250:	e004      	b.n	800725c <HAL_UART_IRQHandler+0x730>
      return;
 8007252:	bf00      	nop
 8007254:	e002      	b.n	800725c <HAL_UART_IRQHandler+0x730>
      return;
 8007256:	bf00      	nop
 8007258:	e000      	b.n	800725c <HAL_UART_IRQHandler+0x730>
    return;
 800725a:	bf00      	nop
  }
}
 800725c:	37e8      	adds	r7, #232	; 0xe8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	effffffe 	.word	0xeffffffe

08007268 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072ac:	b092      	sub	sp, #72	; 0x48
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	431a      	orrs	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	431a      	orrs	r2, r3
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4bbe      	ldr	r3, [pc, #760]	; (80075d0 <UART_SetConfig+0x328>)
 80072d8:	4013      	ands	r3, r2
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072e0:	430b      	orrs	r3, r1
 80072e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4ab3      	ldr	r2, [pc, #716]	; (80075d4 <UART_SetConfig+0x32c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d004      	beq.n	8007314 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007310:	4313      	orrs	r3, r2
 8007312:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	4baf      	ldr	r3, [pc, #700]	; (80075d8 <UART_SetConfig+0x330>)
 800731c:	4013      	ands	r3, r2
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	6812      	ldr	r2, [r2, #0]
 8007322:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007324:	430b      	orrs	r3, r1
 8007326:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732e:	f023 010f 	bic.w	r1, r3, #15
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4aa6      	ldr	r2, [pc, #664]	; (80075dc <UART_SetConfig+0x334>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d177      	bne.n	8007438 <UART_SetConfig+0x190>
 8007348:	4ba5      	ldr	r3, [pc, #660]	; (80075e0 <UART_SetConfig+0x338>)
 800734a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007350:	2b28      	cmp	r3, #40	; 0x28
 8007352:	d86d      	bhi.n	8007430 <UART_SetConfig+0x188>
 8007354:	a201      	add	r2, pc, #4	; (adr r2, 800735c <UART_SetConfig+0xb4>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	08007401 	.word	0x08007401
 8007360:	08007431 	.word	0x08007431
 8007364:	08007431 	.word	0x08007431
 8007368:	08007431 	.word	0x08007431
 800736c:	08007431 	.word	0x08007431
 8007370:	08007431 	.word	0x08007431
 8007374:	08007431 	.word	0x08007431
 8007378:	08007431 	.word	0x08007431
 800737c:	08007409 	.word	0x08007409
 8007380:	08007431 	.word	0x08007431
 8007384:	08007431 	.word	0x08007431
 8007388:	08007431 	.word	0x08007431
 800738c:	08007431 	.word	0x08007431
 8007390:	08007431 	.word	0x08007431
 8007394:	08007431 	.word	0x08007431
 8007398:	08007431 	.word	0x08007431
 800739c:	08007411 	.word	0x08007411
 80073a0:	08007431 	.word	0x08007431
 80073a4:	08007431 	.word	0x08007431
 80073a8:	08007431 	.word	0x08007431
 80073ac:	08007431 	.word	0x08007431
 80073b0:	08007431 	.word	0x08007431
 80073b4:	08007431 	.word	0x08007431
 80073b8:	08007431 	.word	0x08007431
 80073bc:	08007419 	.word	0x08007419
 80073c0:	08007431 	.word	0x08007431
 80073c4:	08007431 	.word	0x08007431
 80073c8:	08007431 	.word	0x08007431
 80073cc:	08007431 	.word	0x08007431
 80073d0:	08007431 	.word	0x08007431
 80073d4:	08007431 	.word	0x08007431
 80073d8:	08007431 	.word	0x08007431
 80073dc:	08007421 	.word	0x08007421
 80073e0:	08007431 	.word	0x08007431
 80073e4:	08007431 	.word	0x08007431
 80073e8:	08007431 	.word	0x08007431
 80073ec:	08007431 	.word	0x08007431
 80073f0:	08007431 	.word	0x08007431
 80073f4:	08007431 	.word	0x08007431
 80073f8:	08007431 	.word	0x08007431
 80073fc:	08007429 	.word	0x08007429
 8007400:	2301      	movs	r3, #1
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007406:	e222      	b.n	800784e <UART_SetConfig+0x5a6>
 8007408:	2304      	movs	r3, #4
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740e:	e21e      	b.n	800784e <UART_SetConfig+0x5a6>
 8007410:	2308      	movs	r3, #8
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007416:	e21a      	b.n	800784e <UART_SetConfig+0x5a6>
 8007418:	2310      	movs	r3, #16
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741e:	e216      	b.n	800784e <UART_SetConfig+0x5a6>
 8007420:	2320      	movs	r3, #32
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007426:	e212      	b.n	800784e <UART_SetConfig+0x5a6>
 8007428:	2340      	movs	r3, #64	; 0x40
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742e:	e20e      	b.n	800784e <UART_SetConfig+0x5a6>
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007436:	e20a      	b.n	800784e <UART_SetConfig+0x5a6>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a69      	ldr	r2, [pc, #420]	; (80075e4 <UART_SetConfig+0x33c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d130      	bne.n	80074a4 <UART_SetConfig+0x1fc>
 8007442:	4b67      	ldr	r3, [pc, #412]	; (80075e0 <UART_SetConfig+0x338>)
 8007444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b05      	cmp	r3, #5
 800744c:	d826      	bhi.n	800749c <UART_SetConfig+0x1f4>
 800744e:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <UART_SetConfig+0x1ac>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	0800746d 	.word	0x0800746d
 8007458:	08007475 	.word	0x08007475
 800745c:	0800747d 	.word	0x0800747d
 8007460:	08007485 	.word	0x08007485
 8007464:	0800748d 	.word	0x0800748d
 8007468:	08007495 	.word	0x08007495
 800746c:	2300      	movs	r3, #0
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e1ec      	b.n	800784e <UART_SetConfig+0x5a6>
 8007474:	2304      	movs	r3, #4
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747a:	e1e8      	b.n	800784e <UART_SetConfig+0x5a6>
 800747c:	2308      	movs	r3, #8
 800747e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007482:	e1e4      	b.n	800784e <UART_SetConfig+0x5a6>
 8007484:	2310      	movs	r3, #16
 8007486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748a:	e1e0      	b.n	800784e <UART_SetConfig+0x5a6>
 800748c:	2320      	movs	r3, #32
 800748e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007492:	e1dc      	b.n	800784e <UART_SetConfig+0x5a6>
 8007494:	2340      	movs	r3, #64	; 0x40
 8007496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800749a:	e1d8      	b.n	800784e <UART_SetConfig+0x5a6>
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a2:	e1d4      	b.n	800784e <UART_SetConfig+0x5a6>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a4f      	ldr	r2, [pc, #316]	; (80075e8 <UART_SetConfig+0x340>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d130      	bne.n	8007510 <UART_SetConfig+0x268>
 80074ae:	4b4c      	ldr	r3, [pc, #304]	; (80075e0 <UART_SetConfig+0x338>)
 80074b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	2b05      	cmp	r3, #5
 80074b8:	d826      	bhi.n	8007508 <UART_SetConfig+0x260>
 80074ba:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <UART_SetConfig+0x218>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074d9 	.word	0x080074d9
 80074c4:	080074e1 	.word	0x080074e1
 80074c8:	080074e9 	.word	0x080074e9
 80074cc:	080074f1 	.word	0x080074f1
 80074d0:	080074f9 	.word	0x080074f9
 80074d4:	08007501 	.word	0x08007501
 80074d8:	2300      	movs	r3, #0
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074de:	e1b6      	b.n	800784e <UART_SetConfig+0x5a6>
 80074e0:	2304      	movs	r3, #4
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e6:	e1b2      	b.n	800784e <UART_SetConfig+0x5a6>
 80074e8:	2308      	movs	r3, #8
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ee:	e1ae      	b.n	800784e <UART_SetConfig+0x5a6>
 80074f0:	2310      	movs	r3, #16
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f6:	e1aa      	b.n	800784e <UART_SetConfig+0x5a6>
 80074f8:	2320      	movs	r3, #32
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fe:	e1a6      	b.n	800784e <UART_SetConfig+0x5a6>
 8007500:	2340      	movs	r3, #64	; 0x40
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007506:	e1a2      	b.n	800784e <UART_SetConfig+0x5a6>
 8007508:	2380      	movs	r3, #128	; 0x80
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750e:	e19e      	b.n	800784e <UART_SetConfig+0x5a6>
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a35      	ldr	r2, [pc, #212]	; (80075ec <UART_SetConfig+0x344>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d130      	bne.n	800757c <UART_SetConfig+0x2d4>
 800751a:	4b31      	ldr	r3, [pc, #196]	; (80075e0 <UART_SetConfig+0x338>)
 800751c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	2b05      	cmp	r3, #5
 8007524:	d826      	bhi.n	8007574 <UART_SetConfig+0x2cc>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <UART_SetConfig+0x284>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	08007545 	.word	0x08007545
 8007530:	0800754d 	.word	0x0800754d
 8007534:	08007555 	.word	0x08007555
 8007538:	0800755d 	.word	0x0800755d
 800753c:	08007565 	.word	0x08007565
 8007540:	0800756d 	.word	0x0800756d
 8007544:	2300      	movs	r3, #0
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800754a:	e180      	b.n	800784e <UART_SetConfig+0x5a6>
 800754c:	2304      	movs	r3, #4
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007552:	e17c      	b.n	800784e <UART_SetConfig+0x5a6>
 8007554:	2308      	movs	r3, #8
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755a:	e178      	b.n	800784e <UART_SetConfig+0x5a6>
 800755c:	2310      	movs	r3, #16
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007562:	e174      	b.n	800784e <UART_SetConfig+0x5a6>
 8007564:	2320      	movs	r3, #32
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756a:	e170      	b.n	800784e <UART_SetConfig+0x5a6>
 800756c:	2340      	movs	r3, #64	; 0x40
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007572:	e16c      	b.n	800784e <UART_SetConfig+0x5a6>
 8007574:	2380      	movs	r3, #128	; 0x80
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757a:	e168      	b.n	800784e <UART_SetConfig+0x5a6>
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a1b      	ldr	r2, [pc, #108]	; (80075f0 <UART_SetConfig+0x348>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d142      	bne.n	800760c <UART_SetConfig+0x364>
 8007586:	4b16      	ldr	r3, [pc, #88]	; (80075e0 <UART_SetConfig+0x338>)
 8007588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758a:	f003 0307 	and.w	r3, r3, #7
 800758e:	2b05      	cmp	r3, #5
 8007590:	d838      	bhi.n	8007604 <UART_SetConfig+0x35c>
 8007592:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <UART_SetConfig+0x2f0>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	080075b1 	.word	0x080075b1
 800759c:	080075b9 	.word	0x080075b9
 80075a0:	080075c1 	.word	0x080075c1
 80075a4:	080075c9 	.word	0x080075c9
 80075a8:	080075f5 	.word	0x080075f5
 80075ac:	080075fd 	.word	0x080075fd
 80075b0:	2300      	movs	r3, #0
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075b6:	e14a      	b.n	800784e <UART_SetConfig+0x5a6>
 80075b8:	2304      	movs	r3, #4
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075be:	e146      	b.n	800784e <UART_SetConfig+0x5a6>
 80075c0:	2308      	movs	r3, #8
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c6:	e142      	b.n	800784e <UART_SetConfig+0x5a6>
 80075c8:	2310      	movs	r3, #16
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ce:	e13e      	b.n	800784e <UART_SetConfig+0x5a6>
 80075d0:	cfff69f3 	.word	0xcfff69f3
 80075d4:	58000c00 	.word	0x58000c00
 80075d8:	11fff4ff 	.word	0x11fff4ff
 80075dc:	40011000 	.word	0x40011000
 80075e0:	58024400 	.word	0x58024400
 80075e4:	40004400 	.word	0x40004400
 80075e8:	40004800 	.word	0x40004800
 80075ec:	40004c00 	.word	0x40004c00
 80075f0:	40005000 	.word	0x40005000
 80075f4:	2320      	movs	r3, #32
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fa:	e128      	b.n	800784e <UART_SetConfig+0x5a6>
 80075fc:	2340      	movs	r3, #64	; 0x40
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007602:	e124      	b.n	800784e <UART_SetConfig+0x5a6>
 8007604:	2380      	movs	r3, #128	; 0x80
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760a:	e120      	b.n	800784e <UART_SetConfig+0x5a6>
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4acb      	ldr	r2, [pc, #812]	; (8007940 <UART_SetConfig+0x698>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d176      	bne.n	8007704 <UART_SetConfig+0x45c>
 8007616:	4bcb      	ldr	r3, [pc, #812]	; (8007944 <UART_SetConfig+0x69c>)
 8007618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800761e:	2b28      	cmp	r3, #40	; 0x28
 8007620:	d86c      	bhi.n	80076fc <UART_SetConfig+0x454>
 8007622:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <UART_SetConfig+0x380>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	080076cd 	.word	0x080076cd
 800762c:	080076fd 	.word	0x080076fd
 8007630:	080076fd 	.word	0x080076fd
 8007634:	080076fd 	.word	0x080076fd
 8007638:	080076fd 	.word	0x080076fd
 800763c:	080076fd 	.word	0x080076fd
 8007640:	080076fd 	.word	0x080076fd
 8007644:	080076fd 	.word	0x080076fd
 8007648:	080076d5 	.word	0x080076d5
 800764c:	080076fd 	.word	0x080076fd
 8007650:	080076fd 	.word	0x080076fd
 8007654:	080076fd 	.word	0x080076fd
 8007658:	080076fd 	.word	0x080076fd
 800765c:	080076fd 	.word	0x080076fd
 8007660:	080076fd 	.word	0x080076fd
 8007664:	080076fd 	.word	0x080076fd
 8007668:	080076dd 	.word	0x080076dd
 800766c:	080076fd 	.word	0x080076fd
 8007670:	080076fd 	.word	0x080076fd
 8007674:	080076fd 	.word	0x080076fd
 8007678:	080076fd 	.word	0x080076fd
 800767c:	080076fd 	.word	0x080076fd
 8007680:	080076fd 	.word	0x080076fd
 8007684:	080076fd 	.word	0x080076fd
 8007688:	080076e5 	.word	0x080076e5
 800768c:	080076fd 	.word	0x080076fd
 8007690:	080076fd 	.word	0x080076fd
 8007694:	080076fd 	.word	0x080076fd
 8007698:	080076fd 	.word	0x080076fd
 800769c:	080076fd 	.word	0x080076fd
 80076a0:	080076fd 	.word	0x080076fd
 80076a4:	080076fd 	.word	0x080076fd
 80076a8:	080076ed 	.word	0x080076ed
 80076ac:	080076fd 	.word	0x080076fd
 80076b0:	080076fd 	.word	0x080076fd
 80076b4:	080076fd 	.word	0x080076fd
 80076b8:	080076fd 	.word	0x080076fd
 80076bc:	080076fd 	.word	0x080076fd
 80076c0:	080076fd 	.word	0x080076fd
 80076c4:	080076fd 	.word	0x080076fd
 80076c8:	080076f5 	.word	0x080076f5
 80076cc:	2301      	movs	r3, #1
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d2:	e0bc      	b.n	800784e <UART_SetConfig+0x5a6>
 80076d4:	2304      	movs	r3, #4
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076da:	e0b8      	b.n	800784e <UART_SetConfig+0x5a6>
 80076dc:	2308      	movs	r3, #8
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e2:	e0b4      	b.n	800784e <UART_SetConfig+0x5a6>
 80076e4:	2310      	movs	r3, #16
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ea:	e0b0      	b.n	800784e <UART_SetConfig+0x5a6>
 80076ec:	2320      	movs	r3, #32
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f2:	e0ac      	b.n	800784e <UART_SetConfig+0x5a6>
 80076f4:	2340      	movs	r3, #64	; 0x40
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fa:	e0a8      	b.n	800784e <UART_SetConfig+0x5a6>
 80076fc:	2380      	movs	r3, #128	; 0x80
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007702:	e0a4      	b.n	800784e <UART_SetConfig+0x5a6>
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a8f      	ldr	r2, [pc, #572]	; (8007948 <UART_SetConfig+0x6a0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d130      	bne.n	8007770 <UART_SetConfig+0x4c8>
 800770e:	4b8d      	ldr	r3, [pc, #564]	; (8007944 <UART_SetConfig+0x69c>)
 8007710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	2b05      	cmp	r3, #5
 8007718:	d826      	bhi.n	8007768 <UART_SetConfig+0x4c0>
 800771a:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <UART_SetConfig+0x478>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	08007739 	.word	0x08007739
 8007724:	08007741 	.word	0x08007741
 8007728:	08007749 	.word	0x08007749
 800772c:	08007751 	.word	0x08007751
 8007730:	08007759 	.word	0x08007759
 8007734:	08007761 	.word	0x08007761
 8007738:	2300      	movs	r3, #0
 800773a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800773e:	e086      	b.n	800784e <UART_SetConfig+0x5a6>
 8007740:	2304      	movs	r3, #4
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007746:	e082      	b.n	800784e <UART_SetConfig+0x5a6>
 8007748:	2308      	movs	r3, #8
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774e:	e07e      	b.n	800784e <UART_SetConfig+0x5a6>
 8007750:	2310      	movs	r3, #16
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007756:	e07a      	b.n	800784e <UART_SetConfig+0x5a6>
 8007758:	2320      	movs	r3, #32
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775e:	e076      	b.n	800784e <UART_SetConfig+0x5a6>
 8007760:	2340      	movs	r3, #64	; 0x40
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007766:	e072      	b.n	800784e <UART_SetConfig+0x5a6>
 8007768:	2380      	movs	r3, #128	; 0x80
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776e:	e06e      	b.n	800784e <UART_SetConfig+0x5a6>
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a75      	ldr	r2, [pc, #468]	; (800794c <UART_SetConfig+0x6a4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d130      	bne.n	80077dc <UART_SetConfig+0x534>
 800777a:	4b72      	ldr	r3, [pc, #456]	; (8007944 <UART_SetConfig+0x69c>)
 800777c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	2b05      	cmp	r3, #5
 8007784:	d826      	bhi.n	80077d4 <UART_SetConfig+0x52c>
 8007786:	a201      	add	r2, pc, #4	; (adr r2, 800778c <UART_SetConfig+0x4e4>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	080077a5 	.word	0x080077a5
 8007790:	080077ad 	.word	0x080077ad
 8007794:	080077b5 	.word	0x080077b5
 8007798:	080077bd 	.word	0x080077bd
 800779c:	080077c5 	.word	0x080077c5
 80077a0:	080077cd 	.word	0x080077cd
 80077a4:	2300      	movs	r3, #0
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077aa:	e050      	b.n	800784e <UART_SetConfig+0x5a6>
 80077ac:	2304      	movs	r3, #4
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b2:	e04c      	b.n	800784e <UART_SetConfig+0x5a6>
 80077b4:	2308      	movs	r3, #8
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ba:	e048      	b.n	800784e <UART_SetConfig+0x5a6>
 80077bc:	2310      	movs	r3, #16
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c2:	e044      	b.n	800784e <UART_SetConfig+0x5a6>
 80077c4:	2320      	movs	r3, #32
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ca:	e040      	b.n	800784e <UART_SetConfig+0x5a6>
 80077cc:	2340      	movs	r3, #64	; 0x40
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d2:	e03c      	b.n	800784e <UART_SetConfig+0x5a6>
 80077d4:	2380      	movs	r3, #128	; 0x80
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077da:	e038      	b.n	800784e <UART_SetConfig+0x5a6>
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a5b      	ldr	r2, [pc, #364]	; (8007950 <UART_SetConfig+0x6a8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d130      	bne.n	8007848 <UART_SetConfig+0x5a0>
 80077e6:	4b57      	ldr	r3, [pc, #348]	; (8007944 <UART_SetConfig+0x69c>)
 80077e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	2b05      	cmp	r3, #5
 80077f0:	d826      	bhi.n	8007840 <UART_SetConfig+0x598>
 80077f2:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <UART_SetConfig+0x550>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	08007811 	.word	0x08007811
 80077fc:	08007819 	.word	0x08007819
 8007800:	08007821 	.word	0x08007821
 8007804:	08007829 	.word	0x08007829
 8007808:	08007831 	.word	0x08007831
 800780c:	08007839 	.word	0x08007839
 8007810:	2302      	movs	r3, #2
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007816:	e01a      	b.n	800784e <UART_SetConfig+0x5a6>
 8007818:	2304      	movs	r3, #4
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800781e:	e016      	b.n	800784e <UART_SetConfig+0x5a6>
 8007820:	2308      	movs	r3, #8
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007826:	e012      	b.n	800784e <UART_SetConfig+0x5a6>
 8007828:	2310      	movs	r3, #16
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800782e:	e00e      	b.n	800784e <UART_SetConfig+0x5a6>
 8007830:	2320      	movs	r3, #32
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007836:	e00a      	b.n	800784e <UART_SetConfig+0x5a6>
 8007838:	2340      	movs	r3, #64	; 0x40
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783e:	e006      	b.n	800784e <UART_SetConfig+0x5a6>
 8007840:	2380      	movs	r3, #128	; 0x80
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007846:	e002      	b.n	800784e <UART_SetConfig+0x5a6>
 8007848:	2380      	movs	r3, #128	; 0x80
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a3f      	ldr	r2, [pc, #252]	; (8007950 <UART_SetConfig+0x6a8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	f040 80f8 	bne.w	8007a4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800785a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800785e:	2b20      	cmp	r3, #32
 8007860:	dc46      	bgt.n	80078f0 <UART_SetConfig+0x648>
 8007862:	2b02      	cmp	r3, #2
 8007864:	f2c0 8082 	blt.w	800796c <UART_SetConfig+0x6c4>
 8007868:	3b02      	subs	r3, #2
 800786a:	2b1e      	cmp	r3, #30
 800786c:	d87e      	bhi.n	800796c <UART_SetConfig+0x6c4>
 800786e:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <UART_SetConfig+0x5cc>)
 8007870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007874:	080078f7 	.word	0x080078f7
 8007878:	0800796d 	.word	0x0800796d
 800787c:	080078ff 	.word	0x080078ff
 8007880:	0800796d 	.word	0x0800796d
 8007884:	0800796d 	.word	0x0800796d
 8007888:	0800796d 	.word	0x0800796d
 800788c:	0800790f 	.word	0x0800790f
 8007890:	0800796d 	.word	0x0800796d
 8007894:	0800796d 	.word	0x0800796d
 8007898:	0800796d 	.word	0x0800796d
 800789c:	0800796d 	.word	0x0800796d
 80078a0:	0800796d 	.word	0x0800796d
 80078a4:	0800796d 	.word	0x0800796d
 80078a8:	0800796d 	.word	0x0800796d
 80078ac:	0800791f 	.word	0x0800791f
 80078b0:	0800796d 	.word	0x0800796d
 80078b4:	0800796d 	.word	0x0800796d
 80078b8:	0800796d 	.word	0x0800796d
 80078bc:	0800796d 	.word	0x0800796d
 80078c0:	0800796d 	.word	0x0800796d
 80078c4:	0800796d 	.word	0x0800796d
 80078c8:	0800796d 	.word	0x0800796d
 80078cc:	0800796d 	.word	0x0800796d
 80078d0:	0800796d 	.word	0x0800796d
 80078d4:	0800796d 	.word	0x0800796d
 80078d8:	0800796d 	.word	0x0800796d
 80078dc:	0800796d 	.word	0x0800796d
 80078e0:	0800796d 	.word	0x0800796d
 80078e4:	0800796d 	.word	0x0800796d
 80078e8:	0800796d 	.word	0x0800796d
 80078ec:	0800795f 	.word	0x0800795f
 80078f0:	2b40      	cmp	r3, #64	; 0x40
 80078f2:	d037      	beq.n	8007964 <UART_SetConfig+0x6bc>
 80078f4:	e03a      	b.n	800796c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80078f6:	f7fe f8a5 	bl	8005a44 <HAL_RCCEx_GetD3PCLK1Freq>
 80078fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80078fc:	e03c      	b.n	8007978 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe f8b4 	bl	8005a70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800790c:	e034      	b.n	8007978 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800790e:	f107 0318 	add.w	r3, r7, #24
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fa00 	bl	8005d18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800791c:	e02c      	b.n	8007978 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800791e:	4b09      	ldr	r3, [pc, #36]	; (8007944 <UART_SetConfig+0x69c>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0320 	and.w	r3, r3, #32
 8007926:	2b00      	cmp	r3, #0
 8007928:	d016      	beq.n	8007958 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800792a:	4b06      	ldr	r3, [pc, #24]	; (8007944 <UART_SetConfig+0x69c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	08db      	lsrs	r3, r3, #3
 8007930:	f003 0303 	and.w	r3, r3, #3
 8007934:	4a07      	ldr	r2, [pc, #28]	; (8007954 <UART_SetConfig+0x6ac>)
 8007936:	fa22 f303 	lsr.w	r3, r2, r3
 800793a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800793c:	e01c      	b.n	8007978 <UART_SetConfig+0x6d0>
 800793e:	bf00      	nop
 8007940:	40011400 	.word	0x40011400
 8007944:	58024400 	.word	0x58024400
 8007948:	40007800 	.word	0x40007800
 800794c:	40007c00 	.word	0x40007c00
 8007950:	58000c00 	.word	0x58000c00
 8007954:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007958:	4b9d      	ldr	r3, [pc, #628]	; (8007bd0 <UART_SetConfig+0x928>)
 800795a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800795c:	e00c      	b.n	8007978 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800795e:	4b9d      	ldr	r3, [pc, #628]	; (8007bd4 <UART_SetConfig+0x92c>)
 8007960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007962:	e009      	b.n	8007978 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800796a:	e005      	b.n	8007978 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007976:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 81de 	beq.w	8007d3c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	4a94      	ldr	r2, [pc, #592]	; (8007bd8 <UART_SetConfig+0x930>)
 8007986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800798a:	461a      	mov	r2, r3
 800798c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007992:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	4613      	mov	r3, r2
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	4413      	add	r3, r2
 800799e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d305      	bcc.n	80079b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d903      	bls.n	80079b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80079b6:	e1c1      	b.n	8007d3c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ba:	2200      	movs	r2, #0
 80079bc:	60bb      	str	r3, [r7, #8]
 80079be:	60fa      	str	r2, [r7, #12]
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	4a84      	ldr	r2, [pc, #528]	; (8007bd8 <UART_SetConfig+0x930>)
 80079c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	2200      	movs	r2, #0
 80079ce:	603b      	str	r3, [r7, #0]
 80079d0:	607a      	str	r2, [r7, #4]
 80079d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079da:	f7f8 fcd9 	bl	8000390 <__aeabi_uldivmod>
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4610      	mov	r0, r2
 80079e4:	4619      	mov	r1, r3
 80079e6:	f04f 0200 	mov.w	r2, #0
 80079ea:	f04f 0300 	mov.w	r3, #0
 80079ee:	020b      	lsls	r3, r1, #8
 80079f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079f4:	0202      	lsls	r2, r0, #8
 80079f6:	6979      	ldr	r1, [r7, #20]
 80079f8:	6849      	ldr	r1, [r1, #4]
 80079fa:	0849      	lsrs	r1, r1, #1
 80079fc:	2000      	movs	r0, #0
 80079fe:	460c      	mov	r4, r1
 8007a00:	4605      	mov	r5, r0
 8007a02:	eb12 0804 	adds.w	r8, r2, r4
 8007a06:	eb43 0905 	adc.w	r9, r3, r5
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	469a      	mov	sl, r3
 8007a12:	4693      	mov	fp, r2
 8007a14:	4652      	mov	r2, sl
 8007a16:	465b      	mov	r3, fp
 8007a18:	4640      	mov	r0, r8
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	f7f8 fcb8 	bl	8000390 <__aeabi_uldivmod>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4613      	mov	r3, r2
 8007a26:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a2e:	d308      	bcc.n	8007a42 <UART_SetConfig+0x79a>
 8007a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a36:	d204      	bcs.n	8007a42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a3e:	60da      	str	r2, [r3, #12]
 8007a40:	e17c      	b.n	8007d3c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a48:	e178      	b.n	8007d3c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a52:	f040 80c5 	bne.w	8007be0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007a56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	dc48      	bgt.n	8007af0 <UART_SetConfig+0x848>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	db7b      	blt.n	8007b5a <UART_SetConfig+0x8b2>
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	d879      	bhi.n	8007b5a <UART_SetConfig+0x8b2>
 8007a66:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <UART_SetConfig+0x7c4>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007af7 	.word	0x08007af7
 8007a70:	08007aff 	.word	0x08007aff
 8007a74:	08007b5b 	.word	0x08007b5b
 8007a78:	08007b5b 	.word	0x08007b5b
 8007a7c:	08007b07 	.word	0x08007b07
 8007a80:	08007b5b 	.word	0x08007b5b
 8007a84:	08007b5b 	.word	0x08007b5b
 8007a88:	08007b5b 	.word	0x08007b5b
 8007a8c:	08007b17 	.word	0x08007b17
 8007a90:	08007b5b 	.word	0x08007b5b
 8007a94:	08007b5b 	.word	0x08007b5b
 8007a98:	08007b5b 	.word	0x08007b5b
 8007a9c:	08007b5b 	.word	0x08007b5b
 8007aa0:	08007b5b 	.word	0x08007b5b
 8007aa4:	08007b5b 	.word	0x08007b5b
 8007aa8:	08007b5b 	.word	0x08007b5b
 8007aac:	08007b27 	.word	0x08007b27
 8007ab0:	08007b5b 	.word	0x08007b5b
 8007ab4:	08007b5b 	.word	0x08007b5b
 8007ab8:	08007b5b 	.word	0x08007b5b
 8007abc:	08007b5b 	.word	0x08007b5b
 8007ac0:	08007b5b 	.word	0x08007b5b
 8007ac4:	08007b5b 	.word	0x08007b5b
 8007ac8:	08007b5b 	.word	0x08007b5b
 8007acc:	08007b5b 	.word	0x08007b5b
 8007ad0:	08007b5b 	.word	0x08007b5b
 8007ad4:	08007b5b 	.word	0x08007b5b
 8007ad8:	08007b5b 	.word	0x08007b5b
 8007adc:	08007b5b 	.word	0x08007b5b
 8007ae0:	08007b5b 	.word	0x08007b5b
 8007ae4:	08007b5b 	.word	0x08007b5b
 8007ae8:	08007b5b 	.word	0x08007b5b
 8007aec:	08007b4d 	.word	0x08007b4d
 8007af0:	2b40      	cmp	r3, #64	; 0x40
 8007af2:	d02e      	beq.n	8007b52 <UART_SetConfig+0x8aa>
 8007af4:	e031      	b.n	8007b5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007af6:	f7fd f833 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 8007afa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007afc:	e033      	b.n	8007b66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007afe:	f7fd f845 	bl	8004b8c <HAL_RCC_GetPCLK2Freq>
 8007b02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b04:	e02f      	b.n	8007b66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fd ffb0 	bl	8005a70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b14:	e027      	b.n	8007b66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b16:	f107 0318 	add.w	r3, r7, #24
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe f8fc 	bl	8005d18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b24:	e01f      	b.n	8007b66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b26:	4b2d      	ldr	r3, [pc, #180]	; (8007bdc <UART_SetConfig+0x934>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0320 	and.w	r3, r3, #32
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b32:	4b2a      	ldr	r3, [pc, #168]	; (8007bdc <UART_SetConfig+0x934>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	08db      	lsrs	r3, r3, #3
 8007b38:	f003 0303 	and.w	r3, r3, #3
 8007b3c:	4a24      	ldr	r2, [pc, #144]	; (8007bd0 <UART_SetConfig+0x928>)
 8007b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b44:	e00f      	b.n	8007b66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007b46:	4b22      	ldr	r3, [pc, #136]	; (8007bd0 <UART_SetConfig+0x928>)
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b4a:	e00c      	b.n	8007b66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b4c:	4b21      	ldr	r3, [pc, #132]	; (8007bd4 <UART_SetConfig+0x92c>)
 8007b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b50:	e009      	b.n	8007b66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b58:	e005      	b.n	8007b66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80e7 	beq.w	8007d3c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	4a19      	ldr	r2, [pc, #100]	; (8007bd8 <UART_SetConfig+0x930>)
 8007b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b80:	005a      	lsls	r2, r3, #1
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	085b      	lsrs	r3, r3, #1
 8007b88:	441a      	add	r2, r3
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b92:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	2b0f      	cmp	r3, #15
 8007b98:	d916      	bls.n	8007bc8 <UART_SetConfig+0x920>
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba0:	d212      	bcs.n	8007bc8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	f023 030f 	bic.w	r3, r3, #15
 8007baa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bae:	085b      	lsrs	r3, r3, #1
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007bc4:	60da      	str	r2, [r3, #12]
 8007bc6:	e0b9      	b.n	8007d3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007bce:	e0b5      	b.n	8007d3c <UART_SetConfig+0xa94>
 8007bd0:	03d09000 	.word	0x03d09000
 8007bd4:	003d0900 	.word	0x003d0900
 8007bd8:	0800c364 	.word	0x0800c364
 8007bdc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007be0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	dc49      	bgt.n	8007c7c <UART_SetConfig+0x9d4>
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	db7c      	blt.n	8007ce6 <UART_SetConfig+0xa3e>
 8007bec:	2b20      	cmp	r3, #32
 8007bee:	d87a      	bhi.n	8007ce6 <UART_SetConfig+0xa3e>
 8007bf0:	a201      	add	r2, pc, #4	; (adr r2, 8007bf8 <UART_SetConfig+0x950>)
 8007bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf6:	bf00      	nop
 8007bf8:	08007c83 	.word	0x08007c83
 8007bfc:	08007c8b 	.word	0x08007c8b
 8007c00:	08007ce7 	.word	0x08007ce7
 8007c04:	08007ce7 	.word	0x08007ce7
 8007c08:	08007c93 	.word	0x08007c93
 8007c0c:	08007ce7 	.word	0x08007ce7
 8007c10:	08007ce7 	.word	0x08007ce7
 8007c14:	08007ce7 	.word	0x08007ce7
 8007c18:	08007ca3 	.word	0x08007ca3
 8007c1c:	08007ce7 	.word	0x08007ce7
 8007c20:	08007ce7 	.word	0x08007ce7
 8007c24:	08007ce7 	.word	0x08007ce7
 8007c28:	08007ce7 	.word	0x08007ce7
 8007c2c:	08007ce7 	.word	0x08007ce7
 8007c30:	08007ce7 	.word	0x08007ce7
 8007c34:	08007ce7 	.word	0x08007ce7
 8007c38:	08007cb3 	.word	0x08007cb3
 8007c3c:	08007ce7 	.word	0x08007ce7
 8007c40:	08007ce7 	.word	0x08007ce7
 8007c44:	08007ce7 	.word	0x08007ce7
 8007c48:	08007ce7 	.word	0x08007ce7
 8007c4c:	08007ce7 	.word	0x08007ce7
 8007c50:	08007ce7 	.word	0x08007ce7
 8007c54:	08007ce7 	.word	0x08007ce7
 8007c58:	08007ce7 	.word	0x08007ce7
 8007c5c:	08007ce7 	.word	0x08007ce7
 8007c60:	08007ce7 	.word	0x08007ce7
 8007c64:	08007ce7 	.word	0x08007ce7
 8007c68:	08007ce7 	.word	0x08007ce7
 8007c6c:	08007ce7 	.word	0x08007ce7
 8007c70:	08007ce7 	.word	0x08007ce7
 8007c74:	08007ce7 	.word	0x08007ce7
 8007c78:	08007cd9 	.word	0x08007cd9
 8007c7c:	2b40      	cmp	r3, #64	; 0x40
 8007c7e:	d02e      	beq.n	8007cde <UART_SetConfig+0xa36>
 8007c80:	e031      	b.n	8007ce6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c82:	f7fc ff6d 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 8007c86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c88:	e033      	b.n	8007cf2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c8a:	f7fc ff7f 	bl	8004b8c <HAL_RCC_GetPCLK2Freq>
 8007c8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c90:	e02f      	b.n	8007cf2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fd feea 	bl	8005a70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ca0:	e027      	b.n	8007cf2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ca2:	f107 0318 	add.w	r3, r7, #24
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe f836 	bl	8005d18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cb0:	e01f      	b.n	8007cf2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cb2:	4b2d      	ldr	r3, [pc, #180]	; (8007d68 <UART_SetConfig+0xac0>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d009      	beq.n	8007cd2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cbe:	4b2a      	ldr	r3, [pc, #168]	; (8007d68 <UART_SetConfig+0xac0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	08db      	lsrs	r3, r3, #3
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	4a28      	ldr	r2, [pc, #160]	; (8007d6c <UART_SetConfig+0xac4>)
 8007cca:	fa22 f303 	lsr.w	r3, r2, r3
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cd0:	e00f      	b.n	8007cf2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007cd2:	4b26      	ldr	r3, [pc, #152]	; (8007d6c <UART_SetConfig+0xac4>)
 8007cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd6:	e00c      	b.n	8007cf2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cd8:	4b25      	ldr	r3, [pc, #148]	; (8007d70 <UART_SetConfig+0xac8>)
 8007cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cdc:	e009      	b.n	8007cf2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ce4:	e005      	b.n	8007cf2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007cf0:	bf00      	nop
    }

    if (pclk != 0U)
 8007cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d021      	beq.n	8007d3c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	4a1d      	ldr	r2, [pc, #116]	; (8007d74 <UART_SetConfig+0xacc>)
 8007cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d02:	461a      	mov	r2, r3
 8007d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d06:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	085b      	lsrs	r3, r3, #1
 8007d10:	441a      	add	r2, r3
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	2b0f      	cmp	r3, #15
 8007d20:	d909      	bls.n	8007d36 <UART_SetConfig+0xa8e>
 8007d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d28:	d205      	bcs.n	8007d36 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	60da      	str	r2, [r3, #12]
 8007d34:	e002      	b.n	8007d3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2200      	movs	r2, #0
 8007d56:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d58:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3748      	adds	r7, #72	; 0x48
 8007d60:	46bd      	mov	sp, r7
 8007d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d66:	bf00      	nop
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	03d09000 	.word	0x03d09000
 8007d70:	003d0900 	.word	0x003d0900
 8007d74:	0800c364 	.word	0x0800c364

08007d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc8:	f003 0304 	and.w	r3, r3, #4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dea:	f003 0308 	and.w	r3, r3, #8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	f003 0310 	and.w	r3, r3, #16
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01a      	beq.n	8007e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e76:	d10a      	bne.n	8007e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	605a      	str	r2, [r3, #4]
  }
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ecc:	f7f9 fd42 	bl	8001954 <HAL_GetTick>
 8007ed0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	d10e      	bne.n	8007efe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f82f 	bl	8007f52 <UART_WaitOnFlagUntilTimeout>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e025      	b.n	8007f4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d10e      	bne.n	8007f2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f819 	bl	8007f52 <UART_WaitOnFlagUntilTimeout>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e00f      	b.n	8007f4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b09c      	sub	sp, #112	; 0x70
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	603b      	str	r3, [r7, #0]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f62:	e0a9      	b.n	80080b8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6a:	f000 80a5 	beq.w	80080b8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f6e:	f7f9 fcf1 	bl	8001954 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d302      	bcc.n	8007f84 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d140      	bne.n	8008006 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f98:	667b      	str	r3, [r7, #100]	; 0x64
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fa4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007faa:	e841 2300 	strex	r3, r2, [r1]
 8007fae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e6      	bne.n	8007f84 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3308      	adds	r3, #8
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	f023 0301 	bic.w	r3, r3, #1
 8007fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e5      	bne.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e069      	b.n	80080da <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d051      	beq.n	80080b8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800801e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008022:	d149      	bne.n	80080b8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800802c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008042:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804c:	637b      	str	r3, [r7, #52]	; 0x34
 800804e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e6      	bne.n	800802e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3308      	adds	r3, #8
 8008066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	e853 3f00 	ldrex	r3, [r3]
 800806e:	613b      	str	r3, [r7, #16]
   return(result);
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f023 0301 	bic.w	r3, r3, #1
 8008076:	66bb      	str	r3, [r7, #104]	; 0x68
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3308      	adds	r3, #8
 800807e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008080:	623a      	str	r2, [r7, #32]
 8008082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008084:	69f9      	ldr	r1, [r7, #28]
 8008086:	6a3a      	ldr	r2, [r7, #32]
 8008088:	e841 2300 	strex	r3, r2, [r1]
 800808c:	61bb      	str	r3, [r7, #24]
   return(result);
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e5      	bne.n	8008060 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2220      	movs	r2, #32
 8008098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2220      	movs	r2, #32
 80080a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e010      	b.n	80080da <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	69da      	ldr	r2, [r3, #28]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	4013      	ands	r3, r2
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	bf0c      	ite	eq
 80080c8:	2301      	moveq	r3, #1
 80080ca:	2300      	movne	r3, #0
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	461a      	mov	r2, r3
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	f43f af46 	beq.w	8007f64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3770      	adds	r7, #112	; 0x70
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b0a3      	sub	sp, #140	; 0x8c
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4613      	mov	r3, r2
 80080f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	88fa      	ldrh	r2, [r7, #6]
 80080fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	88fa      	ldrh	r2, [r7, #6]
 8008104:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008116:	d10e      	bne.n	8008136 <UART_Start_Receive_IT+0x52>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d105      	bne.n	800812c <UART_Start_Receive_IT+0x48>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008126:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800812a:	e02d      	b.n	8008188 <UART_Start_Receive_IT+0xa4>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	22ff      	movs	r2, #255	; 0xff
 8008130:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008134:	e028      	b.n	8008188 <UART_Start_Receive_IT+0xa4>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10d      	bne.n	800815a <UART_Start_Receive_IT+0x76>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d104      	bne.n	8008150 <UART_Start_Receive_IT+0x6c>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	22ff      	movs	r2, #255	; 0xff
 800814a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800814e:	e01b      	b.n	8008188 <UART_Start_Receive_IT+0xa4>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	227f      	movs	r2, #127	; 0x7f
 8008154:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008158:	e016      	b.n	8008188 <UART_Start_Receive_IT+0xa4>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008162:	d10d      	bne.n	8008180 <UART_Start_Receive_IT+0x9c>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d104      	bne.n	8008176 <UART_Start_Receive_IT+0x92>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	227f      	movs	r2, #127	; 0x7f
 8008170:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008174:	e008      	b.n	8008188 <UART_Start_Receive_IT+0xa4>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	223f      	movs	r2, #63	; 0x3f
 800817a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800817e:	e003      	b.n	8008188 <UART_Start_Receive_IT+0xa4>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2222      	movs	r2, #34	; 0x22
 8008194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3308      	adds	r3, #8
 800819e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081a2:	e853 3f00 	ldrex	r3, [r3]
 80081a6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80081a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081aa:	f043 0301 	orr.w	r3, r3, #1
 80081ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3308      	adds	r3, #8
 80081b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80081bc:	673a      	str	r2, [r7, #112]	; 0x70
 80081be:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80081c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80081c4:	e841 2300 	strex	r3, r2, [r1]
 80081c8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80081ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1e3      	bne.n	8008198 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d8:	d153      	bne.n	8008282 <UART_Start_Receive_IT+0x19e>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081e0:	88fa      	ldrh	r2, [r7, #6]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d34d      	bcc.n	8008282 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ee:	d107      	bne.n	8008200 <UART_Start_Receive_IT+0x11c>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d103      	bne.n	8008200 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4a4b      	ldr	r2, [pc, #300]	; (8008328 <UART_Start_Receive_IT+0x244>)
 80081fc:	671a      	str	r2, [r3, #112]	; 0x70
 80081fe:	e002      	b.n	8008206 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4a4a      	ldr	r2, [pc, #296]	; (800832c <UART_Start_Receive_IT+0x248>)
 8008204:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01a      	beq.n	800824c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800822a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800823a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800823e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e4      	bne.n	8008216 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3308      	adds	r3, #8
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008262:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3308      	adds	r3, #8
 800826a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800826c:	64ba      	str	r2, [r7, #72]	; 0x48
 800826e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800827a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e5      	bne.n	800824c <UART_Start_Receive_IT+0x168>
 8008280:	e04a      	b.n	8008318 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800828a:	d107      	bne.n	800829c <UART_Start_Receive_IT+0x1b8>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d103      	bne.n	800829c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4a26      	ldr	r2, [pc, #152]	; (8008330 <UART_Start_Receive_IT+0x24c>)
 8008298:	671a      	str	r2, [r3, #112]	; 0x70
 800829a:	e002      	b.n	80082a2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4a25      	ldr	r2, [pc, #148]	; (8008334 <UART_Start_Receive_IT+0x250>)
 80082a0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d019      	beq.n	80082e6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ba:	e853 3f00 	ldrex	r3, [r3]
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80082c6:	677b      	str	r3, [r7, #116]	; 0x74
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	461a      	mov	r2, r3
 80082ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
 80082d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082d8:	e841 2300 	strex	r3, r2, [r1]
 80082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e6      	bne.n	80082b2 <UART_Start_Receive_IT+0x1ce>
 80082e4:	e018      	b.n	8008318 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	e853 3f00 	ldrex	r3, [r3]
 80082f2:	613b      	str	r3, [r7, #16]
   return(result);
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f043 0320 	orr.w	r3, r3, #32
 80082fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008304:	623b      	str	r3, [r7, #32]
 8008306:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008308:	69f9      	ldr	r1, [r7, #28]
 800830a:	6a3a      	ldr	r2, [r7, #32]
 800830c:	e841 2300 	strex	r3, r2, [r1]
 8008310:	61bb      	str	r3, [r7, #24]
   return(result);
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e6      	bne.n	80082e6 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	378c      	adds	r7, #140	; 0x8c
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	08008a41 	.word	0x08008a41
 800832c:	08008749 	.word	0x08008749
 8008330:	080085e7 	.word	0x080085e7
 8008334:	08008487 	.word	0x08008487

08008338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008338:	b480      	push	{r7}
 800833a:	b095      	sub	sp, #84	; 0x54
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008354:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800835e:	643b      	str	r3, [r7, #64]	; 0x40
 8008360:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008364:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e6      	bne.n	8008340 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3308      	adds	r3, #8
 8008378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	e853 3f00 	ldrex	r3, [r3]
 8008380:	61fb      	str	r3, [r7, #28]
   return(result);
 8008382:	69fa      	ldr	r2, [r7, #28]
 8008384:	4b1e      	ldr	r3, [pc, #120]	; (8008400 <UART_EndRxTransfer+0xc8>)
 8008386:	4013      	ands	r3, r2
 8008388:	64bb      	str	r3, [r7, #72]	; 0x48
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3308      	adds	r3, #8
 8008390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e5      	bne.n	8008372 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d118      	bne.n	80083e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f023 0310 	bic.w	r3, r3, #16
 80083c2:	647b      	str	r3, [r7, #68]	; 0x44
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083cc:	61bb      	str	r3, [r7, #24]
 80083ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6979      	ldr	r1, [r7, #20]
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	613b      	str	r3, [r7, #16]
   return(result);
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e6      	bne.n	80083ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2220      	movs	r2, #32
 80083e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80083f4:	bf00      	nop
 80083f6:	3754      	adds	r7, #84	; 0x54
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	effffffe 	.word	0xeffffffe

08008404 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7fe ff2a 	bl	800727c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008428:	bf00      	nop
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	60bb      	str	r3, [r7, #8]
   return(result);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800844c:	61fb      	str	r3, [r7, #28]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	61bb      	str	r3, [r7, #24]
 8008458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6979      	ldr	r1, [r7, #20]
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	613b      	str	r3, [r7, #16]
   return(result);
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e6      	bne.n	8008438 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2220      	movs	r2, #32
 800846e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7fe fef5 	bl	8007268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800847e:	bf00      	nop
 8008480:	3720      	adds	r7, #32
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b096      	sub	sp, #88	; 0x58
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008494:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800849e:	2b22      	cmp	r3, #34	; 0x22
 80084a0:	f040 8095 	bne.w	80085ce <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084ae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80084b2:	b2d9      	uxtb	r1, r3
 80084b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084be:	400a      	ands	r2, r1
 80084c0:	b2d2      	uxtb	r2, r2
 80084c2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	b29a      	uxth	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d178      	bne.n	80085de <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008500:	653b      	str	r3, [r7, #80]	; 0x50
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800850a:	647b      	str	r3, [r7, #68]	; 0x44
 800850c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e6      	bne.n	80084ec <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3308      	adds	r3, #8
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	623b      	str	r3, [r7, #32]
   return(result);
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	f023 0301 	bic.w	r3, r3, #1
 8008534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3308      	adds	r3, #8
 800853c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800853e:	633a      	str	r2, [r7, #48]	; 0x30
 8008540:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008546:	e841 2300 	strex	r3, r2, [r1]
 800854a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800854c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1e5      	bne.n	800851e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2220      	movs	r2, #32
 8008556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008564:	2b01      	cmp	r3, #1
 8008566:	d12e      	bne.n	80085c6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	e853 3f00 	ldrex	r3, [r3]
 800857a:	60fb      	str	r3, [r7, #12]
   return(result);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 0310 	bic.w	r3, r3, #16
 8008582:	64bb      	str	r3, [r7, #72]	; 0x48
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	461a      	mov	r2, r3
 800858a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800858c:	61fb      	str	r3, [r7, #28]
 800858e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	69b9      	ldr	r1, [r7, #24]
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	617b      	str	r3, [r7, #20]
   return(result);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e6      	bne.n	800856e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	f003 0310 	and.w	r3, r3, #16
 80085aa:	2b10      	cmp	r3, #16
 80085ac:	d103      	bne.n	80085b6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2210      	movs	r2, #16
 80085b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7fe fe66 	bl	8007290 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085c4:	e00b      	b.n	80085de <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7f8 fd58 	bl	800107c <HAL_UART_RxCpltCallback>
}
 80085cc:	e007      	b.n	80085de <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	699a      	ldr	r2, [r3, #24]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f042 0208 	orr.w	r2, r2, #8
 80085dc:	619a      	str	r2, [r3, #24]
}
 80085de:	bf00      	nop
 80085e0:	3758      	adds	r7, #88	; 0x58
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b096      	sub	sp, #88	; 0x58
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fe:	2b22      	cmp	r3, #34	; 0x22
 8008600:	f040 8095 	bne.w	800872e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008612:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008614:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008618:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800861c:	4013      	ands	r3, r2
 800861e:	b29a      	uxth	r2, r3
 8008620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008622:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008628:	1c9a      	adds	r2, r3, #2
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008634:	b29b      	uxth	r3, r3
 8008636:	3b01      	subs	r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d178      	bne.n	800873e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008660:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866a:	643b      	str	r3, [r7, #64]	; 0x40
 800866c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e6      	bne.n	800864c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3308      	adds	r3, #8
 8008684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	61fb      	str	r3, [r7, #28]
   return(result);
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	f023 0301 	bic.w	r3, r3, #1
 8008694:	64bb      	str	r3, [r7, #72]	; 0x48
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3308      	adds	r3, #8
 800869c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800869e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086a6:	e841 2300 	strex	r3, r2, [r1]
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1e5      	bne.n	800867e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2220      	movs	r2, #32
 80086b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d12e      	bne.n	8008726 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	60bb      	str	r3, [r7, #8]
   return(result);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f023 0310 	bic.w	r3, r3, #16
 80086e2:	647b      	str	r3, [r7, #68]	; 0x44
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	461a      	mov	r2, r3
 80086ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ec:	61bb      	str	r3, [r7, #24]
 80086ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6979      	ldr	r1, [r7, #20]
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	613b      	str	r3, [r7, #16]
   return(result);
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e6      	bne.n	80086ce <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	f003 0310 	and.w	r3, r3, #16
 800870a:	2b10      	cmp	r3, #16
 800870c:	d103      	bne.n	8008716 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2210      	movs	r2, #16
 8008714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7fe fdb6 	bl	8007290 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008724:	e00b      	b.n	800873e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7f8 fca8 	bl	800107c <HAL_UART_RxCpltCallback>
}
 800872c:	e007      	b.n	800873e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	699a      	ldr	r2, [r3, #24]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f042 0208 	orr.w	r2, r2, #8
 800873c:	619a      	str	r2, [r3, #24]
}
 800873e:	bf00      	nop
 8008740:	3758      	adds	r7, #88	; 0x58
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b0a6      	sub	sp, #152	; 0x98
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008756:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800877e:	2b22      	cmp	r3, #34	; 0x22
 8008780:	f040 814d 	bne.w	8008a1e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800878a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800878e:	e0f4      	b.n	800897a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800879a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800879e:	b2d9      	uxtb	r1, r3
 80087a0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087aa:	400a      	ands	r2, r1
 80087ac:	b2d2      	uxtb	r2, r2
 80087ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b4:	1c5a      	adds	r2, r3, #1
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	3b01      	subs	r3, #1
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80087d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d053      	beq.n	800888a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d011      	beq.n	8008812 <UART_RxISR_8BIT_FIFOEN+0xca>
 80087ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00b      	beq.n	8008812 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2201      	movs	r2, #1
 8008800:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008808:	f043 0201 	orr.w	r2, r3, #1
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008812:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d011      	beq.n	8008842 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800881e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00b      	beq.n	8008842 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2202      	movs	r2, #2
 8008830:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008838:	f043 0204 	orr.w	r2, r3, #4
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008842:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008846:	f003 0304 	and.w	r3, r3, #4
 800884a:	2b00      	cmp	r3, #0
 800884c:	d011      	beq.n	8008872 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800884e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00b      	beq.n	8008872 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2204      	movs	r2, #4
 8008860:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008868:	f043 0202 	orr.w	r2, r3, #2
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d006      	beq.n	800888a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7fe fcfd 	bl	800727c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008890:	b29b      	uxth	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d171      	bne.n	800897a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800889e:	e853 3f00 	ldrex	r3, [r3]
 80088a2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80088a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80088ba:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088bc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80088be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088c0:	e841 2300 	strex	r3, r2, [r1]
 80088c4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80088c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e4      	bne.n	8008896 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3308      	adds	r3, #8
 80088d2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088d6:	e853 3f00 	ldrex	r3, [r3]
 80088da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80088dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088de:	4b56      	ldr	r3, [pc, #344]	; (8008a38 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3308      	adds	r3, #8
 80088ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80088ec:	657a      	str	r2, [r7, #84]	; 0x54
 80088ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088f4:	e841 2300 	strex	r3, r2, [r1]
 80088f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1e5      	bne.n	80088cc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2220      	movs	r2, #32
 8008904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008912:	2b01      	cmp	r3, #1
 8008914:	d12e      	bne.n	8008974 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	f023 0310 	bic.w	r3, r3, #16
 8008930:	67bb      	str	r3, [r7, #120]	; 0x78
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800893a:	643b      	str	r3, [r7, #64]	; 0x40
 800893c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008940:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008942:	e841 2300 	strex	r3, r2, [r1]
 8008946:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1e6      	bne.n	800891c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	f003 0310 	and.w	r3, r3, #16
 8008958:	2b10      	cmp	r3, #16
 800895a:	d103      	bne.n	8008964 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2210      	movs	r2, #16
 8008962:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7fe fc8f 	bl	8007290 <HAL_UARTEx_RxEventCallback>
 8008972:	e002      	b.n	800897a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7f8 fb81 	bl	800107c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800897a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800897e:	2b00      	cmp	r3, #0
 8008980:	d006      	beq.n	8008990 <UART_RxISR_8BIT_FIFOEN+0x248>
 8008982:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008986:	f003 0320 	and.w	r3, r3, #32
 800898a:	2b00      	cmp	r3, #0
 800898c:	f47f af00 	bne.w	8008790 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008996:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800899a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d045      	beq.n	8008a2e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d23e      	bcs.n	8008a2e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3308      	adds	r3, #8
 80089b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	e853 3f00 	ldrex	r3, [r3]
 80089be:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089c6:	673b      	str	r3, [r7, #112]	; 0x70
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3308      	adds	r3, #8
 80089ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e5      	bne.n	80089b0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a15      	ldr	r2, [pc, #84]	; (8008a3c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80089e8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f043 0320 	orr.w	r3, r3, #32
 80089fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	461a      	mov	r2, r3
 8008a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a08:	61bb      	str	r3, [r7, #24]
 8008a0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	6979      	ldr	r1, [r7, #20]
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	613b      	str	r3, [r7, #16]
   return(result);
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e6      	bne.n	80089ea <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a1c:	e007      	b.n	8008a2e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	699a      	ldr	r2, [r3, #24]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f042 0208 	orr.w	r2, r2, #8
 8008a2c:	619a      	str	r2, [r3, #24]
}
 8008a2e:	bf00      	nop
 8008a30:	3798      	adds	r7, #152	; 0x98
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	effffffe 	.word	0xeffffffe
 8008a3c:	08008487 	.word	0x08008487

08008a40 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b0a8      	sub	sp, #160	; 0xa0
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a4e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a76:	2b22      	cmp	r3, #34	; 0x22
 8008a78:	f040 8151 	bne.w	8008d1e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a82:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a86:	e0f8      	b.n	8008c7a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008a9a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008a9e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008aaa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab0:	1c9a      	adds	r2, r3, #2
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ad2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d053      	beq.n	8008b86 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ade:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d011      	beq.n	8008b0e <UART_RxISR_16BIT_FIFOEN+0xce>
 8008aea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00b      	beq.n	8008b0e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2201      	movs	r2, #1
 8008afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b04:	f043 0201 	orr.w	r2, r3, #1
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d011      	beq.n	8008b3e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b34:	f043 0204 	orr.w	r2, r3, #4
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d011      	beq.n	8008b6e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008b4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b64:	f043 0202 	orr.w	r2, r3, #2
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d006      	beq.n	8008b86 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7fe fb7f 	bl	800727c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d173      	bne.n	8008c7a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bb6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008bba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008bbc:	e841 2300 	strex	r3, r2, [r1]
 8008bc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008bc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e4      	bne.n	8008b92 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bda:	4b57      	ldr	r3, [pc, #348]	; (8008d38 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3308      	adds	r3, #8
 8008be8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008bec:	65ba      	str	r2, [r7, #88]	; 0x58
 8008bee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e3      	bne.n	8008bc8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d12e      	bne.n	8008c74 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c24:	e853 3f00 	ldrex	r3, [r3]
 8008c28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2c:	f023 0310 	bic.w	r3, r3, #16
 8008c30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c42:	e841 2300 	strex	r3, r2, [r1]
 8008c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e6      	bne.n	8008c1c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	f003 0310 	and.w	r3, r3, #16
 8008c58:	2b10      	cmp	r3, #16
 8008c5a:	d103      	bne.n	8008c64 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2210      	movs	r2, #16
 8008c62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7fe fb0f 	bl	8007290 <HAL_UARTEx_RxEventCallback>
 8008c72:	e002      	b.n	8008c7a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7f8 fa01 	bl	800107c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c7a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d006      	beq.n	8008c90 <UART_RxISR_16BIT_FIFOEN+0x250>
 8008c82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c86:	f003 0320 	and.w	r3, r3, #32
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f47f aefc 	bne.w	8008a88 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c96:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c9a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d045      	beq.n	8008d2e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ca8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d23e      	bcs.n	8008d2e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	e853 3f00 	ldrex	r3, [r3]
 8008cbe:	623b      	str	r3, [r7, #32]
   return(result);
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cc6:	677b      	str	r3, [r7, #116]	; 0x74
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3308      	adds	r3, #8
 8008cce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008cd0:	633a      	str	r2, [r7, #48]	; 0x30
 8008cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd8:	e841 2300 	strex	r3, r2, [r1]
 8008cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e5      	bne.n	8008cb0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a15      	ldr	r2, [pc, #84]	; (8008d3c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008ce8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f043 0320 	orr.w	r3, r3, #32
 8008cfe:	673b      	str	r3, [r7, #112]	; 0x70
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d08:	61fb      	str	r3, [r7, #28]
 8008d0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	69b9      	ldr	r1, [r7, #24]
 8008d0e:	69fa      	ldr	r2, [r7, #28]
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	617b      	str	r3, [r7, #20]
   return(result);
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e6      	bne.n	8008cea <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d1c:	e007      	b.n	8008d2e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	699a      	ldr	r2, [r3, #24]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f042 0208 	orr.w	r2, r2, #8
 8008d2c:	619a      	str	r2, [r3, #24]
}
 8008d2e:	bf00      	nop
 8008d30:	37a0      	adds	r7, #160	; 0xa0
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	effffffe 	.word	0xeffffffe
 8008d3c:	080085e7 	.word	0x080085e7

08008d40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d101      	bne.n	8008d92 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d8e:	2302      	movs	r3, #2
 8008d90:	e027      	b.n	8008de2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2224      	movs	r2, #36	; 0x24
 8008d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f022 0201 	bic.w	r2, r2, #1
 8008db8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008dc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d101      	bne.n	8008e06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e02:	2302      	movs	r3, #2
 8008e04:	e02d      	b.n	8008e62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2224      	movs	r2, #36	; 0x24
 8008e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 0201 	bic.w	r2, r2, #1
 8008e2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f850 	bl	8008ee8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d101      	bne.n	8008e82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e7e:	2302      	movs	r3, #2
 8008e80:	e02d      	b.n	8008ede <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2224      	movs	r2, #36	; 0x24
 8008e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0201 	bic.w	r2, r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f812 	bl	8008ee8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d108      	bne.n	8008f0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f08:	e031      	b.n	8008f6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f0a:	2310      	movs	r3, #16
 8008f0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f0e:	2310      	movs	r3, #16
 8008f10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	0e5b      	lsrs	r3, r3, #25
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	f003 0307 	and.w	r3, r3, #7
 8008f20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	0f5b      	lsrs	r3, r3, #29
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	7b3a      	ldrb	r2, [r7, #12]
 8008f36:	4911      	ldr	r1, [pc, #68]	; (8008f7c <UARTEx_SetNbDataToProcess+0x94>)
 8008f38:	5c8a      	ldrb	r2, [r1, r2]
 8008f3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f3e:	7b3a      	ldrb	r2, [r7, #12]
 8008f40:	490f      	ldr	r1, [pc, #60]	; (8008f80 <UARTEx_SetNbDataToProcess+0x98>)
 8008f42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f44:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
 8008f52:	7b7a      	ldrb	r2, [r7, #13]
 8008f54:	4909      	ldr	r1, [pc, #36]	; (8008f7c <UARTEx_SetNbDataToProcess+0x94>)
 8008f56:	5c8a      	ldrb	r2, [r1, r2]
 8008f58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f5c:	7b7a      	ldrb	r2, [r7, #13]
 8008f5e:	4908      	ldr	r1, [pc, #32]	; (8008f80 <UARTEx_SetNbDataToProcess+0x98>)
 8008f60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f62:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f6e:	bf00      	nop
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	0800c37c 	.word	0x0800c37c
 8008f80:	0800c384 	.word	0x0800c384

08008f84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f84:	b084      	sub	sp, #16
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	f107 001c 	add.w	r0, r7, #28
 8008f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d120      	bne.n	8008fde <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	4b2a      	ldr	r3, [pc, #168]	; (8009058 <USB_CoreInit+0xd4>)
 8008fae:	4013      	ands	r3, r2
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d105      	bne.n	8008fd2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 faac 	bl	8009530 <USB_CoreReset>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73fb      	strb	r3, [r7, #15]
 8008fdc:	e01a      	b.n	8009014 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 faa0 	bl	8009530 <USB_CoreReset>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d106      	bne.n	8009008 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	639a      	str	r2, [r3, #56]	; 0x38
 8009006:	e005      	b.n	8009014 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	2b01      	cmp	r3, #1
 8009018:	d116      	bne.n	8009048 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800901e:	b29a      	uxth	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009028:	4b0c      	ldr	r3, [pc, #48]	; (800905c <USB_CoreInit+0xd8>)
 800902a:	4313      	orrs	r3, r2
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f043 0206 	orr.w	r2, r3, #6
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f043 0220 	orr.w	r2, r3, #32
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009048:	7bfb      	ldrb	r3, [r7, #15]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009054:	b004      	add	sp, #16
 8009056:	4770      	bx	lr
 8009058:	ffbdffbf 	.word	0xffbdffbf
 800905c:	03ee0000 	.word	0x03ee0000

08009060 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f023 0201 	bic.w	r2, r3, #1
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	460b      	mov	r3, r1
 800908c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800908e:	2300      	movs	r3, #0
 8009090:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d115      	bne.n	80090d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090b0:	2001      	movs	r0, #1
 80090b2:	f7f8 fc5b 	bl	800196c <HAL_Delay>
      ms++;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	3301      	adds	r3, #1
 80090ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fa29 	bl	8009514 <USB_GetMode>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d01e      	beq.n	8009106 <USB_SetCurrentMode+0x84>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b31      	cmp	r3, #49	; 0x31
 80090cc:	d9f0      	bls.n	80090b0 <USB_SetCurrentMode+0x2e>
 80090ce:	e01a      	b.n	8009106 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d115      	bne.n	8009102 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090e2:	2001      	movs	r0, #1
 80090e4:	f7f8 fc42 	bl	800196c <HAL_Delay>
      ms++;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3301      	adds	r3, #1
 80090ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fa10 	bl	8009514 <USB_GetMode>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d005      	beq.n	8009106 <USB_SetCurrentMode+0x84>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b31      	cmp	r3, #49	; 0x31
 80090fe:	d9f0      	bls.n	80090e2 <USB_SetCurrentMode+0x60>
 8009100:	e001      	b.n	8009106 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e005      	b.n	8009112 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b32      	cmp	r3, #50	; 0x32
 800910a:	d101      	bne.n	8009110 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e000      	b.n	8009112 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800911c:	b084      	sub	sp, #16
 800911e:	b580      	push	{r7, lr}
 8009120:	b086      	sub	sp, #24
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800912a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009136:	2300      	movs	r3, #0
 8009138:	613b      	str	r3, [r7, #16]
 800913a:	e009      	b.n	8009150 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	3340      	adds	r3, #64	; 0x40
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	2200      	movs	r2, #0
 8009148:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	3301      	adds	r3, #1
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2b0e      	cmp	r3, #14
 8009154:	d9f2      	bls.n	800913c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009158:	2b00      	cmp	r3, #0
 800915a:	d11c      	bne.n	8009196 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800916a:	f043 0302 	orr.w	r3, r3, #2
 800916e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009174:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	e005      	b.n	80091a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091a8:	461a      	mov	r2, r3
 80091aa:	2300      	movs	r3, #0
 80091ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b4:	4619      	mov	r1, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091bc:	461a      	mov	r2, r3
 80091be:	680b      	ldr	r3, [r1, #0]
 80091c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d10c      	bne.n	80091e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d104      	bne.n	80091d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80091ce:	2100      	movs	r1, #0
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f965 	bl	80094a0 <USB_SetDevSpeed>
 80091d6:	e008      	b.n	80091ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091d8:	2101      	movs	r1, #1
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f960 	bl	80094a0 <USB_SetDevSpeed>
 80091e0:	e003      	b.n	80091ea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091e2:	2103      	movs	r1, #3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f95b 	bl	80094a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091ea:	2110      	movs	r1, #16
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f8f3 	bl	80093d8 <USB_FlushTxFifo>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f91f 	bl	8009440 <USB_FlushRxFifo>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009212:	461a      	mov	r2, r3
 8009214:	2300      	movs	r3, #0
 8009216:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921e:	461a      	mov	r2, r3
 8009220:	2300      	movs	r3, #0
 8009222:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922a:	461a      	mov	r2, r3
 800922c:	2300      	movs	r3, #0
 800922e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009230:	2300      	movs	r3, #0
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	e043      	b.n	80092be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800924c:	d118      	bne.n	8009280 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009260:	461a      	mov	r2, r3
 8009262:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	e013      	b.n	8009292 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009276:	461a      	mov	r2, r3
 8009278:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	e008      	b.n	8009292 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928c:	461a      	mov	r2, r3
 800928e:	2300      	movs	r3, #0
 8009290:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929e:	461a      	mov	r2, r3
 80092a0:	2300      	movs	r3, #0
 80092a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b0:	461a      	mov	r2, r3
 80092b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	3301      	adds	r3, #1
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d3b7      	bcc.n	8009236 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092c6:	2300      	movs	r3, #0
 80092c8:	613b      	str	r3, [r7, #16]
 80092ca:	e043      	b.n	8009354 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092e2:	d118      	bne.n	8009316 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10a      	bne.n	8009300 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f6:	461a      	mov	r2, r3
 80092f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	e013      	b.n	8009328 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930c:	461a      	mov	r2, r3
 800930e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009312:	6013      	str	r3, [r2, #0]
 8009314:	e008      	b.n	8009328 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	015a      	lsls	r2, r3, #5
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	4413      	add	r3, r2
 800931e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009322:	461a      	mov	r2, r3
 8009324:	2300      	movs	r3, #0
 8009326:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009334:	461a      	mov	r2, r3
 8009336:	2300      	movs	r3, #0
 8009338:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009346:	461a      	mov	r2, r3
 8009348:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800934c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	3301      	adds	r3, #1
 8009352:	613b      	str	r3, [r7, #16]
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	429a      	cmp	r2, r3
 800935a:	d3b7      	bcc.n	80092cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800936a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800936e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800937c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	2b00      	cmp	r3, #0
 8009382:	d105      	bne.n	8009390 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	f043 0210 	orr.w	r2, r3, #16
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	699a      	ldr	r2, [r3, #24]
 8009394:	4b0e      	ldr	r3, [pc, #56]	; (80093d0 <USB_DevInit+0x2b4>)
 8009396:	4313      	orrs	r3, r2
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800939c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d005      	beq.n	80093ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	f043 0208 	orr.w	r2, r3, #8
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d105      	bne.n	80093c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699a      	ldr	r2, [r3, #24]
 80093b8:	4b06      	ldr	r3, [pc, #24]	; (80093d4 <USB_DevInit+0x2b8>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093cc:	b004      	add	sp, #16
 80093ce:	4770      	bx	lr
 80093d0:	803c3800 	.word	0x803c3800
 80093d4:	40000004 	.word	0x40000004

080093d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4a13      	ldr	r2, [pc, #76]	; (800943c <USB_FlushTxFifo+0x64>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d901      	bls.n	80093f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e01b      	b.n	8009430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	daf2      	bge.n	80093e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	019b      	lsls	r3, r3, #6
 8009408:	f043 0220 	orr.w	r2, r3, #32
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3301      	adds	r3, #1
 8009414:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4a08      	ldr	r2, [pc, #32]	; (800943c <USB_FlushTxFifo+0x64>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d901      	bls.n	8009422 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e006      	b.n	8009430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	f003 0320 	and.w	r3, r3, #32
 800942a:	2b20      	cmp	r3, #32
 800942c:	d0f0      	beq.n	8009410 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	00030d40 	.word	0x00030d40

08009440 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3301      	adds	r3, #1
 8009450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	4a11      	ldr	r2, [pc, #68]	; (800949c <USB_FlushRxFifo+0x5c>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d901      	bls.n	800945e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	e018      	b.n	8009490 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	daf2      	bge.n	800944c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2210      	movs	r2, #16
 800946e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3301      	adds	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4a08      	ldr	r2, [pc, #32]	; (800949c <USB_FlushRxFifo+0x5c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d901      	bls.n	8009482 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e006      	b.n	8009490 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f003 0310 	and.w	r3, r3, #16
 800948a:	2b10      	cmp	r3, #16
 800948c:	d0f0      	beq.n	8009470 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	00030d40 	.word	0x00030d40

080094a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	78fb      	ldrb	r3, [r7, #3]
 80094ba:	68f9      	ldr	r1, [r7, #12]
 80094bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094c0:	4313      	orrs	r3, r2
 80094c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b085      	sub	sp, #20
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094ec:	f023 0303 	bic.w	r3, r3, #3
 80094f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009500:	f043 0302 	orr.w	r3, r3, #2
 8009504:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	f003 0301 	and.w	r3, r3, #1
}
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009538:	2300      	movs	r3, #0
 800953a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	3301      	adds	r3, #1
 8009540:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4a13      	ldr	r2, [pc, #76]	; (8009594 <USB_CoreReset+0x64>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d901      	bls.n	800954e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e01b      	b.n	8009586 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	2b00      	cmp	r3, #0
 8009554:	daf2      	bge.n	800953c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	f043 0201 	orr.w	r2, r3, #1
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	3301      	adds	r3, #1
 800956a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4a09      	ldr	r2, [pc, #36]	; (8009594 <USB_CoreReset+0x64>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d901      	bls.n	8009578 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e006      	b.n	8009586 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b01      	cmp	r3, #1
 8009582:	d0f0      	beq.n	8009566 <USB_CoreReset+0x36>

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	00030d40 	.word	0x00030d40

08009598 <__errno>:
 8009598:	4b01      	ldr	r3, [pc, #4]	; (80095a0 <__errno+0x8>)
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	24000010 	.word	0x24000010

080095a4 <__libc_init_array>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	4d0d      	ldr	r5, [pc, #52]	; (80095dc <__libc_init_array+0x38>)
 80095a8:	4c0d      	ldr	r4, [pc, #52]	; (80095e0 <__libc_init_array+0x3c>)
 80095aa:	1b64      	subs	r4, r4, r5
 80095ac:	10a4      	asrs	r4, r4, #2
 80095ae:	2600      	movs	r6, #0
 80095b0:	42a6      	cmp	r6, r4
 80095b2:	d109      	bne.n	80095c8 <__libc_init_array+0x24>
 80095b4:	4d0b      	ldr	r5, [pc, #44]	; (80095e4 <__libc_init_array+0x40>)
 80095b6:	4c0c      	ldr	r4, [pc, #48]	; (80095e8 <__libc_init_array+0x44>)
 80095b8:	f002 fe5e 	bl	800c278 <_init>
 80095bc:	1b64      	subs	r4, r4, r5
 80095be:	10a4      	asrs	r4, r4, #2
 80095c0:	2600      	movs	r6, #0
 80095c2:	42a6      	cmp	r6, r4
 80095c4:	d105      	bne.n	80095d2 <__libc_init_array+0x2e>
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
 80095c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095cc:	4798      	blx	r3
 80095ce:	3601      	adds	r6, #1
 80095d0:	e7ee      	b.n	80095b0 <__libc_init_array+0xc>
 80095d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095d6:	4798      	blx	r3
 80095d8:	3601      	adds	r6, #1
 80095da:	e7f2      	b.n	80095c2 <__libc_init_array+0x1e>
 80095dc:	0800c76c 	.word	0x0800c76c
 80095e0:	0800c76c 	.word	0x0800c76c
 80095e4:	0800c76c 	.word	0x0800c76c
 80095e8:	0800c770 	.word	0x0800c770

080095ec <memset>:
 80095ec:	4402      	add	r2, r0
 80095ee:	4603      	mov	r3, r0
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d100      	bne.n	80095f6 <memset+0xa>
 80095f4:	4770      	bx	lr
 80095f6:	f803 1b01 	strb.w	r1, [r3], #1
 80095fa:	e7f9      	b.n	80095f0 <memset+0x4>

080095fc <__cvt>:
 80095fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095fe:	ed2d 8b02 	vpush	{d8}
 8009602:	eeb0 8b40 	vmov.f64	d8, d0
 8009606:	b085      	sub	sp, #20
 8009608:	4617      	mov	r7, r2
 800960a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800960c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800960e:	ee18 2a90 	vmov	r2, s17
 8009612:	f025 0520 	bic.w	r5, r5, #32
 8009616:	2a00      	cmp	r2, #0
 8009618:	bfb6      	itet	lt
 800961a:	222d      	movlt	r2, #45	; 0x2d
 800961c:	2200      	movge	r2, #0
 800961e:	eeb1 8b40 	vneglt.f64	d8, d0
 8009622:	2d46      	cmp	r5, #70	; 0x46
 8009624:	460c      	mov	r4, r1
 8009626:	701a      	strb	r2, [r3, #0]
 8009628:	d004      	beq.n	8009634 <__cvt+0x38>
 800962a:	2d45      	cmp	r5, #69	; 0x45
 800962c:	d100      	bne.n	8009630 <__cvt+0x34>
 800962e:	3401      	adds	r4, #1
 8009630:	2102      	movs	r1, #2
 8009632:	e000      	b.n	8009636 <__cvt+0x3a>
 8009634:	2103      	movs	r1, #3
 8009636:	ab03      	add	r3, sp, #12
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	ab02      	add	r3, sp, #8
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	4622      	mov	r2, r4
 8009640:	4633      	mov	r3, r6
 8009642:	eeb0 0b48 	vmov.f64	d0, d8
 8009646:	f000 fccb 	bl	8009fe0 <_dtoa_r>
 800964a:	2d47      	cmp	r5, #71	; 0x47
 800964c:	d101      	bne.n	8009652 <__cvt+0x56>
 800964e:	07fb      	lsls	r3, r7, #31
 8009650:	d51a      	bpl.n	8009688 <__cvt+0x8c>
 8009652:	2d46      	cmp	r5, #70	; 0x46
 8009654:	eb00 0204 	add.w	r2, r0, r4
 8009658:	d10c      	bne.n	8009674 <__cvt+0x78>
 800965a:	7803      	ldrb	r3, [r0, #0]
 800965c:	2b30      	cmp	r3, #48	; 0x30
 800965e:	d107      	bne.n	8009670 <__cvt+0x74>
 8009660:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009668:	bf1c      	itt	ne
 800966a:	f1c4 0401 	rsbne	r4, r4, #1
 800966e:	6034      	strne	r4, [r6, #0]
 8009670:	6833      	ldr	r3, [r6, #0]
 8009672:	441a      	add	r2, r3
 8009674:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967c:	bf08      	it	eq
 800967e:	9203      	streq	r2, [sp, #12]
 8009680:	2130      	movs	r1, #48	; 0x30
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	4293      	cmp	r3, r2
 8009686:	d307      	bcc.n	8009698 <__cvt+0x9c>
 8009688:	9b03      	ldr	r3, [sp, #12]
 800968a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800968c:	1a1b      	subs	r3, r3, r0
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	b005      	add	sp, #20
 8009692:	ecbd 8b02 	vpop	{d8}
 8009696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009698:	1c5c      	adds	r4, r3, #1
 800969a:	9403      	str	r4, [sp, #12]
 800969c:	7019      	strb	r1, [r3, #0]
 800969e:	e7f0      	b.n	8009682 <__cvt+0x86>

080096a0 <__exponent>:
 80096a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096a2:	4603      	mov	r3, r0
 80096a4:	2900      	cmp	r1, #0
 80096a6:	bfb8      	it	lt
 80096a8:	4249      	neglt	r1, r1
 80096aa:	f803 2b02 	strb.w	r2, [r3], #2
 80096ae:	bfb4      	ite	lt
 80096b0:	222d      	movlt	r2, #45	; 0x2d
 80096b2:	222b      	movge	r2, #43	; 0x2b
 80096b4:	2909      	cmp	r1, #9
 80096b6:	7042      	strb	r2, [r0, #1]
 80096b8:	dd2a      	ble.n	8009710 <__exponent+0x70>
 80096ba:	f10d 0407 	add.w	r4, sp, #7
 80096be:	46a4      	mov	ip, r4
 80096c0:	270a      	movs	r7, #10
 80096c2:	46a6      	mov	lr, r4
 80096c4:	460a      	mov	r2, r1
 80096c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80096ca:	fb07 1516 	mls	r5, r7, r6, r1
 80096ce:	3530      	adds	r5, #48	; 0x30
 80096d0:	2a63      	cmp	r2, #99	; 0x63
 80096d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80096d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80096da:	4631      	mov	r1, r6
 80096dc:	dcf1      	bgt.n	80096c2 <__exponent+0x22>
 80096de:	3130      	adds	r1, #48	; 0x30
 80096e0:	f1ae 0502 	sub.w	r5, lr, #2
 80096e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80096e8:	1c44      	adds	r4, r0, #1
 80096ea:	4629      	mov	r1, r5
 80096ec:	4561      	cmp	r1, ip
 80096ee:	d30a      	bcc.n	8009706 <__exponent+0x66>
 80096f0:	f10d 0209 	add.w	r2, sp, #9
 80096f4:	eba2 020e 	sub.w	r2, r2, lr
 80096f8:	4565      	cmp	r5, ip
 80096fa:	bf88      	it	hi
 80096fc:	2200      	movhi	r2, #0
 80096fe:	4413      	add	r3, r2
 8009700:	1a18      	subs	r0, r3, r0
 8009702:	b003      	add	sp, #12
 8009704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800970a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800970e:	e7ed      	b.n	80096ec <__exponent+0x4c>
 8009710:	2330      	movs	r3, #48	; 0x30
 8009712:	3130      	adds	r1, #48	; 0x30
 8009714:	7083      	strb	r3, [r0, #2]
 8009716:	70c1      	strb	r1, [r0, #3]
 8009718:	1d03      	adds	r3, r0, #4
 800971a:	e7f1      	b.n	8009700 <__exponent+0x60>
 800971c:	0000      	movs	r0, r0
	...

08009720 <_printf_float>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	b08b      	sub	sp, #44	; 0x2c
 8009726:	460c      	mov	r4, r1
 8009728:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800972c:	4616      	mov	r6, r2
 800972e:	461f      	mov	r7, r3
 8009730:	4605      	mov	r5, r0
 8009732:	f001 f9c3 	bl	800aabc <_localeconv_r>
 8009736:	f8d0 b000 	ldr.w	fp, [r0]
 800973a:	4658      	mov	r0, fp
 800973c:	f7f6 fdd0 	bl	80002e0 <strlen>
 8009740:	2300      	movs	r3, #0
 8009742:	9308      	str	r3, [sp, #32]
 8009744:	f8d8 3000 	ldr.w	r3, [r8]
 8009748:	f894 9018 	ldrb.w	r9, [r4, #24]
 800974c:	6822      	ldr	r2, [r4, #0]
 800974e:	3307      	adds	r3, #7
 8009750:	f023 0307 	bic.w	r3, r3, #7
 8009754:	f103 0108 	add.w	r1, r3, #8
 8009758:	f8c8 1000 	str.w	r1, [r8]
 800975c:	4682      	mov	sl, r0
 800975e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009762:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009766:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80099c8 <_printf_float+0x2a8>
 800976a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800976e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009772:	eeb4 6b47 	vcmp.f64	d6, d7
 8009776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800977a:	dd24      	ble.n	80097c6 <_printf_float+0xa6>
 800977c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009784:	d502      	bpl.n	800978c <_printf_float+0x6c>
 8009786:	232d      	movs	r3, #45	; 0x2d
 8009788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800978c:	4b90      	ldr	r3, [pc, #576]	; (80099d0 <_printf_float+0x2b0>)
 800978e:	4891      	ldr	r0, [pc, #580]	; (80099d4 <_printf_float+0x2b4>)
 8009790:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009794:	bf94      	ite	ls
 8009796:	4698      	movls	r8, r3
 8009798:	4680      	movhi	r8, r0
 800979a:	2303      	movs	r3, #3
 800979c:	6123      	str	r3, [r4, #16]
 800979e:	f022 0204 	bic.w	r2, r2, #4
 80097a2:	2300      	movs	r3, #0
 80097a4:	6022      	str	r2, [r4, #0]
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	9700      	str	r7, [sp, #0]
 80097aa:	4633      	mov	r3, r6
 80097ac:	aa09      	add	r2, sp, #36	; 0x24
 80097ae:	4621      	mov	r1, r4
 80097b0:	4628      	mov	r0, r5
 80097b2:	f000 f9d3 	bl	8009b5c <_printf_common>
 80097b6:	3001      	adds	r0, #1
 80097b8:	f040 808a 	bne.w	80098d0 <_printf_float+0x1b0>
 80097bc:	f04f 30ff 	mov.w	r0, #4294967295
 80097c0:	b00b      	add	sp, #44	; 0x2c
 80097c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80097ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ce:	d709      	bvc.n	80097e4 <_printf_float+0xc4>
 80097d0:	ee10 3a90 	vmov	r3, s1
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bfbc      	itt	lt
 80097d8:	232d      	movlt	r3, #45	; 0x2d
 80097da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80097de:	487e      	ldr	r0, [pc, #504]	; (80099d8 <_printf_float+0x2b8>)
 80097e0:	4b7e      	ldr	r3, [pc, #504]	; (80099dc <_printf_float+0x2bc>)
 80097e2:	e7d5      	b.n	8009790 <_printf_float+0x70>
 80097e4:	6863      	ldr	r3, [r4, #4]
 80097e6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80097ea:	9104      	str	r1, [sp, #16]
 80097ec:	1c59      	adds	r1, r3, #1
 80097ee:	d13c      	bne.n	800986a <_printf_float+0x14a>
 80097f0:	2306      	movs	r3, #6
 80097f2:	6063      	str	r3, [r4, #4]
 80097f4:	2300      	movs	r3, #0
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	ab08      	add	r3, sp, #32
 80097fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80097fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009802:	ab07      	add	r3, sp, #28
 8009804:	6861      	ldr	r1, [r4, #4]
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	6022      	str	r2, [r4, #0]
 800980a:	f10d 031b 	add.w	r3, sp, #27
 800980e:	4628      	mov	r0, r5
 8009810:	f7ff fef4 	bl	80095fc <__cvt>
 8009814:	9b04      	ldr	r3, [sp, #16]
 8009816:	9907      	ldr	r1, [sp, #28]
 8009818:	2b47      	cmp	r3, #71	; 0x47
 800981a:	4680      	mov	r8, r0
 800981c:	d108      	bne.n	8009830 <_printf_float+0x110>
 800981e:	1cc8      	adds	r0, r1, #3
 8009820:	db02      	blt.n	8009828 <_printf_float+0x108>
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	4299      	cmp	r1, r3
 8009826:	dd41      	ble.n	80098ac <_printf_float+0x18c>
 8009828:	f1a9 0902 	sub.w	r9, r9, #2
 800982c:	fa5f f989 	uxtb.w	r9, r9
 8009830:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009834:	d820      	bhi.n	8009878 <_printf_float+0x158>
 8009836:	3901      	subs	r1, #1
 8009838:	464a      	mov	r2, r9
 800983a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800983e:	9107      	str	r1, [sp, #28]
 8009840:	f7ff ff2e 	bl	80096a0 <__exponent>
 8009844:	9a08      	ldr	r2, [sp, #32]
 8009846:	9004      	str	r0, [sp, #16]
 8009848:	1813      	adds	r3, r2, r0
 800984a:	2a01      	cmp	r2, #1
 800984c:	6123      	str	r3, [r4, #16]
 800984e:	dc02      	bgt.n	8009856 <_printf_float+0x136>
 8009850:	6822      	ldr	r2, [r4, #0]
 8009852:	07d2      	lsls	r2, r2, #31
 8009854:	d501      	bpl.n	800985a <_printf_float+0x13a>
 8009856:	3301      	adds	r3, #1
 8009858:	6123      	str	r3, [r4, #16]
 800985a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d0a2      	beq.n	80097a8 <_printf_float+0x88>
 8009862:	232d      	movs	r3, #45	; 0x2d
 8009864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009868:	e79e      	b.n	80097a8 <_printf_float+0x88>
 800986a:	9904      	ldr	r1, [sp, #16]
 800986c:	2947      	cmp	r1, #71	; 0x47
 800986e:	d1c1      	bne.n	80097f4 <_printf_float+0xd4>
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1bf      	bne.n	80097f4 <_printf_float+0xd4>
 8009874:	2301      	movs	r3, #1
 8009876:	e7bc      	b.n	80097f2 <_printf_float+0xd2>
 8009878:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800987c:	d118      	bne.n	80098b0 <_printf_float+0x190>
 800987e:	2900      	cmp	r1, #0
 8009880:	6863      	ldr	r3, [r4, #4]
 8009882:	dd0b      	ble.n	800989c <_printf_float+0x17c>
 8009884:	6121      	str	r1, [r4, #16]
 8009886:	b913      	cbnz	r3, 800988e <_printf_float+0x16e>
 8009888:	6822      	ldr	r2, [r4, #0]
 800988a:	07d0      	lsls	r0, r2, #31
 800988c:	d502      	bpl.n	8009894 <_printf_float+0x174>
 800988e:	3301      	adds	r3, #1
 8009890:	440b      	add	r3, r1
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	2300      	movs	r3, #0
 8009896:	65a1      	str	r1, [r4, #88]	; 0x58
 8009898:	9304      	str	r3, [sp, #16]
 800989a:	e7de      	b.n	800985a <_printf_float+0x13a>
 800989c:	b913      	cbnz	r3, 80098a4 <_printf_float+0x184>
 800989e:	6822      	ldr	r2, [r4, #0]
 80098a0:	07d2      	lsls	r2, r2, #31
 80098a2:	d501      	bpl.n	80098a8 <_printf_float+0x188>
 80098a4:	3302      	adds	r3, #2
 80098a6:	e7f4      	b.n	8009892 <_printf_float+0x172>
 80098a8:	2301      	movs	r3, #1
 80098aa:	e7f2      	b.n	8009892 <_printf_float+0x172>
 80098ac:	f04f 0967 	mov.w	r9, #103	; 0x67
 80098b0:	9b08      	ldr	r3, [sp, #32]
 80098b2:	4299      	cmp	r1, r3
 80098b4:	db05      	blt.n	80098c2 <_printf_float+0x1a2>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	6121      	str	r1, [r4, #16]
 80098ba:	07d8      	lsls	r0, r3, #31
 80098bc:	d5ea      	bpl.n	8009894 <_printf_float+0x174>
 80098be:	1c4b      	adds	r3, r1, #1
 80098c0:	e7e7      	b.n	8009892 <_printf_float+0x172>
 80098c2:	2900      	cmp	r1, #0
 80098c4:	bfd4      	ite	le
 80098c6:	f1c1 0202 	rsble	r2, r1, #2
 80098ca:	2201      	movgt	r2, #1
 80098cc:	4413      	add	r3, r2
 80098ce:	e7e0      	b.n	8009892 <_printf_float+0x172>
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	055a      	lsls	r2, r3, #21
 80098d4:	d407      	bmi.n	80098e6 <_printf_float+0x1c6>
 80098d6:	6923      	ldr	r3, [r4, #16]
 80098d8:	4642      	mov	r2, r8
 80098da:	4631      	mov	r1, r6
 80098dc:	4628      	mov	r0, r5
 80098de:	47b8      	blx	r7
 80098e0:	3001      	adds	r0, #1
 80098e2:	d12a      	bne.n	800993a <_printf_float+0x21a>
 80098e4:	e76a      	b.n	80097bc <_printf_float+0x9c>
 80098e6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80098ea:	f240 80e2 	bls.w	8009ab2 <_printf_float+0x392>
 80098ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80098f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80098f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098fa:	d133      	bne.n	8009964 <_printf_float+0x244>
 80098fc:	4a38      	ldr	r2, [pc, #224]	; (80099e0 <_printf_float+0x2c0>)
 80098fe:	2301      	movs	r3, #1
 8009900:	4631      	mov	r1, r6
 8009902:	4628      	mov	r0, r5
 8009904:	47b8      	blx	r7
 8009906:	3001      	adds	r0, #1
 8009908:	f43f af58 	beq.w	80097bc <_printf_float+0x9c>
 800990c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009910:	429a      	cmp	r2, r3
 8009912:	db02      	blt.n	800991a <_printf_float+0x1fa>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	07d8      	lsls	r0, r3, #31
 8009918:	d50f      	bpl.n	800993a <_printf_float+0x21a>
 800991a:	4653      	mov	r3, sl
 800991c:	465a      	mov	r2, fp
 800991e:	4631      	mov	r1, r6
 8009920:	4628      	mov	r0, r5
 8009922:	47b8      	blx	r7
 8009924:	3001      	adds	r0, #1
 8009926:	f43f af49 	beq.w	80097bc <_printf_float+0x9c>
 800992a:	f04f 0800 	mov.w	r8, #0
 800992e:	f104 091a 	add.w	r9, r4, #26
 8009932:	9b08      	ldr	r3, [sp, #32]
 8009934:	3b01      	subs	r3, #1
 8009936:	4543      	cmp	r3, r8
 8009938:	dc09      	bgt.n	800994e <_printf_float+0x22e>
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	079b      	lsls	r3, r3, #30
 800993e:	f100 8108 	bmi.w	8009b52 <_printf_float+0x432>
 8009942:	68e0      	ldr	r0, [r4, #12]
 8009944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009946:	4298      	cmp	r0, r3
 8009948:	bfb8      	it	lt
 800994a:	4618      	movlt	r0, r3
 800994c:	e738      	b.n	80097c0 <_printf_float+0xa0>
 800994e:	2301      	movs	r3, #1
 8009950:	464a      	mov	r2, r9
 8009952:	4631      	mov	r1, r6
 8009954:	4628      	mov	r0, r5
 8009956:	47b8      	blx	r7
 8009958:	3001      	adds	r0, #1
 800995a:	f43f af2f 	beq.w	80097bc <_printf_float+0x9c>
 800995e:	f108 0801 	add.w	r8, r8, #1
 8009962:	e7e6      	b.n	8009932 <_printf_float+0x212>
 8009964:	9b07      	ldr	r3, [sp, #28]
 8009966:	2b00      	cmp	r3, #0
 8009968:	dc3c      	bgt.n	80099e4 <_printf_float+0x2c4>
 800996a:	4a1d      	ldr	r2, [pc, #116]	; (80099e0 <_printf_float+0x2c0>)
 800996c:	2301      	movs	r3, #1
 800996e:	4631      	mov	r1, r6
 8009970:	4628      	mov	r0, r5
 8009972:	47b8      	blx	r7
 8009974:	3001      	adds	r0, #1
 8009976:	f43f af21 	beq.w	80097bc <_printf_float+0x9c>
 800997a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800997e:	4313      	orrs	r3, r2
 8009980:	d102      	bne.n	8009988 <_printf_float+0x268>
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	07d9      	lsls	r1, r3, #31
 8009986:	d5d8      	bpl.n	800993a <_printf_float+0x21a>
 8009988:	4653      	mov	r3, sl
 800998a:	465a      	mov	r2, fp
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f af12 	beq.w	80097bc <_printf_float+0x9c>
 8009998:	f04f 0900 	mov.w	r9, #0
 800999c:	f104 0a1a 	add.w	sl, r4, #26
 80099a0:	9b07      	ldr	r3, [sp, #28]
 80099a2:	425b      	negs	r3, r3
 80099a4:	454b      	cmp	r3, r9
 80099a6:	dc01      	bgt.n	80099ac <_printf_float+0x28c>
 80099a8:	9b08      	ldr	r3, [sp, #32]
 80099aa:	e795      	b.n	80098d8 <_printf_float+0x1b8>
 80099ac:	2301      	movs	r3, #1
 80099ae:	4652      	mov	r2, sl
 80099b0:	4631      	mov	r1, r6
 80099b2:	4628      	mov	r0, r5
 80099b4:	47b8      	blx	r7
 80099b6:	3001      	adds	r0, #1
 80099b8:	f43f af00 	beq.w	80097bc <_printf_float+0x9c>
 80099bc:	f109 0901 	add.w	r9, r9, #1
 80099c0:	e7ee      	b.n	80099a0 <_printf_float+0x280>
 80099c2:	bf00      	nop
 80099c4:	f3af 8000 	nop.w
 80099c8:	ffffffff 	.word	0xffffffff
 80099cc:	7fefffff 	.word	0x7fefffff
 80099d0:	0800c390 	.word	0x0800c390
 80099d4:	0800c394 	.word	0x0800c394
 80099d8:	0800c39c 	.word	0x0800c39c
 80099dc:	0800c398 	.word	0x0800c398
 80099e0:	0800c3a0 	.word	0x0800c3a0
 80099e4:	9a08      	ldr	r2, [sp, #32]
 80099e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099e8:	429a      	cmp	r2, r3
 80099ea:	bfa8      	it	ge
 80099ec:	461a      	movge	r2, r3
 80099ee:	2a00      	cmp	r2, #0
 80099f0:	4691      	mov	r9, r2
 80099f2:	dc38      	bgt.n	8009a66 <_printf_float+0x346>
 80099f4:	2300      	movs	r3, #0
 80099f6:	9305      	str	r3, [sp, #20]
 80099f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099fc:	f104 021a 	add.w	r2, r4, #26
 8009a00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a02:	9905      	ldr	r1, [sp, #20]
 8009a04:	9304      	str	r3, [sp, #16]
 8009a06:	eba3 0309 	sub.w	r3, r3, r9
 8009a0a:	428b      	cmp	r3, r1
 8009a0c:	dc33      	bgt.n	8009a76 <_printf_float+0x356>
 8009a0e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	db3c      	blt.n	8009a90 <_printf_float+0x370>
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	07da      	lsls	r2, r3, #31
 8009a1a:	d439      	bmi.n	8009a90 <_printf_float+0x370>
 8009a1c:	9b08      	ldr	r3, [sp, #32]
 8009a1e:	9a04      	ldr	r2, [sp, #16]
 8009a20:	9907      	ldr	r1, [sp, #28]
 8009a22:	1a9a      	subs	r2, r3, r2
 8009a24:	eba3 0901 	sub.w	r9, r3, r1
 8009a28:	4591      	cmp	r9, r2
 8009a2a:	bfa8      	it	ge
 8009a2c:	4691      	movge	r9, r2
 8009a2e:	f1b9 0f00 	cmp.w	r9, #0
 8009a32:	dc35      	bgt.n	8009aa0 <_printf_float+0x380>
 8009a34:	f04f 0800 	mov.w	r8, #0
 8009a38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a3c:	f104 0a1a 	add.w	sl, r4, #26
 8009a40:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	eba3 0309 	sub.w	r3, r3, r9
 8009a4a:	4543      	cmp	r3, r8
 8009a4c:	f77f af75 	ble.w	800993a <_printf_float+0x21a>
 8009a50:	2301      	movs	r3, #1
 8009a52:	4652      	mov	r2, sl
 8009a54:	4631      	mov	r1, r6
 8009a56:	4628      	mov	r0, r5
 8009a58:	47b8      	blx	r7
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	f43f aeae 	beq.w	80097bc <_printf_float+0x9c>
 8009a60:	f108 0801 	add.w	r8, r8, #1
 8009a64:	e7ec      	b.n	8009a40 <_printf_float+0x320>
 8009a66:	4613      	mov	r3, r2
 8009a68:	4631      	mov	r1, r6
 8009a6a:	4642      	mov	r2, r8
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	47b8      	blx	r7
 8009a70:	3001      	adds	r0, #1
 8009a72:	d1bf      	bne.n	80099f4 <_printf_float+0x2d4>
 8009a74:	e6a2      	b.n	80097bc <_printf_float+0x9c>
 8009a76:	2301      	movs	r3, #1
 8009a78:	4631      	mov	r1, r6
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	9204      	str	r2, [sp, #16]
 8009a7e:	47b8      	blx	r7
 8009a80:	3001      	adds	r0, #1
 8009a82:	f43f ae9b 	beq.w	80097bc <_printf_float+0x9c>
 8009a86:	9b05      	ldr	r3, [sp, #20]
 8009a88:	9a04      	ldr	r2, [sp, #16]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	9305      	str	r3, [sp, #20]
 8009a8e:	e7b7      	b.n	8009a00 <_printf_float+0x2e0>
 8009a90:	4653      	mov	r3, sl
 8009a92:	465a      	mov	r2, fp
 8009a94:	4631      	mov	r1, r6
 8009a96:	4628      	mov	r0, r5
 8009a98:	47b8      	blx	r7
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	d1be      	bne.n	8009a1c <_printf_float+0x2fc>
 8009a9e:	e68d      	b.n	80097bc <_printf_float+0x9c>
 8009aa0:	9a04      	ldr	r2, [sp, #16]
 8009aa2:	464b      	mov	r3, r9
 8009aa4:	4442      	add	r2, r8
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	47b8      	blx	r7
 8009aac:	3001      	adds	r0, #1
 8009aae:	d1c1      	bne.n	8009a34 <_printf_float+0x314>
 8009ab0:	e684      	b.n	80097bc <_printf_float+0x9c>
 8009ab2:	9a08      	ldr	r2, [sp, #32]
 8009ab4:	2a01      	cmp	r2, #1
 8009ab6:	dc01      	bgt.n	8009abc <_printf_float+0x39c>
 8009ab8:	07db      	lsls	r3, r3, #31
 8009aba:	d537      	bpl.n	8009b2c <_printf_float+0x40c>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4642      	mov	r2, r8
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	47b8      	blx	r7
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f43f ae78 	beq.w	80097bc <_printf_float+0x9c>
 8009acc:	4653      	mov	r3, sl
 8009ace:	465a      	mov	r2, fp
 8009ad0:	4631      	mov	r1, r6
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	47b8      	blx	r7
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	f43f ae70 	beq.w	80097bc <_printf_float+0x9c>
 8009adc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009ae0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae8:	d01b      	beq.n	8009b22 <_printf_float+0x402>
 8009aea:	9b08      	ldr	r3, [sp, #32]
 8009aec:	f108 0201 	add.w	r2, r8, #1
 8009af0:	3b01      	subs	r3, #1
 8009af2:	4631      	mov	r1, r6
 8009af4:	4628      	mov	r0, r5
 8009af6:	47b8      	blx	r7
 8009af8:	3001      	adds	r0, #1
 8009afa:	d10e      	bne.n	8009b1a <_printf_float+0x3fa>
 8009afc:	e65e      	b.n	80097bc <_printf_float+0x9c>
 8009afe:	2301      	movs	r3, #1
 8009b00:	464a      	mov	r2, r9
 8009b02:	4631      	mov	r1, r6
 8009b04:	4628      	mov	r0, r5
 8009b06:	47b8      	blx	r7
 8009b08:	3001      	adds	r0, #1
 8009b0a:	f43f ae57 	beq.w	80097bc <_printf_float+0x9c>
 8009b0e:	f108 0801 	add.w	r8, r8, #1
 8009b12:	9b08      	ldr	r3, [sp, #32]
 8009b14:	3b01      	subs	r3, #1
 8009b16:	4543      	cmp	r3, r8
 8009b18:	dcf1      	bgt.n	8009afe <_printf_float+0x3de>
 8009b1a:	9b04      	ldr	r3, [sp, #16]
 8009b1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b20:	e6db      	b.n	80098da <_printf_float+0x1ba>
 8009b22:	f04f 0800 	mov.w	r8, #0
 8009b26:	f104 091a 	add.w	r9, r4, #26
 8009b2a:	e7f2      	b.n	8009b12 <_printf_float+0x3f2>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	4642      	mov	r2, r8
 8009b30:	e7df      	b.n	8009af2 <_printf_float+0x3d2>
 8009b32:	2301      	movs	r3, #1
 8009b34:	464a      	mov	r2, r9
 8009b36:	4631      	mov	r1, r6
 8009b38:	4628      	mov	r0, r5
 8009b3a:	47b8      	blx	r7
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	f43f ae3d 	beq.w	80097bc <_printf_float+0x9c>
 8009b42:	f108 0801 	add.w	r8, r8, #1
 8009b46:	68e3      	ldr	r3, [r4, #12]
 8009b48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b4a:	1a5b      	subs	r3, r3, r1
 8009b4c:	4543      	cmp	r3, r8
 8009b4e:	dcf0      	bgt.n	8009b32 <_printf_float+0x412>
 8009b50:	e6f7      	b.n	8009942 <_printf_float+0x222>
 8009b52:	f04f 0800 	mov.w	r8, #0
 8009b56:	f104 0919 	add.w	r9, r4, #25
 8009b5a:	e7f4      	b.n	8009b46 <_printf_float+0x426>

08009b5c <_printf_common>:
 8009b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b60:	4616      	mov	r6, r2
 8009b62:	4699      	mov	r9, r3
 8009b64:	688a      	ldr	r2, [r1, #8]
 8009b66:	690b      	ldr	r3, [r1, #16]
 8009b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	bfb8      	it	lt
 8009b70:	4613      	movlt	r3, r2
 8009b72:	6033      	str	r3, [r6, #0]
 8009b74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b78:	4607      	mov	r7, r0
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	b10a      	cbz	r2, 8009b82 <_printf_common+0x26>
 8009b7e:	3301      	adds	r3, #1
 8009b80:	6033      	str	r3, [r6, #0]
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	0699      	lsls	r1, r3, #26
 8009b86:	bf42      	ittt	mi
 8009b88:	6833      	ldrmi	r3, [r6, #0]
 8009b8a:	3302      	addmi	r3, #2
 8009b8c:	6033      	strmi	r3, [r6, #0]
 8009b8e:	6825      	ldr	r5, [r4, #0]
 8009b90:	f015 0506 	ands.w	r5, r5, #6
 8009b94:	d106      	bne.n	8009ba4 <_printf_common+0x48>
 8009b96:	f104 0a19 	add.w	sl, r4, #25
 8009b9a:	68e3      	ldr	r3, [r4, #12]
 8009b9c:	6832      	ldr	r2, [r6, #0]
 8009b9e:	1a9b      	subs	r3, r3, r2
 8009ba0:	42ab      	cmp	r3, r5
 8009ba2:	dc26      	bgt.n	8009bf2 <_printf_common+0x96>
 8009ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ba8:	1e13      	subs	r3, r2, #0
 8009baa:	6822      	ldr	r2, [r4, #0]
 8009bac:	bf18      	it	ne
 8009bae:	2301      	movne	r3, #1
 8009bb0:	0692      	lsls	r2, r2, #26
 8009bb2:	d42b      	bmi.n	8009c0c <_printf_common+0xb0>
 8009bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bb8:	4649      	mov	r1, r9
 8009bba:	4638      	mov	r0, r7
 8009bbc:	47c0      	blx	r8
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	d01e      	beq.n	8009c00 <_printf_common+0xa4>
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	68e5      	ldr	r5, [r4, #12]
 8009bc6:	6832      	ldr	r2, [r6, #0]
 8009bc8:	f003 0306 	and.w	r3, r3, #6
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	bf08      	it	eq
 8009bd0:	1aad      	subeq	r5, r5, r2
 8009bd2:	68a3      	ldr	r3, [r4, #8]
 8009bd4:	6922      	ldr	r2, [r4, #16]
 8009bd6:	bf0c      	ite	eq
 8009bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bdc:	2500      	movne	r5, #0
 8009bde:	4293      	cmp	r3, r2
 8009be0:	bfc4      	itt	gt
 8009be2:	1a9b      	subgt	r3, r3, r2
 8009be4:	18ed      	addgt	r5, r5, r3
 8009be6:	2600      	movs	r6, #0
 8009be8:	341a      	adds	r4, #26
 8009bea:	42b5      	cmp	r5, r6
 8009bec:	d11a      	bne.n	8009c24 <_printf_common+0xc8>
 8009bee:	2000      	movs	r0, #0
 8009bf0:	e008      	b.n	8009c04 <_printf_common+0xa8>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	4652      	mov	r2, sl
 8009bf6:	4649      	mov	r1, r9
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	47c0      	blx	r8
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	d103      	bne.n	8009c08 <_printf_common+0xac>
 8009c00:	f04f 30ff 	mov.w	r0, #4294967295
 8009c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c08:	3501      	adds	r5, #1
 8009c0a:	e7c6      	b.n	8009b9a <_printf_common+0x3e>
 8009c0c:	18e1      	adds	r1, r4, r3
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	2030      	movs	r0, #48	; 0x30
 8009c12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c16:	4422      	add	r2, r4
 8009c18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c20:	3302      	adds	r3, #2
 8009c22:	e7c7      	b.n	8009bb4 <_printf_common+0x58>
 8009c24:	2301      	movs	r3, #1
 8009c26:	4622      	mov	r2, r4
 8009c28:	4649      	mov	r1, r9
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	47c0      	blx	r8
 8009c2e:	3001      	adds	r0, #1
 8009c30:	d0e6      	beq.n	8009c00 <_printf_common+0xa4>
 8009c32:	3601      	adds	r6, #1
 8009c34:	e7d9      	b.n	8009bea <_printf_common+0x8e>
	...

08009c38 <_printf_i>:
 8009c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c3c:	7e0f      	ldrb	r7, [r1, #24]
 8009c3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c40:	2f78      	cmp	r7, #120	; 0x78
 8009c42:	4691      	mov	r9, r2
 8009c44:	4680      	mov	r8, r0
 8009c46:	460c      	mov	r4, r1
 8009c48:	469a      	mov	sl, r3
 8009c4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c4e:	d807      	bhi.n	8009c60 <_printf_i+0x28>
 8009c50:	2f62      	cmp	r7, #98	; 0x62
 8009c52:	d80a      	bhi.n	8009c6a <_printf_i+0x32>
 8009c54:	2f00      	cmp	r7, #0
 8009c56:	f000 80d8 	beq.w	8009e0a <_printf_i+0x1d2>
 8009c5a:	2f58      	cmp	r7, #88	; 0x58
 8009c5c:	f000 80a3 	beq.w	8009da6 <_printf_i+0x16e>
 8009c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c68:	e03a      	b.n	8009ce0 <_printf_i+0xa8>
 8009c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c6e:	2b15      	cmp	r3, #21
 8009c70:	d8f6      	bhi.n	8009c60 <_printf_i+0x28>
 8009c72:	a101      	add	r1, pc, #4	; (adr r1, 8009c78 <_printf_i+0x40>)
 8009c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c78:	08009cd1 	.word	0x08009cd1
 8009c7c:	08009ce5 	.word	0x08009ce5
 8009c80:	08009c61 	.word	0x08009c61
 8009c84:	08009c61 	.word	0x08009c61
 8009c88:	08009c61 	.word	0x08009c61
 8009c8c:	08009c61 	.word	0x08009c61
 8009c90:	08009ce5 	.word	0x08009ce5
 8009c94:	08009c61 	.word	0x08009c61
 8009c98:	08009c61 	.word	0x08009c61
 8009c9c:	08009c61 	.word	0x08009c61
 8009ca0:	08009c61 	.word	0x08009c61
 8009ca4:	08009df1 	.word	0x08009df1
 8009ca8:	08009d15 	.word	0x08009d15
 8009cac:	08009dd3 	.word	0x08009dd3
 8009cb0:	08009c61 	.word	0x08009c61
 8009cb4:	08009c61 	.word	0x08009c61
 8009cb8:	08009e13 	.word	0x08009e13
 8009cbc:	08009c61 	.word	0x08009c61
 8009cc0:	08009d15 	.word	0x08009d15
 8009cc4:	08009c61 	.word	0x08009c61
 8009cc8:	08009c61 	.word	0x08009c61
 8009ccc:	08009ddb 	.word	0x08009ddb
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	1d1a      	adds	r2, r3, #4
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	602a      	str	r2, [r5, #0]
 8009cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e0a3      	b.n	8009e2c <_printf_i+0x1f4>
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	6829      	ldr	r1, [r5, #0]
 8009ce8:	0606      	lsls	r6, r0, #24
 8009cea:	f101 0304 	add.w	r3, r1, #4
 8009cee:	d50a      	bpl.n	8009d06 <_printf_i+0xce>
 8009cf0:	680e      	ldr	r6, [r1, #0]
 8009cf2:	602b      	str	r3, [r5, #0]
 8009cf4:	2e00      	cmp	r6, #0
 8009cf6:	da03      	bge.n	8009d00 <_printf_i+0xc8>
 8009cf8:	232d      	movs	r3, #45	; 0x2d
 8009cfa:	4276      	negs	r6, r6
 8009cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d00:	485e      	ldr	r0, [pc, #376]	; (8009e7c <_printf_i+0x244>)
 8009d02:	230a      	movs	r3, #10
 8009d04:	e019      	b.n	8009d3a <_printf_i+0x102>
 8009d06:	680e      	ldr	r6, [r1, #0]
 8009d08:	602b      	str	r3, [r5, #0]
 8009d0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d0e:	bf18      	it	ne
 8009d10:	b236      	sxthne	r6, r6
 8009d12:	e7ef      	b.n	8009cf4 <_printf_i+0xbc>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	6820      	ldr	r0, [r4, #0]
 8009d18:	1d19      	adds	r1, r3, #4
 8009d1a:	6029      	str	r1, [r5, #0]
 8009d1c:	0601      	lsls	r1, r0, #24
 8009d1e:	d501      	bpl.n	8009d24 <_printf_i+0xec>
 8009d20:	681e      	ldr	r6, [r3, #0]
 8009d22:	e002      	b.n	8009d2a <_printf_i+0xf2>
 8009d24:	0646      	lsls	r6, r0, #25
 8009d26:	d5fb      	bpl.n	8009d20 <_printf_i+0xe8>
 8009d28:	881e      	ldrh	r6, [r3, #0]
 8009d2a:	4854      	ldr	r0, [pc, #336]	; (8009e7c <_printf_i+0x244>)
 8009d2c:	2f6f      	cmp	r7, #111	; 0x6f
 8009d2e:	bf0c      	ite	eq
 8009d30:	2308      	moveq	r3, #8
 8009d32:	230a      	movne	r3, #10
 8009d34:	2100      	movs	r1, #0
 8009d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d3a:	6865      	ldr	r5, [r4, #4]
 8009d3c:	60a5      	str	r5, [r4, #8]
 8009d3e:	2d00      	cmp	r5, #0
 8009d40:	bfa2      	ittt	ge
 8009d42:	6821      	ldrge	r1, [r4, #0]
 8009d44:	f021 0104 	bicge.w	r1, r1, #4
 8009d48:	6021      	strge	r1, [r4, #0]
 8009d4a:	b90e      	cbnz	r6, 8009d50 <_printf_i+0x118>
 8009d4c:	2d00      	cmp	r5, #0
 8009d4e:	d04d      	beq.n	8009dec <_printf_i+0x1b4>
 8009d50:	4615      	mov	r5, r2
 8009d52:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d56:	fb03 6711 	mls	r7, r3, r1, r6
 8009d5a:	5dc7      	ldrb	r7, [r0, r7]
 8009d5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d60:	4637      	mov	r7, r6
 8009d62:	42bb      	cmp	r3, r7
 8009d64:	460e      	mov	r6, r1
 8009d66:	d9f4      	bls.n	8009d52 <_printf_i+0x11a>
 8009d68:	2b08      	cmp	r3, #8
 8009d6a:	d10b      	bne.n	8009d84 <_printf_i+0x14c>
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	07de      	lsls	r6, r3, #31
 8009d70:	d508      	bpl.n	8009d84 <_printf_i+0x14c>
 8009d72:	6923      	ldr	r3, [r4, #16]
 8009d74:	6861      	ldr	r1, [r4, #4]
 8009d76:	4299      	cmp	r1, r3
 8009d78:	bfde      	ittt	le
 8009d7a:	2330      	movle	r3, #48	; 0x30
 8009d7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d84:	1b52      	subs	r2, r2, r5
 8009d86:	6122      	str	r2, [r4, #16]
 8009d88:	f8cd a000 	str.w	sl, [sp]
 8009d8c:	464b      	mov	r3, r9
 8009d8e:	aa03      	add	r2, sp, #12
 8009d90:	4621      	mov	r1, r4
 8009d92:	4640      	mov	r0, r8
 8009d94:	f7ff fee2 	bl	8009b5c <_printf_common>
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d14c      	bne.n	8009e36 <_printf_i+0x1fe>
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009da0:	b004      	add	sp, #16
 8009da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da6:	4835      	ldr	r0, [pc, #212]	; (8009e7c <_printf_i+0x244>)
 8009da8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009dac:	6829      	ldr	r1, [r5, #0]
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009db4:	6029      	str	r1, [r5, #0]
 8009db6:	061d      	lsls	r5, r3, #24
 8009db8:	d514      	bpl.n	8009de4 <_printf_i+0x1ac>
 8009dba:	07df      	lsls	r7, r3, #31
 8009dbc:	bf44      	itt	mi
 8009dbe:	f043 0320 	orrmi.w	r3, r3, #32
 8009dc2:	6023      	strmi	r3, [r4, #0]
 8009dc4:	b91e      	cbnz	r6, 8009dce <_printf_i+0x196>
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	f023 0320 	bic.w	r3, r3, #32
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	2310      	movs	r3, #16
 8009dd0:	e7b0      	b.n	8009d34 <_printf_i+0xfc>
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	f043 0320 	orr.w	r3, r3, #32
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	2378      	movs	r3, #120	; 0x78
 8009ddc:	4828      	ldr	r0, [pc, #160]	; (8009e80 <_printf_i+0x248>)
 8009dde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009de2:	e7e3      	b.n	8009dac <_printf_i+0x174>
 8009de4:	0659      	lsls	r1, r3, #25
 8009de6:	bf48      	it	mi
 8009de8:	b2b6      	uxthmi	r6, r6
 8009dea:	e7e6      	b.n	8009dba <_printf_i+0x182>
 8009dec:	4615      	mov	r5, r2
 8009dee:	e7bb      	b.n	8009d68 <_printf_i+0x130>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	6826      	ldr	r6, [r4, #0]
 8009df4:	6961      	ldr	r1, [r4, #20]
 8009df6:	1d18      	adds	r0, r3, #4
 8009df8:	6028      	str	r0, [r5, #0]
 8009dfa:	0635      	lsls	r5, r6, #24
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	d501      	bpl.n	8009e04 <_printf_i+0x1cc>
 8009e00:	6019      	str	r1, [r3, #0]
 8009e02:	e002      	b.n	8009e0a <_printf_i+0x1d2>
 8009e04:	0670      	lsls	r0, r6, #25
 8009e06:	d5fb      	bpl.n	8009e00 <_printf_i+0x1c8>
 8009e08:	8019      	strh	r1, [r3, #0]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	6123      	str	r3, [r4, #16]
 8009e0e:	4615      	mov	r5, r2
 8009e10:	e7ba      	b.n	8009d88 <_printf_i+0x150>
 8009e12:	682b      	ldr	r3, [r5, #0]
 8009e14:	1d1a      	adds	r2, r3, #4
 8009e16:	602a      	str	r2, [r5, #0]
 8009e18:	681d      	ldr	r5, [r3, #0]
 8009e1a:	6862      	ldr	r2, [r4, #4]
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f7f6 fa66 	bl	80002f0 <memchr>
 8009e24:	b108      	cbz	r0, 8009e2a <_printf_i+0x1f2>
 8009e26:	1b40      	subs	r0, r0, r5
 8009e28:	6060      	str	r0, [r4, #4]
 8009e2a:	6863      	ldr	r3, [r4, #4]
 8009e2c:	6123      	str	r3, [r4, #16]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e34:	e7a8      	b.n	8009d88 <_printf_i+0x150>
 8009e36:	6923      	ldr	r3, [r4, #16]
 8009e38:	462a      	mov	r2, r5
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	47d0      	blx	sl
 8009e40:	3001      	adds	r0, #1
 8009e42:	d0ab      	beq.n	8009d9c <_printf_i+0x164>
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	079b      	lsls	r3, r3, #30
 8009e48:	d413      	bmi.n	8009e72 <_printf_i+0x23a>
 8009e4a:	68e0      	ldr	r0, [r4, #12]
 8009e4c:	9b03      	ldr	r3, [sp, #12]
 8009e4e:	4298      	cmp	r0, r3
 8009e50:	bfb8      	it	lt
 8009e52:	4618      	movlt	r0, r3
 8009e54:	e7a4      	b.n	8009da0 <_printf_i+0x168>
 8009e56:	2301      	movs	r3, #1
 8009e58:	4632      	mov	r2, r6
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	47d0      	blx	sl
 8009e60:	3001      	adds	r0, #1
 8009e62:	d09b      	beq.n	8009d9c <_printf_i+0x164>
 8009e64:	3501      	adds	r5, #1
 8009e66:	68e3      	ldr	r3, [r4, #12]
 8009e68:	9903      	ldr	r1, [sp, #12]
 8009e6a:	1a5b      	subs	r3, r3, r1
 8009e6c:	42ab      	cmp	r3, r5
 8009e6e:	dcf2      	bgt.n	8009e56 <_printf_i+0x21e>
 8009e70:	e7eb      	b.n	8009e4a <_printf_i+0x212>
 8009e72:	2500      	movs	r5, #0
 8009e74:	f104 0619 	add.w	r6, r4, #25
 8009e78:	e7f5      	b.n	8009e66 <_printf_i+0x22e>
 8009e7a:	bf00      	nop
 8009e7c:	0800c3a2 	.word	0x0800c3a2
 8009e80:	0800c3b3 	.word	0x0800c3b3

08009e84 <siprintf>:
 8009e84:	b40e      	push	{r1, r2, r3}
 8009e86:	b500      	push	{lr}
 8009e88:	b09c      	sub	sp, #112	; 0x70
 8009e8a:	ab1d      	add	r3, sp, #116	; 0x74
 8009e8c:	9002      	str	r0, [sp, #8]
 8009e8e:	9006      	str	r0, [sp, #24]
 8009e90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e94:	4809      	ldr	r0, [pc, #36]	; (8009ebc <siprintf+0x38>)
 8009e96:	9107      	str	r1, [sp, #28]
 8009e98:	9104      	str	r1, [sp, #16]
 8009e9a:	4909      	ldr	r1, [pc, #36]	; (8009ec0 <siprintf+0x3c>)
 8009e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea0:	9105      	str	r1, [sp, #20]
 8009ea2:	6800      	ldr	r0, [r0, #0]
 8009ea4:	9301      	str	r3, [sp, #4]
 8009ea6:	a902      	add	r1, sp, #8
 8009ea8:	f001 faf8 	bl	800b49c <_svfiprintf_r>
 8009eac:	9b02      	ldr	r3, [sp, #8]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	701a      	strb	r2, [r3, #0]
 8009eb2:	b01c      	add	sp, #112	; 0x70
 8009eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb8:	b003      	add	sp, #12
 8009eba:	4770      	bx	lr
 8009ebc:	24000010 	.word	0x24000010
 8009ec0:	ffff0208 	.word	0xffff0208

08009ec4 <quorem>:
 8009ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec8:	6903      	ldr	r3, [r0, #16]
 8009eca:	690c      	ldr	r4, [r1, #16]
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	4607      	mov	r7, r0
 8009ed0:	f2c0 8081 	blt.w	8009fd6 <quorem+0x112>
 8009ed4:	3c01      	subs	r4, #1
 8009ed6:	f101 0814 	add.w	r8, r1, #20
 8009eda:	f100 0514 	add.w	r5, r0, #20
 8009ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ee2:	9301      	str	r3, [sp, #4]
 8009ee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eec:	3301      	adds	r3, #1
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ef8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009efc:	d331      	bcc.n	8009f62 <quorem+0x9e>
 8009efe:	f04f 0e00 	mov.w	lr, #0
 8009f02:	4640      	mov	r0, r8
 8009f04:	46ac      	mov	ip, r5
 8009f06:	46f2      	mov	sl, lr
 8009f08:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f0c:	b293      	uxth	r3, r2
 8009f0e:	fb06 e303 	mla	r3, r6, r3, lr
 8009f12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	ebaa 0303 	sub.w	r3, sl, r3
 8009f1c:	f8dc a000 	ldr.w	sl, [ip]
 8009f20:	0c12      	lsrs	r2, r2, #16
 8009f22:	fa13 f38a 	uxtah	r3, r3, sl
 8009f26:	fb06 e202 	mla	r2, r6, r2, lr
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	9b00      	ldr	r3, [sp, #0]
 8009f2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f32:	b292      	uxth	r2, r2
 8009f34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f40:	4581      	cmp	r9, r0
 8009f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f46:	f84c 3b04 	str.w	r3, [ip], #4
 8009f4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f4e:	d2db      	bcs.n	8009f08 <quorem+0x44>
 8009f50:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f54:	b92b      	cbnz	r3, 8009f62 <quorem+0x9e>
 8009f56:	9b01      	ldr	r3, [sp, #4]
 8009f58:	3b04      	subs	r3, #4
 8009f5a:	429d      	cmp	r5, r3
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	d32e      	bcc.n	8009fbe <quorem+0xfa>
 8009f60:	613c      	str	r4, [r7, #16]
 8009f62:	4638      	mov	r0, r7
 8009f64:	f001 f846 	bl	800aff4 <__mcmp>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	db24      	blt.n	8009fb6 <quorem+0xf2>
 8009f6c:	3601      	adds	r6, #1
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f04f 0c00 	mov.w	ip, #0
 8009f74:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f78:	f8d0 e000 	ldr.w	lr, [r0]
 8009f7c:	b293      	uxth	r3, r2
 8009f7e:	ebac 0303 	sub.w	r3, ip, r3
 8009f82:	0c12      	lsrs	r2, r2, #16
 8009f84:	fa13 f38e 	uxtah	r3, r3, lr
 8009f88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f96:	45c1      	cmp	r9, r8
 8009f98:	f840 3b04 	str.w	r3, [r0], #4
 8009f9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009fa0:	d2e8      	bcs.n	8009f74 <quorem+0xb0>
 8009fa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009faa:	b922      	cbnz	r2, 8009fb6 <quorem+0xf2>
 8009fac:	3b04      	subs	r3, #4
 8009fae:	429d      	cmp	r5, r3
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	d30a      	bcc.n	8009fca <quorem+0x106>
 8009fb4:	613c      	str	r4, [r7, #16]
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	b003      	add	sp, #12
 8009fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbe:	6812      	ldr	r2, [r2, #0]
 8009fc0:	3b04      	subs	r3, #4
 8009fc2:	2a00      	cmp	r2, #0
 8009fc4:	d1cc      	bne.n	8009f60 <quorem+0x9c>
 8009fc6:	3c01      	subs	r4, #1
 8009fc8:	e7c7      	b.n	8009f5a <quorem+0x96>
 8009fca:	6812      	ldr	r2, [r2, #0]
 8009fcc:	3b04      	subs	r3, #4
 8009fce:	2a00      	cmp	r2, #0
 8009fd0:	d1f0      	bne.n	8009fb4 <quorem+0xf0>
 8009fd2:	3c01      	subs	r4, #1
 8009fd4:	e7eb      	b.n	8009fae <quorem+0xea>
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	e7ee      	b.n	8009fb8 <quorem+0xf4>
 8009fda:	0000      	movs	r0, r0
 8009fdc:	0000      	movs	r0, r0
	...

08009fe0 <_dtoa_r>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	ed2d 8b02 	vpush	{d8}
 8009fe8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009fea:	b091      	sub	sp, #68	; 0x44
 8009fec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ff0:	ec59 8b10 	vmov	r8, r9, d0
 8009ff4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009ff6:	9106      	str	r1, [sp, #24]
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	9208      	str	r2, [sp, #32]
 8009ffc:	930c      	str	r3, [sp, #48]	; 0x30
 8009ffe:	b975      	cbnz	r5, 800a01e <_dtoa_r+0x3e>
 800a000:	2010      	movs	r0, #16
 800a002:	f000 fd5f 	bl	800aac4 <malloc>
 800a006:	4602      	mov	r2, r0
 800a008:	6270      	str	r0, [r6, #36]	; 0x24
 800a00a:	b920      	cbnz	r0, 800a016 <_dtoa_r+0x36>
 800a00c:	4baa      	ldr	r3, [pc, #680]	; (800a2b8 <_dtoa_r+0x2d8>)
 800a00e:	21ea      	movs	r1, #234	; 0xea
 800a010:	48aa      	ldr	r0, [pc, #680]	; (800a2bc <_dtoa_r+0x2dc>)
 800a012:	f001 fb53 	bl	800b6bc <__assert_func>
 800a016:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a01a:	6005      	str	r5, [r0, #0]
 800a01c:	60c5      	str	r5, [r0, #12]
 800a01e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a020:	6819      	ldr	r1, [r3, #0]
 800a022:	b151      	cbz	r1, 800a03a <_dtoa_r+0x5a>
 800a024:	685a      	ldr	r2, [r3, #4]
 800a026:	604a      	str	r2, [r1, #4]
 800a028:	2301      	movs	r3, #1
 800a02a:	4093      	lsls	r3, r2
 800a02c:	608b      	str	r3, [r1, #8]
 800a02e:	4630      	mov	r0, r6
 800a030:	f000 fd9e 	bl	800ab70 <_Bfree>
 800a034:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a036:	2200      	movs	r2, #0
 800a038:	601a      	str	r2, [r3, #0]
 800a03a:	f1b9 0300 	subs.w	r3, r9, #0
 800a03e:	bfbb      	ittet	lt
 800a040:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a044:	9303      	strlt	r3, [sp, #12]
 800a046:	2300      	movge	r3, #0
 800a048:	2201      	movlt	r2, #1
 800a04a:	bfac      	ite	ge
 800a04c:	6023      	strge	r3, [r4, #0]
 800a04e:	6022      	strlt	r2, [r4, #0]
 800a050:	4b9b      	ldr	r3, [pc, #620]	; (800a2c0 <_dtoa_r+0x2e0>)
 800a052:	9c03      	ldr	r4, [sp, #12]
 800a054:	43a3      	bics	r3, r4
 800a056:	d11c      	bne.n	800a092 <_dtoa_r+0xb2>
 800a058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a05a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a064:	ea53 0308 	orrs.w	r3, r3, r8
 800a068:	f000 84fd 	beq.w	800aa66 <_dtoa_r+0xa86>
 800a06c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a06e:	b963      	cbnz	r3, 800a08a <_dtoa_r+0xaa>
 800a070:	4b94      	ldr	r3, [pc, #592]	; (800a2c4 <_dtoa_r+0x2e4>)
 800a072:	e01f      	b.n	800a0b4 <_dtoa_r+0xd4>
 800a074:	4b94      	ldr	r3, [pc, #592]	; (800a2c8 <_dtoa_r+0x2e8>)
 800a076:	9301      	str	r3, [sp, #4]
 800a078:	3308      	adds	r3, #8
 800a07a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a07c:	6013      	str	r3, [r2, #0]
 800a07e:	9801      	ldr	r0, [sp, #4]
 800a080:	b011      	add	sp, #68	; 0x44
 800a082:	ecbd 8b02 	vpop	{d8}
 800a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08a:	4b8e      	ldr	r3, [pc, #568]	; (800a2c4 <_dtoa_r+0x2e4>)
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	3303      	adds	r3, #3
 800a090:	e7f3      	b.n	800a07a <_dtoa_r+0x9a>
 800a092:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a096:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a09e:	d10b      	bne.n	800a0b8 <_dtoa_r+0xd8>
 800a0a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	6013      	str	r3, [r2, #0]
 800a0a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 84d9 	beq.w	800aa60 <_dtoa_r+0xa80>
 800a0ae:	4887      	ldr	r0, [pc, #540]	; (800a2cc <_dtoa_r+0x2ec>)
 800a0b0:	6018      	str	r0, [r3, #0]
 800a0b2:	1e43      	subs	r3, r0, #1
 800a0b4:	9301      	str	r3, [sp, #4]
 800a0b6:	e7e2      	b.n	800a07e <_dtoa_r+0x9e>
 800a0b8:	a90f      	add	r1, sp, #60	; 0x3c
 800a0ba:	aa0e      	add	r2, sp, #56	; 0x38
 800a0bc:	4630      	mov	r0, r6
 800a0be:	eeb0 0b48 	vmov.f64	d0, d8
 800a0c2:	f001 f83d 	bl	800b140 <__d2b>
 800a0c6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	d046      	beq.n	800a160 <_dtoa_r+0x180>
 800a0d2:	ee18 4a90 	vmov	r4, s17
 800a0d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a0da:	ec53 2b18 	vmov	r2, r3, d8
 800a0de:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a0e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a0e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a0ea:	2400      	movs	r4, #0
 800a0ec:	ec43 2b16 	vmov	d6, r2, r3
 800a0f0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a0f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a2a0 <_dtoa_r+0x2c0>
 800a0f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a0fc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a2a8 <_dtoa_r+0x2c8>
 800a100:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a104:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a2b0 <_dtoa_r+0x2d0>
 800a108:	ee07 1a90 	vmov	s15, r1
 800a10c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a110:	eeb0 7b46 	vmov.f64	d7, d6
 800a114:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a118:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a11c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a124:	ee16 ba90 	vmov	fp, s13
 800a128:	940a      	str	r4, [sp, #40]	; 0x28
 800a12a:	d508      	bpl.n	800a13e <_dtoa_r+0x15e>
 800a12c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a130:	eeb4 6b47 	vcmp.f64	d6, d7
 800a134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a138:	bf18      	it	ne
 800a13a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a13e:	f1bb 0f16 	cmp.w	fp, #22
 800a142:	d82f      	bhi.n	800a1a4 <_dtoa_r+0x1c4>
 800a144:	4b62      	ldr	r3, [pc, #392]	; (800a2d0 <_dtoa_r+0x2f0>)
 800a146:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a14a:	ed93 7b00 	vldr	d7, [r3]
 800a14e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a156:	d501      	bpl.n	800a15c <_dtoa_r+0x17c>
 800a158:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a15c:	2300      	movs	r3, #0
 800a15e:	e022      	b.n	800a1a6 <_dtoa_r+0x1c6>
 800a160:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a162:	4401      	add	r1, r0
 800a164:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a168:	2b20      	cmp	r3, #32
 800a16a:	bfc1      	itttt	gt
 800a16c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a170:	fa04 f303 	lslgt.w	r3, r4, r3
 800a174:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a178:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a17c:	bfd6      	itet	le
 800a17e:	f1c3 0320 	rsble	r3, r3, #32
 800a182:	ea43 0808 	orrgt.w	r8, r3, r8
 800a186:	fa08 f803 	lslle.w	r8, r8, r3
 800a18a:	ee07 8a90 	vmov	s15, r8
 800a18e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a192:	3901      	subs	r1, #1
 800a194:	ee17 4a90 	vmov	r4, s15
 800a198:	ec53 2b17 	vmov	r2, r3, d7
 800a19c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a1a0:	2401      	movs	r4, #1
 800a1a2:	e7a3      	b.n	800a0ec <_dtoa_r+0x10c>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1a8:	1a43      	subs	r3, r0, r1
 800a1aa:	1e5a      	subs	r2, r3, #1
 800a1ac:	bf45      	ittet	mi
 800a1ae:	f1c3 0301 	rsbmi	r3, r3, #1
 800a1b2:	9304      	strmi	r3, [sp, #16]
 800a1b4:	2300      	movpl	r3, #0
 800a1b6:	2300      	movmi	r3, #0
 800a1b8:	9205      	str	r2, [sp, #20]
 800a1ba:	bf54      	ite	pl
 800a1bc:	9304      	strpl	r3, [sp, #16]
 800a1be:	9305      	strmi	r3, [sp, #20]
 800a1c0:	f1bb 0f00 	cmp.w	fp, #0
 800a1c4:	db18      	blt.n	800a1f8 <_dtoa_r+0x218>
 800a1c6:	9b05      	ldr	r3, [sp, #20]
 800a1c8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a1cc:	445b      	add	r3, fp
 800a1ce:	9305      	str	r3, [sp, #20]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	9a06      	ldr	r2, [sp, #24]
 800a1d4:	2a09      	cmp	r2, #9
 800a1d6:	d849      	bhi.n	800a26c <_dtoa_r+0x28c>
 800a1d8:	2a05      	cmp	r2, #5
 800a1da:	bfc4      	itt	gt
 800a1dc:	3a04      	subgt	r2, #4
 800a1de:	9206      	strgt	r2, [sp, #24]
 800a1e0:	9a06      	ldr	r2, [sp, #24]
 800a1e2:	f1a2 0202 	sub.w	r2, r2, #2
 800a1e6:	bfcc      	ite	gt
 800a1e8:	2400      	movgt	r4, #0
 800a1ea:	2401      	movle	r4, #1
 800a1ec:	2a03      	cmp	r2, #3
 800a1ee:	d848      	bhi.n	800a282 <_dtoa_r+0x2a2>
 800a1f0:	e8df f002 	tbb	[pc, r2]
 800a1f4:	3a2c2e0b 	.word	0x3a2c2e0b
 800a1f8:	9b04      	ldr	r3, [sp, #16]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	eba3 030b 	sub.w	r3, r3, fp
 800a200:	9304      	str	r3, [sp, #16]
 800a202:	9209      	str	r2, [sp, #36]	; 0x24
 800a204:	f1cb 0300 	rsb	r3, fp, #0
 800a208:	e7e3      	b.n	800a1d2 <_dtoa_r+0x1f2>
 800a20a:	2200      	movs	r2, #0
 800a20c:	9207      	str	r2, [sp, #28]
 800a20e:	9a08      	ldr	r2, [sp, #32]
 800a210:	2a00      	cmp	r2, #0
 800a212:	dc39      	bgt.n	800a288 <_dtoa_r+0x2a8>
 800a214:	f04f 0a01 	mov.w	sl, #1
 800a218:	46d1      	mov	r9, sl
 800a21a:	4652      	mov	r2, sl
 800a21c:	f8cd a020 	str.w	sl, [sp, #32]
 800a220:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a222:	2100      	movs	r1, #0
 800a224:	6079      	str	r1, [r7, #4]
 800a226:	2004      	movs	r0, #4
 800a228:	f100 0c14 	add.w	ip, r0, #20
 800a22c:	4594      	cmp	ip, r2
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	d92f      	bls.n	800a292 <_dtoa_r+0x2b2>
 800a232:	4630      	mov	r0, r6
 800a234:	930d      	str	r3, [sp, #52]	; 0x34
 800a236:	f000 fc5b 	bl	800aaf0 <_Balloc>
 800a23a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a23c:	9001      	str	r0, [sp, #4]
 800a23e:	4602      	mov	r2, r0
 800a240:	2800      	cmp	r0, #0
 800a242:	d149      	bne.n	800a2d8 <_dtoa_r+0x2f8>
 800a244:	4b23      	ldr	r3, [pc, #140]	; (800a2d4 <_dtoa_r+0x2f4>)
 800a246:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a24a:	e6e1      	b.n	800a010 <_dtoa_r+0x30>
 800a24c:	2201      	movs	r2, #1
 800a24e:	e7dd      	b.n	800a20c <_dtoa_r+0x22c>
 800a250:	2200      	movs	r2, #0
 800a252:	9207      	str	r2, [sp, #28]
 800a254:	9a08      	ldr	r2, [sp, #32]
 800a256:	eb0b 0a02 	add.w	sl, fp, r2
 800a25a:	f10a 0901 	add.w	r9, sl, #1
 800a25e:	464a      	mov	r2, r9
 800a260:	2a01      	cmp	r2, #1
 800a262:	bfb8      	it	lt
 800a264:	2201      	movlt	r2, #1
 800a266:	e7db      	b.n	800a220 <_dtoa_r+0x240>
 800a268:	2201      	movs	r2, #1
 800a26a:	e7f2      	b.n	800a252 <_dtoa_r+0x272>
 800a26c:	2401      	movs	r4, #1
 800a26e:	2200      	movs	r2, #0
 800a270:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a274:	f04f 3aff 	mov.w	sl, #4294967295
 800a278:	2100      	movs	r1, #0
 800a27a:	46d1      	mov	r9, sl
 800a27c:	2212      	movs	r2, #18
 800a27e:	9108      	str	r1, [sp, #32]
 800a280:	e7ce      	b.n	800a220 <_dtoa_r+0x240>
 800a282:	2201      	movs	r2, #1
 800a284:	9207      	str	r2, [sp, #28]
 800a286:	e7f5      	b.n	800a274 <_dtoa_r+0x294>
 800a288:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a28c:	46d1      	mov	r9, sl
 800a28e:	4652      	mov	r2, sl
 800a290:	e7c6      	b.n	800a220 <_dtoa_r+0x240>
 800a292:	3101      	adds	r1, #1
 800a294:	6079      	str	r1, [r7, #4]
 800a296:	0040      	lsls	r0, r0, #1
 800a298:	e7c6      	b.n	800a228 <_dtoa_r+0x248>
 800a29a:	bf00      	nop
 800a29c:	f3af 8000 	nop.w
 800a2a0:	636f4361 	.word	0x636f4361
 800a2a4:	3fd287a7 	.word	0x3fd287a7
 800a2a8:	8b60c8b3 	.word	0x8b60c8b3
 800a2ac:	3fc68a28 	.word	0x3fc68a28
 800a2b0:	509f79fb 	.word	0x509f79fb
 800a2b4:	3fd34413 	.word	0x3fd34413
 800a2b8:	0800c3d1 	.word	0x0800c3d1
 800a2bc:	0800c3e8 	.word	0x0800c3e8
 800a2c0:	7ff00000 	.word	0x7ff00000
 800a2c4:	0800c3cd 	.word	0x0800c3cd
 800a2c8:	0800c3c4 	.word	0x0800c3c4
 800a2cc:	0800c3a1 	.word	0x0800c3a1
 800a2d0:	0800c4d8 	.word	0x0800c4d8
 800a2d4:	0800c443 	.word	0x0800c443
 800a2d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a2da:	9901      	ldr	r1, [sp, #4]
 800a2dc:	6011      	str	r1, [r2, #0]
 800a2de:	f1b9 0f0e 	cmp.w	r9, #14
 800a2e2:	d86c      	bhi.n	800a3be <_dtoa_r+0x3de>
 800a2e4:	2c00      	cmp	r4, #0
 800a2e6:	d06a      	beq.n	800a3be <_dtoa_r+0x3de>
 800a2e8:	f1bb 0f00 	cmp.w	fp, #0
 800a2ec:	f340 80a0 	ble.w	800a430 <_dtoa_r+0x450>
 800a2f0:	49c1      	ldr	r1, [pc, #772]	; (800a5f8 <_dtoa_r+0x618>)
 800a2f2:	f00b 020f 	and.w	r2, fp, #15
 800a2f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a2fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a2fe:	ed92 7b00 	vldr	d7, [r2]
 800a302:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a306:	f000 8087 	beq.w	800a418 <_dtoa_r+0x438>
 800a30a:	4abc      	ldr	r2, [pc, #752]	; (800a5fc <_dtoa_r+0x61c>)
 800a30c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a310:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a314:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a318:	f001 010f 	and.w	r1, r1, #15
 800a31c:	2203      	movs	r2, #3
 800a31e:	48b7      	ldr	r0, [pc, #732]	; (800a5fc <_dtoa_r+0x61c>)
 800a320:	2900      	cmp	r1, #0
 800a322:	d17b      	bne.n	800a41c <_dtoa_r+0x43c>
 800a324:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a328:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a32c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a332:	2900      	cmp	r1, #0
 800a334:	f000 80a2 	beq.w	800a47c <_dtoa_r+0x49c>
 800a338:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a33c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a340:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a348:	f140 8098 	bpl.w	800a47c <_dtoa_r+0x49c>
 800a34c:	f1b9 0f00 	cmp.w	r9, #0
 800a350:	f000 8094 	beq.w	800a47c <_dtoa_r+0x49c>
 800a354:	f1ba 0f00 	cmp.w	sl, #0
 800a358:	dd2f      	ble.n	800a3ba <_dtoa_r+0x3da>
 800a35a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a35e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a362:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a366:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a36a:	3201      	adds	r2, #1
 800a36c:	4650      	mov	r0, sl
 800a36e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a372:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a376:	ee07 2a90 	vmov	s15, r2
 800a37a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a37e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a382:	ee15 4a90 	vmov	r4, s11
 800a386:	ec52 1b15 	vmov	r1, r2, d5
 800a38a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a38e:	2800      	cmp	r0, #0
 800a390:	d177      	bne.n	800a482 <_dtoa_r+0x4a2>
 800a392:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a396:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a39a:	ec42 1b17 	vmov	d7, r1, r2
 800a39e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a6:	f300 8263 	bgt.w	800a870 <_dtoa_r+0x890>
 800a3aa:	eeb1 7b47 	vneg.f64	d7, d7
 800a3ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b6:	f100 8258 	bmi.w	800a86a <_dtoa_r+0x88a>
 800a3ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a3be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3c0:	2a00      	cmp	r2, #0
 800a3c2:	f2c0 811d 	blt.w	800a600 <_dtoa_r+0x620>
 800a3c6:	f1bb 0f0e 	cmp.w	fp, #14
 800a3ca:	f300 8119 	bgt.w	800a600 <_dtoa_r+0x620>
 800a3ce:	4b8a      	ldr	r3, [pc, #552]	; (800a5f8 <_dtoa_r+0x618>)
 800a3d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a3d4:	ed93 6b00 	vldr	d6, [r3]
 800a3d8:	9b08      	ldr	r3, [sp, #32]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f280 80b7 	bge.w	800a54e <_dtoa_r+0x56e>
 800a3e0:	f1b9 0f00 	cmp.w	r9, #0
 800a3e4:	f300 80b3 	bgt.w	800a54e <_dtoa_r+0x56e>
 800a3e8:	f040 823f 	bne.w	800a86a <_dtoa_r+0x88a>
 800a3ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a3f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a3f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a400:	464c      	mov	r4, r9
 800a402:	464f      	mov	r7, r9
 800a404:	f280 8215 	bge.w	800a832 <_dtoa_r+0x852>
 800a408:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a40c:	2331      	movs	r3, #49	; 0x31
 800a40e:	f808 3b01 	strb.w	r3, [r8], #1
 800a412:	f10b 0b01 	add.w	fp, fp, #1
 800a416:	e211      	b.n	800a83c <_dtoa_r+0x85c>
 800a418:	2202      	movs	r2, #2
 800a41a:	e780      	b.n	800a31e <_dtoa_r+0x33e>
 800a41c:	07cc      	lsls	r4, r1, #31
 800a41e:	d504      	bpl.n	800a42a <_dtoa_r+0x44a>
 800a420:	ed90 6b00 	vldr	d6, [r0]
 800a424:	3201      	adds	r2, #1
 800a426:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a42a:	1049      	asrs	r1, r1, #1
 800a42c:	3008      	adds	r0, #8
 800a42e:	e777      	b.n	800a320 <_dtoa_r+0x340>
 800a430:	d022      	beq.n	800a478 <_dtoa_r+0x498>
 800a432:	f1cb 0100 	rsb	r1, fp, #0
 800a436:	4a70      	ldr	r2, [pc, #448]	; (800a5f8 <_dtoa_r+0x618>)
 800a438:	f001 000f 	and.w	r0, r1, #15
 800a43c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a440:	ed92 7b00 	vldr	d7, [r2]
 800a444:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a448:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a44c:	486b      	ldr	r0, [pc, #428]	; (800a5fc <_dtoa_r+0x61c>)
 800a44e:	1109      	asrs	r1, r1, #4
 800a450:	2400      	movs	r4, #0
 800a452:	2202      	movs	r2, #2
 800a454:	b929      	cbnz	r1, 800a462 <_dtoa_r+0x482>
 800a456:	2c00      	cmp	r4, #0
 800a458:	f43f af6a 	beq.w	800a330 <_dtoa_r+0x350>
 800a45c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a460:	e766      	b.n	800a330 <_dtoa_r+0x350>
 800a462:	07cf      	lsls	r7, r1, #31
 800a464:	d505      	bpl.n	800a472 <_dtoa_r+0x492>
 800a466:	ed90 6b00 	vldr	d6, [r0]
 800a46a:	3201      	adds	r2, #1
 800a46c:	2401      	movs	r4, #1
 800a46e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a472:	1049      	asrs	r1, r1, #1
 800a474:	3008      	adds	r0, #8
 800a476:	e7ed      	b.n	800a454 <_dtoa_r+0x474>
 800a478:	2202      	movs	r2, #2
 800a47a:	e759      	b.n	800a330 <_dtoa_r+0x350>
 800a47c:	465f      	mov	r7, fp
 800a47e:	4648      	mov	r0, r9
 800a480:	e775      	b.n	800a36e <_dtoa_r+0x38e>
 800a482:	ec42 1b17 	vmov	d7, r1, r2
 800a486:	4a5c      	ldr	r2, [pc, #368]	; (800a5f8 <_dtoa_r+0x618>)
 800a488:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a48c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a490:	9a01      	ldr	r2, [sp, #4]
 800a492:	1814      	adds	r4, r2, r0
 800a494:	9a07      	ldr	r2, [sp, #28]
 800a496:	b352      	cbz	r2, 800a4ee <_dtoa_r+0x50e>
 800a498:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a49c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a4a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a4a4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a4a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a4ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a4b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a4b4:	ee14 2a90 	vmov	r2, s9
 800a4b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a4bc:	3230      	adds	r2, #48	; 0x30
 800a4be:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a4c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ca:	f808 2b01 	strb.w	r2, [r8], #1
 800a4ce:	d439      	bmi.n	800a544 <_dtoa_r+0x564>
 800a4d0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a4d4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4dc:	d472      	bmi.n	800a5c4 <_dtoa_r+0x5e4>
 800a4de:	45a0      	cmp	r8, r4
 800a4e0:	f43f af6b 	beq.w	800a3ba <_dtoa_r+0x3da>
 800a4e4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a4e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a4ec:	e7e0      	b.n	800a4b0 <_dtoa_r+0x4d0>
 800a4ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a4f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a4fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a500:	ee14 2a90 	vmov	r2, s9
 800a504:	3230      	adds	r2, #48	; 0x30
 800a506:	f808 2b01 	strb.w	r2, [r8], #1
 800a50a:	45a0      	cmp	r8, r4
 800a50c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a510:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a514:	d118      	bne.n	800a548 <_dtoa_r+0x568>
 800a516:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a51a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a51e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a526:	dc4d      	bgt.n	800a5c4 <_dtoa_r+0x5e4>
 800a528:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a52c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a534:	f57f af41 	bpl.w	800a3ba <_dtoa_r+0x3da>
 800a538:	4688      	mov	r8, r1
 800a53a:	3901      	subs	r1, #1
 800a53c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a540:	2b30      	cmp	r3, #48	; 0x30
 800a542:	d0f9      	beq.n	800a538 <_dtoa_r+0x558>
 800a544:	46bb      	mov	fp, r7
 800a546:	e02a      	b.n	800a59e <_dtoa_r+0x5be>
 800a548:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a54c:	e7d6      	b.n	800a4fc <_dtoa_r+0x51c>
 800a54e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a552:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a556:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a55a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a55e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a562:	ee15 3a10 	vmov	r3, s10
 800a566:	3330      	adds	r3, #48	; 0x30
 800a568:	f808 3b01 	strb.w	r3, [r8], #1
 800a56c:	9b01      	ldr	r3, [sp, #4]
 800a56e:	eba8 0303 	sub.w	r3, r8, r3
 800a572:	4599      	cmp	r9, r3
 800a574:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a578:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a57c:	d133      	bne.n	800a5e6 <_dtoa_r+0x606>
 800a57e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a582:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a58a:	dc1a      	bgt.n	800a5c2 <_dtoa_r+0x5e2>
 800a58c:	eeb4 7b46 	vcmp.f64	d7, d6
 800a590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a594:	d103      	bne.n	800a59e <_dtoa_r+0x5be>
 800a596:	ee15 3a10 	vmov	r3, s10
 800a59a:	07d9      	lsls	r1, r3, #31
 800a59c:	d411      	bmi.n	800a5c2 <_dtoa_r+0x5e2>
 800a59e:	4629      	mov	r1, r5
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f000 fae5 	bl	800ab70 <_Bfree>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5aa:	f888 3000 	strb.w	r3, [r8]
 800a5ae:	f10b 0301 	add.w	r3, fp, #1
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f43f ad61 	beq.w	800a07e <_dtoa_r+0x9e>
 800a5bc:	f8c3 8000 	str.w	r8, [r3]
 800a5c0:	e55d      	b.n	800a07e <_dtoa_r+0x9e>
 800a5c2:	465f      	mov	r7, fp
 800a5c4:	4643      	mov	r3, r8
 800a5c6:	4698      	mov	r8, r3
 800a5c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5cc:	2a39      	cmp	r2, #57	; 0x39
 800a5ce:	d106      	bne.n	800a5de <_dtoa_r+0x5fe>
 800a5d0:	9a01      	ldr	r2, [sp, #4]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d1f7      	bne.n	800a5c6 <_dtoa_r+0x5e6>
 800a5d6:	9901      	ldr	r1, [sp, #4]
 800a5d8:	2230      	movs	r2, #48	; 0x30
 800a5da:	3701      	adds	r7, #1
 800a5dc:	700a      	strb	r2, [r1, #0]
 800a5de:	781a      	ldrb	r2, [r3, #0]
 800a5e0:	3201      	adds	r2, #1
 800a5e2:	701a      	strb	r2, [r3, #0]
 800a5e4:	e7ae      	b.n	800a544 <_dtoa_r+0x564>
 800a5e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a5ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f2:	d1b2      	bne.n	800a55a <_dtoa_r+0x57a>
 800a5f4:	e7d3      	b.n	800a59e <_dtoa_r+0x5be>
 800a5f6:	bf00      	nop
 800a5f8:	0800c4d8 	.word	0x0800c4d8
 800a5fc:	0800c4b0 	.word	0x0800c4b0
 800a600:	9907      	ldr	r1, [sp, #28]
 800a602:	2900      	cmp	r1, #0
 800a604:	f000 80d0 	beq.w	800a7a8 <_dtoa_r+0x7c8>
 800a608:	9906      	ldr	r1, [sp, #24]
 800a60a:	2901      	cmp	r1, #1
 800a60c:	f300 80b4 	bgt.w	800a778 <_dtoa_r+0x798>
 800a610:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a612:	2900      	cmp	r1, #0
 800a614:	f000 80ac 	beq.w	800a770 <_dtoa_r+0x790>
 800a618:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a61c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a620:	461c      	mov	r4, r3
 800a622:	930a      	str	r3, [sp, #40]	; 0x28
 800a624:	9b04      	ldr	r3, [sp, #16]
 800a626:	4413      	add	r3, r2
 800a628:	9304      	str	r3, [sp, #16]
 800a62a:	9b05      	ldr	r3, [sp, #20]
 800a62c:	2101      	movs	r1, #1
 800a62e:	4413      	add	r3, r2
 800a630:	4630      	mov	r0, r6
 800a632:	9305      	str	r3, [sp, #20]
 800a634:	f000 fb54 	bl	800ace0 <__i2b>
 800a638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a63a:	4607      	mov	r7, r0
 800a63c:	f1b8 0f00 	cmp.w	r8, #0
 800a640:	dd0d      	ble.n	800a65e <_dtoa_r+0x67e>
 800a642:	9a05      	ldr	r2, [sp, #20]
 800a644:	2a00      	cmp	r2, #0
 800a646:	dd0a      	ble.n	800a65e <_dtoa_r+0x67e>
 800a648:	4542      	cmp	r2, r8
 800a64a:	9904      	ldr	r1, [sp, #16]
 800a64c:	bfa8      	it	ge
 800a64e:	4642      	movge	r2, r8
 800a650:	1a89      	subs	r1, r1, r2
 800a652:	9104      	str	r1, [sp, #16]
 800a654:	9905      	ldr	r1, [sp, #20]
 800a656:	eba8 0802 	sub.w	r8, r8, r2
 800a65a:	1a8a      	subs	r2, r1, r2
 800a65c:	9205      	str	r2, [sp, #20]
 800a65e:	b303      	cbz	r3, 800a6a2 <_dtoa_r+0x6c2>
 800a660:	9a07      	ldr	r2, [sp, #28]
 800a662:	2a00      	cmp	r2, #0
 800a664:	f000 80a5 	beq.w	800a7b2 <_dtoa_r+0x7d2>
 800a668:	2c00      	cmp	r4, #0
 800a66a:	dd13      	ble.n	800a694 <_dtoa_r+0x6b4>
 800a66c:	4639      	mov	r1, r7
 800a66e:	4622      	mov	r2, r4
 800a670:	4630      	mov	r0, r6
 800a672:	930d      	str	r3, [sp, #52]	; 0x34
 800a674:	f000 fbf4 	bl	800ae60 <__pow5mult>
 800a678:	462a      	mov	r2, r5
 800a67a:	4601      	mov	r1, r0
 800a67c:	4607      	mov	r7, r0
 800a67e:	4630      	mov	r0, r6
 800a680:	f000 fb44 	bl	800ad0c <__multiply>
 800a684:	4629      	mov	r1, r5
 800a686:	900a      	str	r0, [sp, #40]	; 0x28
 800a688:	4630      	mov	r0, r6
 800a68a:	f000 fa71 	bl	800ab70 <_Bfree>
 800a68e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a692:	4615      	mov	r5, r2
 800a694:	1b1a      	subs	r2, r3, r4
 800a696:	d004      	beq.n	800a6a2 <_dtoa_r+0x6c2>
 800a698:	4629      	mov	r1, r5
 800a69a:	4630      	mov	r0, r6
 800a69c:	f000 fbe0 	bl	800ae60 <__pow5mult>
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f000 fb1b 	bl	800ace0 <__i2b>
 800a6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	f340 8081 	ble.w	800a7b6 <_dtoa_r+0x7d6>
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	4601      	mov	r1, r0
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f000 fbd1 	bl	800ae60 <__pow5mult>
 800a6be:	9b06      	ldr	r3, [sp, #24]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	dd7a      	ble.n	800a7bc <_dtoa_r+0x7dc>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	930a      	str	r3, [sp, #40]	; 0x28
 800a6ca:	6922      	ldr	r2, [r4, #16]
 800a6cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a6d0:	6910      	ldr	r0, [r2, #16]
 800a6d2:	f000 fab5 	bl	800ac40 <__hi0bits>
 800a6d6:	f1c0 0020 	rsb	r0, r0, #32
 800a6da:	9b05      	ldr	r3, [sp, #20]
 800a6dc:	4418      	add	r0, r3
 800a6de:	f010 001f 	ands.w	r0, r0, #31
 800a6e2:	f000 808c 	beq.w	800a7fe <_dtoa_r+0x81e>
 800a6e6:	f1c0 0220 	rsb	r2, r0, #32
 800a6ea:	2a04      	cmp	r2, #4
 800a6ec:	f340 8085 	ble.w	800a7fa <_dtoa_r+0x81a>
 800a6f0:	f1c0 001c 	rsb	r0, r0, #28
 800a6f4:	9b04      	ldr	r3, [sp, #16]
 800a6f6:	4403      	add	r3, r0
 800a6f8:	9304      	str	r3, [sp, #16]
 800a6fa:	9b05      	ldr	r3, [sp, #20]
 800a6fc:	4403      	add	r3, r0
 800a6fe:	4480      	add	r8, r0
 800a700:	9305      	str	r3, [sp, #20]
 800a702:	9b04      	ldr	r3, [sp, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	dd05      	ble.n	800a714 <_dtoa_r+0x734>
 800a708:	4629      	mov	r1, r5
 800a70a:	461a      	mov	r2, r3
 800a70c:	4630      	mov	r0, r6
 800a70e:	f000 fc01 	bl	800af14 <__lshift>
 800a712:	4605      	mov	r5, r0
 800a714:	9b05      	ldr	r3, [sp, #20]
 800a716:	2b00      	cmp	r3, #0
 800a718:	dd05      	ble.n	800a726 <_dtoa_r+0x746>
 800a71a:	4621      	mov	r1, r4
 800a71c:	461a      	mov	r2, r3
 800a71e:	4630      	mov	r0, r6
 800a720:	f000 fbf8 	bl	800af14 <__lshift>
 800a724:	4604      	mov	r4, r0
 800a726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d06a      	beq.n	800a802 <_dtoa_r+0x822>
 800a72c:	4621      	mov	r1, r4
 800a72e:	4628      	mov	r0, r5
 800a730:	f000 fc60 	bl	800aff4 <__mcmp>
 800a734:	2800      	cmp	r0, #0
 800a736:	da64      	bge.n	800a802 <_dtoa_r+0x822>
 800a738:	2300      	movs	r3, #0
 800a73a:	4629      	mov	r1, r5
 800a73c:	220a      	movs	r2, #10
 800a73e:	4630      	mov	r0, r6
 800a740:	f000 fa38 	bl	800abb4 <__multadd>
 800a744:	9b07      	ldr	r3, [sp, #28]
 800a746:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a74a:	4605      	mov	r5, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 8191 	beq.w	800aa74 <_dtoa_r+0xa94>
 800a752:	4639      	mov	r1, r7
 800a754:	2300      	movs	r3, #0
 800a756:	220a      	movs	r2, #10
 800a758:	4630      	mov	r0, r6
 800a75a:	f000 fa2b 	bl	800abb4 <__multadd>
 800a75e:	f1ba 0f00 	cmp.w	sl, #0
 800a762:	4607      	mov	r7, r0
 800a764:	f300 808d 	bgt.w	800a882 <_dtoa_r+0x8a2>
 800a768:	9b06      	ldr	r3, [sp, #24]
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	dc50      	bgt.n	800a810 <_dtoa_r+0x830>
 800a76e:	e088      	b.n	800a882 <_dtoa_r+0x8a2>
 800a770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a772:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a776:	e751      	b.n	800a61c <_dtoa_r+0x63c>
 800a778:	f109 34ff 	add.w	r4, r9, #4294967295
 800a77c:	42a3      	cmp	r3, r4
 800a77e:	bfbf      	itttt	lt
 800a780:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a782:	1ae3      	sublt	r3, r4, r3
 800a784:	18d2      	addlt	r2, r2, r3
 800a786:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a788:	bfb6      	itet	lt
 800a78a:	4623      	movlt	r3, r4
 800a78c:	1b1c      	subge	r4, r3, r4
 800a78e:	2400      	movlt	r4, #0
 800a790:	f1b9 0f00 	cmp.w	r9, #0
 800a794:	bfb5      	itete	lt
 800a796:	9a04      	ldrlt	r2, [sp, #16]
 800a798:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a79c:	eba2 0809 	sublt.w	r8, r2, r9
 800a7a0:	464a      	movge	r2, r9
 800a7a2:	bfb8      	it	lt
 800a7a4:	2200      	movlt	r2, #0
 800a7a6:	e73c      	b.n	800a622 <_dtoa_r+0x642>
 800a7a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a7ac:	9f07      	ldr	r7, [sp, #28]
 800a7ae:	461c      	mov	r4, r3
 800a7b0:	e744      	b.n	800a63c <_dtoa_r+0x65c>
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	e770      	b.n	800a698 <_dtoa_r+0x6b8>
 800a7b6:	9b06      	ldr	r3, [sp, #24]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	dc18      	bgt.n	800a7ee <_dtoa_r+0x80e>
 800a7bc:	9b02      	ldr	r3, [sp, #8]
 800a7be:	b9b3      	cbnz	r3, 800a7ee <_dtoa_r+0x80e>
 800a7c0:	9b03      	ldr	r3, [sp, #12]
 800a7c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a7c6:	b9a2      	cbnz	r2, 800a7f2 <_dtoa_r+0x812>
 800a7c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a7cc:	0d12      	lsrs	r2, r2, #20
 800a7ce:	0512      	lsls	r2, r2, #20
 800a7d0:	b18a      	cbz	r2, 800a7f6 <_dtoa_r+0x816>
 800a7d2:	9b04      	ldr	r3, [sp, #16]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	9304      	str	r3, [sp, #16]
 800a7d8:	9b05      	ldr	r3, [sp, #20]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	9305      	str	r3, [sp, #20]
 800a7de:	2301      	movs	r3, #1
 800a7e0:	930a      	str	r3, [sp, #40]	; 0x28
 800a7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f47f af70 	bne.w	800a6ca <_dtoa_r+0x6ea>
 800a7ea:	2001      	movs	r0, #1
 800a7ec:	e775      	b.n	800a6da <_dtoa_r+0x6fa>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	e7f6      	b.n	800a7e0 <_dtoa_r+0x800>
 800a7f2:	9b02      	ldr	r3, [sp, #8]
 800a7f4:	e7f4      	b.n	800a7e0 <_dtoa_r+0x800>
 800a7f6:	920a      	str	r2, [sp, #40]	; 0x28
 800a7f8:	e7f3      	b.n	800a7e2 <_dtoa_r+0x802>
 800a7fa:	d082      	beq.n	800a702 <_dtoa_r+0x722>
 800a7fc:	4610      	mov	r0, r2
 800a7fe:	301c      	adds	r0, #28
 800a800:	e778      	b.n	800a6f4 <_dtoa_r+0x714>
 800a802:	f1b9 0f00 	cmp.w	r9, #0
 800a806:	dc37      	bgt.n	800a878 <_dtoa_r+0x898>
 800a808:	9b06      	ldr	r3, [sp, #24]
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	dd34      	ble.n	800a878 <_dtoa_r+0x898>
 800a80e:	46ca      	mov	sl, r9
 800a810:	f1ba 0f00 	cmp.w	sl, #0
 800a814:	d10d      	bne.n	800a832 <_dtoa_r+0x852>
 800a816:	4621      	mov	r1, r4
 800a818:	4653      	mov	r3, sl
 800a81a:	2205      	movs	r2, #5
 800a81c:	4630      	mov	r0, r6
 800a81e:	f000 f9c9 	bl	800abb4 <__multadd>
 800a822:	4601      	mov	r1, r0
 800a824:	4604      	mov	r4, r0
 800a826:	4628      	mov	r0, r5
 800a828:	f000 fbe4 	bl	800aff4 <__mcmp>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	f73f adeb 	bgt.w	800a408 <_dtoa_r+0x428>
 800a832:	9b08      	ldr	r3, [sp, #32]
 800a834:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a838:	ea6f 0b03 	mvn.w	fp, r3
 800a83c:	f04f 0900 	mov.w	r9, #0
 800a840:	4621      	mov	r1, r4
 800a842:	4630      	mov	r0, r6
 800a844:	f000 f994 	bl	800ab70 <_Bfree>
 800a848:	2f00      	cmp	r7, #0
 800a84a:	f43f aea8 	beq.w	800a59e <_dtoa_r+0x5be>
 800a84e:	f1b9 0f00 	cmp.w	r9, #0
 800a852:	d005      	beq.n	800a860 <_dtoa_r+0x880>
 800a854:	45b9      	cmp	r9, r7
 800a856:	d003      	beq.n	800a860 <_dtoa_r+0x880>
 800a858:	4649      	mov	r1, r9
 800a85a:	4630      	mov	r0, r6
 800a85c:	f000 f988 	bl	800ab70 <_Bfree>
 800a860:	4639      	mov	r1, r7
 800a862:	4630      	mov	r0, r6
 800a864:	f000 f984 	bl	800ab70 <_Bfree>
 800a868:	e699      	b.n	800a59e <_dtoa_r+0x5be>
 800a86a:	2400      	movs	r4, #0
 800a86c:	4627      	mov	r7, r4
 800a86e:	e7e0      	b.n	800a832 <_dtoa_r+0x852>
 800a870:	46bb      	mov	fp, r7
 800a872:	4604      	mov	r4, r0
 800a874:	4607      	mov	r7, r0
 800a876:	e5c7      	b.n	800a408 <_dtoa_r+0x428>
 800a878:	9b07      	ldr	r3, [sp, #28]
 800a87a:	46ca      	mov	sl, r9
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 8100 	beq.w	800aa82 <_dtoa_r+0xaa2>
 800a882:	f1b8 0f00 	cmp.w	r8, #0
 800a886:	dd05      	ble.n	800a894 <_dtoa_r+0x8b4>
 800a888:	4639      	mov	r1, r7
 800a88a:	4642      	mov	r2, r8
 800a88c:	4630      	mov	r0, r6
 800a88e:	f000 fb41 	bl	800af14 <__lshift>
 800a892:	4607      	mov	r7, r0
 800a894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a896:	2b00      	cmp	r3, #0
 800a898:	d05d      	beq.n	800a956 <_dtoa_r+0x976>
 800a89a:	6879      	ldr	r1, [r7, #4]
 800a89c:	4630      	mov	r0, r6
 800a89e:	f000 f927 	bl	800aaf0 <_Balloc>
 800a8a2:	4680      	mov	r8, r0
 800a8a4:	b928      	cbnz	r0, 800a8b2 <_dtoa_r+0x8d2>
 800a8a6:	4b82      	ldr	r3, [pc, #520]	; (800aab0 <_dtoa_r+0xad0>)
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a8ae:	f7ff bbaf 	b.w	800a010 <_dtoa_r+0x30>
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	3202      	adds	r2, #2
 800a8b6:	0092      	lsls	r2, r2, #2
 800a8b8:	f107 010c 	add.w	r1, r7, #12
 800a8bc:	300c      	adds	r0, #12
 800a8be:	f000 f909 	bl	800aad4 <memcpy>
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	4641      	mov	r1, r8
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f000 fb24 	bl	800af14 <__lshift>
 800a8cc:	9b01      	ldr	r3, [sp, #4]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	9304      	str	r3, [sp, #16]
 800a8d2:	9b01      	ldr	r3, [sp, #4]
 800a8d4:	4453      	add	r3, sl
 800a8d6:	9308      	str	r3, [sp, #32]
 800a8d8:	9b02      	ldr	r3, [sp, #8]
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	46b9      	mov	r9, r7
 800a8e0:	9307      	str	r3, [sp, #28]
 800a8e2:	4607      	mov	r7, r0
 800a8e4:	9b04      	ldr	r3, [sp, #16]
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	9302      	str	r3, [sp, #8]
 800a8ee:	f7ff fae9 	bl	8009ec4 <quorem>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	3330      	adds	r3, #48	; 0x30
 800a8f6:	9005      	str	r0, [sp, #20]
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a8fe:	f000 fb79 	bl	800aff4 <__mcmp>
 800a902:	463a      	mov	r2, r7
 800a904:	4682      	mov	sl, r0
 800a906:	4621      	mov	r1, r4
 800a908:	4630      	mov	r0, r6
 800a90a:	f000 fb8f 	bl	800b02c <__mdiff>
 800a90e:	68c2      	ldr	r2, [r0, #12]
 800a910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a912:	4680      	mov	r8, r0
 800a914:	bb0a      	cbnz	r2, 800a95a <_dtoa_r+0x97a>
 800a916:	4601      	mov	r1, r0
 800a918:	4628      	mov	r0, r5
 800a91a:	f000 fb6b 	bl	800aff4 <__mcmp>
 800a91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a920:	4602      	mov	r2, r0
 800a922:	4641      	mov	r1, r8
 800a924:	4630      	mov	r0, r6
 800a926:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a92a:	f000 f921 	bl	800ab70 <_Bfree>
 800a92e:	9b06      	ldr	r3, [sp, #24]
 800a930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a932:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a936:	ea43 0102 	orr.w	r1, r3, r2
 800a93a:	9b07      	ldr	r3, [sp, #28]
 800a93c:	430b      	orrs	r3, r1
 800a93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a940:	d10d      	bne.n	800a95e <_dtoa_r+0x97e>
 800a942:	2b39      	cmp	r3, #57	; 0x39
 800a944:	d029      	beq.n	800a99a <_dtoa_r+0x9ba>
 800a946:	f1ba 0f00 	cmp.w	sl, #0
 800a94a:	dd01      	ble.n	800a950 <_dtoa_r+0x970>
 800a94c:	9b05      	ldr	r3, [sp, #20]
 800a94e:	3331      	adds	r3, #49	; 0x31
 800a950:	9a02      	ldr	r2, [sp, #8]
 800a952:	7013      	strb	r3, [r2, #0]
 800a954:	e774      	b.n	800a840 <_dtoa_r+0x860>
 800a956:	4638      	mov	r0, r7
 800a958:	e7b8      	b.n	800a8cc <_dtoa_r+0x8ec>
 800a95a:	2201      	movs	r2, #1
 800a95c:	e7e1      	b.n	800a922 <_dtoa_r+0x942>
 800a95e:	f1ba 0f00 	cmp.w	sl, #0
 800a962:	db06      	blt.n	800a972 <_dtoa_r+0x992>
 800a964:	9906      	ldr	r1, [sp, #24]
 800a966:	ea41 0a0a 	orr.w	sl, r1, sl
 800a96a:	9907      	ldr	r1, [sp, #28]
 800a96c:	ea5a 0101 	orrs.w	r1, sl, r1
 800a970:	d120      	bne.n	800a9b4 <_dtoa_r+0x9d4>
 800a972:	2a00      	cmp	r2, #0
 800a974:	ddec      	ble.n	800a950 <_dtoa_r+0x970>
 800a976:	4629      	mov	r1, r5
 800a978:	2201      	movs	r2, #1
 800a97a:	4630      	mov	r0, r6
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	f000 fac9 	bl	800af14 <__lshift>
 800a982:	4621      	mov	r1, r4
 800a984:	4605      	mov	r5, r0
 800a986:	f000 fb35 	bl	800aff4 <__mcmp>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	9b04      	ldr	r3, [sp, #16]
 800a98e:	dc02      	bgt.n	800a996 <_dtoa_r+0x9b6>
 800a990:	d1de      	bne.n	800a950 <_dtoa_r+0x970>
 800a992:	07da      	lsls	r2, r3, #31
 800a994:	d5dc      	bpl.n	800a950 <_dtoa_r+0x970>
 800a996:	2b39      	cmp	r3, #57	; 0x39
 800a998:	d1d8      	bne.n	800a94c <_dtoa_r+0x96c>
 800a99a:	9a02      	ldr	r2, [sp, #8]
 800a99c:	2339      	movs	r3, #57	; 0x39
 800a99e:	7013      	strb	r3, [r2, #0]
 800a9a0:	4643      	mov	r3, r8
 800a9a2:	4698      	mov	r8, r3
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a9aa:	2a39      	cmp	r2, #57	; 0x39
 800a9ac:	d051      	beq.n	800aa52 <_dtoa_r+0xa72>
 800a9ae:	3201      	adds	r2, #1
 800a9b0:	701a      	strb	r2, [r3, #0]
 800a9b2:	e745      	b.n	800a840 <_dtoa_r+0x860>
 800a9b4:	2a00      	cmp	r2, #0
 800a9b6:	dd03      	ble.n	800a9c0 <_dtoa_r+0x9e0>
 800a9b8:	2b39      	cmp	r3, #57	; 0x39
 800a9ba:	d0ee      	beq.n	800a99a <_dtoa_r+0x9ba>
 800a9bc:	3301      	adds	r3, #1
 800a9be:	e7c7      	b.n	800a950 <_dtoa_r+0x970>
 800a9c0:	9a04      	ldr	r2, [sp, #16]
 800a9c2:	9908      	ldr	r1, [sp, #32]
 800a9c4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a9c8:	428a      	cmp	r2, r1
 800a9ca:	d02b      	beq.n	800aa24 <_dtoa_r+0xa44>
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	220a      	movs	r2, #10
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f000 f8ee 	bl	800abb4 <__multadd>
 800a9d8:	45b9      	cmp	r9, r7
 800a9da:	4605      	mov	r5, r0
 800a9dc:	f04f 0300 	mov.w	r3, #0
 800a9e0:	f04f 020a 	mov.w	r2, #10
 800a9e4:	4649      	mov	r1, r9
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	d107      	bne.n	800a9fa <_dtoa_r+0xa1a>
 800a9ea:	f000 f8e3 	bl	800abb4 <__multadd>
 800a9ee:	4681      	mov	r9, r0
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	9b04      	ldr	r3, [sp, #16]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	9304      	str	r3, [sp, #16]
 800a9f8:	e774      	b.n	800a8e4 <_dtoa_r+0x904>
 800a9fa:	f000 f8db 	bl	800abb4 <__multadd>
 800a9fe:	4639      	mov	r1, r7
 800aa00:	4681      	mov	r9, r0
 800aa02:	2300      	movs	r3, #0
 800aa04:	220a      	movs	r2, #10
 800aa06:	4630      	mov	r0, r6
 800aa08:	f000 f8d4 	bl	800abb4 <__multadd>
 800aa0c:	4607      	mov	r7, r0
 800aa0e:	e7f0      	b.n	800a9f2 <_dtoa_r+0xa12>
 800aa10:	f1ba 0f00 	cmp.w	sl, #0
 800aa14:	9a01      	ldr	r2, [sp, #4]
 800aa16:	bfcc      	ite	gt
 800aa18:	46d0      	movgt	r8, sl
 800aa1a:	f04f 0801 	movle.w	r8, #1
 800aa1e:	4490      	add	r8, r2
 800aa20:	f04f 0900 	mov.w	r9, #0
 800aa24:	4629      	mov	r1, r5
 800aa26:	2201      	movs	r2, #1
 800aa28:	4630      	mov	r0, r6
 800aa2a:	9302      	str	r3, [sp, #8]
 800aa2c:	f000 fa72 	bl	800af14 <__lshift>
 800aa30:	4621      	mov	r1, r4
 800aa32:	4605      	mov	r5, r0
 800aa34:	f000 fade 	bl	800aff4 <__mcmp>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	dcb1      	bgt.n	800a9a0 <_dtoa_r+0x9c0>
 800aa3c:	d102      	bne.n	800aa44 <_dtoa_r+0xa64>
 800aa3e:	9b02      	ldr	r3, [sp, #8]
 800aa40:	07db      	lsls	r3, r3, #31
 800aa42:	d4ad      	bmi.n	800a9a0 <_dtoa_r+0x9c0>
 800aa44:	4643      	mov	r3, r8
 800aa46:	4698      	mov	r8, r3
 800aa48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa4c:	2a30      	cmp	r2, #48	; 0x30
 800aa4e:	d0fa      	beq.n	800aa46 <_dtoa_r+0xa66>
 800aa50:	e6f6      	b.n	800a840 <_dtoa_r+0x860>
 800aa52:	9a01      	ldr	r2, [sp, #4]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d1a4      	bne.n	800a9a2 <_dtoa_r+0x9c2>
 800aa58:	f10b 0b01 	add.w	fp, fp, #1
 800aa5c:	2331      	movs	r3, #49	; 0x31
 800aa5e:	e778      	b.n	800a952 <_dtoa_r+0x972>
 800aa60:	4b14      	ldr	r3, [pc, #80]	; (800aab4 <_dtoa_r+0xad4>)
 800aa62:	f7ff bb27 	b.w	800a0b4 <_dtoa_r+0xd4>
 800aa66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f47f ab03 	bne.w	800a074 <_dtoa_r+0x94>
 800aa6e:	4b12      	ldr	r3, [pc, #72]	; (800aab8 <_dtoa_r+0xad8>)
 800aa70:	f7ff bb20 	b.w	800a0b4 <_dtoa_r+0xd4>
 800aa74:	f1ba 0f00 	cmp.w	sl, #0
 800aa78:	dc03      	bgt.n	800aa82 <_dtoa_r+0xaa2>
 800aa7a:	9b06      	ldr	r3, [sp, #24]
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	f73f aec7 	bgt.w	800a810 <_dtoa_r+0x830>
 800aa82:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aa86:	4621      	mov	r1, r4
 800aa88:	4628      	mov	r0, r5
 800aa8a:	f7ff fa1b 	bl	8009ec4 <quorem>
 800aa8e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aa92:	f808 3b01 	strb.w	r3, [r8], #1
 800aa96:	9a01      	ldr	r2, [sp, #4]
 800aa98:	eba8 0202 	sub.w	r2, r8, r2
 800aa9c:	4592      	cmp	sl, r2
 800aa9e:	ddb7      	ble.n	800aa10 <_dtoa_r+0xa30>
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	220a      	movs	r2, #10
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	f000 f884 	bl	800abb4 <__multadd>
 800aaac:	4605      	mov	r5, r0
 800aaae:	e7ea      	b.n	800aa86 <_dtoa_r+0xaa6>
 800aab0:	0800c443 	.word	0x0800c443
 800aab4:	0800c3a0 	.word	0x0800c3a0
 800aab8:	0800c3c4 	.word	0x0800c3c4

0800aabc <_localeconv_r>:
 800aabc:	4800      	ldr	r0, [pc, #0]	; (800aac0 <_localeconv_r+0x4>)
 800aabe:	4770      	bx	lr
 800aac0:	24000164 	.word	0x24000164

0800aac4 <malloc>:
 800aac4:	4b02      	ldr	r3, [pc, #8]	; (800aad0 <malloc+0xc>)
 800aac6:	4601      	mov	r1, r0
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	f000 bc17 	b.w	800b2fc <_malloc_r>
 800aace:	bf00      	nop
 800aad0:	24000010 	.word	0x24000010

0800aad4 <memcpy>:
 800aad4:	440a      	add	r2, r1
 800aad6:	4291      	cmp	r1, r2
 800aad8:	f100 33ff 	add.w	r3, r0, #4294967295
 800aadc:	d100      	bne.n	800aae0 <memcpy+0xc>
 800aade:	4770      	bx	lr
 800aae0:	b510      	push	{r4, lr}
 800aae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaea:	4291      	cmp	r1, r2
 800aaec:	d1f9      	bne.n	800aae2 <memcpy+0xe>
 800aaee:	bd10      	pop	{r4, pc}

0800aaf0 <_Balloc>:
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	460d      	mov	r5, r1
 800aaf8:	b976      	cbnz	r6, 800ab18 <_Balloc+0x28>
 800aafa:	2010      	movs	r0, #16
 800aafc:	f7ff ffe2 	bl	800aac4 <malloc>
 800ab00:	4602      	mov	r2, r0
 800ab02:	6260      	str	r0, [r4, #36]	; 0x24
 800ab04:	b920      	cbnz	r0, 800ab10 <_Balloc+0x20>
 800ab06:	4b18      	ldr	r3, [pc, #96]	; (800ab68 <_Balloc+0x78>)
 800ab08:	4818      	ldr	r0, [pc, #96]	; (800ab6c <_Balloc+0x7c>)
 800ab0a:	2166      	movs	r1, #102	; 0x66
 800ab0c:	f000 fdd6 	bl	800b6bc <__assert_func>
 800ab10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab14:	6006      	str	r6, [r0, #0]
 800ab16:	60c6      	str	r6, [r0, #12]
 800ab18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab1a:	68f3      	ldr	r3, [r6, #12]
 800ab1c:	b183      	cbz	r3, 800ab40 <_Balloc+0x50>
 800ab1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab26:	b9b8      	cbnz	r0, 800ab58 <_Balloc+0x68>
 800ab28:	2101      	movs	r1, #1
 800ab2a:	fa01 f605 	lsl.w	r6, r1, r5
 800ab2e:	1d72      	adds	r2, r6, #5
 800ab30:	0092      	lsls	r2, r2, #2
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 fb60 	bl	800b1f8 <_calloc_r>
 800ab38:	b160      	cbz	r0, 800ab54 <_Balloc+0x64>
 800ab3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab3e:	e00e      	b.n	800ab5e <_Balloc+0x6e>
 800ab40:	2221      	movs	r2, #33	; 0x21
 800ab42:	2104      	movs	r1, #4
 800ab44:	4620      	mov	r0, r4
 800ab46:	f000 fb57 	bl	800b1f8 <_calloc_r>
 800ab4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab4c:	60f0      	str	r0, [r6, #12]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1e4      	bne.n	800ab1e <_Balloc+0x2e>
 800ab54:	2000      	movs	r0, #0
 800ab56:	bd70      	pop	{r4, r5, r6, pc}
 800ab58:	6802      	ldr	r2, [r0, #0]
 800ab5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab64:	e7f7      	b.n	800ab56 <_Balloc+0x66>
 800ab66:	bf00      	nop
 800ab68:	0800c3d1 	.word	0x0800c3d1
 800ab6c:	0800c454 	.word	0x0800c454

0800ab70 <_Bfree>:
 800ab70:	b570      	push	{r4, r5, r6, lr}
 800ab72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab74:	4605      	mov	r5, r0
 800ab76:	460c      	mov	r4, r1
 800ab78:	b976      	cbnz	r6, 800ab98 <_Bfree+0x28>
 800ab7a:	2010      	movs	r0, #16
 800ab7c:	f7ff ffa2 	bl	800aac4 <malloc>
 800ab80:	4602      	mov	r2, r0
 800ab82:	6268      	str	r0, [r5, #36]	; 0x24
 800ab84:	b920      	cbnz	r0, 800ab90 <_Bfree+0x20>
 800ab86:	4b09      	ldr	r3, [pc, #36]	; (800abac <_Bfree+0x3c>)
 800ab88:	4809      	ldr	r0, [pc, #36]	; (800abb0 <_Bfree+0x40>)
 800ab8a:	218a      	movs	r1, #138	; 0x8a
 800ab8c:	f000 fd96 	bl	800b6bc <__assert_func>
 800ab90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab94:	6006      	str	r6, [r0, #0]
 800ab96:	60c6      	str	r6, [r0, #12]
 800ab98:	b13c      	cbz	r4, 800abaa <_Bfree+0x3a>
 800ab9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab9c:	6862      	ldr	r2, [r4, #4]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aba4:	6021      	str	r1, [r4, #0]
 800aba6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	0800c3d1 	.word	0x0800c3d1
 800abb0:	0800c454 	.word	0x0800c454

0800abb4 <__multadd>:
 800abb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb8:	690d      	ldr	r5, [r1, #16]
 800abba:	4607      	mov	r7, r0
 800abbc:	460c      	mov	r4, r1
 800abbe:	461e      	mov	r6, r3
 800abc0:	f101 0c14 	add.w	ip, r1, #20
 800abc4:	2000      	movs	r0, #0
 800abc6:	f8dc 3000 	ldr.w	r3, [ip]
 800abca:	b299      	uxth	r1, r3
 800abcc:	fb02 6101 	mla	r1, r2, r1, r6
 800abd0:	0c1e      	lsrs	r6, r3, #16
 800abd2:	0c0b      	lsrs	r3, r1, #16
 800abd4:	fb02 3306 	mla	r3, r2, r6, r3
 800abd8:	b289      	uxth	r1, r1
 800abda:	3001      	adds	r0, #1
 800abdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abe0:	4285      	cmp	r5, r0
 800abe2:	f84c 1b04 	str.w	r1, [ip], #4
 800abe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abea:	dcec      	bgt.n	800abc6 <__multadd+0x12>
 800abec:	b30e      	cbz	r6, 800ac32 <__multadd+0x7e>
 800abee:	68a3      	ldr	r3, [r4, #8]
 800abf0:	42ab      	cmp	r3, r5
 800abf2:	dc19      	bgt.n	800ac28 <__multadd+0x74>
 800abf4:	6861      	ldr	r1, [r4, #4]
 800abf6:	4638      	mov	r0, r7
 800abf8:	3101      	adds	r1, #1
 800abfa:	f7ff ff79 	bl	800aaf0 <_Balloc>
 800abfe:	4680      	mov	r8, r0
 800ac00:	b928      	cbnz	r0, 800ac0e <__multadd+0x5a>
 800ac02:	4602      	mov	r2, r0
 800ac04:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <__multadd+0x84>)
 800ac06:	480d      	ldr	r0, [pc, #52]	; (800ac3c <__multadd+0x88>)
 800ac08:	21b5      	movs	r1, #181	; 0xb5
 800ac0a:	f000 fd57 	bl	800b6bc <__assert_func>
 800ac0e:	6922      	ldr	r2, [r4, #16]
 800ac10:	3202      	adds	r2, #2
 800ac12:	f104 010c 	add.w	r1, r4, #12
 800ac16:	0092      	lsls	r2, r2, #2
 800ac18:	300c      	adds	r0, #12
 800ac1a:	f7ff ff5b 	bl	800aad4 <memcpy>
 800ac1e:	4621      	mov	r1, r4
 800ac20:	4638      	mov	r0, r7
 800ac22:	f7ff ffa5 	bl	800ab70 <_Bfree>
 800ac26:	4644      	mov	r4, r8
 800ac28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac2c:	3501      	adds	r5, #1
 800ac2e:	615e      	str	r6, [r3, #20]
 800ac30:	6125      	str	r5, [r4, #16]
 800ac32:	4620      	mov	r0, r4
 800ac34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac38:	0800c443 	.word	0x0800c443
 800ac3c:	0800c454 	.word	0x0800c454

0800ac40 <__hi0bits>:
 800ac40:	0c03      	lsrs	r3, r0, #16
 800ac42:	041b      	lsls	r3, r3, #16
 800ac44:	b9d3      	cbnz	r3, 800ac7c <__hi0bits+0x3c>
 800ac46:	0400      	lsls	r0, r0, #16
 800ac48:	2310      	movs	r3, #16
 800ac4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac4e:	bf04      	itt	eq
 800ac50:	0200      	lsleq	r0, r0, #8
 800ac52:	3308      	addeq	r3, #8
 800ac54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac58:	bf04      	itt	eq
 800ac5a:	0100      	lsleq	r0, r0, #4
 800ac5c:	3304      	addeq	r3, #4
 800ac5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac62:	bf04      	itt	eq
 800ac64:	0080      	lsleq	r0, r0, #2
 800ac66:	3302      	addeq	r3, #2
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	db05      	blt.n	800ac78 <__hi0bits+0x38>
 800ac6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac70:	f103 0301 	add.w	r3, r3, #1
 800ac74:	bf08      	it	eq
 800ac76:	2320      	moveq	r3, #32
 800ac78:	4618      	mov	r0, r3
 800ac7a:	4770      	bx	lr
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e7e4      	b.n	800ac4a <__hi0bits+0xa>

0800ac80 <__lo0bits>:
 800ac80:	6803      	ldr	r3, [r0, #0]
 800ac82:	f013 0207 	ands.w	r2, r3, #7
 800ac86:	4601      	mov	r1, r0
 800ac88:	d00b      	beq.n	800aca2 <__lo0bits+0x22>
 800ac8a:	07da      	lsls	r2, r3, #31
 800ac8c:	d423      	bmi.n	800acd6 <__lo0bits+0x56>
 800ac8e:	0798      	lsls	r0, r3, #30
 800ac90:	bf49      	itett	mi
 800ac92:	085b      	lsrmi	r3, r3, #1
 800ac94:	089b      	lsrpl	r3, r3, #2
 800ac96:	2001      	movmi	r0, #1
 800ac98:	600b      	strmi	r3, [r1, #0]
 800ac9a:	bf5c      	itt	pl
 800ac9c:	600b      	strpl	r3, [r1, #0]
 800ac9e:	2002      	movpl	r0, #2
 800aca0:	4770      	bx	lr
 800aca2:	b298      	uxth	r0, r3
 800aca4:	b9a8      	cbnz	r0, 800acd2 <__lo0bits+0x52>
 800aca6:	0c1b      	lsrs	r3, r3, #16
 800aca8:	2010      	movs	r0, #16
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	b90a      	cbnz	r2, 800acb2 <__lo0bits+0x32>
 800acae:	3008      	adds	r0, #8
 800acb0:	0a1b      	lsrs	r3, r3, #8
 800acb2:	071a      	lsls	r2, r3, #28
 800acb4:	bf04      	itt	eq
 800acb6:	091b      	lsreq	r3, r3, #4
 800acb8:	3004      	addeq	r0, #4
 800acba:	079a      	lsls	r2, r3, #30
 800acbc:	bf04      	itt	eq
 800acbe:	089b      	lsreq	r3, r3, #2
 800acc0:	3002      	addeq	r0, #2
 800acc2:	07da      	lsls	r2, r3, #31
 800acc4:	d403      	bmi.n	800acce <__lo0bits+0x4e>
 800acc6:	085b      	lsrs	r3, r3, #1
 800acc8:	f100 0001 	add.w	r0, r0, #1
 800accc:	d005      	beq.n	800acda <__lo0bits+0x5a>
 800acce:	600b      	str	r3, [r1, #0]
 800acd0:	4770      	bx	lr
 800acd2:	4610      	mov	r0, r2
 800acd4:	e7e9      	b.n	800acaa <__lo0bits+0x2a>
 800acd6:	2000      	movs	r0, #0
 800acd8:	4770      	bx	lr
 800acda:	2020      	movs	r0, #32
 800acdc:	4770      	bx	lr
	...

0800ace0 <__i2b>:
 800ace0:	b510      	push	{r4, lr}
 800ace2:	460c      	mov	r4, r1
 800ace4:	2101      	movs	r1, #1
 800ace6:	f7ff ff03 	bl	800aaf0 <_Balloc>
 800acea:	4602      	mov	r2, r0
 800acec:	b928      	cbnz	r0, 800acfa <__i2b+0x1a>
 800acee:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <__i2b+0x24>)
 800acf0:	4805      	ldr	r0, [pc, #20]	; (800ad08 <__i2b+0x28>)
 800acf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800acf6:	f000 fce1 	bl	800b6bc <__assert_func>
 800acfa:	2301      	movs	r3, #1
 800acfc:	6144      	str	r4, [r0, #20]
 800acfe:	6103      	str	r3, [r0, #16]
 800ad00:	bd10      	pop	{r4, pc}
 800ad02:	bf00      	nop
 800ad04:	0800c443 	.word	0x0800c443
 800ad08:	0800c454 	.word	0x0800c454

0800ad0c <__multiply>:
 800ad0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	4691      	mov	r9, r2
 800ad12:	690a      	ldr	r2, [r1, #16]
 800ad14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	bfb8      	it	lt
 800ad1c:	460b      	movlt	r3, r1
 800ad1e:	460c      	mov	r4, r1
 800ad20:	bfbc      	itt	lt
 800ad22:	464c      	movlt	r4, r9
 800ad24:	4699      	movlt	r9, r3
 800ad26:	6927      	ldr	r7, [r4, #16]
 800ad28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad2c:	68a3      	ldr	r3, [r4, #8]
 800ad2e:	6861      	ldr	r1, [r4, #4]
 800ad30:	eb07 060a 	add.w	r6, r7, sl
 800ad34:	42b3      	cmp	r3, r6
 800ad36:	b085      	sub	sp, #20
 800ad38:	bfb8      	it	lt
 800ad3a:	3101      	addlt	r1, #1
 800ad3c:	f7ff fed8 	bl	800aaf0 <_Balloc>
 800ad40:	b930      	cbnz	r0, 800ad50 <__multiply+0x44>
 800ad42:	4602      	mov	r2, r0
 800ad44:	4b44      	ldr	r3, [pc, #272]	; (800ae58 <__multiply+0x14c>)
 800ad46:	4845      	ldr	r0, [pc, #276]	; (800ae5c <__multiply+0x150>)
 800ad48:	f240 115d 	movw	r1, #349	; 0x15d
 800ad4c:	f000 fcb6 	bl	800b6bc <__assert_func>
 800ad50:	f100 0514 	add.w	r5, r0, #20
 800ad54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad58:	462b      	mov	r3, r5
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	4543      	cmp	r3, r8
 800ad5e:	d321      	bcc.n	800ada4 <__multiply+0x98>
 800ad60:	f104 0314 	add.w	r3, r4, #20
 800ad64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad68:	f109 0314 	add.w	r3, r9, #20
 800ad6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad70:	9202      	str	r2, [sp, #8]
 800ad72:	1b3a      	subs	r2, r7, r4
 800ad74:	3a15      	subs	r2, #21
 800ad76:	f022 0203 	bic.w	r2, r2, #3
 800ad7a:	3204      	adds	r2, #4
 800ad7c:	f104 0115 	add.w	r1, r4, #21
 800ad80:	428f      	cmp	r7, r1
 800ad82:	bf38      	it	cc
 800ad84:	2204      	movcc	r2, #4
 800ad86:	9201      	str	r2, [sp, #4]
 800ad88:	9a02      	ldr	r2, [sp, #8]
 800ad8a:	9303      	str	r3, [sp, #12]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d80c      	bhi.n	800adaa <__multiply+0x9e>
 800ad90:	2e00      	cmp	r6, #0
 800ad92:	dd03      	ble.n	800ad9c <__multiply+0x90>
 800ad94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d05a      	beq.n	800ae52 <__multiply+0x146>
 800ad9c:	6106      	str	r6, [r0, #16]
 800ad9e:	b005      	add	sp, #20
 800ada0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada4:	f843 2b04 	str.w	r2, [r3], #4
 800ada8:	e7d8      	b.n	800ad5c <__multiply+0x50>
 800adaa:	f8b3 a000 	ldrh.w	sl, [r3]
 800adae:	f1ba 0f00 	cmp.w	sl, #0
 800adb2:	d024      	beq.n	800adfe <__multiply+0xf2>
 800adb4:	f104 0e14 	add.w	lr, r4, #20
 800adb8:	46a9      	mov	r9, r5
 800adba:	f04f 0c00 	mov.w	ip, #0
 800adbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800adc2:	f8d9 1000 	ldr.w	r1, [r9]
 800adc6:	fa1f fb82 	uxth.w	fp, r2
 800adca:	b289      	uxth	r1, r1
 800adcc:	fb0a 110b 	mla	r1, sl, fp, r1
 800add0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800add4:	f8d9 2000 	ldr.w	r2, [r9]
 800add8:	4461      	add	r1, ip
 800adda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800adde:	fb0a c20b 	mla	r2, sl, fp, ip
 800ade2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ade6:	b289      	uxth	r1, r1
 800ade8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800adec:	4577      	cmp	r7, lr
 800adee:	f849 1b04 	str.w	r1, [r9], #4
 800adf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800adf6:	d8e2      	bhi.n	800adbe <__multiply+0xb2>
 800adf8:	9a01      	ldr	r2, [sp, #4]
 800adfa:	f845 c002 	str.w	ip, [r5, r2]
 800adfe:	9a03      	ldr	r2, [sp, #12]
 800ae00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae04:	3304      	adds	r3, #4
 800ae06:	f1b9 0f00 	cmp.w	r9, #0
 800ae0a:	d020      	beq.n	800ae4e <__multiply+0x142>
 800ae0c:	6829      	ldr	r1, [r5, #0]
 800ae0e:	f104 0c14 	add.w	ip, r4, #20
 800ae12:	46ae      	mov	lr, r5
 800ae14:	f04f 0a00 	mov.w	sl, #0
 800ae18:	f8bc b000 	ldrh.w	fp, [ip]
 800ae1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae20:	fb09 220b 	mla	r2, r9, fp, r2
 800ae24:	4492      	add	sl, r2
 800ae26:	b289      	uxth	r1, r1
 800ae28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ae2c:	f84e 1b04 	str.w	r1, [lr], #4
 800ae30:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ae34:	f8be 1000 	ldrh.w	r1, [lr]
 800ae38:	0c12      	lsrs	r2, r2, #16
 800ae3a:	fb09 1102 	mla	r1, r9, r2, r1
 800ae3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ae42:	4567      	cmp	r7, ip
 800ae44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae48:	d8e6      	bhi.n	800ae18 <__multiply+0x10c>
 800ae4a:	9a01      	ldr	r2, [sp, #4]
 800ae4c:	50a9      	str	r1, [r5, r2]
 800ae4e:	3504      	adds	r5, #4
 800ae50:	e79a      	b.n	800ad88 <__multiply+0x7c>
 800ae52:	3e01      	subs	r6, #1
 800ae54:	e79c      	b.n	800ad90 <__multiply+0x84>
 800ae56:	bf00      	nop
 800ae58:	0800c443 	.word	0x0800c443
 800ae5c:	0800c454 	.word	0x0800c454

0800ae60 <__pow5mult>:
 800ae60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae64:	4615      	mov	r5, r2
 800ae66:	f012 0203 	ands.w	r2, r2, #3
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	d007      	beq.n	800ae80 <__pow5mult+0x20>
 800ae70:	4c25      	ldr	r4, [pc, #148]	; (800af08 <__pow5mult+0xa8>)
 800ae72:	3a01      	subs	r2, #1
 800ae74:	2300      	movs	r3, #0
 800ae76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae7a:	f7ff fe9b 	bl	800abb4 <__multadd>
 800ae7e:	4607      	mov	r7, r0
 800ae80:	10ad      	asrs	r5, r5, #2
 800ae82:	d03d      	beq.n	800af00 <__pow5mult+0xa0>
 800ae84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae86:	b97c      	cbnz	r4, 800aea8 <__pow5mult+0x48>
 800ae88:	2010      	movs	r0, #16
 800ae8a:	f7ff fe1b 	bl	800aac4 <malloc>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	6270      	str	r0, [r6, #36]	; 0x24
 800ae92:	b928      	cbnz	r0, 800aea0 <__pow5mult+0x40>
 800ae94:	4b1d      	ldr	r3, [pc, #116]	; (800af0c <__pow5mult+0xac>)
 800ae96:	481e      	ldr	r0, [pc, #120]	; (800af10 <__pow5mult+0xb0>)
 800ae98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae9c:	f000 fc0e 	bl	800b6bc <__assert_func>
 800aea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aea4:	6004      	str	r4, [r0, #0]
 800aea6:	60c4      	str	r4, [r0, #12]
 800aea8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aeac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aeb0:	b94c      	cbnz	r4, 800aec6 <__pow5mult+0x66>
 800aeb2:	f240 2171 	movw	r1, #625	; 0x271
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	f7ff ff12 	bl	800ace0 <__i2b>
 800aebc:	2300      	movs	r3, #0
 800aebe:	f8c8 0008 	str.w	r0, [r8, #8]
 800aec2:	4604      	mov	r4, r0
 800aec4:	6003      	str	r3, [r0, #0]
 800aec6:	f04f 0900 	mov.w	r9, #0
 800aeca:	07eb      	lsls	r3, r5, #31
 800aecc:	d50a      	bpl.n	800aee4 <__pow5mult+0x84>
 800aece:	4639      	mov	r1, r7
 800aed0:	4622      	mov	r2, r4
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7ff ff1a 	bl	800ad0c <__multiply>
 800aed8:	4639      	mov	r1, r7
 800aeda:	4680      	mov	r8, r0
 800aedc:	4630      	mov	r0, r6
 800aede:	f7ff fe47 	bl	800ab70 <_Bfree>
 800aee2:	4647      	mov	r7, r8
 800aee4:	106d      	asrs	r5, r5, #1
 800aee6:	d00b      	beq.n	800af00 <__pow5mult+0xa0>
 800aee8:	6820      	ldr	r0, [r4, #0]
 800aeea:	b938      	cbnz	r0, 800aefc <__pow5mult+0x9c>
 800aeec:	4622      	mov	r2, r4
 800aeee:	4621      	mov	r1, r4
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7ff ff0b 	bl	800ad0c <__multiply>
 800aef6:	6020      	str	r0, [r4, #0]
 800aef8:	f8c0 9000 	str.w	r9, [r0]
 800aefc:	4604      	mov	r4, r0
 800aefe:	e7e4      	b.n	800aeca <__pow5mult+0x6a>
 800af00:	4638      	mov	r0, r7
 800af02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af06:	bf00      	nop
 800af08:	0800c5a0 	.word	0x0800c5a0
 800af0c:	0800c3d1 	.word	0x0800c3d1
 800af10:	0800c454 	.word	0x0800c454

0800af14 <__lshift>:
 800af14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af18:	460c      	mov	r4, r1
 800af1a:	6849      	ldr	r1, [r1, #4]
 800af1c:	6923      	ldr	r3, [r4, #16]
 800af1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af22:	68a3      	ldr	r3, [r4, #8]
 800af24:	4607      	mov	r7, r0
 800af26:	4691      	mov	r9, r2
 800af28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af2c:	f108 0601 	add.w	r6, r8, #1
 800af30:	42b3      	cmp	r3, r6
 800af32:	db0b      	blt.n	800af4c <__lshift+0x38>
 800af34:	4638      	mov	r0, r7
 800af36:	f7ff fddb 	bl	800aaf0 <_Balloc>
 800af3a:	4605      	mov	r5, r0
 800af3c:	b948      	cbnz	r0, 800af52 <__lshift+0x3e>
 800af3e:	4602      	mov	r2, r0
 800af40:	4b2a      	ldr	r3, [pc, #168]	; (800afec <__lshift+0xd8>)
 800af42:	482b      	ldr	r0, [pc, #172]	; (800aff0 <__lshift+0xdc>)
 800af44:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af48:	f000 fbb8 	bl	800b6bc <__assert_func>
 800af4c:	3101      	adds	r1, #1
 800af4e:	005b      	lsls	r3, r3, #1
 800af50:	e7ee      	b.n	800af30 <__lshift+0x1c>
 800af52:	2300      	movs	r3, #0
 800af54:	f100 0114 	add.w	r1, r0, #20
 800af58:	f100 0210 	add.w	r2, r0, #16
 800af5c:	4618      	mov	r0, r3
 800af5e:	4553      	cmp	r3, sl
 800af60:	db37      	blt.n	800afd2 <__lshift+0xbe>
 800af62:	6920      	ldr	r0, [r4, #16]
 800af64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af68:	f104 0314 	add.w	r3, r4, #20
 800af6c:	f019 091f 	ands.w	r9, r9, #31
 800af70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800af78:	d02f      	beq.n	800afda <__lshift+0xc6>
 800af7a:	f1c9 0e20 	rsb	lr, r9, #32
 800af7e:	468a      	mov	sl, r1
 800af80:	f04f 0c00 	mov.w	ip, #0
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	fa02 f209 	lsl.w	r2, r2, r9
 800af8a:	ea42 020c 	orr.w	r2, r2, ip
 800af8e:	f84a 2b04 	str.w	r2, [sl], #4
 800af92:	f853 2b04 	ldr.w	r2, [r3], #4
 800af96:	4298      	cmp	r0, r3
 800af98:	fa22 fc0e 	lsr.w	ip, r2, lr
 800af9c:	d8f2      	bhi.n	800af84 <__lshift+0x70>
 800af9e:	1b03      	subs	r3, r0, r4
 800afa0:	3b15      	subs	r3, #21
 800afa2:	f023 0303 	bic.w	r3, r3, #3
 800afa6:	3304      	adds	r3, #4
 800afa8:	f104 0215 	add.w	r2, r4, #21
 800afac:	4290      	cmp	r0, r2
 800afae:	bf38      	it	cc
 800afb0:	2304      	movcc	r3, #4
 800afb2:	f841 c003 	str.w	ip, [r1, r3]
 800afb6:	f1bc 0f00 	cmp.w	ip, #0
 800afba:	d001      	beq.n	800afc0 <__lshift+0xac>
 800afbc:	f108 0602 	add.w	r6, r8, #2
 800afc0:	3e01      	subs	r6, #1
 800afc2:	4638      	mov	r0, r7
 800afc4:	612e      	str	r6, [r5, #16]
 800afc6:	4621      	mov	r1, r4
 800afc8:	f7ff fdd2 	bl	800ab70 <_Bfree>
 800afcc:	4628      	mov	r0, r5
 800afce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd2:	f842 0f04 	str.w	r0, [r2, #4]!
 800afd6:	3301      	adds	r3, #1
 800afd8:	e7c1      	b.n	800af5e <__lshift+0x4a>
 800afda:	3904      	subs	r1, #4
 800afdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800afe0:	f841 2f04 	str.w	r2, [r1, #4]!
 800afe4:	4298      	cmp	r0, r3
 800afe6:	d8f9      	bhi.n	800afdc <__lshift+0xc8>
 800afe8:	e7ea      	b.n	800afc0 <__lshift+0xac>
 800afea:	bf00      	nop
 800afec:	0800c443 	.word	0x0800c443
 800aff0:	0800c454 	.word	0x0800c454

0800aff4 <__mcmp>:
 800aff4:	b530      	push	{r4, r5, lr}
 800aff6:	6902      	ldr	r2, [r0, #16]
 800aff8:	690c      	ldr	r4, [r1, #16]
 800affa:	1b12      	subs	r2, r2, r4
 800affc:	d10e      	bne.n	800b01c <__mcmp+0x28>
 800affe:	f100 0314 	add.w	r3, r0, #20
 800b002:	3114      	adds	r1, #20
 800b004:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b008:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b00c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b010:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b014:	42a5      	cmp	r5, r4
 800b016:	d003      	beq.n	800b020 <__mcmp+0x2c>
 800b018:	d305      	bcc.n	800b026 <__mcmp+0x32>
 800b01a:	2201      	movs	r2, #1
 800b01c:	4610      	mov	r0, r2
 800b01e:	bd30      	pop	{r4, r5, pc}
 800b020:	4283      	cmp	r3, r0
 800b022:	d3f3      	bcc.n	800b00c <__mcmp+0x18>
 800b024:	e7fa      	b.n	800b01c <__mcmp+0x28>
 800b026:	f04f 32ff 	mov.w	r2, #4294967295
 800b02a:	e7f7      	b.n	800b01c <__mcmp+0x28>

0800b02c <__mdiff>:
 800b02c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b030:	460c      	mov	r4, r1
 800b032:	4606      	mov	r6, r0
 800b034:	4611      	mov	r1, r2
 800b036:	4620      	mov	r0, r4
 800b038:	4690      	mov	r8, r2
 800b03a:	f7ff ffdb 	bl	800aff4 <__mcmp>
 800b03e:	1e05      	subs	r5, r0, #0
 800b040:	d110      	bne.n	800b064 <__mdiff+0x38>
 800b042:	4629      	mov	r1, r5
 800b044:	4630      	mov	r0, r6
 800b046:	f7ff fd53 	bl	800aaf0 <_Balloc>
 800b04a:	b930      	cbnz	r0, 800b05a <__mdiff+0x2e>
 800b04c:	4b3a      	ldr	r3, [pc, #232]	; (800b138 <__mdiff+0x10c>)
 800b04e:	4602      	mov	r2, r0
 800b050:	f240 2132 	movw	r1, #562	; 0x232
 800b054:	4839      	ldr	r0, [pc, #228]	; (800b13c <__mdiff+0x110>)
 800b056:	f000 fb31 	bl	800b6bc <__assert_func>
 800b05a:	2301      	movs	r3, #1
 800b05c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b064:	bfa4      	itt	ge
 800b066:	4643      	movge	r3, r8
 800b068:	46a0      	movge	r8, r4
 800b06a:	4630      	mov	r0, r6
 800b06c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b070:	bfa6      	itte	ge
 800b072:	461c      	movge	r4, r3
 800b074:	2500      	movge	r5, #0
 800b076:	2501      	movlt	r5, #1
 800b078:	f7ff fd3a 	bl	800aaf0 <_Balloc>
 800b07c:	b920      	cbnz	r0, 800b088 <__mdiff+0x5c>
 800b07e:	4b2e      	ldr	r3, [pc, #184]	; (800b138 <__mdiff+0x10c>)
 800b080:	4602      	mov	r2, r0
 800b082:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b086:	e7e5      	b.n	800b054 <__mdiff+0x28>
 800b088:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b08c:	6926      	ldr	r6, [r4, #16]
 800b08e:	60c5      	str	r5, [r0, #12]
 800b090:	f104 0914 	add.w	r9, r4, #20
 800b094:	f108 0514 	add.w	r5, r8, #20
 800b098:	f100 0e14 	add.w	lr, r0, #20
 800b09c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b0a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b0a4:	f108 0210 	add.w	r2, r8, #16
 800b0a8:	46f2      	mov	sl, lr
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b0b4:	fa1f f883 	uxth.w	r8, r3
 800b0b8:	fa11 f18b 	uxtah	r1, r1, fp
 800b0bc:	0c1b      	lsrs	r3, r3, #16
 800b0be:	eba1 0808 	sub.w	r8, r1, r8
 800b0c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b0c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b0ca:	fa1f f888 	uxth.w	r8, r8
 800b0ce:	1419      	asrs	r1, r3, #16
 800b0d0:	454e      	cmp	r6, r9
 800b0d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b0d6:	f84a 3b04 	str.w	r3, [sl], #4
 800b0da:	d8e7      	bhi.n	800b0ac <__mdiff+0x80>
 800b0dc:	1b33      	subs	r3, r6, r4
 800b0de:	3b15      	subs	r3, #21
 800b0e0:	f023 0303 	bic.w	r3, r3, #3
 800b0e4:	3304      	adds	r3, #4
 800b0e6:	3415      	adds	r4, #21
 800b0e8:	42a6      	cmp	r6, r4
 800b0ea:	bf38      	it	cc
 800b0ec:	2304      	movcc	r3, #4
 800b0ee:	441d      	add	r5, r3
 800b0f0:	4473      	add	r3, lr
 800b0f2:	469e      	mov	lr, r3
 800b0f4:	462e      	mov	r6, r5
 800b0f6:	4566      	cmp	r6, ip
 800b0f8:	d30e      	bcc.n	800b118 <__mdiff+0xec>
 800b0fa:	f10c 0203 	add.w	r2, ip, #3
 800b0fe:	1b52      	subs	r2, r2, r5
 800b100:	f022 0203 	bic.w	r2, r2, #3
 800b104:	3d03      	subs	r5, #3
 800b106:	45ac      	cmp	ip, r5
 800b108:	bf38      	it	cc
 800b10a:	2200      	movcc	r2, #0
 800b10c:	441a      	add	r2, r3
 800b10e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b112:	b17b      	cbz	r3, 800b134 <__mdiff+0x108>
 800b114:	6107      	str	r7, [r0, #16]
 800b116:	e7a3      	b.n	800b060 <__mdiff+0x34>
 800b118:	f856 8b04 	ldr.w	r8, [r6], #4
 800b11c:	fa11 f288 	uxtah	r2, r1, r8
 800b120:	1414      	asrs	r4, r2, #16
 800b122:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b126:	b292      	uxth	r2, r2
 800b128:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b12c:	f84e 2b04 	str.w	r2, [lr], #4
 800b130:	1421      	asrs	r1, r4, #16
 800b132:	e7e0      	b.n	800b0f6 <__mdiff+0xca>
 800b134:	3f01      	subs	r7, #1
 800b136:	e7ea      	b.n	800b10e <__mdiff+0xe2>
 800b138:	0800c443 	.word	0x0800c443
 800b13c:	0800c454 	.word	0x0800c454

0800b140 <__d2b>:
 800b140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b144:	4689      	mov	r9, r1
 800b146:	2101      	movs	r1, #1
 800b148:	ec57 6b10 	vmov	r6, r7, d0
 800b14c:	4690      	mov	r8, r2
 800b14e:	f7ff fccf 	bl	800aaf0 <_Balloc>
 800b152:	4604      	mov	r4, r0
 800b154:	b930      	cbnz	r0, 800b164 <__d2b+0x24>
 800b156:	4602      	mov	r2, r0
 800b158:	4b25      	ldr	r3, [pc, #148]	; (800b1f0 <__d2b+0xb0>)
 800b15a:	4826      	ldr	r0, [pc, #152]	; (800b1f4 <__d2b+0xb4>)
 800b15c:	f240 310a 	movw	r1, #778	; 0x30a
 800b160:	f000 faac 	bl	800b6bc <__assert_func>
 800b164:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b16c:	bb35      	cbnz	r5, 800b1bc <__d2b+0x7c>
 800b16e:	2e00      	cmp	r6, #0
 800b170:	9301      	str	r3, [sp, #4]
 800b172:	d028      	beq.n	800b1c6 <__d2b+0x86>
 800b174:	4668      	mov	r0, sp
 800b176:	9600      	str	r6, [sp, #0]
 800b178:	f7ff fd82 	bl	800ac80 <__lo0bits>
 800b17c:	9900      	ldr	r1, [sp, #0]
 800b17e:	b300      	cbz	r0, 800b1c2 <__d2b+0x82>
 800b180:	9a01      	ldr	r2, [sp, #4]
 800b182:	f1c0 0320 	rsb	r3, r0, #32
 800b186:	fa02 f303 	lsl.w	r3, r2, r3
 800b18a:	430b      	orrs	r3, r1
 800b18c:	40c2      	lsrs	r2, r0
 800b18e:	6163      	str	r3, [r4, #20]
 800b190:	9201      	str	r2, [sp, #4]
 800b192:	9b01      	ldr	r3, [sp, #4]
 800b194:	61a3      	str	r3, [r4, #24]
 800b196:	2b00      	cmp	r3, #0
 800b198:	bf14      	ite	ne
 800b19a:	2202      	movne	r2, #2
 800b19c:	2201      	moveq	r2, #1
 800b19e:	6122      	str	r2, [r4, #16]
 800b1a0:	b1d5      	cbz	r5, 800b1d8 <__d2b+0x98>
 800b1a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b1a6:	4405      	add	r5, r0
 800b1a8:	f8c9 5000 	str.w	r5, [r9]
 800b1ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1b0:	f8c8 0000 	str.w	r0, [r8]
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	b003      	add	sp, #12
 800b1b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1c0:	e7d5      	b.n	800b16e <__d2b+0x2e>
 800b1c2:	6161      	str	r1, [r4, #20]
 800b1c4:	e7e5      	b.n	800b192 <__d2b+0x52>
 800b1c6:	a801      	add	r0, sp, #4
 800b1c8:	f7ff fd5a 	bl	800ac80 <__lo0bits>
 800b1cc:	9b01      	ldr	r3, [sp, #4]
 800b1ce:	6163      	str	r3, [r4, #20]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	6122      	str	r2, [r4, #16]
 800b1d4:	3020      	adds	r0, #32
 800b1d6:	e7e3      	b.n	800b1a0 <__d2b+0x60>
 800b1d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1e0:	f8c9 0000 	str.w	r0, [r9]
 800b1e4:	6918      	ldr	r0, [r3, #16]
 800b1e6:	f7ff fd2b 	bl	800ac40 <__hi0bits>
 800b1ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1ee:	e7df      	b.n	800b1b0 <__d2b+0x70>
 800b1f0:	0800c443 	.word	0x0800c443
 800b1f4:	0800c454 	.word	0x0800c454

0800b1f8 <_calloc_r>:
 800b1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1fa:	fba1 2402 	umull	r2, r4, r1, r2
 800b1fe:	b94c      	cbnz	r4, 800b214 <_calloc_r+0x1c>
 800b200:	4611      	mov	r1, r2
 800b202:	9201      	str	r2, [sp, #4]
 800b204:	f000 f87a 	bl	800b2fc <_malloc_r>
 800b208:	9a01      	ldr	r2, [sp, #4]
 800b20a:	4605      	mov	r5, r0
 800b20c:	b930      	cbnz	r0, 800b21c <_calloc_r+0x24>
 800b20e:	4628      	mov	r0, r5
 800b210:	b003      	add	sp, #12
 800b212:	bd30      	pop	{r4, r5, pc}
 800b214:	220c      	movs	r2, #12
 800b216:	6002      	str	r2, [r0, #0]
 800b218:	2500      	movs	r5, #0
 800b21a:	e7f8      	b.n	800b20e <_calloc_r+0x16>
 800b21c:	4621      	mov	r1, r4
 800b21e:	f7fe f9e5 	bl	80095ec <memset>
 800b222:	e7f4      	b.n	800b20e <_calloc_r+0x16>

0800b224 <_free_r>:
 800b224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b226:	2900      	cmp	r1, #0
 800b228:	d044      	beq.n	800b2b4 <_free_r+0x90>
 800b22a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b22e:	9001      	str	r0, [sp, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	f1a1 0404 	sub.w	r4, r1, #4
 800b236:	bfb8      	it	lt
 800b238:	18e4      	addlt	r4, r4, r3
 800b23a:	f000 fa9b 	bl	800b774 <__malloc_lock>
 800b23e:	4a1e      	ldr	r2, [pc, #120]	; (800b2b8 <_free_r+0x94>)
 800b240:	9801      	ldr	r0, [sp, #4]
 800b242:	6813      	ldr	r3, [r2, #0]
 800b244:	b933      	cbnz	r3, 800b254 <_free_r+0x30>
 800b246:	6063      	str	r3, [r4, #4]
 800b248:	6014      	str	r4, [r2, #0]
 800b24a:	b003      	add	sp, #12
 800b24c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b250:	f000 ba96 	b.w	800b780 <__malloc_unlock>
 800b254:	42a3      	cmp	r3, r4
 800b256:	d908      	bls.n	800b26a <_free_r+0x46>
 800b258:	6825      	ldr	r5, [r4, #0]
 800b25a:	1961      	adds	r1, r4, r5
 800b25c:	428b      	cmp	r3, r1
 800b25e:	bf01      	itttt	eq
 800b260:	6819      	ldreq	r1, [r3, #0]
 800b262:	685b      	ldreq	r3, [r3, #4]
 800b264:	1949      	addeq	r1, r1, r5
 800b266:	6021      	streq	r1, [r4, #0]
 800b268:	e7ed      	b.n	800b246 <_free_r+0x22>
 800b26a:	461a      	mov	r2, r3
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	b10b      	cbz	r3, 800b274 <_free_r+0x50>
 800b270:	42a3      	cmp	r3, r4
 800b272:	d9fa      	bls.n	800b26a <_free_r+0x46>
 800b274:	6811      	ldr	r1, [r2, #0]
 800b276:	1855      	adds	r5, r2, r1
 800b278:	42a5      	cmp	r5, r4
 800b27a:	d10b      	bne.n	800b294 <_free_r+0x70>
 800b27c:	6824      	ldr	r4, [r4, #0]
 800b27e:	4421      	add	r1, r4
 800b280:	1854      	adds	r4, r2, r1
 800b282:	42a3      	cmp	r3, r4
 800b284:	6011      	str	r1, [r2, #0]
 800b286:	d1e0      	bne.n	800b24a <_free_r+0x26>
 800b288:	681c      	ldr	r4, [r3, #0]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	6053      	str	r3, [r2, #4]
 800b28e:	4421      	add	r1, r4
 800b290:	6011      	str	r1, [r2, #0]
 800b292:	e7da      	b.n	800b24a <_free_r+0x26>
 800b294:	d902      	bls.n	800b29c <_free_r+0x78>
 800b296:	230c      	movs	r3, #12
 800b298:	6003      	str	r3, [r0, #0]
 800b29a:	e7d6      	b.n	800b24a <_free_r+0x26>
 800b29c:	6825      	ldr	r5, [r4, #0]
 800b29e:	1961      	adds	r1, r4, r5
 800b2a0:	428b      	cmp	r3, r1
 800b2a2:	bf04      	itt	eq
 800b2a4:	6819      	ldreq	r1, [r3, #0]
 800b2a6:	685b      	ldreq	r3, [r3, #4]
 800b2a8:	6063      	str	r3, [r4, #4]
 800b2aa:	bf04      	itt	eq
 800b2ac:	1949      	addeq	r1, r1, r5
 800b2ae:	6021      	streq	r1, [r4, #0]
 800b2b0:	6054      	str	r4, [r2, #4]
 800b2b2:	e7ca      	b.n	800b24a <_free_r+0x26>
 800b2b4:	b003      	add	sp, #12
 800b2b6:	bd30      	pop	{r4, r5, pc}
 800b2b8:	240008a0 	.word	0x240008a0

0800b2bc <sbrk_aligned>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	4e0e      	ldr	r6, [pc, #56]	; (800b2f8 <sbrk_aligned+0x3c>)
 800b2c0:	460c      	mov	r4, r1
 800b2c2:	6831      	ldr	r1, [r6, #0]
 800b2c4:	4605      	mov	r5, r0
 800b2c6:	b911      	cbnz	r1, 800b2ce <sbrk_aligned+0x12>
 800b2c8:	f000 f9e8 	bl	800b69c <_sbrk_r>
 800b2cc:	6030      	str	r0, [r6, #0]
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	f000 f9e3 	bl	800b69c <_sbrk_r>
 800b2d6:	1c43      	adds	r3, r0, #1
 800b2d8:	d00a      	beq.n	800b2f0 <sbrk_aligned+0x34>
 800b2da:	1cc4      	adds	r4, r0, #3
 800b2dc:	f024 0403 	bic.w	r4, r4, #3
 800b2e0:	42a0      	cmp	r0, r4
 800b2e2:	d007      	beq.n	800b2f4 <sbrk_aligned+0x38>
 800b2e4:	1a21      	subs	r1, r4, r0
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f000 f9d8 	bl	800b69c <_sbrk_r>
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d101      	bne.n	800b2f4 <sbrk_aligned+0x38>
 800b2f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
 800b2f8:	240008a4 	.word	0x240008a4

0800b2fc <_malloc_r>:
 800b2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b300:	1ccd      	adds	r5, r1, #3
 800b302:	f025 0503 	bic.w	r5, r5, #3
 800b306:	3508      	adds	r5, #8
 800b308:	2d0c      	cmp	r5, #12
 800b30a:	bf38      	it	cc
 800b30c:	250c      	movcc	r5, #12
 800b30e:	2d00      	cmp	r5, #0
 800b310:	4607      	mov	r7, r0
 800b312:	db01      	blt.n	800b318 <_malloc_r+0x1c>
 800b314:	42a9      	cmp	r1, r5
 800b316:	d905      	bls.n	800b324 <_malloc_r+0x28>
 800b318:	230c      	movs	r3, #12
 800b31a:	603b      	str	r3, [r7, #0]
 800b31c:	2600      	movs	r6, #0
 800b31e:	4630      	mov	r0, r6
 800b320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b324:	4e2e      	ldr	r6, [pc, #184]	; (800b3e0 <_malloc_r+0xe4>)
 800b326:	f000 fa25 	bl	800b774 <__malloc_lock>
 800b32a:	6833      	ldr	r3, [r6, #0]
 800b32c:	461c      	mov	r4, r3
 800b32e:	bb34      	cbnz	r4, 800b37e <_malloc_r+0x82>
 800b330:	4629      	mov	r1, r5
 800b332:	4638      	mov	r0, r7
 800b334:	f7ff ffc2 	bl	800b2bc <sbrk_aligned>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	4604      	mov	r4, r0
 800b33c:	d14d      	bne.n	800b3da <_malloc_r+0xde>
 800b33e:	6834      	ldr	r4, [r6, #0]
 800b340:	4626      	mov	r6, r4
 800b342:	2e00      	cmp	r6, #0
 800b344:	d140      	bne.n	800b3c8 <_malloc_r+0xcc>
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	4631      	mov	r1, r6
 800b34a:	4638      	mov	r0, r7
 800b34c:	eb04 0803 	add.w	r8, r4, r3
 800b350:	f000 f9a4 	bl	800b69c <_sbrk_r>
 800b354:	4580      	cmp	r8, r0
 800b356:	d13a      	bne.n	800b3ce <_malloc_r+0xd2>
 800b358:	6821      	ldr	r1, [r4, #0]
 800b35a:	3503      	adds	r5, #3
 800b35c:	1a6d      	subs	r5, r5, r1
 800b35e:	f025 0503 	bic.w	r5, r5, #3
 800b362:	3508      	adds	r5, #8
 800b364:	2d0c      	cmp	r5, #12
 800b366:	bf38      	it	cc
 800b368:	250c      	movcc	r5, #12
 800b36a:	4629      	mov	r1, r5
 800b36c:	4638      	mov	r0, r7
 800b36e:	f7ff ffa5 	bl	800b2bc <sbrk_aligned>
 800b372:	3001      	adds	r0, #1
 800b374:	d02b      	beq.n	800b3ce <_malloc_r+0xd2>
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	442b      	add	r3, r5
 800b37a:	6023      	str	r3, [r4, #0]
 800b37c:	e00e      	b.n	800b39c <_malloc_r+0xa0>
 800b37e:	6822      	ldr	r2, [r4, #0]
 800b380:	1b52      	subs	r2, r2, r5
 800b382:	d41e      	bmi.n	800b3c2 <_malloc_r+0xc6>
 800b384:	2a0b      	cmp	r2, #11
 800b386:	d916      	bls.n	800b3b6 <_malloc_r+0xba>
 800b388:	1961      	adds	r1, r4, r5
 800b38a:	42a3      	cmp	r3, r4
 800b38c:	6025      	str	r5, [r4, #0]
 800b38e:	bf18      	it	ne
 800b390:	6059      	strne	r1, [r3, #4]
 800b392:	6863      	ldr	r3, [r4, #4]
 800b394:	bf08      	it	eq
 800b396:	6031      	streq	r1, [r6, #0]
 800b398:	5162      	str	r2, [r4, r5]
 800b39a:	604b      	str	r3, [r1, #4]
 800b39c:	4638      	mov	r0, r7
 800b39e:	f104 060b 	add.w	r6, r4, #11
 800b3a2:	f000 f9ed 	bl	800b780 <__malloc_unlock>
 800b3a6:	f026 0607 	bic.w	r6, r6, #7
 800b3aa:	1d23      	adds	r3, r4, #4
 800b3ac:	1af2      	subs	r2, r6, r3
 800b3ae:	d0b6      	beq.n	800b31e <_malloc_r+0x22>
 800b3b0:	1b9b      	subs	r3, r3, r6
 800b3b2:	50a3      	str	r3, [r4, r2]
 800b3b4:	e7b3      	b.n	800b31e <_malloc_r+0x22>
 800b3b6:	6862      	ldr	r2, [r4, #4]
 800b3b8:	42a3      	cmp	r3, r4
 800b3ba:	bf0c      	ite	eq
 800b3bc:	6032      	streq	r2, [r6, #0]
 800b3be:	605a      	strne	r2, [r3, #4]
 800b3c0:	e7ec      	b.n	800b39c <_malloc_r+0xa0>
 800b3c2:	4623      	mov	r3, r4
 800b3c4:	6864      	ldr	r4, [r4, #4]
 800b3c6:	e7b2      	b.n	800b32e <_malloc_r+0x32>
 800b3c8:	4634      	mov	r4, r6
 800b3ca:	6876      	ldr	r6, [r6, #4]
 800b3cc:	e7b9      	b.n	800b342 <_malloc_r+0x46>
 800b3ce:	230c      	movs	r3, #12
 800b3d0:	603b      	str	r3, [r7, #0]
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	f000 f9d4 	bl	800b780 <__malloc_unlock>
 800b3d8:	e7a1      	b.n	800b31e <_malloc_r+0x22>
 800b3da:	6025      	str	r5, [r4, #0]
 800b3dc:	e7de      	b.n	800b39c <_malloc_r+0xa0>
 800b3de:	bf00      	nop
 800b3e0:	240008a0 	.word	0x240008a0

0800b3e4 <__ssputs_r>:
 800b3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e8:	688e      	ldr	r6, [r1, #8]
 800b3ea:	429e      	cmp	r6, r3
 800b3ec:	4682      	mov	sl, r0
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	4690      	mov	r8, r2
 800b3f2:	461f      	mov	r7, r3
 800b3f4:	d838      	bhi.n	800b468 <__ssputs_r+0x84>
 800b3f6:	898a      	ldrh	r2, [r1, #12]
 800b3f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3fc:	d032      	beq.n	800b464 <__ssputs_r+0x80>
 800b3fe:	6825      	ldr	r5, [r4, #0]
 800b400:	6909      	ldr	r1, [r1, #16]
 800b402:	eba5 0901 	sub.w	r9, r5, r1
 800b406:	6965      	ldr	r5, [r4, #20]
 800b408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b40c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b410:	3301      	adds	r3, #1
 800b412:	444b      	add	r3, r9
 800b414:	106d      	asrs	r5, r5, #1
 800b416:	429d      	cmp	r5, r3
 800b418:	bf38      	it	cc
 800b41a:	461d      	movcc	r5, r3
 800b41c:	0553      	lsls	r3, r2, #21
 800b41e:	d531      	bpl.n	800b484 <__ssputs_r+0xa0>
 800b420:	4629      	mov	r1, r5
 800b422:	f7ff ff6b 	bl	800b2fc <_malloc_r>
 800b426:	4606      	mov	r6, r0
 800b428:	b950      	cbnz	r0, 800b440 <__ssputs_r+0x5c>
 800b42a:	230c      	movs	r3, #12
 800b42c:	f8ca 3000 	str.w	r3, [sl]
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b436:	81a3      	strh	r3, [r4, #12]
 800b438:	f04f 30ff 	mov.w	r0, #4294967295
 800b43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b440:	6921      	ldr	r1, [r4, #16]
 800b442:	464a      	mov	r2, r9
 800b444:	f7ff fb46 	bl	800aad4 <memcpy>
 800b448:	89a3      	ldrh	r3, [r4, #12]
 800b44a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b44e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b452:	81a3      	strh	r3, [r4, #12]
 800b454:	6126      	str	r6, [r4, #16]
 800b456:	6165      	str	r5, [r4, #20]
 800b458:	444e      	add	r6, r9
 800b45a:	eba5 0509 	sub.w	r5, r5, r9
 800b45e:	6026      	str	r6, [r4, #0]
 800b460:	60a5      	str	r5, [r4, #8]
 800b462:	463e      	mov	r6, r7
 800b464:	42be      	cmp	r6, r7
 800b466:	d900      	bls.n	800b46a <__ssputs_r+0x86>
 800b468:	463e      	mov	r6, r7
 800b46a:	6820      	ldr	r0, [r4, #0]
 800b46c:	4632      	mov	r2, r6
 800b46e:	4641      	mov	r1, r8
 800b470:	f000 f966 	bl	800b740 <memmove>
 800b474:	68a3      	ldr	r3, [r4, #8]
 800b476:	1b9b      	subs	r3, r3, r6
 800b478:	60a3      	str	r3, [r4, #8]
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	4433      	add	r3, r6
 800b47e:	6023      	str	r3, [r4, #0]
 800b480:	2000      	movs	r0, #0
 800b482:	e7db      	b.n	800b43c <__ssputs_r+0x58>
 800b484:	462a      	mov	r2, r5
 800b486:	f000 f981 	bl	800b78c <_realloc_r>
 800b48a:	4606      	mov	r6, r0
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d1e1      	bne.n	800b454 <__ssputs_r+0x70>
 800b490:	6921      	ldr	r1, [r4, #16]
 800b492:	4650      	mov	r0, sl
 800b494:	f7ff fec6 	bl	800b224 <_free_r>
 800b498:	e7c7      	b.n	800b42a <__ssputs_r+0x46>
	...

0800b49c <_svfiprintf_r>:
 800b49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a0:	4698      	mov	r8, r3
 800b4a2:	898b      	ldrh	r3, [r1, #12]
 800b4a4:	061b      	lsls	r3, r3, #24
 800b4a6:	b09d      	sub	sp, #116	; 0x74
 800b4a8:	4607      	mov	r7, r0
 800b4aa:	460d      	mov	r5, r1
 800b4ac:	4614      	mov	r4, r2
 800b4ae:	d50e      	bpl.n	800b4ce <_svfiprintf_r+0x32>
 800b4b0:	690b      	ldr	r3, [r1, #16]
 800b4b2:	b963      	cbnz	r3, 800b4ce <_svfiprintf_r+0x32>
 800b4b4:	2140      	movs	r1, #64	; 0x40
 800b4b6:	f7ff ff21 	bl	800b2fc <_malloc_r>
 800b4ba:	6028      	str	r0, [r5, #0]
 800b4bc:	6128      	str	r0, [r5, #16]
 800b4be:	b920      	cbnz	r0, 800b4ca <_svfiprintf_r+0x2e>
 800b4c0:	230c      	movs	r3, #12
 800b4c2:	603b      	str	r3, [r7, #0]
 800b4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c8:	e0d1      	b.n	800b66e <_svfiprintf_r+0x1d2>
 800b4ca:	2340      	movs	r3, #64	; 0x40
 800b4cc:	616b      	str	r3, [r5, #20]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4d2:	2320      	movs	r3, #32
 800b4d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4dc:	2330      	movs	r3, #48	; 0x30
 800b4de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b688 <_svfiprintf_r+0x1ec>
 800b4e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4e6:	f04f 0901 	mov.w	r9, #1
 800b4ea:	4623      	mov	r3, r4
 800b4ec:	469a      	mov	sl, r3
 800b4ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4f2:	b10a      	cbz	r2, 800b4f8 <_svfiprintf_r+0x5c>
 800b4f4:	2a25      	cmp	r2, #37	; 0x25
 800b4f6:	d1f9      	bne.n	800b4ec <_svfiprintf_r+0x50>
 800b4f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b4fc:	d00b      	beq.n	800b516 <_svfiprintf_r+0x7a>
 800b4fe:	465b      	mov	r3, fp
 800b500:	4622      	mov	r2, r4
 800b502:	4629      	mov	r1, r5
 800b504:	4638      	mov	r0, r7
 800b506:	f7ff ff6d 	bl	800b3e4 <__ssputs_r>
 800b50a:	3001      	adds	r0, #1
 800b50c:	f000 80aa 	beq.w	800b664 <_svfiprintf_r+0x1c8>
 800b510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b512:	445a      	add	r2, fp
 800b514:	9209      	str	r2, [sp, #36]	; 0x24
 800b516:	f89a 3000 	ldrb.w	r3, [sl]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f000 80a2 	beq.w	800b664 <_svfiprintf_r+0x1c8>
 800b520:	2300      	movs	r3, #0
 800b522:	f04f 32ff 	mov.w	r2, #4294967295
 800b526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b52a:	f10a 0a01 	add.w	sl, sl, #1
 800b52e:	9304      	str	r3, [sp, #16]
 800b530:	9307      	str	r3, [sp, #28]
 800b532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b536:	931a      	str	r3, [sp, #104]	; 0x68
 800b538:	4654      	mov	r4, sl
 800b53a:	2205      	movs	r2, #5
 800b53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b540:	4851      	ldr	r0, [pc, #324]	; (800b688 <_svfiprintf_r+0x1ec>)
 800b542:	f7f4 fed5 	bl	80002f0 <memchr>
 800b546:	9a04      	ldr	r2, [sp, #16]
 800b548:	b9d8      	cbnz	r0, 800b582 <_svfiprintf_r+0xe6>
 800b54a:	06d0      	lsls	r0, r2, #27
 800b54c:	bf44      	itt	mi
 800b54e:	2320      	movmi	r3, #32
 800b550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b554:	0711      	lsls	r1, r2, #28
 800b556:	bf44      	itt	mi
 800b558:	232b      	movmi	r3, #43	; 0x2b
 800b55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b55e:	f89a 3000 	ldrb.w	r3, [sl]
 800b562:	2b2a      	cmp	r3, #42	; 0x2a
 800b564:	d015      	beq.n	800b592 <_svfiprintf_r+0xf6>
 800b566:	9a07      	ldr	r2, [sp, #28]
 800b568:	4654      	mov	r4, sl
 800b56a:	2000      	movs	r0, #0
 800b56c:	f04f 0c0a 	mov.w	ip, #10
 800b570:	4621      	mov	r1, r4
 800b572:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b576:	3b30      	subs	r3, #48	; 0x30
 800b578:	2b09      	cmp	r3, #9
 800b57a:	d94e      	bls.n	800b61a <_svfiprintf_r+0x17e>
 800b57c:	b1b0      	cbz	r0, 800b5ac <_svfiprintf_r+0x110>
 800b57e:	9207      	str	r2, [sp, #28]
 800b580:	e014      	b.n	800b5ac <_svfiprintf_r+0x110>
 800b582:	eba0 0308 	sub.w	r3, r0, r8
 800b586:	fa09 f303 	lsl.w	r3, r9, r3
 800b58a:	4313      	orrs	r3, r2
 800b58c:	9304      	str	r3, [sp, #16]
 800b58e:	46a2      	mov	sl, r4
 800b590:	e7d2      	b.n	800b538 <_svfiprintf_r+0x9c>
 800b592:	9b03      	ldr	r3, [sp, #12]
 800b594:	1d19      	adds	r1, r3, #4
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	9103      	str	r1, [sp, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	bfbb      	ittet	lt
 800b59e:	425b      	neglt	r3, r3
 800b5a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b5a4:	9307      	strge	r3, [sp, #28]
 800b5a6:	9307      	strlt	r3, [sp, #28]
 800b5a8:	bfb8      	it	lt
 800b5aa:	9204      	strlt	r2, [sp, #16]
 800b5ac:	7823      	ldrb	r3, [r4, #0]
 800b5ae:	2b2e      	cmp	r3, #46	; 0x2e
 800b5b0:	d10c      	bne.n	800b5cc <_svfiprintf_r+0x130>
 800b5b2:	7863      	ldrb	r3, [r4, #1]
 800b5b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b5b6:	d135      	bne.n	800b624 <_svfiprintf_r+0x188>
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	1d1a      	adds	r2, r3, #4
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	9203      	str	r2, [sp, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	bfb8      	it	lt
 800b5c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5c8:	3402      	adds	r4, #2
 800b5ca:	9305      	str	r3, [sp, #20]
 800b5cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b698 <_svfiprintf_r+0x1fc>
 800b5d0:	7821      	ldrb	r1, [r4, #0]
 800b5d2:	2203      	movs	r2, #3
 800b5d4:	4650      	mov	r0, sl
 800b5d6:	f7f4 fe8b 	bl	80002f0 <memchr>
 800b5da:	b140      	cbz	r0, 800b5ee <_svfiprintf_r+0x152>
 800b5dc:	2340      	movs	r3, #64	; 0x40
 800b5de:	eba0 000a 	sub.w	r0, r0, sl
 800b5e2:	fa03 f000 	lsl.w	r0, r3, r0
 800b5e6:	9b04      	ldr	r3, [sp, #16]
 800b5e8:	4303      	orrs	r3, r0
 800b5ea:	3401      	adds	r4, #1
 800b5ec:	9304      	str	r3, [sp, #16]
 800b5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f2:	4826      	ldr	r0, [pc, #152]	; (800b68c <_svfiprintf_r+0x1f0>)
 800b5f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5f8:	2206      	movs	r2, #6
 800b5fa:	f7f4 fe79 	bl	80002f0 <memchr>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d038      	beq.n	800b674 <_svfiprintf_r+0x1d8>
 800b602:	4b23      	ldr	r3, [pc, #140]	; (800b690 <_svfiprintf_r+0x1f4>)
 800b604:	bb1b      	cbnz	r3, 800b64e <_svfiprintf_r+0x1b2>
 800b606:	9b03      	ldr	r3, [sp, #12]
 800b608:	3307      	adds	r3, #7
 800b60a:	f023 0307 	bic.w	r3, r3, #7
 800b60e:	3308      	adds	r3, #8
 800b610:	9303      	str	r3, [sp, #12]
 800b612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b614:	4433      	add	r3, r6
 800b616:	9309      	str	r3, [sp, #36]	; 0x24
 800b618:	e767      	b.n	800b4ea <_svfiprintf_r+0x4e>
 800b61a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b61e:	460c      	mov	r4, r1
 800b620:	2001      	movs	r0, #1
 800b622:	e7a5      	b.n	800b570 <_svfiprintf_r+0xd4>
 800b624:	2300      	movs	r3, #0
 800b626:	3401      	adds	r4, #1
 800b628:	9305      	str	r3, [sp, #20]
 800b62a:	4619      	mov	r1, r3
 800b62c:	f04f 0c0a 	mov.w	ip, #10
 800b630:	4620      	mov	r0, r4
 800b632:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b636:	3a30      	subs	r2, #48	; 0x30
 800b638:	2a09      	cmp	r2, #9
 800b63a:	d903      	bls.n	800b644 <_svfiprintf_r+0x1a8>
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d0c5      	beq.n	800b5cc <_svfiprintf_r+0x130>
 800b640:	9105      	str	r1, [sp, #20]
 800b642:	e7c3      	b.n	800b5cc <_svfiprintf_r+0x130>
 800b644:	fb0c 2101 	mla	r1, ip, r1, r2
 800b648:	4604      	mov	r4, r0
 800b64a:	2301      	movs	r3, #1
 800b64c:	e7f0      	b.n	800b630 <_svfiprintf_r+0x194>
 800b64e:	ab03      	add	r3, sp, #12
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	462a      	mov	r2, r5
 800b654:	4b0f      	ldr	r3, [pc, #60]	; (800b694 <_svfiprintf_r+0x1f8>)
 800b656:	a904      	add	r1, sp, #16
 800b658:	4638      	mov	r0, r7
 800b65a:	f7fe f861 	bl	8009720 <_printf_float>
 800b65e:	1c42      	adds	r2, r0, #1
 800b660:	4606      	mov	r6, r0
 800b662:	d1d6      	bne.n	800b612 <_svfiprintf_r+0x176>
 800b664:	89ab      	ldrh	r3, [r5, #12]
 800b666:	065b      	lsls	r3, r3, #25
 800b668:	f53f af2c 	bmi.w	800b4c4 <_svfiprintf_r+0x28>
 800b66c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b66e:	b01d      	add	sp, #116	; 0x74
 800b670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b674:	ab03      	add	r3, sp, #12
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	462a      	mov	r2, r5
 800b67a:	4b06      	ldr	r3, [pc, #24]	; (800b694 <_svfiprintf_r+0x1f8>)
 800b67c:	a904      	add	r1, sp, #16
 800b67e:	4638      	mov	r0, r7
 800b680:	f7fe fada 	bl	8009c38 <_printf_i>
 800b684:	e7eb      	b.n	800b65e <_svfiprintf_r+0x1c2>
 800b686:	bf00      	nop
 800b688:	0800c5ac 	.word	0x0800c5ac
 800b68c:	0800c5b6 	.word	0x0800c5b6
 800b690:	08009721 	.word	0x08009721
 800b694:	0800b3e5 	.word	0x0800b3e5
 800b698:	0800c5b2 	.word	0x0800c5b2

0800b69c <_sbrk_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d06      	ldr	r5, [pc, #24]	; (800b6b8 <_sbrk_r+0x1c>)
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	602b      	str	r3, [r5, #0]
 800b6a8:	f7f6 f86e 	bl	8001788 <_sbrk>
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	d102      	bne.n	800b6b6 <_sbrk_r+0x1a>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	b103      	cbz	r3, 800b6b6 <_sbrk_r+0x1a>
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
 800b6b8:	240008a8 	.word	0x240008a8

0800b6bc <__assert_func>:
 800b6bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6be:	4614      	mov	r4, r2
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <__assert_func+0x2c>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	68d8      	ldr	r0, [r3, #12]
 800b6ca:	b14c      	cbz	r4, 800b6e0 <__assert_func+0x24>
 800b6cc:	4b07      	ldr	r3, [pc, #28]	; (800b6ec <__assert_func+0x30>)
 800b6ce:	9100      	str	r1, [sp, #0]
 800b6d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6d4:	4906      	ldr	r1, [pc, #24]	; (800b6f0 <__assert_func+0x34>)
 800b6d6:	462b      	mov	r3, r5
 800b6d8:	f000 f80e 	bl	800b6f8 <fiprintf>
 800b6dc:	f000 faac 	bl	800bc38 <abort>
 800b6e0:	4b04      	ldr	r3, [pc, #16]	; (800b6f4 <__assert_func+0x38>)
 800b6e2:	461c      	mov	r4, r3
 800b6e4:	e7f3      	b.n	800b6ce <__assert_func+0x12>
 800b6e6:	bf00      	nop
 800b6e8:	24000010 	.word	0x24000010
 800b6ec:	0800c5bd 	.word	0x0800c5bd
 800b6f0:	0800c5ca 	.word	0x0800c5ca
 800b6f4:	0800c5f8 	.word	0x0800c5f8

0800b6f8 <fiprintf>:
 800b6f8:	b40e      	push	{r1, r2, r3}
 800b6fa:	b503      	push	{r0, r1, lr}
 800b6fc:	4601      	mov	r1, r0
 800b6fe:	ab03      	add	r3, sp, #12
 800b700:	4805      	ldr	r0, [pc, #20]	; (800b718 <fiprintf+0x20>)
 800b702:	f853 2b04 	ldr.w	r2, [r3], #4
 800b706:	6800      	ldr	r0, [r0, #0]
 800b708:	9301      	str	r3, [sp, #4]
 800b70a:	f000 f897 	bl	800b83c <_vfiprintf_r>
 800b70e:	b002      	add	sp, #8
 800b710:	f85d eb04 	ldr.w	lr, [sp], #4
 800b714:	b003      	add	sp, #12
 800b716:	4770      	bx	lr
 800b718:	24000010 	.word	0x24000010

0800b71c <__ascii_mbtowc>:
 800b71c:	b082      	sub	sp, #8
 800b71e:	b901      	cbnz	r1, 800b722 <__ascii_mbtowc+0x6>
 800b720:	a901      	add	r1, sp, #4
 800b722:	b142      	cbz	r2, 800b736 <__ascii_mbtowc+0x1a>
 800b724:	b14b      	cbz	r3, 800b73a <__ascii_mbtowc+0x1e>
 800b726:	7813      	ldrb	r3, [r2, #0]
 800b728:	600b      	str	r3, [r1, #0]
 800b72a:	7812      	ldrb	r2, [r2, #0]
 800b72c:	1e10      	subs	r0, r2, #0
 800b72e:	bf18      	it	ne
 800b730:	2001      	movne	r0, #1
 800b732:	b002      	add	sp, #8
 800b734:	4770      	bx	lr
 800b736:	4610      	mov	r0, r2
 800b738:	e7fb      	b.n	800b732 <__ascii_mbtowc+0x16>
 800b73a:	f06f 0001 	mvn.w	r0, #1
 800b73e:	e7f8      	b.n	800b732 <__ascii_mbtowc+0x16>

0800b740 <memmove>:
 800b740:	4288      	cmp	r0, r1
 800b742:	b510      	push	{r4, lr}
 800b744:	eb01 0402 	add.w	r4, r1, r2
 800b748:	d902      	bls.n	800b750 <memmove+0x10>
 800b74a:	4284      	cmp	r4, r0
 800b74c:	4623      	mov	r3, r4
 800b74e:	d807      	bhi.n	800b760 <memmove+0x20>
 800b750:	1e43      	subs	r3, r0, #1
 800b752:	42a1      	cmp	r1, r4
 800b754:	d008      	beq.n	800b768 <memmove+0x28>
 800b756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b75a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b75e:	e7f8      	b.n	800b752 <memmove+0x12>
 800b760:	4402      	add	r2, r0
 800b762:	4601      	mov	r1, r0
 800b764:	428a      	cmp	r2, r1
 800b766:	d100      	bne.n	800b76a <memmove+0x2a>
 800b768:	bd10      	pop	{r4, pc}
 800b76a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b76e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b772:	e7f7      	b.n	800b764 <memmove+0x24>

0800b774 <__malloc_lock>:
 800b774:	4801      	ldr	r0, [pc, #4]	; (800b77c <__malloc_lock+0x8>)
 800b776:	f000 bc1f 	b.w	800bfb8 <__retarget_lock_acquire_recursive>
 800b77a:	bf00      	nop
 800b77c:	240008ac 	.word	0x240008ac

0800b780 <__malloc_unlock>:
 800b780:	4801      	ldr	r0, [pc, #4]	; (800b788 <__malloc_unlock+0x8>)
 800b782:	f000 bc1a 	b.w	800bfba <__retarget_lock_release_recursive>
 800b786:	bf00      	nop
 800b788:	240008ac 	.word	0x240008ac

0800b78c <_realloc_r>:
 800b78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b790:	4680      	mov	r8, r0
 800b792:	4614      	mov	r4, r2
 800b794:	460e      	mov	r6, r1
 800b796:	b921      	cbnz	r1, 800b7a2 <_realloc_r+0x16>
 800b798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b79c:	4611      	mov	r1, r2
 800b79e:	f7ff bdad 	b.w	800b2fc <_malloc_r>
 800b7a2:	b92a      	cbnz	r2, 800b7b0 <_realloc_r+0x24>
 800b7a4:	f7ff fd3e 	bl	800b224 <_free_r>
 800b7a8:	4625      	mov	r5, r4
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b0:	f000 fc6a 	bl	800c088 <_malloc_usable_size_r>
 800b7b4:	4284      	cmp	r4, r0
 800b7b6:	4607      	mov	r7, r0
 800b7b8:	d802      	bhi.n	800b7c0 <_realloc_r+0x34>
 800b7ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7be:	d812      	bhi.n	800b7e6 <_realloc_r+0x5a>
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	4640      	mov	r0, r8
 800b7c4:	f7ff fd9a 	bl	800b2fc <_malloc_r>
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d0ed      	beq.n	800b7aa <_realloc_r+0x1e>
 800b7ce:	42bc      	cmp	r4, r7
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	4631      	mov	r1, r6
 800b7d4:	bf28      	it	cs
 800b7d6:	463a      	movcs	r2, r7
 800b7d8:	f7ff f97c 	bl	800aad4 <memcpy>
 800b7dc:	4631      	mov	r1, r6
 800b7de:	4640      	mov	r0, r8
 800b7e0:	f7ff fd20 	bl	800b224 <_free_r>
 800b7e4:	e7e1      	b.n	800b7aa <_realloc_r+0x1e>
 800b7e6:	4635      	mov	r5, r6
 800b7e8:	e7df      	b.n	800b7aa <_realloc_r+0x1e>

0800b7ea <__sfputc_r>:
 800b7ea:	6893      	ldr	r3, [r2, #8]
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	b410      	push	{r4}
 800b7f2:	6093      	str	r3, [r2, #8]
 800b7f4:	da08      	bge.n	800b808 <__sfputc_r+0x1e>
 800b7f6:	6994      	ldr	r4, [r2, #24]
 800b7f8:	42a3      	cmp	r3, r4
 800b7fa:	db01      	blt.n	800b800 <__sfputc_r+0x16>
 800b7fc:	290a      	cmp	r1, #10
 800b7fe:	d103      	bne.n	800b808 <__sfputc_r+0x1e>
 800b800:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b804:	f000 b94a 	b.w	800ba9c <__swbuf_r>
 800b808:	6813      	ldr	r3, [r2, #0]
 800b80a:	1c58      	adds	r0, r3, #1
 800b80c:	6010      	str	r0, [r2, #0]
 800b80e:	7019      	strb	r1, [r3, #0]
 800b810:	4608      	mov	r0, r1
 800b812:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <__sfputs_r>:
 800b818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81a:	4606      	mov	r6, r0
 800b81c:	460f      	mov	r7, r1
 800b81e:	4614      	mov	r4, r2
 800b820:	18d5      	adds	r5, r2, r3
 800b822:	42ac      	cmp	r4, r5
 800b824:	d101      	bne.n	800b82a <__sfputs_r+0x12>
 800b826:	2000      	movs	r0, #0
 800b828:	e007      	b.n	800b83a <__sfputs_r+0x22>
 800b82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b82e:	463a      	mov	r2, r7
 800b830:	4630      	mov	r0, r6
 800b832:	f7ff ffda 	bl	800b7ea <__sfputc_r>
 800b836:	1c43      	adds	r3, r0, #1
 800b838:	d1f3      	bne.n	800b822 <__sfputs_r+0xa>
 800b83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b83c <_vfiprintf_r>:
 800b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b840:	460d      	mov	r5, r1
 800b842:	b09d      	sub	sp, #116	; 0x74
 800b844:	4614      	mov	r4, r2
 800b846:	4698      	mov	r8, r3
 800b848:	4606      	mov	r6, r0
 800b84a:	b118      	cbz	r0, 800b854 <_vfiprintf_r+0x18>
 800b84c:	6983      	ldr	r3, [r0, #24]
 800b84e:	b90b      	cbnz	r3, 800b854 <_vfiprintf_r+0x18>
 800b850:	f000 fb14 	bl	800be7c <__sinit>
 800b854:	4b89      	ldr	r3, [pc, #548]	; (800ba7c <_vfiprintf_r+0x240>)
 800b856:	429d      	cmp	r5, r3
 800b858:	d11b      	bne.n	800b892 <_vfiprintf_r+0x56>
 800b85a:	6875      	ldr	r5, [r6, #4]
 800b85c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b85e:	07d9      	lsls	r1, r3, #31
 800b860:	d405      	bmi.n	800b86e <_vfiprintf_r+0x32>
 800b862:	89ab      	ldrh	r3, [r5, #12]
 800b864:	059a      	lsls	r2, r3, #22
 800b866:	d402      	bmi.n	800b86e <_vfiprintf_r+0x32>
 800b868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b86a:	f000 fba5 	bl	800bfb8 <__retarget_lock_acquire_recursive>
 800b86e:	89ab      	ldrh	r3, [r5, #12]
 800b870:	071b      	lsls	r3, r3, #28
 800b872:	d501      	bpl.n	800b878 <_vfiprintf_r+0x3c>
 800b874:	692b      	ldr	r3, [r5, #16]
 800b876:	b9eb      	cbnz	r3, 800b8b4 <_vfiprintf_r+0x78>
 800b878:	4629      	mov	r1, r5
 800b87a:	4630      	mov	r0, r6
 800b87c:	f000 f96e 	bl	800bb5c <__swsetup_r>
 800b880:	b1c0      	cbz	r0, 800b8b4 <_vfiprintf_r+0x78>
 800b882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b884:	07dc      	lsls	r4, r3, #31
 800b886:	d50e      	bpl.n	800b8a6 <_vfiprintf_r+0x6a>
 800b888:	f04f 30ff 	mov.w	r0, #4294967295
 800b88c:	b01d      	add	sp, #116	; 0x74
 800b88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b892:	4b7b      	ldr	r3, [pc, #492]	; (800ba80 <_vfiprintf_r+0x244>)
 800b894:	429d      	cmp	r5, r3
 800b896:	d101      	bne.n	800b89c <_vfiprintf_r+0x60>
 800b898:	68b5      	ldr	r5, [r6, #8]
 800b89a:	e7df      	b.n	800b85c <_vfiprintf_r+0x20>
 800b89c:	4b79      	ldr	r3, [pc, #484]	; (800ba84 <_vfiprintf_r+0x248>)
 800b89e:	429d      	cmp	r5, r3
 800b8a0:	bf08      	it	eq
 800b8a2:	68f5      	ldreq	r5, [r6, #12]
 800b8a4:	e7da      	b.n	800b85c <_vfiprintf_r+0x20>
 800b8a6:	89ab      	ldrh	r3, [r5, #12]
 800b8a8:	0598      	lsls	r0, r3, #22
 800b8aa:	d4ed      	bmi.n	800b888 <_vfiprintf_r+0x4c>
 800b8ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ae:	f000 fb84 	bl	800bfba <__retarget_lock_release_recursive>
 800b8b2:	e7e9      	b.n	800b888 <_vfiprintf_r+0x4c>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b8:	2320      	movs	r3, #32
 800b8ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8c2:	2330      	movs	r3, #48	; 0x30
 800b8c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba88 <_vfiprintf_r+0x24c>
 800b8c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8cc:	f04f 0901 	mov.w	r9, #1
 800b8d0:	4623      	mov	r3, r4
 800b8d2:	469a      	mov	sl, r3
 800b8d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8d8:	b10a      	cbz	r2, 800b8de <_vfiprintf_r+0xa2>
 800b8da:	2a25      	cmp	r2, #37	; 0x25
 800b8dc:	d1f9      	bne.n	800b8d2 <_vfiprintf_r+0x96>
 800b8de:	ebba 0b04 	subs.w	fp, sl, r4
 800b8e2:	d00b      	beq.n	800b8fc <_vfiprintf_r+0xc0>
 800b8e4:	465b      	mov	r3, fp
 800b8e6:	4622      	mov	r2, r4
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f7ff ff94 	bl	800b818 <__sfputs_r>
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	f000 80aa 	beq.w	800ba4a <_vfiprintf_r+0x20e>
 800b8f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8f8:	445a      	add	r2, fp
 800b8fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b8fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b900:	2b00      	cmp	r3, #0
 800b902:	f000 80a2 	beq.w	800ba4a <_vfiprintf_r+0x20e>
 800b906:	2300      	movs	r3, #0
 800b908:	f04f 32ff 	mov.w	r2, #4294967295
 800b90c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b910:	f10a 0a01 	add.w	sl, sl, #1
 800b914:	9304      	str	r3, [sp, #16]
 800b916:	9307      	str	r3, [sp, #28]
 800b918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b91c:	931a      	str	r3, [sp, #104]	; 0x68
 800b91e:	4654      	mov	r4, sl
 800b920:	2205      	movs	r2, #5
 800b922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b926:	4858      	ldr	r0, [pc, #352]	; (800ba88 <_vfiprintf_r+0x24c>)
 800b928:	f7f4 fce2 	bl	80002f0 <memchr>
 800b92c:	9a04      	ldr	r2, [sp, #16]
 800b92e:	b9d8      	cbnz	r0, 800b968 <_vfiprintf_r+0x12c>
 800b930:	06d1      	lsls	r1, r2, #27
 800b932:	bf44      	itt	mi
 800b934:	2320      	movmi	r3, #32
 800b936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b93a:	0713      	lsls	r3, r2, #28
 800b93c:	bf44      	itt	mi
 800b93e:	232b      	movmi	r3, #43	; 0x2b
 800b940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b944:	f89a 3000 	ldrb.w	r3, [sl]
 800b948:	2b2a      	cmp	r3, #42	; 0x2a
 800b94a:	d015      	beq.n	800b978 <_vfiprintf_r+0x13c>
 800b94c:	9a07      	ldr	r2, [sp, #28]
 800b94e:	4654      	mov	r4, sl
 800b950:	2000      	movs	r0, #0
 800b952:	f04f 0c0a 	mov.w	ip, #10
 800b956:	4621      	mov	r1, r4
 800b958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b95c:	3b30      	subs	r3, #48	; 0x30
 800b95e:	2b09      	cmp	r3, #9
 800b960:	d94e      	bls.n	800ba00 <_vfiprintf_r+0x1c4>
 800b962:	b1b0      	cbz	r0, 800b992 <_vfiprintf_r+0x156>
 800b964:	9207      	str	r2, [sp, #28]
 800b966:	e014      	b.n	800b992 <_vfiprintf_r+0x156>
 800b968:	eba0 0308 	sub.w	r3, r0, r8
 800b96c:	fa09 f303 	lsl.w	r3, r9, r3
 800b970:	4313      	orrs	r3, r2
 800b972:	9304      	str	r3, [sp, #16]
 800b974:	46a2      	mov	sl, r4
 800b976:	e7d2      	b.n	800b91e <_vfiprintf_r+0xe2>
 800b978:	9b03      	ldr	r3, [sp, #12]
 800b97a:	1d19      	adds	r1, r3, #4
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	9103      	str	r1, [sp, #12]
 800b980:	2b00      	cmp	r3, #0
 800b982:	bfbb      	ittet	lt
 800b984:	425b      	neglt	r3, r3
 800b986:	f042 0202 	orrlt.w	r2, r2, #2
 800b98a:	9307      	strge	r3, [sp, #28]
 800b98c:	9307      	strlt	r3, [sp, #28]
 800b98e:	bfb8      	it	lt
 800b990:	9204      	strlt	r2, [sp, #16]
 800b992:	7823      	ldrb	r3, [r4, #0]
 800b994:	2b2e      	cmp	r3, #46	; 0x2e
 800b996:	d10c      	bne.n	800b9b2 <_vfiprintf_r+0x176>
 800b998:	7863      	ldrb	r3, [r4, #1]
 800b99a:	2b2a      	cmp	r3, #42	; 0x2a
 800b99c:	d135      	bne.n	800ba0a <_vfiprintf_r+0x1ce>
 800b99e:	9b03      	ldr	r3, [sp, #12]
 800b9a0:	1d1a      	adds	r2, r3, #4
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	9203      	str	r2, [sp, #12]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	bfb8      	it	lt
 800b9aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9ae:	3402      	adds	r4, #2
 800b9b0:	9305      	str	r3, [sp, #20]
 800b9b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba98 <_vfiprintf_r+0x25c>
 800b9b6:	7821      	ldrb	r1, [r4, #0]
 800b9b8:	2203      	movs	r2, #3
 800b9ba:	4650      	mov	r0, sl
 800b9bc:	f7f4 fc98 	bl	80002f0 <memchr>
 800b9c0:	b140      	cbz	r0, 800b9d4 <_vfiprintf_r+0x198>
 800b9c2:	2340      	movs	r3, #64	; 0x40
 800b9c4:	eba0 000a 	sub.w	r0, r0, sl
 800b9c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b9cc:	9b04      	ldr	r3, [sp, #16]
 800b9ce:	4303      	orrs	r3, r0
 800b9d0:	3401      	adds	r4, #1
 800b9d2:	9304      	str	r3, [sp, #16]
 800b9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d8:	482c      	ldr	r0, [pc, #176]	; (800ba8c <_vfiprintf_r+0x250>)
 800b9da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9de:	2206      	movs	r2, #6
 800b9e0:	f7f4 fc86 	bl	80002f0 <memchr>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	d03f      	beq.n	800ba68 <_vfiprintf_r+0x22c>
 800b9e8:	4b29      	ldr	r3, [pc, #164]	; (800ba90 <_vfiprintf_r+0x254>)
 800b9ea:	bb1b      	cbnz	r3, 800ba34 <_vfiprintf_r+0x1f8>
 800b9ec:	9b03      	ldr	r3, [sp, #12]
 800b9ee:	3307      	adds	r3, #7
 800b9f0:	f023 0307 	bic.w	r3, r3, #7
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	9303      	str	r3, [sp, #12]
 800b9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9fa:	443b      	add	r3, r7
 800b9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9fe:	e767      	b.n	800b8d0 <_vfiprintf_r+0x94>
 800ba00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba04:	460c      	mov	r4, r1
 800ba06:	2001      	movs	r0, #1
 800ba08:	e7a5      	b.n	800b956 <_vfiprintf_r+0x11a>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	3401      	adds	r4, #1
 800ba0e:	9305      	str	r3, [sp, #20]
 800ba10:	4619      	mov	r1, r3
 800ba12:	f04f 0c0a 	mov.w	ip, #10
 800ba16:	4620      	mov	r0, r4
 800ba18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba1c:	3a30      	subs	r2, #48	; 0x30
 800ba1e:	2a09      	cmp	r2, #9
 800ba20:	d903      	bls.n	800ba2a <_vfiprintf_r+0x1ee>
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d0c5      	beq.n	800b9b2 <_vfiprintf_r+0x176>
 800ba26:	9105      	str	r1, [sp, #20]
 800ba28:	e7c3      	b.n	800b9b2 <_vfiprintf_r+0x176>
 800ba2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba2e:	4604      	mov	r4, r0
 800ba30:	2301      	movs	r3, #1
 800ba32:	e7f0      	b.n	800ba16 <_vfiprintf_r+0x1da>
 800ba34:	ab03      	add	r3, sp, #12
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	462a      	mov	r2, r5
 800ba3a:	4b16      	ldr	r3, [pc, #88]	; (800ba94 <_vfiprintf_r+0x258>)
 800ba3c:	a904      	add	r1, sp, #16
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f7fd fe6e 	bl	8009720 <_printf_float>
 800ba44:	4607      	mov	r7, r0
 800ba46:	1c78      	adds	r0, r7, #1
 800ba48:	d1d6      	bne.n	800b9f8 <_vfiprintf_r+0x1bc>
 800ba4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba4c:	07d9      	lsls	r1, r3, #31
 800ba4e:	d405      	bmi.n	800ba5c <_vfiprintf_r+0x220>
 800ba50:	89ab      	ldrh	r3, [r5, #12]
 800ba52:	059a      	lsls	r2, r3, #22
 800ba54:	d402      	bmi.n	800ba5c <_vfiprintf_r+0x220>
 800ba56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba58:	f000 faaf 	bl	800bfba <__retarget_lock_release_recursive>
 800ba5c:	89ab      	ldrh	r3, [r5, #12]
 800ba5e:	065b      	lsls	r3, r3, #25
 800ba60:	f53f af12 	bmi.w	800b888 <_vfiprintf_r+0x4c>
 800ba64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba66:	e711      	b.n	800b88c <_vfiprintf_r+0x50>
 800ba68:	ab03      	add	r3, sp, #12
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	462a      	mov	r2, r5
 800ba6e:	4b09      	ldr	r3, [pc, #36]	; (800ba94 <_vfiprintf_r+0x258>)
 800ba70:	a904      	add	r1, sp, #16
 800ba72:	4630      	mov	r0, r6
 800ba74:	f7fe f8e0 	bl	8009c38 <_printf_i>
 800ba78:	e7e4      	b.n	800ba44 <_vfiprintf_r+0x208>
 800ba7a:	bf00      	nop
 800ba7c:	0800c724 	.word	0x0800c724
 800ba80:	0800c744 	.word	0x0800c744
 800ba84:	0800c704 	.word	0x0800c704
 800ba88:	0800c5ac 	.word	0x0800c5ac
 800ba8c:	0800c5b6 	.word	0x0800c5b6
 800ba90:	08009721 	.word	0x08009721
 800ba94:	0800b819 	.word	0x0800b819
 800ba98:	0800c5b2 	.word	0x0800c5b2

0800ba9c <__swbuf_r>:
 800ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9e:	460e      	mov	r6, r1
 800baa0:	4614      	mov	r4, r2
 800baa2:	4605      	mov	r5, r0
 800baa4:	b118      	cbz	r0, 800baae <__swbuf_r+0x12>
 800baa6:	6983      	ldr	r3, [r0, #24]
 800baa8:	b90b      	cbnz	r3, 800baae <__swbuf_r+0x12>
 800baaa:	f000 f9e7 	bl	800be7c <__sinit>
 800baae:	4b21      	ldr	r3, [pc, #132]	; (800bb34 <__swbuf_r+0x98>)
 800bab0:	429c      	cmp	r4, r3
 800bab2:	d12b      	bne.n	800bb0c <__swbuf_r+0x70>
 800bab4:	686c      	ldr	r4, [r5, #4]
 800bab6:	69a3      	ldr	r3, [r4, #24]
 800bab8:	60a3      	str	r3, [r4, #8]
 800baba:	89a3      	ldrh	r3, [r4, #12]
 800babc:	071a      	lsls	r2, r3, #28
 800babe:	d52f      	bpl.n	800bb20 <__swbuf_r+0x84>
 800bac0:	6923      	ldr	r3, [r4, #16]
 800bac2:	b36b      	cbz	r3, 800bb20 <__swbuf_r+0x84>
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	6820      	ldr	r0, [r4, #0]
 800bac8:	1ac0      	subs	r0, r0, r3
 800baca:	6963      	ldr	r3, [r4, #20]
 800bacc:	b2f6      	uxtb	r6, r6
 800bace:	4283      	cmp	r3, r0
 800bad0:	4637      	mov	r7, r6
 800bad2:	dc04      	bgt.n	800bade <__swbuf_r+0x42>
 800bad4:	4621      	mov	r1, r4
 800bad6:	4628      	mov	r0, r5
 800bad8:	f000 f93c 	bl	800bd54 <_fflush_r>
 800badc:	bb30      	cbnz	r0, 800bb2c <__swbuf_r+0x90>
 800bade:	68a3      	ldr	r3, [r4, #8]
 800bae0:	3b01      	subs	r3, #1
 800bae2:	60a3      	str	r3, [r4, #8]
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	1c5a      	adds	r2, r3, #1
 800bae8:	6022      	str	r2, [r4, #0]
 800baea:	701e      	strb	r6, [r3, #0]
 800baec:	6963      	ldr	r3, [r4, #20]
 800baee:	3001      	adds	r0, #1
 800baf0:	4283      	cmp	r3, r0
 800baf2:	d004      	beq.n	800bafe <__swbuf_r+0x62>
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	07db      	lsls	r3, r3, #31
 800baf8:	d506      	bpl.n	800bb08 <__swbuf_r+0x6c>
 800bafa:	2e0a      	cmp	r6, #10
 800bafc:	d104      	bne.n	800bb08 <__swbuf_r+0x6c>
 800bafe:	4621      	mov	r1, r4
 800bb00:	4628      	mov	r0, r5
 800bb02:	f000 f927 	bl	800bd54 <_fflush_r>
 800bb06:	b988      	cbnz	r0, 800bb2c <__swbuf_r+0x90>
 800bb08:	4638      	mov	r0, r7
 800bb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb0c:	4b0a      	ldr	r3, [pc, #40]	; (800bb38 <__swbuf_r+0x9c>)
 800bb0e:	429c      	cmp	r4, r3
 800bb10:	d101      	bne.n	800bb16 <__swbuf_r+0x7a>
 800bb12:	68ac      	ldr	r4, [r5, #8]
 800bb14:	e7cf      	b.n	800bab6 <__swbuf_r+0x1a>
 800bb16:	4b09      	ldr	r3, [pc, #36]	; (800bb3c <__swbuf_r+0xa0>)
 800bb18:	429c      	cmp	r4, r3
 800bb1a:	bf08      	it	eq
 800bb1c:	68ec      	ldreq	r4, [r5, #12]
 800bb1e:	e7ca      	b.n	800bab6 <__swbuf_r+0x1a>
 800bb20:	4621      	mov	r1, r4
 800bb22:	4628      	mov	r0, r5
 800bb24:	f000 f81a 	bl	800bb5c <__swsetup_r>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	d0cb      	beq.n	800bac4 <__swbuf_r+0x28>
 800bb2c:	f04f 37ff 	mov.w	r7, #4294967295
 800bb30:	e7ea      	b.n	800bb08 <__swbuf_r+0x6c>
 800bb32:	bf00      	nop
 800bb34:	0800c724 	.word	0x0800c724
 800bb38:	0800c744 	.word	0x0800c744
 800bb3c:	0800c704 	.word	0x0800c704

0800bb40 <__ascii_wctomb>:
 800bb40:	b149      	cbz	r1, 800bb56 <__ascii_wctomb+0x16>
 800bb42:	2aff      	cmp	r2, #255	; 0xff
 800bb44:	bf85      	ittet	hi
 800bb46:	238a      	movhi	r3, #138	; 0x8a
 800bb48:	6003      	strhi	r3, [r0, #0]
 800bb4a:	700a      	strbls	r2, [r1, #0]
 800bb4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb50:	bf98      	it	ls
 800bb52:	2001      	movls	r0, #1
 800bb54:	4770      	bx	lr
 800bb56:	4608      	mov	r0, r1
 800bb58:	4770      	bx	lr
	...

0800bb5c <__swsetup_r>:
 800bb5c:	4b32      	ldr	r3, [pc, #200]	; (800bc28 <__swsetup_r+0xcc>)
 800bb5e:	b570      	push	{r4, r5, r6, lr}
 800bb60:	681d      	ldr	r5, [r3, #0]
 800bb62:	4606      	mov	r6, r0
 800bb64:	460c      	mov	r4, r1
 800bb66:	b125      	cbz	r5, 800bb72 <__swsetup_r+0x16>
 800bb68:	69ab      	ldr	r3, [r5, #24]
 800bb6a:	b913      	cbnz	r3, 800bb72 <__swsetup_r+0x16>
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	f000 f985 	bl	800be7c <__sinit>
 800bb72:	4b2e      	ldr	r3, [pc, #184]	; (800bc2c <__swsetup_r+0xd0>)
 800bb74:	429c      	cmp	r4, r3
 800bb76:	d10f      	bne.n	800bb98 <__swsetup_r+0x3c>
 800bb78:	686c      	ldr	r4, [r5, #4]
 800bb7a:	89a3      	ldrh	r3, [r4, #12]
 800bb7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb80:	0719      	lsls	r1, r3, #28
 800bb82:	d42c      	bmi.n	800bbde <__swsetup_r+0x82>
 800bb84:	06dd      	lsls	r5, r3, #27
 800bb86:	d411      	bmi.n	800bbac <__swsetup_r+0x50>
 800bb88:	2309      	movs	r3, #9
 800bb8a:	6033      	str	r3, [r6, #0]
 800bb8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb90:	81a3      	strh	r3, [r4, #12]
 800bb92:	f04f 30ff 	mov.w	r0, #4294967295
 800bb96:	e03e      	b.n	800bc16 <__swsetup_r+0xba>
 800bb98:	4b25      	ldr	r3, [pc, #148]	; (800bc30 <__swsetup_r+0xd4>)
 800bb9a:	429c      	cmp	r4, r3
 800bb9c:	d101      	bne.n	800bba2 <__swsetup_r+0x46>
 800bb9e:	68ac      	ldr	r4, [r5, #8]
 800bba0:	e7eb      	b.n	800bb7a <__swsetup_r+0x1e>
 800bba2:	4b24      	ldr	r3, [pc, #144]	; (800bc34 <__swsetup_r+0xd8>)
 800bba4:	429c      	cmp	r4, r3
 800bba6:	bf08      	it	eq
 800bba8:	68ec      	ldreq	r4, [r5, #12]
 800bbaa:	e7e6      	b.n	800bb7a <__swsetup_r+0x1e>
 800bbac:	0758      	lsls	r0, r3, #29
 800bbae:	d512      	bpl.n	800bbd6 <__swsetup_r+0x7a>
 800bbb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbb2:	b141      	cbz	r1, 800bbc6 <__swsetup_r+0x6a>
 800bbb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbb8:	4299      	cmp	r1, r3
 800bbba:	d002      	beq.n	800bbc2 <__swsetup_r+0x66>
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	f7ff fb31 	bl	800b224 <_free_r>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	6363      	str	r3, [r4, #52]	; 0x34
 800bbc6:	89a3      	ldrh	r3, [r4, #12]
 800bbc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbcc:	81a3      	strh	r3, [r4, #12]
 800bbce:	2300      	movs	r3, #0
 800bbd0:	6063      	str	r3, [r4, #4]
 800bbd2:	6923      	ldr	r3, [r4, #16]
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	f043 0308 	orr.w	r3, r3, #8
 800bbdc:	81a3      	strh	r3, [r4, #12]
 800bbde:	6923      	ldr	r3, [r4, #16]
 800bbe0:	b94b      	cbnz	r3, 800bbf6 <__swsetup_r+0x9a>
 800bbe2:	89a3      	ldrh	r3, [r4, #12]
 800bbe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbec:	d003      	beq.n	800bbf6 <__swsetup_r+0x9a>
 800bbee:	4621      	mov	r1, r4
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f000 fa09 	bl	800c008 <__smakebuf_r>
 800bbf6:	89a0      	ldrh	r0, [r4, #12]
 800bbf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbfc:	f010 0301 	ands.w	r3, r0, #1
 800bc00:	d00a      	beq.n	800bc18 <__swsetup_r+0xbc>
 800bc02:	2300      	movs	r3, #0
 800bc04:	60a3      	str	r3, [r4, #8]
 800bc06:	6963      	ldr	r3, [r4, #20]
 800bc08:	425b      	negs	r3, r3
 800bc0a:	61a3      	str	r3, [r4, #24]
 800bc0c:	6923      	ldr	r3, [r4, #16]
 800bc0e:	b943      	cbnz	r3, 800bc22 <__swsetup_r+0xc6>
 800bc10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc14:	d1ba      	bne.n	800bb8c <__swsetup_r+0x30>
 800bc16:	bd70      	pop	{r4, r5, r6, pc}
 800bc18:	0781      	lsls	r1, r0, #30
 800bc1a:	bf58      	it	pl
 800bc1c:	6963      	ldrpl	r3, [r4, #20]
 800bc1e:	60a3      	str	r3, [r4, #8]
 800bc20:	e7f4      	b.n	800bc0c <__swsetup_r+0xb0>
 800bc22:	2000      	movs	r0, #0
 800bc24:	e7f7      	b.n	800bc16 <__swsetup_r+0xba>
 800bc26:	bf00      	nop
 800bc28:	24000010 	.word	0x24000010
 800bc2c:	0800c724 	.word	0x0800c724
 800bc30:	0800c744 	.word	0x0800c744
 800bc34:	0800c704 	.word	0x0800c704

0800bc38 <abort>:
 800bc38:	b508      	push	{r3, lr}
 800bc3a:	2006      	movs	r0, #6
 800bc3c:	f000 fa54 	bl	800c0e8 <raise>
 800bc40:	2001      	movs	r0, #1
 800bc42:	f7f5 fd29 	bl	8001698 <_exit>
	...

0800bc48 <__sflush_r>:
 800bc48:	898a      	ldrh	r2, [r1, #12]
 800bc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc4e:	4605      	mov	r5, r0
 800bc50:	0710      	lsls	r0, r2, #28
 800bc52:	460c      	mov	r4, r1
 800bc54:	d458      	bmi.n	800bd08 <__sflush_r+0xc0>
 800bc56:	684b      	ldr	r3, [r1, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	dc05      	bgt.n	800bc68 <__sflush_r+0x20>
 800bc5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	dc02      	bgt.n	800bc68 <__sflush_r+0x20>
 800bc62:	2000      	movs	r0, #0
 800bc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc6a:	2e00      	cmp	r6, #0
 800bc6c:	d0f9      	beq.n	800bc62 <__sflush_r+0x1a>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc74:	682f      	ldr	r7, [r5, #0]
 800bc76:	602b      	str	r3, [r5, #0]
 800bc78:	d032      	beq.n	800bce0 <__sflush_r+0x98>
 800bc7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	075a      	lsls	r2, r3, #29
 800bc80:	d505      	bpl.n	800bc8e <__sflush_r+0x46>
 800bc82:	6863      	ldr	r3, [r4, #4]
 800bc84:	1ac0      	subs	r0, r0, r3
 800bc86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc88:	b10b      	cbz	r3, 800bc8e <__sflush_r+0x46>
 800bc8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc8c:	1ac0      	subs	r0, r0, r3
 800bc8e:	2300      	movs	r3, #0
 800bc90:	4602      	mov	r2, r0
 800bc92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc94:	6a21      	ldr	r1, [r4, #32]
 800bc96:	4628      	mov	r0, r5
 800bc98:	47b0      	blx	r6
 800bc9a:	1c43      	adds	r3, r0, #1
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	d106      	bne.n	800bcae <__sflush_r+0x66>
 800bca0:	6829      	ldr	r1, [r5, #0]
 800bca2:	291d      	cmp	r1, #29
 800bca4:	d82c      	bhi.n	800bd00 <__sflush_r+0xb8>
 800bca6:	4a2a      	ldr	r2, [pc, #168]	; (800bd50 <__sflush_r+0x108>)
 800bca8:	40ca      	lsrs	r2, r1
 800bcaa:	07d6      	lsls	r6, r2, #31
 800bcac:	d528      	bpl.n	800bd00 <__sflush_r+0xb8>
 800bcae:	2200      	movs	r2, #0
 800bcb0:	6062      	str	r2, [r4, #4]
 800bcb2:	04d9      	lsls	r1, r3, #19
 800bcb4:	6922      	ldr	r2, [r4, #16]
 800bcb6:	6022      	str	r2, [r4, #0]
 800bcb8:	d504      	bpl.n	800bcc4 <__sflush_r+0x7c>
 800bcba:	1c42      	adds	r2, r0, #1
 800bcbc:	d101      	bne.n	800bcc2 <__sflush_r+0x7a>
 800bcbe:	682b      	ldr	r3, [r5, #0]
 800bcc0:	b903      	cbnz	r3, 800bcc4 <__sflush_r+0x7c>
 800bcc2:	6560      	str	r0, [r4, #84]	; 0x54
 800bcc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcc6:	602f      	str	r7, [r5, #0]
 800bcc8:	2900      	cmp	r1, #0
 800bcca:	d0ca      	beq.n	800bc62 <__sflush_r+0x1a>
 800bccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcd0:	4299      	cmp	r1, r3
 800bcd2:	d002      	beq.n	800bcda <__sflush_r+0x92>
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	f7ff faa5 	bl	800b224 <_free_r>
 800bcda:	2000      	movs	r0, #0
 800bcdc:	6360      	str	r0, [r4, #52]	; 0x34
 800bcde:	e7c1      	b.n	800bc64 <__sflush_r+0x1c>
 800bce0:	6a21      	ldr	r1, [r4, #32]
 800bce2:	2301      	movs	r3, #1
 800bce4:	4628      	mov	r0, r5
 800bce6:	47b0      	blx	r6
 800bce8:	1c41      	adds	r1, r0, #1
 800bcea:	d1c7      	bne.n	800bc7c <__sflush_r+0x34>
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d0c4      	beq.n	800bc7c <__sflush_r+0x34>
 800bcf2:	2b1d      	cmp	r3, #29
 800bcf4:	d001      	beq.n	800bcfa <__sflush_r+0xb2>
 800bcf6:	2b16      	cmp	r3, #22
 800bcf8:	d101      	bne.n	800bcfe <__sflush_r+0xb6>
 800bcfa:	602f      	str	r7, [r5, #0]
 800bcfc:	e7b1      	b.n	800bc62 <__sflush_r+0x1a>
 800bcfe:	89a3      	ldrh	r3, [r4, #12]
 800bd00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd04:	81a3      	strh	r3, [r4, #12]
 800bd06:	e7ad      	b.n	800bc64 <__sflush_r+0x1c>
 800bd08:	690f      	ldr	r7, [r1, #16]
 800bd0a:	2f00      	cmp	r7, #0
 800bd0c:	d0a9      	beq.n	800bc62 <__sflush_r+0x1a>
 800bd0e:	0793      	lsls	r3, r2, #30
 800bd10:	680e      	ldr	r6, [r1, #0]
 800bd12:	bf08      	it	eq
 800bd14:	694b      	ldreq	r3, [r1, #20]
 800bd16:	600f      	str	r7, [r1, #0]
 800bd18:	bf18      	it	ne
 800bd1a:	2300      	movne	r3, #0
 800bd1c:	eba6 0807 	sub.w	r8, r6, r7
 800bd20:	608b      	str	r3, [r1, #8]
 800bd22:	f1b8 0f00 	cmp.w	r8, #0
 800bd26:	dd9c      	ble.n	800bc62 <__sflush_r+0x1a>
 800bd28:	6a21      	ldr	r1, [r4, #32]
 800bd2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd2c:	4643      	mov	r3, r8
 800bd2e:	463a      	mov	r2, r7
 800bd30:	4628      	mov	r0, r5
 800bd32:	47b0      	blx	r6
 800bd34:	2800      	cmp	r0, #0
 800bd36:	dc06      	bgt.n	800bd46 <__sflush_r+0xfe>
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd3e:	81a3      	strh	r3, [r4, #12]
 800bd40:	f04f 30ff 	mov.w	r0, #4294967295
 800bd44:	e78e      	b.n	800bc64 <__sflush_r+0x1c>
 800bd46:	4407      	add	r7, r0
 800bd48:	eba8 0800 	sub.w	r8, r8, r0
 800bd4c:	e7e9      	b.n	800bd22 <__sflush_r+0xda>
 800bd4e:	bf00      	nop
 800bd50:	20400001 	.word	0x20400001

0800bd54 <_fflush_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	690b      	ldr	r3, [r1, #16]
 800bd58:	4605      	mov	r5, r0
 800bd5a:	460c      	mov	r4, r1
 800bd5c:	b913      	cbnz	r3, 800bd64 <_fflush_r+0x10>
 800bd5e:	2500      	movs	r5, #0
 800bd60:	4628      	mov	r0, r5
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	b118      	cbz	r0, 800bd6e <_fflush_r+0x1a>
 800bd66:	6983      	ldr	r3, [r0, #24]
 800bd68:	b90b      	cbnz	r3, 800bd6e <_fflush_r+0x1a>
 800bd6a:	f000 f887 	bl	800be7c <__sinit>
 800bd6e:	4b14      	ldr	r3, [pc, #80]	; (800bdc0 <_fflush_r+0x6c>)
 800bd70:	429c      	cmp	r4, r3
 800bd72:	d11b      	bne.n	800bdac <_fflush_r+0x58>
 800bd74:	686c      	ldr	r4, [r5, #4]
 800bd76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d0ef      	beq.n	800bd5e <_fflush_r+0xa>
 800bd7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd80:	07d0      	lsls	r0, r2, #31
 800bd82:	d404      	bmi.n	800bd8e <_fflush_r+0x3a>
 800bd84:	0599      	lsls	r1, r3, #22
 800bd86:	d402      	bmi.n	800bd8e <_fflush_r+0x3a>
 800bd88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd8a:	f000 f915 	bl	800bfb8 <__retarget_lock_acquire_recursive>
 800bd8e:	4628      	mov	r0, r5
 800bd90:	4621      	mov	r1, r4
 800bd92:	f7ff ff59 	bl	800bc48 <__sflush_r>
 800bd96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd98:	07da      	lsls	r2, r3, #31
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	d4e0      	bmi.n	800bd60 <_fflush_r+0xc>
 800bd9e:	89a3      	ldrh	r3, [r4, #12]
 800bda0:	059b      	lsls	r3, r3, #22
 800bda2:	d4dd      	bmi.n	800bd60 <_fflush_r+0xc>
 800bda4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bda6:	f000 f908 	bl	800bfba <__retarget_lock_release_recursive>
 800bdaa:	e7d9      	b.n	800bd60 <_fflush_r+0xc>
 800bdac:	4b05      	ldr	r3, [pc, #20]	; (800bdc4 <_fflush_r+0x70>)
 800bdae:	429c      	cmp	r4, r3
 800bdb0:	d101      	bne.n	800bdb6 <_fflush_r+0x62>
 800bdb2:	68ac      	ldr	r4, [r5, #8]
 800bdb4:	e7df      	b.n	800bd76 <_fflush_r+0x22>
 800bdb6:	4b04      	ldr	r3, [pc, #16]	; (800bdc8 <_fflush_r+0x74>)
 800bdb8:	429c      	cmp	r4, r3
 800bdba:	bf08      	it	eq
 800bdbc:	68ec      	ldreq	r4, [r5, #12]
 800bdbe:	e7da      	b.n	800bd76 <_fflush_r+0x22>
 800bdc0:	0800c724 	.word	0x0800c724
 800bdc4:	0800c744 	.word	0x0800c744
 800bdc8:	0800c704 	.word	0x0800c704

0800bdcc <std>:
 800bdcc:	2300      	movs	r3, #0
 800bdce:	b510      	push	{r4, lr}
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	e9c0 3300 	strd	r3, r3, [r0]
 800bdd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdda:	6083      	str	r3, [r0, #8]
 800bddc:	8181      	strh	r1, [r0, #12]
 800bdde:	6643      	str	r3, [r0, #100]	; 0x64
 800bde0:	81c2      	strh	r2, [r0, #14]
 800bde2:	6183      	str	r3, [r0, #24]
 800bde4:	4619      	mov	r1, r3
 800bde6:	2208      	movs	r2, #8
 800bde8:	305c      	adds	r0, #92	; 0x5c
 800bdea:	f7fd fbff 	bl	80095ec <memset>
 800bdee:	4b05      	ldr	r3, [pc, #20]	; (800be04 <std+0x38>)
 800bdf0:	6263      	str	r3, [r4, #36]	; 0x24
 800bdf2:	4b05      	ldr	r3, [pc, #20]	; (800be08 <std+0x3c>)
 800bdf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdf6:	4b05      	ldr	r3, [pc, #20]	; (800be0c <std+0x40>)
 800bdf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdfa:	4b05      	ldr	r3, [pc, #20]	; (800be10 <std+0x44>)
 800bdfc:	6224      	str	r4, [r4, #32]
 800bdfe:	6323      	str	r3, [r4, #48]	; 0x30
 800be00:	bd10      	pop	{r4, pc}
 800be02:	bf00      	nop
 800be04:	0800c121 	.word	0x0800c121
 800be08:	0800c143 	.word	0x0800c143
 800be0c:	0800c17b 	.word	0x0800c17b
 800be10:	0800c19f 	.word	0x0800c19f

0800be14 <_cleanup_r>:
 800be14:	4901      	ldr	r1, [pc, #4]	; (800be1c <_cleanup_r+0x8>)
 800be16:	f000 b8af 	b.w	800bf78 <_fwalk_reent>
 800be1a:	bf00      	nop
 800be1c:	0800bd55 	.word	0x0800bd55

0800be20 <__sfmoreglue>:
 800be20:	b570      	push	{r4, r5, r6, lr}
 800be22:	2268      	movs	r2, #104	; 0x68
 800be24:	1e4d      	subs	r5, r1, #1
 800be26:	4355      	muls	r5, r2
 800be28:	460e      	mov	r6, r1
 800be2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be2e:	f7ff fa65 	bl	800b2fc <_malloc_r>
 800be32:	4604      	mov	r4, r0
 800be34:	b140      	cbz	r0, 800be48 <__sfmoreglue+0x28>
 800be36:	2100      	movs	r1, #0
 800be38:	e9c0 1600 	strd	r1, r6, [r0]
 800be3c:	300c      	adds	r0, #12
 800be3e:	60a0      	str	r0, [r4, #8]
 800be40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be44:	f7fd fbd2 	bl	80095ec <memset>
 800be48:	4620      	mov	r0, r4
 800be4a:	bd70      	pop	{r4, r5, r6, pc}

0800be4c <__sfp_lock_acquire>:
 800be4c:	4801      	ldr	r0, [pc, #4]	; (800be54 <__sfp_lock_acquire+0x8>)
 800be4e:	f000 b8b3 	b.w	800bfb8 <__retarget_lock_acquire_recursive>
 800be52:	bf00      	nop
 800be54:	240008ad 	.word	0x240008ad

0800be58 <__sfp_lock_release>:
 800be58:	4801      	ldr	r0, [pc, #4]	; (800be60 <__sfp_lock_release+0x8>)
 800be5a:	f000 b8ae 	b.w	800bfba <__retarget_lock_release_recursive>
 800be5e:	bf00      	nop
 800be60:	240008ad 	.word	0x240008ad

0800be64 <__sinit_lock_acquire>:
 800be64:	4801      	ldr	r0, [pc, #4]	; (800be6c <__sinit_lock_acquire+0x8>)
 800be66:	f000 b8a7 	b.w	800bfb8 <__retarget_lock_acquire_recursive>
 800be6a:	bf00      	nop
 800be6c:	240008ae 	.word	0x240008ae

0800be70 <__sinit_lock_release>:
 800be70:	4801      	ldr	r0, [pc, #4]	; (800be78 <__sinit_lock_release+0x8>)
 800be72:	f000 b8a2 	b.w	800bfba <__retarget_lock_release_recursive>
 800be76:	bf00      	nop
 800be78:	240008ae 	.word	0x240008ae

0800be7c <__sinit>:
 800be7c:	b510      	push	{r4, lr}
 800be7e:	4604      	mov	r4, r0
 800be80:	f7ff fff0 	bl	800be64 <__sinit_lock_acquire>
 800be84:	69a3      	ldr	r3, [r4, #24]
 800be86:	b11b      	cbz	r3, 800be90 <__sinit+0x14>
 800be88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be8c:	f7ff bff0 	b.w	800be70 <__sinit_lock_release>
 800be90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be94:	6523      	str	r3, [r4, #80]	; 0x50
 800be96:	4b13      	ldr	r3, [pc, #76]	; (800bee4 <__sinit+0x68>)
 800be98:	4a13      	ldr	r2, [pc, #76]	; (800bee8 <__sinit+0x6c>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800be9e:	42a3      	cmp	r3, r4
 800bea0:	bf04      	itt	eq
 800bea2:	2301      	moveq	r3, #1
 800bea4:	61a3      	streq	r3, [r4, #24]
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 f820 	bl	800beec <__sfp>
 800beac:	6060      	str	r0, [r4, #4]
 800beae:	4620      	mov	r0, r4
 800beb0:	f000 f81c 	bl	800beec <__sfp>
 800beb4:	60a0      	str	r0, [r4, #8]
 800beb6:	4620      	mov	r0, r4
 800beb8:	f000 f818 	bl	800beec <__sfp>
 800bebc:	2200      	movs	r2, #0
 800bebe:	60e0      	str	r0, [r4, #12]
 800bec0:	2104      	movs	r1, #4
 800bec2:	6860      	ldr	r0, [r4, #4]
 800bec4:	f7ff ff82 	bl	800bdcc <std>
 800bec8:	68a0      	ldr	r0, [r4, #8]
 800beca:	2201      	movs	r2, #1
 800becc:	2109      	movs	r1, #9
 800bece:	f7ff ff7d 	bl	800bdcc <std>
 800bed2:	68e0      	ldr	r0, [r4, #12]
 800bed4:	2202      	movs	r2, #2
 800bed6:	2112      	movs	r1, #18
 800bed8:	f7ff ff78 	bl	800bdcc <std>
 800bedc:	2301      	movs	r3, #1
 800bede:	61a3      	str	r3, [r4, #24]
 800bee0:	e7d2      	b.n	800be88 <__sinit+0xc>
 800bee2:	bf00      	nop
 800bee4:	0800c38c 	.word	0x0800c38c
 800bee8:	0800be15 	.word	0x0800be15

0800beec <__sfp>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	4607      	mov	r7, r0
 800bef0:	f7ff ffac 	bl	800be4c <__sfp_lock_acquire>
 800bef4:	4b1e      	ldr	r3, [pc, #120]	; (800bf70 <__sfp+0x84>)
 800bef6:	681e      	ldr	r6, [r3, #0]
 800bef8:	69b3      	ldr	r3, [r6, #24]
 800befa:	b913      	cbnz	r3, 800bf02 <__sfp+0x16>
 800befc:	4630      	mov	r0, r6
 800befe:	f7ff ffbd 	bl	800be7c <__sinit>
 800bf02:	3648      	adds	r6, #72	; 0x48
 800bf04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	d503      	bpl.n	800bf14 <__sfp+0x28>
 800bf0c:	6833      	ldr	r3, [r6, #0]
 800bf0e:	b30b      	cbz	r3, 800bf54 <__sfp+0x68>
 800bf10:	6836      	ldr	r6, [r6, #0]
 800bf12:	e7f7      	b.n	800bf04 <__sfp+0x18>
 800bf14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf18:	b9d5      	cbnz	r5, 800bf50 <__sfp+0x64>
 800bf1a:	4b16      	ldr	r3, [pc, #88]	; (800bf74 <__sfp+0x88>)
 800bf1c:	60e3      	str	r3, [r4, #12]
 800bf1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf22:	6665      	str	r5, [r4, #100]	; 0x64
 800bf24:	f000 f847 	bl	800bfb6 <__retarget_lock_init_recursive>
 800bf28:	f7ff ff96 	bl	800be58 <__sfp_lock_release>
 800bf2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf34:	6025      	str	r5, [r4, #0]
 800bf36:	61a5      	str	r5, [r4, #24]
 800bf38:	2208      	movs	r2, #8
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf40:	f7fd fb54 	bl	80095ec <memset>
 800bf44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf50:	3468      	adds	r4, #104	; 0x68
 800bf52:	e7d9      	b.n	800bf08 <__sfp+0x1c>
 800bf54:	2104      	movs	r1, #4
 800bf56:	4638      	mov	r0, r7
 800bf58:	f7ff ff62 	bl	800be20 <__sfmoreglue>
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	6030      	str	r0, [r6, #0]
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d1d5      	bne.n	800bf10 <__sfp+0x24>
 800bf64:	f7ff ff78 	bl	800be58 <__sfp_lock_release>
 800bf68:	230c      	movs	r3, #12
 800bf6a:	603b      	str	r3, [r7, #0]
 800bf6c:	e7ee      	b.n	800bf4c <__sfp+0x60>
 800bf6e:	bf00      	nop
 800bf70:	0800c38c 	.word	0x0800c38c
 800bf74:	ffff0001 	.word	0xffff0001

0800bf78 <_fwalk_reent>:
 800bf78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf7c:	4606      	mov	r6, r0
 800bf7e:	4688      	mov	r8, r1
 800bf80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf84:	2700      	movs	r7, #0
 800bf86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf8a:	f1b9 0901 	subs.w	r9, r9, #1
 800bf8e:	d505      	bpl.n	800bf9c <_fwalk_reent+0x24>
 800bf90:	6824      	ldr	r4, [r4, #0]
 800bf92:	2c00      	cmp	r4, #0
 800bf94:	d1f7      	bne.n	800bf86 <_fwalk_reent+0xe>
 800bf96:	4638      	mov	r0, r7
 800bf98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf9c:	89ab      	ldrh	r3, [r5, #12]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d907      	bls.n	800bfb2 <_fwalk_reent+0x3a>
 800bfa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	d003      	beq.n	800bfb2 <_fwalk_reent+0x3a>
 800bfaa:	4629      	mov	r1, r5
 800bfac:	4630      	mov	r0, r6
 800bfae:	47c0      	blx	r8
 800bfb0:	4307      	orrs	r7, r0
 800bfb2:	3568      	adds	r5, #104	; 0x68
 800bfb4:	e7e9      	b.n	800bf8a <_fwalk_reent+0x12>

0800bfb6 <__retarget_lock_init_recursive>:
 800bfb6:	4770      	bx	lr

0800bfb8 <__retarget_lock_acquire_recursive>:
 800bfb8:	4770      	bx	lr

0800bfba <__retarget_lock_release_recursive>:
 800bfba:	4770      	bx	lr

0800bfbc <__swhatbuf_r>:
 800bfbc:	b570      	push	{r4, r5, r6, lr}
 800bfbe:	460e      	mov	r6, r1
 800bfc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc4:	2900      	cmp	r1, #0
 800bfc6:	b096      	sub	sp, #88	; 0x58
 800bfc8:	4614      	mov	r4, r2
 800bfca:	461d      	mov	r5, r3
 800bfcc:	da08      	bge.n	800bfe0 <__swhatbuf_r+0x24>
 800bfce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	602a      	str	r2, [r5, #0]
 800bfd6:	061a      	lsls	r2, r3, #24
 800bfd8:	d410      	bmi.n	800bffc <__swhatbuf_r+0x40>
 800bfda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfde:	e00e      	b.n	800bffe <__swhatbuf_r+0x42>
 800bfe0:	466a      	mov	r2, sp
 800bfe2:	f000 f903 	bl	800c1ec <_fstat_r>
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	dbf1      	blt.n	800bfce <__swhatbuf_r+0x12>
 800bfea:	9a01      	ldr	r2, [sp, #4]
 800bfec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bff0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bff4:	425a      	negs	r2, r3
 800bff6:	415a      	adcs	r2, r3
 800bff8:	602a      	str	r2, [r5, #0]
 800bffa:	e7ee      	b.n	800bfda <__swhatbuf_r+0x1e>
 800bffc:	2340      	movs	r3, #64	; 0x40
 800bffe:	2000      	movs	r0, #0
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	b016      	add	sp, #88	; 0x58
 800c004:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c008 <__smakebuf_r>:
 800c008:	898b      	ldrh	r3, [r1, #12]
 800c00a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c00c:	079d      	lsls	r5, r3, #30
 800c00e:	4606      	mov	r6, r0
 800c010:	460c      	mov	r4, r1
 800c012:	d507      	bpl.n	800c024 <__smakebuf_r+0x1c>
 800c014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	6123      	str	r3, [r4, #16]
 800c01c:	2301      	movs	r3, #1
 800c01e:	6163      	str	r3, [r4, #20]
 800c020:	b002      	add	sp, #8
 800c022:	bd70      	pop	{r4, r5, r6, pc}
 800c024:	ab01      	add	r3, sp, #4
 800c026:	466a      	mov	r2, sp
 800c028:	f7ff ffc8 	bl	800bfbc <__swhatbuf_r>
 800c02c:	9900      	ldr	r1, [sp, #0]
 800c02e:	4605      	mov	r5, r0
 800c030:	4630      	mov	r0, r6
 800c032:	f7ff f963 	bl	800b2fc <_malloc_r>
 800c036:	b948      	cbnz	r0, 800c04c <__smakebuf_r+0x44>
 800c038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c03c:	059a      	lsls	r2, r3, #22
 800c03e:	d4ef      	bmi.n	800c020 <__smakebuf_r+0x18>
 800c040:	f023 0303 	bic.w	r3, r3, #3
 800c044:	f043 0302 	orr.w	r3, r3, #2
 800c048:	81a3      	strh	r3, [r4, #12]
 800c04a:	e7e3      	b.n	800c014 <__smakebuf_r+0xc>
 800c04c:	4b0d      	ldr	r3, [pc, #52]	; (800c084 <__smakebuf_r+0x7c>)
 800c04e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c050:	89a3      	ldrh	r3, [r4, #12]
 800c052:	6020      	str	r0, [r4, #0]
 800c054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c058:	81a3      	strh	r3, [r4, #12]
 800c05a:	9b00      	ldr	r3, [sp, #0]
 800c05c:	6163      	str	r3, [r4, #20]
 800c05e:	9b01      	ldr	r3, [sp, #4]
 800c060:	6120      	str	r0, [r4, #16]
 800c062:	b15b      	cbz	r3, 800c07c <__smakebuf_r+0x74>
 800c064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c068:	4630      	mov	r0, r6
 800c06a:	f000 f8d1 	bl	800c210 <_isatty_r>
 800c06e:	b128      	cbz	r0, 800c07c <__smakebuf_r+0x74>
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	f023 0303 	bic.w	r3, r3, #3
 800c076:	f043 0301 	orr.w	r3, r3, #1
 800c07a:	81a3      	strh	r3, [r4, #12]
 800c07c:	89a0      	ldrh	r0, [r4, #12]
 800c07e:	4305      	orrs	r5, r0
 800c080:	81a5      	strh	r5, [r4, #12]
 800c082:	e7cd      	b.n	800c020 <__smakebuf_r+0x18>
 800c084:	0800be15 	.word	0x0800be15

0800c088 <_malloc_usable_size_r>:
 800c088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c08c:	1f18      	subs	r0, r3, #4
 800c08e:	2b00      	cmp	r3, #0
 800c090:	bfbc      	itt	lt
 800c092:	580b      	ldrlt	r3, [r1, r0]
 800c094:	18c0      	addlt	r0, r0, r3
 800c096:	4770      	bx	lr

0800c098 <_raise_r>:
 800c098:	291f      	cmp	r1, #31
 800c09a:	b538      	push	{r3, r4, r5, lr}
 800c09c:	4604      	mov	r4, r0
 800c09e:	460d      	mov	r5, r1
 800c0a0:	d904      	bls.n	800c0ac <_raise_r+0x14>
 800c0a2:	2316      	movs	r3, #22
 800c0a4:	6003      	str	r3, [r0, #0]
 800c0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0aa:	bd38      	pop	{r3, r4, r5, pc}
 800c0ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0ae:	b112      	cbz	r2, 800c0b6 <_raise_r+0x1e>
 800c0b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0b4:	b94b      	cbnz	r3, 800c0ca <_raise_r+0x32>
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f000 f830 	bl	800c11c <_getpid_r>
 800c0bc:	462a      	mov	r2, r5
 800c0be:	4601      	mov	r1, r0
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0c6:	f000 b817 	b.w	800c0f8 <_kill_r>
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d00a      	beq.n	800c0e4 <_raise_r+0x4c>
 800c0ce:	1c59      	adds	r1, r3, #1
 800c0d0:	d103      	bne.n	800c0da <_raise_r+0x42>
 800c0d2:	2316      	movs	r3, #22
 800c0d4:	6003      	str	r3, [r0, #0]
 800c0d6:	2001      	movs	r0, #1
 800c0d8:	e7e7      	b.n	800c0aa <_raise_r+0x12>
 800c0da:	2400      	movs	r4, #0
 800c0dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	4798      	blx	r3
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	e7e0      	b.n	800c0aa <_raise_r+0x12>

0800c0e8 <raise>:
 800c0e8:	4b02      	ldr	r3, [pc, #8]	; (800c0f4 <raise+0xc>)
 800c0ea:	4601      	mov	r1, r0
 800c0ec:	6818      	ldr	r0, [r3, #0]
 800c0ee:	f7ff bfd3 	b.w	800c098 <_raise_r>
 800c0f2:	bf00      	nop
 800c0f4:	24000010 	.word	0x24000010

0800c0f8 <_kill_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4d07      	ldr	r5, [pc, #28]	; (800c118 <_kill_r+0x20>)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	4604      	mov	r4, r0
 800c100:	4608      	mov	r0, r1
 800c102:	4611      	mov	r1, r2
 800c104:	602b      	str	r3, [r5, #0]
 800c106:	f7f5 fab7 	bl	8001678 <_kill>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	d102      	bne.n	800c114 <_kill_r+0x1c>
 800c10e:	682b      	ldr	r3, [r5, #0]
 800c110:	b103      	cbz	r3, 800c114 <_kill_r+0x1c>
 800c112:	6023      	str	r3, [r4, #0]
 800c114:	bd38      	pop	{r3, r4, r5, pc}
 800c116:	bf00      	nop
 800c118:	240008a8 	.word	0x240008a8

0800c11c <_getpid_r>:
 800c11c:	f7f5 baa4 	b.w	8001668 <_getpid>

0800c120 <__sread>:
 800c120:	b510      	push	{r4, lr}
 800c122:	460c      	mov	r4, r1
 800c124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c128:	f000 f894 	bl	800c254 <_read_r>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	bfab      	itete	ge
 800c130:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c132:	89a3      	ldrhlt	r3, [r4, #12]
 800c134:	181b      	addge	r3, r3, r0
 800c136:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c13a:	bfac      	ite	ge
 800c13c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c13e:	81a3      	strhlt	r3, [r4, #12]
 800c140:	bd10      	pop	{r4, pc}

0800c142 <__swrite>:
 800c142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c146:	461f      	mov	r7, r3
 800c148:	898b      	ldrh	r3, [r1, #12]
 800c14a:	05db      	lsls	r3, r3, #23
 800c14c:	4605      	mov	r5, r0
 800c14e:	460c      	mov	r4, r1
 800c150:	4616      	mov	r6, r2
 800c152:	d505      	bpl.n	800c160 <__swrite+0x1e>
 800c154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c158:	2302      	movs	r3, #2
 800c15a:	2200      	movs	r2, #0
 800c15c:	f000 f868 	bl	800c230 <_lseek_r>
 800c160:	89a3      	ldrh	r3, [r4, #12]
 800c162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c166:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	4632      	mov	r2, r6
 800c16e:	463b      	mov	r3, r7
 800c170:	4628      	mov	r0, r5
 800c172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c176:	f000 b817 	b.w	800c1a8 <_write_r>

0800c17a <__sseek>:
 800c17a:	b510      	push	{r4, lr}
 800c17c:	460c      	mov	r4, r1
 800c17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c182:	f000 f855 	bl	800c230 <_lseek_r>
 800c186:	1c43      	adds	r3, r0, #1
 800c188:	89a3      	ldrh	r3, [r4, #12]
 800c18a:	bf15      	itete	ne
 800c18c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c18e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c192:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c196:	81a3      	strheq	r3, [r4, #12]
 800c198:	bf18      	it	ne
 800c19a:	81a3      	strhne	r3, [r4, #12]
 800c19c:	bd10      	pop	{r4, pc}

0800c19e <__sclose>:
 800c19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1a2:	f000 b813 	b.w	800c1cc <_close_r>
	...

0800c1a8 <_write_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4d07      	ldr	r5, [pc, #28]	; (800c1c8 <_write_r+0x20>)
 800c1ac:	4604      	mov	r4, r0
 800c1ae:	4608      	mov	r0, r1
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	602a      	str	r2, [r5, #0]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	f7f5 fa95 	bl	80016e6 <_write>
 800c1bc:	1c43      	adds	r3, r0, #1
 800c1be:	d102      	bne.n	800c1c6 <_write_r+0x1e>
 800c1c0:	682b      	ldr	r3, [r5, #0]
 800c1c2:	b103      	cbz	r3, 800c1c6 <_write_r+0x1e>
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	bd38      	pop	{r3, r4, r5, pc}
 800c1c8:	240008a8 	.word	0x240008a8

0800c1cc <_close_r>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	4d06      	ldr	r5, [pc, #24]	; (800c1e8 <_close_r+0x1c>)
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	4608      	mov	r0, r1
 800c1d6:	602b      	str	r3, [r5, #0]
 800c1d8:	f7f5 faa1 	bl	800171e <_close>
 800c1dc:	1c43      	adds	r3, r0, #1
 800c1de:	d102      	bne.n	800c1e6 <_close_r+0x1a>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	b103      	cbz	r3, 800c1e6 <_close_r+0x1a>
 800c1e4:	6023      	str	r3, [r4, #0]
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}
 800c1e8:	240008a8 	.word	0x240008a8

0800c1ec <_fstat_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4d07      	ldr	r5, [pc, #28]	; (800c20c <_fstat_r+0x20>)
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	4608      	mov	r0, r1
 800c1f6:	4611      	mov	r1, r2
 800c1f8:	602b      	str	r3, [r5, #0]
 800c1fa:	f7f5 fa9c 	bl	8001736 <_fstat>
 800c1fe:	1c43      	adds	r3, r0, #1
 800c200:	d102      	bne.n	800c208 <_fstat_r+0x1c>
 800c202:	682b      	ldr	r3, [r5, #0]
 800c204:	b103      	cbz	r3, 800c208 <_fstat_r+0x1c>
 800c206:	6023      	str	r3, [r4, #0]
 800c208:	bd38      	pop	{r3, r4, r5, pc}
 800c20a:	bf00      	nop
 800c20c:	240008a8 	.word	0x240008a8

0800c210 <_isatty_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4d06      	ldr	r5, [pc, #24]	; (800c22c <_isatty_r+0x1c>)
 800c214:	2300      	movs	r3, #0
 800c216:	4604      	mov	r4, r0
 800c218:	4608      	mov	r0, r1
 800c21a:	602b      	str	r3, [r5, #0]
 800c21c:	f7f5 fa9b 	bl	8001756 <_isatty>
 800c220:	1c43      	adds	r3, r0, #1
 800c222:	d102      	bne.n	800c22a <_isatty_r+0x1a>
 800c224:	682b      	ldr	r3, [r5, #0]
 800c226:	b103      	cbz	r3, 800c22a <_isatty_r+0x1a>
 800c228:	6023      	str	r3, [r4, #0]
 800c22a:	bd38      	pop	{r3, r4, r5, pc}
 800c22c:	240008a8 	.word	0x240008a8

0800c230 <_lseek_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4d07      	ldr	r5, [pc, #28]	; (800c250 <_lseek_r+0x20>)
 800c234:	4604      	mov	r4, r0
 800c236:	4608      	mov	r0, r1
 800c238:	4611      	mov	r1, r2
 800c23a:	2200      	movs	r2, #0
 800c23c:	602a      	str	r2, [r5, #0]
 800c23e:	461a      	mov	r2, r3
 800c240:	f7f5 fa94 	bl	800176c <_lseek>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	d102      	bne.n	800c24e <_lseek_r+0x1e>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	b103      	cbz	r3, 800c24e <_lseek_r+0x1e>
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	240008a8 	.word	0x240008a8

0800c254 <_read_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4d07      	ldr	r5, [pc, #28]	; (800c274 <_read_r+0x20>)
 800c258:	4604      	mov	r4, r0
 800c25a:	4608      	mov	r0, r1
 800c25c:	4611      	mov	r1, r2
 800c25e:	2200      	movs	r2, #0
 800c260:	602a      	str	r2, [r5, #0]
 800c262:	461a      	mov	r2, r3
 800c264:	f7f5 fa22 	bl	80016ac <_read>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_read_r+0x1e>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_read_r+0x1e>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	240008a8 	.word	0x240008a8

0800c278 <_init>:
 800c278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27a:	bf00      	nop
 800c27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27e:	bc08      	pop	{r3}
 800c280:	469e      	mov	lr, r3
 800c282:	4770      	bx	lr

0800c284 <_fini>:
 800c284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c286:	bf00      	nop
 800c288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c28a:	bc08      	pop	{r3}
 800c28c:	469e      	mov	lr, r3
 800c28e:	4770      	bx	lr
