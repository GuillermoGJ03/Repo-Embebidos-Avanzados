
Ejercicio_extra_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bef0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800c190  0800c190  0001c190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c664  0800c664  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c664  0800c664  0001c664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c66c  0800c66c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c66c  0800c66c  0001c66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c670  0800c670  0001c670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800c674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  240001e0  0800c854  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240008b0  0800c854  000208b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f2fb  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f0  00000000  00000000  0003f509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00042a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  00044240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c294  00000000  00000000  00045938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000205fc  00000000  00000000  00081bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018970b  00000000  00000000  000a21c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022b8d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007860  00000000  00000000  0022b924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c178 	.word	0x0800c178

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800c178 	.word	0x0800c178

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007cc:	bf00      	nop
 80007ce:	4b43      	ldr	r3, [pc, #268]	; (80008dc <main+0x11c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x24>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dcf4      	bgt.n	80007ce <main+0xe>
  if ( timeout < 0 )
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da01      	bge.n	80007ee <main+0x2e>
  {
  Error_Handler();
 80007ea:	f000 fd09 	bl	8001200 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 ffc7 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_I2C_Init(&hi2c4);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f885 	bl	8000900 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b39      	ldr	r3, [pc, #228]	; (80008dc <main+0x11c>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a37      	ldr	r2, [pc, #220]	; (80008dc <main+0x11c>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <main+0x11c>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f002 f8b3 	bl	8002980 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f002 f8c9 	bl	80029b4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000828:	bf00      	nop
 800082a:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <main+0x11c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x80>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6a>
if ( timeout < 0 )
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8a>
{
Error_Handler();
 8000846:	f000 fcdb 	bl	8001200 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 f9e9 	bl	8000c20 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084e:	f000 f969 	bl	8000b24 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000852:	f000 f9b3 	bl	8000bbc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 8000856:	f000 f8d7 	bl	8000a08 <MX_I2C4_Init>
  MX_TIM2_Init();
 800085a:	f000 f915 	bl	8000a88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, Rx_data, 10);
 800085e:	220a      	movs	r2, #10
 8000860:	491f      	ldr	r1, [pc, #124]	; (80008e0 <main+0x120>)
 8000862:	4820      	ldr	r0, [pc, #128]	; (80008e4 <main+0x124>)
 8000864:	f006 f88e 	bl	8006984 <HAL_UART_Receive_IT>

  // Revisión de conexión del dispositivo
  status = HAL_I2C_IsDeviceReady(&hi2c4, MPU6050_ADDR, 1, 3000);
 8000868:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800086c:	2201      	movs	r2, #1
 800086e:	21d0      	movs	r1, #208	; 0xd0
 8000870:	481d      	ldr	r0, [pc, #116]	; (80008e8 <main+0x128>)
 8000872:	f002 fb71 	bl	8002f58 <HAL_I2C_IsDeviceReady>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <main+0x12c>)
 800087c:	701a      	strb	r2, [r3, #0]
  if (status == HAL_OK) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <main+0x12c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d105      	bne.n	8000892 <main+0xd2>
 8000886:	2201      	movs	r2, #1
 8000888:	2101      	movs	r1, #1
 800088a:	4819      	ldr	r0, [pc, #100]	; (80008f0 <main+0x130>)
 800088c:	f002 f85e 	bl	800294c <HAL_GPIO_WritePin>
 8000890:	e005      	b.n	800089e <main+0xde>
  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000898:	4815      	ldr	r0, [pc, #84]	; (80008f0 <main+0x130>)
 800089a:	f002 f857 	bl	800294c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800089e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a2:	f000 ffff 	bl	80018a4 <HAL_Delay>
  // Inicialización del MPU6050
  MPU6050_init();
 80008a6:	f000 fa3d 	bl	8000d24 <MPU6050_init>

  // Prueba de comunicación UART
  uart_buf_len = sprintf(uart_buf, "MPU6050 test\r\n");
 80008aa:	4912      	ldr	r1, [pc, #72]	; (80008f4 <main+0x134>)
 80008ac:	4812      	ldr	r0, [pc, #72]	; (80008f8 <main+0x138>)
 80008ae:	f009 fa69 	bl	8009d84 <siprintf>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <main+0x13c>)
 80008b8:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <main+0x13c>)
 80008bc:	881a      	ldrh	r2, [r3, #0]
 80008be:	2364      	movs	r3, #100	; 0x64
 80008c0:	490d      	ldr	r1, [pc, #52]	; (80008f8 <main+0x138>)
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <main+0x124>)
 80008c4:	f005 ffc8 	bl	8006858 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_read_acc();
 80008c8:	f000 faa6 	bl	8000e18 <MPU6050_read_acc>
	  MPU6050_read_gyro();
 80008cc:	f000 fb28 	bl	8000f20 <MPU6050_read_gyro>

	  HAL_Delay(500);
 80008d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d4:	f000 ffe6 	bl	80018a4 <HAL_Delay>
	  MPU6050_read_acc();
 80008d8:	e7f6      	b.n	80008c8 <main+0x108>
 80008da:	bf00      	nop
 80008dc:	58024400 	.word	0x58024400
 80008e0:	24000890 	.word	0x24000890
 80008e4:	24000294 	.word	0x24000294
 80008e8:	240001fc 	.word	0x240001fc
 80008ec:	24000858 	.word	0x24000858
 80008f0:	58020400 	.word	0x58020400
 80008f4:	0800c190 	.word	0x0800c190
 80008f8:	2400085c 	.word	0x2400085c
 80008fc:	2400088e 	.word	0x2400088e

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b09c      	sub	sp, #112	; 0x70
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	224c      	movs	r2, #76	; 0x4c
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f008 fdee 	bl	80094f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2220      	movs	r2, #32
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f008 fde8 	bl	80094f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000920:	2004      	movs	r0, #4
 8000922:	f003 f8a7 	bl	8003a74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b34      	ldr	r3, [pc, #208]	; (80009fc <SystemClock_Config+0xfc>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a33      	ldr	r2, [pc, #204]	; (80009fc <SystemClock_Config+0xfc>)
 8000930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <SystemClock_Config+0xfc>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <SystemClock_Config+0x100>)
 8000942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000944:	4a2e      	ldr	r2, [pc, #184]	; (8000a00 <SystemClock_Config+0x100>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800094c:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <SystemClock_Config+0x100>)
 800094e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000958:	bf00      	nop
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <SystemClock_Config+0xfc>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000966:	d1f8      	bne.n	800095a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <SystemClock_Config+0x104>)
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	f023 0303 	bic.w	r3, r3, #3
 8000970:	4a24      	ldr	r2, [pc, #144]	; (8000a04 <SystemClock_Config+0x104>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000978:	2301      	movs	r3, #1
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800097c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000982:	2302      	movs	r3, #2
 8000984:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000986:	2302      	movs	r3, #2
 8000988:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800098a:	2301      	movs	r3, #1
 800098c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800098e:	2378      	movs	r3, #120	; 0x78
 8000990:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800099e:	230c      	movs	r3, #12
 80009a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4618      	mov	r0, r3
 80009b0:	f003 f8ca 	bl	8003b48 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009ba:	f000 fc21 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	233f      	movs	r3, #63	; 0x3f
 80009c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2303      	movs	r3, #3
 80009c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009ca:	2308      	movs	r3, #8
 80009cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009ce:	2340      	movs	r3, #64	; 0x40
 80009d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009d2:	2340      	movs	r3, #64	; 0x40
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009dc:	2340      	movs	r3, #64	; 0x40
 80009de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2104      	movs	r1, #4
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 fcdd 	bl	80043a4 <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80009f0:	f000 fc06 	bl	8001200 <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3770      	adds	r7, #112	; 0x70
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	58024800 	.word	0x58024800
 8000a00:	58000400 	.word	0x58000400
 8000a04:	58024400 	.word	0x58024400

08000a08 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_I2C4_Init+0x74>)
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <MX_I2C4_Init+0x78>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_I2C4_Init+0x74>)
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <MX_I2C4_Init+0x7c>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_I2C4_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_I2C4_Init+0x74>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_I2C4_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_I2C4_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_I2C4_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_I2C4_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_I2C4_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <MX_I2C4_Init+0x74>)
 8000a44:	f001 ffca 	bl	80029dc <HAL_I2C_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a4e:	f000 fbd7 	bl	8001200 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <MX_I2C4_Init+0x74>)
 8000a56:	f002 fe2d 	bl	80036b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a60:	f000 fbce 	bl	8001200 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_I2C4_Init+0x74>)
 8000a68:	f002 fe6f 	bl	800374a <HAL_I2CEx_ConfigDigitalFilter>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a72:	f000 fbc5 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	240001fc 	.word	0x240001fc
 8000a80:	58001c00 	.word	0x58001c00
 8000a84:	307075b1 	.word	0x307075b1

08000a88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000aa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000ab0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ab4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ac2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ad0:	4813      	ldr	r0, [pc, #76]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000ad2:	f005 fb5b 	bl	800618c <HAL_TIM_Base_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000adc:	f000 fb90 	bl	8001200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000aee:	f005 fba5 	bl	800623c <HAL_TIM_ConfigClockSource>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000af8:	f000 fb82 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000b0a:	f005 fdc7 	bl	800669c <HAL_TIMEx_MasterConfigSynchronization>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b14:	f000 fb74 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	24000248 	.word	0x24000248

08000b24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <MX_USART3_UART_Init+0x94>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b6e:	f005 fe23 	bl	80067b8 <HAL_UART_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b78:	f000 fb42 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b80:	f008 f8b7 	bl	8008cf2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b8a:	f000 fb39 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b92:	f008 f8ec 	bl	8008d6e <HAL_UARTEx_SetRxFifoThreshold>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b9c:	f000 fb30 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000ba2:	f008 f86d 	bl	8008c80 <HAL_UARTEx_DisableFifoMode>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bac:	f000 fb28 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	24000294 	.word	0x24000294
 8000bb8:	40004800 	.word	0x40004800

08000bbc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc8:	2209      	movs	r2, #9
 8000bca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bce:	2202      	movs	r2, #2
 8000bd0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bda:	2202      	movs	r2, #2
 8000bdc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c04:	f002 fded 	bl	80037e2 <HAL_PCD_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c0e:	f000 faf7 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	24000324 	.word	0x24000324
 8000c1c:	40080000 	.word	0x40080000

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	4a37      	ldr	r2, [pc, #220]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c46:	4b35      	ldr	r3, [pc, #212]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c54:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	4a30      	ldr	r2, [pc, #192]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c64:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4a28      	ldr	r2, [pc, #160]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000c98:	f043 0320 	orr.w	r3, r3, #32
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_GPIO_Init+0xfc>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000cf2:	f001 fe2b 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cf6:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d00:	2302      	movs	r3, #2
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d04:	2302      	movs	r3, #2
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000d10:	f001 fc6c 	bl	80025ec <HAL_GPIO_Init>

}
 8000d14:	bf00      	nop
 8000d16:	3730      	adds	r7, #48	; 0x30
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58024400 	.word	0x58024400
 8000d20:	58020400 	.word	0x58020400

08000d24 <MPU6050_init>:

/* USER CODE BEGIN 4 */
void MPU6050_init(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 3000);
 8000d2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d2e:	9302      	str	r3, [sp, #8]
 8000d30:	2301      	movs	r3, #1
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <MPU6050_init+0xd4>)
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	2275      	movs	r2, #117	; 0x75
 8000d3c:	21d0      	movs	r1, #208	; 0xd0
 8000d3e:	482f      	ldr	r0, [pc, #188]	; (8000dfc <MPU6050_init+0xd8>)
 8000d40:	f001 fff0 	bl	8002d24 <HAL_I2C_Mem_Read>
	uart_buf_len = sprintf(uart_buf, "Dirección: %u \r\n", check);
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <MPU6050_init+0xd4>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	492d      	ldr	r1, [pc, #180]	; (8000e00 <MPU6050_init+0xdc>)
 8000d4c:	482d      	ldr	r0, [pc, #180]	; (8000e04 <MPU6050_init+0xe0>)
 8000d4e:	f009 f819 	bl	8009d84 <siprintf>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <MPU6050_init+0xe4>)
 8000d58:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <MPU6050_init+0xe4>)
 8000d5c:	881a      	ldrh	r2, [r3, #0]
 8000d5e:	2364      	movs	r3, #100	; 0x64
 8000d60:	4928      	ldr	r1, [pc, #160]	; (8000e04 <MPU6050_init+0xe0>)
 8000d62:	482a      	ldr	r0, [pc, #168]	; (8000e0c <MPU6050_init+0xe8>)
 8000d64:	f005 fd78 	bl	8006858 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6c:	f000 fd9a 	bl	80018a4 <HAL_Delay>

	data = 0x00;
 8000d70:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <MPU6050_init+0xec>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 3000);
 8000d76:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d7a:	9302      	str	r3, [sp, #8]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <MPU6050_init+0xec>)
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	226b      	movs	r2, #107	; 0x6b
 8000d88:	21d0      	movs	r1, #208	; 0xd0
 8000d8a:	481c      	ldr	r0, [pc, #112]	; (8000dfc <MPU6050_init+0xd8>)
 8000d8c:	f001 feb6 	bl	8002afc <HAL_I2C_Mem_Write>
	data = 0b10000111;
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <MPU6050_init+0xec>)
 8000d92:	2287      	movs	r2, #135	; 0x87
 8000d94:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, SMPLRT_DIV, 1, &data, 1, 3000);
 8000d96:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d9a:	9302      	str	r3, [sp, #8]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MPU6050_init+0xec>)
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	2301      	movs	r3, #1
 8000da6:	2219      	movs	r2, #25
 8000da8:	21d0      	movs	r1, #208	; 0xd0
 8000daa:	4814      	ldr	r0, [pc, #80]	; (8000dfc <MPU6050_init+0xd8>)
 8000dac:	f001 fea6 	bl	8002afc <HAL_I2C_Mem_Write>
	data = 0x00;
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MPU6050_init+0xec>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, GYRO_CONFIG, 1, &data, 1, 3000);
 8000db6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MPU6050_init+0xec>)
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	221b      	movs	r2, #27
 8000dc8:	21d0      	movs	r1, #208	; 0xd0
 8000dca:	480c      	ldr	r0, [pc, #48]	; (8000dfc <MPU6050_init+0xd8>)
 8000dcc:	f001 fe96 	bl	8002afc <HAL_I2C_Mem_Write>
	data = 0x00;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MPU6050_init+0xec>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, ACCEL_CONFIG, 1, &data, 1, 3000);
 8000dd6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000dda:	9302      	str	r3, [sp, #8]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MPU6050_init+0xec>)
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2301      	movs	r3, #1
 8000de6:	221c      	movs	r2, #28
 8000de8:	21d0      	movs	r1, #208	; 0xd0
 8000dea:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MPU6050_init+0xd8>)
 8000dec:	f001 fe86 	bl	8002afc <HAL_I2C_Mem_Write>

}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	24000830 	.word	0x24000830
 8000dfc:	240001fc 	.word	0x240001fc
 8000e00:	0800c1a0 	.word	0x0800c1a0
 8000e04:	2400085c 	.word	0x2400085c
 8000e08:	2400088e 	.word	0x2400088e
 8000e0c:	24000294 	.word	0x24000294
 8000e10:	24000831 	.word	0x24000831
 8000e14:	00000000 	.word	0x00000000

08000e18 <MPU6050_read_acc>:

void MPU6050_read_acc(void){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af04      	add	r7, sp, #16
	uint8_t read_acc[6];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, ACCEL_XOUT_H, 1, read_acc, 6, 3000);
 8000e1e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	2306      	movs	r3, #6
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	463b      	mov	r3, r7
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	223b      	movs	r2, #59	; 0x3b
 8000e30:	21d0      	movs	r1, #208	; 0xd0
 8000e32:	4833      	ldr	r0, [pc, #204]	; (8000f00 <MPU6050_read_acc+0xe8>)
 8000e34:	f001 ff76 	bl	8002d24 <HAL_I2C_Mem_Read>

	acc_X_read = (int16_t)(read_acc[0] << 8 | read_acc[1]);
 8000e38:	783b      	ldrb	r3, [r7, #0]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	787b      	ldrb	r3, [r7, #1]
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <MPU6050_read_acc+0xec>)
 8000e48:	801a      	strh	r2, [r3, #0]
	acc_Y_read = (int16_t)(read_acc[2] << 8 | read_acc[3]);
 8000e4a:	78bb      	ldrb	r3, [r7, #2]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <MPU6050_read_acc+0xf0>)
 8000e5a:	801a      	strh	r2, [r3, #0]
	acc_Z_read = (int16_t)(read_acc[4] << 8 | read_acc[5]);
 8000e5c:	793b      	ldrb	r3, [r7, #4]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	797b      	ldrb	r3, [r7, #5]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <MPU6050_read_acc+0xf4>)
 8000e6c:	801a      	strh	r2, [r3, #0]

	acc_X = (acc_X_read/16384.0) * 9.81;
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MPU6050_read_acc+0xec>)
 8000e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e74:	ee07 3a90 	vmov	s15, r3
 8000e78:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e7c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000ef0 <MPU6050_read_acc+0xd8>
 8000e80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e84:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000ef8 <MPU6050_read_acc+0xe0>
 8000e88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MPU6050_read_acc+0xf8>)
 8000e92:	edc3 7a00 	vstr	s15, [r3]
	acc_Y = (acc_Y_read/16384.0) * 9.81;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <MPU6050_read_acc+0xf0>)
 8000e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9c:	ee07 3a90 	vmov	s15, r3
 8000ea0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ea4:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000ef0 <MPU6050_read_acc+0xd8>
 8000ea8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000eac:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000ef8 <MPU6050_read_acc+0xe0>
 8000eb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MPU6050_read_acc+0xfc>)
 8000eba:	edc3 7a00 	vstr	s15, [r3]
	acc_Z = (acc_Z_read/16384.0) * 9.81;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MPU6050_read_acc+0xf4>)
 8000ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ecc:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000ef0 <MPU6050_read_acc+0xd8>
 8000ed0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ed4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000ef8 <MPU6050_read_acc+0xe0>
 8000ed8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000edc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MPU6050_read_acc+0x100>)
 8000ee2:	edc3 7a00 	vstr	s15, [r3]

}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	00000000 	.word	0x00000000
 8000ef4:	40d00000 	.word	0x40d00000
 8000ef8:	51eb851f 	.word	0x51eb851f
 8000efc:	40239eb8 	.word	0x40239eb8
 8000f00:	240001fc 	.word	0x240001fc
 8000f04:	24000832 	.word	0x24000832
 8000f08:	24000834 	.word	0x24000834
 8000f0c:	24000836 	.word	0x24000836
 8000f10:	24000840 	.word	0x24000840
 8000f14:	24000844 	.word	0x24000844
 8000f18:	24000848 	.word	0x24000848
 8000f1c:	00000000 	.word	0x00000000

08000f20 <MPU6050_read_gyro>:

void MPU6050_read_gyro(void){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af04      	add	r7, sp, #16
	uint8_t read_gyro[6];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, GYRO_XOUT_H, 1, read_gyro, 6, 3000);
 8000f26:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	463b      	mov	r3, r7
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2301      	movs	r3, #1
 8000f36:	2243      	movs	r2, #67	; 0x43
 8000f38:	21d0      	movs	r1, #208	; 0xd0
 8000f3a:	482b      	ldr	r0, [pc, #172]	; (8000fe8 <MPU6050_read_gyro+0xc8>)
 8000f3c:	f001 fef2 	bl	8002d24 <HAL_I2C_Mem_Read>

	gyr_X_read = (int16_t)(read_gyro[0] << 8 | read_gyro[1]);
 8000f40:	783b      	ldrb	r3, [r7, #0]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	787b      	ldrb	r3, [r7, #1]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	4b27      	ldr	r3, [pc, #156]	; (8000fec <MPU6050_read_gyro+0xcc>)
 8000f50:	801a      	strh	r2, [r3, #0]
	gyr_Y_read = (int16_t)(read_gyro[2] << 8 | read_gyro[3]);
 8000f52:	78bb      	ldrb	r3, [r7, #2]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <MPU6050_read_gyro+0xd0>)
 8000f62:	801a      	strh	r2, [r3, #0]
	gyr_Z_read = (int16_t)(read_gyro[4] << 8 | read_gyro[5]);
 8000f64:	793b      	ldrb	r3, [r7, #4]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <MPU6050_read_gyro+0xd4>)
 8000f74:	801a      	strh	r2, [r3, #0]

	gyr_X = gyr_X_read/131.0;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MPU6050_read_gyro+0xcc>)
 8000f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f84:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8000fe0 <MPU6050_read_gyro+0xc0>
 8000f88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MPU6050_read_gyro+0xd8>)
 8000f92:	edc3 7a00 	vstr	s15, [r3]
	gyr_Y = gyr_Y_read/131.0;
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MPU6050_read_gyro+0xd0>)
 8000f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fa4:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8000fe0 <MPU6050_read_gyro+0xc0>
 8000fa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MPU6050_read_gyro+0xdc>)
 8000fb2:	edc3 7a00 	vstr	s15, [r3]
	gyr_Z = gyr_Z_read/131.0;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MPU6050_read_gyro+0xd4>)
 8000fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fc4:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8000fe0 <MPU6050_read_gyro+0xc0>
 8000fc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fcc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MPU6050_read_gyro+0xe0>)
 8000fd2:	edc3 7a00 	vstr	s15, [r3]
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	40606000 	.word	0x40606000
 8000fe8:	240001fc 	.word	0x240001fc
 8000fec:	24000838 	.word	0x24000838
 8000ff0:	2400083a 	.word	0x2400083a
 8000ff4:	2400083c 	.word	0x2400083c
 8000ff8:	2400084c 	.word	0x2400084c
 8000ffc:	24000850 	.word	0x24000850
 8001000:	24000854 	.word	0x24000854

08001004 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	if(Rx_data[0] == 65 | Rx_data[0] == 97){
 800100c:	4b6a      	ldr	r3, [pc, #424]	; (80011b8 <HAL_UART_RxCpltCallback+0x1b4>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b41      	cmp	r3, #65	; 0x41
 8001012:	bf0c      	ite	eq
 8001014:	2301      	moveq	r3, #1
 8001016:	2300      	movne	r3, #0
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b67      	ldr	r3, [pc, #412]	; (80011b8 <HAL_UART_RxCpltCallback+0x1b4>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b61      	cmp	r3, #97	; 0x61
 8001020:	bf0c      	ite	eq
 8001022:	2301      	moveq	r3, #1
 8001024:	2300      	movne	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d042      	beq.n	80010b6 <HAL_UART_RxCpltCallback+0xb2>
		uart_buf_len = sprintf(uart_buf, "AccX = %.2f m/s^2 \r\n", acc_X);
 8001030:	4b62      	ldr	r3, [pc, #392]	; (80011bc <HAL_UART_RxCpltCallback+0x1b8>)
 8001032:	edd3 7a00 	vldr	s15, [r3]
 8001036:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800103a:	ec53 2b17 	vmov	r2, r3, d7
 800103e:	4960      	ldr	r1, [pc, #384]	; (80011c0 <HAL_UART_RxCpltCallback+0x1bc>)
 8001040:	4860      	ldr	r0, [pc, #384]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 8001042:	f008 fe9f 	bl	8009d84 <siprintf>
 8001046:	4603      	mov	r3, r0
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b5f      	ldr	r3, [pc, #380]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 800104c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 800104e:	4b5e      	ldr	r3, [pc, #376]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	2364      	movs	r3, #100	; 0x64
 8001054:	495b      	ldr	r1, [pc, #364]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 8001056:	485d      	ldr	r0, [pc, #372]	; (80011cc <HAL_UART_RxCpltCallback+0x1c8>)
 8001058:	f005 fbfe 	bl	8006858 <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "AccY = %.2f m/s^2 \r\n", acc_Y);
 800105c:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HAL_UART_RxCpltCallback+0x1cc>)
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001066:	ec53 2b17 	vmov	r2, r3, d7
 800106a:	495a      	ldr	r1, [pc, #360]	; (80011d4 <HAL_UART_RxCpltCallback+0x1d0>)
 800106c:	4855      	ldr	r0, [pc, #340]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 800106e:	f008 fe89 	bl	8009d84 <siprintf>
 8001072:	4603      	mov	r3, r0
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b54      	ldr	r3, [pc, #336]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 8001078:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 800107a:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 800107c:	881a      	ldrh	r2, [r3, #0]
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	4950      	ldr	r1, [pc, #320]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 8001082:	4852      	ldr	r0, [pc, #328]	; (80011cc <HAL_UART_RxCpltCallback+0x1c8>)
 8001084:	f005 fbe8 	bl	8006858 <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "AccZ = %.2f m/s^2 \r\n", acc_Z);
 8001088:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <HAL_UART_RxCpltCallback+0x1d4>)
 800108a:	edd3 7a00 	vldr	s15, [r3]
 800108e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001092:	ec53 2b17 	vmov	r2, r3, d7
 8001096:	4951      	ldr	r1, [pc, #324]	; (80011dc <HAL_UART_RxCpltCallback+0x1d8>)
 8001098:	484a      	ldr	r0, [pc, #296]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 800109a:	f008 fe73 	bl	8009d84 <siprintf>
 800109e:	4603      	mov	r3, r0
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b49      	ldr	r3, [pc, #292]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 80010a4:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80010a6:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 80010a8:	881a      	ldrh	r2, [r3, #0]
 80010aa:	2364      	movs	r3, #100	; 0x64
 80010ac:	4945      	ldr	r1, [pc, #276]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 80010ae:	4847      	ldr	r0, [pc, #284]	; (80011cc <HAL_UART_RxCpltCallback+0x1c8>)
 80010b0:	f005 fbd2 	bl	8006858 <HAL_UART_Transmit>
 80010b4:	e077      	b.n	80011a6 <HAL_UART_RxCpltCallback+0x1a2>
	} else if(Rx_data[0] == 71 | Rx_data[0] == 103){
 80010b6:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <HAL_UART_RxCpltCallback+0x1b4>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b47      	cmp	r3, #71	; 0x47
 80010bc:	bf0c      	ite	eq
 80010be:	2301      	moveq	r3, #1
 80010c0:	2300      	movne	r3, #0
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <HAL_UART_RxCpltCallback+0x1b4>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b67      	cmp	r3, #103	; 0x67
 80010ca:	bf0c      	ite	eq
 80010cc:	2301      	moveq	r3, #1
 80010ce:	2300      	movne	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d042      	beq.n	8001160 <HAL_UART_RxCpltCallback+0x15c>
		uart_buf_len = sprintf(uart_buf, "GyrX = %.2f °/s \r\n", gyr_X);
 80010da:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <HAL_UART_RxCpltCallback+0x1dc>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010e4:	ec53 2b17 	vmov	r2, r3, d7
 80010e8:	493e      	ldr	r1, [pc, #248]	; (80011e4 <HAL_UART_RxCpltCallback+0x1e0>)
 80010ea:	4836      	ldr	r0, [pc, #216]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 80010ec:	f008 fe4a 	bl	8009d84 <siprintf>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 80010f6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80010f8:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 80010fa:	881a      	ldrh	r2, [r3, #0]
 80010fc:	2364      	movs	r3, #100	; 0x64
 80010fe:	4931      	ldr	r1, [pc, #196]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 8001100:	4832      	ldr	r0, [pc, #200]	; (80011cc <HAL_UART_RxCpltCallback+0x1c8>)
 8001102:	f005 fba9 	bl	8006858 <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "GyrY = %.2f °/s \r\n", gyr_Y);
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <HAL_UART_RxCpltCallback+0x1e4>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001110:	ec53 2b17 	vmov	r2, r3, d7
 8001114:	4935      	ldr	r1, [pc, #212]	; (80011ec <HAL_UART_RxCpltCallback+0x1e8>)
 8001116:	482b      	ldr	r0, [pc, #172]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 8001118:	f008 fe34 	bl	8009d84 <siprintf>
 800111c:	4603      	mov	r3, r0
 800111e:	b29a      	uxth	r2, r3
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 8001122:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 8001126:	881a      	ldrh	r2, [r3, #0]
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	4926      	ldr	r1, [pc, #152]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 800112c:	4827      	ldr	r0, [pc, #156]	; (80011cc <HAL_UART_RxCpltCallback+0x1c8>)
 800112e:	f005 fb93 	bl	8006858 <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "GyrZ = %.2f °/s \r\n\n", gyr_Z);
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <HAL_UART_RxCpltCallback+0x1ec>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800113c:	ec53 2b17 	vmov	r2, r3, d7
 8001140:	492c      	ldr	r1, [pc, #176]	; (80011f4 <HAL_UART_RxCpltCallback+0x1f0>)
 8001142:	4820      	ldr	r0, [pc, #128]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 8001144:	f008 fe1e 	bl	8009d84 <siprintf>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 800114e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 8001152:	881a      	ldrh	r2, [r3, #0]
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	491b      	ldr	r1, [pc, #108]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 8001158:	481c      	ldr	r0, [pc, #112]	; (80011cc <HAL_UART_RxCpltCallback+0x1c8>)
 800115a:	f005 fb7d 	bl	8006858 <HAL_UART_Transmit>
 800115e:	e022      	b.n	80011a6 <HAL_UART_RxCpltCallback+0x1a2>
	} else if(Rx_data[0] == 84 | Rx_data[0] == 116){
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_UART_RxCpltCallback+0x1b4>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b54      	cmp	r3, #84	; 0x54
 8001166:	bf0c      	ite	eq
 8001168:	2301      	moveq	r3, #1
 800116a:	2300      	movne	r3, #0
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_UART_RxCpltCallback+0x1b4>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b74      	cmp	r3, #116	; 0x74
 8001174:	bf0c      	ite	eq
 8001176:	2301      	moveq	r3, #1
 8001178:	2300      	movne	r3, #0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_UART_RxCpltCallback+0x192>
		uart_buf_len = sprintf(uart_buf, "Temp: \r\n");
 8001184:	491c      	ldr	r1, [pc, #112]	; (80011f8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001186:	480f      	ldr	r0, [pc, #60]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 8001188:	f008 fdfc 	bl	8009d84 <siprintf>
 800118c:	4603      	mov	r3, r0
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 8001192:	801a      	strh	r2, [r3, #0]
 8001194:	e007      	b.n	80011a6 <HAL_UART_RxCpltCallback+0x1a2>
	} else{
		uart_buf_len = sprintf(uart_buf, "NA\r\n");
 8001196:	4919      	ldr	r1, [pc, #100]	; (80011fc <HAL_UART_RxCpltCallback+0x1f8>)
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <HAL_UART_RxCpltCallback+0x1c0>)
 800119a:	f008 fdf3 	bl	8009d84 <siprintf>
 800119e:	4603      	mov	r3, r0
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_UART_RxCpltCallback+0x1c4>)
 80011a4:	801a      	strh	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart3, Rx_data, 1); //Reinicia la interrupcion
 80011a6:	2201      	movs	r2, #1
 80011a8:	4903      	ldr	r1, [pc, #12]	; (80011b8 <HAL_UART_RxCpltCallback+0x1b4>)
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <HAL_UART_RxCpltCallback+0x1c8>)
 80011ac:	f005 fbea 	bl	8006984 <HAL_UART_Receive_IT>

}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	24000890 	.word	0x24000890
 80011bc:	24000840 	.word	0x24000840
 80011c0:	0800c1b4 	.word	0x0800c1b4
 80011c4:	2400085c 	.word	0x2400085c
 80011c8:	2400088e 	.word	0x2400088e
 80011cc:	24000294 	.word	0x24000294
 80011d0:	24000844 	.word	0x24000844
 80011d4:	0800c1cc 	.word	0x0800c1cc
 80011d8:	24000848 	.word	0x24000848
 80011dc:	0800c1e4 	.word	0x0800c1e4
 80011e0:	2400084c 	.word	0x2400084c
 80011e4:	0800c1fc 	.word	0x0800c1fc
 80011e8:	24000850 	.word	0x24000850
 80011ec:	0800c210 	.word	0x0800c210
 80011f0:	24000854 	.word	0x24000854
 80011f4:	0800c224 	.word	0x0800c224
 80011f8:	0800c23c 	.word	0x0800c23c
 80011fc:	0800c248 	.word	0x0800c248

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	e7fe      	b.n	8001208 <Error_Handler+0x8>
	...

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_MspInit+0x30>)
 8001214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001218:	4a08      	ldr	r2, [pc, #32]	; (800123c <HAL_MspInit+0x30>)
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_MspInit+0x30>)
 8001224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	58024400 	.word	0x58024400

08001240 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0b8      	sub	sp, #224	; 0xe0
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	22bc      	movs	r2, #188	; 0xbc
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f008 f945 	bl	80094f0 <memset>
  if(hi2c->Instance==I2C4)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a25      	ldr	r2, [pc, #148]	; (8001300 <HAL_I2C_MspInit+0xc0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d142      	bne.n	80012f6 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001270:	2310      	movs	r3, #16
 8001272:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fc1c 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800128a:	f7ff ffb9 	bl	8001200 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_I2C_MspInit+0xc4>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_I2C_MspInit+0xc4>)
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_I2C_MspInit+0xc4>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b4:	2312      	movs	r3, #18
 80012b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80012c6:	2304      	movs	r3, #4
 80012c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d0:	4619      	mov	r1, r3
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <HAL_I2C_MspInit+0xc8>)
 80012d4:	f001 f98a 	bl	80025ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_I2C_MspInit+0xc4>)
 80012da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_I2C_MspInit+0xc4>)
 80012e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_I2C_MspInit+0xc4>)
 80012ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	37e0      	adds	r7, #224	; 0xe0
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	58001c00 	.word	0x58001c00
 8001304:	58024400 	.word	0x58024400
 8001308:	58021400 	.word	0x58021400

0800130c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800131c:	d10e      	bne.n	800133c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_TIM_Base_MspInit+0x3c>)
 8001320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001324:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_TIM_Base_MspInit+0x3c>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_TIM_Base_MspInit+0x3c>)
 8001330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	58024400 	.word	0x58024400

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0b8      	sub	sp, #224	; 0xe0
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	22bc      	movs	r2, #188	; 0xbc
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f008 f8bf 	bl	80094f0 <memset>
  if(huart->Instance==USART3)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a29      	ldr	r2, [pc, #164]	; (800141c <HAL_UART_MspInit+0xd0>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d14a      	bne.n	8001412 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800137c:	2302      	movs	r3, #2
 800137e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4618      	mov	r0, r3
 800138c:	f003 fb96 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001396:	f7ff ff33 	bl	8001200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_UART_MspInit+0xd4>)
 800139c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a0:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_UART_MspInit+0xd4>)
 80013a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_UART_MspInit+0xd4>)
 80013ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_UART_MspInit+0xd4>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013be:	4a18      	ldr	r2, [pc, #96]	; (8001420 <HAL_UART_MspInit+0xd4>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_UART_MspInit+0xd4>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013f0:	2307      	movs	r3, #7
 80013f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013fa:	4619      	mov	r1, r3
 80013fc:	4809      	ldr	r0, [pc, #36]	; (8001424 <HAL_UART_MspInit+0xd8>)
 80013fe:	f001 f8f5 	bl	80025ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2027      	movs	r0, #39	; 0x27
 8001408:	f000 fb57 	bl	8001aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800140c:	2027      	movs	r0, #39	; 0x27
 800140e:	f000 fb6e 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	37e0      	adds	r7, #224	; 0xe0
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40004800 	.word	0x40004800
 8001420:	58024400 	.word	0x58024400
 8001424:	58020c00 	.word	0x58020c00

08001428 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b0b8      	sub	sp, #224	; 0xe0
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	22bc      	movs	r2, #188	; 0xbc
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f008 f851 	bl	80094f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a36      	ldr	r2, [pc, #216]	; (800152c <HAL_PCD_MspInit+0x104>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d165      	bne.n	8001524 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001458:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800145c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001462:	2318      	movs	r3, #24
 8001464:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001466:	2302      	movs	r3, #2
 8001468:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800146a:	2304      	movs	r3, #4
 800146c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800146e:	2302      	movs	r3, #2
 8001470:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001472:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001476:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800147c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001480:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4618      	mov	r0, r3
 800148a:	f003 fb17 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001494:	f7ff feb4 	bl	8001200 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001498:	f002 fb46 	bl	8003b28 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_PCD_MspInit+0x108>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	4a23      	ldr	r2, [pc, #140]	; (8001530 <HAL_PCD_MspInit+0x108>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_PCD_MspInit+0x108>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80014ba:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80014be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80014d4:	230a      	movs	r3, #10
 80014d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014de:	4619      	mov	r1, r3
 80014e0:	4814      	ldr	r0, [pc, #80]	; (8001534 <HAL_PCD_MspInit+0x10c>)
 80014e2:	f001 f883 	bl	80025ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <HAL_PCD_MspInit+0x10c>)
 8001502:	f001 f873 	bl	80025ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_PCD_MspInit+0x108>)
 8001508:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800150c:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_PCD_MspInit+0x108>)
 800150e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001512:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_PCD_MspInit+0x108>)
 8001518:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800151c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	37e0      	adds	r7, #224	; 0xe0
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40080000 	.word	0x40080000
 8001530:	58024400 	.word	0x58024400
 8001534:	58020000 	.word	0x58020000

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001584:	f000 f96e 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <USART3_IRQHandler+0x10>)
 8001592:	f005 fa4d 	bl	8006a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	24000294 	.word	0x24000294

080015a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_kill>:

int _kill(int pid, int sig)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015ba:	f007 ff6f 	bl	800949c <__errno>
 80015be:	4603      	mov	r3, r0
 80015c0:	2216      	movs	r2, #22
 80015c2:	601a      	str	r2, [r3, #0]
	return -1;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_exit>:

void _exit (int status)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffe7 	bl	80015b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015e2:	e7fe      	b.n	80015e2 <_exit+0x12>

080015e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e00a      	b.n	800160c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015f6:	f3af 8000 	nop.w
 80015fa:	4601      	mov	r1, r0
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	b2ca      	uxtb	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbf0      	blt.n	80015f6 <_read+0x12>
	}

return len;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e009      	b.n	8001644 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf1      	blt.n	8001630 <_write+0x12>
	}
	return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_close>:

int _close(int file)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167e:	605a      	str	r2, [r3, #4]
	return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_isatty>:

int _isatty(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
	return 1;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
	return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f007 fed4 	bl	800949c <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	24080000 	.word	0x24080000
 8001720:	00000400 	.word	0x00000400
 8001724:	24000898 	.word	0x24000898
 8001728:	240008b0 	.word	0x240008b0

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001730:	f7fe ffb0 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	; (800176c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	; (8001778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f007 fea5 	bl	80094a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7ff f82f 	bl	80007c0 <main>
  bx  lr
 8001762:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001768:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800176c:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001770:	0800c674 	.word	0x0800c674
  ldr r2, =_sbss
 8001774:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001778:	240008b0 	.word	0x240008b0

0800177c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC3_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001786:	2003      	movs	r0, #3
 8001788:	f000 f98c 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800178c:	f002 ffc0 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8001790:	4602      	mov	r2, r0
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_Init+0x68>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	4913      	ldr	r1, [pc, #76]	; (80017ec <HAL_Init+0x6c>)
 800179e:	5ccb      	ldrb	r3, [r1, r3]
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	fa22 f303 	lsr.w	r3, r2, r3
 80017a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_Init+0x68>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_Init+0x6c>)
 80017b4:	5cd3      	ldrb	r3, [r2, r3]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_Init+0x70>)
 80017c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017c4:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_Init+0x74>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ca:	2000      	movs	r0, #0
 80017cc:	f000 f814 	bl	80017f8 <HAL_InitTick>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e002      	b.n	80017e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017da:	f7ff fd17 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	58024400 	.word	0x58024400
 80017ec:	0800c250 	.word	0x0800c250
 80017f0:	24000004 	.word	0x24000004
 80017f4:	24000000 	.word	0x24000000

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_InitTick+0x60>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e021      	b.n	8001850 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_InitTick+0x64>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_InitTick+0x60>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f971 	bl	8001b0a <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 f93b 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <HAL_InitTick+0x68>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2400000c 	.word	0x2400000c
 800185c:	24000000 	.word	0x24000000
 8001860:	24000008 	.word	0x24000008

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_IncTick+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_IncTick+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	2400000c 	.word	0x2400000c
 8001888:	2400089c 	.word	0x2400089c

0800188c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_GetTick+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2400089c 	.word	0x2400089c

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff ffee 	bl	800188c <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_Delay+0x44>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ca:	bf00      	nop
 80018cc:	f7ff ffde 	bl	800188c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2400000c 	.word	0x2400000c

080018ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_GetREVID+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0c1b      	lsrs	r3, r3, #16
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	5c001000 	.word	0x5c001000

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <__NVIC_SetPriorityGrouping+0x40>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	4313      	orrs	r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x40>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00
 8001948:	05fa0000 	.word	0x05fa0000

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4907      	ldr	r1, [pc, #28]	; (80019a0 <__NVIC_EnableIRQ+0x38>)
 8001982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff8e 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff29 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff40 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff90 	bl	80019f8 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5f 	bl	80019a4 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff33 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa4 	bl	8001a60 <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff feae 	bl	800188c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e2dc      	b.n	80020f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d008      	beq.n	8001b5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e2cd      	b.n	80020f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a76      	ldr	r2, [pc, #472]	; (8001d38 <HAL_DMA_Abort+0x214>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d04a      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a74      	ldr	r2, [pc, #464]	; (8001d3c <HAL_DMA_Abort+0x218>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d045      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a73      	ldr	r2, [pc, #460]	; (8001d40 <HAL_DMA_Abort+0x21c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d040      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a71      	ldr	r2, [pc, #452]	; (8001d44 <HAL_DMA_Abort+0x220>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d03b      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a70      	ldr	r2, [pc, #448]	; (8001d48 <HAL_DMA_Abort+0x224>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d036      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6e      	ldr	r2, [pc, #440]	; (8001d4c <HAL_DMA_Abort+0x228>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d031      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6d      	ldr	r2, [pc, #436]	; (8001d50 <HAL_DMA_Abort+0x22c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d02c      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6b      	ldr	r2, [pc, #428]	; (8001d54 <HAL_DMA_Abort+0x230>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d027      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6a      	ldr	r2, [pc, #424]	; (8001d58 <HAL_DMA_Abort+0x234>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d022      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a68      	ldr	r2, [pc, #416]	; (8001d5c <HAL_DMA_Abort+0x238>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01d      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a67      	ldr	r2, [pc, #412]	; (8001d60 <HAL_DMA_Abort+0x23c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d018      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a65      	ldr	r2, [pc, #404]	; (8001d64 <HAL_DMA_Abort+0x240>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a64      	ldr	r2, [pc, #400]	; (8001d68 <HAL_DMA_Abort+0x244>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d00e      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a62      	ldr	r2, [pc, #392]	; (8001d6c <HAL_DMA_Abort+0x248>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d009      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a61      	ldr	r2, [pc, #388]	; (8001d70 <HAL_DMA_Abort+0x24c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d004      	beq.n	8001bfa <HAL_DMA_Abort+0xd6>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a5f      	ldr	r2, [pc, #380]	; (8001d74 <HAL_DMA_Abort+0x250>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_DMA_Abort+0xda>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_DMA_Abort+0xdc>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d013      	beq.n	8001c2c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 021e 	bic.w	r2, r2, #30
 8001c12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c22:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	e00a      	b.n	8001c42 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 020e 	bic.w	r2, r2, #14
 8001c3a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a3c      	ldr	r2, [pc, #240]	; (8001d38 <HAL_DMA_Abort+0x214>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d072      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <HAL_DMA_Abort+0x218>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d06d      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a39      	ldr	r2, [pc, #228]	; (8001d40 <HAL_DMA_Abort+0x21c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d068      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a37      	ldr	r2, [pc, #220]	; (8001d44 <HAL_DMA_Abort+0x220>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d063      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a36      	ldr	r2, [pc, #216]	; (8001d48 <HAL_DMA_Abort+0x224>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d05e      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a34      	ldr	r2, [pc, #208]	; (8001d4c <HAL_DMA_Abort+0x228>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d059      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a33      	ldr	r2, [pc, #204]	; (8001d50 <HAL_DMA_Abort+0x22c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d054      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a31      	ldr	r2, [pc, #196]	; (8001d54 <HAL_DMA_Abort+0x230>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d04f      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a30      	ldr	r2, [pc, #192]	; (8001d58 <HAL_DMA_Abort+0x234>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d04a      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a2e      	ldr	r2, [pc, #184]	; (8001d5c <HAL_DMA_Abort+0x238>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d045      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a2d      	ldr	r2, [pc, #180]	; (8001d60 <HAL_DMA_Abort+0x23c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d040      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2b      	ldr	r2, [pc, #172]	; (8001d64 <HAL_DMA_Abort+0x240>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d03b      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2a      	ldr	r2, [pc, #168]	; (8001d68 <HAL_DMA_Abort+0x244>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d036      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a28      	ldr	r2, [pc, #160]	; (8001d6c <HAL_DMA_Abort+0x248>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d031      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <HAL_DMA_Abort+0x24c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d02c      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a25      	ldr	r2, [pc, #148]	; (8001d74 <HAL_DMA_Abort+0x250>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d027      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <HAL_DMA_Abort+0x254>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d022      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <HAL_DMA_Abort+0x258>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d01d      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <HAL_DMA_Abort+0x25c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d018      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <HAL_DMA_Abort+0x260>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <HAL_DMA_Abort+0x264>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00e      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_DMA_Abort+0x268>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d009      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_DMA_Abort+0x26c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d004      	beq.n	8001d32 <HAL_DMA_Abort+0x20e>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_DMA_Abort+0x270>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d132      	bne.n	8001d98 <HAL_DMA_Abort+0x274>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e031      	b.n	8001d9a <HAL_DMA_Abort+0x276>
 8001d36:	bf00      	nop
 8001d38:	40020010 	.word	0x40020010
 8001d3c:	40020028 	.word	0x40020028
 8001d40:	40020040 	.word	0x40020040
 8001d44:	40020058 	.word	0x40020058
 8001d48:	40020070 	.word	0x40020070
 8001d4c:	40020088 	.word	0x40020088
 8001d50:	400200a0 	.word	0x400200a0
 8001d54:	400200b8 	.word	0x400200b8
 8001d58:	40020410 	.word	0x40020410
 8001d5c:	40020428 	.word	0x40020428
 8001d60:	40020440 	.word	0x40020440
 8001d64:	40020458 	.word	0x40020458
 8001d68:	40020470 	.word	0x40020470
 8001d6c:	40020488 	.word	0x40020488
 8001d70:	400204a0 	.word	0x400204a0
 8001d74:	400204b8 	.word	0x400204b8
 8001d78:	58025408 	.word	0x58025408
 8001d7c:	5802541c 	.word	0x5802541c
 8001d80:	58025430 	.word	0x58025430
 8001d84:	58025444 	.word	0x58025444
 8001d88:	58025458 	.word	0x58025458
 8001d8c:	5802546c 	.word	0x5802546c
 8001d90:	58025480 	.word	0x58025480
 8001d94:	58025494 	.word	0x58025494
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a6d      	ldr	r2, [pc, #436]	; (8001f68 <HAL_DMA_Abort+0x444>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d04a      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a6b      	ldr	r2, [pc, #428]	; (8001f6c <HAL_DMA_Abort+0x448>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d045      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a6a      	ldr	r2, [pc, #424]	; (8001f70 <HAL_DMA_Abort+0x44c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d040      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a68      	ldr	r2, [pc, #416]	; (8001f74 <HAL_DMA_Abort+0x450>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d03b      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a67      	ldr	r2, [pc, #412]	; (8001f78 <HAL_DMA_Abort+0x454>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d036      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a65      	ldr	r2, [pc, #404]	; (8001f7c <HAL_DMA_Abort+0x458>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d031      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a64      	ldr	r2, [pc, #400]	; (8001f80 <HAL_DMA_Abort+0x45c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d02c      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a62      	ldr	r2, [pc, #392]	; (8001f84 <HAL_DMA_Abort+0x460>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d027      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a61      	ldr	r2, [pc, #388]	; (8001f88 <HAL_DMA_Abort+0x464>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a5f      	ldr	r2, [pc, #380]	; (8001f8c <HAL_DMA_Abort+0x468>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01d      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a5e      	ldr	r2, [pc, #376]	; (8001f90 <HAL_DMA_Abort+0x46c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d018      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a5c      	ldr	r2, [pc, #368]	; (8001f94 <HAL_DMA_Abort+0x470>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a5b      	ldr	r2, [pc, #364]	; (8001f98 <HAL_DMA_Abort+0x474>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00e      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a59      	ldr	r2, [pc, #356]	; (8001f9c <HAL_DMA_Abort+0x478>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a58      	ldr	r2, [pc, #352]	; (8001fa0 <HAL_DMA_Abort+0x47c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d004      	beq.n	8001e4e <HAL_DMA_Abort+0x32a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a56      	ldr	r2, [pc, #344]	; (8001fa4 <HAL_DMA_Abort+0x480>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d108      	bne.n	8001e60 <HAL_DMA_Abort+0x33c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0201 	bic.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e007      	b.n	8001e70 <HAL_DMA_Abort+0x34c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e70:	e013      	b.n	8001e9a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e72:	f7ff fd0b 	bl	800188c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	d90c      	bls.n	8001e9a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e12d      	b.n	80020f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1e5      	bne.n	8001e72 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a2f      	ldr	r2, [pc, #188]	; (8001f68 <HAL_DMA_Abort+0x444>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d04a      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a2d      	ldr	r2, [pc, #180]	; (8001f6c <HAL_DMA_Abort+0x448>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d045      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a2c      	ldr	r2, [pc, #176]	; (8001f70 <HAL_DMA_Abort+0x44c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d040      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2a      	ldr	r2, [pc, #168]	; (8001f74 <HAL_DMA_Abort+0x450>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d03b      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <HAL_DMA_Abort+0x454>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d036      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a27      	ldr	r2, [pc, #156]	; (8001f7c <HAL_DMA_Abort+0x458>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d031      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a26      	ldr	r2, [pc, #152]	; (8001f80 <HAL_DMA_Abort+0x45c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d02c      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <HAL_DMA_Abort+0x460>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d027      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a23      	ldr	r2, [pc, #140]	; (8001f88 <HAL_DMA_Abort+0x464>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d022      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a21      	ldr	r2, [pc, #132]	; (8001f8c <HAL_DMA_Abort+0x468>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01d      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <HAL_DMA_Abort+0x46c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d018      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <HAL_DMA_Abort+0x470>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_DMA_Abort+0x474>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00e      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_DMA_Abort+0x478>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d009      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1a      	ldr	r2, [pc, #104]	; (8001fa0 <HAL_DMA_Abort+0x47c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d004      	beq.n	8001f46 <HAL_DMA_Abort+0x422>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_DMA_Abort+0x480>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d101      	bne.n	8001f4a <HAL_DMA_Abort+0x426>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_DMA_Abort+0x428>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d02b      	beq.n	8001fa8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	223f      	movs	r2, #63	; 0x3f
 8001f60:	409a      	lsls	r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	e02a      	b.n	8001fbe <HAL_DMA_Abort+0x49a>
 8001f68:	40020010 	.word	0x40020010
 8001f6c:	40020028 	.word	0x40020028
 8001f70:	40020040 	.word	0x40020040
 8001f74:	40020058 	.word	0x40020058
 8001f78:	40020070 	.word	0x40020070
 8001f7c:	40020088 	.word	0x40020088
 8001f80:	400200a0 	.word	0x400200a0
 8001f84:	400200b8 	.word	0x400200b8
 8001f88:	40020410 	.word	0x40020410
 8001f8c:	40020428 	.word	0x40020428
 8001f90:	40020440 	.word	0x40020440
 8001f94:	40020458 	.word	0x40020458
 8001f98:	40020470 	.word	0x40020470
 8001f9c:	40020488 	.word	0x40020488
 8001fa0:	400204a0 	.word	0x400204a0
 8001fa4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <HAL_DMA_Abort+0x5dc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d072      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a4d      	ldr	r2, [pc, #308]	; (8002104 <HAL_DMA_Abort+0x5e0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d06d      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a4c      	ldr	r2, [pc, #304]	; (8002108 <HAL_DMA_Abort+0x5e4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d068      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a4a      	ldr	r2, [pc, #296]	; (800210c <HAL_DMA_Abort+0x5e8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d063      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a49      	ldr	r2, [pc, #292]	; (8002110 <HAL_DMA_Abort+0x5ec>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d05e      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a47      	ldr	r2, [pc, #284]	; (8002114 <HAL_DMA_Abort+0x5f0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d059      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a46      	ldr	r2, [pc, #280]	; (8002118 <HAL_DMA_Abort+0x5f4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d054      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a44      	ldr	r2, [pc, #272]	; (800211c <HAL_DMA_Abort+0x5f8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d04f      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a43      	ldr	r2, [pc, #268]	; (8002120 <HAL_DMA_Abort+0x5fc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d04a      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a41      	ldr	r2, [pc, #260]	; (8002124 <HAL_DMA_Abort+0x600>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d045      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a40      	ldr	r2, [pc, #256]	; (8002128 <HAL_DMA_Abort+0x604>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d040      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a3e      	ldr	r2, [pc, #248]	; (800212c <HAL_DMA_Abort+0x608>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d03b      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a3d      	ldr	r2, [pc, #244]	; (8002130 <HAL_DMA_Abort+0x60c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d036      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <HAL_DMA_Abort+0x610>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d031      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <HAL_DMA_Abort+0x614>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d02c      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a38      	ldr	r2, [pc, #224]	; (800213c <HAL_DMA_Abort+0x618>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d027      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a37      	ldr	r2, [pc, #220]	; (8002140 <HAL_DMA_Abort+0x61c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d022      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a35      	ldr	r2, [pc, #212]	; (8002144 <HAL_DMA_Abort+0x620>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01d      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a34      	ldr	r2, [pc, #208]	; (8002148 <HAL_DMA_Abort+0x624>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d018      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a32      	ldr	r2, [pc, #200]	; (800214c <HAL_DMA_Abort+0x628>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a31      	ldr	r2, [pc, #196]	; (8002150 <HAL_DMA_Abort+0x62c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d00e      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a2f      	ldr	r2, [pc, #188]	; (8002154 <HAL_DMA_Abort+0x630>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d009      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a2e      	ldr	r2, [pc, #184]	; (8002158 <HAL_DMA_Abort+0x634>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d004      	beq.n	80020ae <HAL_DMA_Abort+0x58a>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2c      	ldr	r2, [pc, #176]	; (800215c <HAL_DMA_Abort+0x638>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_DMA_Abort+0x58e>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_DMA_Abort+0x590>
 80020b2:	2300      	movs	r3, #0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d015      	beq.n	80020e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00c      	beq.n	80020e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40020010 	.word	0x40020010
 8002104:	40020028 	.word	0x40020028
 8002108:	40020040 	.word	0x40020040
 800210c:	40020058 	.word	0x40020058
 8002110:	40020070 	.word	0x40020070
 8002114:	40020088 	.word	0x40020088
 8002118:	400200a0 	.word	0x400200a0
 800211c:	400200b8 	.word	0x400200b8
 8002120:	40020410 	.word	0x40020410
 8002124:	40020428 	.word	0x40020428
 8002128:	40020440 	.word	0x40020440
 800212c:	40020458 	.word	0x40020458
 8002130:	40020470 	.word	0x40020470
 8002134:	40020488 	.word	0x40020488
 8002138:	400204a0 	.word	0x400204a0
 800213c:	400204b8 	.word	0x400204b8
 8002140:	58025408 	.word	0x58025408
 8002144:	5802541c 	.word	0x5802541c
 8002148:	58025430 	.word	0x58025430
 800214c:	58025444 	.word	0x58025444
 8002150:	58025458 	.word	0x58025458
 8002154:	5802546c 	.word	0x5802546c
 8002158:	58025480 	.word	0x58025480
 800215c:	58025494 	.word	0x58025494

08002160 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e237      	b.n	80025e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d004      	beq.n	8002188 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e22c      	b.n	80025e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a5c      	ldr	r2, [pc, #368]	; (8002300 <HAL_DMA_Abort_IT+0x1a0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d04a      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a5b      	ldr	r2, [pc, #364]	; (8002304 <HAL_DMA_Abort_IT+0x1a4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d045      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a59      	ldr	r2, [pc, #356]	; (8002308 <HAL_DMA_Abort_IT+0x1a8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d040      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_DMA_Abort_IT+0x1ac>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d03b      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a56      	ldr	r2, [pc, #344]	; (8002310 <HAL_DMA_Abort_IT+0x1b0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d036      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a55      	ldr	r2, [pc, #340]	; (8002314 <HAL_DMA_Abort_IT+0x1b4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d031      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a53      	ldr	r2, [pc, #332]	; (8002318 <HAL_DMA_Abort_IT+0x1b8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d02c      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_DMA_Abort_IT+0x1bc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d027      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a50      	ldr	r2, [pc, #320]	; (8002320 <HAL_DMA_Abort_IT+0x1c0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d022      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a4f      	ldr	r2, [pc, #316]	; (8002324 <HAL_DMA_Abort_IT+0x1c4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d01d      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a4d      	ldr	r2, [pc, #308]	; (8002328 <HAL_DMA_Abort_IT+0x1c8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d018      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a4c      	ldr	r2, [pc, #304]	; (800232c <HAL_DMA_Abort_IT+0x1cc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d013      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a4a      	ldr	r2, [pc, #296]	; (8002330 <HAL_DMA_Abort_IT+0x1d0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00e      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a49      	ldr	r2, [pc, #292]	; (8002334 <HAL_DMA_Abort_IT+0x1d4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d009      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a47      	ldr	r2, [pc, #284]	; (8002338 <HAL_DMA_Abort_IT+0x1d8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d004      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a46      	ldr	r2, [pc, #280]	; (800233c <HAL_DMA_Abort_IT+0x1dc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d101      	bne.n	800222c <HAL_DMA_Abort_IT+0xcc>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_DMA_Abort_IT+0xce>
 800222c:	2300      	movs	r3, #0
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8086 	beq.w	8002340 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2204      	movs	r2, #4
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a2f      	ldr	r2, [pc, #188]	; (8002300 <HAL_DMA_Abort_IT+0x1a0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d04a      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a2e      	ldr	r2, [pc, #184]	; (8002304 <HAL_DMA_Abort_IT+0x1a4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d045      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <HAL_DMA_Abort_IT+0x1a8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d040      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a2b      	ldr	r2, [pc, #172]	; (800230c <HAL_DMA_Abort_IT+0x1ac>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d03b      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a29      	ldr	r2, [pc, #164]	; (8002310 <HAL_DMA_Abort_IT+0x1b0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d036      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a28      	ldr	r2, [pc, #160]	; (8002314 <HAL_DMA_Abort_IT+0x1b4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d031      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a26      	ldr	r2, [pc, #152]	; (8002318 <HAL_DMA_Abort_IT+0x1b8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d02c      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a25      	ldr	r2, [pc, #148]	; (800231c <HAL_DMA_Abort_IT+0x1bc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d027      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a23      	ldr	r2, [pc, #140]	; (8002320 <HAL_DMA_Abort_IT+0x1c0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d022      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a22      	ldr	r2, [pc, #136]	; (8002324 <HAL_DMA_Abort_IT+0x1c4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d01d      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a20      	ldr	r2, [pc, #128]	; (8002328 <HAL_DMA_Abort_IT+0x1c8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d018      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1f      	ldr	r2, [pc, #124]	; (800232c <HAL_DMA_Abort_IT+0x1cc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d013      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_DMA_Abort_IT+0x1d0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00e      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <HAL_DMA_Abort_IT+0x1d4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d009      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <HAL_DMA_Abort_IT+0x1d8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d004      	beq.n	80022dc <HAL_DMA_Abort_IT+0x17c>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a19      	ldr	r2, [pc, #100]	; (800233c <HAL_DMA_Abort_IT+0x1dc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d108      	bne.n	80022ee <HAL_DMA_Abort_IT+0x18e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	e178      	b.n	80025e0 <HAL_DMA_Abort_IT+0x480>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0201 	bic.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e16f      	b.n	80025e0 <HAL_DMA_Abort_IT+0x480>
 8002300:	40020010 	.word	0x40020010
 8002304:	40020028 	.word	0x40020028
 8002308:	40020040 	.word	0x40020040
 800230c:	40020058 	.word	0x40020058
 8002310:	40020070 	.word	0x40020070
 8002314:	40020088 	.word	0x40020088
 8002318:	400200a0 	.word	0x400200a0
 800231c:	400200b8 	.word	0x400200b8
 8002320:	40020410 	.word	0x40020410
 8002324:	40020428 	.word	0x40020428
 8002328:	40020440 	.word	0x40020440
 800232c:	40020458 	.word	0x40020458
 8002330:	40020470 	.word	0x40020470
 8002334:	40020488 	.word	0x40020488
 8002338:	400204a0 	.word	0x400204a0
 800233c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 020e 	bic.w	r2, r2, #14
 800234e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a6c      	ldr	r2, [pc, #432]	; (8002508 <HAL_DMA_Abort_IT+0x3a8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d04a      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a6b      	ldr	r2, [pc, #428]	; (800250c <HAL_DMA_Abort_IT+0x3ac>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d045      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a69      	ldr	r2, [pc, #420]	; (8002510 <HAL_DMA_Abort_IT+0x3b0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d040      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a68      	ldr	r2, [pc, #416]	; (8002514 <HAL_DMA_Abort_IT+0x3b4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d03b      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a66      	ldr	r2, [pc, #408]	; (8002518 <HAL_DMA_Abort_IT+0x3b8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d036      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a65      	ldr	r2, [pc, #404]	; (800251c <HAL_DMA_Abort_IT+0x3bc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d031      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a63      	ldr	r2, [pc, #396]	; (8002520 <HAL_DMA_Abort_IT+0x3c0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d02c      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a62      	ldr	r2, [pc, #392]	; (8002524 <HAL_DMA_Abort_IT+0x3c4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d027      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a60      	ldr	r2, [pc, #384]	; (8002528 <HAL_DMA_Abort_IT+0x3c8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d022      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a5f      	ldr	r2, [pc, #380]	; (800252c <HAL_DMA_Abort_IT+0x3cc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d01d      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a5d      	ldr	r2, [pc, #372]	; (8002530 <HAL_DMA_Abort_IT+0x3d0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d018      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a5c      	ldr	r2, [pc, #368]	; (8002534 <HAL_DMA_Abort_IT+0x3d4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d013      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a5a      	ldr	r2, [pc, #360]	; (8002538 <HAL_DMA_Abort_IT+0x3d8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00e      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a59      	ldr	r2, [pc, #356]	; (800253c <HAL_DMA_Abort_IT+0x3dc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d009      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a57      	ldr	r2, [pc, #348]	; (8002540 <HAL_DMA_Abort_IT+0x3e0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d004      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x290>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a56      	ldr	r2, [pc, #344]	; (8002544 <HAL_DMA_Abort_IT+0x3e4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d108      	bne.n	8002402 <HAL_DMA_Abort_IT+0x2a2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e007      	b.n	8002412 <HAL_DMA_Abort_IT+0x2b2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a3c      	ldr	r2, [pc, #240]	; (8002508 <HAL_DMA_Abort_IT+0x3a8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d072      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3a      	ldr	r2, [pc, #232]	; (800250c <HAL_DMA_Abort_IT+0x3ac>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d06d      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a39      	ldr	r2, [pc, #228]	; (8002510 <HAL_DMA_Abort_IT+0x3b0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d068      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a37      	ldr	r2, [pc, #220]	; (8002514 <HAL_DMA_Abort_IT+0x3b4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d063      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a36      	ldr	r2, [pc, #216]	; (8002518 <HAL_DMA_Abort_IT+0x3b8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d05e      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a34      	ldr	r2, [pc, #208]	; (800251c <HAL_DMA_Abort_IT+0x3bc>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d059      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a33      	ldr	r2, [pc, #204]	; (8002520 <HAL_DMA_Abort_IT+0x3c0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d054      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a31      	ldr	r2, [pc, #196]	; (8002524 <HAL_DMA_Abort_IT+0x3c4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d04f      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a30      	ldr	r2, [pc, #192]	; (8002528 <HAL_DMA_Abort_IT+0x3c8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d04a      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a2e      	ldr	r2, [pc, #184]	; (800252c <HAL_DMA_Abort_IT+0x3cc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d045      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <HAL_DMA_Abort_IT+0x3d0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d040      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a2b      	ldr	r2, [pc, #172]	; (8002534 <HAL_DMA_Abort_IT+0x3d4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d03b      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <HAL_DMA_Abort_IT+0x3d8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d036      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a28      	ldr	r2, [pc, #160]	; (800253c <HAL_DMA_Abort_IT+0x3dc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d031      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a27      	ldr	r2, [pc, #156]	; (8002540 <HAL_DMA_Abort_IT+0x3e0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d02c      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a25      	ldr	r2, [pc, #148]	; (8002544 <HAL_DMA_Abort_IT+0x3e4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d027      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a24      	ldr	r2, [pc, #144]	; (8002548 <HAL_DMA_Abort_IT+0x3e8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d022      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a22      	ldr	r2, [pc, #136]	; (800254c <HAL_DMA_Abort_IT+0x3ec>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01d      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a21      	ldr	r2, [pc, #132]	; (8002550 <HAL_DMA_Abort_IT+0x3f0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d018      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1f      	ldr	r2, [pc, #124]	; (8002554 <HAL_DMA_Abort_IT+0x3f4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <HAL_DMA_Abort_IT+0x3f8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00e      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_DMA_Abort_IT+0x3fc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d009      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1b      	ldr	r2, [pc, #108]	; (8002560 <HAL_DMA_Abort_IT+0x400>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_DMA_Abort_IT+0x3a2>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a19      	ldr	r2, [pc, #100]	; (8002564 <HAL_DMA_Abort_IT+0x404>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d132      	bne.n	8002568 <HAL_DMA_Abort_IT+0x408>
 8002502:	2301      	movs	r3, #1
 8002504:	e031      	b.n	800256a <HAL_DMA_Abort_IT+0x40a>
 8002506:	bf00      	nop
 8002508:	40020010 	.word	0x40020010
 800250c:	40020028 	.word	0x40020028
 8002510:	40020040 	.word	0x40020040
 8002514:	40020058 	.word	0x40020058
 8002518:	40020070 	.word	0x40020070
 800251c:	40020088 	.word	0x40020088
 8002520:	400200a0 	.word	0x400200a0
 8002524:	400200b8 	.word	0x400200b8
 8002528:	40020410 	.word	0x40020410
 800252c:	40020428 	.word	0x40020428
 8002530:	40020440 	.word	0x40020440
 8002534:	40020458 	.word	0x40020458
 8002538:	40020470 	.word	0x40020470
 800253c:	40020488 	.word	0x40020488
 8002540:	400204a0 	.word	0x400204a0
 8002544:	400204b8 	.word	0x400204b8
 8002548:	58025408 	.word	0x58025408
 800254c:	5802541c 	.word	0x5802541c
 8002550:	58025430 	.word	0x58025430
 8002554:	58025444 	.word	0x58025444
 8002558:	58025458 	.word	0x58025458
 800255c:	5802546c 	.word	0x5802546c
 8002560:	58025480 	.word	0x58025480
 8002564:	58025494 	.word	0x58025494
 8002568:	2300      	movs	r3, #0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d028      	beq.n	80025c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800257c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2201      	movs	r2, #1
 800258e:	409a      	lsls	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800259c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00c      	beq.n	80025c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop

080025ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025fa:	4b89      	ldr	r3, [pc, #548]	; (8002820 <HAL_GPIO_Init+0x234>)
 80025fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025fe:	e194      	b.n	800292a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8186 	beq.w	8002924 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d005      	beq.n	8002630 <HAL_GPIO_Init+0x44>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d130      	bne.n	8002692 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002666:	2201      	movs	r2, #1
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 0201 	and.w	r2, r3, #1
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b03      	cmp	r3, #3
 800269c:	d017      	beq.n	80026ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d123      	bne.n	8002722 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	69b9      	ldr	r1, [r7, #24]
 800271e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0203 	and.w	r2, r3, #3
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80e0 	beq.w	8002924 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002764:	4b2f      	ldr	r3, [pc, #188]	; (8002824 <HAL_GPIO_Init+0x238>)
 8002766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800276a:	4a2e      	ldr	r2, [pc, #184]	; (8002824 <HAL_GPIO_Init+0x238>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_GPIO_Init+0x238>)
 8002776:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002782:	4a29      	ldr	r2, [pc, #164]	; (8002828 <HAL_GPIO_Init+0x23c>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a20      	ldr	r2, [pc, #128]	; (800282c <HAL_GPIO_Init+0x240>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d052      	beq.n	8002854 <HAL_GPIO_Init+0x268>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <HAL_GPIO_Init+0x244>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_GPIO_Init+0x22e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_GPIO_Init+0x248>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d02b      	beq.n	8002816 <HAL_GPIO_Init+0x22a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <HAL_GPIO_Init+0x24c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d025      	beq.n	8002812 <HAL_GPIO_Init+0x226>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_GPIO_Init+0x250>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01f      	beq.n	800280e <HAL_GPIO_Init+0x222>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <HAL_GPIO_Init+0x254>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x21e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <HAL_GPIO_Init+0x258>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x21a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a19      	ldr	r2, [pc, #100]	; (8002848 <HAL_GPIO_Init+0x25c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x216>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a18      	ldr	r2, [pc, #96]	; (800284c <HAL_GPIO_Init+0x260>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x212>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a17      	ldr	r2, [pc, #92]	; (8002850 <HAL_GPIO_Init+0x264>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x20e>
 80027f6:	2309      	movs	r3, #9
 80027f8:	e02d      	b.n	8002856 <HAL_GPIO_Init+0x26a>
 80027fa:	230a      	movs	r3, #10
 80027fc:	e02b      	b.n	8002856 <HAL_GPIO_Init+0x26a>
 80027fe:	2308      	movs	r3, #8
 8002800:	e029      	b.n	8002856 <HAL_GPIO_Init+0x26a>
 8002802:	2307      	movs	r3, #7
 8002804:	e027      	b.n	8002856 <HAL_GPIO_Init+0x26a>
 8002806:	2306      	movs	r3, #6
 8002808:	e025      	b.n	8002856 <HAL_GPIO_Init+0x26a>
 800280a:	2305      	movs	r3, #5
 800280c:	e023      	b.n	8002856 <HAL_GPIO_Init+0x26a>
 800280e:	2304      	movs	r3, #4
 8002810:	e021      	b.n	8002856 <HAL_GPIO_Init+0x26a>
 8002812:	2303      	movs	r3, #3
 8002814:	e01f      	b.n	8002856 <HAL_GPIO_Init+0x26a>
 8002816:	2302      	movs	r3, #2
 8002818:	e01d      	b.n	8002856 <HAL_GPIO_Init+0x26a>
 800281a:	2301      	movs	r3, #1
 800281c:	e01b      	b.n	8002856 <HAL_GPIO_Init+0x26a>
 800281e:	bf00      	nop
 8002820:	58000080 	.word	0x58000080
 8002824:	58024400 	.word	0x58024400
 8002828:	58000400 	.word	0x58000400
 800282c:	58020000 	.word	0x58020000
 8002830:	58020400 	.word	0x58020400
 8002834:	58020800 	.word	0x58020800
 8002838:	58020c00 	.word	0x58020c00
 800283c:	58021000 	.word	0x58021000
 8002840:	58021400 	.word	0x58021400
 8002844:	58021800 	.word	0x58021800
 8002848:	58021c00 	.word	0x58021c00
 800284c:	58022000 	.word	0x58022000
 8002850:	58022400 	.word	0x58022400
 8002854:	2300      	movs	r3, #0
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	f002 0203 	and.w	r2, r2, #3
 800285c:	0092      	lsls	r2, r2, #2
 800285e:	4093      	lsls	r3, r2
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002866:	4938      	ldr	r1, [pc, #224]	; (8002948 <HAL_GPIO_Init+0x35c>)
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	3302      	adds	r3, #2
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800289a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	3301      	adds	r3, #1
 8002928:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	f47f ae63 	bne.w	8002600 <HAL_GPIO_Init+0x14>
  }
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	3724      	adds	r7, #36	; 0x24
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	58000400 	.word	0x58000400

0800294c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
 8002958:	4613      	mov	r3, r2
 800295a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800295c:	787b      	ldrb	r3, [r7, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002968:	e003      	b.n	8002972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	041a      	lsls	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	619a      	str	r2, [r3, #24]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002988:	4a08      	ldr	r2, [pc, #32]	; (80029ac <HAL_HSEM_FastTake+0x2c>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3320      	adds	r3, #32
 800298e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002992:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_HSEM_FastTake+0x30>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d101      	bne.n	800299c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	58026400 	.word	0x58026400
 80029b0:	80000300 	.word	0x80000300

080029b4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80029be:	4906      	ldr	r1, [pc, #24]	; (80029d8 <HAL_HSEM_Release+0x24>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	58026400 	.word	0x58026400

080029dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07f      	b.n	8002aee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe fc1c 	bl	8001240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2224      	movs	r2, #36	; 0x24
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d107      	bne.n	8002a56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	e006      	b.n	8002a64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d104      	bne.n	8002a76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_I2C_Init+0x11c>)
 8002a82:	430b      	orrs	r3, r1
 8002a84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69d9      	ldr	r1, [r3, #28]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1a      	ldr	r2, [r3, #32]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	02008000 	.word	0x02008000

08002afc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	813b      	strh	r3, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	f040 80f9 	bne.w	8002d16 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_I2C_Mem_Write+0x34>
 8002b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0ed      	b.n	8002d18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_I2C_Mem_Write+0x4e>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0e6      	b.n	8002d18 <HAL_I2C_Mem_Write+0x21c>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b52:	f7fe fe9b 	bl	800188c <HAL_GetTick>
 8002b56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2319      	movs	r3, #25
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fbcb 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0d1      	b.n	8002d18 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2221      	movs	r2, #33	; 0x21
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2240      	movs	r2, #64	; 0x40
 8002b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b9c:	88f8      	ldrh	r0, [r7, #6]
 8002b9e:	893a      	ldrh	r2, [r7, #8]
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4603      	mov	r3, r0
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fadb 	bl	8003168 <I2C_RequestMemoryWrite>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0a9      	b.n	8002d18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2bff      	cmp	r3, #255	; 0xff
 8002bcc:	d90e      	bls.n	8002bec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	22ff      	movs	r2, #255	; 0xff
 8002bd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	8979      	ldrh	r1, [r7, #10]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fd33 	bl	8003650 <I2C_TransferConfig>
 8002bea:	e00f      	b.n	8002c0c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	8979      	ldrh	r1, [r7, #10]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fd22 	bl	8003650 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 fbb5 	bl	8003380 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e07b      	b.n	8002d18 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d034      	beq.n	8002cc4 <HAL_I2C_Mem_Write+0x1c8>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d130      	bne.n	8002cc4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2180      	movs	r1, #128	; 0x80
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fb47 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e04d      	b.n	8002d18 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2bff      	cmp	r3, #255	; 0xff
 8002c84:	d90e      	bls.n	8002ca4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	22ff      	movs	r2, #255	; 0xff
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	8979      	ldrh	r1, [r7, #10]
 8002c94:	2300      	movs	r3, #0
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fcd7 	bl	8003650 <I2C_TransferConfig>
 8002ca2:	e00f      	b.n	8002cc4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	8979      	ldrh	r1, [r7, #10]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fcc6 	bl	8003650 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d19e      	bne.n	8002c0c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fb94 	bl	8003400 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e01a      	b.n	8002d18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_I2C_Mem_Write+0x224>)
 8002cf6:	400b      	ands	r3, r1
 8002cf8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	fe00e800 	.word	0xfe00e800

08002d24 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	461a      	mov	r2, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	817b      	strh	r3, [r7, #10]
 8002d36:	460b      	mov	r3, r1
 8002d38:	813b      	strh	r3, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	f040 80fd 	bne.w	8002f46 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_I2C_Mem_Read+0x34>
 8002d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0f1      	b.n	8002f48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2C_Mem_Read+0x4e>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e0ea      	b.n	8002f48 <HAL_I2C_Mem_Read+0x224>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d7a:	f7fe fd87 	bl	800188c <HAL_GetTick>
 8002d7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	2319      	movs	r3, #25
 8002d86:	2201      	movs	r2, #1
 8002d88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fab7 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0d5      	b.n	8002f48 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2222      	movs	r2, #34	; 0x22
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2240      	movs	r2, #64	; 0x40
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dc4:	88f8      	ldrh	r0, [r7, #6]
 8002dc6:	893a      	ldrh	r2, [r7, #8]
 8002dc8:	8979      	ldrh	r1, [r7, #10]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fa1b 	bl	8003210 <I2C_RequestMemoryRead>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0ad      	b.n	8002f48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2bff      	cmp	r3, #255	; 0xff
 8002df4:	d90e      	bls.n	8002e14 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	22ff      	movs	r2, #255	; 0xff
 8002dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	8979      	ldrh	r1, [r7, #10]
 8002e04:	4b52      	ldr	r3, [pc, #328]	; (8002f50 <HAL_I2C_Mem_Read+0x22c>)
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fc1f 	bl	8003650 <I2C_TransferConfig>
 8002e12:	e00f      	b.n	8002e34 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	8979      	ldrh	r1, [r7, #10]
 8002e26:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_I2C_Mem_Read+0x22c>)
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fc0e 	bl	8003650 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fa5e 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07c      	b.n	8002f48 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d034      	beq.n	8002ef4 <HAL_I2C_Mem_Read+0x1d0>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d130      	bne.n	8002ef4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fa2f 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e04d      	b.n	8002f48 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2bff      	cmp	r3, #255	; 0xff
 8002eb4:	d90e      	bls.n	8002ed4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	22ff      	movs	r2, #255	; 0xff
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	8979      	ldrh	r1, [r7, #10]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fbbf 	bl	8003650 <I2C_TransferConfig>
 8002ed2:	e00f      	b.n	8002ef4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	8979      	ldrh	r1, [r7, #10]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fbae 	bl	8003650 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d19a      	bne.n	8002e34 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fa7c 	bl	8003400 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e01a      	b.n	8002f48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2220      	movs	r2, #32
 8002f18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_I2C_Mem_Read+0x230>)
 8002f26:	400b      	ands	r3, r1
 8002f28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e000      	b.n	8002f48 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
  }
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	80002400 	.word	0x80002400
 8002f54:	fe00e800 	.word	0xfe00e800

08002f58 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	; 0x28
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	460b      	mov	r3, r1
 8002f66:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	f040 80ef 	bne.w	8003158 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f88:	d101      	bne.n	8002f8e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e0e5      	b.n	800315a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_I2C_IsDeviceReady+0x44>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e0de      	b.n	800315a <HAL_I2C_IsDeviceReady+0x202>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d105      	bne.n	8002fc6 <HAL_I2C_IsDeviceReady+0x6e>
 8002fba:	897b      	ldrh	r3, [r7, #10]
 8002fbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fc0:	4b68      	ldr	r3, [pc, #416]	; (8003164 <HAL_I2C_IsDeviceReady+0x20c>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	e004      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x78>
 8002fc6:	897b      	ldrh	r3, [r7, #10]
 8002fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fcc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002fd6:	f7fe fc59 	bl	800188c <HAL_GetTick>
 8002fda:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003008:	e034      	b.n	8003074 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d01a      	beq.n	8003048 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7fe fc3b 	bl	800188c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d302      	bcc.n	8003028 <HAL_I2C_IsDeviceReady+0xd0>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10f      	bne.n	8003048 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e088      	b.n	800315a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b20      	cmp	r3, #32
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b10      	cmp	r3, #16
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003074:	7ffb      	ldrb	r3, [r7, #31]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_I2C_IsDeviceReady+0x128>
 800307a:	7fbb      	ldrb	r3, [r7, #30]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0c4      	beq.n	800300a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b10      	cmp	r3, #16
 800308c:	d01a      	beq.n	80030c4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2200      	movs	r2, #0
 8003096:	2120      	movs	r1, #32
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f931 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e058      	b.n	800315a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2220      	movs	r2, #32
 80030ae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e04a      	b.n	800315a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	2120      	movs	r1, #32
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f916 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e03d      	b.n	800315a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2210      	movs	r2, #16
 80030e4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2220      	movs	r2, #32
 80030ec:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d118      	bne.n	8003128 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003104:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2200      	movs	r2, #0
 800310e:	2120      	movs	r1, #32
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f8f5 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e01c      	b.n	800315a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2220      	movs	r2, #32
 8003126:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3301      	adds	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	429a      	cmp	r2, r3
 8003134:	f63f af3d 	bhi.w	8002fb2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	f043 0220 	orr.w	r2, r3, #32
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	02002000 	.word	0x02002000

08003168 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	817b      	strh	r3, [r7, #10]
 800317a:	460b      	mov	r3, r1
 800317c:	813b      	strh	r3, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	8979      	ldrh	r1, [r7, #10]
 8003188:	4b20      	ldr	r3, [pc, #128]	; (800320c <I2C_RequestMemoryWrite+0xa4>)
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fa5d 	bl	8003650 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	69b9      	ldr	r1, [r7, #24]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f8f0 	bl	8003380 <I2C_WaitOnTXISFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e02c      	b.n	8003204 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031b0:	893b      	ldrh	r3, [r7, #8]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
 80031ba:	e015      	b.n	80031e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031bc:	893b      	ldrh	r3, [r7, #8]
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	69b9      	ldr	r1, [r7, #24]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f8d6 	bl	8003380 <I2C_WaitOnTXISFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e012      	b.n	8003204 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031de:	893b      	ldrh	r3, [r7, #8]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2200      	movs	r2, #0
 80031f0:	2180      	movs	r1, #128	; 0x80
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f884 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	80002000 	.word	0x80002000

08003210 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	4608      	mov	r0, r1
 800321a:	4611      	mov	r1, r2
 800321c:	461a      	mov	r2, r3
 800321e:	4603      	mov	r3, r0
 8003220:	817b      	strh	r3, [r7, #10]
 8003222:	460b      	mov	r3, r1
 8003224:	813b      	strh	r3, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	8979      	ldrh	r1, [r7, #10]
 8003230:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <I2C_RequestMemoryRead+0xa4>)
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2300      	movs	r3, #0
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fa0a 	bl	8003650 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	69b9      	ldr	r1, [r7, #24]
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f89d 	bl	8003380 <I2C_WaitOnTXISFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e02c      	b.n	80032aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d105      	bne.n	8003262 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003256:	893b      	ldrh	r3, [r7, #8]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	629a      	str	r2, [r3, #40]	; 0x28
 8003260:	e015      	b.n	800328e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003262:	893b      	ldrh	r3, [r7, #8]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	b29b      	uxth	r3, r3
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	69b9      	ldr	r1, [r7, #24]
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f883 	bl	8003380 <I2C_WaitOnTXISFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e012      	b.n	80032aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003284:	893b      	ldrh	r3, [r7, #8]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2200      	movs	r2, #0
 8003296:	2140      	movs	r1, #64	; 0x40
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f831 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	80002000 	.word	0x80002000

080032b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d103      	bne.n	80032d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2200      	movs	r2, #0
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d007      	beq.n	80032f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	619a      	str	r2, [r3, #24]
  }
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003310:	e022      	b.n	8003358 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d01e      	beq.n	8003358 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331a:	f7fe fab7 	bl	800188c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d302      	bcc.n	8003330 <I2C_WaitOnFlagUntilTimeout+0x30>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d113      	bne.n	8003358 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e00f      	b.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	bf0c      	ite	eq
 8003368:	2301      	moveq	r3, #1
 800336a:	2300      	movne	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	429a      	cmp	r2, r3
 8003374:	d0cd      	beq.n	8003312 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800338c:	e02c      	b.n	80033e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f870 	bl	8003478 <I2C_IsErrorOccurred>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e02a      	b.n	80033f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d01e      	beq.n	80033e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fe fa6f 	bl	800188c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d113      	bne.n	80033e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e007      	b.n	80033f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d1cb      	bne.n	800338e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800340c:	e028      	b.n	8003460 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f830 	bl	8003478 <I2C_IsErrorOccurred>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e026      	b.n	8003470 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003422:	f7fe fa33 	bl	800188c <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	d302      	bcc.n	8003438 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d113      	bne.n	8003460 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e007      	b.n	8003470 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b20      	cmp	r3, #32
 800346c:	d1cf      	bne.n	800340e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d075      	beq.n	8003590 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2210      	movs	r2, #16
 80034aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034ac:	e056      	b.n	800355c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d052      	beq.n	800355c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034b6:	f7fe f9e9 	bl	800188c <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d302      	bcc.n	80034cc <I2C_IsErrorOccurred+0x54>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d147      	bne.n	800355c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ee:	d12e      	bne.n	800354e <I2C_IsErrorOccurred+0xd6>
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034f6:	d02a      	beq.n	800354e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d027      	beq.n	800354e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800350c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800350e:	f7fe f9bd 	bl	800188c <HAL_GetTick>
 8003512:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003514:	e01b      	b.n	800354e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003516:	f7fe f9b9 	bl	800188c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b19      	cmp	r3, #25
 8003522:	d914      	bls.n	800354e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b20      	cmp	r3, #32
 800355a:	d1dc      	bne.n	8003516 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b20      	cmp	r3, #32
 8003568:	d003      	beq.n	8003572 <I2C_IsErrorOccurred+0xfa>
 800356a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800356e:	2b00      	cmp	r3, #0
 8003570:	d09d      	beq.n	80034ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2220      	movs	r2, #32
 8003580:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00b      	beq.n	80035dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f043 0308 	orr.w	r3, r3, #8
 80035ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00b      	beq.n	80035fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	f043 0302 	orr.w	r3, r3, #2
 80035ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01c      	beq.n	8003640 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f7ff fe56 	bl	80032b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <I2C_IsErrorOccurred+0x1d4>)
 8003618:	400b      	ands	r3, r1
 800361a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	431a      	orrs	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003644:	4618      	mov	r0, r3
 8003646:	3728      	adds	r7, #40	; 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	fe00e800 	.word	0xfe00e800

08003650 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	460b      	mov	r3, r1
 800365c:	817b      	strh	r3, [r7, #10]
 800365e:	4613      	mov	r3, r2
 8003660:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003662:	897b      	ldrh	r3, [r7, #10]
 8003664:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003668:	7a7b      	ldrb	r3, [r7, #9]
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003670:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	4313      	orrs	r3, r2
 800367a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800367e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	0d5b      	lsrs	r3, r3, #21
 800368a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <I2C_TransferConfig+0x60>)
 8003690:	430b      	orrs	r3, r1
 8003692:	43db      	mvns	r3, r3
 8003694:	ea02 0103 	and.w	r1, r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	03ff63ff 	.word	0x03ff63ff

080036b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d138      	bne.n	800373c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e032      	b.n	800373e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	; 0x24
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003706:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6819      	ldr	r1, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b20      	cmp	r3, #32
 800375e:	d139      	bne.n	80037d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800376a:	2302      	movs	r3, #2
 800376c:	e033      	b.n	80037d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2224      	movs	r2, #36	; 0x24
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800379c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
  }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e4:	b08f      	sub	sp, #60	; 0x3c
 80037e6:	af0a      	add	r7, sp, #40	; 0x28
 80037e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e116      	b.n	8003a22 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fe0a 	bl	8001428 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2203      	movs	r2, #3
 8003818:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f005 fb96 	bl	8008f64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	687e      	ldr	r6, [r7, #4]
 8003840:	466d      	mov	r5, sp
 8003842:	f106 0410 	add.w	r4, r6, #16
 8003846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800384c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003852:	e885 0003 	stmia.w	r5, {r0, r1}
 8003856:	1d33      	adds	r3, r6, #4
 8003858:	cb0e      	ldmia	r3, {r1, r2, r3}
 800385a:	6838      	ldr	r0, [r7, #0]
 800385c:	f005 fb14 	bl	8008e88 <USB_CoreInit>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0d7      	b.n	8003a22 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f005 fb84 	bl	8008f86 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	e04a      	b.n	800391a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	333d      	adds	r3, #61	; 0x3d
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	333c      	adds	r3, #60	; 0x3c
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	b298      	uxth	r0, r3
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3344      	adds	r3, #68	; 0x44
 80038c0:	4602      	mov	r2, r0
 80038c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3340      	adds	r3, #64	; 0x40
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3348      	adds	r3, #72	; 0x48
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	334c      	adds	r3, #76	; 0x4c
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3354      	adds	r3, #84	; 0x54
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	3301      	adds	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	429a      	cmp	r2, r3
 8003922:	d3af      	bcc.n	8003884 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	e044      	b.n	80039b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	3301      	adds	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3b5      	bcc.n	800392a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	687e      	ldr	r6, [r7, #4]
 80039c6:	466d      	mov	r5, sp
 80039c8:	f106 0410 	add.w	r4, r6, #16
 80039cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80039dc:	1d33      	adds	r3, r6, #4
 80039de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039e0:	6838      	ldr	r0, [r7, #0]
 80039e2:	f005 fb1d 	bl	8009020 <USB_DevInit>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e014      	b.n	8003a22 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d102      	bne.n	8003a16 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f80b 	bl	8003a2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f005 fcdb 	bl	80093d6 <USB_DevDisconnect>

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	10000003 	.word	0x10000003

08003a74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003a7c:	4b29      	ldr	r3, [pc, #164]	; (8003b24 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d00a      	beq.n	8003a9e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a88:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d001      	beq.n	8003a9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e040      	b.n	8003b1c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e03e      	b.n	8003b1c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a9e:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <HAL_PWREx_ConfigSupply+0xb0>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003aa6:	491f      	ldr	r1, [pc, #124]	; (8003b24 <HAL_PWREx_ConfigSupply+0xb0>)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003aae:	f7fd feed 	bl	800188c <HAL_GetTick>
 8003ab2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ab4:	e009      	b.n	8003aca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ab6:	f7fd fee9 	bl	800188c <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ac4:	d901      	bls.n	8003aca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e028      	b.n	8003b1c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003aca:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <HAL_PWREx_ConfigSupply+0xb0>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad6:	d1ee      	bne.n	8003ab6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b1e      	cmp	r3, #30
 8003adc:	d008      	beq.n	8003af0 <HAL_PWREx_ConfigSupply+0x7c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ae2:	d005      	beq.n	8003af0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b1d      	cmp	r3, #29
 8003ae8:	d002      	beq.n	8003af0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b2d      	cmp	r3, #45	; 0x2d
 8003aee:	d114      	bne.n	8003b1a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003af0:	f7fd fecc 	bl	800188c <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003af6:	e009      	b.n	8003b0c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003af8:	f7fd fec8 	bl	800188c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b06:	d901      	bls.n	8003b0c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e007      	b.n	8003b1c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b18:	d1ee      	bne.n	8003af8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	58024800 	.word	0x58024800

08003b28 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b36:	60d3      	str	r3, [r2, #12]
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	58024800 	.word	0x58024800

08003b48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08c      	sub	sp, #48	; 0x30
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f000 bc1d 	b.w	8004396 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8087 	beq.w	8003c78 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b6a:	4b99      	ldr	r3, [pc, #612]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b74:	4b96      	ldr	r3, [pc, #600]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d007      	beq.n	8003b90 <HAL_RCC_OscConfig+0x48>
 8003b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b82:	2b18      	cmp	r3, #24
 8003b84:	d110      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x60>
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d10b      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	4b8f      	ldr	r3, [pc, #572]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d06c      	beq.n	8003c76 <HAL_RCC_OscConfig+0x12e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d168      	bne.n	8003c76 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e3f6      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb0:	d106      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x78>
 8003bb2:	4b87      	ldr	r3, [pc, #540]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a86      	ldr	r2, [pc, #536]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e02e      	b.n	8003c1e <HAL_RCC_OscConfig+0xd6>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCC_OscConfig+0x9a>
 8003bc8:	4b81      	ldr	r3, [pc, #516]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a80      	ldr	r2, [pc, #512]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b7e      	ldr	r3, [pc, #504]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a7d      	ldr	r2, [pc, #500]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	e01d      	b.n	8003c1e <HAL_RCC_OscConfig+0xd6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bea:	d10c      	bne.n	8003c06 <HAL_RCC_OscConfig+0xbe>
 8003bec:	4b78      	ldr	r3, [pc, #480]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a77      	ldr	r2, [pc, #476]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003bf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b75      	ldr	r3, [pc, #468]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a74      	ldr	r2, [pc, #464]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	e00b      	b.n	8003c1e <HAL_RCC_OscConfig+0xd6>
 8003c06:	4b72      	ldr	r3, [pc, #456]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a71      	ldr	r2, [pc, #452]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b6f      	ldr	r3, [pc, #444]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6e      	ldr	r2, [pc, #440]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d013      	beq.n	8003c4e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fd fe31 	bl	800188c <HAL_GetTick>
 8003c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c2e:	f7fd fe2d 	bl	800188c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b64      	cmp	r3, #100	; 0x64
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e3aa      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c40:	4b63      	ldr	r3, [pc, #396]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0xe6>
 8003c4c:	e014      	b.n	8003c78 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4e:	f7fd fe1d 	bl	800188c <HAL_GetTick>
 8003c52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c56:	f7fd fe19 	bl	800188c <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b64      	cmp	r3, #100	; 0x64
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e396      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c68:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f0      	bne.n	8003c56 <HAL_RCC_OscConfig+0x10e>
 8003c74:	e000      	b.n	8003c78 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c76:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80cb 	beq.w	8003e1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c86:	4b52      	ldr	r3, [pc, #328]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c8e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c90:	4b4f      	ldr	r3, [pc, #316]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <HAL_RCC_OscConfig+0x164>
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	2b18      	cmp	r3, #24
 8003ca0:	d156      	bne.n	8003d50 <HAL_RCC_OscConfig+0x208>
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d151      	bne.n	8003d50 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cac:	4b48      	ldr	r3, [pc, #288]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x17c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e368      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cc4:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 0219 	bic.w	r2, r3, #25
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	493f      	ldr	r1, [pc, #252]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cd6:	f7fd fdd9 	bl	800188c <HAL_GetTick>
 8003cda:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cde:	f7fd fdd5 	bl	800188c <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e352      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cf0:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfc:	f7fd fdf6 	bl	80018ec <HAL_GetREVID>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d817      	bhi.n	8003d3a <HAL_RCC_OscConfig+0x1f2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d108      	bne.n	8003d24 <HAL_RCC_OscConfig+0x1dc>
 8003d12:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d1a:	4a2d      	ldr	r2, [pc, #180]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d20:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d22:	e07b      	b.n	8003e1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d24:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	031b      	lsls	r3, r3, #12
 8003d32:	4927      	ldr	r1, [pc, #156]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d38:	e070      	b.n	8003e1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3a:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	061b      	lsls	r3, r3, #24
 8003d48:	4921      	ldr	r1, [pc, #132]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d4e:	e065      	b.n	8003e1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d048      	beq.n	8003dea <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d58:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f023 0219 	bic.w	r2, r3, #25
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	491a      	ldr	r1, [pc, #104]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6a:	f7fd fd8f 	bl	800188c <HAL_GetTick>
 8003d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d72:	f7fd fd8b 	bl	800188c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e308      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d90:	f7fd fdac 	bl	80018ec <HAL_GetREVID>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d81a      	bhi.n	8003dd4 <HAL_RCC_OscConfig+0x28c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	d108      	bne.n	8003db8 <HAL_RCC_OscConfig+0x270>
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003dae:	4a08      	ldr	r2, [pc, #32]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db4:	6053      	str	r3, [r2, #4]
 8003db6:	e031      	b.n	8003e1c <HAL_RCC_OscConfig+0x2d4>
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	031b      	lsls	r3, r3, #12
 8003dc6:	4902      	ldr	r1, [pc, #8]	; (8003dd0 <HAL_RCC_OscConfig+0x288>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
 8003dcc:	e026      	b.n	8003e1c <HAL_RCC_OscConfig+0x2d4>
 8003dce:	bf00      	nop
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	4b9a      	ldr	r3, [pc, #616]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	061b      	lsls	r3, r3, #24
 8003de2:	4997      	ldr	r1, [pc, #604]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
 8003de8:	e018      	b.n	8003e1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dea:	4b95      	ldr	r3, [pc, #596]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a94      	ldr	r2, [pc, #592]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df6:	f7fd fd49 	bl	800188c <HAL_GetTick>
 8003dfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dfe:	f7fd fd45 	bl	800188c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e2c2      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e10:	4b8b      	ldr	r3, [pc, #556]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f0      	bne.n	8003dfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80a9 	beq.w	8003f7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2a:	4b85      	ldr	r3, [pc, #532]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e34:	4b82      	ldr	r3, [pc, #520]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d007      	beq.n	8003e50 <HAL_RCC_OscConfig+0x308>
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b18      	cmp	r3, #24
 8003e44:	d13a      	bne.n	8003ebc <HAL_RCC_OscConfig+0x374>
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d135      	bne.n	8003ebc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e50:	4b7b      	ldr	r3, [pc, #492]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_OscConfig+0x320>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	2b80      	cmp	r3, #128	; 0x80
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e296      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e68:	f7fd fd40 	bl	80018ec <HAL_GetREVID>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d817      	bhi.n	8003ea6 <HAL_RCC_OscConfig+0x35e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	d108      	bne.n	8003e90 <HAL_RCC_OscConfig+0x348>
 8003e7e:	4b70      	ldr	r3, [pc, #448]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e86:	4a6e      	ldr	r2, [pc, #440]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003e88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e8c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e8e:	e075      	b.n	8003f7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e90:	4b6b      	ldr	r3, [pc, #428]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	069b      	lsls	r3, r3, #26
 8003e9e:	4968      	ldr	r1, [pc, #416]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ea4:	e06a      	b.n	8003f7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ea6:	4b66      	ldr	r3, [pc, #408]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	4962      	ldr	r1, [pc, #392]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003eba:	e05f      	b.n	8003f7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d042      	beq.n	8003f4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ec4:	4b5e      	ldr	r3, [pc, #376]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a5d      	ldr	r2, [pc, #372]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd fcdc 	bl	800188c <HAL_GetTick>
 8003ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ed8:	f7fd fcd8 	bl	800188c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e255      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eea:	4b55      	ldr	r3, [pc, #340]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ef6:	f7fd fcf9 	bl	80018ec <HAL_GetREVID>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d817      	bhi.n	8003f34 <HAL_RCC_OscConfig+0x3ec>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d108      	bne.n	8003f1e <HAL_RCC_OscConfig+0x3d6>
 8003f0c:	4b4c      	ldr	r3, [pc, #304]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f14:	4a4a      	ldr	r2, [pc, #296]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f1a:	6053      	str	r3, [r2, #4]
 8003f1c:	e02e      	b.n	8003f7c <HAL_RCC_OscConfig+0x434>
 8003f1e:	4b48      	ldr	r3, [pc, #288]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	069b      	lsls	r3, r3, #26
 8003f2c:	4944      	ldr	r1, [pc, #272]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
 8003f32:	e023      	b.n	8003f7c <HAL_RCC_OscConfig+0x434>
 8003f34:	4b42      	ldr	r3, [pc, #264]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	493f      	ldr	r1, [pc, #252]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60cb      	str	r3, [r1, #12]
 8003f48:	e018      	b.n	8003f7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f4a:	4b3d      	ldr	r3, [pc, #244]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a3c      	ldr	r2, [pc, #240]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fd fc99 	bl	800188c <HAL_GetTick>
 8003f5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f5e:	f7fd fc95 	bl	800188c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e212      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f70:	4b33      	ldr	r3, [pc, #204]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d036      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d019      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f90:	4b2b      	ldr	r3, [pc, #172]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f94:	4a2a      	ldr	r2, [pc, #168]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9c:	f7fd fc76 	bl	800188c <HAL_GetTick>
 8003fa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa4:	f7fd fc72 	bl	800188c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e1ef      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x45c>
 8003fc2:	e018      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc4:	4b1e      	ldr	r3, [pc, #120]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd0:	f7fd fc5c 	bl	800188c <HAL_GetTick>
 8003fd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd8:	f7fd fc58 	bl	800188c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e1d5      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8003fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d039      	beq.n	8004076 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d01c      	beq.n	8004044 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800400a:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a0c      	ldr	r2, [pc, #48]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8004010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004014:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004016:	f7fd fc39 	bl	800188c <HAL_GetTick>
 800401a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800401e:	f7fd fc35 	bl	800188c <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1b2      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_RCC_OscConfig+0x4f8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x4d6>
 800403c:	e01b      	b.n	8004076 <HAL_RCC_OscConfig+0x52e>
 800403e:	bf00      	nop
 8004040:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004044:	4b9b      	ldr	r3, [pc, #620]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a9a      	ldr	r2, [pc, #616]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 800404a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800404e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004050:	f7fd fc1c 	bl	800188c <HAL_GetTick>
 8004054:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004058:	f7fd fc18 	bl	800188c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e195      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800406a:	4b92      	ldr	r3, [pc, #584]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8081 	beq.w	8004186 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004084:	4b8c      	ldr	r3, [pc, #560]	; (80042b8 <HAL_RCC_OscConfig+0x770>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a8b      	ldr	r2, [pc, #556]	; (80042b8 <HAL_RCC_OscConfig+0x770>)
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004090:	f7fd fbfc 	bl	800188c <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004098:	f7fd fbf8 	bl	800188c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e175      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040aa:	4b83      	ldr	r3, [pc, #524]	; (80042b8 <HAL_RCC_OscConfig+0x770>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d106      	bne.n	80040cc <HAL_RCC_OscConfig+0x584>
 80040be:	4b7d      	ldr	r3, [pc, #500]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	4a7c      	ldr	r2, [pc, #496]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ca:	e02d      	b.n	8004128 <HAL_RCC_OscConfig+0x5e0>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10c      	bne.n	80040ee <HAL_RCC_OscConfig+0x5a6>
 80040d4:	4b77      	ldr	r3, [pc, #476]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	4a76      	ldr	r2, [pc, #472]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	6713      	str	r3, [r2, #112]	; 0x70
 80040e0:	4b74      	ldr	r3, [pc, #464]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e4:	4a73      	ldr	r2, [pc, #460]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80040e6:	f023 0304 	bic.w	r3, r3, #4
 80040ea:	6713      	str	r3, [r2, #112]	; 0x70
 80040ec:	e01c      	b.n	8004128 <HAL_RCC_OscConfig+0x5e0>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b05      	cmp	r3, #5
 80040f4:	d10c      	bne.n	8004110 <HAL_RCC_OscConfig+0x5c8>
 80040f6:	4b6f      	ldr	r3, [pc, #444]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	4a6e      	ldr	r2, [pc, #440]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80040fc:	f043 0304 	orr.w	r3, r3, #4
 8004100:	6713      	str	r3, [r2, #112]	; 0x70
 8004102:	4b6c      	ldr	r3, [pc, #432]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	4a6b      	ldr	r2, [pc, #428]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	6713      	str	r3, [r2, #112]	; 0x70
 800410e:	e00b      	b.n	8004128 <HAL_RCC_OscConfig+0x5e0>
 8004110:	4b68      	ldr	r3, [pc, #416]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	4a67      	ldr	r2, [pc, #412]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004116:	f023 0301 	bic.w	r3, r3, #1
 800411a:	6713      	str	r3, [r2, #112]	; 0x70
 800411c:	4b65      	ldr	r3, [pc, #404]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	4a64      	ldr	r2, [pc, #400]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004122:	f023 0304 	bic.w	r3, r3, #4
 8004126:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d015      	beq.n	800415c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004130:	f7fd fbac 	bl	800188c <HAL_GetTick>
 8004134:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004136:	e00a      	b.n	800414e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004138:	f7fd fba8 	bl	800188c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f241 3288 	movw	r2, #5000	; 0x1388
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e123      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800414e:	4b59      	ldr	r3, [pc, #356]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0ee      	beq.n	8004138 <HAL_RCC_OscConfig+0x5f0>
 800415a:	e014      	b.n	8004186 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fd fb96 	bl	800188c <HAL_GetTick>
 8004160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004162:	e00a      	b.n	800417a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fd fb92 	bl	800188c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e10d      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800417a:	4b4e      	ldr	r3, [pc, #312]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ee      	bne.n	8004164 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8102 	beq.w	8004394 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004190:	4b48      	ldr	r3, [pc, #288]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004198:	2b18      	cmp	r3, #24
 800419a:	f000 80bd 	beq.w	8004318 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	f040 809e 	bne.w	80042e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a8:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a41      	ldr	r2, [pc, #260]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80041ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fb6a 	bl	800188c <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fd fb66 	bl	800188c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e0e3      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041ce:	4b39      	ldr	r3, [pc, #228]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041da:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80041dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041de:	4b37      	ldr	r3, [pc, #220]	; (80042bc <HAL_RCC_OscConfig+0x774>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041ea:	0112      	lsls	r2, r2, #4
 80041ec:	430a      	orrs	r2, r1
 80041ee:	4931      	ldr	r1, [pc, #196]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	628b      	str	r3, [r1, #40]	; 0x28
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	3b01      	subs	r3, #1
 80041fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004202:	3b01      	subs	r3, #1
 8004204:	025b      	lsls	r3, r3, #9
 8004206:	b29b      	uxth	r3, r3
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	3b01      	subs	r3, #1
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421c:	3b01      	subs	r3, #1
 800421e:	061b      	lsls	r3, r3, #24
 8004220:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004224:	4923      	ldr	r1, [pc, #140]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004226:	4313      	orrs	r3, r2
 8004228:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800422a:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004236:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423a:	4b21      	ldr	r3, [pc, #132]	; (80042c0 <HAL_RCC_OscConfig+0x778>)
 800423c:	4013      	ands	r3, r2
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004242:	00d2      	lsls	r2, r2, #3
 8004244:	491b      	ldr	r1, [pc, #108]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	f023 020c 	bic.w	r2, r3, #12
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4917      	ldr	r1, [pc, #92]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800425c:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	f023 0202 	bic.w	r2, r3, #2
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004268:	4912      	ldr	r1, [pc, #72]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	4a10      	ldr	r2, [pc, #64]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004278:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004284:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 800428c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004290:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a04      	ldr	r2, [pc, #16]	; (80042b4 <HAL_RCC_OscConfig+0x76c>)
 80042a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fd faef 	bl	800188c <HAL_GetTick>
 80042ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042b0:	e011      	b.n	80042d6 <HAL_RCC_OscConfig+0x78e>
 80042b2:	bf00      	nop
 80042b4:	58024400 	.word	0x58024400
 80042b8:	58024800 	.word	0x58024800
 80042bc:	fffffc0c 	.word	0xfffffc0c
 80042c0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c4:	f7fd fae2 	bl	800188c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e05f      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042d6:	4b32      	ldr	r3, [pc, #200]	; (80043a0 <HAL_RCC_OscConfig+0x858>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x77c>
 80042e2:	e057      	b.n	8004394 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e4:	4b2e      	ldr	r3, [pc, #184]	; (80043a0 <HAL_RCC_OscConfig+0x858>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2d      	ldr	r2, [pc, #180]	; (80043a0 <HAL_RCC_OscConfig+0x858>)
 80042ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fd facc 	bl	800188c <HAL_GetTick>
 80042f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fd fac8 	bl	800188c <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e045      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800430a:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <HAL_RCC_OscConfig+0x858>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x7b0>
 8004316:	e03d      	b.n	8004394 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004318:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <HAL_RCC_OscConfig+0x858>)
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <HAL_RCC_OscConfig+0x858>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2b01      	cmp	r3, #1
 800432a:	d031      	beq.n	8004390 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f003 0203 	and.w	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d12a      	bne.n	8004390 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d122      	bne.n	8004390 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004356:	429a      	cmp	r2, r3
 8004358:	d11a      	bne.n	8004390 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	0a5b      	lsrs	r3, r3, #9
 800435e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004366:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d111      	bne.n	8004390 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	0c1b      	lsrs	r3, r3, #16
 8004370:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d108      	bne.n	8004390 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	0e1b      	lsrs	r3, r3, #24
 8004382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800438c:	429a      	cmp	r2, r3
 800438e:	d001      	beq.n	8004394 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3730      	adds	r7, #48	; 0x30
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	58024400 	.word	0x58024400

080043a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e19c      	b.n	80046f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043b8:	4b8a      	ldr	r3, [pc, #552]	; (80045e4 <HAL_RCC_ClockConfig+0x240>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d910      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b87      	ldr	r3, [pc, #540]	; (80045e4 <HAL_RCC_ClockConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 020f 	bic.w	r2, r3, #15
 80043ce:	4985      	ldr	r1, [pc, #532]	; (80045e4 <HAL_RCC_ClockConfig+0x240>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b83      	ldr	r3, [pc, #524]	; (80045e4 <HAL_RCC_ClockConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e184      	b.n	80046f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d010      	beq.n	8004416 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	4b7b      	ldr	r3, [pc, #492]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004400:	429a      	cmp	r2, r3
 8004402:	d908      	bls.n	8004416 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004404:	4b78      	ldr	r3, [pc, #480]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	4975      	ldr	r1, [pc, #468]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004412:	4313      	orrs	r3, r2
 8004414:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d010      	beq.n	8004444 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	4b70      	ldr	r3, [pc, #448]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800442e:	429a      	cmp	r2, r3
 8004430:	d908      	bls.n	8004444 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004432:	4b6d      	ldr	r3, [pc, #436]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	496a      	ldr	r1, [pc, #424]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004440:	4313      	orrs	r3, r2
 8004442:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	d010      	beq.n	8004472 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699a      	ldr	r2, [r3, #24]
 8004454:	4b64      	ldr	r3, [pc, #400]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800445c:	429a      	cmp	r2, r3
 800445e:	d908      	bls.n	8004472 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004460:	4b61      	ldr	r3, [pc, #388]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	495e      	ldr	r1, [pc, #376]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 800446e:	4313      	orrs	r3, r2
 8004470:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d010      	beq.n	80044a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	4b59      	ldr	r3, [pc, #356]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800448a:	429a      	cmp	r2, r3
 800448c:	d908      	bls.n	80044a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800448e:	4b56      	ldr	r3, [pc, #344]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	4953      	ldr	r1, [pc, #332]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 800449c:	4313      	orrs	r3, r2
 800449e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d010      	beq.n	80044ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	4b4d      	ldr	r3, [pc, #308]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d908      	bls.n	80044ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044bc:	4b4a      	ldr	r3, [pc, #296]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f023 020f 	bic.w	r2, r3, #15
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4947      	ldr	r1, [pc, #284]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d055      	beq.n	8004586 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80044da:	4b43      	ldr	r3, [pc, #268]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	4940      	ldr	r1, [pc, #256]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d107      	bne.n	8004504 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044f4:	4b3c      	ldr	r3, [pc, #240]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d121      	bne.n	8004544 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0f6      	b.n	80046f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d107      	bne.n	800451c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800450c:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d115      	bne.n	8004544 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0ea      	b.n	80046f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d107      	bne.n	8004534 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004524:	4b30      	ldr	r3, [pc, #192]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0de      	b.n	80046f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004534:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0d6      	b.n	80046f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004544:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f023 0207 	bic.w	r2, r3, #7
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4925      	ldr	r1, [pc, #148]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004552:	4313      	orrs	r3, r2
 8004554:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004556:	f7fd f999 	bl	800188c <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455c:	e00a      	b.n	8004574 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455e:	f7fd f995 	bl	800188c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	; 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e0be      	b.n	80046f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004574:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	429a      	cmp	r2, r3
 8004584:	d1eb      	bne.n	800455e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d010      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	429a      	cmp	r2, r3
 80045a0:	d208      	bcs.n	80045b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a2:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f023 020f 	bic.w	r2, r3, #15
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	490e      	ldr	r1, [pc, #56]	; (80045e8 <HAL_RCC_ClockConfig+0x244>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_ClockConfig+0x240>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d214      	bcs.n	80045ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <HAL_RCC_ClockConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 020f 	bic.w	r2, r3, #15
 80045ca:	4906      	ldr	r1, [pc, #24]	; (80045e4 <HAL_RCC_ClockConfig+0x240>)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <HAL_RCC_ClockConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d005      	beq.n	80045ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e086      	b.n	80046f2 <HAL_RCC_ClockConfig+0x34e>
 80045e4:	52002000 	.word	0x52002000
 80045e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d010      	beq.n	800461a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	4b3f      	ldr	r3, [pc, #252]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004604:	429a      	cmp	r2, r3
 8004606:	d208      	bcs.n	800461a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004608:	4b3c      	ldr	r3, [pc, #240]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	4939      	ldr	r1, [pc, #228]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 8004616:	4313      	orrs	r3, r2
 8004618:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d010      	beq.n	8004648 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	4b34      	ldr	r3, [pc, #208]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004632:	429a      	cmp	r2, r3
 8004634:	d208      	bcs.n	8004648 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004636:	4b31      	ldr	r3, [pc, #196]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	492e      	ldr	r1, [pc, #184]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 8004644:	4313      	orrs	r3, r2
 8004646:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d010      	beq.n	8004676 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	4b28      	ldr	r3, [pc, #160]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004660:	429a      	cmp	r2, r3
 8004662:	d208      	bcs.n	8004676 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004664:	4b25      	ldr	r3, [pc, #148]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	4922      	ldr	r1, [pc, #136]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 8004672:	4313      	orrs	r3, r2
 8004674:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d010      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800468e:	429a      	cmp	r2, r3
 8004690:	d208      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004692:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	4917      	ldr	r1, [pc, #92]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046a4:	f000 f834 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	4912      	ldr	r1, [pc, #72]	; (8004700 <HAL_RCC_ClockConfig+0x35c>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
 80046c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046c2:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <HAL_RCC_ClockConfig+0x358>)
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	4a0d      	ldr	r2, [pc, #52]	; (8004700 <HAL_RCC_ClockConfig+0x35c>)
 80046cc:	5cd3      	ldrb	r3, [r2, r3]
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	fa22 f303 	lsr.w	r3, r2, r3
 80046d8:	4a0a      	ldr	r2, [pc, #40]	; (8004704 <HAL_RCC_ClockConfig+0x360>)
 80046da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046dc:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x364>)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <HAL_RCC_ClockConfig+0x368>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fd f886 	bl	80017f8 <HAL_InitTick>
 80046ec:	4603      	mov	r3, r0
 80046ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	58024400 	.word	0x58024400
 8004700:	0800c250 	.word	0x0800c250
 8004704:	24000004 	.word	0x24000004
 8004708:	24000000 	.word	0x24000000
 800470c:	24000008 	.word	0x24000008

08004710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	; 0x24
 8004714:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004716:	4bb3      	ldr	r3, [pc, #716]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800471e:	2b18      	cmp	r3, #24
 8004720:	f200 8155 	bhi.w	80049ce <HAL_RCC_GetSysClockFreq+0x2be>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004791 	.word	0x08004791
 8004730:	080049cf 	.word	0x080049cf
 8004734:	080049cf 	.word	0x080049cf
 8004738:	080049cf 	.word	0x080049cf
 800473c:	080049cf 	.word	0x080049cf
 8004740:	080049cf 	.word	0x080049cf
 8004744:	080049cf 	.word	0x080049cf
 8004748:	080049cf 	.word	0x080049cf
 800474c:	080047b7 	.word	0x080047b7
 8004750:	080049cf 	.word	0x080049cf
 8004754:	080049cf 	.word	0x080049cf
 8004758:	080049cf 	.word	0x080049cf
 800475c:	080049cf 	.word	0x080049cf
 8004760:	080049cf 	.word	0x080049cf
 8004764:	080049cf 	.word	0x080049cf
 8004768:	080049cf 	.word	0x080049cf
 800476c:	080047bd 	.word	0x080047bd
 8004770:	080049cf 	.word	0x080049cf
 8004774:	080049cf 	.word	0x080049cf
 8004778:	080049cf 	.word	0x080049cf
 800477c:	080049cf 	.word	0x080049cf
 8004780:	080049cf 	.word	0x080049cf
 8004784:	080049cf 	.word	0x080049cf
 8004788:	080049cf 	.word	0x080049cf
 800478c:	080047c3 	.word	0x080047c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004790:	4b94      	ldr	r3, [pc, #592]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d009      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800479c:	4b91      	ldr	r3, [pc, #580]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	08db      	lsrs	r3, r3, #3
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	4a90      	ldr	r2, [pc, #576]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80047ae:	e111      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80047b0:	4b8d      	ldr	r3, [pc, #564]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047b2:	61bb      	str	r3, [r7, #24]
    break;
 80047b4:	e10e      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80047b6:	4b8d      	ldr	r3, [pc, #564]	; (80049ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047b8:	61bb      	str	r3, [r7, #24]
    break;
 80047ba:	e10b      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80047bc:	4b8c      	ldr	r3, [pc, #560]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80047be:	61bb      	str	r3, [r7, #24]
    break;
 80047c0:	e108      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047c2:	4b88      	ldr	r3, [pc, #544]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80047cc:	4b85      	ldr	r3, [pc, #532]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047d8:	4b82      	ldr	r3, [pc, #520]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80047e2:	4b80      	ldr	r3, [pc, #512]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	08db      	lsrs	r3, r3, #3
 80047e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80e1 	beq.w	80049c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b02      	cmp	r3, #2
 800480a:	f000 8083 	beq.w	8004914 <HAL_RCC_GetSysClockFreq+0x204>
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b02      	cmp	r3, #2
 8004812:	f200 80a1 	bhi.w	8004958 <HAL_RCC_GetSysClockFreq+0x248>
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x114>
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d056      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004822:	e099      	b.n	8004958 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004824:	4b6f      	ldr	r3, [pc, #444]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d02d      	beq.n	800488c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004830:	4b6c      	ldr	r3, [pc, #432]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	08db      	lsrs	r3, r3, #3
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	4a6b      	ldr	r2, [pc, #428]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
 8004840:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485a:	4b62      	ldr	r3, [pc, #392]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486a:	ed97 6a02 	vldr	s12, [r7, #8]
 800486e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80049f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800487e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800488a:	e087      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004896:	eddf 6a58 	vldr	s13, [pc, #352]	; 80049f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800489a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489e:	4b51      	ldr	r3, [pc, #324]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80048b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80049f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ce:	e065      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80049fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80048de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e2:	4b40      	ldr	r3, [pc, #256]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80049f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004912:	e043      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004a00 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004926:	4b2f      	ldr	r3, [pc, #188]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004936:	ed97 6a02 	vldr	s12, [r7, #8]
 800493a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80049f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800493e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800494a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800494e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004956:	e021      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	eddf 6a26 	vldr	s13, [pc, #152]	; 80049fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800496a:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497a:	ed97 6a02 	vldr	s12, [r7, #8]
 800497e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80049f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800498a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800498e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800499a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800499c:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	0a5b      	lsrs	r3, r3, #9
 80049a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a6:	3301      	adds	r3, #1
 80049a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c0:	ee17 3a90 	vmov	r3, s15
 80049c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80049c6:	e005      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61bb      	str	r3, [r7, #24]
    break;
 80049cc:	e002      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049d0:	61bb      	str	r3, [r7, #24]
    break;
 80049d2:	bf00      	nop
  }

  return sysclockfreq;
 80049d4:	69bb      	ldr	r3, [r7, #24]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3724      	adds	r7, #36	; 0x24
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	58024400 	.word	0x58024400
 80049e8:	03d09000 	.word	0x03d09000
 80049ec:	003d0900 	.word	0x003d0900
 80049f0:	007a1200 	.word	0x007a1200
 80049f4:	46000000 	.word	0x46000000
 80049f8:	4c742400 	.word	0x4c742400
 80049fc:	4a742400 	.word	0x4a742400
 8004a00:	4af42400 	.word	0x4af42400

08004a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a0a:	f7ff fe81 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	490f      	ldr	r1, [pc, #60]	; (8004a58 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a1c:	5ccb      	ldrb	r3, [r1, r3]
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	fa22 f303 	lsr.w	r3, r2, r3
 8004a26:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a32:	5cd3      	ldrb	r3, [r2, r3]
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3e:	4a07      	ldr	r2, [pc, #28]	; (8004a5c <HAL_RCC_GetHCLKFreq+0x58>)
 8004a40:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a42:	4a07      	ldr	r2, [pc, #28]	; (8004a60 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <HAL_RCC_GetHCLKFreq+0x58>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	58024400 	.word	0x58024400
 8004a58:	0800c250 	.word	0x0800c250
 8004a5c:	24000004 	.word	0x24000004
 8004a60:	24000000 	.word	0x24000000

08004a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004a68:	f7ff ffcc 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4904      	ldr	r1, [pc, #16]	; (8004a8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a7a:	5ccb      	ldrb	r3, [r1, r3]
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	58024400 	.word	0x58024400
 8004a8c:	0800c250 	.word	0x0800c250

08004a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a94:	f7ff ffb6 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4904      	ldr	r1, [pc, #16]	; (8004ab8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	58024400 	.word	0x58024400
 8004ab8:	0800c250 	.word	0x0800c250

08004abc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ac8:	2300      	movs	r3, #0
 8004aca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d03f      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004adc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ae0:	d02a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ae2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ae6:	d824      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aec:	d018      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004af2:	d81e      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004afc:	d007      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004afe:	e018      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b00:	4ba3      	ldr	r3, [pc, #652]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	4aa2      	ldr	r2, [pc, #648]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004b0c:	e015      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3304      	adds	r3, #4
 8004b12:	2102      	movs	r1, #2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 f9d5 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004b1e:	e00c      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3324      	adds	r3, #36	; 0x24
 8004b24:	2102      	movs	r1, #2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f001 fa7e 	bl	8006028 <RCCEx_PLL3_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004b30:	e003      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
      break;
 8004b36:	e000      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b40:	4b93      	ldr	r3, [pc, #588]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4c:	4990      	ldr	r1, [pc, #576]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	650b      	str	r3, [r1, #80]	; 0x50
 8004b52:	e001      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d03d      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d826      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b6c:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004b89 	.word	0x08004b89
 8004b78:	08004b97 	.word	0x08004b97
 8004b7c:	08004ba9 	.word	0x08004ba9
 8004b80:	08004bc1 	.word	0x08004bc1
 8004b84:	08004bc1 	.word	0x08004bc1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b88:	4b81      	ldr	r3, [pc, #516]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	4a80      	ldr	r2, [pc, #512]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b94:	e015      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 f991 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ba6:	e00c      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3324      	adds	r3, #36	; 0x24
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f001 fa3a 	bl	8006028 <RCCEx_PLL3_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bb8:	e003      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bc8:	4b71      	ldr	r3, [pc, #452]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bcc:	f023 0207 	bic.w	r2, r3, #7
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	496e      	ldr	r1, [pc, #440]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	650b      	str	r3, [r1, #80]	; 0x50
 8004bda:	e001      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
 8004bde:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d042      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf4:	d02b      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfa:	d825      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004bfc:	2bc0      	cmp	r3, #192	; 0xc0
 8004bfe:	d028      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c00:	2bc0      	cmp	r3, #192	; 0xc0
 8004c02:	d821      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004c04:	2b80      	cmp	r3, #128	; 0x80
 8004c06:	d016      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004c08:	2b80      	cmp	r3, #128	; 0x80
 8004c0a:	d81d      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d007      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004c14:	e018      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c16:	4b5e      	ldr	r3, [pc, #376]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	4a5d      	ldr	r2, [pc, #372]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c22:	e017      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 f94a 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c34:	e00e      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3324      	adds	r3, #36	; 0x24
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 f9f3 	bl	8006028 <RCCEx_PLL3_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c46:	e005      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4c:	e002      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c5a:	4b4d      	ldr	r3, [pc, #308]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	494a      	ldr	r1, [pc, #296]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	650b      	str	r3, [r1, #80]	; 0x50
 8004c6c:	e001      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
 8004c70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d049      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c88:	d030      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004c8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c8e:	d82a      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c94:	d02c      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004c96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c9a:	d824      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca0:	d018      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca6:	d81e      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004cac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cb0:	d007      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004cb2:	e018      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb4:	4b36      	ldr	r3, [pc, #216]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	4a35      	ldr	r2, [pc, #212]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cc0:	e017      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 f8fb 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004cd2:	e00e      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3324      	adds	r3, #36	; 0x24
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 f9a4 	bl	8006028 <RCCEx_PLL3_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ce4:	e005      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cea:	e002      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004cec:	bf00      	nop
 8004cee:	e000      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004cf8:	4b25      	ldr	r3, [pc, #148]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d06:	4922      	ldr	r1, [pc, #136]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	658b      	str	r3, [r1, #88]	; 0x58
 8004d0c:	e001      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d04b      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d28:	d030      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004d2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d2e:	d82a      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d34:	d02e      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004d36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d3a:	d824      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d40:	d018      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d46:	d81e      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d50:	d007      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004d52:	e018      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d54:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d60:	e019      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3304      	adds	r3, #4
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 f8ab 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004d72:	e010      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3324      	adds	r3, #36	; 0x24
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 f954 	bl	8006028 <RCCEx_PLL3_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d84:	e007      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8a:	e004      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004d8c:	bf00      	nop
 8004d8e:	e002      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004d90:	58024400 	.word	0x58024400
      break;
 8004d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10a      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d9c:	4b99      	ldr	r3, [pc, #612]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004daa:	4996      	ldr	r1, [pc, #600]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	658b      	str	r3, [r1, #88]	; 0x58
 8004db0:	e001      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d032      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc6:	2b30      	cmp	r3, #48	; 0x30
 8004dc8:	d01c      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004dca:	2b30      	cmp	r3, #48	; 0x30
 8004dcc:	d817      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d00c      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d813      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004dda:	2b10      	cmp	r3, #16
 8004ddc:	d10f      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dde:	4b89      	ldr	r3, [pc, #548]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	4a88      	ldr	r2, [pc, #544]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004dea:	e00e      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	2102      	movs	r1, #2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f001 f866 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004dfc:	e005      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
      break;
 8004e02:	e002      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004e04:	bf00      	nop
 8004e06:	e000      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e10:	4b7c      	ldr	r3, [pc, #496]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1c:	4979      	ldr	r1, [pc, #484]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e22:	e001      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
 8004e26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d047      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e3c:	d030      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e42:	d82a      	bhi.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004e44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e48:	d02c      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004e4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e4e:	d824      	bhi.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e54:	d018      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5a:	d81e      	bhi.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e64:	d007      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004e66:	e018      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e68:	4b66      	ldr	r3, [pc, #408]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	4a65      	ldr	r2, [pc, #404]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e74:	e017      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f001 f821 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004e82:	4603      	mov	r3, r0
 8004e84:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e86:	e00e      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3324      	adds	r3, #36	; 0x24
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f001 f8ca 	bl	8006028 <RCCEx_PLL3_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e98:	e005      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9e:	e002      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004ea0:	bf00      	nop
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d109      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004eac:	4b55      	ldr	r3, [pc, #340]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb8:	4952      	ldr	r1, [pc, #328]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	650b      	str	r3, [r1, #80]	; 0x50
 8004ebe:	e001      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d049      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed8:	d02e      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004eda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ede:	d828      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004ee0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ee4:	d02a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004ee6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eea:	d822      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004eec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ef0:	d026      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004ef2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ef6:	d81c      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004ef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004efc:	d010      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f02:	d816      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01d      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d111      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3304      	adds	r3, #4
 8004f12:	2101      	movs	r1, #1
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 ffd5 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004f1e:	e012      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3324      	adds	r3, #36	; 0x24
 8004f24:	2101      	movs	r1, #1
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 f87e 	bl	8006028 <RCCEx_PLL3_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004f30:	e009      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	75fb      	strb	r3, [r7, #23]
      break;
 8004f36:	e006      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004f38:	bf00      	nop
 8004f3a:	e004      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004f3c:	bf00      	nop
 8004f3e:	e002      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004f40:	bf00      	nop
 8004f42:	e000      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f4c:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f50:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f58:	492a      	ldr	r1, [pc, #168]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	650b      	str	r3, [r1, #80]	; 0x50
 8004f5e:	e001      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d04d      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f7a:	d02e      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f80:	d828      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d02a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8c:	d822      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004f8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f92:	d026      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004f94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f98:	d81c      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9e:	d010      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa4:	d816      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fae:	d111      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 ff84 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004fc0:	e012      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3324      	adds	r3, #36	; 0x24
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 f82d 	bl	8006028 <RCCEx_PLL3_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004fd2:	e009      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd8:	e006      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e004      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e002      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10c      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ffc:	4901      	ldr	r1, [pc, #4]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	658b      	str	r3, [r1, #88]	; 0x58
 8005002:	e003      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005004:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d02f      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800501c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005020:	d00e      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005026:	d814      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d015      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800502c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005030:	d10f      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005032:	4baf      	ldr	r3, [pc, #700]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	4aae      	ldr	r2, [pc, #696]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800503c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800503e:	e00c      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	2101      	movs	r1, #1
 8005046:	4618      	mov	r0, r3
 8005048:	f000 ff3c 	bl	8005ec4 <RCCEx_PLL2_Config>
 800504c:	4603      	mov	r3, r0
 800504e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005050:	e003      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	75fb      	strb	r3, [r7, #23]
      break;
 8005056:	e000      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005060:	4ba3      	ldr	r3, [pc, #652]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005064:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800506c:	49a0      	ldr	r1, [pc, #640]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800506e:	4313      	orrs	r3, r2
 8005070:	650b      	str	r3, [r1, #80]	; 0x50
 8005072:	e001      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005074:	7dfb      	ldrb	r3, [r7, #23]
 8005076:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d032      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005088:	2b03      	cmp	r3, #3
 800508a:	d81b      	bhi.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800508c:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050cb 	.word	0x080050cb
 8005098:	080050a5 	.word	0x080050a5
 800509c:	080050b3 	.word	0x080050b3
 80050a0:	080050cb 	.word	0x080050cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a4:	4b92      	ldr	r3, [pc, #584]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	4a91      	ldr	r2, [pc, #580]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80050b0:	e00c      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3304      	adds	r3, #4
 80050b6:	2102      	movs	r1, #2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 ff03 	bl	8005ec4 <RCCEx_PLL2_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80050c2:	e003      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	75fb      	strb	r3, [r7, #23]
      break;
 80050c8:	e000      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80050ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80050d2:	4b87      	ldr	r3, [pc, #540]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d6:	f023 0203 	bic.w	r2, r3, #3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	4984      	ldr	r1, [pc, #528]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050e4:	e001      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8086 	beq.w	8005204 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050f8:	4b7e      	ldr	r3, [pc, #504]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a7d      	ldr	r2, [pc, #500]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80050fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005104:	f7fc fbc2 	bl	800188c <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800510a:	e009      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800510c:	f7fc fbbe 	bl	800188c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	; 0x64
 8005118:	d902      	bls.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	75fb      	strb	r3, [r7, #23]
        break;
 800511e:	e005      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005120:	4b74      	ldr	r3, [pc, #464]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0ef      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d166      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005132:	4b6f      	ldr	r3, [pc, #444]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005134:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800513c:	4053      	eors	r3, r2
 800513e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005142:	2b00      	cmp	r3, #0
 8005144:	d013      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005146:	4b6a      	ldr	r3, [pc, #424]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005150:	4b67      	ldr	r3, [pc, #412]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	4a66      	ldr	r2, [pc, #408]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800515c:	4b64      	ldr	r3, [pc, #400]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	4a63      	ldr	r2, [pc, #396]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005166:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005168:	4a61      	ldr	r2, [pc, #388]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005178:	d115      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517a:	f7fc fb87 	bl	800188c <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005180:	e00b      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005182:	f7fc fb83 	bl	800188c <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005190:	4293      	cmp	r3, r2
 8005192:	d902      	bls.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	75fb      	strb	r3, [r7, #23]
            break;
 8005198:	e005      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800519a:	4b55      	ldr	r3, [pc, #340]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0ed      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d126      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ba:	d10d      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80051bc:	4b4c      	ldr	r3, [pc, #304]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051ca:	0919      	lsrs	r1, r3, #4
 80051cc:	4b4a      	ldr	r3, [pc, #296]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80051ce:	400b      	ands	r3, r1
 80051d0:	4947      	ldr	r1, [pc, #284]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	610b      	str	r3, [r1, #16]
 80051d6:	e005      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80051d8:	4b45      	ldr	r3, [pc, #276]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	4a44      	ldr	r2, [pc, #272]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80051e2:	6113      	str	r3, [r2, #16]
 80051e4:	4b42      	ldr	r3, [pc, #264]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f2:	493f      	ldr	r1, [pc, #252]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	670b      	str	r3, [r1, #112]	; 0x70
 80051f8:	e004      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	75bb      	strb	r3, [r7, #22]
 80051fe:	e001      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8085 	beq.w	800531c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005216:	2b28      	cmp	r3, #40	; 0x28
 8005218:	d866      	bhi.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	080052fd 	.word	0x080052fd
 8005224:	080052e9 	.word	0x080052e9
 8005228:	080052e9 	.word	0x080052e9
 800522c:	080052e9 	.word	0x080052e9
 8005230:	080052e9 	.word	0x080052e9
 8005234:	080052e9 	.word	0x080052e9
 8005238:	080052e9 	.word	0x080052e9
 800523c:	080052e9 	.word	0x080052e9
 8005240:	080052c5 	.word	0x080052c5
 8005244:	080052e9 	.word	0x080052e9
 8005248:	080052e9 	.word	0x080052e9
 800524c:	080052e9 	.word	0x080052e9
 8005250:	080052e9 	.word	0x080052e9
 8005254:	080052e9 	.word	0x080052e9
 8005258:	080052e9 	.word	0x080052e9
 800525c:	080052e9 	.word	0x080052e9
 8005260:	080052d7 	.word	0x080052d7
 8005264:	080052e9 	.word	0x080052e9
 8005268:	080052e9 	.word	0x080052e9
 800526c:	080052e9 	.word	0x080052e9
 8005270:	080052e9 	.word	0x080052e9
 8005274:	080052e9 	.word	0x080052e9
 8005278:	080052e9 	.word	0x080052e9
 800527c:	080052e9 	.word	0x080052e9
 8005280:	080052fd 	.word	0x080052fd
 8005284:	080052e9 	.word	0x080052e9
 8005288:	080052e9 	.word	0x080052e9
 800528c:	080052e9 	.word	0x080052e9
 8005290:	080052e9 	.word	0x080052e9
 8005294:	080052e9 	.word	0x080052e9
 8005298:	080052e9 	.word	0x080052e9
 800529c:	080052e9 	.word	0x080052e9
 80052a0:	080052fd 	.word	0x080052fd
 80052a4:	080052e9 	.word	0x080052e9
 80052a8:	080052e9 	.word	0x080052e9
 80052ac:	080052e9 	.word	0x080052e9
 80052b0:	080052e9 	.word	0x080052e9
 80052b4:	080052e9 	.word	0x080052e9
 80052b8:	080052e9 	.word	0x080052e9
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	080052fd 	.word	0x080052fd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3304      	adds	r3, #4
 80052c8:	2101      	movs	r1, #1
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fdfa 	bl	8005ec4 <RCCEx_PLL2_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80052d4:	e013      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3324      	adds	r3, #36	; 0x24
 80052da:	2101      	movs	r1, #1
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fea3 	bl	8006028 <RCCEx_PLL3_Config>
 80052e2:	4603      	mov	r3, r0
 80052e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80052e6:	e00a      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	75fb      	strb	r3, [r7, #23]
      break;
 80052ec:	e007      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 80052ee:	bf00      	nop
 80052f0:	58024400 	.word	0x58024400
 80052f4:	58024800 	.word	0x58024800
 80052f8:	00ffffcf 	.word	0x00ffffcf
      break;
 80052fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005304:	4b96      	ldr	r3, [pc, #600]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005308:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005310:	4993      	ldr	r1, [pc, #588]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005312:	4313      	orrs	r3, r2
 8005314:	654b      	str	r3, [r1, #84]	; 0x54
 8005316:	e001      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005318:	7dfb      	ldrb	r3, [r7, #23]
 800531a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d038      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800532c:	2b05      	cmp	r3, #5
 800532e:	d821      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005330:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	0800537b 	.word	0x0800537b
 800533c:	08005351 	.word	0x08005351
 8005340:	08005363 	.word	0x08005363
 8005344:	0800537b 	.word	0x0800537b
 8005348:	0800537b 	.word	0x0800537b
 800534c:	0800537b 	.word	0x0800537b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	2101      	movs	r1, #1
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fdb4 	bl	8005ec4 <RCCEx_PLL2_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005360:	e00c      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3324      	adds	r3, #36	; 0x24
 8005366:	2101      	movs	r1, #1
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fe5d 	bl	8006028 <RCCEx_PLL3_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005372:	e003      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	75fb      	strb	r3, [r7, #23]
      break;
 8005378:	e000      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800537a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005382:	4b77      	ldr	r3, [pc, #476]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	f023 0207 	bic.w	r2, r3, #7
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800538e:	4974      	ldr	r1, [pc, #464]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005390:	4313      	orrs	r3, r2
 8005392:	654b      	str	r3, [r1, #84]	; 0x54
 8005394:	e001      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d03a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ac:	2b05      	cmp	r3, #5
 80053ae:	d821      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80053b0:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80053b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b6:	bf00      	nop
 80053b8:	080053fb 	.word	0x080053fb
 80053bc:	080053d1 	.word	0x080053d1
 80053c0:	080053e3 	.word	0x080053e3
 80053c4:	080053fb 	.word	0x080053fb
 80053c8:	080053fb 	.word	0x080053fb
 80053cc:	080053fb 	.word	0x080053fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3304      	adds	r3, #4
 80053d4:	2101      	movs	r1, #1
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fd74 	bl	8005ec4 <RCCEx_PLL2_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80053e0:	e00c      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3324      	adds	r3, #36	; 0x24
 80053e6:	2101      	movs	r1, #1
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fe1d 	bl	8006028 <RCCEx_PLL3_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80053f2:	e003      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	75fb      	strb	r3, [r7, #23]
      break;
 80053f8:	e000      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80053fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053fc:	7dfb      	ldrb	r3, [r7, #23]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005402:	4b57      	ldr	r3, [pc, #348]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	f023 0207 	bic.w	r2, r3, #7
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005410:	4953      	ldr	r1, [pc, #332]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005412:	4313      	orrs	r3, r2
 8005414:	658b      	str	r3, [r1, #88]	; 0x58
 8005416:	e001      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d04b      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005432:	d02e      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005438:	d828      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800543a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543e:	d02a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005444:	d822      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005446:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800544a:	d026      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800544c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005450:	d81c      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005456:	d010      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545c:	d816      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01d      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005466:	d111      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	2100      	movs	r1, #0
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fd28 	bl	8005ec4 <RCCEx_PLL2_Config>
 8005474:	4603      	mov	r3, r0
 8005476:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005478:	e012      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3324      	adds	r3, #36	; 0x24
 800547e:	2102      	movs	r1, #2
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fdd1 	bl	8006028 <RCCEx_PLL3_Config>
 8005486:	4603      	mov	r3, r0
 8005488:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800548a:	e009      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	75fb      	strb	r3, [r7, #23]
      break;
 8005490:	e006      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005492:	bf00      	nop
 8005494:	e004      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005496:	bf00      	nop
 8005498:	e002      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800549a:	bf00      	nop
 800549c:	e000      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800549e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a6:	4b2e      	ldr	r3, [pc, #184]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80054a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b4:	492a      	ldr	r1, [pc, #168]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	654b      	str	r3, [r1, #84]	; 0x54
 80054ba:	e001      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d04d      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80054d6:	d02e      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80054d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80054dc:	d828      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80054de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e2:	d02a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80054e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e8:	d822      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80054ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054ee:	d026      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80054f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054f4:	d81c      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80054f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054fa:	d010      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80054fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005500:	d816      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01d      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550a:	d111      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	2100      	movs	r1, #0
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fcd6 	bl	8005ec4 <RCCEx_PLL2_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800551c:	e012      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3324      	adds	r3, #36	; 0x24
 8005522:	2102      	movs	r1, #2
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fd7f 	bl	8006028 <RCCEx_PLL3_Config>
 800552a:	4603      	mov	r3, r0
 800552c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800552e:	e009      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	75fb      	strb	r3, [r7, #23]
      break;
 8005534:	e006      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005536:	bf00      	nop
 8005538:	e004      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800553a:	bf00      	nop
 800553c:	e002      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005544:	7dfb      	ldrb	r3, [r7, #23]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10c      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800554c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005558:	4901      	ldr	r1, [pc, #4]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800555a:	4313      	orrs	r3, r2
 800555c:	658b      	str	r3, [r1, #88]	; 0x58
 800555e:	e003      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005560:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005570:	2b00      	cmp	r3, #0
 8005572:	d04b      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800557a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800557e:	d02e      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005580:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005584:	d828      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558a:	d02a      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800558c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005590:	d822      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005592:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005596:	d026      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005598:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800559c:	d81c      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800559e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a2:	d010      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80055a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a8:	d816      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01d      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80055ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b2:	d111      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	2100      	movs	r1, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fc82 	bl	8005ec4 <RCCEx_PLL2_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80055c4:	e012      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3324      	adds	r3, #36	; 0x24
 80055ca:	2102      	movs	r1, #2
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fd2b 	bl	8006028 <RCCEx_PLL3_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80055d6:	e009      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	75fb      	strb	r3, [r7, #23]
      break;
 80055dc:	e006      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80055de:	bf00      	nop
 80055e0:	e004      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80055e2:	bf00      	nop
 80055e4:	e002      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80055e6:	bf00      	nop
 80055e8:	e000      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80055ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80055f2:	4b9d      	ldr	r3, [pc, #628]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005600:	4999      	ldr	r1, [pc, #612]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005602:	4313      	orrs	r3, r2
 8005604:	658b      	str	r3, [r1, #88]	; 0x58
 8005606:	e001      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005622:	d10a      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3324      	adds	r3, #36	; 0x24
 8005628:	2102      	movs	r1, #2
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fcfc 	bl	8006028 <RCCEx_PLL3_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800563a:	4b8b      	ldr	r3, [pc, #556]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005648:	4987      	ldr	r1, [pc, #540]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800564a:	4313      	orrs	r3, r2
 800564c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005664:	d10a      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3324      	adds	r3, #36	; 0x24
 800566a:	2102      	movs	r1, #2
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fcdb 	bl	8006028 <RCCEx_PLL3_Config>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800567c:	4b7a      	ldr	r3, [pc, #488]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800567e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800568a:	4977      	ldr	r1, [pc, #476]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800568c:	4313      	orrs	r3, r2
 800568e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d034      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a6:	d01d      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80056a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ac:	d817      	bhi.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80056b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b6:	d009      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80056b8:	e011      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3304      	adds	r3, #4
 80056be:	2100      	movs	r1, #0
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fbff 	bl	8005ec4 <RCCEx_PLL2_Config>
 80056c6:	4603      	mov	r3, r0
 80056c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80056ca:	e00c      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3324      	adds	r3, #36	; 0x24
 80056d0:	2102      	movs	r1, #2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fca8 	bl	8006028 <RCCEx_PLL3_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80056dc:	e003      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
      break;
 80056e2:	e000      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80056e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e6:	7dfb      	ldrb	r3, [r7, #23]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056ec:	4b5e      	ldr	r3, [pc, #376]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056fa:	495b      	ldr	r1, [pc, #364]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	658b      	str	r3, [r1, #88]	; 0x58
 8005700:	e001      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d033      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005718:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800571c:	d01c      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800571e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005722:	d816      	bhi.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005728:	d003      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800572a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800572e:	d007      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005730:	e00f      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005732:	4b4d      	ldr	r3, [pc, #308]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	4a4c      	ldr	r2, [pc, #304]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800573c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800573e:	e00c      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3324      	adds	r3, #36	; 0x24
 8005744:	2101      	movs	r1, #1
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fc6e 	bl	8006028 <RCCEx_PLL3_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005750:	e003      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	75fb      	strb	r3, [r7, #23]
      break;
 8005756:	e000      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005760:	4b41      	ldr	r3, [pc, #260]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576e:	493e      	ldr	r1, [pc, #248]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005770:	4313      	orrs	r3, r2
 8005772:	654b      	str	r3, [r1, #84]	; 0x54
 8005774:	e001      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005776:	7dfb      	ldrb	r3, [r7, #23]
 8005778:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d029      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800578e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005792:	d007      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005794:	e00f      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005796:	4b34      	ldr	r3, [pc, #208]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	4a33      	ldr	r2, [pc, #204]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800579c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80057a2:	e00b      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3304      	adds	r3, #4
 80057a8:	2102      	movs	r1, #2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fb8a 	bl	8005ec4 <RCCEx_PLL2_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80057b4:	e002      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	75fb      	strb	r3, [r7, #23]
      break;
 80057ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057c2:	4b29      	ldr	r3, [pc, #164]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ce:	4926      	ldr	r1, [pc, #152]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80057d4:	e001      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
 80057d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3324      	adds	r3, #36	; 0x24
 80057ea:	2102      	movs	r1, #2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fc1b 	bl	8006028 <RCCEx_PLL3_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d033      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005810:	d017      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005816:	d811      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800581c:	d013      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800581e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005822:	d80b      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d010      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582c:	d106      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582e:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	4a0d      	ldr	r2, [pc, #52]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005838:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800583a:	e007      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	75fb      	strb	r3, [r7, #23]
      break;
 8005840:	e004      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005842:	bf00      	nop
 8005844:	e002      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800584a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10c      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005856:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585e:	4902      	ldr	r1, [pc, #8]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005860:	4313      	orrs	r3, r2
 8005862:	654b      	str	r3, [r1, #84]	; 0x54
 8005864:	e004      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005866:	bf00      	nop
 8005868:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586c:	7dfb      	ldrb	r3, [r7, #23]
 800586e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800587c:	4b31      	ldr	r3, [pc, #196]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800587e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005880:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	492e      	ldr	r1, [pc, #184]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800588a:	4313      	orrs	r3, r2
 800588c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d009      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800589a:	4b2a      	ldr	r3, [pc, #168]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058a8:	4926      	ldr	r1, [pc, #152]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d008      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058ba:	4b22      	ldr	r3, [pc, #136]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058c6:	491f      	ldr	r1, [pc, #124]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00d      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058d8:	4b1a      	ldr	r3, [pc, #104]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	4a19      	ldr	r2, [pc, #100]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058e2:	6113      	str	r3, [r2, #16]
 80058e4:	4b17      	ldr	r3, [pc, #92]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80058ee:	4915      	ldr	r1, [pc, #84]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	da08      	bge.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80058fc:	4b11      	ldr	r3, [pc, #68]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005900:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005908:	490e      	ldr	r1, [pc, #56]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800590a:	4313      	orrs	r3, r2
 800590c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800591a:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	4906      	ldr	r1, [pc, #24]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800592a:	4313      	orrs	r3, r2
 800592c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800592e:	7dbb      	ldrb	r3, [r7, #22]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e000      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	58024400 	.word	0x58024400

08005948 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800594c:	f7ff f85a 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8005950:	4602      	mov	r2, r0
 8005952:	4b06      	ldr	r3, [pc, #24]	; (800596c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	091b      	lsrs	r3, r3, #4
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	4904      	ldr	r1, [pc, #16]	; (8005970 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800595e:	5ccb      	ldrb	r3, [r1, r3]
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	58024400 	.word	0x58024400
 8005970:	0800c250 	.word	0x0800c250

08005974 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	; 0x24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800597c:	4ba1      	ldr	r3, [pc, #644]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005986:	4b9f      	ldr	r3, [pc, #636]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	0b1b      	lsrs	r3, r3, #12
 800598c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005990:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005992:	4b9c      	ldr	r3, [pc, #624]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800599e:	4b99      	ldr	r3, [pc, #612]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	08db      	lsrs	r3, r3, #3
 80059a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 8111 	beq.w	8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f000 8083 	beq.w	8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	f200 80a1 	bhi.w	8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d056      	beq.n	8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80059de:	e099      	b.n	8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e0:	4b88      	ldr	r3, [pc, #544]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d02d      	beq.n	8005a48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059ec:	4b85      	ldr	r3, [pc, #532]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	08db      	lsrs	r3, r3, #3
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	4a84      	ldr	r2, [pc, #528]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
 80059fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	ee07 3a90 	vmov	s15, r3
 8005a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a16:	4b7b      	ldr	r3, [pc, #492]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a42:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a46:	e087      	b.n	8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a5a:	4b6a      	ldr	r3, [pc, #424]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a8a:	e065      	b.n	8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a9e:	4b59      	ldr	r3, [pc, #356]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ab2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ace:	e043      	b.n	8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae2:	4b48      	ldr	r3, [pc, #288]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005af6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b12:	e021      	b.n	8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b26:	4b37      	ldr	r3, [pc, #220]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005b58:	4b2a      	ldr	r3, [pc, #168]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	0a5b      	lsrs	r3, r3, #9
 8005b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b7e:	ee17 2a90 	vmov	r2, s15
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005b86:	4b1f      	ldr	r3, [pc, #124]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	0c1b      	lsrs	r3, r3, #16
 8005b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ba0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bac:	ee17 2a90 	vmov	r2, s15
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005bb4:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	0e1b      	lsrs	r3, r3, #24
 8005bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bda:	ee17 2a90 	vmov	r2, s15
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005be2:	e008      	b.n	8005bf6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	609a      	str	r2, [r3, #8]
}
 8005bf6:	bf00      	nop
 8005bf8:	3724      	adds	r7, #36	; 0x24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	58024400 	.word	0x58024400
 8005c08:	03d09000 	.word	0x03d09000
 8005c0c:	46000000 	.word	0x46000000
 8005c10:	4c742400 	.word	0x4c742400
 8005c14:	4a742400 	.word	0x4a742400
 8005c18:	4af42400 	.word	0x4af42400

08005c1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b089      	sub	sp, #36	; 0x24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c24:	4ba1      	ldr	r3, [pc, #644]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005c2e:	4b9f      	ldr	r3, [pc, #636]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	0d1b      	lsrs	r3, r3, #20
 8005c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c3a:	4b9c      	ldr	r3, [pc, #624]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	0a1b      	lsrs	r3, r3, #8
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005c46:	4b99      	ldr	r3, [pc, #612]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	08db      	lsrs	r3, r3, #3
 8005c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8111 	beq.w	8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	f000 8083 	beq.w	8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	f200 80a1 	bhi.w	8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d056      	beq.n	8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c86:	e099      	b.n	8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c88:	4b88      	ldr	r3, [pc, #544]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d02d      	beq.n	8005cf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c94:	4b85      	ldr	r3, [pc, #532]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	08db      	lsrs	r3, r3, #3
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	4a84      	ldr	r2, [pc, #528]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cbe:	4b7b      	ldr	r3, [pc, #492]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005cee:	e087      	b.n	8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d02:	4b6a      	ldr	r3, [pc, #424]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d32:	e065      	b.n	8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d46:	4b59      	ldr	r3, [pc, #356]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d76:	e043      	b.n	8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8a:	4b48      	ldr	r3, [pc, #288]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dba:	e021      	b.n	8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dce:	4b37      	ldr	r3, [pc, #220]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8005de2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005e00:	4b2a      	ldr	r3, [pc, #168]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	0a5b      	lsrs	r3, r3, #9
 8005e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e26:	ee17 2a90 	vmov	r2, s15
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005e2e:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	0c1b      	lsrs	r3, r3, #16
 8005e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e54:	ee17 2a90 	vmov	r2, s15
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005e5c:	4b13      	ldr	r3, [pc, #76]	; (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	0e1b      	lsrs	r3, r3, #24
 8005e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e82:	ee17 2a90 	vmov	r2, s15
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e8a:	e008      	b.n	8005e9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	609a      	str	r2, [r3, #8]
}
 8005e9e:	bf00      	nop
 8005ea0:	3724      	adds	r7, #36	; 0x24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	58024400 	.word	0x58024400
 8005eb0:	03d09000 	.word	0x03d09000
 8005eb4:	46000000 	.word	0x46000000
 8005eb8:	4c742400 	.word	0x4c742400
 8005ebc:	4a742400 	.word	0x4a742400
 8005ec0:	4af42400 	.word	0x4af42400

08005ec4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ed2:	4b53      	ldr	r3, [pc, #332]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d101      	bne.n	8005ee2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e099      	b.n	8006016 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005ee2:	4b4f      	ldr	r3, [pc, #316]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a4e      	ldr	r2, [pc, #312]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005ee8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eee:	f7fb fccd 	bl	800188c <HAL_GetTick>
 8005ef2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ef4:	e008      	b.n	8005f08 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ef6:	f7fb fcc9 	bl	800188c <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e086      	b.n	8006016 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f08:	4b45      	ldr	r3, [pc, #276]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f0      	bne.n	8005ef6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f14:	4b42      	ldr	r3, [pc, #264]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	031b      	lsls	r3, r3, #12
 8005f22:	493f      	ldr	r1, [pc, #252]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	628b      	str	r3, [r1, #40]	; 0x28
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	025b      	lsls	r3, r3, #9
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	041b      	lsls	r3, r3, #16
 8005f46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	061b      	lsls	r3, r3, #24
 8005f54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f58:	4931      	ldr	r1, [pc, #196]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f5e:	4b30      	ldr	r3, [pc, #192]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	492d      	ldr	r1, [pc, #180]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f70:	4b2b      	ldr	r3, [pc, #172]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	f023 0220 	bic.w	r2, r3, #32
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	4928      	ldr	r1, [pc, #160]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f82:	4b27      	ldr	r3, [pc, #156]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	4a26      	ldr	r2, [pc, #152]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f88:	f023 0310 	bic.w	r3, r3, #16
 8005f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f8e:	4b24      	ldr	r3, [pc, #144]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f92:	4b24      	ldr	r3, [pc, #144]	; (8006024 <RCCEx_PLL2_Config+0x160>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	69d2      	ldr	r2, [r2, #28]
 8005f9a:	00d2      	lsls	r2, r2, #3
 8005f9c:	4920      	ldr	r1, [pc, #128]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005fa2:	4b1f      	ldr	r3, [pc, #124]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	4a1e      	ldr	r2, [pc, #120]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fa8:	f043 0310 	orr.w	r3, r3, #16
 8005fac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005fb4:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	4a19      	ldr	r2, [pc, #100]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fc0:	e00f      	b.n	8005fe2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d106      	bne.n	8005fd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005fc8:	4b15      	ldr	r3, [pc, #84]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	4a14      	ldr	r2, [pc, #80]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fd4:	e005      	b.n	8005fe2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005fd6:	4b12      	ldr	r3, [pc, #72]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	4a11      	ldr	r2, [pc, #68]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fe0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a0e      	ldr	r2, [pc, #56]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fe8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fee:	f7fb fc4d 	bl	800188c <HAL_GetTick>
 8005ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ff4:	e008      	b.n	8006008 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ff6:	f7fb fc49 	bl	800188c <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e006      	b.n	8006016 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006008:	4b05      	ldr	r3, [pc, #20]	; (8006020 <RCCEx_PLL2_Config+0x15c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0f0      	beq.n	8005ff6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	58024400 	.word	0x58024400
 8006024:	ffff0007 	.word	0xffff0007

08006028 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006036:	4b53      	ldr	r3, [pc, #332]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	2b03      	cmp	r3, #3
 8006040:	d101      	bne.n	8006046 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e099      	b.n	800617a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006046:	4b4f      	ldr	r3, [pc, #316]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a4e      	ldr	r2, [pc, #312]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 800604c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006052:	f7fb fc1b 	bl	800188c <HAL_GetTick>
 8006056:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006058:	e008      	b.n	800606c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800605a:	f7fb fc17 	bl	800188c <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e086      	b.n	800617a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800606c:	4b45      	ldr	r3, [pc, #276]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f0      	bne.n	800605a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006078:	4b42      	ldr	r3, [pc, #264]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	051b      	lsls	r3, r3, #20
 8006086:	493f      	ldr	r1, [pc, #252]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006088:	4313      	orrs	r3, r2
 800608a:	628b      	str	r3, [r1, #40]	; 0x28
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	3b01      	subs	r3, #1
 8006092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	3b01      	subs	r3, #1
 800609c:	025b      	lsls	r3, r3, #9
 800609e:	b29b      	uxth	r3, r3
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	061b      	lsls	r3, r3, #24
 80060b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060bc:	4931      	ldr	r1, [pc, #196]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80060c2:	4b30      	ldr	r3, [pc, #192]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	492d      	ldr	r1, [pc, #180]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060d4:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	4928      	ldr	r1, [pc, #160]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060e6:	4b27      	ldr	r3, [pc, #156]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ea:	4a26      	ldr	r2, [pc, #152]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80060f2:	4b24      	ldr	r3, [pc, #144]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060f6:	4b24      	ldr	r3, [pc, #144]	; (8006188 <RCCEx_PLL3_Config+0x160>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	69d2      	ldr	r2, [r2, #28]
 80060fe:	00d2      	lsls	r2, r2, #3
 8006100:	4920      	ldr	r1, [pc, #128]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006102:	4313      	orrs	r3, r2
 8006104:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006106:	4b1f      	ldr	r3, [pc, #124]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 800610c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006110:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006118:	4b1a      	ldr	r3, [pc, #104]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	4a19      	ldr	r2, [pc, #100]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 800611e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006122:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006124:	e00f      	b.n	8006146 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d106      	bne.n	800613a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800612c:	4b15      	ldr	r3, [pc, #84]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	4a14      	ldr	r2, [pc, #80]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006132:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006136:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006138:	e005      	b.n	8006146 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800613a:	4b12      	ldr	r3, [pc, #72]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613e:	4a11      	ldr	r2, [pc, #68]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006144:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006146:	4b0f      	ldr	r3, [pc, #60]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a0e      	ldr	r2, [pc, #56]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 800614c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006152:	f7fb fb9b 	bl	800188c <HAL_GetTick>
 8006156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006158:	e008      	b.n	800616c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800615a:	f7fb fb97 	bl	800188c <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e006      	b.n	800617a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800616c:	4b05      	ldr	r3, [pc, #20]	; (8006184 <RCCEx_PLL3_Config+0x15c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f0      	beq.n	800615a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006178:	7bfb      	ldrb	r3, [r7, #15]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	58024400 	.word	0x58024400
 8006188:	ffff0007 	.word	0xffff0007

0800618c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e049      	b.n	8006232 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fb f8aa 	bl	800130c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4619      	mov	r1, r3
 80061ca:	4610      	mov	r0, r2
 80061cc:	f000 f92e 	bl	800642c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_TIM_ConfigClockSource+0x1c>
 8006254:	2302      	movs	r3, #2
 8006256:	e0dc      	b.n	8006412 <HAL_TIM_ConfigClockSource+0x1d6>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	4b6a      	ldr	r3, [pc, #424]	; (800641c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006274:	4013      	ands	r3, r2
 8006276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800627e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a64      	ldr	r2, [pc, #400]	; (8006420 <HAL_TIM_ConfigClockSource+0x1e4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	f000 80a9 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006294:	4a62      	ldr	r2, [pc, #392]	; (8006420 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	f200 80ae 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800629c:	4a61      	ldr	r2, [pc, #388]	; (8006424 <HAL_TIM_ConfigClockSource+0x1e8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	f000 80a1 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80062a4:	4a5f      	ldr	r2, [pc, #380]	; (8006424 <HAL_TIM_ConfigClockSource+0x1e8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	f200 80a6 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062ac:	4a5e      	ldr	r2, [pc, #376]	; (8006428 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	f000 8099 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80062b4:	4a5c      	ldr	r2, [pc, #368]	; (8006428 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	f200 809e 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062c0:	f000 8091 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80062c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062c8:	f200 8096 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d0:	f000 8089 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80062d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d8:	f200 808e 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e0:	d03e      	beq.n	8006360 <HAL_TIM_ConfigClockSource+0x124>
 80062e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e6:	f200 8087 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ee:	f000 8086 	beq.w	80063fe <HAL_TIM_ConfigClockSource+0x1c2>
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f6:	d87f      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062f8:	2b70      	cmp	r3, #112	; 0x70
 80062fa:	d01a      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0xf6>
 80062fc:	2b70      	cmp	r3, #112	; 0x70
 80062fe:	d87b      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006300:	2b60      	cmp	r3, #96	; 0x60
 8006302:	d050      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x16a>
 8006304:	2b60      	cmp	r3, #96	; 0x60
 8006306:	d877      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006308:	2b50      	cmp	r3, #80	; 0x50
 800630a:	d03c      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x14a>
 800630c:	2b50      	cmp	r3, #80	; 0x50
 800630e:	d873      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	d058      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x18a>
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d86f      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006318:	2b30      	cmp	r3, #48	; 0x30
 800631a:	d064      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800631c:	2b30      	cmp	r3, #48	; 0x30
 800631e:	d86b      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006320:	2b20      	cmp	r3, #32
 8006322:	d060      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d867      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05c      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800632c:	2b10      	cmp	r3, #16
 800632e:	d05a      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006330:	e062      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6899      	ldr	r1, [r3, #8]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f000 f98b 	bl	800665c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	609a      	str	r2, [r3, #8]
      break;
 800635e:	e04f      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	6899      	ldr	r1, [r3, #8]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f000 f974 	bl	800665c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006382:	609a      	str	r2, [r3, #8]
      break;
 8006384:	e03c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6859      	ldr	r1, [r3, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	461a      	mov	r2, r3
 8006394:	f000 f8e4 	bl	8006560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2150      	movs	r1, #80	; 0x50
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 f93e 	bl	8006620 <TIM_ITRx_SetConfig>
      break;
 80063a4:	e02c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f000 f903 	bl	80065be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2160      	movs	r1, #96	; 0x60
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 f92e 	bl	8006620 <TIM_ITRx_SetConfig>
      break;
 80063c4:	e01c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6859      	ldr	r1, [r3, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f000 f8c4 	bl	8006560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2140      	movs	r1, #64	; 0x40
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 f91e 	bl	8006620 <TIM_ITRx_SetConfig>
      break;
 80063e4:	e00c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4619      	mov	r1, r3
 80063f0:	4610      	mov	r0, r2
 80063f2:	f000 f915 	bl	8006620 <TIM_ITRx_SetConfig>
      break;
 80063f6:	e003      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
      break;
 80063fc:	e000      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80063fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	ffceff88 	.word	0xffceff88
 8006420:	00100040 	.word	0x00100040
 8006424:	00100030 	.word	0x00100030
 8006428:	00100020 	.word	0x00100020

0800642c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a40      	ldr	r2, [pc, #256]	; (8006540 <TIM_Base_SetConfig+0x114>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d013      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644a:	d00f      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a3d      	ldr	r2, [pc, #244]	; (8006544 <TIM_Base_SetConfig+0x118>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00b      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a3c      	ldr	r2, [pc, #240]	; (8006548 <TIM_Base_SetConfig+0x11c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d007      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a3b      	ldr	r2, [pc, #236]	; (800654c <TIM_Base_SetConfig+0x120>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a3a      	ldr	r2, [pc, #232]	; (8006550 <TIM_Base_SetConfig+0x124>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d108      	bne.n	800647e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2f      	ldr	r2, [pc, #188]	; (8006540 <TIM_Base_SetConfig+0x114>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d01f      	beq.n	80064c6 <TIM_Base_SetConfig+0x9a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648c:	d01b      	beq.n	80064c6 <TIM_Base_SetConfig+0x9a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2c      	ldr	r2, [pc, #176]	; (8006544 <TIM_Base_SetConfig+0x118>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d017      	beq.n	80064c6 <TIM_Base_SetConfig+0x9a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2b      	ldr	r2, [pc, #172]	; (8006548 <TIM_Base_SetConfig+0x11c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <TIM_Base_SetConfig+0x9a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2a      	ldr	r2, [pc, #168]	; (800654c <TIM_Base_SetConfig+0x120>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00f      	beq.n	80064c6 <TIM_Base_SetConfig+0x9a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a29      	ldr	r2, [pc, #164]	; (8006550 <TIM_Base_SetConfig+0x124>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00b      	beq.n	80064c6 <TIM_Base_SetConfig+0x9a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a28      	ldr	r2, [pc, #160]	; (8006554 <TIM_Base_SetConfig+0x128>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d007      	beq.n	80064c6 <TIM_Base_SetConfig+0x9a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a27      	ldr	r2, [pc, #156]	; (8006558 <TIM_Base_SetConfig+0x12c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d003      	beq.n	80064c6 <TIM_Base_SetConfig+0x9a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a26      	ldr	r2, [pc, #152]	; (800655c <TIM_Base_SetConfig+0x130>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d108      	bne.n	80064d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a10      	ldr	r2, [pc, #64]	; (8006540 <TIM_Base_SetConfig+0x114>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00f      	beq.n	8006524 <TIM_Base_SetConfig+0xf8>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a12      	ldr	r2, [pc, #72]	; (8006550 <TIM_Base_SetConfig+0x124>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00b      	beq.n	8006524 <TIM_Base_SetConfig+0xf8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a11      	ldr	r2, [pc, #68]	; (8006554 <TIM_Base_SetConfig+0x128>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_Base_SetConfig+0xf8>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a10      	ldr	r2, [pc, #64]	; (8006558 <TIM_Base_SetConfig+0x12c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_Base_SetConfig+0xf8>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a0f      	ldr	r2, [pc, #60]	; (800655c <TIM_Base_SetConfig+0x130>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d103      	bne.n	800652c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	615a      	str	r2, [r3, #20]
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40010400 	.word	0x40010400
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800

08006560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	f023 0201 	bic.w	r2, r3, #1
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800658a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f023 030a 	bic.w	r3, r3, #10
 800659c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065be:	b480      	push	{r7}
 80065c0:	b087      	sub	sp, #28
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	f023 0210 	bic.w	r2, r3, #16
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	031b      	lsls	r3, r3, #12
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4b09      	ldr	r3, [pc, #36]	; (8006658 <TIM_ITRx_SetConfig+0x38>)
 8006634:	4013      	ands	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4313      	orrs	r3, r2
 800663e:	f043 0307 	orr.w	r3, r3, #7
 8006642:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	609a      	str	r2, [r3, #8]
}
 800664a:	bf00      	nop
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	ffcfff8f 	.word	0xffcfff8f

0800665c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	021a      	lsls	r2, r3, #8
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	431a      	orrs	r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4313      	orrs	r3, r2
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	609a      	str	r2, [r3, #8]
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e06d      	b.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a30      	ldr	r2, [pc, #192]	; (800679c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d004      	beq.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a2f      	ldr	r2, [pc, #188]	; (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d108      	bne.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006700:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a20      	ldr	r2, [pc, #128]	; (800679c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d022      	beq.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006726:	d01d      	beq.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1d      	ldr	r2, [pc, #116]	; (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d018      	beq.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a1c      	ldr	r2, [pc, #112]	; (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d013      	beq.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a1a      	ldr	r2, [pc, #104]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d00e      	beq.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a15      	ldr	r2, [pc, #84]	; (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d009      	beq.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a16      	ldr	r2, [pc, #88]	; (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a15      	ldr	r2, [pc, #84]	; (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d10c      	bne.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800676a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	4313      	orrs	r3, r2
 8006774:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	40010000 	.word	0x40010000
 80067a0:	40010400 	.word	0x40010400
 80067a4:	40000400 	.word	0x40000400
 80067a8:	40000800 	.word	0x40000800
 80067ac:	40000c00 	.word	0x40000c00
 80067b0:	40001800 	.word	0x40001800
 80067b4:	40014000 	.word	0x40014000

080067b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e042      	b.n	8006850 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d106      	bne.n	80067e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7fa fdb5 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2224      	movs	r2, #36	; 0x24
 80067e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0201 	bic.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fcd6 	bl	80071ac <UART_SetConfig>
 8006800:	4603      	mov	r3, r0
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e022      	b.n	8006850 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 fa32 	bl	8007c7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0201 	orr.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fab9 	bl	8007dc0 <UART_CheckIdleState>
 800684e:	4603      	mov	r3, r0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08a      	sub	sp, #40	; 0x28
 800685c:	af02      	add	r7, sp, #8
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	4613      	mov	r3, r2
 8006866:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800686e:	2b20      	cmp	r3, #32
 8006870:	f040 8083 	bne.w	800697a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_UART_Transmit+0x28>
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e07b      	b.n	800697c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_UART_Transmit+0x3a>
 800688e:	2302      	movs	r3, #2
 8006890:	e074      	b.n	800697c <HAL_UART_Transmit+0x124>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2221      	movs	r2, #33	; 0x21
 80068a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068aa:	f7fa ffef 	bl	800188c <HAL_GetTick>
 80068ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	88fa      	ldrh	r2, [r7, #6]
 80068b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	88fa      	ldrh	r2, [r7, #6]
 80068bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c8:	d108      	bne.n	80068dc <HAL_UART_Transmit+0x84>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d104      	bne.n	80068dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	e003      	b.n	80068e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80068ec:	e02c      	b.n	8006948 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2200      	movs	r2, #0
 80068f6:	2180      	movs	r1, #128	; 0x80
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f001 faac 	bl	8007e56 <UART_WaitOnFlagUntilTimeout>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e039      	b.n	800697c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10b      	bne.n	8006926 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800691c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	3302      	adds	r3, #2
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	e007      	b.n	8006936 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	781a      	ldrb	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	3301      	adds	r3, #1
 8006934:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1cc      	bne.n	80068ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2200      	movs	r2, #0
 800695c:	2140      	movs	r1, #64	; 0x40
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f001 fa79 	bl	8007e56 <UART_WaitOnFlagUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e006      	b.n	800697c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2220      	movs	r2, #32
 8006972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e000      	b.n	800697c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800697a:	2302      	movs	r3, #2
  }
}
 800697c:	4618      	mov	r0, r3
 800697e:	3720      	adds	r7, #32
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	; 0x28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006998:	2b20      	cmp	r3, #32
 800699a:	d142      	bne.n	8006a22 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <HAL_UART_Receive_IT+0x24>
 80069a2:	88fb      	ldrh	r3, [r7, #6]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e03b      	b.n	8006a24 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d101      	bne.n	80069ba <HAL_UART_Receive_IT+0x36>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e034      	b.n	8006a24 <HAL_UART_Receive_IT+0xa0>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <HAL_UART_Receive_IT+0xa8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d01f      	beq.n	8006a12 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d018      	beq.n	8006a12 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	613b      	str	r3, [r7, #16]
   return(result);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	623b      	str	r3, [r7, #32]
 8006a00:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	69f9      	ldr	r1, [r7, #28]
 8006a04:	6a3a      	ldr	r2, [r7, #32]
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e6      	bne.n	80069e0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a12:	88fb      	ldrh	r3, [r7, #6]
 8006a14:	461a      	mov	r2, r3
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f001 fae5 	bl	8007fe8 <UART_Start_Receive_IT>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	e000      	b.n	8006a24 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006a22:	2302      	movs	r3, #2
  }
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3728      	adds	r7, #40	; 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	58000c00 	.word	0x58000c00

08006a30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b0ba      	sub	sp, #232	; 0xe8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a5e:	4013      	ands	r3, r2
 8006a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d11b      	bne.n	8006aa4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d015      	beq.n	8006aa4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d105      	bne.n	8006a90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d009      	beq.n	8006aa4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 835a 	beq.w	800714e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	4798      	blx	r3
      }
      return;
 8006aa2:	e354      	b.n	800714e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006aa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 811f 	beq.w	8006cec <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006aae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006ab2:	4b8b      	ldr	r3, [pc, #556]	; (8006ce0 <HAL_UART_IRQHandler+0x2b0>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006aba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006abe:	4b89      	ldr	r3, [pc, #548]	; (8006ce4 <HAL_UART_IRQHandler+0x2b4>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 8112 	beq.w	8006cec <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d011      	beq.n	8006af8 <HAL_UART_IRQHandler+0xc8>
 8006ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00b      	beq.n	8006af8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aee:	f043 0201 	orr.w	r2, r3, #1
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d011      	beq.n	8006b28 <HAL_UART_IRQHandler+0xf8>
 8006b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2202      	movs	r2, #2
 8006b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1e:	f043 0204 	orr.w	r2, r3, #4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d011      	beq.n	8006b58 <HAL_UART_IRQHandler+0x128>
 8006b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00b      	beq.n	8006b58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2204      	movs	r2, #4
 8006b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4e:	f043 0202 	orr.w	r2, r3, #2
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5c:	f003 0308 	and.w	r3, r3, #8
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d017      	beq.n	8006b94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b68:	f003 0320 	and.w	r3, r3, #32
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d105      	bne.n	8006b7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b74:	4b5a      	ldr	r3, [pc, #360]	; (8006ce0 <HAL_UART_IRQHandler+0x2b0>)
 8006b76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2208      	movs	r2, #8
 8006b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8a:	f043 0208 	orr.w	r2, r3, #8
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d012      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x196>
 8006ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00c      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bbc:	f043 0220 	orr.w	r2, r3, #32
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 82c0 	beq.w	8007152 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d013      	beq.n	8006c06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1a:	2b40      	cmp	r3, #64	; 0x40
 8006c1c:	d005      	beq.n	8006c2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d04f      	beq.n	8006cca <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 fb06 	bl	800823c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	d141      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3308      	adds	r3, #8
 8006c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3308      	adds	r3, #8
 8006c66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1d9      	bne.n	8006c3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d013      	beq.n	8006cba <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c96:	4a14      	ldr	r2, [pc, #80]	; (8006ce8 <HAL_UART_IRQHandler+0x2b8>)
 8006c98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fb fa5e 	bl	8002160 <HAL_DMA_Abort_IT>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d017      	beq.n	8006cda <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb8:	e00f      	b.n	8006cda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fa60 	bl	8007180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc0:	e00b      	b.n	8006cda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fa5c 	bl	8007180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc8:	e007      	b.n	8006cda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fa58 	bl	8007180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006cd8:	e23b      	b.n	8007152 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cda:	bf00      	nop
    return;
 8006cdc:	e239      	b.n	8007152 <HAL_UART_IRQHandler+0x722>
 8006cde:	bf00      	nop
 8006ce0:	10000001 	.word	0x10000001
 8006ce4:	04000120 	.word	0x04000120
 8006ce8:	08008309 	.word	0x08008309

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	f040 81ce 	bne.w	8007092 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 81c7 	beq.w	8007092 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d08:	f003 0310 	and.w	r3, r3, #16
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 81c0 	beq.w	8007092 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2210      	movs	r2, #16
 8006d18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	f040 813b 	bne.w	8006fa0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a8b      	ldr	r2, [pc, #556]	; (8006f60 <HAL_UART_IRQHandler+0x530>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d059      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a89      	ldr	r2, [pc, #548]	; (8006f64 <HAL_UART_IRQHandler+0x534>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d053      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a87      	ldr	r2, [pc, #540]	; (8006f68 <HAL_UART_IRQHandler+0x538>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d04d      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a85      	ldr	r2, [pc, #532]	; (8006f6c <HAL_UART_IRQHandler+0x53c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d047      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a83      	ldr	r2, [pc, #524]	; (8006f70 <HAL_UART_IRQHandler+0x540>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d041      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a81      	ldr	r2, [pc, #516]	; (8006f74 <HAL_UART_IRQHandler+0x544>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d03b      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a7f      	ldr	r2, [pc, #508]	; (8006f78 <HAL_UART_IRQHandler+0x548>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d035      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a7d      	ldr	r2, [pc, #500]	; (8006f7c <HAL_UART_IRQHandler+0x54c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d02f      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a7b      	ldr	r2, [pc, #492]	; (8006f80 <HAL_UART_IRQHandler+0x550>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d029      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a79      	ldr	r2, [pc, #484]	; (8006f84 <HAL_UART_IRQHandler+0x554>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d023      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a77      	ldr	r2, [pc, #476]	; (8006f88 <HAL_UART_IRQHandler+0x558>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d01d      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a75      	ldr	r2, [pc, #468]	; (8006f8c <HAL_UART_IRQHandler+0x55c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d017      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a73      	ldr	r2, [pc, #460]	; (8006f90 <HAL_UART_IRQHandler+0x560>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d011      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a71      	ldr	r2, [pc, #452]	; (8006f94 <HAL_UART_IRQHandler+0x564>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a6f      	ldr	r2, [pc, #444]	; (8006f98 <HAL_UART_IRQHandler+0x568>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d005      	beq.n	8006dea <HAL_UART_IRQHandler+0x3ba>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a6d      	ldr	r2, [pc, #436]	; (8006f9c <HAL_UART_IRQHandler+0x56c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d105      	bne.n	8006df6 <HAL_UART_IRQHandler+0x3c6>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	e004      	b.n	8006e00 <HAL_UART_IRQHandler+0x3d0>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 81a4 	beq.w	8007156 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	f080 819c 	bcs.w	8007156 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e32:	f000 8086 	beq.w	8006f42 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e64:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1da      	bne.n	8006e36 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3308      	adds	r3, #8
 8006e86:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e92:	f023 0301 	bic.w	r3, r3, #1
 8006e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ea4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006eac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e1      	bne.n	8006e80 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3308      	adds	r3, #8
 8006edc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ee0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ee2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ee6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006eee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e3      	bne.n	8006ebc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0a:	e853 3f00 	ldrex	r3, [r3]
 8006f0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f12:	f023 0310 	bic.w	r3, r3, #16
 8006f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f24:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e4      	bne.n	8006f02 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fa fdf1 	bl	8001b24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f91c 	bl	8007194 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f5c:	e0fb      	b.n	8007156 <HAL_UART_IRQHandler+0x726>
 8006f5e:	bf00      	nop
 8006f60:	40020010 	.word	0x40020010
 8006f64:	40020028 	.word	0x40020028
 8006f68:	40020040 	.word	0x40020040
 8006f6c:	40020058 	.word	0x40020058
 8006f70:	40020070 	.word	0x40020070
 8006f74:	40020088 	.word	0x40020088
 8006f78:	400200a0 	.word	0x400200a0
 8006f7c:	400200b8 	.word	0x400200b8
 8006f80:	40020410 	.word	0x40020410
 8006f84:	40020428 	.word	0x40020428
 8006f88:	40020440 	.word	0x40020440
 8006f8c:	40020458 	.word	0x40020458
 8006f90:	40020470 	.word	0x40020470
 8006f94:	40020488 	.word	0x40020488
 8006f98:	400204a0 	.word	0x400204a0
 8006f9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 80cc 	beq.w	800715a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8006fc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 80c7 	beq.w	800715a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fee:	647b      	str	r3, [r7, #68]	; 0x44
 8006ff0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e4      	bne.n	8006fcc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3308      	adds	r3, #8
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	623b      	str	r3, [r7, #32]
   return(result);
 8007012:	6a3a      	ldr	r2, [r7, #32]
 8007014:	4b54      	ldr	r3, [pc, #336]	; (8007168 <HAL_UART_IRQHandler+0x738>)
 8007016:	4013      	ands	r3, r2
 8007018:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3308      	adds	r3, #8
 8007022:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007026:	633a      	str	r2, [r7, #48]	; 0x30
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800702c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e3      	bne.n	8007002 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	e853 3f00 	ldrex	r3, [r3]
 800705a:	60fb      	str	r3, [r7, #12]
   return(result);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0310 	bic.w	r3, r3, #16
 8007062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007070:	61fb      	str	r3, [r7, #28]
 8007072:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	69b9      	ldr	r1, [r7, #24]
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	617b      	str	r3, [r7, #20]
   return(result);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e4      	bne.n	800704e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f882 	bl	8007194 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007090:	e063      	b.n	800715a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00e      	beq.n	80070bc <HAL_UART_IRQHandler+0x68c>
 800709e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d008      	beq.n	80070bc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fdc5 	bl	8008c44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070ba:	e051      	b.n	8007160 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d014      	beq.n	80070f2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80070c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d105      	bne.n	80070e0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d008      	beq.n	80070f2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d03a      	beq.n	800715e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	4798      	blx	r3
    }
    return;
 80070f0:	e035      	b.n	800715e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <HAL_UART_IRQHandler+0x6e2>
 80070fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 f912 	bl	8008334 <UART_EndTransmit_IT>
    return;
 8007110:	e026      	b.n	8007160 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <HAL_UART_IRQHandler+0x702>
 800711e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007122:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 fd9e 	bl	8008c6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007130:	e016      	b.n	8007160 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d010      	beq.n	8007160 <HAL_UART_IRQHandler+0x730>
 800713e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007142:	2b00      	cmp	r3, #0
 8007144:	da0c      	bge.n	8007160 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 fd86 	bl	8008c58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800714c:	e008      	b.n	8007160 <HAL_UART_IRQHandler+0x730>
      return;
 800714e:	bf00      	nop
 8007150:	e006      	b.n	8007160 <HAL_UART_IRQHandler+0x730>
    return;
 8007152:	bf00      	nop
 8007154:	e004      	b.n	8007160 <HAL_UART_IRQHandler+0x730>
      return;
 8007156:	bf00      	nop
 8007158:	e002      	b.n	8007160 <HAL_UART_IRQHandler+0x730>
      return;
 800715a:	bf00      	nop
 800715c:	e000      	b.n	8007160 <HAL_UART_IRQHandler+0x730>
    return;
 800715e:	bf00      	nop
  }
}
 8007160:	37e8      	adds	r7, #232	; 0xe8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	effffffe 	.word	0xeffffffe

0800716c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b0:	b092      	sub	sp, #72	; 0x48
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	431a      	orrs	r2, r3
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	431a      	orrs	r2, r3
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4bbe      	ldr	r3, [pc, #760]	; (80074d4 <UART_SetConfig+0x328>)
 80071dc:	4013      	ands	r3, r2
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	6812      	ldr	r2, [r2, #0]
 80071e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071e4:	430b      	orrs	r3, r1
 80071e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4ab3      	ldr	r2, [pc, #716]	; (80074d8 <UART_SetConfig+0x32c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d004      	beq.n	8007218 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007214:	4313      	orrs	r3, r2
 8007216:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	4baf      	ldr	r3, [pc, #700]	; (80074dc <UART_SetConfig+0x330>)
 8007220:	4013      	ands	r3, r2
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007228:	430b      	orrs	r3, r1
 800722a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007232:	f023 010f 	bic.w	r1, r3, #15
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4aa6      	ldr	r2, [pc, #664]	; (80074e0 <UART_SetConfig+0x334>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d177      	bne.n	800733c <UART_SetConfig+0x190>
 800724c:	4ba5      	ldr	r3, [pc, #660]	; (80074e4 <UART_SetConfig+0x338>)
 800724e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007250:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007254:	2b28      	cmp	r3, #40	; 0x28
 8007256:	d86d      	bhi.n	8007334 <UART_SetConfig+0x188>
 8007258:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <UART_SetConfig+0xb4>)
 800725a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725e:	bf00      	nop
 8007260:	08007305 	.word	0x08007305
 8007264:	08007335 	.word	0x08007335
 8007268:	08007335 	.word	0x08007335
 800726c:	08007335 	.word	0x08007335
 8007270:	08007335 	.word	0x08007335
 8007274:	08007335 	.word	0x08007335
 8007278:	08007335 	.word	0x08007335
 800727c:	08007335 	.word	0x08007335
 8007280:	0800730d 	.word	0x0800730d
 8007284:	08007335 	.word	0x08007335
 8007288:	08007335 	.word	0x08007335
 800728c:	08007335 	.word	0x08007335
 8007290:	08007335 	.word	0x08007335
 8007294:	08007335 	.word	0x08007335
 8007298:	08007335 	.word	0x08007335
 800729c:	08007335 	.word	0x08007335
 80072a0:	08007315 	.word	0x08007315
 80072a4:	08007335 	.word	0x08007335
 80072a8:	08007335 	.word	0x08007335
 80072ac:	08007335 	.word	0x08007335
 80072b0:	08007335 	.word	0x08007335
 80072b4:	08007335 	.word	0x08007335
 80072b8:	08007335 	.word	0x08007335
 80072bc:	08007335 	.word	0x08007335
 80072c0:	0800731d 	.word	0x0800731d
 80072c4:	08007335 	.word	0x08007335
 80072c8:	08007335 	.word	0x08007335
 80072cc:	08007335 	.word	0x08007335
 80072d0:	08007335 	.word	0x08007335
 80072d4:	08007335 	.word	0x08007335
 80072d8:	08007335 	.word	0x08007335
 80072dc:	08007335 	.word	0x08007335
 80072e0:	08007325 	.word	0x08007325
 80072e4:	08007335 	.word	0x08007335
 80072e8:	08007335 	.word	0x08007335
 80072ec:	08007335 	.word	0x08007335
 80072f0:	08007335 	.word	0x08007335
 80072f4:	08007335 	.word	0x08007335
 80072f8:	08007335 	.word	0x08007335
 80072fc:	08007335 	.word	0x08007335
 8007300:	0800732d 	.word	0x0800732d
 8007304:	2301      	movs	r3, #1
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730a:	e222      	b.n	8007752 <UART_SetConfig+0x5a6>
 800730c:	2304      	movs	r3, #4
 800730e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007312:	e21e      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007314:	2308      	movs	r3, #8
 8007316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731a:	e21a      	b.n	8007752 <UART_SetConfig+0x5a6>
 800731c:	2310      	movs	r3, #16
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007322:	e216      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007324:	2320      	movs	r3, #32
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732a:	e212      	b.n	8007752 <UART_SetConfig+0x5a6>
 800732c:	2340      	movs	r3, #64	; 0x40
 800732e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007332:	e20e      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007334:	2380      	movs	r3, #128	; 0x80
 8007336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733a:	e20a      	b.n	8007752 <UART_SetConfig+0x5a6>
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a69      	ldr	r2, [pc, #420]	; (80074e8 <UART_SetConfig+0x33c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d130      	bne.n	80073a8 <UART_SetConfig+0x1fc>
 8007346:	4b67      	ldr	r3, [pc, #412]	; (80074e4 <UART_SetConfig+0x338>)
 8007348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	2b05      	cmp	r3, #5
 8007350:	d826      	bhi.n	80073a0 <UART_SetConfig+0x1f4>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <UART_SetConfig+0x1ac>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	08007371 	.word	0x08007371
 800735c:	08007379 	.word	0x08007379
 8007360:	08007381 	.word	0x08007381
 8007364:	08007389 	.word	0x08007389
 8007368:	08007391 	.word	0x08007391
 800736c:	08007399 	.word	0x08007399
 8007370:	2300      	movs	r3, #0
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007376:	e1ec      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007378:	2304      	movs	r3, #4
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800737e:	e1e8      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007380:	2308      	movs	r3, #8
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007386:	e1e4      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007388:	2310      	movs	r3, #16
 800738a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800738e:	e1e0      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007390:	2320      	movs	r3, #32
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007396:	e1dc      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007398:	2340      	movs	r3, #64	; 0x40
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739e:	e1d8      	b.n	8007752 <UART_SetConfig+0x5a6>
 80073a0:	2380      	movs	r3, #128	; 0x80
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a6:	e1d4      	b.n	8007752 <UART_SetConfig+0x5a6>
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a4f      	ldr	r2, [pc, #316]	; (80074ec <UART_SetConfig+0x340>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d130      	bne.n	8007414 <UART_SetConfig+0x268>
 80073b2:	4b4c      	ldr	r3, [pc, #304]	; (80074e4 <UART_SetConfig+0x338>)
 80073b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	d826      	bhi.n	800740c <UART_SetConfig+0x260>
 80073be:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <UART_SetConfig+0x218>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	080073dd 	.word	0x080073dd
 80073c8:	080073e5 	.word	0x080073e5
 80073cc:	080073ed 	.word	0x080073ed
 80073d0:	080073f5 	.word	0x080073f5
 80073d4:	080073fd 	.word	0x080073fd
 80073d8:	08007405 	.word	0x08007405
 80073dc:	2300      	movs	r3, #0
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073e2:	e1b6      	b.n	8007752 <UART_SetConfig+0x5a6>
 80073e4:	2304      	movs	r3, #4
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ea:	e1b2      	b.n	8007752 <UART_SetConfig+0x5a6>
 80073ec:	2308      	movs	r3, #8
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f2:	e1ae      	b.n	8007752 <UART_SetConfig+0x5a6>
 80073f4:	2310      	movs	r3, #16
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fa:	e1aa      	b.n	8007752 <UART_SetConfig+0x5a6>
 80073fc:	2320      	movs	r3, #32
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007402:	e1a6      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007404:	2340      	movs	r3, #64	; 0x40
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740a:	e1a2      	b.n	8007752 <UART_SetConfig+0x5a6>
 800740c:	2380      	movs	r3, #128	; 0x80
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007412:	e19e      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a35      	ldr	r2, [pc, #212]	; (80074f0 <UART_SetConfig+0x344>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d130      	bne.n	8007480 <UART_SetConfig+0x2d4>
 800741e:	4b31      	ldr	r3, [pc, #196]	; (80074e4 <UART_SetConfig+0x338>)
 8007420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	2b05      	cmp	r3, #5
 8007428:	d826      	bhi.n	8007478 <UART_SetConfig+0x2cc>
 800742a:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <UART_SetConfig+0x284>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	08007449 	.word	0x08007449
 8007434:	08007451 	.word	0x08007451
 8007438:	08007459 	.word	0x08007459
 800743c:	08007461 	.word	0x08007461
 8007440:	08007469 	.word	0x08007469
 8007444:	08007471 	.word	0x08007471
 8007448:	2300      	movs	r3, #0
 800744a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800744e:	e180      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007450:	2304      	movs	r3, #4
 8007452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007456:	e17c      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007458:	2308      	movs	r3, #8
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745e:	e178      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007460:	2310      	movs	r3, #16
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007466:	e174      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007468:	2320      	movs	r3, #32
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746e:	e170      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007470:	2340      	movs	r3, #64	; 0x40
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007476:	e16c      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007478:	2380      	movs	r3, #128	; 0x80
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747e:	e168      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1b      	ldr	r2, [pc, #108]	; (80074f4 <UART_SetConfig+0x348>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d142      	bne.n	8007510 <UART_SetConfig+0x364>
 800748a:	4b16      	ldr	r3, [pc, #88]	; (80074e4 <UART_SetConfig+0x338>)
 800748c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	2b05      	cmp	r3, #5
 8007494:	d838      	bhi.n	8007508 <UART_SetConfig+0x35c>
 8007496:	a201      	add	r2, pc, #4	; (adr r2, 800749c <UART_SetConfig+0x2f0>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	080074b5 	.word	0x080074b5
 80074a0:	080074bd 	.word	0x080074bd
 80074a4:	080074c5 	.word	0x080074c5
 80074a8:	080074cd 	.word	0x080074cd
 80074ac:	080074f9 	.word	0x080074f9
 80074b0:	08007501 	.word	0x08007501
 80074b4:	2300      	movs	r3, #0
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ba:	e14a      	b.n	8007752 <UART_SetConfig+0x5a6>
 80074bc:	2304      	movs	r3, #4
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c2:	e146      	b.n	8007752 <UART_SetConfig+0x5a6>
 80074c4:	2308      	movs	r3, #8
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ca:	e142      	b.n	8007752 <UART_SetConfig+0x5a6>
 80074cc:	2310      	movs	r3, #16
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d2:	e13e      	b.n	8007752 <UART_SetConfig+0x5a6>
 80074d4:	cfff69f3 	.word	0xcfff69f3
 80074d8:	58000c00 	.word	0x58000c00
 80074dc:	11fff4ff 	.word	0x11fff4ff
 80074e0:	40011000 	.word	0x40011000
 80074e4:	58024400 	.word	0x58024400
 80074e8:	40004400 	.word	0x40004400
 80074ec:	40004800 	.word	0x40004800
 80074f0:	40004c00 	.word	0x40004c00
 80074f4:	40005000 	.word	0x40005000
 80074f8:	2320      	movs	r3, #32
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fe:	e128      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007500:	2340      	movs	r3, #64	; 0x40
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007506:	e124      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007508:	2380      	movs	r3, #128	; 0x80
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750e:	e120      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4acb      	ldr	r2, [pc, #812]	; (8007844 <UART_SetConfig+0x698>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d176      	bne.n	8007608 <UART_SetConfig+0x45c>
 800751a:	4bcb      	ldr	r3, [pc, #812]	; (8007848 <UART_SetConfig+0x69c>)
 800751c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007522:	2b28      	cmp	r3, #40	; 0x28
 8007524:	d86c      	bhi.n	8007600 <UART_SetConfig+0x454>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <UART_SetConfig+0x380>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	080075d1 	.word	0x080075d1
 8007530:	08007601 	.word	0x08007601
 8007534:	08007601 	.word	0x08007601
 8007538:	08007601 	.word	0x08007601
 800753c:	08007601 	.word	0x08007601
 8007540:	08007601 	.word	0x08007601
 8007544:	08007601 	.word	0x08007601
 8007548:	08007601 	.word	0x08007601
 800754c:	080075d9 	.word	0x080075d9
 8007550:	08007601 	.word	0x08007601
 8007554:	08007601 	.word	0x08007601
 8007558:	08007601 	.word	0x08007601
 800755c:	08007601 	.word	0x08007601
 8007560:	08007601 	.word	0x08007601
 8007564:	08007601 	.word	0x08007601
 8007568:	08007601 	.word	0x08007601
 800756c:	080075e1 	.word	0x080075e1
 8007570:	08007601 	.word	0x08007601
 8007574:	08007601 	.word	0x08007601
 8007578:	08007601 	.word	0x08007601
 800757c:	08007601 	.word	0x08007601
 8007580:	08007601 	.word	0x08007601
 8007584:	08007601 	.word	0x08007601
 8007588:	08007601 	.word	0x08007601
 800758c:	080075e9 	.word	0x080075e9
 8007590:	08007601 	.word	0x08007601
 8007594:	08007601 	.word	0x08007601
 8007598:	08007601 	.word	0x08007601
 800759c:	08007601 	.word	0x08007601
 80075a0:	08007601 	.word	0x08007601
 80075a4:	08007601 	.word	0x08007601
 80075a8:	08007601 	.word	0x08007601
 80075ac:	080075f1 	.word	0x080075f1
 80075b0:	08007601 	.word	0x08007601
 80075b4:	08007601 	.word	0x08007601
 80075b8:	08007601 	.word	0x08007601
 80075bc:	08007601 	.word	0x08007601
 80075c0:	08007601 	.word	0x08007601
 80075c4:	08007601 	.word	0x08007601
 80075c8:	08007601 	.word	0x08007601
 80075cc:	080075f9 	.word	0x080075f9
 80075d0:	2301      	movs	r3, #1
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075d6:	e0bc      	b.n	8007752 <UART_SetConfig+0x5a6>
 80075d8:	2304      	movs	r3, #4
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075de:	e0b8      	b.n	8007752 <UART_SetConfig+0x5a6>
 80075e0:	2308      	movs	r3, #8
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e6:	e0b4      	b.n	8007752 <UART_SetConfig+0x5a6>
 80075e8:	2310      	movs	r3, #16
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ee:	e0b0      	b.n	8007752 <UART_SetConfig+0x5a6>
 80075f0:	2320      	movs	r3, #32
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f6:	e0ac      	b.n	8007752 <UART_SetConfig+0x5a6>
 80075f8:	2340      	movs	r3, #64	; 0x40
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fe:	e0a8      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007600:	2380      	movs	r3, #128	; 0x80
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007606:	e0a4      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a8f      	ldr	r2, [pc, #572]	; (800784c <UART_SetConfig+0x6a0>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d130      	bne.n	8007674 <UART_SetConfig+0x4c8>
 8007612:	4b8d      	ldr	r3, [pc, #564]	; (8007848 <UART_SetConfig+0x69c>)
 8007614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	2b05      	cmp	r3, #5
 800761c:	d826      	bhi.n	800766c <UART_SetConfig+0x4c0>
 800761e:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <UART_SetConfig+0x478>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	0800763d 	.word	0x0800763d
 8007628:	08007645 	.word	0x08007645
 800762c:	0800764d 	.word	0x0800764d
 8007630:	08007655 	.word	0x08007655
 8007634:	0800765d 	.word	0x0800765d
 8007638:	08007665 	.word	0x08007665
 800763c:	2300      	movs	r3, #0
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007642:	e086      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007644:	2304      	movs	r3, #4
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764a:	e082      	b.n	8007752 <UART_SetConfig+0x5a6>
 800764c:	2308      	movs	r3, #8
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007652:	e07e      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007654:	2310      	movs	r3, #16
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765a:	e07a      	b.n	8007752 <UART_SetConfig+0x5a6>
 800765c:	2320      	movs	r3, #32
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007662:	e076      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007664:	2340      	movs	r3, #64	; 0x40
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766a:	e072      	b.n	8007752 <UART_SetConfig+0x5a6>
 800766c:	2380      	movs	r3, #128	; 0x80
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007672:	e06e      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a75      	ldr	r2, [pc, #468]	; (8007850 <UART_SetConfig+0x6a4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d130      	bne.n	80076e0 <UART_SetConfig+0x534>
 800767e:	4b72      	ldr	r3, [pc, #456]	; (8007848 <UART_SetConfig+0x69c>)
 8007680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	2b05      	cmp	r3, #5
 8007688:	d826      	bhi.n	80076d8 <UART_SetConfig+0x52c>
 800768a:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <UART_SetConfig+0x4e4>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076a9 	.word	0x080076a9
 8007694:	080076b1 	.word	0x080076b1
 8007698:	080076b9 	.word	0x080076b9
 800769c:	080076c1 	.word	0x080076c1
 80076a0:	080076c9 	.word	0x080076c9
 80076a4:	080076d1 	.word	0x080076d1
 80076a8:	2300      	movs	r3, #0
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ae:	e050      	b.n	8007752 <UART_SetConfig+0x5a6>
 80076b0:	2304      	movs	r3, #4
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076b6:	e04c      	b.n	8007752 <UART_SetConfig+0x5a6>
 80076b8:	2308      	movs	r3, #8
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076be:	e048      	b.n	8007752 <UART_SetConfig+0x5a6>
 80076c0:	2310      	movs	r3, #16
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c6:	e044      	b.n	8007752 <UART_SetConfig+0x5a6>
 80076c8:	2320      	movs	r3, #32
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ce:	e040      	b.n	8007752 <UART_SetConfig+0x5a6>
 80076d0:	2340      	movs	r3, #64	; 0x40
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d6:	e03c      	b.n	8007752 <UART_SetConfig+0x5a6>
 80076d8:	2380      	movs	r3, #128	; 0x80
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076de:	e038      	b.n	8007752 <UART_SetConfig+0x5a6>
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a5b      	ldr	r2, [pc, #364]	; (8007854 <UART_SetConfig+0x6a8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d130      	bne.n	800774c <UART_SetConfig+0x5a0>
 80076ea:	4b57      	ldr	r3, [pc, #348]	; (8007848 <UART_SetConfig+0x69c>)
 80076ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	2b05      	cmp	r3, #5
 80076f4:	d826      	bhi.n	8007744 <UART_SetConfig+0x598>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <UART_SetConfig+0x550>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007715 	.word	0x08007715
 8007700:	0800771d 	.word	0x0800771d
 8007704:	08007725 	.word	0x08007725
 8007708:	0800772d 	.word	0x0800772d
 800770c:	08007735 	.word	0x08007735
 8007710:	0800773d 	.word	0x0800773d
 8007714:	2302      	movs	r3, #2
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771a:	e01a      	b.n	8007752 <UART_SetConfig+0x5a6>
 800771c:	2304      	movs	r3, #4
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007722:	e016      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007724:	2308      	movs	r3, #8
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772a:	e012      	b.n	8007752 <UART_SetConfig+0x5a6>
 800772c:	2310      	movs	r3, #16
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007732:	e00e      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007734:	2320      	movs	r3, #32
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800773a:	e00a      	b.n	8007752 <UART_SetConfig+0x5a6>
 800773c:	2340      	movs	r3, #64	; 0x40
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007742:	e006      	b.n	8007752 <UART_SetConfig+0x5a6>
 8007744:	2380      	movs	r3, #128	; 0x80
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774a:	e002      	b.n	8007752 <UART_SetConfig+0x5a6>
 800774c:	2380      	movs	r3, #128	; 0x80
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a3f      	ldr	r2, [pc, #252]	; (8007854 <UART_SetConfig+0x6a8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	f040 80f8 	bne.w	800794e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800775e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007762:	2b20      	cmp	r3, #32
 8007764:	dc46      	bgt.n	80077f4 <UART_SetConfig+0x648>
 8007766:	2b02      	cmp	r3, #2
 8007768:	f2c0 8082 	blt.w	8007870 <UART_SetConfig+0x6c4>
 800776c:	3b02      	subs	r3, #2
 800776e:	2b1e      	cmp	r3, #30
 8007770:	d87e      	bhi.n	8007870 <UART_SetConfig+0x6c4>
 8007772:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <UART_SetConfig+0x5cc>)
 8007774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007778:	080077fb 	.word	0x080077fb
 800777c:	08007871 	.word	0x08007871
 8007780:	08007803 	.word	0x08007803
 8007784:	08007871 	.word	0x08007871
 8007788:	08007871 	.word	0x08007871
 800778c:	08007871 	.word	0x08007871
 8007790:	08007813 	.word	0x08007813
 8007794:	08007871 	.word	0x08007871
 8007798:	08007871 	.word	0x08007871
 800779c:	08007871 	.word	0x08007871
 80077a0:	08007871 	.word	0x08007871
 80077a4:	08007871 	.word	0x08007871
 80077a8:	08007871 	.word	0x08007871
 80077ac:	08007871 	.word	0x08007871
 80077b0:	08007823 	.word	0x08007823
 80077b4:	08007871 	.word	0x08007871
 80077b8:	08007871 	.word	0x08007871
 80077bc:	08007871 	.word	0x08007871
 80077c0:	08007871 	.word	0x08007871
 80077c4:	08007871 	.word	0x08007871
 80077c8:	08007871 	.word	0x08007871
 80077cc:	08007871 	.word	0x08007871
 80077d0:	08007871 	.word	0x08007871
 80077d4:	08007871 	.word	0x08007871
 80077d8:	08007871 	.word	0x08007871
 80077dc:	08007871 	.word	0x08007871
 80077e0:	08007871 	.word	0x08007871
 80077e4:	08007871 	.word	0x08007871
 80077e8:	08007871 	.word	0x08007871
 80077ec:	08007871 	.word	0x08007871
 80077f0:	08007863 	.word	0x08007863
 80077f4:	2b40      	cmp	r3, #64	; 0x40
 80077f6:	d037      	beq.n	8007868 <UART_SetConfig+0x6bc>
 80077f8:	e03a      	b.n	8007870 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80077fa:	f7fe f8a5 	bl	8005948 <HAL_RCCEx_GetD3PCLK1Freq>
 80077fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007800:	e03c      	b.n	800787c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe f8b4 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007810:	e034      	b.n	800787c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007812:	f107 0318 	add.w	r3, r7, #24
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fa00 	bl	8005c1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007820:	e02c      	b.n	800787c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007822:	4b09      	ldr	r3, [pc, #36]	; (8007848 <UART_SetConfig+0x69c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0320 	and.w	r3, r3, #32
 800782a:	2b00      	cmp	r3, #0
 800782c:	d016      	beq.n	800785c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800782e:	4b06      	ldr	r3, [pc, #24]	; (8007848 <UART_SetConfig+0x69c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	08db      	lsrs	r3, r3, #3
 8007834:	f003 0303 	and.w	r3, r3, #3
 8007838:	4a07      	ldr	r2, [pc, #28]	; (8007858 <UART_SetConfig+0x6ac>)
 800783a:	fa22 f303 	lsr.w	r3, r2, r3
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007840:	e01c      	b.n	800787c <UART_SetConfig+0x6d0>
 8007842:	bf00      	nop
 8007844:	40011400 	.word	0x40011400
 8007848:	58024400 	.word	0x58024400
 800784c:	40007800 	.word	0x40007800
 8007850:	40007c00 	.word	0x40007c00
 8007854:	58000c00 	.word	0x58000c00
 8007858:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800785c:	4b9d      	ldr	r3, [pc, #628]	; (8007ad4 <UART_SetConfig+0x928>)
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007860:	e00c      	b.n	800787c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007862:	4b9d      	ldr	r3, [pc, #628]	; (8007ad8 <UART_SetConfig+0x92c>)
 8007864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007866:	e009      	b.n	800787c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800786c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800786e:	e005      	b.n	800787c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800787a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800787c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 81de 	beq.w	8007c40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	4a94      	ldr	r2, [pc, #592]	; (8007adc <UART_SetConfig+0x930>)
 800788a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800788e:	461a      	mov	r2, r3
 8007890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007892:	fbb3 f3f2 	udiv	r3, r3, r2
 8007896:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	4613      	mov	r3, r2
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	4413      	add	r3, r2
 80078a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d305      	bcc.n	80078b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d903      	bls.n	80078bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80078ba:	e1c1      	b.n	8007c40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078be:	2200      	movs	r2, #0
 80078c0:	60bb      	str	r3, [r7, #8]
 80078c2:	60fa      	str	r2, [r7, #12]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	4a84      	ldr	r2, [pc, #528]	; (8007adc <UART_SetConfig+0x930>)
 80078ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	2200      	movs	r2, #0
 80078d2:	603b      	str	r3, [r7, #0]
 80078d4:	607a      	str	r2, [r7, #4]
 80078d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078de:	f7f8 fd57 	bl	8000390 <__aeabi_uldivmod>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4610      	mov	r0, r2
 80078e8:	4619      	mov	r1, r3
 80078ea:	f04f 0200 	mov.w	r2, #0
 80078ee:	f04f 0300 	mov.w	r3, #0
 80078f2:	020b      	lsls	r3, r1, #8
 80078f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078f8:	0202      	lsls	r2, r0, #8
 80078fa:	6979      	ldr	r1, [r7, #20]
 80078fc:	6849      	ldr	r1, [r1, #4]
 80078fe:	0849      	lsrs	r1, r1, #1
 8007900:	2000      	movs	r0, #0
 8007902:	460c      	mov	r4, r1
 8007904:	4605      	mov	r5, r0
 8007906:	eb12 0804 	adds.w	r8, r2, r4
 800790a:	eb43 0905 	adc.w	r9, r3, r5
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	469a      	mov	sl, r3
 8007916:	4693      	mov	fp, r2
 8007918:	4652      	mov	r2, sl
 800791a:	465b      	mov	r3, fp
 800791c:	4640      	mov	r0, r8
 800791e:	4649      	mov	r1, r9
 8007920:	f7f8 fd36 	bl	8000390 <__aeabi_uldivmod>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	4613      	mov	r3, r2
 800792a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800792c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007932:	d308      	bcc.n	8007946 <UART_SetConfig+0x79a>
 8007934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800793a:	d204      	bcs.n	8007946 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007942:	60da      	str	r2, [r3, #12]
 8007944:	e17c      	b.n	8007c40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800794c:	e178      	b.n	8007c40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007956:	f040 80c5 	bne.w	8007ae4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800795a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800795e:	2b20      	cmp	r3, #32
 8007960:	dc48      	bgt.n	80079f4 <UART_SetConfig+0x848>
 8007962:	2b00      	cmp	r3, #0
 8007964:	db7b      	blt.n	8007a5e <UART_SetConfig+0x8b2>
 8007966:	2b20      	cmp	r3, #32
 8007968:	d879      	bhi.n	8007a5e <UART_SetConfig+0x8b2>
 800796a:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <UART_SetConfig+0x7c4>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	080079fb 	.word	0x080079fb
 8007974:	08007a03 	.word	0x08007a03
 8007978:	08007a5f 	.word	0x08007a5f
 800797c:	08007a5f 	.word	0x08007a5f
 8007980:	08007a0b 	.word	0x08007a0b
 8007984:	08007a5f 	.word	0x08007a5f
 8007988:	08007a5f 	.word	0x08007a5f
 800798c:	08007a5f 	.word	0x08007a5f
 8007990:	08007a1b 	.word	0x08007a1b
 8007994:	08007a5f 	.word	0x08007a5f
 8007998:	08007a5f 	.word	0x08007a5f
 800799c:	08007a5f 	.word	0x08007a5f
 80079a0:	08007a5f 	.word	0x08007a5f
 80079a4:	08007a5f 	.word	0x08007a5f
 80079a8:	08007a5f 	.word	0x08007a5f
 80079ac:	08007a5f 	.word	0x08007a5f
 80079b0:	08007a2b 	.word	0x08007a2b
 80079b4:	08007a5f 	.word	0x08007a5f
 80079b8:	08007a5f 	.word	0x08007a5f
 80079bc:	08007a5f 	.word	0x08007a5f
 80079c0:	08007a5f 	.word	0x08007a5f
 80079c4:	08007a5f 	.word	0x08007a5f
 80079c8:	08007a5f 	.word	0x08007a5f
 80079cc:	08007a5f 	.word	0x08007a5f
 80079d0:	08007a5f 	.word	0x08007a5f
 80079d4:	08007a5f 	.word	0x08007a5f
 80079d8:	08007a5f 	.word	0x08007a5f
 80079dc:	08007a5f 	.word	0x08007a5f
 80079e0:	08007a5f 	.word	0x08007a5f
 80079e4:	08007a5f 	.word	0x08007a5f
 80079e8:	08007a5f 	.word	0x08007a5f
 80079ec:	08007a5f 	.word	0x08007a5f
 80079f0:	08007a51 	.word	0x08007a51
 80079f4:	2b40      	cmp	r3, #64	; 0x40
 80079f6:	d02e      	beq.n	8007a56 <UART_SetConfig+0x8aa>
 80079f8:	e031      	b.n	8007a5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079fa:	f7fd f833 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 80079fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a00:	e033      	b.n	8007a6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a02:	f7fd f845 	bl	8004a90 <HAL_RCC_GetPCLK2Freq>
 8007a06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a08:	e02f      	b.n	8007a6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fd ffb0 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a18:	e027      	b.n	8007a6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a1a:	f107 0318 	add.w	r3, r7, #24
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fe f8fc 	bl	8005c1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a28:	e01f      	b.n	8007a6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a2a:	4b2d      	ldr	r3, [pc, #180]	; (8007ae0 <UART_SetConfig+0x934>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a36:	4b2a      	ldr	r3, [pc, #168]	; (8007ae0 <UART_SetConfig+0x934>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	08db      	lsrs	r3, r3, #3
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	4a24      	ldr	r2, [pc, #144]	; (8007ad4 <UART_SetConfig+0x928>)
 8007a42:	fa22 f303 	lsr.w	r3, r2, r3
 8007a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a48:	e00f      	b.n	8007a6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007a4a:	4b22      	ldr	r3, [pc, #136]	; (8007ad4 <UART_SetConfig+0x928>)
 8007a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a4e:	e00c      	b.n	8007a6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a50:	4b21      	ldr	r3, [pc, #132]	; (8007ad8 <UART_SetConfig+0x92c>)
 8007a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a54:	e009      	b.n	8007a6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a5c:	e005      	b.n	8007a6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 80e7 	beq.w	8007c40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a76:	4a19      	ldr	r2, [pc, #100]	; (8007adc <UART_SetConfig+0x930>)
 8007a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a80:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a84:	005a      	lsls	r2, r3, #1
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	085b      	lsrs	r3, r3, #1
 8007a8c:	441a      	add	r2, r3
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a96:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	2b0f      	cmp	r3, #15
 8007a9c:	d916      	bls.n	8007acc <UART_SetConfig+0x920>
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa4:	d212      	bcs.n	8007acc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	f023 030f 	bic.w	r3, r3, #15
 8007aae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	085b      	lsrs	r3, r3, #1
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007ac8:	60da      	str	r2, [r3, #12]
 8007aca:	e0b9      	b.n	8007c40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ad2:	e0b5      	b.n	8007c40 <UART_SetConfig+0xa94>
 8007ad4:	03d09000 	.word	0x03d09000
 8007ad8:	003d0900 	.word	0x003d0900
 8007adc:	0800c260 	.word	0x0800c260
 8007ae0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ae4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	dc49      	bgt.n	8007b80 <UART_SetConfig+0x9d4>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	db7c      	blt.n	8007bea <UART_SetConfig+0xa3e>
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d87a      	bhi.n	8007bea <UART_SetConfig+0xa3e>
 8007af4:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <UART_SetConfig+0x950>)
 8007af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afa:	bf00      	nop
 8007afc:	08007b87 	.word	0x08007b87
 8007b00:	08007b8f 	.word	0x08007b8f
 8007b04:	08007beb 	.word	0x08007beb
 8007b08:	08007beb 	.word	0x08007beb
 8007b0c:	08007b97 	.word	0x08007b97
 8007b10:	08007beb 	.word	0x08007beb
 8007b14:	08007beb 	.word	0x08007beb
 8007b18:	08007beb 	.word	0x08007beb
 8007b1c:	08007ba7 	.word	0x08007ba7
 8007b20:	08007beb 	.word	0x08007beb
 8007b24:	08007beb 	.word	0x08007beb
 8007b28:	08007beb 	.word	0x08007beb
 8007b2c:	08007beb 	.word	0x08007beb
 8007b30:	08007beb 	.word	0x08007beb
 8007b34:	08007beb 	.word	0x08007beb
 8007b38:	08007beb 	.word	0x08007beb
 8007b3c:	08007bb7 	.word	0x08007bb7
 8007b40:	08007beb 	.word	0x08007beb
 8007b44:	08007beb 	.word	0x08007beb
 8007b48:	08007beb 	.word	0x08007beb
 8007b4c:	08007beb 	.word	0x08007beb
 8007b50:	08007beb 	.word	0x08007beb
 8007b54:	08007beb 	.word	0x08007beb
 8007b58:	08007beb 	.word	0x08007beb
 8007b5c:	08007beb 	.word	0x08007beb
 8007b60:	08007beb 	.word	0x08007beb
 8007b64:	08007beb 	.word	0x08007beb
 8007b68:	08007beb 	.word	0x08007beb
 8007b6c:	08007beb 	.word	0x08007beb
 8007b70:	08007beb 	.word	0x08007beb
 8007b74:	08007beb 	.word	0x08007beb
 8007b78:	08007beb 	.word	0x08007beb
 8007b7c:	08007bdd 	.word	0x08007bdd
 8007b80:	2b40      	cmp	r3, #64	; 0x40
 8007b82:	d02e      	beq.n	8007be2 <UART_SetConfig+0xa36>
 8007b84:	e031      	b.n	8007bea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b86:	f7fc ff6d 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8007b8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b8c:	e033      	b.n	8007bf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b8e:	f7fc ff7f 	bl	8004a90 <HAL_RCC_GetPCLK2Freq>
 8007b92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b94:	e02f      	b.n	8007bf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fd feea 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ba4:	e027      	b.n	8007bf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ba6:	f107 0318 	add.w	r3, r7, #24
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe f836 	bl	8005c1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bb4:	e01f      	b.n	8007bf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bb6:	4b2d      	ldr	r3, [pc, #180]	; (8007c6c <UART_SetConfig+0xac0>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d009      	beq.n	8007bd6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007bc2:	4b2a      	ldr	r3, [pc, #168]	; (8007c6c <UART_SetConfig+0xac0>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	08db      	lsrs	r3, r3, #3
 8007bc8:	f003 0303 	and.w	r3, r3, #3
 8007bcc:	4a28      	ldr	r2, [pc, #160]	; (8007c70 <UART_SetConfig+0xac4>)
 8007bce:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bd4:	e00f      	b.n	8007bf6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007bd6:	4b26      	ldr	r3, [pc, #152]	; (8007c70 <UART_SetConfig+0xac4>)
 8007bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bda:	e00c      	b.n	8007bf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bdc:	4b25      	ldr	r3, [pc, #148]	; (8007c74 <UART_SetConfig+0xac8>)
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007be0:	e009      	b.n	8007bf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007be8:	e005      	b.n	8007bf6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007bf4:	bf00      	nop
    }

    if (pclk != 0U)
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d021      	beq.n	8007c40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	4a1d      	ldr	r2, [pc, #116]	; (8007c78 <UART_SetConfig+0xacc>)
 8007c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c06:	461a      	mov	r2, r3
 8007c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	085b      	lsrs	r3, r3, #1
 8007c14:	441a      	add	r2, r3
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	2b0f      	cmp	r3, #15
 8007c24:	d909      	bls.n	8007c3a <UART_SetConfig+0xa8e>
 8007c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c2c:	d205      	bcs.n	8007c3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60da      	str	r2, [r3, #12]
 8007c38:	e002      	b.n	8007c40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2200      	movs	r2, #0
 8007c54:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007c5c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3748      	adds	r7, #72	; 0x48
 8007c64:	46bd      	mov	sp, r7
 8007c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c6a:	bf00      	nop
 8007c6c:	58024400 	.word	0x58024400
 8007c70:	03d09000 	.word	0x03d09000
 8007c74:	003d0900 	.word	0x003d0900
 8007c78:	0800c260 	.word	0x0800c260

08007c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00a      	beq.n	8007cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	f003 0308 	and.w	r3, r3, #8
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	f003 0310 	and.w	r3, r3, #16
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00a      	beq.n	8007d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	f003 0320 	and.w	r3, r3, #32
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00a      	beq.n	8007d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d01a      	beq.n	8007d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d7a:	d10a      	bne.n	8007d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	430a      	orrs	r2, r1
 8007db2:	605a      	str	r2, [r3, #4]
  }
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af02      	add	r7, sp, #8
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007dd0:	f7f9 fd5c 	bl	800188c <HAL_GetTick>
 8007dd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0308 	and.w	r3, r3, #8
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d10e      	bne.n	8007e02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007de4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f82f 	bl	8007e56 <UART_WaitOnFlagUntilTimeout>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e025      	b.n	8007e4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d10e      	bne.n	8007e2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f819 	bl	8007e56 <UART_WaitOnFlagUntilTimeout>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e00f      	b.n	8007e4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b09c      	sub	sp, #112	; 0x70
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	603b      	str	r3, [r7, #0]
 8007e62:	4613      	mov	r3, r2
 8007e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e66:	e0a9      	b.n	8007fbc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6e:	f000 80a5 	beq.w	8007fbc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e72:	f7f9 fd0b 	bl	800188c <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d302      	bcc.n	8007e88 <UART_WaitOnFlagUntilTimeout+0x32>
 8007e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d140      	bne.n	8007f0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e90:	e853 3f00 	ldrex	r3, [r3]
 8007e94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e9c:	667b      	str	r3, [r7, #100]	; 0x64
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ea8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007eac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007eae:	e841 2300 	strex	r3, r2, [r1]
 8007eb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1e6      	bne.n	8007e88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	f023 0301 	bic.w	r3, r3, #1
 8007ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007eda:	64ba      	str	r2, [r7, #72]	; 0x48
 8007edc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e5      	bne.n	8007eba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2220      	movs	r2, #32
 8007ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e069      	b.n	8007fde <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0304 	and.w	r3, r3, #4
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d051      	beq.n	8007fbc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f26:	d149      	bne.n	8007fbc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	e853 3f00 	ldrex	r3, [r3]
 8007f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f50:	637b      	str	r3, [r7, #52]	; 0x34
 8007f52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f58:	e841 2300 	strex	r3, r2, [r1]
 8007f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1e6      	bne.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3308      	adds	r3, #8
 8007f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	613b      	str	r3, [r7, #16]
   return(result);
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f023 0301 	bic.w	r3, r3, #1
 8007f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f84:	623a      	str	r2, [r7, #32]
 8007f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	69f9      	ldr	r1, [r7, #28]
 8007f8a:	6a3a      	ldr	r2, [r7, #32]
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e5      	bne.n	8007f64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e010      	b.n	8007fde <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69da      	ldr	r2, [r3, #28]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	bf0c      	ite	eq
 8007fcc:	2301      	moveq	r3, #1
 8007fce:	2300      	movne	r3, #0
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	f43f af46 	beq.w	8007e68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3770      	adds	r7, #112	; 0x70
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b0a3      	sub	sp, #140	; 0x8c
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	88fa      	ldrh	r2, [r7, #6]
 8008000:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	88fa      	ldrh	r2, [r7, #6]
 8008008:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800801a:	d10e      	bne.n	800803a <UART_Start_Receive_IT+0x52>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d105      	bne.n	8008030 <UART_Start_Receive_IT+0x48>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f240 12ff 	movw	r2, #511	; 0x1ff
 800802a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800802e:	e02d      	b.n	800808c <UART_Start_Receive_IT+0xa4>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	22ff      	movs	r2, #255	; 0xff
 8008034:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008038:	e028      	b.n	800808c <UART_Start_Receive_IT+0xa4>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10d      	bne.n	800805e <UART_Start_Receive_IT+0x76>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d104      	bne.n	8008054 <UART_Start_Receive_IT+0x6c>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	22ff      	movs	r2, #255	; 0xff
 800804e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008052:	e01b      	b.n	800808c <UART_Start_Receive_IT+0xa4>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	227f      	movs	r2, #127	; 0x7f
 8008058:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800805c:	e016      	b.n	800808c <UART_Start_Receive_IT+0xa4>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008066:	d10d      	bne.n	8008084 <UART_Start_Receive_IT+0x9c>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d104      	bne.n	800807a <UART_Start_Receive_IT+0x92>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	227f      	movs	r2, #127	; 0x7f
 8008074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008078:	e008      	b.n	800808c <UART_Start_Receive_IT+0xa4>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	223f      	movs	r2, #63	; 0x3f
 800807e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008082:	e003      	b.n	800808c <UART_Start_Receive_IT+0xa4>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2222      	movs	r2, #34	; 0x22
 8008098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3308      	adds	r3, #8
 80080a2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080a6:	e853 3f00 	ldrex	r3, [r3]
 80080aa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80080ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080ae:	f043 0301 	orr.w	r3, r3, #1
 80080b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3308      	adds	r3, #8
 80080bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80080c0:	673a      	str	r2, [r7, #112]	; 0x70
 80080c2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80080c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80080ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e3      	bne.n	800809c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080dc:	d153      	bne.n	8008186 <UART_Start_Receive_IT+0x19e>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080e4:	88fa      	ldrh	r2, [r7, #6]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d34d      	bcc.n	8008186 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f2:	d107      	bne.n	8008104 <UART_Start_Receive_IT+0x11c>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d103      	bne.n	8008104 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4a4b      	ldr	r2, [pc, #300]	; (800822c <UART_Start_Receive_IT+0x244>)
 8008100:	671a      	str	r2, [r3, #112]	; 0x70
 8008102:	e002      	b.n	800810a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4a4a      	ldr	r2, [pc, #296]	; (8008230 <UART_Start_Receive_IT+0x248>)
 8008108:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d01a      	beq.n	8008150 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800812a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800812e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800813c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800813e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008142:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800814a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e4      	bne.n	800811a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3308      	adds	r3, #8
 8008156:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008166:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3308      	adds	r3, #8
 800816e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008170:	64ba      	str	r2, [r7, #72]	; 0x48
 8008172:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800817e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e5      	bne.n	8008150 <UART_Start_Receive_IT+0x168>
 8008184:	e04a      	b.n	800821c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800818e:	d107      	bne.n	80081a0 <UART_Start_Receive_IT+0x1b8>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d103      	bne.n	80081a0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4a26      	ldr	r2, [pc, #152]	; (8008234 <UART_Start_Receive_IT+0x24c>)
 800819c:	671a      	str	r2, [r3, #112]	; 0x70
 800819e:	e002      	b.n	80081a6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a25      	ldr	r2, [pc, #148]	; (8008238 <UART_Start_Receive_IT+0x250>)
 80081a4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d019      	beq.n	80081ea <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80081ca:	677b      	str	r3, [r7, #116]	; 0x74
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081d4:	637b      	str	r3, [r7, #52]	; 0x34
 80081d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e6      	bne.n	80081b6 <UART_Start_Receive_IT+0x1ce>
 80081e8:	e018      	b.n	800821c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	e853 3f00 	ldrex	r3, [r3]
 80081f6:	613b      	str	r3, [r7, #16]
   return(result);
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f043 0320 	orr.w	r3, r3, #32
 80081fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	461a      	mov	r2, r3
 8008206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008208:	623b      	str	r3, [r7, #32]
 800820a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	69f9      	ldr	r1, [r7, #28]
 800820e:	6a3a      	ldr	r2, [r7, #32]
 8008210:	e841 2300 	strex	r3, r2, [r1]
 8008214:	61bb      	str	r3, [r7, #24]
   return(result);
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e6      	bne.n	80081ea <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	378c      	adds	r7, #140	; 0x8c
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	08008945 	.word	0x08008945
 8008230:	0800864d 	.word	0x0800864d
 8008234:	080084eb 	.word	0x080084eb
 8008238:	0800838b 	.word	0x0800838b

0800823c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800823c:	b480      	push	{r7}
 800823e:	b095      	sub	sp, #84	; 0x54
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008262:	643b      	str	r3, [r7, #64]	; 0x40
 8008264:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e6      	bne.n	8008244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3308      	adds	r3, #8
 800827c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	61fb      	str	r3, [r7, #28]
   return(result);
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	4b1e      	ldr	r3, [pc, #120]	; (8008304 <UART_EndRxTransfer+0xc8>)
 800828a:	4013      	ands	r3, r2
 800828c:	64bb      	str	r3, [r7, #72]	; 0x48
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3308      	adds	r3, #8
 8008294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800829c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e5      	bne.n	8008276 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d118      	bne.n	80082e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	e853 3f00 	ldrex	r3, [r3]
 80082be:	60bb      	str	r3, [r7, #8]
   return(result);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f023 0310 	bic.w	r3, r3, #16
 80082c6:	647b      	str	r3, [r7, #68]	; 0x44
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	461a      	mov	r2, r3
 80082ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d0:	61bb      	str	r3, [r7, #24]
 80082d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	6979      	ldr	r1, [r7, #20]
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	e841 2300 	strex	r3, r2, [r1]
 80082dc:	613b      	str	r3, [r7, #16]
   return(result);
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e6      	bne.n	80082b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80082f8:	bf00      	nop
 80082fa:	3754      	adds	r7, #84	; 0x54
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	effffffe 	.word	0xeffffffe

08008308 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008314:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f7fe ff2a 	bl	8007180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800832c:	bf00      	nop
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	60bb      	str	r3, [r7, #8]
   return(result);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	61bb      	str	r3, [r7, #24]
 800835c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	6979      	ldr	r1, [r7, #20]
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	613b      	str	r3, [r7, #16]
   return(result);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e6      	bne.n	800833c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7fe fef5 	bl	800716c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008382:	bf00      	nop
 8008384:	3720      	adds	r7, #32
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b096      	sub	sp, #88	; 0x58
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008398:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a2:	2b22      	cmp	r3, #34	; 0x22
 80083a4:	f040 8095 	bne.w	80084d2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80083b2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80083b6:	b2d9      	uxtb	r1, r3
 80083b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c2:	400a      	ands	r2, r1
 80083c4:	b2d2      	uxtb	r2, r2
 80083c6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29a      	uxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d178      	bne.n	80084e2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008404:	653b      	str	r3, [r7, #80]	; 0x50
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800840e:	647b      	str	r3, [r7, #68]	; 0x44
 8008410:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800841c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e6      	bne.n	80083f0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	623b      	str	r3, [r7, #32]
   return(result);
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	f023 0301 	bic.w	r3, r3, #1
 8008438:	64fb      	str	r3, [r7, #76]	; 0x4c
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3308      	adds	r3, #8
 8008440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008442:	633a      	str	r2, [r7, #48]	; 0x30
 8008444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e5      	bne.n	8008422 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008468:	2b01      	cmp	r3, #1
 800846a:	d12e      	bne.n	80084ca <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0310 	bic.w	r3, r3, #16
 8008486:	64bb      	str	r3, [r7, #72]	; 0x48
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008490:	61fb      	str	r3, [r7, #28]
 8008492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	69b9      	ldr	r1, [r7, #24]
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	617b      	str	r3, [r7, #20]
   return(result);
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e6      	bne.n	8008472 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	f003 0310 	and.w	r3, r3, #16
 80084ae:	2b10      	cmp	r3, #16
 80084b0:	d103      	bne.n	80084ba <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2210      	movs	r2, #16
 80084b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7fe fe66 	bl	8007194 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084c8:	e00b      	b.n	80084e2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7f8 fd9a 	bl	8001004 <HAL_UART_RxCpltCallback>
}
 80084d0:	e007      	b.n	80084e2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	699a      	ldr	r2, [r3, #24]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f042 0208 	orr.w	r2, r2, #8
 80084e0:	619a      	str	r2, [r3, #24]
}
 80084e2:	bf00      	nop
 80084e4:	3758      	adds	r7, #88	; 0x58
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b096      	sub	sp, #88	; 0x58
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008502:	2b22      	cmp	r3, #34	; 0x22
 8008504:	f040 8095 	bne.w	8008632 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008516:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008518:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800851c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008520:	4013      	ands	r3, r2
 8008522:	b29a      	uxth	r2, r3
 8008524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008526:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852c:	1c9a      	adds	r2, r3, #2
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008538:	b29b      	uxth	r3, r3
 800853a:	3b01      	subs	r3, #1
 800853c:	b29a      	uxth	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800854a:	b29b      	uxth	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d178      	bne.n	8008642 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	e853 3f00 	ldrex	r3, [r3]
 800855c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008564:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856e:	643b      	str	r3, [r7, #64]	; 0x40
 8008570:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008574:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800857c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e6      	bne.n	8008550 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	61fb      	str	r3, [r7, #28]
   return(result);
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	f023 0301 	bic.w	r3, r3, #1
 8008598:	64bb      	str	r3, [r7, #72]	; 0x48
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085aa:	e841 2300 	strex	r3, r2, [r1]
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1e5      	bne.n	8008582 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d12e      	bne.n	800862a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	e853 3f00 	ldrex	r3, [r3]
 80085de:	60bb      	str	r3, [r7, #8]
   return(result);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	f023 0310 	bic.w	r3, r3, #16
 80085e6:	647b      	str	r3, [r7, #68]	; 0x44
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f0:	61bb      	str	r3, [r7, #24]
 80085f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6979      	ldr	r1, [r7, #20]
 80085f6:	69ba      	ldr	r2, [r7, #24]
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	613b      	str	r3, [r7, #16]
   return(result);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e6      	bne.n	80085d2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	f003 0310 	and.w	r3, r3, #16
 800860e:	2b10      	cmp	r3, #16
 8008610:	d103      	bne.n	800861a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2210      	movs	r2, #16
 8008618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fe fdb6 	bl	8007194 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008628:	e00b      	b.n	8008642 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7f8 fcea 	bl	8001004 <HAL_UART_RxCpltCallback>
}
 8008630:	e007      	b.n	8008642 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f042 0208 	orr.w	r2, r2, #8
 8008640:	619a      	str	r2, [r3, #24]
}
 8008642:	bf00      	nop
 8008644:	3758      	adds	r7, #88	; 0x58
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b0a6      	sub	sp, #152	; 0x98
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800865a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008682:	2b22      	cmp	r3, #34	; 0x22
 8008684:	f040 814d 	bne.w	8008922 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800868e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008692:	e0f4      	b.n	800887e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800869e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80086a2:	b2d9      	uxtb	r1, r3
 80086a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ae:	400a      	ands	r2, r1
 80086b0:	b2d2      	uxtb	r2, r2
 80086b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	3b01      	subs	r3, #1
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086de:	f003 0307 	and.w	r3, r3, #7
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d053      	beq.n	800878e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d011      	beq.n	8008716 <UART_RxISR_8BIT_FIFOEN+0xca>
 80086f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00b      	beq.n	8008716 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2201      	movs	r2, #1
 8008704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800870c:	f043 0201 	orr.w	r2, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008716:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d011      	beq.n	8008746 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008722:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00b      	beq.n	8008746 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2202      	movs	r2, #2
 8008734:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800873c:	f043 0204 	orr.w	r2, r3, #4
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008746:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800874a:	f003 0304 	and.w	r3, r3, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	d011      	beq.n	8008776 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00b      	beq.n	8008776 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2204      	movs	r2, #4
 8008764:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800876c:	f043 0202 	orr.w	r2, r3, #2
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d006      	beq.n	800878e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7fe fcfd 	bl	8007180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008794:	b29b      	uxth	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d171      	bne.n	800887e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80087a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80087be:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80087c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80087ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e4      	bne.n	800879a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3308      	adds	r3, #8
 80087d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80087e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087e2:	4b56      	ldr	r3, [pc, #344]	; (800893c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80087f0:	657a      	str	r2, [r7, #84]	; 0x54
 80087f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80087fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e5      	bne.n	80087d0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008816:	2b01      	cmp	r3, #1
 8008818:	d12e      	bne.n	8008878 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008828:	e853 3f00 	ldrex	r3, [r3]
 800882c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	f023 0310 	bic.w	r3, r3, #16
 8008834:	67bb      	str	r3, [r7, #120]	; 0x78
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	461a      	mov	r2, r3
 800883c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800883e:	643b      	str	r3, [r7, #64]	; 0x40
 8008840:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008842:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008846:	e841 2300 	strex	r3, r2, [r1]
 800884a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e6      	bne.n	8008820 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	f003 0310 	and.w	r3, r3, #16
 800885c:	2b10      	cmp	r3, #16
 800885e:	d103      	bne.n	8008868 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2210      	movs	r2, #16
 8008866:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7fe fc8f 	bl	8007194 <HAL_UARTEx_RxEventCallback>
 8008876:	e002      	b.n	800887e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7f8 fbc3 	bl	8001004 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800887e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008882:	2b00      	cmp	r3, #0
 8008884:	d006      	beq.n	8008894 <UART_RxISR_8BIT_FIFOEN+0x248>
 8008886:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b00      	cmp	r3, #0
 8008890:	f47f af00 	bne.w	8008694 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800889a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800889e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d045      	beq.n	8008932 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d23e      	bcs.n	8008932 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3308      	adds	r3, #8
 80088ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088ca:	673b      	str	r3, [r7, #112]	; 0x70
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3308      	adds	r3, #8
 80088d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80088d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088dc:	e841 2300 	strex	r3, r2, [r1]
 80088e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e5      	bne.n	80088b4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a15      	ldr	r2, [pc, #84]	; (8008940 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80088ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	f043 0320 	orr.w	r3, r3, #32
 8008902:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800890c:	61bb      	str	r3, [r7, #24]
 800890e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008910:	6979      	ldr	r1, [r7, #20]
 8008912:	69ba      	ldr	r2, [r7, #24]
 8008914:	e841 2300 	strex	r3, r2, [r1]
 8008918:	613b      	str	r3, [r7, #16]
   return(result);
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1e6      	bne.n	80088ee <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008920:	e007      	b.n	8008932 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0208 	orr.w	r2, r2, #8
 8008930:	619a      	str	r2, [r3, #24]
}
 8008932:	bf00      	nop
 8008934:	3798      	adds	r7, #152	; 0x98
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	effffffe 	.word	0xeffffffe
 8008940:	0800838b 	.word	0x0800838b

08008944 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b0a8      	sub	sp, #160	; 0xa0
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008952:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69db      	ldr	r3, [r3, #28]
 800895c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800897a:	2b22      	cmp	r3, #34	; 0x22
 800897c:	f040 8151 	bne.w	8008c22 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008986:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800898a:	e0f8      	b.n	8008b7e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800899e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80089a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80089a6:	4013      	ands	r3, r2
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b4:	1c9a      	adds	r2, r3, #2
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	3b01      	subs	r3, #1
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80089d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089da:	f003 0307 	and.w	r3, r3, #7
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d053      	beq.n	8008a8a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d011      	beq.n	8008a12 <UART_RxISR_16BIT_FIFOEN+0xce>
 80089ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00b      	beq.n	8008a12 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2201      	movs	r2, #1
 8008a00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a08:	f043 0201 	orr.w	r2, r3, #1
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d011      	beq.n	8008a42 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00b      	beq.n	8008a42 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a38:	f043 0204 	orr.w	r2, r3, #4
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a46:	f003 0304 	and.w	r3, r3, #4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d011      	beq.n	8008a72 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00b      	beq.n	8008a72 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2204      	movs	r2, #4
 8008a60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a68:	f043 0202 	orr.w	r2, r3, #2
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d006      	beq.n	8008a8a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7fe fb7f 	bl	8007180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d173      	bne.n	8008b7e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a9e:	e853 3f00 	ldrex	r3, [r3]
 8008aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008aba:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008abe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ac0:	e841 2300 	strex	r3, r2, [r1]
 8008ac4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e4      	bne.n	8008a96 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad6:	e853 3f00 	ldrex	r3, [r3]
 8008ada:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ade:	4b57      	ldr	r3, [pc, #348]	; (8008c3c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3308      	adds	r3, #8
 8008aec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008af0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008af2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e3      	bne.n	8008acc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d12e      	bne.n	8008b78 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b30:	f023 0310 	bic.w	r3, r3, #16
 8008b34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e6      	bne.n	8008b20 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	f003 0310 	and.w	r3, r3, #16
 8008b5c:	2b10      	cmp	r3, #16
 8008b5e:	d103      	bne.n	8008b68 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2210      	movs	r2, #16
 8008b66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7fe fb0f 	bl	8007194 <HAL_UARTEx_RxEventCallback>
 8008b76:	e002      	b.n	8008b7e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7f8 fa43 	bl	8001004 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b7e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d006      	beq.n	8008b94 <UART_RxISR_16BIT_FIFOEN+0x250>
 8008b86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f47f aefc 	bne.w	800898c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b9a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b9e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d045      	beq.n	8008c32 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008bac:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d23e      	bcs.n	8008c32 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	e853 3f00 	ldrex	r3, [r3]
 8008bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bca:	677b      	str	r3, [r7, #116]	; 0x74
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008bd4:	633a      	str	r2, [r7, #48]	; 0x30
 8008bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e5      	bne.n	8008bb4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a15      	ldr	r2, [pc, #84]	; (8008c40 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008bec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	e853 3f00 	ldrex	r3, [r3]
 8008bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f043 0320 	orr.w	r3, r3, #32
 8008c02:	673b      	str	r3, [r7, #112]	; 0x70
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	69b9      	ldr	r1, [r7, #24]
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	e841 2300 	strex	r3, r2, [r1]
 8008c18:	617b      	str	r3, [r7, #20]
   return(result);
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e6      	bne.n	8008bee <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c20:	e007      	b.n	8008c32 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	699a      	ldr	r2, [r3, #24]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f042 0208 	orr.w	r2, r2, #8
 8008c30:	619a      	str	r2, [r3, #24]
}
 8008c32:	bf00      	nop
 8008c34:	37a0      	adds	r7, #160	; 0xa0
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	effffffe 	.word	0xeffffffe
 8008c40:	080084eb 	.word	0x080084eb

08008c44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e027      	b.n	8008ce6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2224      	movs	r2, #36	; 0x24
 8008ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f022 0201 	bic.w	r2, r2, #1
 8008cbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008cc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d101      	bne.n	8008d0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d06:	2302      	movs	r3, #2
 8008d08:	e02d      	b.n	8008d66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2224      	movs	r2, #36	; 0x24
 8008d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0201 	bic.w	r2, r2, #1
 8008d30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	430a      	orrs	r2, r1
 8008d44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f850 	bl	8008dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2220      	movs	r2, #32
 8008d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d101      	bne.n	8008d86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d82:	2302      	movs	r3, #2
 8008d84:	e02d      	b.n	8008de2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2224      	movs	r2, #36	; 0x24
 8008d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0201 	bic.w	r2, r2, #1
 8008dac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f812 	bl	8008dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d108      	bne.n	8008e0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e0c:	e031      	b.n	8008e72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e0e:	2310      	movs	r3, #16
 8008e10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e12:	2310      	movs	r3, #16
 8008e14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	0e5b      	lsrs	r3, r3, #25
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	f003 0307 	and.w	r3, r3, #7
 8008e24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	0f5b      	lsrs	r3, r3, #29
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	f003 0307 	and.w	r3, r3, #7
 8008e34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	7b3a      	ldrb	r2, [r7, #12]
 8008e3a:	4911      	ldr	r1, [pc, #68]	; (8008e80 <UARTEx_SetNbDataToProcess+0x94>)
 8008e3c:	5c8a      	ldrb	r2, [r1, r2]
 8008e3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e42:	7b3a      	ldrb	r2, [r7, #12]
 8008e44:	490f      	ldr	r1, [pc, #60]	; (8008e84 <UARTEx_SetNbDataToProcess+0x98>)
 8008e46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	7b7a      	ldrb	r2, [r7, #13]
 8008e58:	4909      	ldr	r1, [pc, #36]	; (8008e80 <UARTEx_SetNbDataToProcess+0x94>)
 8008e5a:	5c8a      	ldrb	r2, [r1, r2]
 8008e5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e60:	7b7a      	ldrb	r2, [r7, #13]
 8008e62:	4908      	ldr	r1, [pc, #32]	; (8008e84 <UARTEx_SetNbDataToProcess+0x98>)
 8008e64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e66:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e72:	bf00      	nop
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	0800c278 	.word	0x0800c278
 8008e84:	0800c280 	.word	0x0800c280

08008e88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e88:	b084      	sub	sp, #16
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	f107 001c 	add.w	r0, r7, #28
 8008e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d120      	bne.n	8008ee2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	4b2a      	ldr	r3, [pc, #168]	; (8008f5c <USB_CoreInit+0xd4>)
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d105      	bne.n	8008ed6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 faac 	bl	8009434 <USB_CoreReset>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]
 8008ee0:	e01a      	b.n	8008f18 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 faa0 	bl	8009434 <USB_CoreReset>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d106      	bne.n	8008f0c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38
 8008f0a:	e005      	b.n	8008f18 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d116      	bne.n	8008f4c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <USB_CoreInit+0xd8>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	f043 0206 	orr.w	r2, r3, #6
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f043 0220 	orr.w	r2, r3, #32
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f58:	b004      	add	sp, #16
 8008f5a:	4770      	bx	lr
 8008f5c:	ffbdffbf 	.word	0xffbdffbf
 8008f60:	03ee0000 	.word	0x03ee0000

08008f64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f023 0201 	bic.w	r2, r3, #1
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d115      	bne.n	8008fd4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	f7f8 fc75 	bl	80018a4 <HAL_Delay>
      ms++;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fa29 	bl	8009418 <USB_GetMode>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d01e      	beq.n	800900a <USB_SetCurrentMode+0x84>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b31      	cmp	r3, #49	; 0x31
 8008fd0:	d9f0      	bls.n	8008fb4 <USB_SetCurrentMode+0x2e>
 8008fd2:	e01a      	b.n	800900a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d115      	bne.n	8009006 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	f7f8 fc5c 	bl	80018a4 <HAL_Delay>
      ms++;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fa10 	bl	8009418 <USB_GetMode>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d005      	beq.n	800900a <USB_SetCurrentMode+0x84>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b31      	cmp	r3, #49	; 0x31
 8009002:	d9f0      	bls.n	8008fe6 <USB_SetCurrentMode+0x60>
 8009004:	e001      	b.n	800900a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e005      	b.n	8009016 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b32      	cmp	r3, #50	; 0x32
 800900e:	d101      	bne.n	8009014 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e000      	b.n	8009016 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009020:	b084      	sub	sp, #16
 8009022:	b580      	push	{r7, lr}
 8009024:	b086      	sub	sp, #24
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800902e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800903a:	2300      	movs	r3, #0
 800903c:	613b      	str	r3, [r7, #16]
 800903e:	e009      	b.n	8009054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	3340      	adds	r3, #64	; 0x40
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	2200      	movs	r2, #0
 800904c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	3301      	adds	r3, #1
 8009052:	613b      	str	r3, [r7, #16]
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2b0e      	cmp	r3, #14
 8009058:	d9f2      	bls.n	8009040 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800905a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800905c:	2b00      	cmp	r3, #0
 800905e:	d11c      	bne.n	800909a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800906e:	f043 0302 	orr.w	r3, r3, #2
 8009072:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	e005      	b.n	80090a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090ac:	461a      	mov	r2, r3
 80090ae:	2300      	movs	r3, #0
 80090b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b8:	4619      	mov	r1, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c0:	461a      	mov	r2, r3
 80090c2:	680b      	ldr	r3, [r1, #0]
 80090c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d10c      	bne.n	80090e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80090cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d104      	bne.n	80090dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80090d2:	2100      	movs	r1, #0
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f965 	bl	80093a4 <USB_SetDevSpeed>
 80090da:	e008      	b.n	80090ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80090dc:	2101      	movs	r1, #1
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f960 	bl	80093a4 <USB_SetDevSpeed>
 80090e4:	e003      	b.n	80090ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80090e6:	2103      	movs	r1, #3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f95b 	bl	80093a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090ee:	2110      	movs	r1, #16
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f8f3 	bl	80092dc <USB_FlushTxFifo>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f91f 	bl	8009344 <USB_FlushRxFifo>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009116:	461a      	mov	r2, r3
 8009118:	2300      	movs	r3, #0
 800911a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009122:	461a      	mov	r2, r3
 8009124:	2300      	movs	r3, #0
 8009126:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912e:	461a      	mov	r2, r3
 8009130:	2300      	movs	r3, #0
 8009132:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009134:	2300      	movs	r3, #0
 8009136:	613b      	str	r3, [r7, #16]
 8009138:	e043      	b.n	80091c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800914c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009150:	d118      	bne.n	8009184 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10a      	bne.n	800916e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009164:	461a      	mov	r2, r3
 8009166:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	e013      	b.n	8009196 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	015a      	lsls	r2, r3, #5
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4413      	add	r3, r2
 8009176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917a:	461a      	mov	r2, r3
 800917c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	e008      	b.n	8009196 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009190:	461a      	mov	r2, r3
 8009192:	2300      	movs	r3, #0
 8009194:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	015a      	lsls	r2, r3, #5
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	4413      	add	r3, r2
 800919e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a2:	461a      	mov	r2, r3
 80091a4:	2300      	movs	r3, #0
 80091a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b4:	461a      	mov	r2, r3
 80091b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	3301      	adds	r3, #1
 80091c0:	613b      	str	r3, [r7, #16]
 80091c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d3b7      	bcc.n	800913a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091ca:	2300      	movs	r3, #0
 80091cc:	613b      	str	r3, [r7, #16]
 80091ce:	e043      	b.n	8009258 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091e6:	d118      	bne.n	800921a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10a      	bne.n	8009204 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fa:	461a      	mov	r2, r3
 80091fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	e013      	b.n	800922c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	015a      	lsls	r2, r3, #5
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4413      	add	r3, r2
 800920c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009210:	461a      	mov	r2, r3
 8009212:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	e008      	b.n	800922c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009226:	461a      	mov	r2, r3
 8009228:	2300      	movs	r3, #0
 800922a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009238:	461a      	mov	r2, r3
 800923a:	2300      	movs	r3, #0
 800923c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	015a      	lsls	r2, r3, #5
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	4413      	add	r3, r2
 8009246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924a:	461a      	mov	r2, r3
 800924c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009250:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	3301      	adds	r3, #1
 8009256:	613b      	str	r3, [r7, #16]
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	429a      	cmp	r2, r3
 800925e:	d3b7      	bcc.n	80091d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800926e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009272:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009280:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009284:	2b00      	cmp	r3, #0
 8009286:	d105      	bne.n	8009294 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	f043 0210 	orr.w	r2, r3, #16
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	699a      	ldr	r2, [r3, #24]
 8009298:	4b0e      	ldr	r3, [pc, #56]	; (80092d4 <USB_DevInit+0x2b4>)
 800929a:	4313      	orrs	r3, r2
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80092a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d005      	beq.n	80092b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	f043 0208 	orr.w	r2, r3, #8
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d105      	bne.n	80092c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	699a      	ldr	r2, [r3, #24]
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <USB_DevInit+0x2b8>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092d0:	b004      	add	sp, #16
 80092d2:	4770      	bx	lr
 80092d4:	803c3800 	.word	0x803c3800
 80092d8:	40000004 	.word	0x40000004

080092dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3301      	adds	r3, #1
 80092ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4a13      	ldr	r2, [pc, #76]	; (8009340 <USB_FlushTxFifo+0x64>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d901      	bls.n	80092fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e01b      	b.n	8009334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	daf2      	bge.n	80092ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	019b      	lsls	r3, r3, #6
 800930c:	f043 0220 	orr.w	r2, r3, #32
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	3301      	adds	r3, #1
 8009318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	4a08      	ldr	r2, [pc, #32]	; (8009340 <USB_FlushTxFifo+0x64>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d901      	bls.n	8009326 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e006      	b.n	8009334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	f003 0320 	and.w	r3, r3, #32
 800932e:	2b20      	cmp	r3, #32
 8009330:	d0f0      	beq.n	8009314 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	00030d40 	.word	0x00030d40

08009344 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3301      	adds	r3, #1
 8009354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	4a11      	ldr	r2, [pc, #68]	; (80093a0 <USB_FlushRxFifo+0x5c>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d901      	bls.n	8009362 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e018      	b.n	8009394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	daf2      	bge.n	8009350 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2210      	movs	r2, #16
 8009372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	3301      	adds	r3, #1
 8009378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4a08      	ldr	r2, [pc, #32]	; (80093a0 <USB_FlushRxFifo+0x5c>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d901      	bls.n	8009386 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e006      	b.n	8009394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f003 0310 	and.w	r3, r3, #16
 800938e:	2b10      	cmp	r3, #16
 8009390:	d0f0      	beq.n	8009374 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	00030d40 	.word	0x00030d40

080093a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	78fb      	ldrb	r3, [r7, #3]
 80093be:	68f9      	ldr	r1, [r7, #12]
 80093c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093c4:	4313      	orrs	r3, r2
 80093c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b085      	sub	sp, #20
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093f0:	f023 0303 	bic.w	r3, r3, #3
 80093f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009404:	f043 0302 	orr.w	r3, r3, #2
 8009408:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	f003 0301 	and.w	r3, r3, #1
}
 8009428:	4618      	mov	r0, r3
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3301      	adds	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	4a13      	ldr	r2, [pc, #76]	; (8009498 <USB_CoreReset+0x64>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d901      	bls.n	8009452 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e01b      	b.n	800948a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	daf2      	bge.n	8009440 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800945a:	2300      	movs	r3, #0
 800945c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f043 0201 	orr.w	r2, r3, #1
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4a09      	ldr	r2, [pc, #36]	; (8009498 <USB_CoreReset+0x64>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d901      	bls.n	800947c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e006      	b.n	800948a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b01      	cmp	r3, #1
 8009486:	d0f0      	beq.n	800946a <USB_CoreReset+0x36>

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	00030d40 	.word	0x00030d40

0800949c <__errno>:
 800949c:	4b01      	ldr	r3, [pc, #4]	; (80094a4 <__errno+0x8>)
 800949e:	6818      	ldr	r0, [r3, #0]
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	24000010 	.word	0x24000010

080094a8 <__libc_init_array>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	4d0d      	ldr	r5, [pc, #52]	; (80094e0 <__libc_init_array+0x38>)
 80094ac:	4c0d      	ldr	r4, [pc, #52]	; (80094e4 <__libc_init_array+0x3c>)
 80094ae:	1b64      	subs	r4, r4, r5
 80094b0:	10a4      	asrs	r4, r4, #2
 80094b2:	2600      	movs	r6, #0
 80094b4:	42a6      	cmp	r6, r4
 80094b6:	d109      	bne.n	80094cc <__libc_init_array+0x24>
 80094b8:	4d0b      	ldr	r5, [pc, #44]	; (80094e8 <__libc_init_array+0x40>)
 80094ba:	4c0c      	ldr	r4, [pc, #48]	; (80094ec <__libc_init_array+0x44>)
 80094bc:	f002 fe5c 	bl	800c178 <_init>
 80094c0:	1b64      	subs	r4, r4, r5
 80094c2:	10a4      	asrs	r4, r4, #2
 80094c4:	2600      	movs	r6, #0
 80094c6:	42a6      	cmp	r6, r4
 80094c8:	d105      	bne.n	80094d6 <__libc_init_array+0x2e>
 80094ca:	bd70      	pop	{r4, r5, r6, pc}
 80094cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d0:	4798      	blx	r3
 80094d2:	3601      	adds	r6, #1
 80094d4:	e7ee      	b.n	80094b4 <__libc_init_array+0xc>
 80094d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094da:	4798      	blx	r3
 80094dc:	3601      	adds	r6, #1
 80094de:	e7f2      	b.n	80094c6 <__libc_init_array+0x1e>
 80094e0:	0800c66c 	.word	0x0800c66c
 80094e4:	0800c66c 	.word	0x0800c66c
 80094e8:	0800c66c 	.word	0x0800c66c
 80094ec:	0800c670 	.word	0x0800c670

080094f0 <memset>:
 80094f0:	4402      	add	r2, r0
 80094f2:	4603      	mov	r3, r0
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d100      	bne.n	80094fa <memset+0xa>
 80094f8:	4770      	bx	lr
 80094fa:	f803 1b01 	strb.w	r1, [r3], #1
 80094fe:	e7f9      	b.n	80094f4 <memset+0x4>

08009500 <__cvt>:
 8009500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009502:	ed2d 8b02 	vpush	{d8}
 8009506:	eeb0 8b40 	vmov.f64	d8, d0
 800950a:	b085      	sub	sp, #20
 800950c:	4617      	mov	r7, r2
 800950e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009510:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009512:	ee18 2a90 	vmov	r2, s17
 8009516:	f025 0520 	bic.w	r5, r5, #32
 800951a:	2a00      	cmp	r2, #0
 800951c:	bfb6      	itet	lt
 800951e:	222d      	movlt	r2, #45	; 0x2d
 8009520:	2200      	movge	r2, #0
 8009522:	eeb1 8b40 	vneglt.f64	d8, d0
 8009526:	2d46      	cmp	r5, #70	; 0x46
 8009528:	460c      	mov	r4, r1
 800952a:	701a      	strb	r2, [r3, #0]
 800952c:	d004      	beq.n	8009538 <__cvt+0x38>
 800952e:	2d45      	cmp	r5, #69	; 0x45
 8009530:	d100      	bne.n	8009534 <__cvt+0x34>
 8009532:	3401      	adds	r4, #1
 8009534:	2102      	movs	r1, #2
 8009536:	e000      	b.n	800953a <__cvt+0x3a>
 8009538:	2103      	movs	r1, #3
 800953a:	ab03      	add	r3, sp, #12
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	ab02      	add	r3, sp, #8
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	4622      	mov	r2, r4
 8009544:	4633      	mov	r3, r6
 8009546:	eeb0 0b48 	vmov.f64	d0, d8
 800954a:	f000 fcc9 	bl	8009ee0 <_dtoa_r>
 800954e:	2d47      	cmp	r5, #71	; 0x47
 8009550:	d101      	bne.n	8009556 <__cvt+0x56>
 8009552:	07fb      	lsls	r3, r7, #31
 8009554:	d51a      	bpl.n	800958c <__cvt+0x8c>
 8009556:	2d46      	cmp	r5, #70	; 0x46
 8009558:	eb00 0204 	add.w	r2, r0, r4
 800955c:	d10c      	bne.n	8009578 <__cvt+0x78>
 800955e:	7803      	ldrb	r3, [r0, #0]
 8009560:	2b30      	cmp	r3, #48	; 0x30
 8009562:	d107      	bne.n	8009574 <__cvt+0x74>
 8009564:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956c:	bf1c      	itt	ne
 800956e:	f1c4 0401 	rsbne	r4, r4, #1
 8009572:	6034      	strne	r4, [r6, #0]
 8009574:	6833      	ldr	r3, [r6, #0]
 8009576:	441a      	add	r2, r3
 8009578:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800957c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009580:	bf08      	it	eq
 8009582:	9203      	streq	r2, [sp, #12]
 8009584:	2130      	movs	r1, #48	; 0x30
 8009586:	9b03      	ldr	r3, [sp, #12]
 8009588:	4293      	cmp	r3, r2
 800958a:	d307      	bcc.n	800959c <__cvt+0x9c>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009590:	1a1b      	subs	r3, r3, r0
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	b005      	add	sp, #20
 8009596:	ecbd 8b02 	vpop	{d8}
 800959a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959c:	1c5c      	adds	r4, r3, #1
 800959e:	9403      	str	r4, [sp, #12]
 80095a0:	7019      	strb	r1, [r3, #0]
 80095a2:	e7f0      	b.n	8009586 <__cvt+0x86>

080095a4 <__exponent>:
 80095a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095a6:	4603      	mov	r3, r0
 80095a8:	2900      	cmp	r1, #0
 80095aa:	bfb8      	it	lt
 80095ac:	4249      	neglt	r1, r1
 80095ae:	f803 2b02 	strb.w	r2, [r3], #2
 80095b2:	bfb4      	ite	lt
 80095b4:	222d      	movlt	r2, #45	; 0x2d
 80095b6:	222b      	movge	r2, #43	; 0x2b
 80095b8:	2909      	cmp	r1, #9
 80095ba:	7042      	strb	r2, [r0, #1]
 80095bc:	dd2a      	ble.n	8009614 <__exponent+0x70>
 80095be:	f10d 0407 	add.w	r4, sp, #7
 80095c2:	46a4      	mov	ip, r4
 80095c4:	270a      	movs	r7, #10
 80095c6:	46a6      	mov	lr, r4
 80095c8:	460a      	mov	r2, r1
 80095ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80095ce:	fb07 1516 	mls	r5, r7, r6, r1
 80095d2:	3530      	adds	r5, #48	; 0x30
 80095d4:	2a63      	cmp	r2, #99	; 0x63
 80095d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80095da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80095de:	4631      	mov	r1, r6
 80095e0:	dcf1      	bgt.n	80095c6 <__exponent+0x22>
 80095e2:	3130      	adds	r1, #48	; 0x30
 80095e4:	f1ae 0502 	sub.w	r5, lr, #2
 80095e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80095ec:	1c44      	adds	r4, r0, #1
 80095ee:	4629      	mov	r1, r5
 80095f0:	4561      	cmp	r1, ip
 80095f2:	d30a      	bcc.n	800960a <__exponent+0x66>
 80095f4:	f10d 0209 	add.w	r2, sp, #9
 80095f8:	eba2 020e 	sub.w	r2, r2, lr
 80095fc:	4565      	cmp	r5, ip
 80095fe:	bf88      	it	hi
 8009600:	2200      	movhi	r2, #0
 8009602:	4413      	add	r3, r2
 8009604:	1a18      	subs	r0, r3, r0
 8009606:	b003      	add	sp, #12
 8009608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800960a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800960e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009612:	e7ed      	b.n	80095f0 <__exponent+0x4c>
 8009614:	2330      	movs	r3, #48	; 0x30
 8009616:	3130      	adds	r1, #48	; 0x30
 8009618:	7083      	strb	r3, [r0, #2]
 800961a:	70c1      	strb	r1, [r0, #3]
 800961c:	1d03      	adds	r3, r0, #4
 800961e:	e7f1      	b.n	8009604 <__exponent+0x60>

08009620 <_printf_float>:
 8009620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	b08b      	sub	sp, #44	; 0x2c
 8009626:	460c      	mov	r4, r1
 8009628:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800962c:	4616      	mov	r6, r2
 800962e:	461f      	mov	r7, r3
 8009630:	4605      	mov	r5, r0
 8009632:	f001 f9c3 	bl	800a9bc <_localeconv_r>
 8009636:	f8d0 b000 	ldr.w	fp, [r0]
 800963a:	4658      	mov	r0, fp
 800963c:	f7f6 fe50 	bl	80002e0 <strlen>
 8009640:	2300      	movs	r3, #0
 8009642:	9308      	str	r3, [sp, #32]
 8009644:	f8d8 3000 	ldr.w	r3, [r8]
 8009648:	f894 9018 	ldrb.w	r9, [r4, #24]
 800964c:	6822      	ldr	r2, [r4, #0]
 800964e:	3307      	adds	r3, #7
 8009650:	f023 0307 	bic.w	r3, r3, #7
 8009654:	f103 0108 	add.w	r1, r3, #8
 8009658:	f8c8 1000 	str.w	r1, [r8]
 800965c:	4682      	mov	sl, r0
 800965e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009662:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009666:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80098c8 <_printf_float+0x2a8>
 800966a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800966e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009672:	eeb4 6b47 	vcmp.f64	d6, d7
 8009676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967a:	dd24      	ble.n	80096c6 <_printf_float+0xa6>
 800967c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009684:	d502      	bpl.n	800968c <_printf_float+0x6c>
 8009686:	232d      	movs	r3, #45	; 0x2d
 8009688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800968c:	4b90      	ldr	r3, [pc, #576]	; (80098d0 <_printf_float+0x2b0>)
 800968e:	4891      	ldr	r0, [pc, #580]	; (80098d4 <_printf_float+0x2b4>)
 8009690:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009694:	bf94      	ite	ls
 8009696:	4698      	movls	r8, r3
 8009698:	4680      	movhi	r8, r0
 800969a:	2303      	movs	r3, #3
 800969c:	6123      	str	r3, [r4, #16]
 800969e:	f022 0204 	bic.w	r2, r2, #4
 80096a2:	2300      	movs	r3, #0
 80096a4:	6022      	str	r2, [r4, #0]
 80096a6:	9304      	str	r3, [sp, #16]
 80096a8:	9700      	str	r7, [sp, #0]
 80096aa:	4633      	mov	r3, r6
 80096ac:	aa09      	add	r2, sp, #36	; 0x24
 80096ae:	4621      	mov	r1, r4
 80096b0:	4628      	mov	r0, r5
 80096b2:	f000 f9d3 	bl	8009a5c <_printf_common>
 80096b6:	3001      	adds	r0, #1
 80096b8:	f040 808a 	bne.w	80097d0 <_printf_float+0x1b0>
 80096bc:	f04f 30ff 	mov.w	r0, #4294967295
 80096c0:	b00b      	add	sp, #44	; 0x2c
 80096c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80096ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ce:	d709      	bvc.n	80096e4 <_printf_float+0xc4>
 80096d0:	ee10 3a90 	vmov	r3, s1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	bfbc      	itt	lt
 80096d8:	232d      	movlt	r3, #45	; 0x2d
 80096da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096de:	487e      	ldr	r0, [pc, #504]	; (80098d8 <_printf_float+0x2b8>)
 80096e0:	4b7e      	ldr	r3, [pc, #504]	; (80098dc <_printf_float+0x2bc>)
 80096e2:	e7d5      	b.n	8009690 <_printf_float+0x70>
 80096e4:	6863      	ldr	r3, [r4, #4]
 80096e6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80096ea:	9104      	str	r1, [sp, #16]
 80096ec:	1c59      	adds	r1, r3, #1
 80096ee:	d13c      	bne.n	800976a <_printf_float+0x14a>
 80096f0:	2306      	movs	r3, #6
 80096f2:	6063      	str	r3, [r4, #4]
 80096f4:	2300      	movs	r3, #0
 80096f6:	9303      	str	r3, [sp, #12]
 80096f8:	ab08      	add	r3, sp, #32
 80096fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80096fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009702:	ab07      	add	r3, sp, #28
 8009704:	6861      	ldr	r1, [r4, #4]
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	6022      	str	r2, [r4, #0]
 800970a:	f10d 031b 	add.w	r3, sp, #27
 800970e:	4628      	mov	r0, r5
 8009710:	f7ff fef6 	bl	8009500 <__cvt>
 8009714:	9b04      	ldr	r3, [sp, #16]
 8009716:	9907      	ldr	r1, [sp, #28]
 8009718:	2b47      	cmp	r3, #71	; 0x47
 800971a:	4680      	mov	r8, r0
 800971c:	d108      	bne.n	8009730 <_printf_float+0x110>
 800971e:	1cc8      	adds	r0, r1, #3
 8009720:	db02      	blt.n	8009728 <_printf_float+0x108>
 8009722:	6863      	ldr	r3, [r4, #4]
 8009724:	4299      	cmp	r1, r3
 8009726:	dd41      	ble.n	80097ac <_printf_float+0x18c>
 8009728:	f1a9 0902 	sub.w	r9, r9, #2
 800972c:	fa5f f989 	uxtb.w	r9, r9
 8009730:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009734:	d820      	bhi.n	8009778 <_printf_float+0x158>
 8009736:	3901      	subs	r1, #1
 8009738:	464a      	mov	r2, r9
 800973a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800973e:	9107      	str	r1, [sp, #28]
 8009740:	f7ff ff30 	bl	80095a4 <__exponent>
 8009744:	9a08      	ldr	r2, [sp, #32]
 8009746:	9004      	str	r0, [sp, #16]
 8009748:	1813      	adds	r3, r2, r0
 800974a:	2a01      	cmp	r2, #1
 800974c:	6123      	str	r3, [r4, #16]
 800974e:	dc02      	bgt.n	8009756 <_printf_float+0x136>
 8009750:	6822      	ldr	r2, [r4, #0]
 8009752:	07d2      	lsls	r2, r2, #31
 8009754:	d501      	bpl.n	800975a <_printf_float+0x13a>
 8009756:	3301      	adds	r3, #1
 8009758:	6123      	str	r3, [r4, #16]
 800975a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0a2      	beq.n	80096a8 <_printf_float+0x88>
 8009762:	232d      	movs	r3, #45	; 0x2d
 8009764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009768:	e79e      	b.n	80096a8 <_printf_float+0x88>
 800976a:	9904      	ldr	r1, [sp, #16]
 800976c:	2947      	cmp	r1, #71	; 0x47
 800976e:	d1c1      	bne.n	80096f4 <_printf_float+0xd4>
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1bf      	bne.n	80096f4 <_printf_float+0xd4>
 8009774:	2301      	movs	r3, #1
 8009776:	e7bc      	b.n	80096f2 <_printf_float+0xd2>
 8009778:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800977c:	d118      	bne.n	80097b0 <_printf_float+0x190>
 800977e:	2900      	cmp	r1, #0
 8009780:	6863      	ldr	r3, [r4, #4]
 8009782:	dd0b      	ble.n	800979c <_printf_float+0x17c>
 8009784:	6121      	str	r1, [r4, #16]
 8009786:	b913      	cbnz	r3, 800978e <_printf_float+0x16e>
 8009788:	6822      	ldr	r2, [r4, #0]
 800978a:	07d0      	lsls	r0, r2, #31
 800978c:	d502      	bpl.n	8009794 <_printf_float+0x174>
 800978e:	3301      	adds	r3, #1
 8009790:	440b      	add	r3, r1
 8009792:	6123      	str	r3, [r4, #16]
 8009794:	2300      	movs	r3, #0
 8009796:	65a1      	str	r1, [r4, #88]	; 0x58
 8009798:	9304      	str	r3, [sp, #16]
 800979a:	e7de      	b.n	800975a <_printf_float+0x13a>
 800979c:	b913      	cbnz	r3, 80097a4 <_printf_float+0x184>
 800979e:	6822      	ldr	r2, [r4, #0]
 80097a0:	07d2      	lsls	r2, r2, #31
 80097a2:	d501      	bpl.n	80097a8 <_printf_float+0x188>
 80097a4:	3302      	adds	r3, #2
 80097a6:	e7f4      	b.n	8009792 <_printf_float+0x172>
 80097a8:	2301      	movs	r3, #1
 80097aa:	e7f2      	b.n	8009792 <_printf_float+0x172>
 80097ac:	f04f 0967 	mov.w	r9, #103	; 0x67
 80097b0:	9b08      	ldr	r3, [sp, #32]
 80097b2:	4299      	cmp	r1, r3
 80097b4:	db05      	blt.n	80097c2 <_printf_float+0x1a2>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	6121      	str	r1, [r4, #16]
 80097ba:	07d8      	lsls	r0, r3, #31
 80097bc:	d5ea      	bpl.n	8009794 <_printf_float+0x174>
 80097be:	1c4b      	adds	r3, r1, #1
 80097c0:	e7e7      	b.n	8009792 <_printf_float+0x172>
 80097c2:	2900      	cmp	r1, #0
 80097c4:	bfd4      	ite	le
 80097c6:	f1c1 0202 	rsble	r2, r1, #2
 80097ca:	2201      	movgt	r2, #1
 80097cc:	4413      	add	r3, r2
 80097ce:	e7e0      	b.n	8009792 <_printf_float+0x172>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	055a      	lsls	r2, r3, #21
 80097d4:	d407      	bmi.n	80097e6 <_printf_float+0x1c6>
 80097d6:	6923      	ldr	r3, [r4, #16]
 80097d8:	4642      	mov	r2, r8
 80097da:	4631      	mov	r1, r6
 80097dc:	4628      	mov	r0, r5
 80097de:	47b8      	blx	r7
 80097e0:	3001      	adds	r0, #1
 80097e2:	d12a      	bne.n	800983a <_printf_float+0x21a>
 80097e4:	e76a      	b.n	80096bc <_printf_float+0x9c>
 80097e6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80097ea:	f240 80e2 	bls.w	80099b2 <_printf_float+0x392>
 80097ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80097f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80097f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097fa:	d133      	bne.n	8009864 <_printf_float+0x244>
 80097fc:	4a38      	ldr	r2, [pc, #224]	; (80098e0 <_printf_float+0x2c0>)
 80097fe:	2301      	movs	r3, #1
 8009800:	4631      	mov	r1, r6
 8009802:	4628      	mov	r0, r5
 8009804:	47b8      	blx	r7
 8009806:	3001      	adds	r0, #1
 8009808:	f43f af58 	beq.w	80096bc <_printf_float+0x9c>
 800980c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009810:	429a      	cmp	r2, r3
 8009812:	db02      	blt.n	800981a <_printf_float+0x1fa>
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	07d8      	lsls	r0, r3, #31
 8009818:	d50f      	bpl.n	800983a <_printf_float+0x21a>
 800981a:	4653      	mov	r3, sl
 800981c:	465a      	mov	r2, fp
 800981e:	4631      	mov	r1, r6
 8009820:	4628      	mov	r0, r5
 8009822:	47b8      	blx	r7
 8009824:	3001      	adds	r0, #1
 8009826:	f43f af49 	beq.w	80096bc <_printf_float+0x9c>
 800982a:	f04f 0800 	mov.w	r8, #0
 800982e:	f104 091a 	add.w	r9, r4, #26
 8009832:	9b08      	ldr	r3, [sp, #32]
 8009834:	3b01      	subs	r3, #1
 8009836:	4543      	cmp	r3, r8
 8009838:	dc09      	bgt.n	800984e <_printf_float+0x22e>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	079b      	lsls	r3, r3, #30
 800983e:	f100 8108 	bmi.w	8009a52 <_printf_float+0x432>
 8009842:	68e0      	ldr	r0, [r4, #12]
 8009844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009846:	4298      	cmp	r0, r3
 8009848:	bfb8      	it	lt
 800984a:	4618      	movlt	r0, r3
 800984c:	e738      	b.n	80096c0 <_printf_float+0xa0>
 800984e:	2301      	movs	r3, #1
 8009850:	464a      	mov	r2, r9
 8009852:	4631      	mov	r1, r6
 8009854:	4628      	mov	r0, r5
 8009856:	47b8      	blx	r7
 8009858:	3001      	adds	r0, #1
 800985a:	f43f af2f 	beq.w	80096bc <_printf_float+0x9c>
 800985e:	f108 0801 	add.w	r8, r8, #1
 8009862:	e7e6      	b.n	8009832 <_printf_float+0x212>
 8009864:	9b07      	ldr	r3, [sp, #28]
 8009866:	2b00      	cmp	r3, #0
 8009868:	dc3c      	bgt.n	80098e4 <_printf_float+0x2c4>
 800986a:	4a1d      	ldr	r2, [pc, #116]	; (80098e0 <_printf_float+0x2c0>)
 800986c:	2301      	movs	r3, #1
 800986e:	4631      	mov	r1, r6
 8009870:	4628      	mov	r0, r5
 8009872:	47b8      	blx	r7
 8009874:	3001      	adds	r0, #1
 8009876:	f43f af21 	beq.w	80096bc <_printf_float+0x9c>
 800987a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800987e:	4313      	orrs	r3, r2
 8009880:	d102      	bne.n	8009888 <_printf_float+0x268>
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	07d9      	lsls	r1, r3, #31
 8009886:	d5d8      	bpl.n	800983a <_printf_float+0x21a>
 8009888:	4653      	mov	r3, sl
 800988a:	465a      	mov	r2, fp
 800988c:	4631      	mov	r1, r6
 800988e:	4628      	mov	r0, r5
 8009890:	47b8      	blx	r7
 8009892:	3001      	adds	r0, #1
 8009894:	f43f af12 	beq.w	80096bc <_printf_float+0x9c>
 8009898:	f04f 0900 	mov.w	r9, #0
 800989c:	f104 0a1a 	add.w	sl, r4, #26
 80098a0:	9b07      	ldr	r3, [sp, #28]
 80098a2:	425b      	negs	r3, r3
 80098a4:	454b      	cmp	r3, r9
 80098a6:	dc01      	bgt.n	80098ac <_printf_float+0x28c>
 80098a8:	9b08      	ldr	r3, [sp, #32]
 80098aa:	e795      	b.n	80097d8 <_printf_float+0x1b8>
 80098ac:	2301      	movs	r3, #1
 80098ae:	4652      	mov	r2, sl
 80098b0:	4631      	mov	r1, r6
 80098b2:	4628      	mov	r0, r5
 80098b4:	47b8      	blx	r7
 80098b6:	3001      	adds	r0, #1
 80098b8:	f43f af00 	beq.w	80096bc <_printf_float+0x9c>
 80098bc:	f109 0901 	add.w	r9, r9, #1
 80098c0:	e7ee      	b.n	80098a0 <_printf_float+0x280>
 80098c2:	bf00      	nop
 80098c4:	f3af 8000 	nop.w
 80098c8:	ffffffff 	.word	0xffffffff
 80098cc:	7fefffff 	.word	0x7fefffff
 80098d0:	0800c28c 	.word	0x0800c28c
 80098d4:	0800c290 	.word	0x0800c290
 80098d8:	0800c298 	.word	0x0800c298
 80098dc:	0800c294 	.word	0x0800c294
 80098e0:	0800c29c 	.word	0x0800c29c
 80098e4:	9a08      	ldr	r2, [sp, #32]
 80098e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098e8:	429a      	cmp	r2, r3
 80098ea:	bfa8      	it	ge
 80098ec:	461a      	movge	r2, r3
 80098ee:	2a00      	cmp	r2, #0
 80098f0:	4691      	mov	r9, r2
 80098f2:	dc38      	bgt.n	8009966 <_printf_float+0x346>
 80098f4:	2300      	movs	r3, #0
 80098f6:	9305      	str	r3, [sp, #20]
 80098f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098fc:	f104 021a 	add.w	r2, r4, #26
 8009900:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009902:	9905      	ldr	r1, [sp, #20]
 8009904:	9304      	str	r3, [sp, #16]
 8009906:	eba3 0309 	sub.w	r3, r3, r9
 800990a:	428b      	cmp	r3, r1
 800990c:	dc33      	bgt.n	8009976 <_printf_float+0x356>
 800990e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009912:	429a      	cmp	r2, r3
 8009914:	db3c      	blt.n	8009990 <_printf_float+0x370>
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	07da      	lsls	r2, r3, #31
 800991a:	d439      	bmi.n	8009990 <_printf_float+0x370>
 800991c:	9b08      	ldr	r3, [sp, #32]
 800991e:	9a04      	ldr	r2, [sp, #16]
 8009920:	9907      	ldr	r1, [sp, #28]
 8009922:	1a9a      	subs	r2, r3, r2
 8009924:	eba3 0901 	sub.w	r9, r3, r1
 8009928:	4591      	cmp	r9, r2
 800992a:	bfa8      	it	ge
 800992c:	4691      	movge	r9, r2
 800992e:	f1b9 0f00 	cmp.w	r9, #0
 8009932:	dc35      	bgt.n	80099a0 <_printf_float+0x380>
 8009934:	f04f 0800 	mov.w	r8, #0
 8009938:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800993c:	f104 0a1a 	add.w	sl, r4, #26
 8009940:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009944:	1a9b      	subs	r3, r3, r2
 8009946:	eba3 0309 	sub.w	r3, r3, r9
 800994a:	4543      	cmp	r3, r8
 800994c:	f77f af75 	ble.w	800983a <_printf_float+0x21a>
 8009950:	2301      	movs	r3, #1
 8009952:	4652      	mov	r2, sl
 8009954:	4631      	mov	r1, r6
 8009956:	4628      	mov	r0, r5
 8009958:	47b8      	blx	r7
 800995a:	3001      	adds	r0, #1
 800995c:	f43f aeae 	beq.w	80096bc <_printf_float+0x9c>
 8009960:	f108 0801 	add.w	r8, r8, #1
 8009964:	e7ec      	b.n	8009940 <_printf_float+0x320>
 8009966:	4613      	mov	r3, r2
 8009968:	4631      	mov	r1, r6
 800996a:	4642      	mov	r2, r8
 800996c:	4628      	mov	r0, r5
 800996e:	47b8      	blx	r7
 8009970:	3001      	adds	r0, #1
 8009972:	d1bf      	bne.n	80098f4 <_printf_float+0x2d4>
 8009974:	e6a2      	b.n	80096bc <_printf_float+0x9c>
 8009976:	2301      	movs	r3, #1
 8009978:	4631      	mov	r1, r6
 800997a:	4628      	mov	r0, r5
 800997c:	9204      	str	r2, [sp, #16]
 800997e:	47b8      	blx	r7
 8009980:	3001      	adds	r0, #1
 8009982:	f43f ae9b 	beq.w	80096bc <_printf_float+0x9c>
 8009986:	9b05      	ldr	r3, [sp, #20]
 8009988:	9a04      	ldr	r2, [sp, #16]
 800998a:	3301      	adds	r3, #1
 800998c:	9305      	str	r3, [sp, #20]
 800998e:	e7b7      	b.n	8009900 <_printf_float+0x2e0>
 8009990:	4653      	mov	r3, sl
 8009992:	465a      	mov	r2, fp
 8009994:	4631      	mov	r1, r6
 8009996:	4628      	mov	r0, r5
 8009998:	47b8      	blx	r7
 800999a:	3001      	adds	r0, #1
 800999c:	d1be      	bne.n	800991c <_printf_float+0x2fc>
 800999e:	e68d      	b.n	80096bc <_printf_float+0x9c>
 80099a0:	9a04      	ldr	r2, [sp, #16]
 80099a2:	464b      	mov	r3, r9
 80099a4:	4442      	add	r2, r8
 80099a6:	4631      	mov	r1, r6
 80099a8:	4628      	mov	r0, r5
 80099aa:	47b8      	blx	r7
 80099ac:	3001      	adds	r0, #1
 80099ae:	d1c1      	bne.n	8009934 <_printf_float+0x314>
 80099b0:	e684      	b.n	80096bc <_printf_float+0x9c>
 80099b2:	9a08      	ldr	r2, [sp, #32]
 80099b4:	2a01      	cmp	r2, #1
 80099b6:	dc01      	bgt.n	80099bc <_printf_float+0x39c>
 80099b8:	07db      	lsls	r3, r3, #31
 80099ba:	d537      	bpl.n	8009a2c <_printf_float+0x40c>
 80099bc:	2301      	movs	r3, #1
 80099be:	4642      	mov	r2, r8
 80099c0:	4631      	mov	r1, r6
 80099c2:	4628      	mov	r0, r5
 80099c4:	47b8      	blx	r7
 80099c6:	3001      	adds	r0, #1
 80099c8:	f43f ae78 	beq.w	80096bc <_printf_float+0x9c>
 80099cc:	4653      	mov	r3, sl
 80099ce:	465a      	mov	r2, fp
 80099d0:	4631      	mov	r1, r6
 80099d2:	4628      	mov	r0, r5
 80099d4:	47b8      	blx	r7
 80099d6:	3001      	adds	r0, #1
 80099d8:	f43f ae70 	beq.w	80096bc <_printf_float+0x9c>
 80099dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80099e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80099e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e8:	d01b      	beq.n	8009a22 <_printf_float+0x402>
 80099ea:	9b08      	ldr	r3, [sp, #32]
 80099ec:	f108 0201 	add.w	r2, r8, #1
 80099f0:	3b01      	subs	r3, #1
 80099f2:	4631      	mov	r1, r6
 80099f4:	4628      	mov	r0, r5
 80099f6:	47b8      	blx	r7
 80099f8:	3001      	adds	r0, #1
 80099fa:	d10e      	bne.n	8009a1a <_printf_float+0x3fa>
 80099fc:	e65e      	b.n	80096bc <_printf_float+0x9c>
 80099fe:	2301      	movs	r3, #1
 8009a00:	464a      	mov	r2, r9
 8009a02:	4631      	mov	r1, r6
 8009a04:	4628      	mov	r0, r5
 8009a06:	47b8      	blx	r7
 8009a08:	3001      	adds	r0, #1
 8009a0a:	f43f ae57 	beq.w	80096bc <_printf_float+0x9c>
 8009a0e:	f108 0801 	add.w	r8, r8, #1
 8009a12:	9b08      	ldr	r3, [sp, #32]
 8009a14:	3b01      	subs	r3, #1
 8009a16:	4543      	cmp	r3, r8
 8009a18:	dcf1      	bgt.n	80099fe <_printf_float+0x3de>
 8009a1a:	9b04      	ldr	r3, [sp, #16]
 8009a1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a20:	e6db      	b.n	80097da <_printf_float+0x1ba>
 8009a22:	f04f 0800 	mov.w	r8, #0
 8009a26:	f104 091a 	add.w	r9, r4, #26
 8009a2a:	e7f2      	b.n	8009a12 <_printf_float+0x3f2>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	4642      	mov	r2, r8
 8009a30:	e7df      	b.n	80099f2 <_printf_float+0x3d2>
 8009a32:	2301      	movs	r3, #1
 8009a34:	464a      	mov	r2, r9
 8009a36:	4631      	mov	r1, r6
 8009a38:	4628      	mov	r0, r5
 8009a3a:	47b8      	blx	r7
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	f43f ae3d 	beq.w	80096bc <_printf_float+0x9c>
 8009a42:	f108 0801 	add.w	r8, r8, #1
 8009a46:	68e3      	ldr	r3, [r4, #12]
 8009a48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a4a:	1a5b      	subs	r3, r3, r1
 8009a4c:	4543      	cmp	r3, r8
 8009a4e:	dcf0      	bgt.n	8009a32 <_printf_float+0x412>
 8009a50:	e6f7      	b.n	8009842 <_printf_float+0x222>
 8009a52:	f04f 0800 	mov.w	r8, #0
 8009a56:	f104 0919 	add.w	r9, r4, #25
 8009a5a:	e7f4      	b.n	8009a46 <_printf_float+0x426>

08009a5c <_printf_common>:
 8009a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a60:	4616      	mov	r6, r2
 8009a62:	4699      	mov	r9, r3
 8009a64:	688a      	ldr	r2, [r1, #8]
 8009a66:	690b      	ldr	r3, [r1, #16]
 8009a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	bfb8      	it	lt
 8009a70:	4613      	movlt	r3, r2
 8009a72:	6033      	str	r3, [r6, #0]
 8009a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a78:	4607      	mov	r7, r0
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	b10a      	cbz	r2, 8009a82 <_printf_common+0x26>
 8009a7e:	3301      	adds	r3, #1
 8009a80:	6033      	str	r3, [r6, #0]
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	0699      	lsls	r1, r3, #26
 8009a86:	bf42      	ittt	mi
 8009a88:	6833      	ldrmi	r3, [r6, #0]
 8009a8a:	3302      	addmi	r3, #2
 8009a8c:	6033      	strmi	r3, [r6, #0]
 8009a8e:	6825      	ldr	r5, [r4, #0]
 8009a90:	f015 0506 	ands.w	r5, r5, #6
 8009a94:	d106      	bne.n	8009aa4 <_printf_common+0x48>
 8009a96:	f104 0a19 	add.w	sl, r4, #25
 8009a9a:	68e3      	ldr	r3, [r4, #12]
 8009a9c:	6832      	ldr	r2, [r6, #0]
 8009a9e:	1a9b      	subs	r3, r3, r2
 8009aa0:	42ab      	cmp	r3, r5
 8009aa2:	dc26      	bgt.n	8009af2 <_printf_common+0x96>
 8009aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009aa8:	1e13      	subs	r3, r2, #0
 8009aaa:	6822      	ldr	r2, [r4, #0]
 8009aac:	bf18      	it	ne
 8009aae:	2301      	movne	r3, #1
 8009ab0:	0692      	lsls	r2, r2, #26
 8009ab2:	d42b      	bmi.n	8009b0c <_printf_common+0xb0>
 8009ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ab8:	4649      	mov	r1, r9
 8009aba:	4638      	mov	r0, r7
 8009abc:	47c0      	blx	r8
 8009abe:	3001      	adds	r0, #1
 8009ac0:	d01e      	beq.n	8009b00 <_printf_common+0xa4>
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	68e5      	ldr	r5, [r4, #12]
 8009ac6:	6832      	ldr	r2, [r6, #0]
 8009ac8:	f003 0306 	and.w	r3, r3, #6
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	bf08      	it	eq
 8009ad0:	1aad      	subeq	r5, r5, r2
 8009ad2:	68a3      	ldr	r3, [r4, #8]
 8009ad4:	6922      	ldr	r2, [r4, #16]
 8009ad6:	bf0c      	ite	eq
 8009ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009adc:	2500      	movne	r5, #0
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	bfc4      	itt	gt
 8009ae2:	1a9b      	subgt	r3, r3, r2
 8009ae4:	18ed      	addgt	r5, r5, r3
 8009ae6:	2600      	movs	r6, #0
 8009ae8:	341a      	adds	r4, #26
 8009aea:	42b5      	cmp	r5, r6
 8009aec:	d11a      	bne.n	8009b24 <_printf_common+0xc8>
 8009aee:	2000      	movs	r0, #0
 8009af0:	e008      	b.n	8009b04 <_printf_common+0xa8>
 8009af2:	2301      	movs	r3, #1
 8009af4:	4652      	mov	r2, sl
 8009af6:	4649      	mov	r1, r9
 8009af8:	4638      	mov	r0, r7
 8009afa:	47c0      	blx	r8
 8009afc:	3001      	adds	r0, #1
 8009afe:	d103      	bne.n	8009b08 <_printf_common+0xac>
 8009b00:	f04f 30ff 	mov.w	r0, #4294967295
 8009b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b08:	3501      	adds	r5, #1
 8009b0a:	e7c6      	b.n	8009a9a <_printf_common+0x3e>
 8009b0c:	18e1      	adds	r1, r4, r3
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	2030      	movs	r0, #48	; 0x30
 8009b12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b16:	4422      	add	r2, r4
 8009b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b20:	3302      	adds	r3, #2
 8009b22:	e7c7      	b.n	8009ab4 <_printf_common+0x58>
 8009b24:	2301      	movs	r3, #1
 8009b26:	4622      	mov	r2, r4
 8009b28:	4649      	mov	r1, r9
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	47c0      	blx	r8
 8009b2e:	3001      	adds	r0, #1
 8009b30:	d0e6      	beq.n	8009b00 <_printf_common+0xa4>
 8009b32:	3601      	adds	r6, #1
 8009b34:	e7d9      	b.n	8009aea <_printf_common+0x8e>
	...

08009b38 <_printf_i>:
 8009b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b3c:	7e0f      	ldrb	r7, [r1, #24]
 8009b3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b40:	2f78      	cmp	r7, #120	; 0x78
 8009b42:	4691      	mov	r9, r2
 8009b44:	4680      	mov	r8, r0
 8009b46:	460c      	mov	r4, r1
 8009b48:	469a      	mov	sl, r3
 8009b4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b4e:	d807      	bhi.n	8009b60 <_printf_i+0x28>
 8009b50:	2f62      	cmp	r7, #98	; 0x62
 8009b52:	d80a      	bhi.n	8009b6a <_printf_i+0x32>
 8009b54:	2f00      	cmp	r7, #0
 8009b56:	f000 80d8 	beq.w	8009d0a <_printf_i+0x1d2>
 8009b5a:	2f58      	cmp	r7, #88	; 0x58
 8009b5c:	f000 80a3 	beq.w	8009ca6 <_printf_i+0x16e>
 8009b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b68:	e03a      	b.n	8009be0 <_printf_i+0xa8>
 8009b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b6e:	2b15      	cmp	r3, #21
 8009b70:	d8f6      	bhi.n	8009b60 <_printf_i+0x28>
 8009b72:	a101      	add	r1, pc, #4	; (adr r1, 8009b78 <_printf_i+0x40>)
 8009b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b78:	08009bd1 	.word	0x08009bd1
 8009b7c:	08009be5 	.word	0x08009be5
 8009b80:	08009b61 	.word	0x08009b61
 8009b84:	08009b61 	.word	0x08009b61
 8009b88:	08009b61 	.word	0x08009b61
 8009b8c:	08009b61 	.word	0x08009b61
 8009b90:	08009be5 	.word	0x08009be5
 8009b94:	08009b61 	.word	0x08009b61
 8009b98:	08009b61 	.word	0x08009b61
 8009b9c:	08009b61 	.word	0x08009b61
 8009ba0:	08009b61 	.word	0x08009b61
 8009ba4:	08009cf1 	.word	0x08009cf1
 8009ba8:	08009c15 	.word	0x08009c15
 8009bac:	08009cd3 	.word	0x08009cd3
 8009bb0:	08009b61 	.word	0x08009b61
 8009bb4:	08009b61 	.word	0x08009b61
 8009bb8:	08009d13 	.word	0x08009d13
 8009bbc:	08009b61 	.word	0x08009b61
 8009bc0:	08009c15 	.word	0x08009c15
 8009bc4:	08009b61 	.word	0x08009b61
 8009bc8:	08009b61 	.word	0x08009b61
 8009bcc:	08009cdb 	.word	0x08009cdb
 8009bd0:	682b      	ldr	r3, [r5, #0]
 8009bd2:	1d1a      	adds	r2, r3, #4
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	602a      	str	r2, [r5, #0]
 8009bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009be0:	2301      	movs	r3, #1
 8009be2:	e0a3      	b.n	8009d2c <_printf_i+0x1f4>
 8009be4:	6820      	ldr	r0, [r4, #0]
 8009be6:	6829      	ldr	r1, [r5, #0]
 8009be8:	0606      	lsls	r6, r0, #24
 8009bea:	f101 0304 	add.w	r3, r1, #4
 8009bee:	d50a      	bpl.n	8009c06 <_printf_i+0xce>
 8009bf0:	680e      	ldr	r6, [r1, #0]
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	2e00      	cmp	r6, #0
 8009bf6:	da03      	bge.n	8009c00 <_printf_i+0xc8>
 8009bf8:	232d      	movs	r3, #45	; 0x2d
 8009bfa:	4276      	negs	r6, r6
 8009bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c00:	485e      	ldr	r0, [pc, #376]	; (8009d7c <_printf_i+0x244>)
 8009c02:	230a      	movs	r3, #10
 8009c04:	e019      	b.n	8009c3a <_printf_i+0x102>
 8009c06:	680e      	ldr	r6, [r1, #0]
 8009c08:	602b      	str	r3, [r5, #0]
 8009c0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c0e:	bf18      	it	ne
 8009c10:	b236      	sxthne	r6, r6
 8009c12:	e7ef      	b.n	8009bf4 <_printf_i+0xbc>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	6820      	ldr	r0, [r4, #0]
 8009c18:	1d19      	adds	r1, r3, #4
 8009c1a:	6029      	str	r1, [r5, #0]
 8009c1c:	0601      	lsls	r1, r0, #24
 8009c1e:	d501      	bpl.n	8009c24 <_printf_i+0xec>
 8009c20:	681e      	ldr	r6, [r3, #0]
 8009c22:	e002      	b.n	8009c2a <_printf_i+0xf2>
 8009c24:	0646      	lsls	r6, r0, #25
 8009c26:	d5fb      	bpl.n	8009c20 <_printf_i+0xe8>
 8009c28:	881e      	ldrh	r6, [r3, #0]
 8009c2a:	4854      	ldr	r0, [pc, #336]	; (8009d7c <_printf_i+0x244>)
 8009c2c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c2e:	bf0c      	ite	eq
 8009c30:	2308      	moveq	r3, #8
 8009c32:	230a      	movne	r3, #10
 8009c34:	2100      	movs	r1, #0
 8009c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c3a:	6865      	ldr	r5, [r4, #4]
 8009c3c:	60a5      	str	r5, [r4, #8]
 8009c3e:	2d00      	cmp	r5, #0
 8009c40:	bfa2      	ittt	ge
 8009c42:	6821      	ldrge	r1, [r4, #0]
 8009c44:	f021 0104 	bicge.w	r1, r1, #4
 8009c48:	6021      	strge	r1, [r4, #0]
 8009c4a:	b90e      	cbnz	r6, 8009c50 <_printf_i+0x118>
 8009c4c:	2d00      	cmp	r5, #0
 8009c4e:	d04d      	beq.n	8009cec <_printf_i+0x1b4>
 8009c50:	4615      	mov	r5, r2
 8009c52:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c56:	fb03 6711 	mls	r7, r3, r1, r6
 8009c5a:	5dc7      	ldrb	r7, [r0, r7]
 8009c5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c60:	4637      	mov	r7, r6
 8009c62:	42bb      	cmp	r3, r7
 8009c64:	460e      	mov	r6, r1
 8009c66:	d9f4      	bls.n	8009c52 <_printf_i+0x11a>
 8009c68:	2b08      	cmp	r3, #8
 8009c6a:	d10b      	bne.n	8009c84 <_printf_i+0x14c>
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	07de      	lsls	r6, r3, #31
 8009c70:	d508      	bpl.n	8009c84 <_printf_i+0x14c>
 8009c72:	6923      	ldr	r3, [r4, #16]
 8009c74:	6861      	ldr	r1, [r4, #4]
 8009c76:	4299      	cmp	r1, r3
 8009c78:	bfde      	ittt	le
 8009c7a:	2330      	movle	r3, #48	; 0x30
 8009c7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c84:	1b52      	subs	r2, r2, r5
 8009c86:	6122      	str	r2, [r4, #16]
 8009c88:	f8cd a000 	str.w	sl, [sp]
 8009c8c:	464b      	mov	r3, r9
 8009c8e:	aa03      	add	r2, sp, #12
 8009c90:	4621      	mov	r1, r4
 8009c92:	4640      	mov	r0, r8
 8009c94:	f7ff fee2 	bl	8009a5c <_printf_common>
 8009c98:	3001      	adds	r0, #1
 8009c9a:	d14c      	bne.n	8009d36 <_printf_i+0x1fe>
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca0:	b004      	add	sp, #16
 8009ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca6:	4835      	ldr	r0, [pc, #212]	; (8009d7c <_printf_i+0x244>)
 8009ca8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009cac:	6829      	ldr	r1, [r5, #0]
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cb4:	6029      	str	r1, [r5, #0]
 8009cb6:	061d      	lsls	r5, r3, #24
 8009cb8:	d514      	bpl.n	8009ce4 <_printf_i+0x1ac>
 8009cba:	07df      	lsls	r7, r3, #31
 8009cbc:	bf44      	itt	mi
 8009cbe:	f043 0320 	orrmi.w	r3, r3, #32
 8009cc2:	6023      	strmi	r3, [r4, #0]
 8009cc4:	b91e      	cbnz	r6, 8009cce <_printf_i+0x196>
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	f023 0320 	bic.w	r3, r3, #32
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	2310      	movs	r3, #16
 8009cd0:	e7b0      	b.n	8009c34 <_printf_i+0xfc>
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	f043 0320 	orr.w	r3, r3, #32
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	2378      	movs	r3, #120	; 0x78
 8009cdc:	4828      	ldr	r0, [pc, #160]	; (8009d80 <_printf_i+0x248>)
 8009cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ce2:	e7e3      	b.n	8009cac <_printf_i+0x174>
 8009ce4:	0659      	lsls	r1, r3, #25
 8009ce6:	bf48      	it	mi
 8009ce8:	b2b6      	uxthmi	r6, r6
 8009cea:	e7e6      	b.n	8009cba <_printf_i+0x182>
 8009cec:	4615      	mov	r5, r2
 8009cee:	e7bb      	b.n	8009c68 <_printf_i+0x130>
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	6826      	ldr	r6, [r4, #0]
 8009cf4:	6961      	ldr	r1, [r4, #20]
 8009cf6:	1d18      	adds	r0, r3, #4
 8009cf8:	6028      	str	r0, [r5, #0]
 8009cfa:	0635      	lsls	r5, r6, #24
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	d501      	bpl.n	8009d04 <_printf_i+0x1cc>
 8009d00:	6019      	str	r1, [r3, #0]
 8009d02:	e002      	b.n	8009d0a <_printf_i+0x1d2>
 8009d04:	0670      	lsls	r0, r6, #25
 8009d06:	d5fb      	bpl.n	8009d00 <_printf_i+0x1c8>
 8009d08:	8019      	strh	r1, [r3, #0]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	6123      	str	r3, [r4, #16]
 8009d0e:	4615      	mov	r5, r2
 8009d10:	e7ba      	b.n	8009c88 <_printf_i+0x150>
 8009d12:	682b      	ldr	r3, [r5, #0]
 8009d14:	1d1a      	adds	r2, r3, #4
 8009d16:	602a      	str	r2, [r5, #0]
 8009d18:	681d      	ldr	r5, [r3, #0]
 8009d1a:	6862      	ldr	r2, [r4, #4]
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f7f6 fae6 	bl	80002f0 <memchr>
 8009d24:	b108      	cbz	r0, 8009d2a <_printf_i+0x1f2>
 8009d26:	1b40      	subs	r0, r0, r5
 8009d28:	6060      	str	r0, [r4, #4]
 8009d2a:	6863      	ldr	r3, [r4, #4]
 8009d2c:	6123      	str	r3, [r4, #16]
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d34:	e7a8      	b.n	8009c88 <_printf_i+0x150>
 8009d36:	6923      	ldr	r3, [r4, #16]
 8009d38:	462a      	mov	r2, r5
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	4640      	mov	r0, r8
 8009d3e:	47d0      	blx	sl
 8009d40:	3001      	adds	r0, #1
 8009d42:	d0ab      	beq.n	8009c9c <_printf_i+0x164>
 8009d44:	6823      	ldr	r3, [r4, #0]
 8009d46:	079b      	lsls	r3, r3, #30
 8009d48:	d413      	bmi.n	8009d72 <_printf_i+0x23a>
 8009d4a:	68e0      	ldr	r0, [r4, #12]
 8009d4c:	9b03      	ldr	r3, [sp, #12]
 8009d4e:	4298      	cmp	r0, r3
 8009d50:	bfb8      	it	lt
 8009d52:	4618      	movlt	r0, r3
 8009d54:	e7a4      	b.n	8009ca0 <_printf_i+0x168>
 8009d56:	2301      	movs	r3, #1
 8009d58:	4632      	mov	r2, r6
 8009d5a:	4649      	mov	r1, r9
 8009d5c:	4640      	mov	r0, r8
 8009d5e:	47d0      	blx	sl
 8009d60:	3001      	adds	r0, #1
 8009d62:	d09b      	beq.n	8009c9c <_printf_i+0x164>
 8009d64:	3501      	adds	r5, #1
 8009d66:	68e3      	ldr	r3, [r4, #12]
 8009d68:	9903      	ldr	r1, [sp, #12]
 8009d6a:	1a5b      	subs	r3, r3, r1
 8009d6c:	42ab      	cmp	r3, r5
 8009d6e:	dcf2      	bgt.n	8009d56 <_printf_i+0x21e>
 8009d70:	e7eb      	b.n	8009d4a <_printf_i+0x212>
 8009d72:	2500      	movs	r5, #0
 8009d74:	f104 0619 	add.w	r6, r4, #25
 8009d78:	e7f5      	b.n	8009d66 <_printf_i+0x22e>
 8009d7a:	bf00      	nop
 8009d7c:	0800c29e 	.word	0x0800c29e
 8009d80:	0800c2af 	.word	0x0800c2af

08009d84 <siprintf>:
 8009d84:	b40e      	push	{r1, r2, r3}
 8009d86:	b500      	push	{lr}
 8009d88:	b09c      	sub	sp, #112	; 0x70
 8009d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8009d8c:	9002      	str	r0, [sp, #8]
 8009d8e:	9006      	str	r0, [sp, #24]
 8009d90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d94:	4809      	ldr	r0, [pc, #36]	; (8009dbc <siprintf+0x38>)
 8009d96:	9107      	str	r1, [sp, #28]
 8009d98:	9104      	str	r1, [sp, #16]
 8009d9a:	4909      	ldr	r1, [pc, #36]	; (8009dc0 <siprintf+0x3c>)
 8009d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009da0:	9105      	str	r1, [sp, #20]
 8009da2:	6800      	ldr	r0, [r0, #0]
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	a902      	add	r1, sp, #8
 8009da8:	f001 faf8 	bl	800b39c <_svfiprintf_r>
 8009dac:	9b02      	ldr	r3, [sp, #8]
 8009dae:	2200      	movs	r2, #0
 8009db0:	701a      	strb	r2, [r3, #0]
 8009db2:	b01c      	add	sp, #112	; 0x70
 8009db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009db8:	b003      	add	sp, #12
 8009dba:	4770      	bx	lr
 8009dbc:	24000010 	.word	0x24000010
 8009dc0:	ffff0208 	.word	0xffff0208

08009dc4 <quorem>:
 8009dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc8:	6903      	ldr	r3, [r0, #16]
 8009dca:	690c      	ldr	r4, [r1, #16]
 8009dcc:	42a3      	cmp	r3, r4
 8009dce:	4607      	mov	r7, r0
 8009dd0:	f2c0 8081 	blt.w	8009ed6 <quorem+0x112>
 8009dd4:	3c01      	subs	r4, #1
 8009dd6:	f101 0814 	add.w	r8, r1, #20
 8009dda:	f100 0514 	add.w	r5, r0, #20
 8009dde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009de8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dec:	3301      	adds	r3, #1
 8009dee:	429a      	cmp	r2, r3
 8009df0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009df4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009df8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009dfc:	d331      	bcc.n	8009e62 <quorem+0x9e>
 8009dfe:	f04f 0e00 	mov.w	lr, #0
 8009e02:	4640      	mov	r0, r8
 8009e04:	46ac      	mov	ip, r5
 8009e06:	46f2      	mov	sl, lr
 8009e08:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e0c:	b293      	uxth	r3, r2
 8009e0e:	fb06 e303 	mla	r3, r6, r3, lr
 8009e12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	ebaa 0303 	sub.w	r3, sl, r3
 8009e1c:	f8dc a000 	ldr.w	sl, [ip]
 8009e20:	0c12      	lsrs	r2, r2, #16
 8009e22:	fa13 f38a 	uxtah	r3, r3, sl
 8009e26:	fb06 e202 	mla	r2, r6, r2, lr
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	9b00      	ldr	r3, [sp, #0]
 8009e2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e32:	b292      	uxth	r2, r2
 8009e34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e40:	4581      	cmp	r9, r0
 8009e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e46:	f84c 3b04 	str.w	r3, [ip], #4
 8009e4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e4e:	d2db      	bcs.n	8009e08 <quorem+0x44>
 8009e50:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e54:	b92b      	cbnz	r3, 8009e62 <quorem+0x9e>
 8009e56:	9b01      	ldr	r3, [sp, #4]
 8009e58:	3b04      	subs	r3, #4
 8009e5a:	429d      	cmp	r5, r3
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	d32e      	bcc.n	8009ebe <quorem+0xfa>
 8009e60:	613c      	str	r4, [r7, #16]
 8009e62:	4638      	mov	r0, r7
 8009e64:	f001 f846 	bl	800aef4 <__mcmp>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	db24      	blt.n	8009eb6 <quorem+0xf2>
 8009e6c:	3601      	adds	r6, #1
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f04f 0c00 	mov.w	ip, #0
 8009e74:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e78:	f8d0 e000 	ldr.w	lr, [r0]
 8009e7c:	b293      	uxth	r3, r2
 8009e7e:	ebac 0303 	sub.w	r3, ip, r3
 8009e82:	0c12      	lsrs	r2, r2, #16
 8009e84:	fa13 f38e 	uxtah	r3, r3, lr
 8009e88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e96:	45c1      	cmp	r9, r8
 8009e98:	f840 3b04 	str.w	r3, [r0], #4
 8009e9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ea0:	d2e8      	bcs.n	8009e74 <quorem+0xb0>
 8009ea2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eaa:	b922      	cbnz	r2, 8009eb6 <quorem+0xf2>
 8009eac:	3b04      	subs	r3, #4
 8009eae:	429d      	cmp	r5, r3
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	d30a      	bcc.n	8009eca <quorem+0x106>
 8009eb4:	613c      	str	r4, [r7, #16]
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	b003      	add	sp, #12
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	6812      	ldr	r2, [r2, #0]
 8009ec0:	3b04      	subs	r3, #4
 8009ec2:	2a00      	cmp	r2, #0
 8009ec4:	d1cc      	bne.n	8009e60 <quorem+0x9c>
 8009ec6:	3c01      	subs	r4, #1
 8009ec8:	e7c7      	b.n	8009e5a <quorem+0x96>
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	3b04      	subs	r3, #4
 8009ece:	2a00      	cmp	r2, #0
 8009ed0:	d1f0      	bne.n	8009eb4 <quorem+0xf0>
 8009ed2:	3c01      	subs	r4, #1
 8009ed4:	e7eb      	b.n	8009eae <quorem+0xea>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	e7ee      	b.n	8009eb8 <quorem+0xf4>
 8009eda:	0000      	movs	r0, r0
 8009edc:	0000      	movs	r0, r0
	...

08009ee0 <_dtoa_r>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	ed2d 8b02 	vpush	{d8}
 8009ee8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009eea:	b091      	sub	sp, #68	; 0x44
 8009eec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ef0:	ec59 8b10 	vmov	r8, r9, d0
 8009ef4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009ef6:	9106      	str	r1, [sp, #24]
 8009ef8:	4606      	mov	r6, r0
 8009efa:	9208      	str	r2, [sp, #32]
 8009efc:	930c      	str	r3, [sp, #48]	; 0x30
 8009efe:	b975      	cbnz	r5, 8009f1e <_dtoa_r+0x3e>
 8009f00:	2010      	movs	r0, #16
 8009f02:	f000 fd5f 	bl	800a9c4 <malloc>
 8009f06:	4602      	mov	r2, r0
 8009f08:	6270      	str	r0, [r6, #36]	; 0x24
 8009f0a:	b920      	cbnz	r0, 8009f16 <_dtoa_r+0x36>
 8009f0c:	4baa      	ldr	r3, [pc, #680]	; (800a1b8 <_dtoa_r+0x2d8>)
 8009f0e:	21ea      	movs	r1, #234	; 0xea
 8009f10:	48aa      	ldr	r0, [pc, #680]	; (800a1bc <_dtoa_r+0x2dc>)
 8009f12:	f001 fb53 	bl	800b5bc <__assert_func>
 8009f16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f1a:	6005      	str	r5, [r0, #0]
 8009f1c:	60c5      	str	r5, [r0, #12]
 8009f1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f20:	6819      	ldr	r1, [r3, #0]
 8009f22:	b151      	cbz	r1, 8009f3a <_dtoa_r+0x5a>
 8009f24:	685a      	ldr	r2, [r3, #4]
 8009f26:	604a      	str	r2, [r1, #4]
 8009f28:	2301      	movs	r3, #1
 8009f2a:	4093      	lsls	r3, r2
 8009f2c:	608b      	str	r3, [r1, #8]
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f000 fd9e 	bl	800aa70 <_Bfree>
 8009f34:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]
 8009f3a:	f1b9 0300 	subs.w	r3, r9, #0
 8009f3e:	bfbb      	ittet	lt
 8009f40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f44:	9303      	strlt	r3, [sp, #12]
 8009f46:	2300      	movge	r3, #0
 8009f48:	2201      	movlt	r2, #1
 8009f4a:	bfac      	ite	ge
 8009f4c:	6023      	strge	r3, [r4, #0]
 8009f4e:	6022      	strlt	r2, [r4, #0]
 8009f50:	4b9b      	ldr	r3, [pc, #620]	; (800a1c0 <_dtoa_r+0x2e0>)
 8009f52:	9c03      	ldr	r4, [sp, #12]
 8009f54:	43a3      	bics	r3, r4
 8009f56:	d11c      	bne.n	8009f92 <_dtoa_r+0xb2>
 8009f58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009f64:	ea53 0308 	orrs.w	r3, r3, r8
 8009f68:	f000 84fd 	beq.w	800a966 <_dtoa_r+0xa86>
 8009f6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f6e:	b963      	cbnz	r3, 8009f8a <_dtoa_r+0xaa>
 8009f70:	4b94      	ldr	r3, [pc, #592]	; (800a1c4 <_dtoa_r+0x2e4>)
 8009f72:	e01f      	b.n	8009fb4 <_dtoa_r+0xd4>
 8009f74:	4b94      	ldr	r3, [pc, #592]	; (800a1c8 <_dtoa_r+0x2e8>)
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	3308      	adds	r3, #8
 8009f7a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009f7c:	6013      	str	r3, [r2, #0]
 8009f7e:	9801      	ldr	r0, [sp, #4]
 8009f80:	b011      	add	sp, #68	; 0x44
 8009f82:	ecbd 8b02 	vpop	{d8}
 8009f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8a:	4b8e      	ldr	r3, [pc, #568]	; (800a1c4 <_dtoa_r+0x2e4>)
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	3303      	adds	r3, #3
 8009f90:	e7f3      	b.n	8009f7a <_dtoa_r+0x9a>
 8009f92:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009f96:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f9e:	d10b      	bne.n	8009fb8 <_dtoa_r+0xd8>
 8009fa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 84d9 	beq.w	800a960 <_dtoa_r+0xa80>
 8009fae:	4887      	ldr	r0, [pc, #540]	; (800a1cc <_dtoa_r+0x2ec>)
 8009fb0:	6018      	str	r0, [r3, #0]
 8009fb2:	1e43      	subs	r3, r0, #1
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	e7e2      	b.n	8009f7e <_dtoa_r+0x9e>
 8009fb8:	a90f      	add	r1, sp, #60	; 0x3c
 8009fba:	aa0e      	add	r2, sp, #56	; 0x38
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	eeb0 0b48 	vmov.f64	d0, d8
 8009fc2:	f001 f83d 	bl	800b040 <__d2b>
 8009fc6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009fca:	4605      	mov	r5, r0
 8009fcc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009fce:	2900      	cmp	r1, #0
 8009fd0:	d046      	beq.n	800a060 <_dtoa_r+0x180>
 8009fd2:	ee18 4a90 	vmov	r4, s17
 8009fd6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009fda:	ec53 2b18 	vmov	r2, r3, d8
 8009fde:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009fe2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fe6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009fea:	2400      	movs	r4, #0
 8009fec:	ec43 2b16 	vmov	d6, r2, r3
 8009ff0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009ff4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a1a0 <_dtoa_r+0x2c0>
 8009ff8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009ffc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a1a8 <_dtoa_r+0x2c8>
 800a000:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a004:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a1b0 <_dtoa_r+0x2d0>
 800a008:	ee07 1a90 	vmov	s15, r1
 800a00c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a010:	eeb0 7b46 	vmov.f64	d7, d6
 800a014:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a018:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a01c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a024:	ee16 ba90 	vmov	fp, s13
 800a028:	940a      	str	r4, [sp, #40]	; 0x28
 800a02a:	d508      	bpl.n	800a03e <_dtoa_r+0x15e>
 800a02c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a030:	eeb4 6b47 	vcmp.f64	d6, d7
 800a034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a038:	bf18      	it	ne
 800a03a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a03e:	f1bb 0f16 	cmp.w	fp, #22
 800a042:	d82f      	bhi.n	800a0a4 <_dtoa_r+0x1c4>
 800a044:	4b62      	ldr	r3, [pc, #392]	; (800a1d0 <_dtoa_r+0x2f0>)
 800a046:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a04a:	ed93 7b00 	vldr	d7, [r3]
 800a04e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a056:	d501      	bpl.n	800a05c <_dtoa_r+0x17c>
 800a058:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a05c:	2300      	movs	r3, #0
 800a05e:	e022      	b.n	800a0a6 <_dtoa_r+0x1c6>
 800a060:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a062:	4401      	add	r1, r0
 800a064:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a068:	2b20      	cmp	r3, #32
 800a06a:	bfc1      	itttt	gt
 800a06c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a070:	fa04 f303 	lslgt.w	r3, r4, r3
 800a074:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a078:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a07c:	bfd6      	itet	le
 800a07e:	f1c3 0320 	rsble	r3, r3, #32
 800a082:	ea43 0808 	orrgt.w	r8, r3, r8
 800a086:	fa08 f803 	lslle.w	r8, r8, r3
 800a08a:	ee07 8a90 	vmov	s15, r8
 800a08e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a092:	3901      	subs	r1, #1
 800a094:	ee17 4a90 	vmov	r4, s15
 800a098:	ec53 2b17 	vmov	r2, r3, d7
 800a09c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a0a0:	2401      	movs	r4, #1
 800a0a2:	e7a3      	b.n	8009fec <_dtoa_r+0x10c>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0a8:	1a43      	subs	r3, r0, r1
 800a0aa:	1e5a      	subs	r2, r3, #1
 800a0ac:	bf45      	ittet	mi
 800a0ae:	f1c3 0301 	rsbmi	r3, r3, #1
 800a0b2:	9304      	strmi	r3, [sp, #16]
 800a0b4:	2300      	movpl	r3, #0
 800a0b6:	2300      	movmi	r3, #0
 800a0b8:	9205      	str	r2, [sp, #20]
 800a0ba:	bf54      	ite	pl
 800a0bc:	9304      	strpl	r3, [sp, #16]
 800a0be:	9305      	strmi	r3, [sp, #20]
 800a0c0:	f1bb 0f00 	cmp.w	fp, #0
 800a0c4:	db18      	blt.n	800a0f8 <_dtoa_r+0x218>
 800a0c6:	9b05      	ldr	r3, [sp, #20]
 800a0c8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a0cc:	445b      	add	r3, fp
 800a0ce:	9305      	str	r3, [sp, #20]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	9a06      	ldr	r2, [sp, #24]
 800a0d4:	2a09      	cmp	r2, #9
 800a0d6:	d849      	bhi.n	800a16c <_dtoa_r+0x28c>
 800a0d8:	2a05      	cmp	r2, #5
 800a0da:	bfc4      	itt	gt
 800a0dc:	3a04      	subgt	r2, #4
 800a0de:	9206      	strgt	r2, [sp, #24]
 800a0e0:	9a06      	ldr	r2, [sp, #24]
 800a0e2:	f1a2 0202 	sub.w	r2, r2, #2
 800a0e6:	bfcc      	ite	gt
 800a0e8:	2400      	movgt	r4, #0
 800a0ea:	2401      	movle	r4, #1
 800a0ec:	2a03      	cmp	r2, #3
 800a0ee:	d848      	bhi.n	800a182 <_dtoa_r+0x2a2>
 800a0f0:	e8df f002 	tbb	[pc, r2]
 800a0f4:	3a2c2e0b 	.word	0x3a2c2e0b
 800a0f8:	9b04      	ldr	r3, [sp, #16]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	eba3 030b 	sub.w	r3, r3, fp
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	9209      	str	r2, [sp, #36]	; 0x24
 800a104:	f1cb 0300 	rsb	r3, fp, #0
 800a108:	e7e3      	b.n	800a0d2 <_dtoa_r+0x1f2>
 800a10a:	2200      	movs	r2, #0
 800a10c:	9207      	str	r2, [sp, #28]
 800a10e:	9a08      	ldr	r2, [sp, #32]
 800a110:	2a00      	cmp	r2, #0
 800a112:	dc39      	bgt.n	800a188 <_dtoa_r+0x2a8>
 800a114:	f04f 0a01 	mov.w	sl, #1
 800a118:	46d1      	mov	r9, sl
 800a11a:	4652      	mov	r2, sl
 800a11c:	f8cd a020 	str.w	sl, [sp, #32]
 800a120:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a122:	2100      	movs	r1, #0
 800a124:	6079      	str	r1, [r7, #4]
 800a126:	2004      	movs	r0, #4
 800a128:	f100 0c14 	add.w	ip, r0, #20
 800a12c:	4594      	cmp	ip, r2
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	d92f      	bls.n	800a192 <_dtoa_r+0x2b2>
 800a132:	4630      	mov	r0, r6
 800a134:	930d      	str	r3, [sp, #52]	; 0x34
 800a136:	f000 fc5b 	bl	800a9f0 <_Balloc>
 800a13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a13c:	9001      	str	r0, [sp, #4]
 800a13e:	4602      	mov	r2, r0
 800a140:	2800      	cmp	r0, #0
 800a142:	d149      	bne.n	800a1d8 <_dtoa_r+0x2f8>
 800a144:	4b23      	ldr	r3, [pc, #140]	; (800a1d4 <_dtoa_r+0x2f4>)
 800a146:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a14a:	e6e1      	b.n	8009f10 <_dtoa_r+0x30>
 800a14c:	2201      	movs	r2, #1
 800a14e:	e7dd      	b.n	800a10c <_dtoa_r+0x22c>
 800a150:	2200      	movs	r2, #0
 800a152:	9207      	str	r2, [sp, #28]
 800a154:	9a08      	ldr	r2, [sp, #32]
 800a156:	eb0b 0a02 	add.w	sl, fp, r2
 800a15a:	f10a 0901 	add.w	r9, sl, #1
 800a15e:	464a      	mov	r2, r9
 800a160:	2a01      	cmp	r2, #1
 800a162:	bfb8      	it	lt
 800a164:	2201      	movlt	r2, #1
 800a166:	e7db      	b.n	800a120 <_dtoa_r+0x240>
 800a168:	2201      	movs	r2, #1
 800a16a:	e7f2      	b.n	800a152 <_dtoa_r+0x272>
 800a16c:	2401      	movs	r4, #1
 800a16e:	2200      	movs	r2, #0
 800a170:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a174:	f04f 3aff 	mov.w	sl, #4294967295
 800a178:	2100      	movs	r1, #0
 800a17a:	46d1      	mov	r9, sl
 800a17c:	2212      	movs	r2, #18
 800a17e:	9108      	str	r1, [sp, #32]
 800a180:	e7ce      	b.n	800a120 <_dtoa_r+0x240>
 800a182:	2201      	movs	r2, #1
 800a184:	9207      	str	r2, [sp, #28]
 800a186:	e7f5      	b.n	800a174 <_dtoa_r+0x294>
 800a188:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a18c:	46d1      	mov	r9, sl
 800a18e:	4652      	mov	r2, sl
 800a190:	e7c6      	b.n	800a120 <_dtoa_r+0x240>
 800a192:	3101      	adds	r1, #1
 800a194:	6079      	str	r1, [r7, #4]
 800a196:	0040      	lsls	r0, r0, #1
 800a198:	e7c6      	b.n	800a128 <_dtoa_r+0x248>
 800a19a:	bf00      	nop
 800a19c:	f3af 8000 	nop.w
 800a1a0:	636f4361 	.word	0x636f4361
 800a1a4:	3fd287a7 	.word	0x3fd287a7
 800a1a8:	8b60c8b3 	.word	0x8b60c8b3
 800a1ac:	3fc68a28 	.word	0x3fc68a28
 800a1b0:	509f79fb 	.word	0x509f79fb
 800a1b4:	3fd34413 	.word	0x3fd34413
 800a1b8:	0800c2cd 	.word	0x0800c2cd
 800a1bc:	0800c2e4 	.word	0x0800c2e4
 800a1c0:	7ff00000 	.word	0x7ff00000
 800a1c4:	0800c2c9 	.word	0x0800c2c9
 800a1c8:	0800c2c0 	.word	0x0800c2c0
 800a1cc:	0800c29d 	.word	0x0800c29d
 800a1d0:	0800c3d8 	.word	0x0800c3d8
 800a1d4:	0800c33f 	.word	0x0800c33f
 800a1d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a1da:	9901      	ldr	r1, [sp, #4]
 800a1dc:	6011      	str	r1, [r2, #0]
 800a1de:	f1b9 0f0e 	cmp.w	r9, #14
 800a1e2:	d86c      	bhi.n	800a2be <_dtoa_r+0x3de>
 800a1e4:	2c00      	cmp	r4, #0
 800a1e6:	d06a      	beq.n	800a2be <_dtoa_r+0x3de>
 800a1e8:	f1bb 0f00 	cmp.w	fp, #0
 800a1ec:	f340 80a0 	ble.w	800a330 <_dtoa_r+0x450>
 800a1f0:	49c1      	ldr	r1, [pc, #772]	; (800a4f8 <_dtoa_r+0x618>)
 800a1f2:	f00b 020f 	and.w	r2, fp, #15
 800a1f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a1fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a1fe:	ed92 7b00 	vldr	d7, [r2]
 800a202:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a206:	f000 8087 	beq.w	800a318 <_dtoa_r+0x438>
 800a20a:	4abc      	ldr	r2, [pc, #752]	; (800a4fc <_dtoa_r+0x61c>)
 800a20c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a210:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a214:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a218:	f001 010f 	and.w	r1, r1, #15
 800a21c:	2203      	movs	r2, #3
 800a21e:	48b7      	ldr	r0, [pc, #732]	; (800a4fc <_dtoa_r+0x61c>)
 800a220:	2900      	cmp	r1, #0
 800a222:	d17b      	bne.n	800a31c <_dtoa_r+0x43c>
 800a224:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a228:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a22c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a230:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a232:	2900      	cmp	r1, #0
 800a234:	f000 80a2 	beq.w	800a37c <_dtoa_r+0x49c>
 800a238:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a23c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a240:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a248:	f140 8098 	bpl.w	800a37c <_dtoa_r+0x49c>
 800a24c:	f1b9 0f00 	cmp.w	r9, #0
 800a250:	f000 8094 	beq.w	800a37c <_dtoa_r+0x49c>
 800a254:	f1ba 0f00 	cmp.w	sl, #0
 800a258:	dd2f      	ble.n	800a2ba <_dtoa_r+0x3da>
 800a25a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a25e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a262:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a266:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a26a:	3201      	adds	r2, #1
 800a26c:	4650      	mov	r0, sl
 800a26e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a272:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a276:	ee07 2a90 	vmov	s15, r2
 800a27a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a27e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a282:	ee15 4a90 	vmov	r4, s11
 800a286:	ec52 1b15 	vmov	r1, r2, d5
 800a28a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a28e:	2800      	cmp	r0, #0
 800a290:	d177      	bne.n	800a382 <_dtoa_r+0x4a2>
 800a292:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a296:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a29a:	ec42 1b17 	vmov	d7, r1, r2
 800a29e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a6:	f300 8263 	bgt.w	800a770 <_dtoa_r+0x890>
 800a2aa:	eeb1 7b47 	vneg.f64	d7, d7
 800a2ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2b6:	f100 8258 	bmi.w	800a76a <_dtoa_r+0x88a>
 800a2ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a2be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2c0:	2a00      	cmp	r2, #0
 800a2c2:	f2c0 811d 	blt.w	800a500 <_dtoa_r+0x620>
 800a2c6:	f1bb 0f0e 	cmp.w	fp, #14
 800a2ca:	f300 8119 	bgt.w	800a500 <_dtoa_r+0x620>
 800a2ce:	4b8a      	ldr	r3, [pc, #552]	; (800a4f8 <_dtoa_r+0x618>)
 800a2d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a2d4:	ed93 6b00 	vldr	d6, [r3]
 800a2d8:	9b08      	ldr	r3, [sp, #32]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f280 80b7 	bge.w	800a44e <_dtoa_r+0x56e>
 800a2e0:	f1b9 0f00 	cmp.w	r9, #0
 800a2e4:	f300 80b3 	bgt.w	800a44e <_dtoa_r+0x56e>
 800a2e8:	f040 823f 	bne.w	800a76a <_dtoa_r+0x88a>
 800a2ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a2f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a2f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a300:	464c      	mov	r4, r9
 800a302:	464f      	mov	r7, r9
 800a304:	f280 8215 	bge.w	800a732 <_dtoa_r+0x852>
 800a308:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a30c:	2331      	movs	r3, #49	; 0x31
 800a30e:	f808 3b01 	strb.w	r3, [r8], #1
 800a312:	f10b 0b01 	add.w	fp, fp, #1
 800a316:	e211      	b.n	800a73c <_dtoa_r+0x85c>
 800a318:	2202      	movs	r2, #2
 800a31a:	e780      	b.n	800a21e <_dtoa_r+0x33e>
 800a31c:	07cc      	lsls	r4, r1, #31
 800a31e:	d504      	bpl.n	800a32a <_dtoa_r+0x44a>
 800a320:	ed90 6b00 	vldr	d6, [r0]
 800a324:	3201      	adds	r2, #1
 800a326:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a32a:	1049      	asrs	r1, r1, #1
 800a32c:	3008      	adds	r0, #8
 800a32e:	e777      	b.n	800a220 <_dtoa_r+0x340>
 800a330:	d022      	beq.n	800a378 <_dtoa_r+0x498>
 800a332:	f1cb 0100 	rsb	r1, fp, #0
 800a336:	4a70      	ldr	r2, [pc, #448]	; (800a4f8 <_dtoa_r+0x618>)
 800a338:	f001 000f 	and.w	r0, r1, #15
 800a33c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a340:	ed92 7b00 	vldr	d7, [r2]
 800a344:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a348:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a34c:	486b      	ldr	r0, [pc, #428]	; (800a4fc <_dtoa_r+0x61c>)
 800a34e:	1109      	asrs	r1, r1, #4
 800a350:	2400      	movs	r4, #0
 800a352:	2202      	movs	r2, #2
 800a354:	b929      	cbnz	r1, 800a362 <_dtoa_r+0x482>
 800a356:	2c00      	cmp	r4, #0
 800a358:	f43f af6a 	beq.w	800a230 <_dtoa_r+0x350>
 800a35c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a360:	e766      	b.n	800a230 <_dtoa_r+0x350>
 800a362:	07cf      	lsls	r7, r1, #31
 800a364:	d505      	bpl.n	800a372 <_dtoa_r+0x492>
 800a366:	ed90 6b00 	vldr	d6, [r0]
 800a36a:	3201      	adds	r2, #1
 800a36c:	2401      	movs	r4, #1
 800a36e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a372:	1049      	asrs	r1, r1, #1
 800a374:	3008      	adds	r0, #8
 800a376:	e7ed      	b.n	800a354 <_dtoa_r+0x474>
 800a378:	2202      	movs	r2, #2
 800a37a:	e759      	b.n	800a230 <_dtoa_r+0x350>
 800a37c:	465f      	mov	r7, fp
 800a37e:	4648      	mov	r0, r9
 800a380:	e775      	b.n	800a26e <_dtoa_r+0x38e>
 800a382:	ec42 1b17 	vmov	d7, r1, r2
 800a386:	4a5c      	ldr	r2, [pc, #368]	; (800a4f8 <_dtoa_r+0x618>)
 800a388:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a38c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a390:	9a01      	ldr	r2, [sp, #4]
 800a392:	1814      	adds	r4, r2, r0
 800a394:	9a07      	ldr	r2, [sp, #28]
 800a396:	b352      	cbz	r2, 800a3ee <_dtoa_r+0x50e>
 800a398:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a39c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a3a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a3a4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a3a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a3ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a3b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a3b4:	ee14 2a90 	vmov	r2, s9
 800a3b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a3bc:	3230      	adds	r2, #48	; 0x30
 800a3be:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a3c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ca:	f808 2b01 	strb.w	r2, [r8], #1
 800a3ce:	d439      	bmi.n	800a444 <_dtoa_r+0x564>
 800a3d0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a3d4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3dc:	d472      	bmi.n	800a4c4 <_dtoa_r+0x5e4>
 800a3de:	45a0      	cmp	r8, r4
 800a3e0:	f43f af6b 	beq.w	800a2ba <_dtoa_r+0x3da>
 800a3e4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a3e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a3ec:	e7e0      	b.n	800a3b0 <_dtoa_r+0x4d0>
 800a3ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a3f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a3fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a400:	ee14 2a90 	vmov	r2, s9
 800a404:	3230      	adds	r2, #48	; 0x30
 800a406:	f808 2b01 	strb.w	r2, [r8], #1
 800a40a:	45a0      	cmp	r8, r4
 800a40c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a410:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a414:	d118      	bne.n	800a448 <_dtoa_r+0x568>
 800a416:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a41a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a41e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a426:	dc4d      	bgt.n	800a4c4 <_dtoa_r+0x5e4>
 800a428:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a42c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a434:	f57f af41 	bpl.w	800a2ba <_dtoa_r+0x3da>
 800a438:	4688      	mov	r8, r1
 800a43a:	3901      	subs	r1, #1
 800a43c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a440:	2b30      	cmp	r3, #48	; 0x30
 800a442:	d0f9      	beq.n	800a438 <_dtoa_r+0x558>
 800a444:	46bb      	mov	fp, r7
 800a446:	e02a      	b.n	800a49e <_dtoa_r+0x5be>
 800a448:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a44c:	e7d6      	b.n	800a3fc <_dtoa_r+0x51c>
 800a44e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a452:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a456:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a45a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a45e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a462:	ee15 3a10 	vmov	r3, s10
 800a466:	3330      	adds	r3, #48	; 0x30
 800a468:	f808 3b01 	strb.w	r3, [r8], #1
 800a46c:	9b01      	ldr	r3, [sp, #4]
 800a46e:	eba8 0303 	sub.w	r3, r8, r3
 800a472:	4599      	cmp	r9, r3
 800a474:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a478:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a47c:	d133      	bne.n	800a4e6 <_dtoa_r+0x606>
 800a47e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a482:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a48a:	dc1a      	bgt.n	800a4c2 <_dtoa_r+0x5e2>
 800a48c:	eeb4 7b46 	vcmp.f64	d7, d6
 800a490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a494:	d103      	bne.n	800a49e <_dtoa_r+0x5be>
 800a496:	ee15 3a10 	vmov	r3, s10
 800a49a:	07d9      	lsls	r1, r3, #31
 800a49c:	d411      	bmi.n	800a4c2 <_dtoa_r+0x5e2>
 800a49e:	4629      	mov	r1, r5
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f000 fae5 	bl	800aa70 <_Bfree>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4aa:	f888 3000 	strb.w	r3, [r8]
 800a4ae:	f10b 0301 	add.w	r3, fp, #1
 800a4b2:	6013      	str	r3, [r2, #0]
 800a4b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f43f ad61 	beq.w	8009f7e <_dtoa_r+0x9e>
 800a4bc:	f8c3 8000 	str.w	r8, [r3]
 800a4c0:	e55d      	b.n	8009f7e <_dtoa_r+0x9e>
 800a4c2:	465f      	mov	r7, fp
 800a4c4:	4643      	mov	r3, r8
 800a4c6:	4698      	mov	r8, r3
 800a4c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4cc:	2a39      	cmp	r2, #57	; 0x39
 800a4ce:	d106      	bne.n	800a4de <_dtoa_r+0x5fe>
 800a4d0:	9a01      	ldr	r2, [sp, #4]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d1f7      	bne.n	800a4c6 <_dtoa_r+0x5e6>
 800a4d6:	9901      	ldr	r1, [sp, #4]
 800a4d8:	2230      	movs	r2, #48	; 0x30
 800a4da:	3701      	adds	r7, #1
 800a4dc:	700a      	strb	r2, [r1, #0]
 800a4de:	781a      	ldrb	r2, [r3, #0]
 800a4e0:	3201      	adds	r2, #1
 800a4e2:	701a      	strb	r2, [r3, #0]
 800a4e4:	e7ae      	b.n	800a444 <_dtoa_r+0x564>
 800a4e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a4ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4f2:	d1b2      	bne.n	800a45a <_dtoa_r+0x57a>
 800a4f4:	e7d3      	b.n	800a49e <_dtoa_r+0x5be>
 800a4f6:	bf00      	nop
 800a4f8:	0800c3d8 	.word	0x0800c3d8
 800a4fc:	0800c3b0 	.word	0x0800c3b0
 800a500:	9907      	ldr	r1, [sp, #28]
 800a502:	2900      	cmp	r1, #0
 800a504:	f000 80d0 	beq.w	800a6a8 <_dtoa_r+0x7c8>
 800a508:	9906      	ldr	r1, [sp, #24]
 800a50a:	2901      	cmp	r1, #1
 800a50c:	f300 80b4 	bgt.w	800a678 <_dtoa_r+0x798>
 800a510:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a512:	2900      	cmp	r1, #0
 800a514:	f000 80ac 	beq.w	800a670 <_dtoa_r+0x790>
 800a518:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a51c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a520:	461c      	mov	r4, r3
 800a522:	930a      	str	r3, [sp, #40]	; 0x28
 800a524:	9b04      	ldr	r3, [sp, #16]
 800a526:	4413      	add	r3, r2
 800a528:	9304      	str	r3, [sp, #16]
 800a52a:	9b05      	ldr	r3, [sp, #20]
 800a52c:	2101      	movs	r1, #1
 800a52e:	4413      	add	r3, r2
 800a530:	4630      	mov	r0, r6
 800a532:	9305      	str	r3, [sp, #20]
 800a534:	f000 fb54 	bl	800abe0 <__i2b>
 800a538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a53a:	4607      	mov	r7, r0
 800a53c:	f1b8 0f00 	cmp.w	r8, #0
 800a540:	dd0d      	ble.n	800a55e <_dtoa_r+0x67e>
 800a542:	9a05      	ldr	r2, [sp, #20]
 800a544:	2a00      	cmp	r2, #0
 800a546:	dd0a      	ble.n	800a55e <_dtoa_r+0x67e>
 800a548:	4542      	cmp	r2, r8
 800a54a:	9904      	ldr	r1, [sp, #16]
 800a54c:	bfa8      	it	ge
 800a54e:	4642      	movge	r2, r8
 800a550:	1a89      	subs	r1, r1, r2
 800a552:	9104      	str	r1, [sp, #16]
 800a554:	9905      	ldr	r1, [sp, #20]
 800a556:	eba8 0802 	sub.w	r8, r8, r2
 800a55a:	1a8a      	subs	r2, r1, r2
 800a55c:	9205      	str	r2, [sp, #20]
 800a55e:	b303      	cbz	r3, 800a5a2 <_dtoa_r+0x6c2>
 800a560:	9a07      	ldr	r2, [sp, #28]
 800a562:	2a00      	cmp	r2, #0
 800a564:	f000 80a5 	beq.w	800a6b2 <_dtoa_r+0x7d2>
 800a568:	2c00      	cmp	r4, #0
 800a56a:	dd13      	ble.n	800a594 <_dtoa_r+0x6b4>
 800a56c:	4639      	mov	r1, r7
 800a56e:	4622      	mov	r2, r4
 800a570:	4630      	mov	r0, r6
 800a572:	930d      	str	r3, [sp, #52]	; 0x34
 800a574:	f000 fbf4 	bl	800ad60 <__pow5mult>
 800a578:	462a      	mov	r2, r5
 800a57a:	4601      	mov	r1, r0
 800a57c:	4607      	mov	r7, r0
 800a57e:	4630      	mov	r0, r6
 800a580:	f000 fb44 	bl	800ac0c <__multiply>
 800a584:	4629      	mov	r1, r5
 800a586:	900a      	str	r0, [sp, #40]	; 0x28
 800a588:	4630      	mov	r0, r6
 800a58a:	f000 fa71 	bl	800aa70 <_Bfree>
 800a58e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a592:	4615      	mov	r5, r2
 800a594:	1b1a      	subs	r2, r3, r4
 800a596:	d004      	beq.n	800a5a2 <_dtoa_r+0x6c2>
 800a598:	4629      	mov	r1, r5
 800a59a:	4630      	mov	r0, r6
 800a59c:	f000 fbe0 	bl	800ad60 <__pow5mult>
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f000 fb1b 	bl	800abe0 <__i2b>
 800a5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	f340 8081 	ble.w	800a6b6 <_dtoa_r+0x7d6>
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	4601      	mov	r1, r0
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f000 fbd1 	bl	800ad60 <__pow5mult>
 800a5be:	9b06      	ldr	r3, [sp, #24]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	dd7a      	ble.n	800a6bc <_dtoa_r+0x7dc>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	930a      	str	r3, [sp, #40]	; 0x28
 800a5ca:	6922      	ldr	r2, [r4, #16]
 800a5cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a5d0:	6910      	ldr	r0, [r2, #16]
 800a5d2:	f000 fab5 	bl	800ab40 <__hi0bits>
 800a5d6:	f1c0 0020 	rsb	r0, r0, #32
 800a5da:	9b05      	ldr	r3, [sp, #20]
 800a5dc:	4418      	add	r0, r3
 800a5de:	f010 001f 	ands.w	r0, r0, #31
 800a5e2:	f000 808c 	beq.w	800a6fe <_dtoa_r+0x81e>
 800a5e6:	f1c0 0220 	rsb	r2, r0, #32
 800a5ea:	2a04      	cmp	r2, #4
 800a5ec:	f340 8085 	ble.w	800a6fa <_dtoa_r+0x81a>
 800a5f0:	f1c0 001c 	rsb	r0, r0, #28
 800a5f4:	9b04      	ldr	r3, [sp, #16]
 800a5f6:	4403      	add	r3, r0
 800a5f8:	9304      	str	r3, [sp, #16]
 800a5fa:	9b05      	ldr	r3, [sp, #20]
 800a5fc:	4403      	add	r3, r0
 800a5fe:	4480      	add	r8, r0
 800a600:	9305      	str	r3, [sp, #20]
 800a602:	9b04      	ldr	r3, [sp, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	dd05      	ble.n	800a614 <_dtoa_r+0x734>
 800a608:	4629      	mov	r1, r5
 800a60a:	461a      	mov	r2, r3
 800a60c:	4630      	mov	r0, r6
 800a60e:	f000 fc01 	bl	800ae14 <__lshift>
 800a612:	4605      	mov	r5, r0
 800a614:	9b05      	ldr	r3, [sp, #20]
 800a616:	2b00      	cmp	r3, #0
 800a618:	dd05      	ble.n	800a626 <_dtoa_r+0x746>
 800a61a:	4621      	mov	r1, r4
 800a61c:	461a      	mov	r2, r3
 800a61e:	4630      	mov	r0, r6
 800a620:	f000 fbf8 	bl	800ae14 <__lshift>
 800a624:	4604      	mov	r4, r0
 800a626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d06a      	beq.n	800a702 <_dtoa_r+0x822>
 800a62c:	4621      	mov	r1, r4
 800a62e:	4628      	mov	r0, r5
 800a630:	f000 fc60 	bl	800aef4 <__mcmp>
 800a634:	2800      	cmp	r0, #0
 800a636:	da64      	bge.n	800a702 <_dtoa_r+0x822>
 800a638:	2300      	movs	r3, #0
 800a63a:	4629      	mov	r1, r5
 800a63c:	220a      	movs	r2, #10
 800a63e:	4630      	mov	r0, r6
 800a640:	f000 fa38 	bl	800aab4 <__multadd>
 800a644:	9b07      	ldr	r3, [sp, #28]
 800a646:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a64a:	4605      	mov	r5, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 8191 	beq.w	800a974 <_dtoa_r+0xa94>
 800a652:	4639      	mov	r1, r7
 800a654:	2300      	movs	r3, #0
 800a656:	220a      	movs	r2, #10
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 fa2b 	bl	800aab4 <__multadd>
 800a65e:	f1ba 0f00 	cmp.w	sl, #0
 800a662:	4607      	mov	r7, r0
 800a664:	f300 808d 	bgt.w	800a782 <_dtoa_r+0x8a2>
 800a668:	9b06      	ldr	r3, [sp, #24]
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	dc50      	bgt.n	800a710 <_dtoa_r+0x830>
 800a66e:	e088      	b.n	800a782 <_dtoa_r+0x8a2>
 800a670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a672:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a676:	e751      	b.n	800a51c <_dtoa_r+0x63c>
 800a678:	f109 34ff 	add.w	r4, r9, #4294967295
 800a67c:	42a3      	cmp	r3, r4
 800a67e:	bfbf      	itttt	lt
 800a680:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a682:	1ae3      	sublt	r3, r4, r3
 800a684:	18d2      	addlt	r2, r2, r3
 800a686:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a688:	bfb6      	itet	lt
 800a68a:	4623      	movlt	r3, r4
 800a68c:	1b1c      	subge	r4, r3, r4
 800a68e:	2400      	movlt	r4, #0
 800a690:	f1b9 0f00 	cmp.w	r9, #0
 800a694:	bfb5      	itete	lt
 800a696:	9a04      	ldrlt	r2, [sp, #16]
 800a698:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a69c:	eba2 0809 	sublt.w	r8, r2, r9
 800a6a0:	464a      	movge	r2, r9
 800a6a2:	bfb8      	it	lt
 800a6a4:	2200      	movlt	r2, #0
 800a6a6:	e73c      	b.n	800a522 <_dtoa_r+0x642>
 800a6a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a6ac:	9f07      	ldr	r7, [sp, #28]
 800a6ae:	461c      	mov	r4, r3
 800a6b0:	e744      	b.n	800a53c <_dtoa_r+0x65c>
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	e770      	b.n	800a598 <_dtoa_r+0x6b8>
 800a6b6:	9b06      	ldr	r3, [sp, #24]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	dc18      	bgt.n	800a6ee <_dtoa_r+0x80e>
 800a6bc:	9b02      	ldr	r3, [sp, #8]
 800a6be:	b9b3      	cbnz	r3, 800a6ee <_dtoa_r+0x80e>
 800a6c0:	9b03      	ldr	r3, [sp, #12]
 800a6c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a6c6:	b9a2      	cbnz	r2, 800a6f2 <_dtoa_r+0x812>
 800a6c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a6cc:	0d12      	lsrs	r2, r2, #20
 800a6ce:	0512      	lsls	r2, r2, #20
 800a6d0:	b18a      	cbz	r2, 800a6f6 <_dtoa_r+0x816>
 800a6d2:	9b04      	ldr	r3, [sp, #16]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	9304      	str	r3, [sp, #16]
 800a6d8:	9b05      	ldr	r3, [sp, #20]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	9305      	str	r3, [sp, #20]
 800a6de:	2301      	movs	r3, #1
 800a6e0:	930a      	str	r3, [sp, #40]	; 0x28
 800a6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f47f af70 	bne.w	800a5ca <_dtoa_r+0x6ea>
 800a6ea:	2001      	movs	r0, #1
 800a6ec:	e775      	b.n	800a5da <_dtoa_r+0x6fa>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	e7f6      	b.n	800a6e0 <_dtoa_r+0x800>
 800a6f2:	9b02      	ldr	r3, [sp, #8]
 800a6f4:	e7f4      	b.n	800a6e0 <_dtoa_r+0x800>
 800a6f6:	920a      	str	r2, [sp, #40]	; 0x28
 800a6f8:	e7f3      	b.n	800a6e2 <_dtoa_r+0x802>
 800a6fa:	d082      	beq.n	800a602 <_dtoa_r+0x722>
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	301c      	adds	r0, #28
 800a700:	e778      	b.n	800a5f4 <_dtoa_r+0x714>
 800a702:	f1b9 0f00 	cmp.w	r9, #0
 800a706:	dc37      	bgt.n	800a778 <_dtoa_r+0x898>
 800a708:	9b06      	ldr	r3, [sp, #24]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	dd34      	ble.n	800a778 <_dtoa_r+0x898>
 800a70e:	46ca      	mov	sl, r9
 800a710:	f1ba 0f00 	cmp.w	sl, #0
 800a714:	d10d      	bne.n	800a732 <_dtoa_r+0x852>
 800a716:	4621      	mov	r1, r4
 800a718:	4653      	mov	r3, sl
 800a71a:	2205      	movs	r2, #5
 800a71c:	4630      	mov	r0, r6
 800a71e:	f000 f9c9 	bl	800aab4 <__multadd>
 800a722:	4601      	mov	r1, r0
 800a724:	4604      	mov	r4, r0
 800a726:	4628      	mov	r0, r5
 800a728:	f000 fbe4 	bl	800aef4 <__mcmp>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	f73f adeb 	bgt.w	800a308 <_dtoa_r+0x428>
 800a732:	9b08      	ldr	r3, [sp, #32]
 800a734:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a738:	ea6f 0b03 	mvn.w	fp, r3
 800a73c:	f04f 0900 	mov.w	r9, #0
 800a740:	4621      	mov	r1, r4
 800a742:	4630      	mov	r0, r6
 800a744:	f000 f994 	bl	800aa70 <_Bfree>
 800a748:	2f00      	cmp	r7, #0
 800a74a:	f43f aea8 	beq.w	800a49e <_dtoa_r+0x5be>
 800a74e:	f1b9 0f00 	cmp.w	r9, #0
 800a752:	d005      	beq.n	800a760 <_dtoa_r+0x880>
 800a754:	45b9      	cmp	r9, r7
 800a756:	d003      	beq.n	800a760 <_dtoa_r+0x880>
 800a758:	4649      	mov	r1, r9
 800a75a:	4630      	mov	r0, r6
 800a75c:	f000 f988 	bl	800aa70 <_Bfree>
 800a760:	4639      	mov	r1, r7
 800a762:	4630      	mov	r0, r6
 800a764:	f000 f984 	bl	800aa70 <_Bfree>
 800a768:	e699      	b.n	800a49e <_dtoa_r+0x5be>
 800a76a:	2400      	movs	r4, #0
 800a76c:	4627      	mov	r7, r4
 800a76e:	e7e0      	b.n	800a732 <_dtoa_r+0x852>
 800a770:	46bb      	mov	fp, r7
 800a772:	4604      	mov	r4, r0
 800a774:	4607      	mov	r7, r0
 800a776:	e5c7      	b.n	800a308 <_dtoa_r+0x428>
 800a778:	9b07      	ldr	r3, [sp, #28]
 800a77a:	46ca      	mov	sl, r9
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 8100 	beq.w	800a982 <_dtoa_r+0xaa2>
 800a782:	f1b8 0f00 	cmp.w	r8, #0
 800a786:	dd05      	ble.n	800a794 <_dtoa_r+0x8b4>
 800a788:	4639      	mov	r1, r7
 800a78a:	4642      	mov	r2, r8
 800a78c:	4630      	mov	r0, r6
 800a78e:	f000 fb41 	bl	800ae14 <__lshift>
 800a792:	4607      	mov	r7, r0
 800a794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a796:	2b00      	cmp	r3, #0
 800a798:	d05d      	beq.n	800a856 <_dtoa_r+0x976>
 800a79a:	6879      	ldr	r1, [r7, #4]
 800a79c:	4630      	mov	r0, r6
 800a79e:	f000 f927 	bl	800a9f0 <_Balloc>
 800a7a2:	4680      	mov	r8, r0
 800a7a4:	b928      	cbnz	r0, 800a7b2 <_dtoa_r+0x8d2>
 800a7a6:	4b82      	ldr	r3, [pc, #520]	; (800a9b0 <_dtoa_r+0xad0>)
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a7ae:	f7ff bbaf 	b.w	8009f10 <_dtoa_r+0x30>
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	3202      	adds	r2, #2
 800a7b6:	0092      	lsls	r2, r2, #2
 800a7b8:	f107 010c 	add.w	r1, r7, #12
 800a7bc:	300c      	adds	r0, #12
 800a7be:	f000 f909 	bl	800a9d4 <memcpy>
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	4641      	mov	r1, r8
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f000 fb24 	bl	800ae14 <__lshift>
 800a7cc:	9b01      	ldr	r3, [sp, #4]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	9304      	str	r3, [sp, #16]
 800a7d2:	9b01      	ldr	r3, [sp, #4]
 800a7d4:	4453      	add	r3, sl
 800a7d6:	9308      	str	r3, [sp, #32]
 800a7d8:	9b02      	ldr	r3, [sp, #8]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	46b9      	mov	r9, r7
 800a7e0:	9307      	str	r3, [sp, #28]
 800a7e2:	4607      	mov	r7, r0
 800a7e4:	9b04      	ldr	r3, [sp, #16]
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	9302      	str	r3, [sp, #8]
 800a7ee:	f7ff fae9 	bl	8009dc4 <quorem>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	3330      	adds	r3, #48	; 0x30
 800a7f6:	9005      	str	r0, [sp, #20]
 800a7f8:	4649      	mov	r1, r9
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a7fe:	f000 fb79 	bl	800aef4 <__mcmp>
 800a802:	463a      	mov	r2, r7
 800a804:	4682      	mov	sl, r0
 800a806:	4621      	mov	r1, r4
 800a808:	4630      	mov	r0, r6
 800a80a:	f000 fb8f 	bl	800af2c <__mdiff>
 800a80e:	68c2      	ldr	r2, [r0, #12]
 800a810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a812:	4680      	mov	r8, r0
 800a814:	bb0a      	cbnz	r2, 800a85a <_dtoa_r+0x97a>
 800a816:	4601      	mov	r1, r0
 800a818:	4628      	mov	r0, r5
 800a81a:	f000 fb6b 	bl	800aef4 <__mcmp>
 800a81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a820:	4602      	mov	r2, r0
 800a822:	4641      	mov	r1, r8
 800a824:	4630      	mov	r0, r6
 800a826:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a82a:	f000 f921 	bl	800aa70 <_Bfree>
 800a82e:	9b06      	ldr	r3, [sp, #24]
 800a830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a832:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a836:	ea43 0102 	orr.w	r1, r3, r2
 800a83a:	9b07      	ldr	r3, [sp, #28]
 800a83c:	430b      	orrs	r3, r1
 800a83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a840:	d10d      	bne.n	800a85e <_dtoa_r+0x97e>
 800a842:	2b39      	cmp	r3, #57	; 0x39
 800a844:	d029      	beq.n	800a89a <_dtoa_r+0x9ba>
 800a846:	f1ba 0f00 	cmp.w	sl, #0
 800a84a:	dd01      	ble.n	800a850 <_dtoa_r+0x970>
 800a84c:	9b05      	ldr	r3, [sp, #20]
 800a84e:	3331      	adds	r3, #49	; 0x31
 800a850:	9a02      	ldr	r2, [sp, #8]
 800a852:	7013      	strb	r3, [r2, #0]
 800a854:	e774      	b.n	800a740 <_dtoa_r+0x860>
 800a856:	4638      	mov	r0, r7
 800a858:	e7b8      	b.n	800a7cc <_dtoa_r+0x8ec>
 800a85a:	2201      	movs	r2, #1
 800a85c:	e7e1      	b.n	800a822 <_dtoa_r+0x942>
 800a85e:	f1ba 0f00 	cmp.w	sl, #0
 800a862:	db06      	blt.n	800a872 <_dtoa_r+0x992>
 800a864:	9906      	ldr	r1, [sp, #24]
 800a866:	ea41 0a0a 	orr.w	sl, r1, sl
 800a86a:	9907      	ldr	r1, [sp, #28]
 800a86c:	ea5a 0101 	orrs.w	r1, sl, r1
 800a870:	d120      	bne.n	800a8b4 <_dtoa_r+0x9d4>
 800a872:	2a00      	cmp	r2, #0
 800a874:	ddec      	ble.n	800a850 <_dtoa_r+0x970>
 800a876:	4629      	mov	r1, r5
 800a878:	2201      	movs	r2, #1
 800a87a:	4630      	mov	r0, r6
 800a87c:	9304      	str	r3, [sp, #16]
 800a87e:	f000 fac9 	bl	800ae14 <__lshift>
 800a882:	4621      	mov	r1, r4
 800a884:	4605      	mov	r5, r0
 800a886:	f000 fb35 	bl	800aef4 <__mcmp>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	9b04      	ldr	r3, [sp, #16]
 800a88e:	dc02      	bgt.n	800a896 <_dtoa_r+0x9b6>
 800a890:	d1de      	bne.n	800a850 <_dtoa_r+0x970>
 800a892:	07da      	lsls	r2, r3, #31
 800a894:	d5dc      	bpl.n	800a850 <_dtoa_r+0x970>
 800a896:	2b39      	cmp	r3, #57	; 0x39
 800a898:	d1d8      	bne.n	800a84c <_dtoa_r+0x96c>
 800a89a:	9a02      	ldr	r2, [sp, #8]
 800a89c:	2339      	movs	r3, #57	; 0x39
 800a89e:	7013      	strb	r3, [r2, #0]
 800a8a0:	4643      	mov	r3, r8
 800a8a2:	4698      	mov	r8, r3
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a8aa:	2a39      	cmp	r2, #57	; 0x39
 800a8ac:	d051      	beq.n	800a952 <_dtoa_r+0xa72>
 800a8ae:	3201      	adds	r2, #1
 800a8b0:	701a      	strb	r2, [r3, #0]
 800a8b2:	e745      	b.n	800a740 <_dtoa_r+0x860>
 800a8b4:	2a00      	cmp	r2, #0
 800a8b6:	dd03      	ble.n	800a8c0 <_dtoa_r+0x9e0>
 800a8b8:	2b39      	cmp	r3, #57	; 0x39
 800a8ba:	d0ee      	beq.n	800a89a <_dtoa_r+0x9ba>
 800a8bc:	3301      	adds	r3, #1
 800a8be:	e7c7      	b.n	800a850 <_dtoa_r+0x970>
 800a8c0:	9a04      	ldr	r2, [sp, #16]
 800a8c2:	9908      	ldr	r1, [sp, #32]
 800a8c4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a8c8:	428a      	cmp	r2, r1
 800a8ca:	d02b      	beq.n	800a924 <_dtoa_r+0xa44>
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	220a      	movs	r2, #10
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f000 f8ee 	bl	800aab4 <__multadd>
 800a8d8:	45b9      	cmp	r9, r7
 800a8da:	4605      	mov	r5, r0
 800a8dc:	f04f 0300 	mov.w	r3, #0
 800a8e0:	f04f 020a 	mov.w	r2, #10
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	d107      	bne.n	800a8fa <_dtoa_r+0xa1a>
 800a8ea:	f000 f8e3 	bl	800aab4 <__multadd>
 800a8ee:	4681      	mov	r9, r0
 800a8f0:	4607      	mov	r7, r0
 800a8f2:	9b04      	ldr	r3, [sp, #16]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	9304      	str	r3, [sp, #16]
 800a8f8:	e774      	b.n	800a7e4 <_dtoa_r+0x904>
 800a8fa:	f000 f8db 	bl	800aab4 <__multadd>
 800a8fe:	4639      	mov	r1, r7
 800a900:	4681      	mov	r9, r0
 800a902:	2300      	movs	r3, #0
 800a904:	220a      	movs	r2, #10
 800a906:	4630      	mov	r0, r6
 800a908:	f000 f8d4 	bl	800aab4 <__multadd>
 800a90c:	4607      	mov	r7, r0
 800a90e:	e7f0      	b.n	800a8f2 <_dtoa_r+0xa12>
 800a910:	f1ba 0f00 	cmp.w	sl, #0
 800a914:	9a01      	ldr	r2, [sp, #4]
 800a916:	bfcc      	ite	gt
 800a918:	46d0      	movgt	r8, sl
 800a91a:	f04f 0801 	movle.w	r8, #1
 800a91e:	4490      	add	r8, r2
 800a920:	f04f 0900 	mov.w	r9, #0
 800a924:	4629      	mov	r1, r5
 800a926:	2201      	movs	r2, #1
 800a928:	4630      	mov	r0, r6
 800a92a:	9302      	str	r3, [sp, #8]
 800a92c:	f000 fa72 	bl	800ae14 <__lshift>
 800a930:	4621      	mov	r1, r4
 800a932:	4605      	mov	r5, r0
 800a934:	f000 fade 	bl	800aef4 <__mcmp>
 800a938:	2800      	cmp	r0, #0
 800a93a:	dcb1      	bgt.n	800a8a0 <_dtoa_r+0x9c0>
 800a93c:	d102      	bne.n	800a944 <_dtoa_r+0xa64>
 800a93e:	9b02      	ldr	r3, [sp, #8]
 800a940:	07db      	lsls	r3, r3, #31
 800a942:	d4ad      	bmi.n	800a8a0 <_dtoa_r+0x9c0>
 800a944:	4643      	mov	r3, r8
 800a946:	4698      	mov	r8, r3
 800a948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a94c:	2a30      	cmp	r2, #48	; 0x30
 800a94e:	d0fa      	beq.n	800a946 <_dtoa_r+0xa66>
 800a950:	e6f6      	b.n	800a740 <_dtoa_r+0x860>
 800a952:	9a01      	ldr	r2, [sp, #4]
 800a954:	429a      	cmp	r2, r3
 800a956:	d1a4      	bne.n	800a8a2 <_dtoa_r+0x9c2>
 800a958:	f10b 0b01 	add.w	fp, fp, #1
 800a95c:	2331      	movs	r3, #49	; 0x31
 800a95e:	e778      	b.n	800a852 <_dtoa_r+0x972>
 800a960:	4b14      	ldr	r3, [pc, #80]	; (800a9b4 <_dtoa_r+0xad4>)
 800a962:	f7ff bb27 	b.w	8009fb4 <_dtoa_r+0xd4>
 800a966:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f47f ab03 	bne.w	8009f74 <_dtoa_r+0x94>
 800a96e:	4b12      	ldr	r3, [pc, #72]	; (800a9b8 <_dtoa_r+0xad8>)
 800a970:	f7ff bb20 	b.w	8009fb4 <_dtoa_r+0xd4>
 800a974:	f1ba 0f00 	cmp.w	sl, #0
 800a978:	dc03      	bgt.n	800a982 <_dtoa_r+0xaa2>
 800a97a:	9b06      	ldr	r3, [sp, #24]
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	f73f aec7 	bgt.w	800a710 <_dtoa_r+0x830>
 800a982:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a986:	4621      	mov	r1, r4
 800a988:	4628      	mov	r0, r5
 800a98a:	f7ff fa1b 	bl	8009dc4 <quorem>
 800a98e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a992:	f808 3b01 	strb.w	r3, [r8], #1
 800a996:	9a01      	ldr	r2, [sp, #4]
 800a998:	eba8 0202 	sub.w	r2, r8, r2
 800a99c:	4592      	cmp	sl, r2
 800a99e:	ddb7      	ble.n	800a910 <_dtoa_r+0xa30>
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	220a      	movs	r2, #10
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f000 f884 	bl	800aab4 <__multadd>
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	e7ea      	b.n	800a986 <_dtoa_r+0xaa6>
 800a9b0:	0800c33f 	.word	0x0800c33f
 800a9b4:	0800c29c 	.word	0x0800c29c
 800a9b8:	0800c2c0 	.word	0x0800c2c0

0800a9bc <_localeconv_r>:
 800a9bc:	4800      	ldr	r0, [pc, #0]	; (800a9c0 <_localeconv_r+0x4>)
 800a9be:	4770      	bx	lr
 800a9c0:	24000164 	.word	0x24000164

0800a9c4 <malloc>:
 800a9c4:	4b02      	ldr	r3, [pc, #8]	; (800a9d0 <malloc+0xc>)
 800a9c6:	4601      	mov	r1, r0
 800a9c8:	6818      	ldr	r0, [r3, #0]
 800a9ca:	f000 bc17 	b.w	800b1fc <_malloc_r>
 800a9ce:	bf00      	nop
 800a9d0:	24000010 	.word	0x24000010

0800a9d4 <memcpy>:
 800a9d4:	440a      	add	r2, r1
 800a9d6:	4291      	cmp	r1, r2
 800a9d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9dc:	d100      	bne.n	800a9e0 <memcpy+0xc>
 800a9de:	4770      	bx	lr
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9ea:	4291      	cmp	r1, r2
 800a9ec:	d1f9      	bne.n	800a9e2 <memcpy+0xe>
 800a9ee:	bd10      	pop	{r4, pc}

0800a9f0 <_Balloc>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	b976      	cbnz	r6, 800aa18 <_Balloc+0x28>
 800a9fa:	2010      	movs	r0, #16
 800a9fc:	f7ff ffe2 	bl	800a9c4 <malloc>
 800aa00:	4602      	mov	r2, r0
 800aa02:	6260      	str	r0, [r4, #36]	; 0x24
 800aa04:	b920      	cbnz	r0, 800aa10 <_Balloc+0x20>
 800aa06:	4b18      	ldr	r3, [pc, #96]	; (800aa68 <_Balloc+0x78>)
 800aa08:	4818      	ldr	r0, [pc, #96]	; (800aa6c <_Balloc+0x7c>)
 800aa0a:	2166      	movs	r1, #102	; 0x66
 800aa0c:	f000 fdd6 	bl	800b5bc <__assert_func>
 800aa10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa14:	6006      	str	r6, [r0, #0]
 800aa16:	60c6      	str	r6, [r0, #12]
 800aa18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa1a:	68f3      	ldr	r3, [r6, #12]
 800aa1c:	b183      	cbz	r3, 800aa40 <_Balloc+0x50>
 800aa1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa26:	b9b8      	cbnz	r0, 800aa58 <_Balloc+0x68>
 800aa28:	2101      	movs	r1, #1
 800aa2a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa2e:	1d72      	adds	r2, r6, #5
 800aa30:	0092      	lsls	r2, r2, #2
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 fb60 	bl	800b0f8 <_calloc_r>
 800aa38:	b160      	cbz	r0, 800aa54 <_Balloc+0x64>
 800aa3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa3e:	e00e      	b.n	800aa5e <_Balloc+0x6e>
 800aa40:	2221      	movs	r2, #33	; 0x21
 800aa42:	2104      	movs	r1, #4
 800aa44:	4620      	mov	r0, r4
 800aa46:	f000 fb57 	bl	800b0f8 <_calloc_r>
 800aa4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa4c:	60f0      	str	r0, [r6, #12]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1e4      	bne.n	800aa1e <_Balloc+0x2e>
 800aa54:	2000      	movs	r0, #0
 800aa56:	bd70      	pop	{r4, r5, r6, pc}
 800aa58:	6802      	ldr	r2, [r0, #0]
 800aa5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa64:	e7f7      	b.n	800aa56 <_Balloc+0x66>
 800aa66:	bf00      	nop
 800aa68:	0800c2cd 	.word	0x0800c2cd
 800aa6c:	0800c350 	.word	0x0800c350

0800aa70 <_Bfree>:
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa74:	4605      	mov	r5, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	b976      	cbnz	r6, 800aa98 <_Bfree+0x28>
 800aa7a:	2010      	movs	r0, #16
 800aa7c:	f7ff ffa2 	bl	800a9c4 <malloc>
 800aa80:	4602      	mov	r2, r0
 800aa82:	6268      	str	r0, [r5, #36]	; 0x24
 800aa84:	b920      	cbnz	r0, 800aa90 <_Bfree+0x20>
 800aa86:	4b09      	ldr	r3, [pc, #36]	; (800aaac <_Bfree+0x3c>)
 800aa88:	4809      	ldr	r0, [pc, #36]	; (800aab0 <_Bfree+0x40>)
 800aa8a:	218a      	movs	r1, #138	; 0x8a
 800aa8c:	f000 fd96 	bl	800b5bc <__assert_func>
 800aa90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa94:	6006      	str	r6, [r0, #0]
 800aa96:	60c6      	str	r6, [r0, #12]
 800aa98:	b13c      	cbz	r4, 800aaaa <_Bfree+0x3a>
 800aa9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa9c:	6862      	ldr	r2, [r4, #4]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaa4:	6021      	str	r1, [r4, #0]
 800aaa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aaaa:	bd70      	pop	{r4, r5, r6, pc}
 800aaac:	0800c2cd 	.word	0x0800c2cd
 800aab0:	0800c350 	.word	0x0800c350

0800aab4 <__multadd>:
 800aab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab8:	690d      	ldr	r5, [r1, #16]
 800aaba:	4607      	mov	r7, r0
 800aabc:	460c      	mov	r4, r1
 800aabe:	461e      	mov	r6, r3
 800aac0:	f101 0c14 	add.w	ip, r1, #20
 800aac4:	2000      	movs	r0, #0
 800aac6:	f8dc 3000 	ldr.w	r3, [ip]
 800aaca:	b299      	uxth	r1, r3
 800aacc:	fb02 6101 	mla	r1, r2, r1, r6
 800aad0:	0c1e      	lsrs	r6, r3, #16
 800aad2:	0c0b      	lsrs	r3, r1, #16
 800aad4:	fb02 3306 	mla	r3, r2, r6, r3
 800aad8:	b289      	uxth	r1, r1
 800aada:	3001      	adds	r0, #1
 800aadc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aae0:	4285      	cmp	r5, r0
 800aae2:	f84c 1b04 	str.w	r1, [ip], #4
 800aae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aaea:	dcec      	bgt.n	800aac6 <__multadd+0x12>
 800aaec:	b30e      	cbz	r6, 800ab32 <__multadd+0x7e>
 800aaee:	68a3      	ldr	r3, [r4, #8]
 800aaf0:	42ab      	cmp	r3, r5
 800aaf2:	dc19      	bgt.n	800ab28 <__multadd+0x74>
 800aaf4:	6861      	ldr	r1, [r4, #4]
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	3101      	adds	r1, #1
 800aafa:	f7ff ff79 	bl	800a9f0 <_Balloc>
 800aafe:	4680      	mov	r8, r0
 800ab00:	b928      	cbnz	r0, 800ab0e <__multadd+0x5a>
 800ab02:	4602      	mov	r2, r0
 800ab04:	4b0c      	ldr	r3, [pc, #48]	; (800ab38 <__multadd+0x84>)
 800ab06:	480d      	ldr	r0, [pc, #52]	; (800ab3c <__multadd+0x88>)
 800ab08:	21b5      	movs	r1, #181	; 0xb5
 800ab0a:	f000 fd57 	bl	800b5bc <__assert_func>
 800ab0e:	6922      	ldr	r2, [r4, #16]
 800ab10:	3202      	adds	r2, #2
 800ab12:	f104 010c 	add.w	r1, r4, #12
 800ab16:	0092      	lsls	r2, r2, #2
 800ab18:	300c      	adds	r0, #12
 800ab1a:	f7ff ff5b 	bl	800a9d4 <memcpy>
 800ab1e:	4621      	mov	r1, r4
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7ff ffa5 	bl	800aa70 <_Bfree>
 800ab26:	4644      	mov	r4, r8
 800ab28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab2c:	3501      	adds	r5, #1
 800ab2e:	615e      	str	r6, [r3, #20]
 800ab30:	6125      	str	r5, [r4, #16]
 800ab32:	4620      	mov	r0, r4
 800ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab38:	0800c33f 	.word	0x0800c33f
 800ab3c:	0800c350 	.word	0x0800c350

0800ab40 <__hi0bits>:
 800ab40:	0c03      	lsrs	r3, r0, #16
 800ab42:	041b      	lsls	r3, r3, #16
 800ab44:	b9d3      	cbnz	r3, 800ab7c <__hi0bits+0x3c>
 800ab46:	0400      	lsls	r0, r0, #16
 800ab48:	2310      	movs	r3, #16
 800ab4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab4e:	bf04      	itt	eq
 800ab50:	0200      	lsleq	r0, r0, #8
 800ab52:	3308      	addeq	r3, #8
 800ab54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab58:	bf04      	itt	eq
 800ab5a:	0100      	lsleq	r0, r0, #4
 800ab5c:	3304      	addeq	r3, #4
 800ab5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab62:	bf04      	itt	eq
 800ab64:	0080      	lsleq	r0, r0, #2
 800ab66:	3302      	addeq	r3, #2
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	db05      	blt.n	800ab78 <__hi0bits+0x38>
 800ab6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab70:	f103 0301 	add.w	r3, r3, #1
 800ab74:	bf08      	it	eq
 800ab76:	2320      	moveq	r3, #32
 800ab78:	4618      	mov	r0, r3
 800ab7a:	4770      	bx	lr
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	e7e4      	b.n	800ab4a <__hi0bits+0xa>

0800ab80 <__lo0bits>:
 800ab80:	6803      	ldr	r3, [r0, #0]
 800ab82:	f013 0207 	ands.w	r2, r3, #7
 800ab86:	4601      	mov	r1, r0
 800ab88:	d00b      	beq.n	800aba2 <__lo0bits+0x22>
 800ab8a:	07da      	lsls	r2, r3, #31
 800ab8c:	d423      	bmi.n	800abd6 <__lo0bits+0x56>
 800ab8e:	0798      	lsls	r0, r3, #30
 800ab90:	bf49      	itett	mi
 800ab92:	085b      	lsrmi	r3, r3, #1
 800ab94:	089b      	lsrpl	r3, r3, #2
 800ab96:	2001      	movmi	r0, #1
 800ab98:	600b      	strmi	r3, [r1, #0]
 800ab9a:	bf5c      	itt	pl
 800ab9c:	600b      	strpl	r3, [r1, #0]
 800ab9e:	2002      	movpl	r0, #2
 800aba0:	4770      	bx	lr
 800aba2:	b298      	uxth	r0, r3
 800aba4:	b9a8      	cbnz	r0, 800abd2 <__lo0bits+0x52>
 800aba6:	0c1b      	lsrs	r3, r3, #16
 800aba8:	2010      	movs	r0, #16
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	b90a      	cbnz	r2, 800abb2 <__lo0bits+0x32>
 800abae:	3008      	adds	r0, #8
 800abb0:	0a1b      	lsrs	r3, r3, #8
 800abb2:	071a      	lsls	r2, r3, #28
 800abb4:	bf04      	itt	eq
 800abb6:	091b      	lsreq	r3, r3, #4
 800abb8:	3004      	addeq	r0, #4
 800abba:	079a      	lsls	r2, r3, #30
 800abbc:	bf04      	itt	eq
 800abbe:	089b      	lsreq	r3, r3, #2
 800abc0:	3002      	addeq	r0, #2
 800abc2:	07da      	lsls	r2, r3, #31
 800abc4:	d403      	bmi.n	800abce <__lo0bits+0x4e>
 800abc6:	085b      	lsrs	r3, r3, #1
 800abc8:	f100 0001 	add.w	r0, r0, #1
 800abcc:	d005      	beq.n	800abda <__lo0bits+0x5a>
 800abce:	600b      	str	r3, [r1, #0]
 800abd0:	4770      	bx	lr
 800abd2:	4610      	mov	r0, r2
 800abd4:	e7e9      	b.n	800abaa <__lo0bits+0x2a>
 800abd6:	2000      	movs	r0, #0
 800abd8:	4770      	bx	lr
 800abda:	2020      	movs	r0, #32
 800abdc:	4770      	bx	lr
	...

0800abe0 <__i2b>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	460c      	mov	r4, r1
 800abe4:	2101      	movs	r1, #1
 800abe6:	f7ff ff03 	bl	800a9f0 <_Balloc>
 800abea:	4602      	mov	r2, r0
 800abec:	b928      	cbnz	r0, 800abfa <__i2b+0x1a>
 800abee:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <__i2b+0x24>)
 800abf0:	4805      	ldr	r0, [pc, #20]	; (800ac08 <__i2b+0x28>)
 800abf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800abf6:	f000 fce1 	bl	800b5bc <__assert_func>
 800abfa:	2301      	movs	r3, #1
 800abfc:	6144      	str	r4, [r0, #20]
 800abfe:	6103      	str	r3, [r0, #16]
 800ac00:	bd10      	pop	{r4, pc}
 800ac02:	bf00      	nop
 800ac04:	0800c33f 	.word	0x0800c33f
 800ac08:	0800c350 	.word	0x0800c350

0800ac0c <__multiply>:
 800ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	4691      	mov	r9, r2
 800ac12:	690a      	ldr	r2, [r1, #16]
 800ac14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	bfb8      	it	lt
 800ac1c:	460b      	movlt	r3, r1
 800ac1e:	460c      	mov	r4, r1
 800ac20:	bfbc      	itt	lt
 800ac22:	464c      	movlt	r4, r9
 800ac24:	4699      	movlt	r9, r3
 800ac26:	6927      	ldr	r7, [r4, #16]
 800ac28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac2c:	68a3      	ldr	r3, [r4, #8]
 800ac2e:	6861      	ldr	r1, [r4, #4]
 800ac30:	eb07 060a 	add.w	r6, r7, sl
 800ac34:	42b3      	cmp	r3, r6
 800ac36:	b085      	sub	sp, #20
 800ac38:	bfb8      	it	lt
 800ac3a:	3101      	addlt	r1, #1
 800ac3c:	f7ff fed8 	bl	800a9f0 <_Balloc>
 800ac40:	b930      	cbnz	r0, 800ac50 <__multiply+0x44>
 800ac42:	4602      	mov	r2, r0
 800ac44:	4b44      	ldr	r3, [pc, #272]	; (800ad58 <__multiply+0x14c>)
 800ac46:	4845      	ldr	r0, [pc, #276]	; (800ad5c <__multiply+0x150>)
 800ac48:	f240 115d 	movw	r1, #349	; 0x15d
 800ac4c:	f000 fcb6 	bl	800b5bc <__assert_func>
 800ac50:	f100 0514 	add.w	r5, r0, #20
 800ac54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac58:	462b      	mov	r3, r5
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	4543      	cmp	r3, r8
 800ac5e:	d321      	bcc.n	800aca4 <__multiply+0x98>
 800ac60:	f104 0314 	add.w	r3, r4, #20
 800ac64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac68:	f109 0314 	add.w	r3, r9, #20
 800ac6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac70:	9202      	str	r2, [sp, #8]
 800ac72:	1b3a      	subs	r2, r7, r4
 800ac74:	3a15      	subs	r2, #21
 800ac76:	f022 0203 	bic.w	r2, r2, #3
 800ac7a:	3204      	adds	r2, #4
 800ac7c:	f104 0115 	add.w	r1, r4, #21
 800ac80:	428f      	cmp	r7, r1
 800ac82:	bf38      	it	cc
 800ac84:	2204      	movcc	r2, #4
 800ac86:	9201      	str	r2, [sp, #4]
 800ac88:	9a02      	ldr	r2, [sp, #8]
 800ac8a:	9303      	str	r3, [sp, #12]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d80c      	bhi.n	800acaa <__multiply+0x9e>
 800ac90:	2e00      	cmp	r6, #0
 800ac92:	dd03      	ble.n	800ac9c <__multiply+0x90>
 800ac94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d05a      	beq.n	800ad52 <__multiply+0x146>
 800ac9c:	6106      	str	r6, [r0, #16]
 800ac9e:	b005      	add	sp, #20
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca4:	f843 2b04 	str.w	r2, [r3], #4
 800aca8:	e7d8      	b.n	800ac5c <__multiply+0x50>
 800acaa:	f8b3 a000 	ldrh.w	sl, [r3]
 800acae:	f1ba 0f00 	cmp.w	sl, #0
 800acb2:	d024      	beq.n	800acfe <__multiply+0xf2>
 800acb4:	f104 0e14 	add.w	lr, r4, #20
 800acb8:	46a9      	mov	r9, r5
 800acba:	f04f 0c00 	mov.w	ip, #0
 800acbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800acc2:	f8d9 1000 	ldr.w	r1, [r9]
 800acc6:	fa1f fb82 	uxth.w	fp, r2
 800acca:	b289      	uxth	r1, r1
 800accc:	fb0a 110b 	mla	r1, sl, fp, r1
 800acd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800acd4:	f8d9 2000 	ldr.w	r2, [r9]
 800acd8:	4461      	add	r1, ip
 800acda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acde:	fb0a c20b 	mla	r2, sl, fp, ip
 800ace2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ace6:	b289      	uxth	r1, r1
 800ace8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800acec:	4577      	cmp	r7, lr
 800acee:	f849 1b04 	str.w	r1, [r9], #4
 800acf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acf6:	d8e2      	bhi.n	800acbe <__multiply+0xb2>
 800acf8:	9a01      	ldr	r2, [sp, #4]
 800acfa:	f845 c002 	str.w	ip, [r5, r2]
 800acfe:	9a03      	ldr	r2, [sp, #12]
 800ad00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad04:	3304      	adds	r3, #4
 800ad06:	f1b9 0f00 	cmp.w	r9, #0
 800ad0a:	d020      	beq.n	800ad4e <__multiply+0x142>
 800ad0c:	6829      	ldr	r1, [r5, #0]
 800ad0e:	f104 0c14 	add.w	ip, r4, #20
 800ad12:	46ae      	mov	lr, r5
 800ad14:	f04f 0a00 	mov.w	sl, #0
 800ad18:	f8bc b000 	ldrh.w	fp, [ip]
 800ad1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad20:	fb09 220b 	mla	r2, r9, fp, r2
 800ad24:	4492      	add	sl, r2
 800ad26:	b289      	uxth	r1, r1
 800ad28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad2c:	f84e 1b04 	str.w	r1, [lr], #4
 800ad30:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad34:	f8be 1000 	ldrh.w	r1, [lr]
 800ad38:	0c12      	lsrs	r2, r2, #16
 800ad3a:	fb09 1102 	mla	r1, r9, r2, r1
 800ad3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ad42:	4567      	cmp	r7, ip
 800ad44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad48:	d8e6      	bhi.n	800ad18 <__multiply+0x10c>
 800ad4a:	9a01      	ldr	r2, [sp, #4]
 800ad4c:	50a9      	str	r1, [r5, r2]
 800ad4e:	3504      	adds	r5, #4
 800ad50:	e79a      	b.n	800ac88 <__multiply+0x7c>
 800ad52:	3e01      	subs	r6, #1
 800ad54:	e79c      	b.n	800ac90 <__multiply+0x84>
 800ad56:	bf00      	nop
 800ad58:	0800c33f 	.word	0x0800c33f
 800ad5c:	0800c350 	.word	0x0800c350

0800ad60 <__pow5mult>:
 800ad60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad64:	4615      	mov	r5, r2
 800ad66:	f012 0203 	ands.w	r2, r2, #3
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	460f      	mov	r7, r1
 800ad6e:	d007      	beq.n	800ad80 <__pow5mult+0x20>
 800ad70:	4c25      	ldr	r4, [pc, #148]	; (800ae08 <__pow5mult+0xa8>)
 800ad72:	3a01      	subs	r2, #1
 800ad74:	2300      	movs	r3, #0
 800ad76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad7a:	f7ff fe9b 	bl	800aab4 <__multadd>
 800ad7e:	4607      	mov	r7, r0
 800ad80:	10ad      	asrs	r5, r5, #2
 800ad82:	d03d      	beq.n	800ae00 <__pow5mult+0xa0>
 800ad84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad86:	b97c      	cbnz	r4, 800ada8 <__pow5mult+0x48>
 800ad88:	2010      	movs	r0, #16
 800ad8a:	f7ff fe1b 	bl	800a9c4 <malloc>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	6270      	str	r0, [r6, #36]	; 0x24
 800ad92:	b928      	cbnz	r0, 800ada0 <__pow5mult+0x40>
 800ad94:	4b1d      	ldr	r3, [pc, #116]	; (800ae0c <__pow5mult+0xac>)
 800ad96:	481e      	ldr	r0, [pc, #120]	; (800ae10 <__pow5mult+0xb0>)
 800ad98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ad9c:	f000 fc0e 	bl	800b5bc <__assert_func>
 800ada0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ada4:	6004      	str	r4, [r0, #0]
 800ada6:	60c4      	str	r4, [r0, #12]
 800ada8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800adac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adb0:	b94c      	cbnz	r4, 800adc6 <__pow5mult+0x66>
 800adb2:	f240 2171 	movw	r1, #625	; 0x271
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7ff ff12 	bl	800abe0 <__i2b>
 800adbc:	2300      	movs	r3, #0
 800adbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800adc2:	4604      	mov	r4, r0
 800adc4:	6003      	str	r3, [r0, #0]
 800adc6:	f04f 0900 	mov.w	r9, #0
 800adca:	07eb      	lsls	r3, r5, #31
 800adcc:	d50a      	bpl.n	800ade4 <__pow5mult+0x84>
 800adce:	4639      	mov	r1, r7
 800add0:	4622      	mov	r2, r4
 800add2:	4630      	mov	r0, r6
 800add4:	f7ff ff1a 	bl	800ac0c <__multiply>
 800add8:	4639      	mov	r1, r7
 800adda:	4680      	mov	r8, r0
 800addc:	4630      	mov	r0, r6
 800adde:	f7ff fe47 	bl	800aa70 <_Bfree>
 800ade2:	4647      	mov	r7, r8
 800ade4:	106d      	asrs	r5, r5, #1
 800ade6:	d00b      	beq.n	800ae00 <__pow5mult+0xa0>
 800ade8:	6820      	ldr	r0, [r4, #0]
 800adea:	b938      	cbnz	r0, 800adfc <__pow5mult+0x9c>
 800adec:	4622      	mov	r2, r4
 800adee:	4621      	mov	r1, r4
 800adf0:	4630      	mov	r0, r6
 800adf2:	f7ff ff0b 	bl	800ac0c <__multiply>
 800adf6:	6020      	str	r0, [r4, #0]
 800adf8:	f8c0 9000 	str.w	r9, [r0]
 800adfc:	4604      	mov	r4, r0
 800adfe:	e7e4      	b.n	800adca <__pow5mult+0x6a>
 800ae00:	4638      	mov	r0, r7
 800ae02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae06:	bf00      	nop
 800ae08:	0800c4a0 	.word	0x0800c4a0
 800ae0c:	0800c2cd 	.word	0x0800c2cd
 800ae10:	0800c350 	.word	0x0800c350

0800ae14 <__lshift>:
 800ae14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae18:	460c      	mov	r4, r1
 800ae1a:	6849      	ldr	r1, [r1, #4]
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae22:	68a3      	ldr	r3, [r4, #8]
 800ae24:	4607      	mov	r7, r0
 800ae26:	4691      	mov	r9, r2
 800ae28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae2c:	f108 0601 	add.w	r6, r8, #1
 800ae30:	42b3      	cmp	r3, r6
 800ae32:	db0b      	blt.n	800ae4c <__lshift+0x38>
 800ae34:	4638      	mov	r0, r7
 800ae36:	f7ff fddb 	bl	800a9f0 <_Balloc>
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	b948      	cbnz	r0, 800ae52 <__lshift+0x3e>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	4b2a      	ldr	r3, [pc, #168]	; (800aeec <__lshift+0xd8>)
 800ae42:	482b      	ldr	r0, [pc, #172]	; (800aef0 <__lshift+0xdc>)
 800ae44:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae48:	f000 fbb8 	bl	800b5bc <__assert_func>
 800ae4c:	3101      	adds	r1, #1
 800ae4e:	005b      	lsls	r3, r3, #1
 800ae50:	e7ee      	b.n	800ae30 <__lshift+0x1c>
 800ae52:	2300      	movs	r3, #0
 800ae54:	f100 0114 	add.w	r1, r0, #20
 800ae58:	f100 0210 	add.w	r2, r0, #16
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	4553      	cmp	r3, sl
 800ae60:	db37      	blt.n	800aed2 <__lshift+0xbe>
 800ae62:	6920      	ldr	r0, [r4, #16]
 800ae64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae68:	f104 0314 	add.w	r3, r4, #20
 800ae6c:	f019 091f 	ands.w	r9, r9, #31
 800ae70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae78:	d02f      	beq.n	800aeda <__lshift+0xc6>
 800ae7a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae7e:	468a      	mov	sl, r1
 800ae80:	f04f 0c00 	mov.w	ip, #0
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	fa02 f209 	lsl.w	r2, r2, r9
 800ae8a:	ea42 020c 	orr.w	r2, r2, ip
 800ae8e:	f84a 2b04 	str.w	r2, [sl], #4
 800ae92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae96:	4298      	cmp	r0, r3
 800ae98:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ae9c:	d8f2      	bhi.n	800ae84 <__lshift+0x70>
 800ae9e:	1b03      	subs	r3, r0, r4
 800aea0:	3b15      	subs	r3, #21
 800aea2:	f023 0303 	bic.w	r3, r3, #3
 800aea6:	3304      	adds	r3, #4
 800aea8:	f104 0215 	add.w	r2, r4, #21
 800aeac:	4290      	cmp	r0, r2
 800aeae:	bf38      	it	cc
 800aeb0:	2304      	movcc	r3, #4
 800aeb2:	f841 c003 	str.w	ip, [r1, r3]
 800aeb6:	f1bc 0f00 	cmp.w	ip, #0
 800aeba:	d001      	beq.n	800aec0 <__lshift+0xac>
 800aebc:	f108 0602 	add.w	r6, r8, #2
 800aec0:	3e01      	subs	r6, #1
 800aec2:	4638      	mov	r0, r7
 800aec4:	612e      	str	r6, [r5, #16]
 800aec6:	4621      	mov	r1, r4
 800aec8:	f7ff fdd2 	bl	800aa70 <_Bfree>
 800aecc:	4628      	mov	r0, r5
 800aece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed2:	f842 0f04 	str.w	r0, [r2, #4]!
 800aed6:	3301      	adds	r3, #1
 800aed8:	e7c1      	b.n	800ae5e <__lshift+0x4a>
 800aeda:	3904      	subs	r1, #4
 800aedc:	f853 2b04 	ldr.w	r2, [r3], #4
 800aee0:	f841 2f04 	str.w	r2, [r1, #4]!
 800aee4:	4298      	cmp	r0, r3
 800aee6:	d8f9      	bhi.n	800aedc <__lshift+0xc8>
 800aee8:	e7ea      	b.n	800aec0 <__lshift+0xac>
 800aeea:	bf00      	nop
 800aeec:	0800c33f 	.word	0x0800c33f
 800aef0:	0800c350 	.word	0x0800c350

0800aef4 <__mcmp>:
 800aef4:	b530      	push	{r4, r5, lr}
 800aef6:	6902      	ldr	r2, [r0, #16]
 800aef8:	690c      	ldr	r4, [r1, #16]
 800aefa:	1b12      	subs	r2, r2, r4
 800aefc:	d10e      	bne.n	800af1c <__mcmp+0x28>
 800aefe:	f100 0314 	add.w	r3, r0, #20
 800af02:	3114      	adds	r1, #20
 800af04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af14:	42a5      	cmp	r5, r4
 800af16:	d003      	beq.n	800af20 <__mcmp+0x2c>
 800af18:	d305      	bcc.n	800af26 <__mcmp+0x32>
 800af1a:	2201      	movs	r2, #1
 800af1c:	4610      	mov	r0, r2
 800af1e:	bd30      	pop	{r4, r5, pc}
 800af20:	4283      	cmp	r3, r0
 800af22:	d3f3      	bcc.n	800af0c <__mcmp+0x18>
 800af24:	e7fa      	b.n	800af1c <__mcmp+0x28>
 800af26:	f04f 32ff 	mov.w	r2, #4294967295
 800af2a:	e7f7      	b.n	800af1c <__mcmp+0x28>

0800af2c <__mdiff>:
 800af2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af30:	460c      	mov	r4, r1
 800af32:	4606      	mov	r6, r0
 800af34:	4611      	mov	r1, r2
 800af36:	4620      	mov	r0, r4
 800af38:	4690      	mov	r8, r2
 800af3a:	f7ff ffdb 	bl	800aef4 <__mcmp>
 800af3e:	1e05      	subs	r5, r0, #0
 800af40:	d110      	bne.n	800af64 <__mdiff+0x38>
 800af42:	4629      	mov	r1, r5
 800af44:	4630      	mov	r0, r6
 800af46:	f7ff fd53 	bl	800a9f0 <_Balloc>
 800af4a:	b930      	cbnz	r0, 800af5a <__mdiff+0x2e>
 800af4c:	4b3a      	ldr	r3, [pc, #232]	; (800b038 <__mdiff+0x10c>)
 800af4e:	4602      	mov	r2, r0
 800af50:	f240 2132 	movw	r1, #562	; 0x232
 800af54:	4839      	ldr	r0, [pc, #228]	; (800b03c <__mdiff+0x110>)
 800af56:	f000 fb31 	bl	800b5bc <__assert_func>
 800af5a:	2301      	movs	r3, #1
 800af5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af64:	bfa4      	itt	ge
 800af66:	4643      	movge	r3, r8
 800af68:	46a0      	movge	r8, r4
 800af6a:	4630      	mov	r0, r6
 800af6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af70:	bfa6      	itte	ge
 800af72:	461c      	movge	r4, r3
 800af74:	2500      	movge	r5, #0
 800af76:	2501      	movlt	r5, #1
 800af78:	f7ff fd3a 	bl	800a9f0 <_Balloc>
 800af7c:	b920      	cbnz	r0, 800af88 <__mdiff+0x5c>
 800af7e:	4b2e      	ldr	r3, [pc, #184]	; (800b038 <__mdiff+0x10c>)
 800af80:	4602      	mov	r2, r0
 800af82:	f44f 7110 	mov.w	r1, #576	; 0x240
 800af86:	e7e5      	b.n	800af54 <__mdiff+0x28>
 800af88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af8c:	6926      	ldr	r6, [r4, #16]
 800af8e:	60c5      	str	r5, [r0, #12]
 800af90:	f104 0914 	add.w	r9, r4, #20
 800af94:	f108 0514 	add.w	r5, r8, #20
 800af98:	f100 0e14 	add.w	lr, r0, #20
 800af9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800afa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800afa4:	f108 0210 	add.w	r2, r8, #16
 800afa8:	46f2      	mov	sl, lr
 800afaa:	2100      	movs	r1, #0
 800afac:	f859 3b04 	ldr.w	r3, [r9], #4
 800afb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800afb4:	fa1f f883 	uxth.w	r8, r3
 800afb8:	fa11 f18b 	uxtah	r1, r1, fp
 800afbc:	0c1b      	lsrs	r3, r3, #16
 800afbe:	eba1 0808 	sub.w	r8, r1, r8
 800afc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800afc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800afca:	fa1f f888 	uxth.w	r8, r8
 800afce:	1419      	asrs	r1, r3, #16
 800afd0:	454e      	cmp	r6, r9
 800afd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800afd6:	f84a 3b04 	str.w	r3, [sl], #4
 800afda:	d8e7      	bhi.n	800afac <__mdiff+0x80>
 800afdc:	1b33      	subs	r3, r6, r4
 800afde:	3b15      	subs	r3, #21
 800afe0:	f023 0303 	bic.w	r3, r3, #3
 800afe4:	3304      	adds	r3, #4
 800afe6:	3415      	adds	r4, #21
 800afe8:	42a6      	cmp	r6, r4
 800afea:	bf38      	it	cc
 800afec:	2304      	movcc	r3, #4
 800afee:	441d      	add	r5, r3
 800aff0:	4473      	add	r3, lr
 800aff2:	469e      	mov	lr, r3
 800aff4:	462e      	mov	r6, r5
 800aff6:	4566      	cmp	r6, ip
 800aff8:	d30e      	bcc.n	800b018 <__mdiff+0xec>
 800affa:	f10c 0203 	add.w	r2, ip, #3
 800affe:	1b52      	subs	r2, r2, r5
 800b000:	f022 0203 	bic.w	r2, r2, #3
 800b004:	3d03      	subs	r5, #3
 800b006:	45ac      	cmp	ip, r5
 800b008:	bf38      	it	cc
 800b00a:	2200      	movcc	r2, #0
 800b00c:	441a      	add	r2, r3
 800b00e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b012:	b17b      	cbz	r3, 800b034 <__mdiff+0x108>
 800b014:	6107      	str	r7, [r0, #16]
 800b016:	e7a3      	b.n	800af60 <__mdiff+0x34>
 800b018:	f856 8b04 	ldr.w	r8, [r6], #4
 800b01c:	fa11 f288 	uxtah	r2, r1, r8
 800b020:	1414      	asrs	r4, r2, #16
 800b022:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b026:	b292      	uxth	r2, r2
 800b028:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b02c:	f84e 2b04 	str.w	r2, [lr], #4
 800b030:	1421      	asrs	r1, r4, #16
 800b032:	e7e0      	b.n	800aff6 <__mdiff+0xca>
 800b034:	3f01      	subs	r7, #1
 800b036:	e7ea      	b.n	800b00e <__mdiff+0xe2>
 800b038:	0800c33f 	.word	0x0800c33f
 800b03c:	0800c350 	.word	0x0800c350

0800b040 <__d2b>:
 800b040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b044:	4689      	mov	r9, r1
 800b046:	2101      	movs	r1, #1
 800b048:	ec57 6b10 	vmov	r6, r7, d0
 800b04c:	4690      	mov	r8, r2
 800b04e:	f7ff fccf 	bl	800a9f0 <_Balloc>
 800b052:	4604      	mov	r4, r0
 800b054:	b930      	cbnz	r0, 800b064 <__d2b+0x24>
 800b056:	4602      	mov	r2, r0
 800b058:	4b25      	ldr	r3, [pc, #148]	; (800b0f0 <__d2b+0xb0>)
 800b05a:	4826      	ldr	r0, [pc, #152]	; (800b0f4 <__d2b+0xb4>)
 800b05c:	f240 310a 	movw	r1, #778	; 0x30a
 800b060:	f000 faac 	bl	800b5bc <__assert_func>
 800b064:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b068:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b06c:	bb35      	cbnz	r5, 800b0bc <__d2b+0x7c>
 800b06e:	2e00      	cmp	r6, #0
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	d028      	beq.n	800b0c6 <__d2b+0x86>
 800b074:	4668      	mov	r0, sp
 800b076:	9600      	str	r6, [sp, #0]
 800b078:	f7ff fd82 	bl	800ab80 <__lo0bits>
 800b07c:	9900      	ldr	r1, [sp, #0]
 800b07e:	b300      	cbz	r0, 800b0c2 <__d2b+0x82>
 800b080:	9a01      	ldr	r2, [sp, #4]
 800b082:	f1c0 0320 	rsb	r3, r0, #32
 800b086:	fa02 f303 	lsl.w	r3, r2, r3
 800b08a:	430b      	orrs	r3, r1
 800b08c:	40c2      	lsrs	r2, r0
 800b08e:	6163      	str	r3, [r4, #20]
 800b090:	9201      	str	r2, [sp, #4]
 800b092:	9b01      	ldr	r3, [sp, #4]
 800b094:	61a3      	str	r3, [r4, #24]
 800b096:	2b00      	cmp	r3, #0
 800b098:	bf14      	ite	ne
 800b09a:	2202      	movne	r2, #2
 800b09c:	2201      	moveq	r2, #1
 800b09e:	6122      	str	r2, [r4, #16]
 800b0a0:	b1d5      	cbz	r5, 800b0d8 <__d2b+0x98>
 800b0a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0a6:	4405      	add	r5, r0
 800b0a8:	f8c9 5000 	str.w	r5, [r9]
 800b0ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0b0:	f8c8 0000 	str.w	r0, [r8]
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	b003      	add	sp, #12
 800b0b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0c0:	e7d5      	b.n	800b06e <__d2b+0x2e>
 800b0c2:	6161      	str	r1, [r4, #20]
 800b0c4:	e7e5      	b.n	800b092 <__d2b+0x52>
 800b0c6:	a801      	add	r0, sp, #4
 800b0c8:	f7ff fd5a 	bl	800ab80 <__lo0bits>
 800b0cc:	9b01      	ldr	r3, [sp, #4]
 800b0ce:	6163      	str	r3, [r4, #20]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	6122      	str	r2, [r4, #16]
 800b0d4:	3020      	adds	r0, #32
 800b0d6:	e7e3      	b.n	800b0a0 <__d2b+0x60>
 800b0d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0e0:	f8c9 0000 	str.w	r0, [r9]
 800b0e4:	6918      	ldr	r0, [r3, #16]
 800b0e6:	f7ff fd2b 	bl	800ab40 <__hi0bits>
 800b0ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0ee:	e7df      	b.n	800b0b0 <__d2b+0x70>
 800b0f0:	0800c33f 	.word	0x0800c33f
 800b0f4:	0800c350 	.word	0x0800c350

0800b0f8 <_calloc_r>:
 800b0f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0fa:	fba1 2402 	umull	r2, r4, r1, r2
 800b0fe:	b94c      	cbnz	r4, 800b114 <_calloc_r+0x1c>
 800b100:	4611      	mov	r1, r2
 800b102:	9201      	str	r2, [sp, #4]
 800b104:	f000 f87a 	bl	800b1fc <_malloc_r>
 800b108:	9a01      	ldr	r2, [sp, #4]
 800b10a:	4605      	mov	r5, r0
 800b10c:	b930      	cbnz	r0, 800b11c <_calloc_r+0x24>
 800b10e:	4628      	mov	r0, r5
 800b110:	b003      	add	sp, #12
 800b112:	bd30      	pop	{r4, r5, pc}
 800b114:	220c      	movs	r2, #12
 800b116:	6002      	str	r2, [r0, #0]
 800b118:	2500      	movs	r5, #0
 800b11a:	e7f8      	b.n	800b10e <_calloc_r+0x16>
 800b11c:	4621      	mov	r1, r4
 800b11e:	f7fe f9e7 	bl	80094f0 <memset>
 800b122:	e7f4      	b.n	800b10e <_calloc_r+0x16>

0800b124 <_free_r>:
 800b124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b126:	2900      	cmp	r1, #0
 800b128:	d044      	beq.n	800b1b4 <_free_r+0x90>
 800b12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b12e:	9001      	str	r0, [sp, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	f1a1 0404 	sub.w	r4, r1, #4
 800b136:	bfb8      	it	lt
 800b138:	18e4      	addlt	r4, r4, r3
 800b13a:	f000 fa9b 	bl	800b674 <__malloc_lock>
 800b13e:	4a1e      	ldr	r2, [pc, #120]	; (800b1b8 <_free_r+0x94>)
 800b140:	9801      	ldr	r0, [sp, #4]
 800b142:	6813      	ldr	r3, [r2, #0]
 800b144:	b933      	cbnz	r3, 800b154 <_free_r+0x30>
 800b146:	6063      	str	r3, [r4, #4]
 800b148:	6014      	str	r4, [r2, #0]
 800b14a:	b003      	add	sp, #12
 800b14c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b150:	f000 ba96 	b.w	800b680 <__malloc_unlock>
 800b154:	42a3      	cmp	r3, r4
 800b156:	d908      	bls.n	800b16a <_free_r+0x46>
 800b158:	6825      	ldr	r5, [r4, #0]
 800b15a:	1961      	adds	r1, r4, r5
 800b15c:	428b      	cmp	r3, r1
 800b15e:	bf01      	itttt	eq
 800b160:	6819      	ldreq	r1, [r3, #0]
 800b162:	685b      	ldreq	r3, [r3, #4]
 800b164:	1949      	addeq	r1, r1, r5
 800b166:	6021      	streq	r1, [r4, #0]
 800b168:	e7ed      	b.n	800b146 <_free_r+0x22>
 800b16a:	461a      	mov	r2, r3
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	b10b      	cbz	r3, 800b174 <_free_r+0x50>
 800b170:	42a3      	cmp	r3, r4
 800b172:	d9fa      	bls.n	800b16a <_free_r+0x46>
 800b174:	6811      	ldr	r1, [r2, #0]
 800b176:	1855      	adds	r5, r2, r1
 800b178:	42a5      	cmp	r5, r4
 800b17a:	d10b      	bne.n	800b194 <_free_r+0x70>
 800b17c:	6824      	ldr	r4, [r4, #0]
 800b17e:	4421      	add	r1, r4
 800b180:	1854      	adds	r4, r2, r1
 800b182:	42a3      	cmp	r3, r4
 800b184:	6011      	str	r1, [r2, #0]
 800b186:	d1e0      	bne.n	800b14a <_free_r+0x26>
 800b188:	681c      	ldr	r4, [r3, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	6053      	str	r3, [r2, #4]
 800b18e:	4421      	add	r1, r4
 800b190:	6011      	str	r1, [r2, #0]
 800b192:	e7da      	b.n	800b14a <_free_r+0x26>
 800b194:	d902      	bls.n	800b19c <_free_r+0x78>
 800b196:	230c      	movs	r3, #12
 800b198:	6003      	str	r3, [r0, #0]
 800b19a:	e7d6      	b.n	800b14a <_free_r+0x26>
 800b19c:	6825      	ldr	r5, [r4, #0]
 800b19e:	1961      	adds	r1, r4, r5
 800b1a0:	428b      	cmp	r3, r1
 800b1a2:	bf04      	itt	eq
 800b1a4:	6819      	ldreq	r1, [r3, #0]
 800b1a6:	685b      	ldreq	r3, [r3, #4]
 800b1a8:	6063      	str	r3, [r4, #4]
 800b1aa:	bf04      	itt	eq
 800b1ac:	1949      	addeq	r1, r1, r5
 800b1ae:	6021      	streq	r1, [r4, #0]
 800b1b0:	6054      	str	r4, [r2, #4]
 800b1b2:	e7ca      	b.n	800b14a <_free_r+0x26>
 800b1b4:	b003      	add	sp, #12
 800b1b6:	bd30      	pop	{r4, r5, pc}
 800b1b8:	240008a0 	.word	0x240008a0

0800b1bc <sbrk_aligned>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4e0e      	ldr	r6, [pc, #56]	; (800b1f8 <sbrk_aligned+0x3c>)
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	6831      	ldr	r1, [r6, #0]
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	b911      	cbnz	r1, 800b1ce <sbrk_aligned+0x12>
 800b1c8:	f000 f9e8 	bl	800b59c <_sbrk_r>
 800b1cc:	6030      	str	r0, [r6, #0]
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	f000 f9e3 	bl	800b59c <_sbrk_r>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	d00a      	beq.n	800b1f0 <sbrk_aligned+0x34>
 800b1da:	1cc4      	adds	r4, r0, #3
 800b1dc:	f024 0403 	bic.w	r4, r4, #3
 800b1e0:	42a0      	cmp	r0, r4
 800b1e2:	d007      	beq.n	800b1f4 <sbrk_aligned+0x38>
 800b1e4:	1a21      	subs	r1, r4, r0
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f000 f9d8 	bl	800b59c <_sbrk_r>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d101      	bne.n	800b1f4 <sbrk_aligned+0x38>
 800b1f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	240008a4 	.word	0x240008a4

0800b1fc <_malloc_r>:
 800b1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b200:	1ccd      	adds	r5, r1, #3
 800b202:	f025 0503 	bic.w	r5, r5, #3
 800b206:	3508      	adds	r5, #8
 800b208:	2d0c      	cmp	r5, #12
 800b20a:	bf38      	it	cc
 800b20c:	250c      	movcc	r5, #12
 800b20e:	2d00      	cmp	r5, #0
 800b210:	4607      	mov	r7, r0
 800b212:	db01      	blt.n	800b218 <_malloc_r+0x1c>
 800b214:	42a9      	cmp	r1, r5
 800b216:	d905      	bls.n	800b224 <_malloc_r+0x28>
 800b218:	230c      	movs	r3, #12
 800b21a:	603b      	str	r3, [r7, #0]
 800b21c:	2600      	movs	r6, #0
 800b21e:	4630      	mov	r0, r6
 800b220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b224:	4e2e      	ldr	r6, [pc, #184]	; (800b2e0 <_malloc_r+0xe4>)
 800b226:	f000 fa25 	bl	800b674 <__malloc_lock>
 800b22a:	6833      	ldr	r3, [r6, #0]
 800b22c:	461c      	mov	r4, r3
 800b22e:	bb34      	cbnz	r4, 800b27e <_malloc_r+0x82>
 800b230:	4629      	mov	r1, r5
 800b232:	4638      	mov	r0, r7
 800b234:	f7ff ffc2 	bl	800b1bc <sbrk_aligned>
 800b238:	1c43      	adds	r3, r0, #1
 800b23a:	4604      	mov	r4, r0
 800b23c:	d14d      	bne.n	800b2da <_malloc_r+0xde>
 800b23e:	6834      	ldr	r4, [r6, #0]
 800b240:	4626      	mov	r6, r4
 800b242:	2e00      	cmp	r6, #0
 800b244:	d140      	bne.n	800b2c8 <_malloc_r+0xcc>
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	4631      	mov	r1, r6
 800b24a:	4638      	mov	r0, r7
 800b24c:	eb04 0803 	add.w	r8, r4, r3
 800b250:	f000 f9a4 	bl	800b59c <_sbrk_r>
 800b254:	4580      	cmp	r8, r0
 800b256:	d13a      	bne.n	800b2ce <_malloc_r+0xd2>
 800b258:	6821      	ldr	r1, [r4, #0]
 800b25a:	3503      	adds	r5, #3
 800b25c:	1a6d      	subs	r5, r5, r1
 800b25e:	f025 0503 	bic.w	r5, r5, #3
 800b262:	3508      	adds	r5, #8
 800b264:	2d0c      	cmp	r5, #12
 800b266:	bf38      	it	cc
 800b268:	250c      	movcc	r5, #12
 800b26a:	4629      	mov	r1, r5
 800b26c:	4638      	mov	r0, r7
 800b26e:	f7ff ffa5 	bl	800b1bc <sbrk_aligned>
 800b272:	3001      	adds	r0, #1
 800b274:	d02b      	beq.n	800b2ce <_malloc_r+0xd2>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	442b      	add	r3, r5
 800b27a:	6023      	str	r3, [r4, #0]
 800b27c:	e00e      	b.n	800b29c <_malloc_r+0xa0>
 800b27e:	6822      	ldr	r2, [r4, #0]
 800b280:	1b52      	subs	r2, r2, r5
 800b282:	d41e      	bmi.n	800b2c2 <_malloc_r+0xc6>
 800b284:	2a0b      	cmp	r2, #11
 800b286:	d916      	bls.n	800b2b6 <_malloc_r+0xba>
 800b288:	1961      	adds	r1, r4, r5
 800b28a:	42a3      	cmp	r3, r4
 800b28c:	6025      	str	r5, [r4, #0]
 800b28e:	bf18      	it	ne
 800b290:	6059      	strne	r1, [r3, #4]
 800b292:	6863      	ldr	r3, [r4, #4]
 800b294:	bf08      	it	eq
 800b296:	6031      	streq	r1, [r6, #0]
 800b298:	5162      	str	r2, [r4, r5]
 800b29a:	604b      	str	r3, [r1, #4]
 800b29c:	4638      	mov	r0, r7
 800b29e:	f104 060b 	add.w	r6, r4, #11
 800b2a2:	f000 f9ed 	bl	800b680 <__malloc_unlock>
 800b2a6:	f026 0607 	bic.w	r6, r6, #7
 800b2aa:	1d23      	adds	r3, r4, #4
 800b2ac:	1af2      	subs	r2, r6, r3
 800b2ae:	d0b6      	beq.n	800b21e <_malloc_r+0x22>
 800b2b0:	1b9b      	subs	r3, r3, r6
 800b2b2:	50a3      	str	r3, [r4, r2]
 800b2b4:	e7b3      	b.n	800b21e <_malloc_r+0x22>
 800b2b6:	6862      	ldr	r2, [r4, #4]
 800b2b8:	42a3      	cmp	r3, r4
 800b2ba:	bf0c      	ite	eq
 800b2bc:	6032      	streq	r2, [r6, #0]
 800b2be:	605a      	strne	r2, [r3, #4]
 800b2c0:	e7ec      	b.n	800b29c <_malloc_r+0xa0>
 800b2c2:	4623      	mov	r3, r4
 800b2c4:	6864      	ldr	r4, [r4, #4]
 800b2c6:	e7b2      	b.n	800b22e <_malloc_r+0x32>
 800b2c8:	4634      	mov	r4, r6
 800b2ca:	6876      	ldr	r6, [r6, #4]
 800b2cc:	e7b9      	b.n	800b242 <_malloc_r+0x46>
 800b2ce:	230c      	movs	r3, #12
 800b2d0:	603b      	str	r3, [r7, #0]
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	f000 f9d4 	bl	800b680 <__malloc_unlock>
 800b2d8:	e7a1      	b.n	800b21e <_malloc_r+0x22>
 800b2da:	6025      	str	r5, [r4, #0]
 800b2dc:	e7de      	b.n	800b29c <_malloc_r+0xa0>
 800b2de:	bf00      	nop
 800b2e0:	240008a0 	.word	0x240008a0

0800b2e4 <__ssputs_r>:
 800b2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e8:	688e      	ldr	r6, [r1, #8]
 800b2ea:	429e      	cmp	r6, r3
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	4690      	mov	r8, r2
 800b2f2:	461f      	mov	r7, r3
 800b2f4:	d838      	bhi.n	800b368 <__ssputs_r+0x84>
 800b2f6:	898a      	ldrh	r2, [r1, #12]
 800b2f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2fc:	d032      	beq.n	800b364 <__ssputs_r+0x80>
 800b2fe:	6825      	ldr	r5, [r4, #0]
 800b300:	6909      	ldr	r1, [r1, #16]
 800b302:	eba5 0901 	sub.w	r9, r5, r1
 800b306:	6965      	ldr	r5, [r4, #20]
 800b308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b30c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b310:	3301      	adds	r3, #1
 800b312:	444b      	add	r3, r9
 800b314:	106d      	asrs	r5, r5, #1
 800b316:	429d      	cmp	r5, r3
 800b318:	bf38      	it	cc
 800b31a:	461d      	movcc	r5, r3
 800b31c:	0553      	lsls	r3, r2, #21
 800b31e:	d531      	bpl.n	800b384 <__ssputs_r+0xa0>
 800b320:	4629      	mov	r1, r5
 800b322:	f7ff ff6b 	bl	800b1fc <_malloc_r>
 800b326:	4606      	mov	r6, r0
 800b328:	b950      	cbnz	r0, 800b340 <__ssputs_r+0x5c>
 800b32a:	230c      	movs	r3, #12
 800b32c:	f8ca 3000 	str.w	r3, [sl]
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b336:	81a3      	strh	r3, [r4, #12]
 800b338:	f04f 30ff 	mov.w	r0, #4294967295
 800b33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b340:	6921      	ldr	r1, [r4, #16]
 800b342:	464a      	mov	r2, r9
 800b344:	f7ff fb46 	bl	800a9d4 <memcpy>
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b34e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b352:	81a3      	strh	r3, [r4, #12]
 800b354:	6126      	str	r6, [r4, #16]
 800b356:	6165      	str	r5, [r4, #20]
 800b358:	444e      	add	r6, r9
 800b35a:	eba5 0509 	sub.w	r5, r5, r9
 800b35e:	6026      	str	r6, [r4, #0]
 800b360:	60a5      	str	r5, [r4, #8]
 800b362:	463e      	mov	r6, r7
 800b364:	42be      	cmp	r6, r7
 800b366:	d900      	bls.n	800b36a <__ssputs_r+0x86>
 800b368:	463e      	mov	r6, r7
 800b36a:	6820      	ldr	r0, [r4, #0]
 800b36c:	4632      	mov	r2, r6
 800b36e:	4641      	mov	r1, r8
 800b370:	f000 f966 	bl	800b640 <memmove>
 800b374:	68a3      	ldr	r3, [r4, #8]
 800b376:	1b9b      	subs	r3, r3, r6
 800b378:	60a3      	str	r3, [r4, #8]
 800b37a:	6823      	ldr	r3, [r4, #0]
 800b37c:	4433      	add	r3, r6
 800b37e:	6023      	str	r3, [r4, #0]
 800b380:	2000      	movs	r0, #0
 800b382:	e7db      	b.n	800b33c <__ssputs_r+0x58>
 800b384:	462a      	mov	r2, r5
 800b386:	f000 f981 	bl	800b68c <_realloc_r>
 800b38a:	4606      	mov	r6, r0
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d1e1      	bne.n	800b354 <__ssputs_r+0x70>
 800b390:	6921      	ldr	r1, [r4, #16]
 800b392:	4650      	mov	r0, sl
 800b394:	f7ff fec6 	bl	800b124 <_free_r>
 800b398:	e7c7      	b.n	800b32a <__ssputs_r+0x46>
	...

0800b39c <_svfiprintf_r>:
 800b39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a0:	4698      	mov	r8, r3
 800b3a2:	898b      	ldrh	r3, [r1, #12]
 800b3a4:	061b      	lsls	r3, r3, #24
 800b3a6:	b09d      	sub	sp, #116	; 0x74
 800b3a8:	4607      	mov	r7, r0
 800b3aa:	460d      	mov	r5, r1
 800b3ac:	4614      	mov	r4, r2
 800b3ae:	d50e      	bpl.n	800b3ce <_svfiprintf_r+0x32>
 800b3b0:	690b      	ldr	r3, [r1, #16]
 800b3b2:	b963      	cbnz	r3, 800b3ce <_svfiprintf_r+0x32>
 800b3b4:	2140      	movs	r1, #64	; 0x40
 800b3b6:	f7ff ff21 	bl	800b1fc <_malloc_r>
 800b3ba:	6028      	str	r0, [r5, #0]
 800b3bc:	6128      	str	r0, [r5, #16]
 800b3be:	b920      	cbnz	r0, 800b3ca <_svfiprintf_r+0x2e>
 800b3c0:	230c      	movs	r3, #12
 800b3c2:	603b      	str	r3, [r7, #0]
 800b3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c8:	e0d1      	b.n	800b56e <_svfiprintf_r+0x1d2>
 800b3ca:	2340      	movs	r3, #64	; 0x40
 800b3cc:	616b      	str	r3, [r5, #20]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3d2:	2320      	movs	r3, #32
 800b3d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3dc:	2330      	movs	r3, #48	; 0x30
 800b3de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b588 <_svfiprintf_r+0x1ec>
 800b3e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3e6:	f04f 0901 	mov.w	r9, #1
 800b3ea:	4623      	mov	r3, r4
 800b3ec:	469a      	mov	sl, r3
 800b3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3f2:	b10a      	cbz	r2, 800b3f8 <_svfiprintf_r+0x5c>
 800b3f4:	2a25      	cmp	r2, #37	; 0x25
 800b3f6:	d1f9      	bne.n	800b3ec <_svfiprintf_r+0x50>
 800b3f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b3fc:	d00b      	beq.n	800b416 <_svfiprintf_r+0x7a>
 800b3fe:	465b      	mov	r3, fp
 800b400:	4622      	mov	r2, r4
 800b402:	4629      	mov	r1, r5
 800b404:	4638      	mov	r0, r7
 800b406:	f7ff ff6d 	bl	800b2e4 <__ssputs_r>
 800b40a:	3001      	adds	r0, #1
 800b40c:	f000 80aa 	beq.w	800b564 <_svfiprintf_r+0x1c8>
 800b410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b412:	445a      	add	r2, fp
 800b414:	9209      	str	r2, [sp, #36]	; 0x24
 800b416:	f89a 3000 	ldrb.w	r3, [sl]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	f000 80a2 	beq.w	800b564 <_svfiprintf_r+0x1c8>
 800b420:	2300      	movs	r3, #0
 800b422:	f04f 32ff 	mov.w	r2, #4294967295
 800b426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b42a:	f10a 0a01 	add.w	sl, sl, #1
 800b42e:	9304      	str	r3, [sp, #16]
 800b430:	9307      	str	r3, [sp, #28]
 800b432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b436:	931a      	str	r3, [sp, #104]	; 0x68
 800b438:	4654      	mov	r4, sl
 800b43a:	2205      	movs	r2, #5
 800b43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b440:	4851      	ldr	r0, [pc, #324]	; (800b588 <_svfiprintf_r+0x1ec>)
 800b442:	f7f4 ff55 	bl	80002f0 <memchr>
 800b446:	9a04      	ldr	r2, [sp, #16]
 800b448:	b9d8      	cbnz	r0, 800b482 <_svfiprintf_r+0xe6>
 800b44a:	06d0      	lsls	r0, r2, #27
 800b44c:	bf44      	itt	mi
 800b44e:	2320      	movmi	r3, #32
 800b450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b454:	0711      	lsls	r1, r2, #28
 800b456:	bf44      	itt	mi
 800b458:	232b      	movmi	r3, #43	; 0x2b
 800b45a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b45e:	f89a 3000 	ldrb.w	r3, [sl]
 800b462:	2b2a      	cmp	r3, #42	; 0x2a
 800b464:	d015      	beq.n	800b492 <_svfiprintf_r+0xf6>
 800b466:	9a07      	ldr	r2, [sp, #28]
 800b468:	4654      	mov	r4, sl
 800b46a:	2000      	movs	r0, #0
 800b46c:	f04f 0c0a 	mov.w	ip, #10
 800b470:	4621      	mov	r1, r4
 800b472:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b476:	3b30      	subs	r3, #48	; 0x30
 800b478:	2b09      	cmp	r3, #9
 800b47a:	d94e      	bls.n	800b51a <_svfiprintf_r+0x17e>
 800b47c:	b1b0      	cbz	r0, 800b4ac <_svfiprintf_r+0x110>
 800b47e:	9207      	str	r2, [sp, #28]
 800b480:	e014      	b.n	800b4ac <_svfiprintf_r+0x110>
 800b482:	eba0 0308 	sub.w	r3, r0, r8
 800b486:	fa09 f303 	lsl.w	r3, r9, r3
 800b48a:	4313      	orrs	r3, r2
 800b48c:	9304      	str	r3, [sp, #16]
 800b48e:	46a2      	mov	sl, r4
 800b490:	e7d2      	b.n	800b438 <_svfiprintf_r+0x9c>
 800b492:	9b03      	ldr	r3, [sp, #12]
 800b494:	1d19      	adds	r1, r3, #4
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	9103      	str	r1, [sp, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	bfbb      	ittet	lt
 800b49e:	425b      	neglt	r3, r3
 800b4a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b4a4:	9307      	strge	r3, [sp, #28]
 800b4a6:	9307      	strlt	r3, [sp, #28]
 800b4a8:	bfb8      	it	lt
 800b4aa:	9204      	strlt	r2, [sp, #16]
 800b4ac:	7823      	ldrb	r3, [r4, #0]
 800b4ae:	2b2e      	cmp	r3, #46	; 0x2e
 800b4b0:	d10c      	bne.n	800b4cc <_svfiprintf_r+0x130>
 800b4b2:	7863      	ldrb	r3, [r4, #1]
 800b4b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b6:	d135      	bne.n	800b524 <_svfiprintf_r+0x188>
 800b4b8:	9b03      	ldr	r3, [sp, #12]
 800b4ba:	1d1a      	adds	r2, r3, #4
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	9203      	str	r2, [sp, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	bfb8      	it	lt
 800b4c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4c8:	3402      	adds	r4, #2
 800b4ca:	9305      	str	r3, [sp, #20]
 800b4cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b598 <_svfiprintf_r+0x1fc>
 800b4d0:	7821      	ldrb	r1, [r4, #0]
 800b4d2:	2203      	movs	r2, #3
 800b4d4:	4650      	mov	r0, sl
 800b4d6:	f7f4 ff0b 	bl	80002f0 <memchr>
 800b4da:	b140      	cbz	r0, 800b4ee <_svfiprintf_r+0x152>
 800b4dc:	2340      	movs	r3, #64	; 0x40
 800b4de:	eba0 000a 	sub.w	r0, r0, sl
 800b4e2:	fa03 f000 	lsl.w	r0, r3, r0
 800b4e6:	9b04      	ldr	r3, [sp, #16]
 800b4e8:	4303      	orrs	r3, r0
 800b4ea:	3401      	adds	r4, #1
 800b4ec:	9304      	str	r3, [sp, #16]
 800b4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f2:	4826      	ldr	r0, [pc, #152]	; (800b58c <_svfiprintf_r+0x1f0>)
 800b4f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4f8:	2206      	movs	r2, #6
 800b4fa:	f7f4 fef9 	bl	80002f0 <memchr>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d038      	beq.n	800b574 <_svfiprintf_r+0x1d8>
 800b502:	4b23      	ldr	r3, [pc, #140]	; (800b590 <_svfiprintf_r+0x1f4>)
 800b504:	bb1b      	cbnz	r3, 800b54e <_svfiprintf_r+0x1b2>
 800b506:	9b03      	ldr	r3, [sp, #12]
 800b508:	3307      	adds	r3, #7
 800b50a:	f023 0307 	bic.w	r3, r3, #7
 800b50e:	3308      	adds	r3, #8
 800b510:	9303      	str	r3, [sp, #12]
 800b512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b514:	4433      	add	r3, r6
 800b516:	9309      	str	r3, [sp, #36]	; 0x24
 800b518:	e767      	b.n	800b3ea <_svfiprintf_r+0x4e>
 800b51a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b51e:	460c      	mov	r4, r1
 800b520:	2001      	movs	r0, #1
 800b522:	e7a5      	b.n	800b470 <_svfiprintf_r+0xd4>
 800b524:	2300      	movs	r3, #0
 800b526:	3401      	adds	r4, #1
 800b528:	9305      	str	r3, [sp, #20]
 800b52a:	4619      	mov	r1, r3
 800b52c:	f04f 0c0a 	mov.w	ip, #10
 800b530:	4620      	mov	r0, r4
 800b532:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b536:	3a30      	subs	r2, #48	; 0x30
 800b538:	2a09      	cmp	r2, #9
 800b53a:	d903      	bls.n	800b544 <_svfiprintf_r+0x1a8>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d0c5      	beq.n	800b4cc <_svfiprintf_r+0x130>
 800b540:	9105      	str	r1, [sp, #20]
 800b542:	e7c3      	b.n	800b4cc <_svfiprintf_r+0x130>
 800b544:	fb0c 2101 	mla	r1, ip, r1, r2
 800b548:	4604      	mov	r4, r0
 800b54a:	2301      	movs	r3, #1
 800b54c:	e7f0      	b.n	800b530 <_svfiprintf_r+0x194>
 800b54e:	ab03      	add	r3, sp, #12
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	462a      	mov	r2, r5
 800b554:	4b0f      	ldr	r3, [pc, #60]	; (800b594 <_svfiprintf_r+0x1f8>)
 800b556:	a904      	add	r1, sp, #16
 800b558:	4638      	mov	r0, r7
 800b55a:	f7fe f861 	bl	8009620 <_printf_float>
 800b55e:	1c42      	adds	r2, r0, #1
 800b560:	4606      	mov	r6, r0
 800b562:	d1d6      	bne.n	800b512 <_svfiprintf_r+0x176>
 800b564:	89ab      	ldrh	r3, [r5, #12]
 800b566:	065b      	lsls	r3, r3, #25
 800b568:	f53f af2c 	bmi.w	800b3c4 <_svfiprintf_r+0x28>
 800b56c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b56e:	b01d      	add	sp, #116	; 0x74
 800b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	ab03      	add	r3, sp, #12
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	462a      	mov	r2, r5
 800b57a:	4b06      	ldr	r3, [pc, #24]	; (800b594 <_svfiprintf_r+0x1f8>)
 800b57c:	a904      	add	r1, sp, #16
 800b57e:	4638      	mov	r0, r7
 800b580:	f7fe fada 	bl	8009b38 <_printf_i>
 800b584:	e7eb      	b.n	800b55e <_svfiprintf_r+0x1c2>
 800b586:	bf00      	nop
 800b588:	0800c4ac 	.word	0x0800c4ac
 800b58c:	0800c4b6 	.word	0x0800c4b6
 800b590:	08009621 	.word	0x08009621
 800b594:	0800b2e5 	.word	0x0800b2e5
 800b598:	0800c4b2 	.word	0x0800c4b2

0800b59c <_sbrk_r>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	4d06      	ldr	r5, [pc, #24]	; (800b5b8 <_sbrk_r+0x1c>)
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	4608      	mov	r0, r1
 800b5a6:	602b      	str	r3, [r5, #0]
 800b5a8:	f7f6 f88a 	bl	80016c0 <_sbrk>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_sbrk_r+0x1a>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_sbrk_r+0x1a>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	240008a8 	.word	0x240008a8

0800b5bc <__assert_func>:
 800b5bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5be:	4614      	mov	r4, r2
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	4b09      	ldr	r3, [pc, #36]	; (800b5e8 <__assert_func+0x2c>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	68d8      	ldr	r0, [r3, #12]
 800b5ca:	b14c      	cbz	r4, 800b5e0 <__assert_func+0x24>
 800b5cc:	4b07      	ldr	r3, [pc, #28]	; (800b5ec <__assert_func+0x30>)
 800b5ce:	9100      	str	r1, [sp, #0]
 800b5d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5d4:	4906      	ldr	r1, [pc, #24]	; (800b5f0 <__assert_func+0x34>)
 800b5d6:	462b      	mov	r3, r5
 800b5d8:	f000 f80e 	bl	800b5f8 <fiprintf>
 800b5dc:	f000 faac 	bl	800bb38 <abort>
 800b5e0:	4b04      	ldr	r3, [pc, #16]	; (800b5f4 <__assert_func+0x38>)
 800b5e2:	461c      	mov	r4, r3
 800b5e4:	e7f3      	b.n	800b5ce <__assert_func+0x12>
 800b5e6:	bf00      	nop
 800b5e8:	24000010 	.word	0x24000010
 800b5ec:	0800c4bd 	.word	0x0800c4bd
 800b5f0:	0800c4ca 	.word	0x0800c4ca
 800b5f4:	0800c4f8 	.word	0x0800c4f8

0800b5f8 <fiprintf>:
 800b5f8:	b40e      	push	{r1, r2, r3}
 800b5fa:	b503      	push	{r0, r1, lr}
 800b5fc:	4601      	mov	r1, r0
 800b5fe:	ab03      	add	r3, sp, #12
 800b600:	4805      	ldr	r0, [pc, #20]	; (800b618 <fiprintf+0x20>)
 800b602:	f853 2b04 	ldr.w	r2, [r3], #4
 800b606:	6800      	ldr	r0, [r0, #0]
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	f000 f897 	bl	800b73c <_vfiprintf_r>
 800b60e:	b002      	add	sp, #8
 800b610:	f85d eb04 	ldr.w	lr, [sp], #4
 800b614:	b003      	add	sp, #12
 800b616:	4770      	bx	lr
 800b618:	24000010 	.word	0x24000010

0800b61c <__ascii_mbtowc>:
 800b61c:	b082      	sub	sp, #8
 800b61e:	b901      	cbnz	r1, 800b622 <__ascii_mbtowc+0x6>
 800b620:	a901      	add	r1, sp, #4
 800b622:	b142      	cbz	r2, 800b636 <__ascii_mbtowc+0x1a>
 800b624:	b14b      	cbz	r3, 800b63a <__ascii_mbtowc+0x1e>
 800b626:	7813      	ldrb	r3, [r2, #0]
 800b628:	600b      	str	r3, [r1, #0]
 800b62a:	7812      	ldrb	r2, [r2, #0]
 800b62c:	1e10      	subs	r0, r2, #0
 800b62e:	bf18      	it	ne
 800b630:	2001      	movne	r0, #1
 800b632:	b002      	add	sp, #8
 800b634:	4770      	bx	lr
 800b636:	4610      	mov	r0, r2
 800b638:	e7fb      	b.n	800b632 <__ascii_mbtowc+0x16>
 800b63a:	f06f 0001 	mvn.w	r0, #1
 800b63e:	e7f8      	b.n	800b632 <__ascii_mbtowc+0x16>

0800b640 <memmove>:
 800b640:	4288      	cmp	r0, r1
 800b642:	b510      	push	{r4, lr}
 800b644:	eb01 0402 	add.w	r4, r1, r2
 800b648:	d902      	bls.n	800b650 <memmove+0x10>
 800b64a:	4284      	cmp	r4, r0
 800b64c:	4623      	mov	r3, r4
 800b64e:	d807      	bhi.n	800b660 <memmove+0x20>
 800b650:	1e43      	subs	r3, r0, #1
 800b652:	42a1      	cmp	r1, r4
 800b654:	d008      	beq.n	800b668 <memmove+0x28>
 800b656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b65a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b65e:	e7f8      	b.n	800b652 <memmove+0x12>
 800b660:	4402      	add	r2, r0
 800b662:	4601      	mov	r1, r0
 800b664:	428a      	cmp	r2, r1
 800b666:	d100      	bne.n	800b66a <memmove+0x2a>
 800b668:	bd10      	pop	{r4, pc}
 800b66a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b66e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b672:	e7f7      	b.n	800b664 <memmove+0x24>

0800b674 <__malloc_lock>:
 800b674:	4801      	ldr	r0, [pc, #4]	; (800b67c <__malloc_lock+0x8>)
 800b676:	f000 bc1f 	b.w	800beb8 <__retarget_lock_acquire_recursive>
 800b67a:	bf00      	nop
 800b67c:	240008ac 	.word	0x240008ac

0800b680 <__malloc_unlock>:
 800b680:	4801      	ldr	r0, [pc, #4]	; (800b688 <__malloc_unlock+0x8>)
 800b682:	f000 bc1a 	b.w	800beba <__retarget_lock_release_recursive>
 800b686:	bf00      	nop
 800b688:	240008ac 	.word	0x240008ac

0800b68c <_realloc_r>:
 800b68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b690:	4680      	mov	r8, r0
 800b692:	4614      	mov	r4, r2
 800b694:	460e      	mov	r6, r1
 800b696:	b921      	cbnz	r1, 800b6a2 <_realloc_r+0x16>
 800b698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b69c:	4611      	mov	r1, r2
 800b69e:	f7ff bdad 	b.w	800b1fc <_malloc_r>
 800b6a2:	b92a      	cbnz	r2, 800b6b0 <_realloc_r+0x24>
 800b6a4:	f7ff fd3e 	bl	800b124 <_free_r>
 800b6a8:	4625      	mov	r5, r4
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b0:	f000 fc6a 	bl	800bf88 <_malloc_usable_size_r>
 800b6b4:	4284      	cmp	r4, r0
 800b6b6:	4607      	mov	r7, r0
 800b6b8:	d802      	bhi.n	800b6c0 <_realloc_r+0x34>
 800b6ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6be:	d812      	bhi.n	800b6e6 <_realloc_r+0x5a>
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	4640      	mov	r0, r8
 800b6c4:	f7ff fd9a 	bl	800b1fc <_malloc_r>
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d0ed      	beq.n	800b6aa <_realloc_r+0x1e>
 800b6ce:	42bc      	cmp	r4, r7
 800b6d0:	4622      	mov	r2, r4
 800b6d2:	4631      	mov	r1, r6
 800b6d4:	bf28      	it	cs
 800b6d6:	463a      	movcs	r2, r7
 800b6d8:	f7ff f97c 	bl	800a9d4 <memcpy>
 800b6dc:	4631      	mov	r1, r6
 800b6de:	4640      	mov	r0, r8
 800b6e0:	f7ff fd20 	bl	800b124 <_free_r>
 800b6e4:	e7e1      	b.n	800b6aa <_realloc_r+0x1e>
 800b6e6:	4635      	mov	r5, r6
 800b6e8:	e7df      	b.n	800b6aa <_realloc_r+0x1e>

0800b6ea <__sfputc_r>:
 800b6ea:	6893      	ldr	r3, [r2, #8]
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	b410      	push	{r4}
 800b6f2:	6093      	str	r3, [r2, #8]
 800b6f4:	da08      	bge.n	800b708 <__sfputc_r+0x1e>
 800b6f6:	6994      	ldr	r4, [r2, #24]
 800b6f8:	42a3      	cmp	r3, r4
 800b6fa:	db01      	blt.n	800b700 <__sfputc_r+0x16>
 800b6fc:	290a      	cmp	r1, #10
 800b6fe:	d103      	bne.n	800b708 <__sfputc_r+0x1e>
 800b700:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b704:	f000 b94a 	b.w	800b99c <__swbuf_r>
 800b708:	6813      	ldr	r3, [r2, #0]
 800b70a:	1c58      	adds	r0, r3, #1
 800b70c:	6010      	str	r0, [r2, #0]
 800b70e:	7019      	strb	r1, [r3, #0]
 800b710:	4608      	mov	r0, r1
 800b712:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <__sfputs_r>:
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71a:	4606      	mov	r6, r0
 800b71c:	460f      	mov	r7, r1
 800b71e:	4614      	mov	r4, r2
 800b720:	18d5      	adds	r5, r2, r3
 800b722:	42ac      	cmp	r4, r5
 800b724:	d101      	bne.n	800b72a <__sfputs_r+0x12>
 800b726:	2000      	movs	r0, #0
 800b728:	e007      	b.n	800b73a <__sfputs_r+0x22>
 800b72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b72e:	463a      	mov	r2, r7
 800b730:	4630      	mov	r0, r6
 800b732:	f7ff ffda 	bl	800b6ea <__sfputc_r>
 800b736:	1c43      	adds	r3, r0, #1
 800b738:	d1f3      	bne.n	800b722 <__sfputs_r+0xa>
 800b73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b73c <_vfiprintf_r>:
 800b73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	460d      	mov	r5, r1
 800b742:	b09d      	sub	sp, #116	; 0x74
 800b744:	4614      	mov	r4, r2
 800b746:	4698      	mov	r8, r3
 800b748:	4606      	mov	r6, r0
 800b74a:	b118      	cbz	r0, 800b754 <_vfiprintf_r+0x18>
 800b74c:	6983      	ldr	r3, [r0, #24]
 800b74e:	b90b      	cbnz	r3, 800b754 <_vfiprintf_r+0x18>
 800b750:	f000 fb14 	bl	800bd7c <__sinit>
 800b754:	4b89      	ldr	r3, [pc, #548]	; (800b97c <_vfiprintf_r+0x240>)
 800b756:	429d      	cmp	r5, r3
 800b758:	d11b      	bne.n	800b792 <_vfiprintf_r+0x56>
 800b75a:	6875      	ldr	r5, [r6, #4]
 800b75c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b75e:	07d9      	lsls	r1, r3, #31
 800b760:	d405      	bmi.n	800b76e <_vfiprintf_r+0x32>
 800b762:	89ab      	ldrh	r3, [r5, #12]
 800b764:	059a      	lsls	r2, r3, #22
 800b766:	d402      	bmi.n	800b76e <_vfiprintf_r+0x32>
 800b768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b76a:	f000 fba5 	bl	800beb8 <__retarget_lock_acquire_recursive>
 800b76e:	89ab      	ldrh	r3, [r5, #12]
 800b770:	071b      	lsls	r3, r3, #28
 800b772:	d501      	bpl.n	800b778 <_vfiprintf_r+0x3c>
 800b774:	692b      	ldr	r3, [r5, #16]
 800b776:	b9eb      	cbnz	r3, 800b7b4 <_vfiprintf_r+0x78>
 800b778:	4629      	mov	r1, r5
 800b77a:	4630      	mov	r0, r6
 800b77c:	f000 f96e 	bl	800ba5c <__swsetup_r>
 800b780:	b1c0      	cbz	r0, 800b7b4 <_vfiprintf_r+0x78>
 800b782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b784:	07dc      	lsls	r4, r3, #31
 800b786:	d50e      	bpl.n	800b7a6 <_vfiprintf_r+0x6a>
 800b788:	f04f 30ff 	mov.w	r0, #4294967295
 800b78c:	b01d      	add	sp, #116	; 0x74
 800b78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b792:	4b7b      	ldr	r3, [pc, #492]	; (800b980 <_vfiprintf_r+0x244>)
 800b794:	429d      	cmp	r5, r3
 800b796:	d101      	bne.n	800b79c <_vfiprintf_r+0x60>
 800b798:	68b5      	ldr	r5, [r6, #8]
 800b79a:	e7df      	b.n	800b75c <_vfiprintf_r+0x20>
 800b79c:	4b79      	ldr	r3, [pc, #484]	; (800b984 <_vfiprintf_r+0x248>)
 800b79e:	429d      	cmp	r5, r3
 800b7a0:	bf08      	it	eq
 800b7a2:	68f5      	ldreq	r5, [r6, #12]
 800b7a4:	e7da      	b.n	800b75c <_vfiprintf_r+0x20>
 800b7a6:	89ab      	ldrh	r3, [r5, #12]
 800b7a8:	0598      	lsls	r0, r3, #22
 800b7aa:	d4ed      	bmi.n	800b788 <_vfiprintf_r+0x4c>
 800b7ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7ae:	f000 fb84 	bl	800beba <__retarget_lock_release_recursive>
 800b7b2:	e7e9      	b.n	800b788 <_vfiprintf_r+0x4c>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b8:	2320      	movs	r3, #32
 800b7ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7c2:	2330      	movs	r3, #48	; 0x30
 800b7c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b988 <_vfiprintf_r+0x24c>
 800b7c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7cc:	f04f 0901 	mov.w	r9, #1
 800b7d0:	4623      	mov	r3, r4
 800b7d2:	469a      	mov	sl, r3
 800b7d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7d8:	b10a      	cbz	r2, 800b7de <_vfiprintf_r+0xa2>
 800b7da:	2a25      	cmp	r2, #37	; 0x25
 800b7dc:	d1f9      	bne.n	800b7d2 <_vfiprintf_r+0x96>
 800b7de:	ebba 0b04 	subs.w	fp, sl, r4
 800b7e2:	d00b      	beq.n	800b7fc <_vfiprintf_r+0xc0>
 800b7e4:	465b      	mov	r3, fp
 800b7e6:	4622      	mov	r2, r4
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f7ff ff94 	bl	800b718 <__sfputs_r>
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	f000 80aa 	beq.w	800b94a <_vfiprintf_r+0x20e>
 800b7f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7f8:	445a      	add	r2, fp
 800b7fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b7fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b800:	2b00      	cmp	r3, #0
 800b802:	f000 80a2 	beq.w	800b94a <_vfiprintf_r+0x20e>
 800b806:	2300      	movs	r3, #0
 800b808:	f04f 32ff 	mov.w	r2, #4294967295
 800b80c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b810:	f10a 0a01 	add.w	sl, sl, #1
 800b814:	9304      	str	r3, [sp, #16]
 800b816:	9307      	str	r3, [sp, #28]
 800b818:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b81c:	931a      	str	r3, [sp, #104]	; 0x68
 800b81e:	4654      	mov	r4, sl
 800b820:	2205      	movs	r2, #5
 800b822:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b826:	4858      	ldr	r0, [pc, #352]	; (800b988 <_vfiprintf_r+0x24c>)
 800b828:	f7f4 fd62 	bl	80002f0 <memchr>
 800b82c:	9a04      	ldr	r2, [sp, #16]
 800b82e:	b9d8      	cbnz	r0, 800b868 <_vfiprintf_r+0x12c>
 800b830:	06d1      	lsls	r1, r2, #27
 800b832:	bf44      	itt	mi
 800b834:	2320      	movmi	r3, #32
 800b836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b83a:	0713      	lsls	r3, r2, #28
 800b83c:	bf44      	itt	mi
 800b83e:	232b      	movmi	r3, #43	; 0x2b
 800b840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b844:	f89a 3000 	ldrb.w	r3, [sl]
 800b848:	2b2a      	cmp	r3, #42	; 0x2a
 800b84a:	d015      	beq.n	800b878 <_vfiprintf_r+0x13c>
 800b84c:	9a07      	ldr	r2, [sp, #28]
 800b84e:	4654      	mov	r4, sl
 800b850:	2000      	movs	r0, #0
 800b852:	f04f 0c0a 	mov.w	ip, #10
 800b856:	4621      	mov	r1, r4
 800b858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b85c:	3b30      	subs	r3, #48	; 0x30
 800b85e:	2b09      	cmp	r3, #9
 800b860:	d94e      	bls.n	800b900 <_vfiprintf_r+0x1c4>
 800b862:	b1b0      	cbz	r0, 800b892 <_vfiprintf_r+0x156>
 800b864:	9207      	str	r2, [sp, #28]
 800b866:	e014      	b.n	800b892 <_vfiprintf_r+0x156>
 800b868:	eba0 0308 	sub.w	r3, r0, r8
 800b86c:	fa09 f303 	lsl.w	r3, r9, r3
 800b870:	4313      	orrs	r3, r2
 800b872:	9304      	str	r3, [sp, #16]
 800b874:	46a2      	mov	sl, r4
 800b876:	e7d2      	b.n	800b81e <_vfiprintf_r+0xe2>
 800b878:	9b03      	ldr	r3, [sp, #12]
 800b87a:	1d19      	adds	r1, r3, #4
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	9103      	str	r1, [sp, #12]
 800b880:	2b00      	cmp	r3, #0
 800b882:	bfbb      	ittet	lt
 800b884:	425b      	neglt	r3, r3
 800b886:	f042 0202 	orrlt.w	r2, r2, #2
 800b88a:	9307      	strge	r3, [sp, #28]
 800b88c:	9307      	strlt	r3, [sp, #28]
 800b88e:	bfb8      	it	lt
 800b890:	9204      	strlt	r2, [sp, #16]
 800b892:	7823      	ldrb	r3, [r4, #0]
 800b894:	2b2e      	cmp	r3, #46	; 0x2e
 800b896:	d10c      	bne.n	800b8b2 <_vfiprintf_r+0x176>
 800b898:	7863      	ldrb	r3, [r4, #1]
 800b89a:	2b2a      	cmp	r3, #42	; 0x2a
 800b89c:	d135      	bne.n	800b90a <_vfiprintf_r+0x1ce>
 800b89e:	9b03      	ldr	r3, [sp, #12]
 800b8a0:	1d1a      	adds	r2, r3, #4
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	9203      	str	r2, [sp, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	bfb8      	it	lt
 800b8aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8ae:	3402      	adds	r4, #2
 800b8b0:	9305      	str	r3, [sp, #20]
 800b8b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b998 <_vfiprintf_r+0x25c>
 800b8b6:	7821      	ldrb	r1, [r4, #0]
 800b8b8:	2203      	movs	r2, #3
 800b8ba:	4650      	mov	r0, sl
 800b8bc:	f7f4 fd18 	bl	80002f0 <memchr>
 800b8c0:	b140      	cbz	r0, 800b8d4 <_vfiprintf_r+0x198>
 800b8c2:	2340      	movs	r3, #64	; 0x40
 800b8c4:	eba0 000a 	sub.w	r0, r0, sl
 800b8c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b8cc:	9b04      	ldr	r3, [sp, #16]
 800b8ce:	4303      	orrs	r3, r0
 800b8d0:	3401      	adds	r4, #1
 800b8d2:	9304      	str	r3, [sp, #16]
 800b8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8d8:	482c      	ldr	r0, [pc, #176]	; (800b98c <_vfiprintf_r+0x250>)
 800b8da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8de:	2206      	movs	r2, #6
 800b8e0:	f7f4 fd06 	bl	80002f0 <memchr>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d03f      	beq.n	800b968 <_vfiprintf_r+0x22c>
 800b8e8:	4b29      	ldr	r3, [pc, #164]	; (800b990 <_vfiprintf_r+0x254>)
 800b8ea:	bb1b      	cbnz	r3, 800b934 <_vfiprintf_r+0x1f8>
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	3307      	adds	r3, #7
 800b8f0:	f023 0307 	bic.w	r3, r3, #7
 800b8f4:	3308      	adds	r3, #8
 800b8f6:	9303      	str	r3, [sp, #12]
 800b8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8fa:	443b      	add	r3, r7
 800b8fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b8fe:	e767      	b.n	800b7d0 <_vfiprintf_r+0x94>
 800b900:	fb0c 3202 	mla	r2, ip, r2, r3
 800b904:	460c      	mov	r4, r1
 800b906:	2001      	movs	r0, #1
 800b908:	e7a5      	b.n	800b856 <_vfiprintf_r+0x11a>
 800b90a:	2300      	movs	r3, #0
 800b90c:	3401      	adds	r4, #1
 800b90e:	9305      	str	r3, [sp, #20]
 800b910:	4619      	mov	r1, r3
 800b912:	f04f 0c0a 	mov.w	ip, #10
 800b916:	4620      	mov	r0, r4
 800b918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b91c:	3a30      	subs	r2, #48	; 0x30
 800b91e:	2a09      	cmp	r2, #9
 800b920:	d903      	bls.n	800b92a <_vfiprintf_r+0x1ee>
 800b922:	2b00      	cmp	r3, #0
 800b924:	d0c5      	beq.n	800b8b2 <_vfiprintf_r+0x176>
 800b926:	9105      	str	r1, [sp, #20]
 800b928:	e7c3      	b.n	800b8b2 <_vfiprintf_r+0x176>
 800b92a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b92e:	4604      	mov	r4, r0
 800b930:	2301      	movs	r3, #1
 800b932:	e7f0      	b.n	800b916 <_vfiprintf_r+0x1da>
 800b934:	ab03      	add	r3, sp, #12
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	462a      	mov	r2, r5
 800b93a:	4b16      	ldr	r3, [pc, #88]	; (800b994 <_vfiprintf_r+0x258>)
 800b93c:	a904      	add	r1, sp, #16
 800b93e:	4630      	mov	r0, r6
 800b940:	f7fd fe6e 	bl	8009620 <_printf_float>
 800b944:	4607      	mov	r7, r0
 800b946:	1c78      	adds	r0, r7, #1
 800b948:	d1d6      	bne.n	800b8f8 <_vfiprintf_r+0x1bc>
 800b94a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b94c:	07d9      	lsls	r1, r3, #31
 800b94e:	d405      	bmi.n	800b95c <_vfiprintf_r+0x220>
 800b950:	89ab      	ldrh	r3, [r5, #12]
 800b952:	059a      	lsls	r2, r3, #22
 800b954:	d402      	bmi.n	800b95c <_vfiprintf_r+0x220>
 800b956:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b958:	f000 faaf 	bl	800beba <__retarget_lock_release_recursive>
 800b95c:	89ab      	ldrh	r3, [r5, #12]
 800b95e:	065b      	lsls	r3, r3, #25
 800b960:	f53f af12 	bmi.w	800b788 <_vfiprintf_r+0x4c>
 800b964:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b966:	e711      	b.n	800b78c <_vfiprintf_r+0x50>
 800b968:	ab03      	add	r3, sp, #12
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	462a      	mov	r2, r5
 800b96e:	4b09      	ldr	r3, [pc, #36]	; (800b994 <_vfiprintf_r+0x258>)
 800b970:	a904      	add	r1, sp, #16
 800b972:	4630      	mov	r0, r6
 800b974:	f7fe f8e0 	bl	8009b38 <_printf_i>
 800b978:	e7e4      	b.n	800b944 <_vfiprintf_r+0x208>
 800b97a:	bf00      	nop
 800b97c:	0800c624 	.word	0x0800c624
 800b980:	0800c644 	.word	0x0800c644
 800b984:	0800c604 	.word	0x0800c604
 800b988:	0800c4ac 	.word	0x0800c4ac
 800b98c:	0800c4b6 	.word	0x0800c4b6
 800b990:	08009621 	.word	0x08009621
 800b994:	0800b719 	.word	0x0800b719
 800b998:	0800c4b2 	.word	0x0800c4b2

0800b99c <__swbuf_r>:
 800b99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99e:	460e      	mov	r6, r1
 800b9a0:	4614      	mov	r4, r2
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	b118      	cbz	r0, 800b9ae <__swbuf_r+0x12>
 800b9a6:	6983      	ldr	r3, [r0, #24]
 800b9a8:	b90b      	cbnz	r3, 800b9ae <__swbuf_r+0x12>
 800b9aa:	f000 f9e7 	bl	800bd7c <__sinit>
 800b9ae:	4b21      	ldr	r3, [pc, #132]	; (800ba34 <__swbuf_r+0x98>)
 800b9b0:	429c      	cmp	r4, r3
 800b9b2:	d12b      	bne.n	800ba0c <__swbuf_r+0x70>
 800b9b4:	686c      	ldr	r4, [r5, #4]
 800b9b6:	69a3      	ldr	r3, [r4, #24]
 800b9b8:	60a3      	str	r3, [r4, #8]
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	071a      	lsls	r2, r3, #28
 800b9be:	d52f      	bpl.n	800ba20 <__swbuf_r+0x84>
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	b36b      	cbz	r3, 800ba20 <__swbuf_r+0x84>
 800b9c4:	6923      	ldr	r3, [r4, #16]
 800b9c6:	6820      	ldr	r0, [r4, #0]
 800b9c8:	1ac0      	subs	r0, r0, r3
 800b9ca:	6963      	ldr	r3, [r4, #20]
 800b9cc:	b2f6      	uxtb	r6, r6
 800b9ce:	4283      	cmp	r3, r0
 800b9d0:	4637      	mov	r7, r6
 800b9d2:	dc04      	bgt.n	800b9de <__swbuf_r+0x42>
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	f000 f93c 	bl	800bc54 <_fflush_r>
 800b9dc:	bb30      	cbnz	r0, 800ba2c <__swbuf_r+0x90>
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	60a3      	str	r3, [r4, #8]
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	6022      	str	r2, [r4, #0]
 800b9ea:	701e      	strb	r6, [r3, #0]
 800b9ec:	6963      	ldr	r3, [r4, #20]
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	4283      	cmp	r3, r0
 800b9f2:	d004      	beq.n	800b9fe <__swbuf_r+0x62>
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	07db      	lsls	r3, r3, #31
 800b9f8:	d506      	bpl.n	800ba08 <__swbuf_r+0x6c>
 800b9fa:	2e0a      	cmp	r6, #10
 800b9fc:	d104      	bne.n	800ba08 <__swbuf_r+0x6c>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4628      	mov	r0, r5
 800ba02:	f000 f927 	bl	800bc54 <_fflush_r>
 800ba06:	b988      	cbnz	r0, 800ba2c <__swbuf_r+0x90>
 800ba08:	4638      	mov	r0, r7
 800ba0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba0c:	4b0a      	ldr	r3, [pc, #40]	; (800ba38 <__swbuf_r+0x9c>)
 800ba0e:	429c      	cmp	r4, r3
 800ba10:	d101      	bne.n	800ba16 <__swbuf_r+0x7a>
 800ba12:	68ac      	ldr	r4, [r5, #8]
 800ba14:	e7cf      	b.n	800b9b6 <__swbuf_r+0x1a>
 800ba16:	4b09      	ldr	r3, [pc, #36]	; (800ba3c <__swbuf_r+0xa0>)
 800ba18:	429c      	cmp	r4, r3
 800ba1a:	bf08      	it	eq
 800ba1c:	68ec      	ldreq	r4, [r5, #12]
 800ba1e:	e7ca      	b.n	800b9b6 <__swbuf_r+0x1a>
 800ba20:	4621      	mov	r1, r4
 800ba22:	4628      	mov	r0, r5
 800ba24:	f000 f81a 	bl	800ba5c <__swsetup_r>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d0cb      	beq.n	800b9c4 <__swbuf_r+0x28>
 800ba2c:	f04f 37ff 	mov.w	r7, #4294967295
 800ba30:	e7ea      	b.n	800ba08 <__swbuf_r+0x6c>
 800ba32:	bf00      	nop
 800ba34:	0800c624 	.word	0x0800c624
 800ba38:	0800c644 	.word	0x0800c644
 800ba3c:	0800c604 	.word	0x0800c604

0800ba40 <__ascii_wctomb>:
 800ba40:	b149      	cbz	r1, 800ba56 <__ascii_wctomb+0x16>
 800ba42:	2aff      	cmp	r2, #255	; 0xff
 800ba44:	bf85      	ittet	hi
 800ba46:	238a      	movhi	r3, #138	; 0x8a
 800ba48:	6003      	strhi	r3, [r0, #0]
 800ba4a:	700a      	strbls	r2, [r1, #0]
 800ba4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba50:	bf98      	it	ls
 800ba52:	2001      	movls	r0, #1
 800ba54:	4770      	bx	lr
 800ba56:	4608      	mov	r0, r1
 800ba58:	4770      	bx	lr
	...

0800ba5c <__swsetup_r>:
 800ba5c:	4b32      	ldr	r3, [pc, #200]	; (800bb28 <__swsetup_r+0xcc>)
 800ba5e:	b570      	push	{r4, r5, r6, lr}
 800ba60:	681d      	ldr	r5, [r3, #0]
 800ba62:	4606      	mov	r6, r0
 800ba64:	460c      	mov	r4, r1
 800ba66:	b125      	cbz	r5, 800ba72 <__swsetup_r+0x16>
 800ba68:	69ab      	ldr	r3, [r5, #24]
 800ba6a:	b913      	cbnz	r3, 800ba72 <__swsetup_r+0x16>
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	f000 f985 	bl	800bd7c <__sinit>
 800ba72:	4b2e      	ldr	r3, [pc, #184]	; (800bb2c <__swsetup_r+0xd0>)
 800ba74:	429c      	cmp	r4, r3
 800ba76:	d10f      	bne.n	800ba98 <__swsetup_r+0x3c>
 800ba78:	686c      	ldr	r4, [r5, #4]
 800ba7a:	89a3      	ldrh	r3, [r4, #12]
 800ba7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba80:	0719      	lsls	r1, r3, #28
 800ba82:	d42c      	bmi.n	800bade <__swsetup_r+0x82>
 800ba84:	06dd      	lsls	r5, r3, #27
 800ba86:	d411      	bmi.n	800baac <__swsetup_r+0x50>
 800ba88:	2309      	movs	r3, #9
 800ba8a:	6033      	str	r3, [r6, #0]
 800ba8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba90:	81a3      	strh	r3, [r4, #12]
 800ba92:	f04f 30ff 	mov.w	r0, #4294967295
 800ba96:	e03e      	b.n	800bb16 <__swsetup_r+0xba>
 800ba98:	4b25      	ldr	r3, [pc, #148]	; (800bb30 <__swsetup_r+0xd4>)
 800ba9a:	429c      	cmp	r4, r3
 800ba9c:	d101      	bne.n	800baa2 <__swsetup_r+0x46>
 800ba9e:	68ac      	ldr	r4, [r5, #8]
 800baa0:	e7eb      	b.n	800ba7a <__swsetup_r+0x1e>
 800baa2:	4b24      	ldr	r3, [pc, #144]	; (800bb34 <__swsetup_r+0xd8>)
 800baa4:	429c      	cmp	r4, r3
 800baa6:	bf08      	it	eq
 800baa8:	68ec      	ldreq	r4, [r5, #12]
 800baaa:	e7e6      	b.n	800ba7a <__swsetup_r+0x1e>
 800baac:	0758      	lsls	r0, r3, #29
 800baae:	d512      	bpl.n	800bad6 <__swsetup_r+0x7a>
 800bab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bab2:	b141      	cbz	r1, 800bac6 <__swsetup_r+0x6a>
 800bab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bab8:	4299      	cmp	r1, r3
 800baba:	d002      	beq.n	800bac2 <__swsetup_r+0x66>
 800babc:	4630      	mov	r0, r6
 800babe:	f7ff fb31 	bl	800b124 <_free_r>
 800bac2:	2300      	movs	r3, #0
 800bac4:	6363      	str	r3, [r4, #52]	; 0x34
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bacc:	81a3      	strh	r3, [r4, #12]
 800bace:	2300      	movs	r3, #0
 800bad0:	6063      	str	r3, [r4, #4]
 800bad2:	6923      	ldr	r3, [r4, #16]
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	89a3      	ldrh	r3, [r4, #12]
 800bad8:	f043 0308 	orr.w	r3, r3, #8
 800badc:	81a3      	strh	r3, [r4, #12]
 800bade:	6923      	ldr	r3, [r4, #16]
 800bae0:	b94b      	cbnz	r3, 800baf6 <__swsetup_r+0x9a>
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baec:	d003      	beq.n	800baf6 <__swsetup_r+0x9a>
 800baee:	4621      	mov	r1, r4
 800baf0:	4630      	mov	r0, r6
 800baf2:	f000 fa09 	bl	800bf08 <__smakebuf_r>
 800baf6:	89a0      	ldrh	r0, [r4, #12]
 800baf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bafc:	f010 0301 	ands.w	r3, r0, #1
 800bb00:	d00a      	beq.n	800bb18 <__swsetup_r+0xbc>
 800bb02:	2300      	movs	r3, #0
 800bb04:	60a3      	str	r3, [r4, #8]
 800bb06:	6963      	ldr	r3, [r4, #20]
 800bb08:	425b      	negs	r3, r3
 800bb0a:	61a3      	str	r3, [r4, #24]
 800bb0c:	6923      	ldr	r3, [r4, #16]
 800bb0e:	b943      	cbnz	r3, 800bb22 <__swsetup_r+0xc6>
 800bb10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb14:	d1ba      	bne.n	800ba8c <__swsetup_r+0x30>
 800bb16:	bd70      	pop	{r4, r5, r6, pc}
 800bb18:	0781      	lsls	r1, r0, #30
 800bb1a:	bf58      	it	pl
 800bb1c:	6963      	ldrpl	r3, [r4, #20]
 800bb1e:	60a3      	str	r3, [r4, #8]
 800bb20:	e7f4      	b.n	800bb0c <__swsetup_r+0xb0>
 800bb22:	2000      	movs	r0, #0
 800bb24:	e7f7      	b.n	800bb16 <__swsetup_r+0xba>
 800bb26:	bf00      	nop
 800bb28:	24000010 	.word	0x24000010
 800bb2c:	0800c624 	.word	0x0800c624
 800bb30:	0800c644 	.word	0x0800c644
 800bb34:	0800c604 	.word	0x0800c604

0800bb38 <abort>:
 800bb38:	b508      	push	{r3, lr}
 800bb3a:	2006      	movs	r0, #6
 800bb3c:	f000 fa54 	bl	800bfe8 <raise>
 800bb40:	2001      	movs	r0, #1
 800bb42:	f7f5 fd45 	bl	80015d0 <_exit>
	...

0800bb48 <__sflush_r>:
 800bb48:	898a      	ldrh	r2, [r1, #12]
 800bb4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4e:	4605      	mov	r5, r0
 800bb50:	0710      	lsls	r0, r2, #28
 800bb52:	460c      	mov	r4, r1
 800bb54:	d458      	bmi.n	800bc08 <__sflush_r+0xc0>
 800bb56:	684b      	ldr	r3, [r1, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	dc05      	bgt.n	800bb68 <__sflush_r+0x20>
 800bb5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	dc02      	bgt.n	800bb68 <__sflush_r+0x20>
 800bb62:	2000      	movs	r0, #0
 800bb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb6a:	2e00      	cmp	r6, #0
 800bb6c:	d0f9      	beq.n	800bb62 <__sflush_r+0x1a>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb74:	682f      	ldr	r7, [r5, #0]
 800bb76:	602b      	str	r3, [r5, #0]
 800bb78:	d032      	beq.n	800bbe0 <__sflush_r+0x98>
 800bb7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	075a      	lsls	r2, r3, #29
 800bb80:	d505      	bpl.n	800bb8e <__sflush_r+0x46>
 800bb82:	6863      	ldr	r3, [r4, #4]
 800bb84:	1ac0      	subs	r0, r0, r3
 800bb86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb88:	b10b      	cbz	r3, 800bb8e <__sflush_r+0x46>
 800bb8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb8c:	1ac0      	subs	r0, r0, r3
 800bb8e:	2300      	movs	r3, #0
 800bb90:	4602      	mov	r2, r0
 800bb92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb94:	6a21      	ldr	r1, [r4, #32]
 800bb96:	4628      	mov	r0, r5
 800bb98:	47b0      	blx	r6
 800bb9a:	1c43      	adds	r3, r0, #1
 800bb9c:	89a3      	ldrh	r3, [r4, #12]
 800bb9e:	d106      	bne.n	800bbae <__sflush_r+0x66>
 800bba0:	6829      	ldr	r1, [r5, #0]
 800bba2:	291d      	cmp	r1, #29
 800bba4:	d82c      	bhi.n	800bc00 <__sflush_r+0xb8>
 800bba6:	4a2a      	ldr	r2, [pc, #168]	; (800bc50 <__sflush_r+0x108>)
 800bba8:	40ca      	lsrs	r2, r1
 800bbaa:	07d6      	lsls	r6, r2, #31
 800bbac:	d528      	bpl.n	800bc00 <__sflush_r+0xb8>
 800bbae:	2200      	movs	r2, #0
 800bbb0:	6062      	str	r2, [r4, #4]
 800bbb2:	04d9      	lsls	r1, r3, #19
 800bbb4:	6922      	ldr	r2, [r4, #16]
 800bbb6:	6022      	str	r2, [r4, #0]
 800bbb8:	d504      	bpl.n	800bbc4 <__sflush_r+0x7c>
 800bbba:	1c42      	adds	r2, r0, #1
 800bbbc:	d101      	bne.n	800bbc2 <__sflush_r+0x7a>
 800bbbe:	682b      	ldr	r3, [r5, #0]
 800bbc0:	b903      	cbnz	r3, 800bbc4 <__sflush_r+0x7c>
 800bbc2:	6560      	str	r0, [r4, #84]	; 0x54
 800bbc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbc6:	602f      	str	r7, [r5, #0]
 800bbc8:	2900      	cmp	r1, #0
 800bbca:	d0ca      	beq.n	800bb62 <__sflush_r+0x1a>
 800bbcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbd0:	4299      	cmp	r1, r3
 800bbd2:	d002      	beq.n	800bbda <__sflush_r+0x92>
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f7ff faa5 	bl	800b124 <_free_r>
 800bbda:	2000      	movs	r0, #0
 800bbdc:	6360      	str	r0, [r4, #52]	; 0x34
 800bbde:	e7c1      	b.n	800bb64 <__sflush_r+0x1c>
 800bbe0:	6a21      	ldr	r1, [r4, #32]
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	47b0      	blx	r6
 800bbe8:	1c41      	adds	r1, r0, #1
 800bbea:	d1c7      	bne.n	800bb7c <__sflush_r+0x34>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d0c4      	beq.n	800bb7c <__sflush_r+0x34>
 800bbf2:	2b1d      	cmp	r3, #29
 800bbf4:	d001      	beq.n	800bbfa <__sflush_r+0xb2>
 800bbf6:	2b16      	cmp	r3, #22
 800bbf8:	d101      	bne.n	800bbfe <__sflush_r+0xb6>
 800bbfa:	602f      	str	r7, [r5, #0]
 800bbfc:	e7b1      	b.n	800bb62 <__sflush_r+0x1a>
 800bbfe:	89a3      	ldrh	r3, [r4, #12]
 800bc00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc04:	81a3      	strh	r3, [r4, #12]
 800bc06:	e7ad      	b.n	800bb64 <__sflush_r+0x1c>
 800bc08:	690f      	ldr	r7, [r1, #16]
 800bc0a:	2f00      	cmp	r7, #0
 800bc0c:	d0a9      	beq.n	800bb62 <__sflush_r+0x1a>
 800bc0e:	0793      	lsls	r3, r2, #30
 800bc10:	680e      	ldr	r6, [r1, #0]
 800bc12:	bf08      	it	eq
 800bc14:	694b      	ldreq	r3, [r1, #20]
 800bc16:	600f      	str	r7, [r1, #0]
 800bc18:	bf18      	it	ne
 800bc1a:	2300      	movne	r3, #0
 800bc1c:	eba6 0807 	sub.w	r8, r6, r7
 800bc20:	608b      	str	r3, [r1, #8]
 800bc22:	f1b8 0f00 	cmp.w	r8, #0
 800bc26:	dd9c      	ble.n	800bb62 <__sflush_r+0x1a>
 800bc28:	6a21      	ldr	r1, [r4, #32]
 800bc2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc2c:	4643      	mov	r3, r8
 800bc2e:	463a      	mov	r2, r7
 800bc30:	4628      	mov	r0, r5
 800bc32:	47b0      	blx	r6
 800bc34:	2800      	cmp	r0, #0
 800bc36:	dc06      	bgt.n	800bc46 <__sflush_r+0xfe>
 800bc38:	89a3      	ldrh	r3, [r4, #12]
 800bc3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc3e:	81a3      	strh	r3, [r4, #12]
 800bc40:	f04f 30ff 	mov.w	r0, #4294967295
 800bc44:	e78e      	b.n	800bb64 <__sflush_r+0x1c>
 800bc46:	4407      	add	r7, r0
 800bc48:	eba8 0800 	sub.w	r8, r8, r0
 800bc4c:	e7e9      	b.n	800bc22 <__sflush_r+0xda>
 800bc4e:	bf00      	nop
 800bc50:	20400001 	.word	0x20400001

0800bc54 <_fflush_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	690b      	ldr	r3, [r1, #16]
 800bc58:	4605      	mov	r5, r0
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	b913      	cbnz	r3, 800bc64 <_fflush_r+0x10>
 800bc5e:	2500      	movs	r5, #0
 800bc60:	4628      	mov	r0, r5
 800bc62:	bd38      	pop	{r3, r4, r5, pc}
 800bc64:	b118      	cbz	r0, 800bc6e <_fflush_r+0x1a>
 800bc66:	6983      	ldr	r3, [r0, #24]
 800bc68:	b90b      	cbnz	r3, 800bc6e <_fflush_r+0x1a>
 800bc6a:	f000 f887 	bl	800bd7c <__sinit>
 800bc6e:	4b14      	ldr	r3, [pc, #80]	; (800bcc0 <_fflush_r+0x6c>)
 800bc70:	429c      	cmp	r4, r3
 800bc72:	d11b      	bne.n	800bcac <_fflush_r+0x58>
 800bc74:	686c      	ldr	r4, [r5, #4]
 800bc76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d0ef      	beq.n	800bc5e <_fflush_r+0xa>
 800bc7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc80:	07d0      	lsls	r0, r2, #31
 800bc82:	d404      	bmi.n	800bc8e <_fflush_r+0x3a>
 800bc84:	0599      	lsls	r1, r3, #22
 800bc86:	d402      	bmi.n	800bc8e <_fflush_r+0x3a>
 800bc88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc8a:	f000 f915 	bl	800beb8 <__retarget_lock_acquire_recursive>
 800bc8e:	4628      	mov	r0, r5
 800bc90:	4621      	mov	r1, r4
 800bc92:	f7ff ff59 	bl	800bb48 <__sflush_r>
 800bc96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc98:	07da      	lsls	r2, r3, #31
 800bc9a:	4605      	mov	r5, r0
 800bc9c:	d4e0      	bmi.n	800bc60 <_fflush_r+0xc>
 800bc9e:	89a3      	ldrh	r3, [r4, #12]
 800bca0:	059b      	lsls	r3, r3, #22
 800bca2:	d4dd      	bmi.n	800bc60 <_fflush_r+0xc>
 800bca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bca6:	f000 f908 	bl	800beba <__retarget_lock_release_recursive>
 800bcaa:	e7d9      	b.n	800bc60 <_fflush_r+0xc>
 800bcac:	4b05      	ldr	r3, [pc, #20]	; (800bcc4 <_fflush_r+0x70>)
 800bcae:	429c      	cmp	r4, r3
 800bcb0:	d101      	bne.n	800bcb6 <_fflush_r+0x62>
 800bcb2:	68ac      	ldr	r4, [r5, #8]
 800bcb4:	e7df      	b.n	800bc76 <_fflush_r+0x22>
 800bcb6:	4b04      	ldr	r3, [pc, #16]	; (800bcc8 <_fflush_r+0x74>)
 800bcb8:	429c      	cmp	r4, r3
 800bcba:	bf08      	it	eq
 800bcbc:	68ec      	ldreq	r4, [r5, #12]
 800bcbe:	e7da      	b.n	800bc76 <_fflush_r+0x22>
 800bcc0:	0800c624 	.word	0x0800c624
 800bcc4:	0800c644 	.word	0x0800c644
 800bcc8:	0800c604 	.word	0x0800c604

0800bccc <std>:
 800bccc:	2300      	movs	r3, #0
 800bcce:	b510      	push	{r4, lr}
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	e9c0 3300 	strd	r3, r3, [r0]
 800bcd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcda:	6083      	str	r3, [r0, #8]
 800bcdc:	8181      	strh	r1, [r0, #12]
 800bcde:	6643      	str	r3, [r0, #100]	; 0x64
 800bce0:	81c2      	strh	r2, [r0, #14]
 800bce2:	6183      	str	r3, [r0, #24]
 800bce4:	4619      	mov	r1, r3
 800bce6:	2208      	movs	r2, #8
 800bce8:	305c      	adds	r0, #92	; 0x5c
 800bcea:	f7fd fc01 	bl	80094f0 <memset>
 800bcee:	4b05      	ldr	r3, [pc, #20]	; (800bd04 <std+0x38>)
 800bcf0:	6263      	str	r3, [r4, #36]	; 0x24
 800bcf2:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <std+0x3c>)
 800bcf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcf6:	4b05      	ldr	r3, [pc, #20]	; (800bd0c <std+0x40>)
 800bcf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcfa:	4b05      	ldr	r3, [pc, #20]	; (800bd10 <std+0x44>)
 800bcfc:	6224      	str	r4, [r4, #32]
 800bcfe:	6323      	str	r3, [r4, #48]	; 0x30
 800bd00:	bd10      	pop	{r4, pc}
 800bd02:	bf00      	nop
 800bd04:	0800c021 	.word	0x0800c021
 800bd08:	0800c043 	.word	0x0800c043
 800bd0c:	0800c07b 	.word	0x0800c07b
 800bd10:	0800c09f 	.word	0x0800c09f

0800bd14 <_cleanup_r>:
 800bd14:	4901      	ldr	r1, [pc, #4]	; (800bd1c <_cleanup_r+0x8>)
 800bd16:	f000 b8af 	b.w	800be78 <_fwalk_reent>
 800bd1a:	bf00      	nop
 800bd1c:	0800bc55 	.word	0x0800bc55

0800bd20 <__sfmoreglue>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	2268      	movs	r2, #104	; 0x68
 800bd24:	1e4d      	subs	r5, r1, #1
 800bd26:	4355      	muls	r5, r2
 800bd28:	460e      	mov	r6, r1
 800bd2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd2e:	f7ff fa65 	bl	800b1fc <_malloc_r>
 800bd32:	4604      	mov	r4, r0
 800bd34:	b140      	cbz	r0, 800bd48 <__sfmoreglue+0x28>
 800bd36:	2100      	movs	r1, #0
 800bd38:	e9c0 1600 	strd	r1, r6, [r0]
 800bd3c:	300c      	adds	r0, #12
 800bd3e:	60a0      	str	r0, [r4, #8]
 800bd40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd44:	f7fd fbd4 	bl	80094f0 <memset>
 800bd48:	4620      	mov	r0, r4
 800bd4a:	bd70      	pop	{r4, r5, r6, pc}

0800bd4c <__sfp_lock_acquire>:
 800bd4c:	4801      	ldr	r0, [pc, #4]	; (800bd54 <__sfp_lock_acquire+0x8>)
 800bd4e:	f000 b8b3 	b.w	800beb8 <__retarget_lock_acquire_recursive>
 800bd52:	bf00      	nop
 800bd54:	240008ad 	.word	0x240008ad

0800bd58 <__sfp_lock_release>:
 800bd58:	4801      	ldr	r0, [pc, #4]	; (800bd60 <__sfp_lock_release+0x8>)
 800bd5a:	f000 b8ae 	b.w	800beba <__retarget_lock_release_recursive>
 800bd5e:	bf00      	nop
 800bd60:	240008ad 	.word	0x240008ad

0800bd64 <__sinit_lock_acquire>:
 800bd64:	4801      	ldr	r0, [pc, #4]	; (800bd6c <__sinit_lock_acquire+0x8>)
 800bd66:	f000 b8a7 	b.w	800beb8 <__retarget_lock_acquire_recursive>
 800bd6a:	bf00      	nop
 800bd6c:	240008ae 	.word	0x240008ae

0800bd70 <__sinit_lock_release>:
 800bd70:	4801      	ldr	r0, [pc, #4]	; (800bd78 <__sinit_lock_release+0x8>)
 800bd72:	f000 b8a2 	b.w	800beba <__retarget_lock_release_recursive>
 800bd76:	bf00      	nop
 800bd78:	240008ae 	.word	0x240008ae

0800bd7c <__sinit>:
 800bd7c:	b510      	push	{r4, lr}
 800bd7e:	4604      	mov	r4, r0
 800bd80:	f7ff fff0 	bl	800bd64 <__sinit_lock_acquire>
 800bd84:	69a3      	ldr	r3, [r4, #24]
 800bd86:	b11b      	cbz	r3, 800bd90 <__sinit+0x14>
 800bd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd8c:	f7ff bff0 	b.w	800bd70 <__sinit_lock_release>
 800bd90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd94:	6523      	str	r3, [r4, #80]	; 0x50
 800bd96:	4b13      	ldr	r3, [pc, #76]	; (800bde4 <__sinit+0x68>)
 800bd98:	4a13      	ldr	r2, [pc, #76]	; (800bde8 <__sinit+0x6c>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd9e:	42a3      	cmp	r3, r4
 800bda0:	bf04      	itt	eq
 800bda2:	2301      	moveq	r3, #1
 800bda4:	61a3      	streq	r3, [r4, #24]
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 f820 	bl	800bdec <__sfp>
 800bdac:	6060      	str	r0, [r4, #4]
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f000 f81c 	bl	800bdec <__sfp>
 800bdb4:	60a0      	str	r0, [r4, #8]
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f000 f818 	bl	800bdec <__sfp>
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	60e0      	str	r0, [r4, #12]
 800bdc0:	2104      	movs	r1, #4
 800bdc2:	6860      	ldr	r0, [r4, #4]
 800bdc4:	f7ff ff82 	bl	800bccc <std>
 800bdc8:	68a0      	ldr	r0, [r4, #8]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	2109      	movs	r1, #9
 800bdce:	f7ff ff7d 	bl	800bccc <std>
 800bdd2:	68e0      	ldr	r0, [r4, #12]
 800bdd4:	2202      	movs	r2, #2
 800bdd6:	2112      	movs	r1, #18
 800bdd8:	f7ff ff78 	bl	800bccc <std>
 800bddc:	2301      	movs	r3, #1
 800bdde:	61a3      	str	r3, [r4, #24]
 800bde0:	e7d2      	b.n	800bd88 <__sinit+0xc>
 800bde2:	bf00      	nop
 800bde4:	0800c288 	.word	0x0800c288
 800bde8:	0800bd15 	.word	0x0800bd15

0800bdec <__sfp>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	4607      	mov	r7, r0
 800bdf0:	f7ff ffac 	bl	800bd4c <__sfp_lock_acquire>
 800bdf4:	4b1e      	ldr	r3, [pc, #120]	; (800be70 <__sfp+0x84>)
 800bdf6:	681e      	ldr	r6, [r3, #0]
 800bdf8:	69b3      	ldr	r3, [r6, #24]
 800bdfa:	b913      	cbnz	r3, 800be02 <__sfp+0x16>
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	f7ff ffbd 	bl	800bd7c <__sinit>
 800be02:	3648      	adds	r6, #72	; 0x48
 800be04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be08:	3b01      	subs	r3, #1
 800be0a:	d503      	bpl.n	800be14 <__sfp+0x28>
 800be0c:	6833      	ldr	r3, [r6, #0]
 800be0e:	b30b      	cbz	r3, 800be54 <__sfp+0x68>
 800be10:	6836      	ldr	r6, [r6, #0]
 800be12:	e7f7      	b.n	800be04 <__sfp+0x18>
 800be14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be18:	b9d5      	cbnz	r5, 800be50 <__sfp+0x64>
 800be1a:	4b16      	ldr	r3, [pc, #88]	; (800be74 <__sfp+0x88>)
 800be1c:	60e3      	str	r3, [r4, #12]
 800be1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be22:	6665      	str	r5, [r4, #100]	; 0x64
 800be24:	f000 f847 	bl	800beb6 <__retarget_lock_init_recursive>
 800be28:	f7ff ff96 	bl	800bd58 <__sfp_lock_release>
 800be2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be34:	6025      	str	r5, [r4, #0]
 800be36:	61a5      	str	r5, [r4, #24]
 800be38:	2208      	movs	r2, #8
 800be3a:	4629      	mov	r1, r5
 800be3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be40:	f7fd fb56 	bl	80094f0 <memset>
 800be44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be4c:	4620      	mov	r0, r4
 800be4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be50:	3468      	adds	r4, #104	; 0x68
 800be52:	e7d9      	b.n	800be08 <__sfp+0x1c>
 800be54:	2104      	movs	r1, #4
 800be56:	4638      	mov	r0, r7
 800be58:	f7ff ff62 	bl	800bd20 <__sfmoreglue>
 800be5c:	4604      	mov	r4, r0
 800be5e:	6030      	str	r0, [r6, #0]
 800be60:	2800      	cmp	r0, #0
 800be62:	d1d5      	bne.n	800be10 <__sfp+0x24>
 800be64:	f7ff ff78 	bl	800bd58 <__sfp_lock_release>
 800be68:	230c      	movs	r3, #12
 800be6a:	603b      	str	r3, [r7, #0]
 800be6c:	e7ee      	b.n	800be4c <__sfp+0x60>
 800be6e:	bf00      	nop
 800be70:	0800c288 	.word	0x0800c288
 800be74:	ffff0001 	.word	0xffff0001

0800be78 <_fwalk_reent>:
 800be78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be7c:	4606      	mov	r6, r0
 800be7e:	4688      	mov	r8, r1
 800be80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be84:	2700      	movs	r7, #0
 800be86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be8a:	f1b9 0901 	subs.w	r9, r9, #1
 800be8e:	d505      	bpl.n	800be9c <_fwalk_reent+0x24>
 800be90:	6824      	ldr	r4, [r4, #0]
 800be92:	2c00      	cmp	r4, #0
 800be94:	d1f7      	bne.n	800be86 <_fwalk_reent+0xe>
 800be96:	4638      	mov	r0, r7
 800be98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9c:	89ab      	ldrh	r3, [r5, #12]
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d907      	bls.n	800beb2 <_fwalk_reent+0x3a>
 800bea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bea6:	3301      	adds	r3, #1
 800bea8:	d003      	beq.n	800beb2 <_fwalk_reent+0x3a>
 800beaa:	4629      	mov	r1, r5
 800beac:	4630      	mov	r0, r6
 800beae:	47c0      	blx	r8
 800beb0:	4307      	orrs	r7, r0
 800beb2:	3568      	adds	r5, #104	; 0x68
 800beb4:	e7e9      	b.n	800be8a <_fwalk_reent+0x12>

0800beb6 <__retarget_lock_init_recursive>:
 800beb6:	4770      	bx	lr

0800beb8 <__retarget_lock_acquire_recursive>:
 800beb8:	4770      	bx	lr

0800beba <__retarget_lock_release_recursive>:
 800beba:	4770      	bx	lr

0800bebc <__swhatbuf_r>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	460e      	mov	r6, r1
 800bec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec4:	2900      	cmp	r1, #0
 800bec6:	b096      	sub	sp, #88	; 0x58
 800bec8:	4614      	mov	r4, r2
 800beca:	461d      	mov	r5, r3
 800becc:	da08      	bge.n	800bee0 <__swhatbuf_r+0x24>
 800bece:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	602a      	str	r2, [r5, #0]
 800bed6:	061a      	lsls	r2, r3, #24
 800bed8:	d410      	bmi.n	800befc <__swhatbuf_r+0x40>
 800beda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bede:	e00e      	b.n	800befe <__swhatbuf_r+0x42>
 800bee0:	466a      	mov	r2, sp
 800bee2:	f000 f903 	bl	800c0ec <_fstat_r>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	dbf1      	blt.n	800bece <__swhatbuf_r+0x12>
 800beea:	9a01      	ldr	r2, [sp, #4]
 800beec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bef0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bef4:	425a      	negs	r2, r3
 800bef6:	415a      	adcs	r2, r3
 800bef8:	602a      	str	r2, [r5, #0]
 800befa:	e7ee      	b.n	800beda <__swhatbuf_r+0x1e>
 800befc:	2340      	movs	r3, #64	; 0x40
 800befe:	2000      	movs	r0, #0
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	b016      	add	sp, #88	; 0x58
 800bf04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf08 <__smakebuf_r>:
 800bf08:	898b      	ldrh	r3, [r1, #12]
 800bf0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf0c:	079d      	lsls	r5, r3, #30
 800bf0e:	4606      	mov	r6, r0
 800bf10:	460c      	mov	r4, r1
 800bf12:	d507      	bpl.n	800bf24 <__smakebuf_r+0x1c>
 800bf14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf18:	6023      	str	r3, [r4, #0]
 800bf1a:	6123      	str	r3, [r4, #16]
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	6163      	str	r3, [r4, #20]
 800bf20:	b002      	add	sp, #8
 800bf22:	bd70      	pop	{r4, r5, r6, pc}
 800bf24:	ab01      	add	r3, sp, #4
 800bf26:	466a      	mov	r2, sp
 800bf28:	f7ff ffc8 	bl	800bebc <__swhatbuf_r>
 800bf2c:	9900      	ldr	r1, [sp, #0]
 800bf2e:	4605      	mov	r5, r0
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7ff f963 	bl	800b1fc <_malloc_r>
 800bf36:	b948      	cbnz	r0, 800bf4c <__smakebuf_r+0x44>
 800bf38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf3c:	059a      	lsls	r2, r3, #22
 800bf3e:	d4ef      	bmi.n	800bf20 <__smakebuf_r+0x18>
 800bf40:	f023 0303 	bic.w	r3, r3, #3
 800bf44:	f043 0302 	orr.w	r3, r3, #2
 800bf48:	81a3      	strh	r3, [r4, #12]
 800bf4a:	e7e3      	b.n	800bf14 <__smakebuf_r+0xc>
 800bf4c:	4b0d      	ldr	r3, [pc, #52]	; (800bf84 <__smakebuf_r+0x7c>)
 800bf4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf50:	89a3      	ldrh	r3, [r4, #12]
 800bf52:	6020      	str	r0, [r4, #0]
 800bf54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf58:	81a3      	strh	r3, [r4, #12]
 800bf5a:	9b00      	ldr	r3, [sp, #0]
 800bf5c:	6163      	str	r3, [r4, #20]
 800bf5e:	9b01      	ldr	r3, [sp, #4]
 800bf60:	6120      	str	r0, [r4, #16]
 800bf62:	b15b      	cbz	r3, 800bf7c <__smakebuf_r+0x74>
 800bf64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f000 f8d1 	bl	800c110 <_isatty_r>
 800bf6e:	b128      	cbz	r0, 800bf7c <__smakebuf_r+0x74>
 800bf70:	89a3      	ldrh	r3, [r4, #12]
 800bf72:	f023 0303 	bic.w	r3, r3, #3
 800bf76:	f043 0301 	orr.w	r3, r3, #1
 800bf7a:	81a3      	strh	r3, [r4, #12]
 800bf7c:	89a0      	ldrh	r0, [r4, #12]
 800bf7e:	4305      	orrs	r5, r0
 800bf80:	81a5      	strh	r5, [r4, #12]
 800bf82:	e7cd      	b.n	800bf20 <__smakebuf_r+0x18>
 800bf84:	0800bd15 	.word	0x0800bd15

0800bf88 <_malloc_usable_size_r>:
 800bf88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf8c:	1f18      	subs	r0, r3, #4
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	bfbc      	itt	lt
 800bf92:	580b      	ldrlt	r3, [r1, r0]
 800bf94:	18c0      	addlt	r0, r0, r3
 800bf96:	4770      	bx	lr

0800bf98 <_raise_r>:
 800bf98:	291f      	cmp	r1, #31
 800bf9a:	b538      	push	{r3, r4, r5, lr}
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	460d      	mov	r5, r1
 800bfa0:	d904      	bls.n	800bfac <_raise_r+0x14>
 800bfa2:	2316      	movs	r3, #22
 800bfa4:	6003      	str	r3, [r0, #0]
 800bfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfaa:	bd38      	pop	{r3, r4, r5, pc}
 800bfac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bfae:	b112      	cbz	r2, 800bfb6 <_raise_r+0x1e>
 800bfb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfb4:	b94b      	cbnz	r3, 800bfca <_raise_r+0x32>
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 f830 	bl	800c01c <_getpid_r>
 800bfbc:	462a      	mov	r2, r5
 800bfbe:	4601      	mov	r1, r0
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfc6:	f000 b817 	b.w	800bff8 <_kill_r>
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d00a      	beq.n	800bfe4 <_raise_r+0x4c>
 800bfce:	1c59      	adds	r1, r3, #1
 800bfd0:	d103      	bne.n	800bfda <_raise_r+0x42>
 800bfd2:	2316      	movs	r3, #22
 800bfd4:	6003      	str	r3, [r0, #0]
 800bfd6:	2001      	movs	r0, #1
 800bfd8:	e7e7      	b.n	800bfaa <_raise_r+0x12>
 800bfda:	2400      	movs	r4, #0
 800bfdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	4798      	blx	r3
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	e7e0      	b.n	800bfaa <_raise_r+0x12>

0800bfe8 <raise>:
 800bfe8:	4b02      	ldr	r3, [pc, #8]	; (800bff4 <raise+0xc>)
 800bfea:	4601      	mov	r1, r0
 800bfec:	6818      	ldr	r0, [r3, #0]
 800bfee:	f7ff bfd3 	b.w	800bf98 <_raise_r>
 800bff2:	bf00      	nop
 800bff4:	24000010 	.word	0x24000010

0800bff8 <_kill_r>:
 800bff8:	b538      	push	{r3, r4, r5, lr}
 800bffa:	4d07      	ldr	r5, [pc, #28]	; (800c018 <_kill_r+0x20>)
 800bffc:	2300      	movs	r3, #0
 800bffe:	4604      	mov	r4, r0
 800c000:	4608      	mov	r0, r1
 800c002:	4611      	mov	r1, r2
 800c004:	602b      	str	r3, [r5, #0]
 800c006:	f7f5 fad3 	bl	80015b0 <_kill>
 800c00a:	1c43      	adds	r3, r0, #1
 800c00c:	d102      	bne.n	800c014 <_kill_r+0x1c>
 800c00e:	682b      	ldr	r3, [r5, #0]
 800c010:	b103      	cbz	r3, 800c014 <_kill_r+0x1c>
 800c012:	6023      	str	r3, [r4, #0]
 800c014:	bd38      	pop	{r3, r4, r5, pc}
 800c016:	bf00      	nop
 800c018:	240008a8 	.word	0x240008a8

0800c01c <_getpid_r>:
 800c01c:	f7f5 bac0 	b.w	80015a0 <_getpid>

0800c020 <__sread>:
 800c020:	b510      	push	{r4, lr}
 800c022:	460c      	mov	r4, r1
 800c024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c028:	f000 f894 	bl	800c154 <_read_r>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	bfab      	itete	ge
 800c030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c032:	89a3      	ldrhlt	r3, [r4, #12]
 800c034:	181b      	addge	r3, r3, r0
 800c036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c03a:	bfac      	ite	ge
 800c03c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c03e:	81a3      	strhlt	r3, [r4, #12]
 800c040:	bd10      	pop	{r4, pc}

0800c042 <__swrite>:
 800c042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c046:	461f      	mov	r7, r3
 800c048:	898b      	ldrh	r3, [r1, #12]
 800c04a:	05db      	lsls	r3, r3, #23
 800c04c:	4605      	mov	r5, r0
 800c04e:	460c      	mov	r4, r1
 800c050:	4616      	mov	r6, r2
 800c052:	d505      	bpl.n	800c060 <__swrite+0x1e>
 800c054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c058:	2302      	movs	r3, #2
 800c05a:	2200      	movs	r2, #0
 800c05c:	f000 f868 	bl	800c130 <_lseek_r>
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c06a:	81a3      	strh	r3, [r4, #12]
 800c06c:	4632      	mov	r2, r6
 800c06e:	463b      	mov	r3, r7
 800c070:	4628      	mov	r0, r5
 800c072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c076:	f000 b817 	b.w	800c0a8 <_write_r>

0800c07a <__sseek>:
 800c07a:	b510      	push	{r4, lr}
 800c07c:	460c      	mov	r4, r1
 800c07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c082:	f000 f855 	bl	800c130 <_lseek_r>
 800c086:	1c43      	adds	r3, r0, #1
 800c088:	89a3      	ldrh	r3, [r4, #12]
 800c08a:	bf15      	itete	ne
 800c08c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c08e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c096:	81a3      	strheq	r3, [r4, #12]
 800c098:	bf18      	it	ne
 800c09a:	81a3      	strhne	r3, [r4, #12]
 800c09c:	bd10      	pop	{r4, pc}

0800c09e <__sclose>:
 800c09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a2:	f000 b813 	b.w	800c0cc <_close_r>
	...

0800c0a8 <_write_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d07      	ldr	r5, [pc, #28]	; (800c0c8 <_write_r+0x20>)
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	4608      	mov	r0, r1
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	602a      	str	r2, [r5, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	f7f5 fab1 	bl	800161e <_write>
 800c0bc:	1c43      	adds	r3, r0, #1
 800c0be:	d102      	bne.n	800c0c6 <_write_r+0x1e>
 800c0c0:	682b      	ldr	r3, [r5, #0]
 800c0c2:	b103      	cbz	r3, 800c0c6 <_write_r+0x1e>
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	bd38      	pop	{r3, r4, r5, pc}
 800c0c8:	240008a8 	.word	0x240008a8

0800c0cc <_close_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4d06      	ldr	r5, [pc, #24]	; (800c0e8 <_close_r+0x1c>)
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4608      	mov	r0, r1
 800c0d6:	602b      	str	r3, [r5, #0]
 800c0d8:	f7f5 fabd 	bl	8001656 <_close>
 800c0dc:	1c43      	adds	r3, r0, #1
 800c0de:	d102      	bne.n	800c0e6 <_close_r+0x1a>
 800c0e0:	682b      	ldr	r3, [r5, #0]
 800c0e2:	b103      	cbz	r3, 800c0e6 <_close_r+0x1a>
 800c0e4:	6023      	str	r3, [r4, #0]
 800c0e6:	bd38      	pop	{r3, r4, r5, pc}
 800c0e8:	240008a8 	.word	0x240008a8

0800c0ec <_fstat_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	4d07      	ldr	r5, [pc, #28]	; (800c10c <_fstat_r+0x20>)
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	4608      	mov	r0, r1
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	602b      	str	r3, [r5, #0]
 800c0fa:	f7f5 fab8 	bl	800166e <_fstat>
 800c0fe:	1c43      	adds	r3, r0, #1
 800c100:	d102      	bne.n	800c108 <_fstat_r+0x1c>
 800c102:	682b      	ldr	r3, [r5, #0]
 800c104:	b103      	cbz	r3, 800c108 <_fstat_r+0x1c>
 800c106:	6023      	str	r3, [r4, #0]
 800c108:	bd38      	pop	{r3, r4, r5, pc}
 800c10a:	bf00      	nop
 800c10c:	240008a8 	.word	0x240008a8

0800c110 <_isatty_r>:
 800c110:	b538      	push	{r3, r4, r5, lr}
 800c112:	4d06      	ldr	r5, [pc, #24]	; (800c12c <_isatty_r+0x1c>)
 800c114:	2300      	movs	r3, #0
 800c116:	4604      	mov	r4, r0
 800c118:	4608      	mov	r0, r1
 800c11a:	602b      	str	r3, [r5, #0]
 800c11c:	f7f5 fab7 	bl	800168e <_isatty>
 800c120:	1c43      	adds	r3, r0, #1
 800c122:	d102      	bne.n	800c12a <_isatty_r+0x1a>
 800c124:	682b      	ldr	r3, [r5, #0]
 800c126:	b103      	cbz	r3, 800c12a <_isatty_r+0x1a>
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	240008a8 	.word	0x240008a8

0800c130 <_lseek_r>:
 800c130:	b538      	push	{r3, r4, r5, lr}
 800c132:	4d07      	ldr	r5, [pc, #28]	; (800c150 <_lseek_r+0x20>)
 800c134:	4604      	mov	r4, r0
 800c136:	4608      	mov	r0, r1
 800c138:	4611      	mov	r1, r2
 800c13a:	2200      	movs	r2, #0
 800c13c:	602a      	str	r2, [r5, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	f7f5 fab0 	bl	80016a4 <_lseek>
 800c144:	1c43      	adds	r3, r0, #1
 800c146:	d102      	bne.n	800c14e <_lseek_r+0x1e>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	b103      	cbz	r3, 800c14e <_lseek_r+0x1e>
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	240008a8 	.word	0x240008a8

0800c154 <_read_r>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	4d07      	ldr	r5, [pc, #28]	; (800c174 <_read_r+0x20>)
 800c158:	4604      	mov	r4, r0
 800c15a:	4608      	mov	r0, r1
 800c15c:	4611      	mov	r1, r2
 800c15e:	2200      	movs	r2, #0
 800c160:	602a      	str	r2, [r5, #0]
 800c162:	461a      	mov	r2, r3
 800c164:	f7f5 fa3e 	bl	80015e4 <_read>
 800c168:	1c43      	adds	r3, r0, #1
 800c16a:	d102      	bne.n	800c172 <_read_r+0x1e>
 800c16c:	682b      	ldr	r3, [r5, #0]
 800c16e:	b103      	cbz	r3, 800c172 <_read_r+0x1e>
 800c170:	6023      	str	r3, [r4, #0]
 800c172:	bd38      	pop	{r3, r4, r5, pc}
 800c174:	240008a8 	.word	0x240008a8

0800c178 <_init>:
 800c178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17a:	bf00      	nop
 800c17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c17e:	bc08      	pop	{r3}
 800c180:	469e      	mov	lr, r3
 800c182:	4770      	bx	lr

0800c184 <_fini>:
 800c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c186:	bf00      	nop
 800c188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c18a:	bc08      	pop	{r3}
 800c18c:	469e      	mov	lr, r3
 800c18e:	4770      	bx	lr
