
Ejercicio_extra_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800bb80  0800bb80  0001bb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c054  0800c054  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c054  0800c054  0001c054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c05c  0800c05c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c05c  0800c05c  0001c05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c060  0800c060  0001c060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800c064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  240001e0  0800c244  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000864  0800c244  00020864  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a395  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fec  00000000  00000000  0003a5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  0003d590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  0003e858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003adee  00000000  00000000  0003f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a499  00000000  00000000  0007a7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d60e  00000000  00000000  00094c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021228d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f1c  00000000  00000000  002122e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bb68 	.word	0x0800bb68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800bb68 	.word	0x0800bb68

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007cc:	bf00      	nop
 80007ce:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <main+0x108>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x24>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dcf4      	bgt.n	80007ce <main+0xe>
  if ( timeout < 0 )
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da01      	bge.n	80007ee <main+0x2e>
  {
  Error_Handler();
 80007ea:	f000 fd1d 	bl	8001228 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 ffbb 	bl	8001768 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_I2C_Init(&hi2c4);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f87b 	bl	80008ec <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <main+0x108>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <main+0x108>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <main+0x108>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f002 f8c1 	bl	800299c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f002 f8d7 	bl	80029d0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000828:	bf00      	nop
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <main+0x108>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x80>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6a>
if ( timeout < 0 )
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8a>
{
Error_Handler();
 8000846:	f000 fcef 	bl	8001228 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 f991 	bl	8000b70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084e:	f000 f911 	bl	8000a74 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000852:	f000 f95b 	bl	8000b0c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 8000856:	f000 f8cd 	bl	80009f4 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, Rx_data, 4);
 800085a:	2204      	movs	r2, #4
 800085c:	491b      	ldr	r1, [pc, #108]	; (80008cc <main+0x10c>)
 800085e:	481c      	ldr	r0, [pc, #112]	; (80008d0 <main+0x110>)
 8000860:	f005 fd88 	bl	8006374 <HAL_UART_Receive_IT>

  // Revisión de conexión del dispositivo
  status = HAL_I2C_IsDeviceReady(&hi2c4, MPU6050_ADDR, 1, 3000);
 8000864:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000868:	2201      	movs	r2, #1
 800086a:	21d0      	movs	r1, #208	; 0xd0
 800086c:	4819      	ldr	r0, [pc, #100]	; (80008d4 <main+0x114>)
 800086e:	f002 fb81 	bl	8002f74 <HAL_I2C_IsDeviceReady>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <main+0x118>)
 8000878:	701a      	strb	r2, [r3, #0]
  if (status == HAL_OK) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <main+0x118>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d105      	bne.n	800088e <main+0xce>
 8000882:	2201      	movs	r2, #1
 8000884:	2101      	movs	r1, #1
 8000886:	4815      	ldr	r0, [pc, #84]	; (80008dc <main+0x11c>)
 8000888:	f002 f854 	bl	8002934 <HAL_GPIO_WritePin>
 800088c:	e005      	b.n	800089a <main+0xda>
  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000894:	4811      	ldr	r0, [pc, #68]	; (80008dc <main+0x11c>)
 8000896:	f002 f84d 	bl	8002934 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800089a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800089e:	f000 fff5 	bl	800188c <HAL_Delay>

  // Inicialización del MPU6050
  MPU6050_init();
 80008a2:	f000 f9e7 	bl	8000c74 <MPU6050_init>

  // Prueba de comunicación UART
  uart_buf_len = sprintf(uart_buf, "MPU6050 test\r\n");
 80008a6:	490e      	ldr	r1, [pc, #56]	; (80008e0 <main+0x120>)
 80008a8:	480e      	ldr	r0, [pc, #56]	; (80008e4 <main+0x124>)
 80008aa:	f008 ff63 	bl	8009774 <siprintf>
 80008ae:	4603      	mov	r3, r0
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <main+0x128>)
 80008b4:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <main+0x128>)
 80008b8:	881a      	ldrh	r2, [r3, #0]
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	4909      	ldr	r1, [pc, #36]	; (80008e4 <main+0x124>)
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <main+0x110>)
 80008c0:	f005 fcc2 	bl	8006248 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <main+0x104>
 80008c6:	bf00      	nop
 80008c8:	58024400 	.word	0x58024400
 80008cc:	24000848 	.word	0x24000848
 80008d0:	24000248 	.word	0x24000248
 80008d4:	240001fc 	.word	0x240001fc
 80008d8:	24000810 	.word	0x24000810
 80008dc:	58020400 	.word	0x58020400
 80008e0:	0800bb80 	.word	0x0800bb80
 80008e4:	24000814 	.word	0x24000814
 80008e8:	24000846 	.word	0x24000846

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b09c      	sub	sp, #112	; 0x70
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	224c      	movs	r2, #76	; 0x4c
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f008 faf0 	bl	8008ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f008 faea 	bl	8008ee0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800090c:	2004      	movs	r0, #4
 800090e:	f003 f8bf 	bl	8003a90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b34      	ldr	r3, [pc, #208]	; (80009e8 <SystemClock_Config+0xfc>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a33      	ldr	r2, [pc, #204]	; (80009e8 <SystemClock_Config+0xfc>)
 800091c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <SystemClock_Config+0xfc>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <SystemClock_Config+0x100>)
 800092e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000930:	4a2e      	ldr	r2, [pc, #184]	; (80009ec <SystemClock_Config+0x100>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <SystemClock_Config+0x100>)
 800093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000944:	bf00      	nop
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <SystemClock_Config+0xfc>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800094e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000952:	d1f8      	bne.n	8000946 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <SystemClock_Config+0x104>)
 8000956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000958:	f023 0303 	bic.w	r3, r3, #3
 800095c:	4a24      	ldr	r2, [pc, #144]	; (80009f0 <SystemClock_Config+0x104>)
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000964:	2301      	movs	r3, #1
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000968:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000972:	2302      	movs	r3, #2
 8000974:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000976:	2301      	movs	r3, #1
 8000978:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800097a:	2378      	movs	r3, #120	; 0x78
 800097c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800098a:	230c      	movs	r3, #12
 800098c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800098e:	2300      	movs	r3, #0
 8000990:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4618      	mov	r0, r3
 800099c:	f003 f8e2 	bl	8003b64 <HAL_RCC_OscConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009a6:	f000 fc3f 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009aa:	233f      	movs	r3, #63	; 0x3f
 80009ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ae:	2303      	movs	r3, #3
 80009b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009b6:	2308      	movs	r3, #8
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009ba:	2340      	movs	r3, #64	; 0x40
 80009bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009be:	2340      	movs	r3, #64	; 0x40
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009c8:	2340      	movs	r3, #64	; 0x40
 80009ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2104      	movs	r1, #4
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fcf5 	bl	80043c0 <HAL_RCC_ClockConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80009dc:	f000 fc24 	bl	8001228 <Error_Handler>
  }
}
 80009e0:	bf00      	nop
 80009e2:	3770      	adds	r7, #112	; 0x70
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	58024800 	.word	0x58024800
 80009ec:	58000400 	.word	0x58000400
 80009f0:	58024400 	.word	0x58024400

080009f4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_I2C4_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <MX_I2C4_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_I2C4_Init+0x74>)
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <MX_I2C4_Init+0x7c>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_I2C4_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_I2C4_Init+0x74>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_I2C4_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_I2C4_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_I2C4_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_I2C4_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_I2C4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a2e:	480e      	ldr	r0, [pc, #56]	; (8000a68 <MX_I2C4_Init+0x74>)
 8000a30:	f001 ffe2 	bl	80029f8 <HAL_I2C_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a3a:	f000 fbf5 	bl	8001228 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <MX_I2C4_Init+0x74>)
 8000a42:	f002 fe45 	bl	80036d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a4c:	f000 fbec 	bl	8001228 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a50:	2100      	movs	r1, #0
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_I2C4_Init+0x74>)
 8000a54:	f002 fe87 	bl	8003766 <HAL_I2CEx_ConfigDigitalFilter>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 fbe3 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	240001fc 	.word	0x240001fc
 8000a6c:	58001c00 	.word	0x58001c00
 8000a70:	307075b1 	.word	0x307075b1

08000a74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <MX_USART3_UART_Init+0x94>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000abe:	f005 fb73 	bl	80061a8 <HAL_UART_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ac8:	f000 fbae 	bl	8001228 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ad0:	f007 fe07 	bl	80086e2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ada:	f000 fba5 	bl	8001228 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ae2:	f007 fe3c 	bl	800875e <HAL_UARTEx_SetRxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aec:	f000 fb9c 	bl	8001228 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000af2:	f007 fdbd 	bl	8008670 <HAL_UARTEx_DisableFifoMode>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000afc:	f000 fb94 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24000248 	.word	0x24000248
 8000b08:	40004800 	.word	0x40004800

08000b0c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b14:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b18:	2209      	movs	r2, #9
 8000b1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b54:	f002 fe53 	bl	80037fe <HAL_PCD_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b5e:	f000 fb63 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	240002d8 	.word	0x240002d8
 8000b6c:	40080000 	.word	0x40080000

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b39      	ldr	r3, [pc, #228]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a37      	ldr	r2, [pc, #220]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba4:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	4a30      	ldr	r2, [pc, #192]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a28      	ldr	r2, [pc, #160]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be0:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000be8:	f043 0320 	orr.w	r3, r3, #32
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0320 	and.w	r3, r3, #32
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000c42:	f001 fe77 	bl	8002934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c46:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c50:	2302      	movs	r3, #2
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000c60:	f001 fcb8 	bl	80025d4 <HAL_GPIO_Init>

}
 8000c64:	bf00      	nop
 8000c66:	3730      	adds	r7, #48	; 0x30
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	58020400 	.word	0x58020400

08000c74 <MPU6050_init>:

/* USER CODE BEGIN 4 */
void MPU6050_init(){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 3000);
 8000c7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c7e:	9302      	str	r3, [sp, #8]
 8000c80:	2301      	movs	r3, #1
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <MPU6050_init+0xd4>)
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	2275      	movs	r2, #117	; 0x75
 8000c8c:	21d0      	movs	r1, #208	; 0xd0
 8000c8e:	482f      	ldr	r0, [pc, #188]	; (8000d4c <MPU6050_init+0xd8>)
 8000c90:	f002 f856 	bl	8002d40 <HAL_I2C_Mem_Read>
	uart_buf_len = sprintf(uart_buf, "Dirección: %u \r\n", check);
 8000c94:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <MPU6050_init+0xd4>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	492d      	ldr	r1, [pc, #180]	; (8000d50 <MPU6050_init+0xdc>)
 8000c9c:	482d      	ldr	r0, [pc, #180]	; (8000d54 <MPU6050_init+0xe0>)
 8000c9e:	f008 fd69 	bl	8009774 <siprintf>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	; (8000d58 <MPU6050_init+0xe4>)
 8000ca8:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8000caa:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <MPU6050_init+0xe4>)
 8000cac:	881a      	ldrh	r2, [r3, #0]
 8000cae:	2364      	movs	r3, #100	; 0x64
 8000cb0:	4928      	ldr	r1, [pc, #160]	; (8000d54 <MPU6050_init+0xe0>)
 8000cb2:	482a      	ldr	r0, [pc, #168]	; (8000d5c <MPU6050_init+0xe8>)
 8000cb4:	f005 fac8 	bl	8006248 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000cb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cbc:	f000 fde6 	bl	800188c <HAL_Delay>

	data = 0x00;
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <MPU6050_init+0xec>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 3000);
 8000cc6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000cca:	9302      	str	r3, [sp, #8]
 8000ccc:	2301      	movs	r3, #1
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <MPU6050_init+0xec>)
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	226b      	movs	r2, #107	; 0x6b
 8000cd8:	21d0      	movs	r1, #208	; 0xd0
 8000cda:	481c      	ldr	r0, [pc, #112]	; (8000d4c <MPU6050_init+0xd8>)
 8000cdc:	f001 ff1c 	bl	8002b18 <HAL_I2C_Mem_Write>
	data = 0b10000111;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MPU6050_init+0xec>)
 8000ce2:	2287      	movs	r2, #135	; 0x87
 8000ce4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, SMPLRT_DIV, 1, &data, 1, 3000);
 8000ce6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000cea:	9302      	str	r3, [sp, #8]
 8000cec:	2301      	movs	r3, #1
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MPU6050_init+0xec>)
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	2219      	movs	r2, #25
 8000cf8:	21d0      	movs	r1, #208	; 0xd0
 8000cfa:	4814      	ldr	r0, [pc, #80]	; (8000d4c <MPU6050_init+0xd8>)
 8000cfc:	f001 ff0c 	bl	8002b18 <HAL_I2C_Mem_Write>
	data = 0x00;
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MPU6050_init+0xec>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, GYRO_CONFIG, 1, &data, 1, 3000);
 8000d06:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MPU6050_init+0xec>)
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	221b      	movs	r2, #27
 8000d18:	21d0      	movs	r1, #208	; 0xd0
 8000d1a:	480c      	ldr	r0, [pc, #48]	; (8000d4c <MPU6050_init+0xd8>)
 8000d1c:	f001 fefc 	bl	8002b18 <HAL_I2C_Mem_Write>
	data = 0x00;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MPU6050_init+0xec>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, ACCEL_CONFIG, 1, &data, 1, 3000);
 8000d26:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MPU6050_init+0xec>)
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2301      	movs	r3, #1
 8000d36:	221c      	movs	r2, #28
 8000d38:	21d0      	movs	r1, #208	; 0xd0
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MPU6050_init+0xd8>)
 8000d3c:	f001 feec 	bl	8002b18 <HAL_I2C_Mem_Write>

}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	240007e4 	.word	0x240007e4
 8000d4c:	240001fc 	.word	0x240001fc
 8000d50:	0800bb90 	.word	0x0800bb90
 8000d54:	24000814 	.word	0x24000814
 8000d58:	24000846 	.word	0x24000846
 8000d5c:	24000248 	.word	0x24000248
 8000d60:	240007e5 	.word	0x240007e5
 8000d64:	00000000 	.word	0x00000000

08000d68 <MPU6050_read_acc>:

void MPU6050_read_acc(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af04      	add	r7, sp, #16
	uint8_t read_acc[6];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, ACCEL_XOUT_H, 1, read_acc, 6, 3000);
 8000d6e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	2306      	movs	r3, #6
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	463b      	mov	r3, r7
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	223b      	movs	r2, #59	; 0x3b
 8000d80:	21d0      	movs	r1, #208	; 0xd0
 8000d82:	4833      	ldr	r0, [pc, #204]	; (8000e50 <MPU6050_read_acc+0xe8>)
 8000d84:	f001 ffdc 	bl	8002d40 <HAL_I2C_Mem_Read>

	acc_X_read = (int16_t)(read_acc[0] << 8 | read_acc[1]);
 8000d88:	783b      	ldrb	r3, [r7, #0]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	787b      	ldrb	r3, [r7, #1]
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21a      	sxth	r2, r3
 8000d96:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <MPU6050_read_acc+0xec>)
 8000d98:	801a      	strh	r2, [r3, #0]
	acc_Y_read = (int16_t)(read_acc[2] << 8 | read_acc[3]);
 8000d9a:	78bb      	ldrb	r3, [r7, #2]
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <MPU6050_read_acc+0xf0>)
 8000daa:	801a      	strh	r2, [r3, #0]
	acc_Z_read = (int16_t)(read_acc[4] << 8 | read_acc[5]);
 8000dac:	793b      	ldrb	r3, [r7, #4]
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	797b      	ldrb	r3, [r7, #5]
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <MPU6050_read_acc+0xf4>)
 8000dbc:	801a      	strh	r2, [r3, #0]

	acc_X = (acc_X_read/16384.0) * 9.81;
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <MPU6050_read_acc+0xec>)
 8000dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc4:	ee07 3a90 	vmov	s15, r3
 8000dc8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000dcc:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000e40 <MPU6050_read_acc+0xd8>
 8000dd0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dd4:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000e48 <MPU6050_read_acc+0xe0>
 8000dd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ddc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MPU6050_read_acc+0xf8>)
 8000de2:	edc3 7a00 	vstr	s15, [r3]
	acc_Y = (acc_Y_read/16384.0) * 9.81;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MPU6050_read_acc+0xf0>)
 8000de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000df4:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000e40 <MPU6050_read_acc+0xd8>
 8000df8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dfc:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000e48 <MPU6050_read_acc+0xe0>
 8000e00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MPU6050_read_acc+0xfc>)
 8000e0a:	edc3 7a00 	vstr	s15, [r3]
	acc_Z = (acc_Z_read/16384.0) * 9.81;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <MPU6050_read_acc+0xf4>)
 8000e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e14:	ee07 3a90 	vmov	s15, r3
 8000e18:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e1c:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000e40 <MPU6050_read_acc+0xd8>
 8000e20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e24:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000e48 <MPU6050_read_acc+0xe0>
 8000e28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <MPU6050_read_acc+0x100>)
 8000e32:	edc3 7a00 	vstr	s15, [r3]

}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	00000000 	.word	0x00000000
 8000e44:	40d00000 	.word	0x40d00000
 8000e48:	51eb851f 	.word	0x51eb851f
 8000e4c:	40239eb8 	.word	0x40239eb8
 8000e50:	240001fc 	.word	0x240001fc
 8000e54:	240007e6 	.word	0x240007e6
 8000e58:	240007e8 	.word	0x240007e8
 8000e5c:	240007ea 	.word	0x240007ea
 8000e60:	240007f8 	.word	0x240007f8
 8000e64:	240007fc 	.word	0x240007fc
 8000e68:	24000800 	.word	0x24000800
 8000e6c:	00000000 	.word	0x00000000

08000e70 <MPU6050_read_gyro>:

void MPU6050_read_gyro(void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af04      	add	r7, sp, #16
	uint8_t read_gyro[6];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, GYRO_XOUT_H, 1, read_gyro, 6, 3000);
 8000e76:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e7a:	9302      	str	r3, [sp, #8]
 8000e7c:	2306      	movs	r3, #6
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	463b      	mov	r3, r7
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2301      	movs	r3, #1
 8000e86:	2243      	movs	r2, #67	; 0x43
 8000e88:	21d0      	movs	r1, #208	; 0xd0
 8000e8a:	482b      	ldr	r0, [pc, #172]	; (8000f38 <MPU6050_read_gyro+0xc8>)
 8000e8c:	f001 ff58 	bl	8002d40 <HAL_I2C_Mem_Read>

	gyr_X_read = (int16_t)(read_gyro[0] << 8 | read_gyro[1]);
 8000e90:	783b      	ldrb	r3, [r7, #0]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	787b      	ldrb	r3, [r7, #1]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21a      	sxth	r2, r3
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <MPU6050_read_gyro+0xcc>)
 8000ea0:	801a      	strh	r2, [r3, #0]
	gyr_Y_read = (int16_t)(read_gyro[2] << 8 | read_gyro[3]);
 8000ea2:	78bb      	ldrb	r3, [r7, #2]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <MPU6050_read_gyro+0xd0>)
 8000eb2:	801a      	strh	r2, [r3, #0]
	gyr_Z_read = (int16_t)(read_gyro[4] << 8 | read_gyro[5]);
 8000eb4:	793b      	ldrb	r3, [r7, #4]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	797b      	ldrb	r3, [r7, #5]
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <MPU6050_read_gyro+0xd4>)
 8000ec4:	801a      	strh	r2, [r3, #0]

	gyr_X = gyr_X_read/131.0;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MPU6050_read_gyro+0xcc>)
 8000ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ed4:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8000f30 <MPU6050_read_gyro+0xc0>
 8000ed8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000edc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MPU6050_read_gyro+0xd8>)
 8000ee2:	edc3 7a00 	vstr	s15, [r3]
	gyr_Y = gyr_Y_read/131.0;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MPU6050_read_gyro+0xd0>)
 8000ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ef4:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8000f30 <MPU6050_read_gyro+0xc0>
 8000ef8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000efc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MPU6050_read_gyro+0xdc>)
 8000f02:	edc3 7a00 	vstr	s15, [r3]
	gyr_Z = gyr_Z_read/131.0;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MPU6050_read_gyro+0xd4>)
 8000f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f14:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8000f30 <MPU6050_read_gyro+0xc0>
 8000f18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f1c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MPU6050_read_gyro+0xe0>)
 8000f22:	edc3 7a00 	vstr	s15, [r3]
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40606000 	.word	0x40606000
 8000f38:	240001fc 	.word	0x240001fc
 8000f3c:	240007ec 	.word	0x240007ec
 8000f40:	240007ee 	.word	0x240007ee
 8000f44:	240007f0 	.word	0x240007f0
 8000f48:	24000804 	.word	0x24000804
 8000f4c:	24000808 	.word	0x24000808
 8000f50:	2400080c 	.word	0x2400080c
 8000f54:	00000000 	.word	0x00000000

08000f58 <MPU6050_read_temp>:

void MPU6050_read_temp(void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af04      	add	r7, sp, #16
	uint8_t read_temp[2];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, TEMP_OUT_H, 1, read_temp, 2, 3000);
 8000f5e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	2302      	movs	r3, #2
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	2241      	movs	r2, #65	; 0x41
 8000f70:	21d0      	movs	r1, #208	; 0xd0
 8000f72:	4817      	ldr	r0, [pc, #92]	; (8000fd0 <MPU6050_read_temp+0x78>)
 8000f74:	f001 fee4 	bl	8002d40 <HAL_I2C_Mem_Read>

	temp_read = (int16_t)(read_temp[0] << 8 | read_temp[1]);
 8000f78:	793b      	ldrb	r3, [r7, #4]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MPU6050_read_temp+0x7c>)
 8000f88:	801a      	strh	r2, [r3, #0]

	temp = (temp_read/340.0) + 36.53;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <MPU6050_read_temp+0x7c>)
 8000f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f98:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000fc0 <MPU6050_read_temp+0x68>
 8000f9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fa0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000fc8 <MPU6050_read_temp+0x70>
 8000fa4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fa8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <MPU6050_read_temp+0x80>)
 8000fae:	edc3 7a00 	vstr	s15, [r3]
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	40754000 	.word	0x40754000
 8000fc8:	0a3d70a4 	.word	0x0a3d70a4
 8000fcc:	404243d7 	.word	0x404243d7
 8000fd0:	240001fc 	.word	0x240001fc
 8000fd4:	240007f2 	.word	0x240007f2
 8000fd8:	240007f4 	.word	0x240007f4

08000fdc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	487c      	ldr	r0, [pc, #496]	; (80011d8 <HAL_UART_RxCpltCallback+0x1fc>)
 8000fe8:	f001 fcbd 	bl	8002966 <HAL_GPIO_TogglePin>
	if(huart == &huart3){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a7b      	ldr	r2, [pc, #492]	; (80011dc <HAL_UART_RxCpltCallback+0x200>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	f040 80e8 	bne.w	80011c6 <HAL_UART_RxCpltCallback+0x1ea>
		if(Rx_data[0] == 'a' | Rx_data[0] == 'A'){
 8000ff6:	4b7a      	ldr	r3, [pc, #488]	; (80011e0 <HAL_UART_RxCpltCallback+0x204>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b61      	cmp	r3, #97	; 0x61
 8000ffc:	bf0c      	ite	eq
 8000ffe:	2301      	moveq	r3, #1
 8001000:	2300      	movne	r3, #0
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b76      	ldr	r3, [pc, #472]	; (80011e0 <HAL_UART_RxCpltCallback+0x204>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b41      	cmp	r3, #65	; 0x41
 800100a:	bf0c      	ite	eq
 800100c:	2301      	moveq	r3, #1
 800100e:	2300      	movne	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d044      	beq.n	80010a4 <HAL_UART_RxCpltCallback+0xc8>
			MPU6050_read_acc();
 800101a:	f7ff fea5 	bl	8000d68 <MPU6050_read_acc>
			uart_buf_len = sprintf(uart_buf, "AccX = %.2f m/s^2 \r\n", acc_X);
 800101e:	4b71      	ldr	r3, [pc, #452]	; (80011e4 <HAL_UART_RxCpltCallback+0x208>)
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001028:	ec53 2b17 	vmov	r2, r3, d7
 800102c:	496e      	ldr	r1, [pc, #440]	; (80011e8 <HAL_UART_RxCpltCallback+0x20c>)
 800102e:	486f      	ldr	r0, [pc, #444]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 8001030:	f008 fba0 	bl	8009774 <siprintf>
 8001034:	4603      	mov	r3, r0
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b6d      	ldr	r3, [pc, #436]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 800103a:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 800103c:	4b6c      	ldr	r3, [pc, #432]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 800103e:	881a      	ldrh	r2, [r3, #0]
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	496a      	ldr	r1, [pc, #424]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 8001044:	4865      	ldr	r0, [pc, #404]	; (80011dc <HAL_UART_RxCpltCallback+0x200>)
 8001046:	f005 f8ff 	bl	8006248 <HAL_UART_Transmit>
			uart_buf_len = sprintf(uart_buf, "AccY = %.2f m/s^2 \r\n", acc_Y);
 800104a:	4b6a      	ldr	r3, [pc, #424]	; (80011f4 <HAL_UART_RxCpltCallback+0x218>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001054:	ec53 2b17 	vmov	r2, r3, d7
 8001058:	4967      	ldr	r1, [pc, #412]	; (80011f8 <HAL_UART_RxCpltCallback+0x21c>)
 800105a:	4864      	ldr	r0, [pc, #400]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 800105c:	f008 fb8a 	bl	8009774 <siprintf>
 8001060:	4603      	mov	r3, r0
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b62      	ldr	r3, [pc, #392]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 8001066:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001068:	4b61      	ldr	r3, [pc, #388]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 800106a:	881a      	ldrh	r2, [r3, #0]
 800106c:	2364      	movs	r3, #100	; 0x64
 800106e:	495f      	ldr	r1, [pc, #380]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 8001070:	485a      	ldr	r0, [pc, #360]	; (80011dc <HAL_UART_RxCpltCallback+0x200>)
 8001072:	f005 f8e9 	bl	8006248 <HAL_UART_Transmit>
			uart_buf_len = sprintf(uart_buf, "AccZ = %.2f m/s^2 \r\n", acc_Z);
 8001076:	4b61      	ldr	r3, [pc, #388]	; (80011fc <HAL_UART_RxCpltCallback+0x220>)
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001080:	ec53 2b17 	vmov	r2, r3, d7
 8001084:	495e      	ldr	r1, [pc, #376]	; (8001200 <HAL_UART_RxCpltCallback+0x224>)
 8001086:	4859      	ldr	r0, [pc, #356]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 8001088:	f008 fb74 	bl	8009774 <siprintf>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b57      	ldr	r3, [pc, #348]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 8001092:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001094:	4b56      	ldr	r3, [pc, #344]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 8001096:	881a      	ldrh	r2, [r3, #0]
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	4954      	ldr	r1, [pc, #336]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 800109c:	484f      	ldr	r0, [pc, #316]	; (80011dc <HAL_UART_RxCpltCallback+0x200>)
 800109e:	f005 f8d3 	bl	8006248 <HAL_UART_Transmit>
 80010a2:	e090      	b.n	80011c6 <HAL_UART_RxCpltCallback+0x1ea>
		} else if(Rx_data[0] == 'g' | Rx_data[0] == 'G'){
 80010a4:	4b4e      	ldr	r3, [pc, #312]	; (80011e0 <HAL_UART_RxCpltCallback+0x204>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b67      	cmp	r3, #103	; 0x67
 80010aa:	bf0c      	ite	eq
 80010ac:	2301      	moveq	r3, #1
 80010ae:	2300      	movne	r3, #0
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <HAL_UART_RxCpltCallback+0x204>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b47      	cmp	r3, #71	; 0x47
 80010b8:	bf0c      	ite	eq
 80010ba:	2301      	moveq	r3, #1
 80010bc:	2300      	movne	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d044      	beq.n	8001152 <HAL_UART_RxCpltCallback+0x176>
			MPU6050_read_gyro();
 80010c8:	f7ff fed2 	bl	8000e70 <MPU6050_read_gyro>
			uart_buf_len = sprintf(uart_buf, "GyrX = %.2f °/s \r\n", gyr_X);
 80010cc:	4b4d      	ldr	r3, [pc, #308]	; (8001204 <HAL_UART_RxCpltCallback+0x228>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010d6:	ec53 2b17 	vmov	r2, r3, d7
 80010da:	494b      	ldr	r1, [pc, #300]	; (8001208 <HAL_UART_RxCpltCallback+0x22c>)
 80010dc:	4843      	ldr	r0, [pc, #268]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 80010de:	f008 fb49 	bl	8009774 <siprintf>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 80010e8:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80010ea:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 80010ec:	881a      	ldrh	r2, [r3, #0]
 80010ee:	2364      	movs	r3, #100	; 0x64
 80010f0:	493e      	ldr	r1, [pc, #248]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 80010f2:	483a      	ldr	r0, [pc, #232]	; (80011dc <HAL_UART_RxCpltCallback+0x200>)
 80010f4:	f005 f8a8 	bl	8006248 <HAL_UART_Transmit>
			uart_buf_len = sprintf(uart_buf, "GyrY = %.2f °/s \r\n", gyr_Y);
 80010f8:	4b44      	ldr	r3, [pc, #272]	; (800120c <HAL_UART_RxCpltCallback+0x230>)
 80010fa:	edd3 7a00 	vldr	s15, [r3]
 80010fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001102:	ec53 2b17 	vmov	r2, r3, d7
 8001106:	4942      	ldr	r1, [pc, #264]	; (8001210 <HAL_UART_RxCpltCallback+0x234>)
 8001108:	4838      	ldr	r0, [pc, #224]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 800110a:	f008 fb33 	bl	8009774 <siprintf>
 800110e:	4603      	mov	r3, r0
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 8001114:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001116:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 8001118:	881a      	ldrh	r2, [r3, #0]
 800111a:	2364      	movs	r3, #100	; 0x64
 800111c:	4933      	ldr	r1, [pc, #204]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 800111e:	482f      	ldr	r0, [pc, #188]	; (80011dc <HAL_UART_RxCpltCallback+0x200>)
 8001120:	f005 f892 	bl	8006248 <HAL_UART_Transmit>
			uart_buf_len = sprintf(uart_buf, "GyrZ = %.2f °/s \r\n\n", gyr_Z);
 8001124:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_UART_RxCpltCallback+0x238>)
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800112e:	ec53 2b17 	vmov	r2, r3, d7
 8001132:	4939      	ldr	r1, [pc, #228]	; (8001218 <HAL_UART_RxCpltCallback+0x23c>)
 8001134:	482d      	ldr	r0, [pc, #180]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 8001136:	f008 fb1d 	bl	8009774 <siprintf>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 8001140:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 8001144:	881a      	ldrh	r2, [r3, #0]
 8001146:	2364      	movs	r3, #100	; 0x64
 8001148:	4928      	ldr	r1, [pc, #160]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 800114a:	4824      	ldr	r0, [pc, #144]	; (80011dc <HAL_UART_RxCpltCallback+0x200>)
 800114c:	f005 f87c 	bl	8006248 <HAL_UART_Transmit>
 8001150:	e039      	b.n	80011c6 <HAL_UART_RxCpltCallback+0x1ea>
		} else if(Rx_data[0] == 't' | Rx_data[0] == 'T'){
 8001152:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <HAL_UART_RxCpltCallback+0x204>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b74      	cmp	r3, #116	; 0x74
 8001158:	bf0c      	ite	eq
 800115a:	2301      	moveq	r3, #1
 800115c:	2300      	movne	r3, #0
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_UART_RxCpltCallback+0x204>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b54      	cmp	r3, #84	; 0x54
 8001166:	bf0c      	ite	eq
 8001168:	2301      	moveq	r3, #1
 800116a:	2300      	movne	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d018      	beq.n	80011a8 <HAL_UART_RxCpltCallback+0x1cc>
			MPU6050_read_temp();
 8001176:	f7ff feef 	bl	8000f58 <MPU6050_read_temp>
			uart_buf_len = sprintf(uart_buf, "Temp: %.2f \r\n", temp);
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <HAL_UART_RxCpltCallback+0x240>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001184:	ec53 2b17 	vmov	r2, r3, d7
 8001188:	4925      	ldr	r1, [pc, #148]	; (8001220 <HAL_UART_RxCpltCallback+0x244>)
 800118a:	4818      	ldr	r0, [pc, #96]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 800118c:	f008 faf2 	bl	8009774 <siprintf>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 8001196:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 800119a:	881a      	ldrh	r2, [r3, #0]
 800119c:	2364      	movs	r3, #100	; 0x64
 800119e:	4913      	ldr	r1, [pc, #76]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 80011a0:	480e      	ldr	r0, [pc, #56]	; (80011dc <HAL_UART_RxCpltCallback+0x200>)
 80011a2:	f005 f851 	bl	8006248 <HAL_UART_Transmit>
 80011a6:	e00e      	b.n	80011c6 <HAL_UART_RxCpltCallback+0x1ea>
		} else{
			uart_buf_len = sprintf(uart_buf, "NA\r\n");
 80011a8:	491e      	ldr	r1, [pc, #120]	; (8001224 <HAL_UART_RxCpltCallback+0x248>)
 80011aa:	4810      	ldr	r0, [pc, #64]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 80011ac:	f008 fae2 	bl	8009774 <siprintf>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 80011b6:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_UART_RxCpltCallback+0x214>)
 80011ba:	881a      	ldrh	r2, [r3, #0]
 80011bc:	2364      	movs	r3, #100	; 0x64
 80011be:	490b      	ldr	r1, [pc, #44]	; (80011ec <HAL_UART_RxCpltCallback+0x210>)
 80011c0:	4806      	ldr	r0, [pc, #24]	; (80011dc <HAL_UART_RxCpltCallback+0x200>)
 80011c2:	f005 f841 	bl	8006248 <HAL_UART_Transmit>
		}
	}

	HAL_UART_Receive_IT(&huart3, Rx_data, 4); //Reinicia la interrupcion
 80011c6:	2204      	movs	r2, #4
 80011c8:	4905      	ldr	r1, [pc, #20]	; (80011e0 <HAL_UART_RxCpltCallback+0x204>)
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <HAL_UART_RxCpltCallback+0x200>)
 80011cc:	f005 f8d2 	bl	8006374 <HAL_UART_Receive_IT>

}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	58020400 	.word	0x58020400
 80011dc:	24000248 	.word	0x24000248
 80011e0:	24000848 	.word	0x24000848
 80011e4:	240007f8 	.word	0x240007f8
 80011e8:	0800bba4 	.word	0x0800bba4
 80011ec:	24000814 	.word	0x24000814
 80011f0:	24000846 	.word	0x24000846
 80011f4:	240007fc 	.word	0x240007fc
 80011f8:	0800bbbc 	.word	0x0800bbbc
 80011fc:	24000800 	.word	0x24000800
 8001200:	0800bbd4 	.word	0x0800bbd4
 8001204:	24000804 	.word	0x24000804
 8001208:	0800bbec 	.word	0x0800bbec
 800120c:	24000808 	.word	0x24000808
 8001210:	0800bc00 	.word	0x0800bc00
 8001214:	2400080c 	.word	0x2400080c
 8001218:	0800bc14 	.word	0x0800bc14
 800121c:	240007f4 	.word	0x240007f4
 8001220:	0800bc2c 	.word	0x0800bc2c
 8001224:	0800bc3c 	.word	0x0800bc3c

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x8>
	...

08001234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_MspInit+0x30>)
 800123c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001240:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x30>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x30>)
 800124c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	58024400 	.word	0x58024400

08001268 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0b8      	sub	sp, #224	; 0xe0
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	22bc      	movs	r2, #188	; 0xbc
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f007 fe29 	bl	8008ee0 <memset>
  if(hi2c->Instance==I2C4)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <HAL_I2C_MspInit+0xc0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d142      	bne.n	800131e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001298:	2310      	movs	r3, #16
 800129a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fc16 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012b2:	f7ff ffb9 	bl	8001228 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_I2C_MspInit+0xc4>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <HAL_I2C_MspInit+0xc4>)
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_I2C_MspInit+0xc4>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012cc:	f003 0320 	and.w	r3, r3, #32
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012d4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80012ee:	2304      	movs	r3, #4
 80012f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <HAL_I2C_MspInit+0xc8>)
 80012fc:	f001 f96a 	bl	80025d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_I2C_MspInit+0xc4>)
 8001302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001306:	4a09      	ldr	r2, [pc, #36]	; (800132c <HAL_I2C_MspInit+0xc4>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_I2C_MspInit+0xc4>)
 8001312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	37e0      	adds	r7, #224	; 0xe0
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	58001c00 	.word	0x58001c00
 800132c:	58024400 	.word	0x58024400
 8001330:	58021400 	.word	0x58021400

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0b8      	sub	sp, #224	; 0xe0
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	22bc      	movs	r2, #188	; 0xbc
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f007 fdc3 	bl	8008ee0 <memset>
  if(huart->Instance==USART3)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a29      	ldr	r2, [pc, #164]	; (8001404 <HAL_UART_MspInit+0xd0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d14a      	bne.n	80013fa <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001364:	2302      	movs	r3, #2
 8001366:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4618      	mov	r0, r3
 8001374:	f003 fbb0 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800137e:	f7ff ff53 	bl	8001228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <HAL_UART_MspInit+0xd4>)
 8001384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001388:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <HAL_UART_MspInit+0xd4>)
 800138a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_UART_MspInit+0xd4>)
 8001394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_UART_MspInit+0xd4>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a6:	4a18      	ldr	r2, [pc, #96]	; (8001408 <HAL_UART_MspInit+0xd4>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_UART_MspInit+0xd4>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d8:	2307      	movs	r3, #7
 80013da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e2:	4619      	mov	r1, r3
 80013e4:	4809      	ldr	r0, [pc, #36]	; (800140c <HAL_UART_MspInit+0xd8>)
 80013e6:	f001 f8f5 	bl	80025d4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2027      	movs	r0, #39	; 0x27
 80013f0:	f000 fb57 	bl	8001aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013f4:	2027      	movs	r0, #39	; 0x27
 80013f6:	f000 fb6e 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	37e0      	adds	r7, #224	; 0xe0
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004800 	.word	0x40004800
 8001408:	58024400 	.word	0x58024400
 800140c:	58020c00 	.word	0x58020c00

08001410 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0b8      	sub	sp, #224	; 0xe0
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	22bc      	movs	r2, #188	; 0xbc
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f007 fd55 	bl	8008ee0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a36      	ldr	r2, [pc, #216]	; (8001514 <HAL_PCD_MspInit+0x104>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d165      	bne.n	800150c <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001440:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001444:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001446:	2301      	movs	r3, #1
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 800144a:	2318      	movs	r3, #24
 800144c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800144e:	2302      	movs	r3, #2
 8001450:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001452:	2304      	movs	r3, #4
 8001454:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001456:	2302      	movs	r3, #2
 8001458:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800145a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800145e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001464:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001468:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4618      	mov	r0, r3
 8001472:	f003 fb31 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800147c:	f7ff fed4 	bl	8001228 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001480:	f002 fb60 	bl	8003b44 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_PCD_MspInit+0x108>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	4a23      	ldr	r2, [pc, #140]	; (8001518 <HAL_PCD_MspInit+0x108>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001494:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_PCD_MspInit+0x108>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80014a2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80014a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80014bc:	230a      	movs	r3, #10
 80014be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014c6:	4619      	mov	r1, r3
 80014c8:	4814      	ldr	r0, [pc, #80]	; (800151c <HAL_PCD_MspInit+0x10c>)
 80014ca:	f001 f883 	bl	80025d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <HAL_PCD_MspInit+0x10c>)
 80014ea:	f001 f873 	bl	80025d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_PCD_MspInit+0x108>)
 80014f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014f4:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_PCD_MspInit+0x108>)
 80014f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_PCD_MspInit+0x108>)
 8001500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	37e0      	adds	r7, #224	; 0xe0
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40080000 	.word	0x40080000
 8001518:	58024400 	.word	0x58024400
 800151c:	58020000 	.word	0x58020000

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <NMI_Handler+0x4>

08001526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <MemManage_Handler+0x4>

08001532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <UsageFault_Handler+0x4>

0800153e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156c:	f000 f96e 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <USART3_IRQHandler+0x10>)
 800157a:	f004 ff51 	bl	8006420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	24000248 	.word	0x24000248

08001588 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
	return 1;
 800158c:	2301      	movs	r3, #1
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_kill>:

int _kill(int pid, int sig)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015a2:	f007 fc73 	bl	8008e8c <__errno>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2216      	movs	r2, #22
 80015aa:	601a      	str	r2, [r3, #0]
	return -1;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_exit>:

void _exit (int status)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ffe7 	bl	8001598 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ca:	e7fe      	b.n	80015ca <_exit+0x12>

080015cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e00a      	b.n	80015f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015de:	f3af 8000 	nop.w
 80015e2:	4601      	mov	r1, r0
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	60ba      	str	r2, [r7, #8]
 80015ea:	b2ca      	uxtb	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbf0      	blt.n	80015de <_read+0x12>
	}

return len;
 80015fc:	687b      	ldr	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	e009      	b.n	800162c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	60ba      	str	r2, [r7, #8]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	dbf1      	blt.n	8001618 <_write+0x12>
	}
	return len;
 8001634:	687b      	ldr	r3, [r7, #4]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_close>:

int _close(int file)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	return -1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001666:	605a      	str	r2, [r3, #4]
	return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_isatty>:

int _isatty(int file)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
	return 1;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
	return 0;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b0:	4a14      	ldr	r2, [pc, #80]	; (8001704 <_sbrk+0x5c>)
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <_sbrk+0x60>)
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <_sbrk+0x64>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <_sbrk+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d207      	bcs.n	80016e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d8:	f007 fbd8 	bl	8008e8c <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	220c      	movs	r2, #12
 80016e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	e009      	b.n	80016fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <_sbrk+0x64>)
 80016f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	24080000 	.word	0x24080000
 8001708:	00000400 	.word	0x00000400
 800170c:	2400084c 	.word	0x2400084c
 8001710:	24000868 	.word	0x24000868

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f7fe ffbc 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	; (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	; (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f007 fba9 	bl	8008e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f83b 	bl	80007c0 <main>
  bx  lr
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001754:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001758:	0800c064 	.word	0x0800c064
  ldr r2, =_sbss
 800175c:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001760:	24000864 	.word	0x24000864

08001764 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC3_IRQHandler>
	...

08001768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176e:	2003      	movs	r0, #3
 8001770:	f000 f98c 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001774:	f002 ffda 	bl	800472c <HAL_RCC_GetSysClockFreq>
 8001778:	4602      	mov	r2, r0
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_Init+0x68>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	4913      	ldr	r1, [pc, #76]	; (80017d4 <HAL_Init+0x6c>)
 8001786:	5ccb      	ldrb	r3, [r1, r3]
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_Init+0x68>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_Init+0x6c>)
 800179c:	5cd3      	ldrb	r3, [r2, r3]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	fa22 f303 	lsr.w	r3, r2, r3
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_Init+0x70>)
 80017aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_Init+0x74>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 f814 	bl	80017e0 <HAL_InitTick>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e002      	b.n	80017c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017c2:	f7ff fd37 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	58024400 	.word	0x58024400
 80017d4:	0800bc44 	.word	0x0800bc44
 80017d8:	24000004 	.word	0x24000004
 80017dc:	24000000 	.word	0x24000000

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_InitTick+0x60>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e021      	b.n	8001838 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_InitTick+0x64>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_InitTick+0x60>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f971 	bl	8001af2 <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f000 f93b 	bl	8001aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	; (8001848 <HAL_InitTick+0x68>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2400000c 	.word	0x2400000c
 8001844:	24000000 	.word	0x24000000
 8001848:	24000008 	.word	0x24000008

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	2400000c 	.word	0x2400000c
 8001870:	24000850 	.word	0x24000850

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	24000850 	.word	0x24000850

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff ffee 	bl	8001874 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffde 	bl	8001874 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2400000c 	.word	0x2400000c

080018d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_GetREVID+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0c1b      	lsrs	r3, r3, #16
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	5c001000 	.word	0x5c001000

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <__NVIC_SetPriorityGrouping+0x40>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001916:	4313      	orrs	r3, r2
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <__NVIC_SetPriorityGrouping+0x40>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00
 8001930:	05fa0000 	.word	0x05fa0000

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <__NVIC_EnableIRQ+0x38>)
 800196a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	; (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a58:	d301      	bcc.n	8001a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00f      	b.n	8001a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <SysTick_Config+0x40>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a66:	210f      	movs	r1, #15
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f7ff ff8e 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <SysTick_Config+0x40>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <SysTick_Config+0x40>)
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff29 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff40 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff90 	bl	80019e0 <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5f 	bl	800198c <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff33 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffa4 	bl	8001a48 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff feae 	bl	8001874 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e2dc      	b.n	80020de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d008      	beq.n	8001b42 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e2cd      	b.n	80020de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a76      	ldr	r2, [pc, #472]	; (8001d20 <HAL_DMA_Abort+0x214>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d04a      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a74      	ldr	r2, [pc, #464]	; (8001d24 <HAL_DMA_Abort+0x218>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d045      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a73      	ldr	r2, [pc, #460]	; (8001d28 <HAL_DMA_Abort+0x21c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d040      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a71      	ldr	r2, [pc, #452]	; (8001d2c <HAL_DMA_Abort+0x220>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d03b      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a70      	ldr	r2, [pc, #448]	; (8001d30 <HAL_DMA_Abort+0x224>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d036      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6e      	ldr	r2, [pc, #440]	; (8001d34 <HAL_DMA_Abort+0x228>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d031      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a6d      	ldr	r2, [pc, #436]	; (8001d38 <HAL_DMA_Abort+0x22c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d02c      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a6b      	ldr	r2, [pc, #428]	; (8001d3c <HAL_DMA_Abort+0x230>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d027      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a6a      	ldr	r2, [pc, #424]	; (8001d40 <HAL_DMA_Abort+0x234>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d022      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a68      	ldr	r2, [pc, #416]	; (8001d44 <HAL_DMA_Abort+0x238>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d01d      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a67      	ldr	r2, [pc, #412]	; (8001d48 <HAL_DMA_Abort+0x23c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d018      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a65      	ldr	r2, [pc, #404]	; (8001d4c <HAL_DMA_Abort+0x240>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a64      	ldr	r2, [pc, #400]	; (8001d50 <HAL_DMA_Abort+0x244>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00e      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a62      	ldr	r2, [pc, #392]	; (8001d54 <HAL_DMA_Abort+0x248>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d009      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a61      	ldr	r2, [pc, #388]	; (8001d58 <HAL_DMA_Abort+0x24c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d004      	beq.n	8001be2 <HAL_DMA_Abort+0xd6>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a5f      	ldr	r2, [pc, #380]	; (8001d5c <HAL_DMA_Abort+0x250>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_DMA_Abort+0xda>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_DMA_Abort+0xdc>
 8001be6:	2300      	movs	r3, #0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d013      	beq.n	8001c14 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 021e 	bic.w	r2, r2, #30
 8001bfa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c0a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e00a      	b.n	8001c2a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 020e 	bic.w	r2, r2, #14
 8001c22:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a3c      	ldr	r2, [pc, #240]	; (8001d20 <HAL_DMA_Abort+0x214>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d072      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a3a      	ldr	r2, [pc, #232]	; (8001d24 <HAL_DMA_Abort+0x218>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d06d      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a39      	ldr	r2, [pc, #228]	; (8001d28 <HAL_DMA_Abort+0x21c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d068      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a37      	ldr	r2, [pc, #220]	; (8001d2c <HAL_DMA_Abort+0x220>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d063      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a36      	ldr	r2, [pc, #216]	; (8001d30 <HAL_DMA_Abort+0x224>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d05e      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a34      	ldr	r2, [pc, #208]	; (8001d34 <HAL_DMA_Abort+0x228>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d059      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a33      	ldr	r2, [pc, #204]	; (8001d38 <HAL_DMA_Abort+0x22c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d054      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <HAL_DMA_Abort+0x230>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d04f      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a30      	ldr	r2, [pc, #192]	; (8001d40 <HAL_DMA_Abort+0x234>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d04a      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a2e      	ldr	r2, [pc, #184]	; (8001d44 <HAL_DMA_Abort+0x238>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d045      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a2d      	ldr	r2, [pc, #180]	; (8001d48 <HAL_DMA_Abort+0x23c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d040      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a2b      	ldr	r2, [pc, #172]	; (8001d4c <HAL_DMA_Abort+0x240>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d03b      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a2a      	ldr	r2, [pc, #168]	; (8001d50 <HAL_DMA_Abort+0x244>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d036      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <HAL_DMA_Abort+0x248>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d031      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a27      	ldr	r2, [pc, #156]	; (8001d58 <HAL_DMA_Abort+0x24c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d02c      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <HAL_DMA_Abort+0x250>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d027      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a24      	ldr	r2, [pc, #144]	; (8001d60 <HAL_DMA_Abort+0x254>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d022      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a22      	ldr	r2, [pc, #136]	; (8001d64 <HAL_DMA_Abort+0x258>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01d      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <HAL_DMA_Abort+0x25c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d018      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <HAL_DMA_Abort+0x260>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d013      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_DMA_Abort+0x264>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00e      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1c      	ldr	r2, [pc, #112]	; (8001d74 <HAL_DMA_Abort+0x268>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d009      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <HAL_DMA_Abort+0x26c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d004      	beq.n	8001d1a <HAL_DMA_Abort+0x20e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_DMA_Abort+0x270>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d132      	bne.n	8001d80 <HAL_DMA_Abort+0x274>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e031      	b.n	8001d82 <HAL_DMA_Abort+0x276>
 8001d1e:	bf00      	nop
 8001d20:	40020010 	.word	0x40020010
 8001d24:	40020028 	.word	0x40020028
 8001d28:	40020040 	.word	0x40020040
 8001d2c:	40020058 	.word	0x40020058
 8001d30:	40020070 	.word	0x40020070
 8001d34:	40020088 	.word	0x40020088
 8001d38:	400200a0 	.word	0x400200a0
 8001d3c:	400200b8 	.word	0x400200b8
 8001d40:	40020410 	.word	0x40020410
 8001d44:	40020428 	.word	0x40020428
 8001d48:	40020440 	.word	0x40020440
 8001d4c:	40020458 	.word	0x40020458
 8001d50:	40020470 	.word	0x40020470
 8001d54:	40020488 	.word	0x40020488
 8001d58:	400204a0 	.word	0x400204a0
 8001d5c:	400204b8 	.word	0x400204b8
 8001d60:	58025408 	.word	0x58025408
 8001d64:	5802541c 	.word	0x5802541c
 8001d68:	58025430 	.word	0x58025430
 8001d6c:	58025444 	.word	0x58025444
 8001d70:	58025458 	.word	0x58025458
 8001d74:	5802546c 	.word	0x5802546c
 8001d78:	58025480 	.word	0x58025480
 8001d7c:	58025494 	.word	0x58025494
 8001d80:	2300      	movs	r3, #0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d94:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a6d      	ldr	r2, [pc, #436]	; (8001f50 <HAL_DMA_Abort+0x444>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d04a      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a6b      	ldr	r2, [pc, #428]	; (8001f54 <HAL_DMA_Abort+0x448>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d045      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a6a      	ldr	r2, [pc, #424]	; (8001f58 <HAL_DMA_Abort+0x44c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d040      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a68      	ldr	r2, [pc, #416]	; (8001f5c <HAL_DMA_Abort+0x450>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d03b      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a67      	ldr	r2, [pc, #412]	; (8001f60 <HAL_DMA_Abort+0x454>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d036      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a65      	ldr	r2, [pc, #404]	; (8001f64 <HAL_DMA_Abort+0x458>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d031      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a64      	ldr	r2, [pc, #400]	; (8001f68 <HAL_DMA_Abort+0x45c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d02c      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a62      	ldr	r2, [pc, #392]	; (8001f6c <HAL_DMA_Abort+0x460>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d027      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a61      	ldr	r2, [pc, #388]	; (8001f70 <HAL_DMA_Abort+0x464>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d022      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a5f      	ldr	r2, [pc, #380]	; (8001f74 <HAL_DMA_Abort+0x468>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01d      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5e      	ldr	r2, [pc, #376]	; (8001f78 <HAL_DMA_Abort+0x46c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d018      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a5c      	ldr	r2, [pc, #368]	; (8001f7c <HAL_DMA_Abort+0x470>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a5b      	ldr	r2, [pc, #364]	; (8001f80 <HAL_DMA_Abort+0x474>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00e      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a59      	ldr	r2, [pc, #356]	; (8001f84 <HAL_DMA_Abort+0x478>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d009      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <HAL_DMA_Abort+0x47c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d004      	beq.n	8001e36 <HAL_DMA_Abort+0x32a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a56      	ldr	r2, [pc, #344]	; (8001f8c <HAL_DMA_Abort+0x480>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d108      	bne.n	8001e48 <HAL_DMA_Abort+0x33c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0201 	bic.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_DMA_Abort+0x34c>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e58:	e013      	b.n	8001e82 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e5a:	f7ff fd0b 	bl	8001874 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d90c      	bls.n	8001e82 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2203      	movs	r2, #3
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e12d      	b.n	80020de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1e5      	bne.n	8001e5a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a2f      	ldr	r2, [pc, #188]	; (8001f50 <HAL_DMA_Abort+0x444>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d04a      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2d      	ldr	r2, [pc, #180]	; (8001f54 <HAL_DMA_Abort+0x448>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d045      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a2c      	ldr	r2, [pc, #176]	; (8001f58 <HAL_DMA_Abort+0x44c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d040      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	; (8001f5c <HAL_DMA_Abort+0x450>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d03b      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a29      	ldr	r2, [pc, #164]	; (8001f60 <HAL_DMA_Abort+0x454>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d036      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <HAL_DMA_Abort+0x458>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d031      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <HAL_DMA_Abort+0x45c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d02c      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a24      	ldr	r2, [pc, #144]	; (8001f6c <HAL_DMA_Abort+0x460>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d027      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <HAL_DMA_Abort+0x464>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d022      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <HAL_DMA_Abort+0x468>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01d      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a20      	ldr	r2, [pc, #128]	; (8001f78 <HAL_DMA_Abort+0x46c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d018      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1e      	ldr	r2, [pc, #120]	; (8001f7c <HAL_DMA_Abort+0x470>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_DMA_Abort+0x474>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00e      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <HAL_DMA_Abort+0x478>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d009      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a1a      	ldr	r2, [pc, #104]	; (8001f88 <HAL_DMA_Abort+0x47c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_DMA_Abort+0x422>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <HAL_DMA_Abort+0x480>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_DMA_Abort+0x426>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_DMA_Abort+0x428>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d02b      	beq.n	8001f90 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	223f      	movs	r2, #63	; 0x3f
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	e02a      	b.n	8001fa6 <HAL_DMA_Abort+0x49a>
 8001f50:	40020010 	.word	0x40020010
 8001f54:	40020028 	.word	0x40020028
 8001f58:	40020040 	.word	0x40020040
 8001f5c:	40020058 	.word	0x40020058
 8001f60:	40020070 	.word	0x40020070
 8001f64:	40020088 	.word	0x40020088
 8001f68:	400200a0 	.word	0x400200a0
 8001f6c:	400200b8 	.word	0x400200b8
 8001f70:	40020410 	.word	0x40020410
 8001f74:	40020428 	.word	0x40020428
 8001f78:	40020440 	.word	0x40020440
 8001f7c:	40020458 	.word	0x40020458
 8001f80:	40020470 	.word	0x40020470
 8001f84:	40020488 	.word	0x40020488
 8001f88:	400204a0 	.word	0x400204a0
 8001f8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a4f      	ldr	r2, [pc, #316]	; (80020e8 <HAL_DMA_Abort+0x5dc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d072      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a4d      	ldr	r2, [pc, #308]	; (80020ec <HAL_DMA_Abort+0x5e0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d06d      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a4c      	ldr	r2, [pc, #304]	; (80020f0 <HAL_DMA_Abort+0x5e4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d068      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a4a      	ldr	r2, [pc, #296]	; (80020f4 <HAL_DMA_Abort+0x5e8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d063      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a49      	ldr	r2, [pc, #292]	; (80020f8 <HAL_DMA_Abort+0x5ec>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d05e      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a47      	ldr	r2, [pc, #284]	; (80020fc <HAL_DMA_Abort+0x5f0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d059      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a46      	ldr	r2, [pc, #280]	; (8002100 <HAL_DMA_Abort+0x5f4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d054      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a44      	ldr	r2, [pc, #272]	; (8002104 <HAL_DMA_Abort+0x5f8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d04f      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a43      	ldr	r2, [pc, #268]	; (8002108 <HAL_DMA_Abort+0x5fc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d04a      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a41      	ldr	r2, [pc, #260]	; (800210c <HAL_DMA_Abort+0x600>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d045      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a40      	ldr	r2, [pc, #256]	; (8002110 <HAL_DMA_Abort+0x604>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d040      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a3e      	ldr	r2, [pc, #248]	; (8002114 <HAL_DMA_Abort+0x608>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d03b      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a3d      	ldr	r2, [pc, #244]	; (8002118 <HAL_DMA_Abort+0x60c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d036      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a3b      	ldr	r2, [pc, #236]	; (800211c <HAL_DMA_Abort+0x610>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d031      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a3a      	ldr	r2, [pc, #232]	; (8002120 <HAL_DMA_Abort+0x614>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d02c      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a38      	ldr	r2, [pc, #224]	; (8002124 <HAL_DMA_Abort+0x618>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d027      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a37      	ldr	r2, [pc, #220]	; (8002128 <HAL_DMA_Abort+0x61c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d022      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a35      	ldr	r2, [pc, #212]	; (800212c <HAL_DMA_Abort+0x620>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01d      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a34      	ldr	r2, [pc, #208]	; (8002130 <HAL_DMA_Abort+0x624>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d018      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a32      	ldr	r2, [pc, #200]	; (8002134 <HAL_DMA_Abort+0x628>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a31      	ldr	r2, [pc, #196]	; (8002138 <HAL_DMA_Abort+0x62c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00e      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a2f      	ldr	r2, [pc, #188]	; (800213c <HAL_DMA_Abort+0x630>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d009      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a2e      	ldr	r2, [pc, #184]	; (8002140 <HAL_DMA_Abort+0x634>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d004      	beq.n	8002096 <HAL_DMA_Abort+0x58a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a2c      	ldr	r2, [pc, #176]	; (8002144 <HAL_DMA_Abort+0x638>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_DMA_Abort+0x58e>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_DMA_Abort+0x590>
 800209a:	2300      	movs	r3, #0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d015      	beq.n	80020cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40020010 	.word	0x40020010
 80020ec:	40020028 	.word	0x40020028
 80020f0:	40020040 	.word	0x40020040
 80020f4:	40020058 	.word	0x40020058
 80020f8:	40020070 	.word	0x40020070
 80020fc:	40020088 	.word	0x40020088
 8002100:	400200a0 	.word	0x400200a0
 8002104:	400200b8 	.word	0x400200b8
 8002108:	40020410 	.word	0x40020410
 800210c:	40020428 	.word	0x40020428
 8002110:	40020440 	.word	0x40020440
 8002114:	40020458 	.word	0x40020458
 8002118:	40020470 	.word	0x40020470
 800211c:	40020488 	.word	0x40020488
 8002120:	400204a0 	.word	0x400204a0
 8002124:	400204b8 	.word	0x400204b8
 8002128:	58025408 	.word	0x58025408
 800212c:	5802541c 	.word	0x5802541c
 8002130:	58025430 	.word	0x58025430
 8002134:	58025444 	.word	0x58025444
 8002138:	58025458 	.word	0x58025458
 800213c:	5802546c 	.word	0x5802546c
 8002140:	58025480 	.word	0x58025480
 8002144:	58025494 	.word	0x58025494

08002148 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e237      	b.n	80025ca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d004      	beq.n	8002170 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e22c      	b.n	80025ca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a5c      	ldr	r2, [pc, #368]	; (80022e8 <HAL_DMA_Abort_IT+0x1a0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d04a      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a5b      	ldr	r2, [pc, #364]	; (80022ec <HAL_DMA_Abort_IT+0x1a4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d045      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a59      	ldr	r2, [pc, #356]	; (80022f0 <HAL_DMA_Abort_IT+0x1a8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d040      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_DMA_Abort_IT+0x1ac>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d03b      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a56      	ldr	r2, [pc, #344]	; (80022f8 <HAL_DMA_Abort_IT+0x1b0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d036      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a55      	ldr	r2, [pc, #340]	; (80022fc <HAL_DMA_Abort_IT+0x1b4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d031      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a53      	ldr	r2, [pc, #332]	; (8002300 <HAL_DMA_Abort_IT+0x1b8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d02c      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_DMA_Abort_IT+0x1bc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d027      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a50      	ldr	r2, [pc, #320]	; (8002308 <HAL_DMA_Abort_IT+0x1c0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d022      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a4f      	ldr	r2, [pc, #316]	; (800230c <HAL_DMA_Abort_IT+0x1c4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d01d      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a4d      	ldr	r2, [pc, #308]	; (8002310 <HAL_DMA_Abort_IT+0x1c8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d018      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a4c      	ldr	r2, [pc, #304]	; (8002314 <HAL_DMA_Abort_IT+0x1cc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a4a      	ldr	r2, [pc, #296]	; (8002318 <HAL_DMA_Abort_IT+0x1d0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00e      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a49      	ldr	r2, [pc, #292]	; (800231c <HAL_DMA_Abort_IT+0x1d4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a47      	ldr	r2, [pc, #284]	; (8002320 <HAL_DMA_Abort_IT+0x1d8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d004      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a46      	ldr	r2, [pc, #280]	; (8002324 <HAL_DMA_Abort_IT+0x1dc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_DMA_Abort_IT+0xcc>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_DMA_Abort_IT+0xce>
 8002214:	2300      	movs	r3, #0
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8086 	beq.w	8002328 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2204      	movs	r2, #4
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2f      	ldr	r2, [pc, #188]	; (80022e8 <HAL_DMA_Abort_IT+0x1a0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d04a      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2e      	ldr	r2, [pc, #184]	; (80022ec <HAL_DMA_Abort_IT+0x1a4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d045      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <HAL_DMA_Abort_IT+0x1a8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d040      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2b      	ldr	r2, [pc, #172]	; (80022f4 <HAL_DMA_Abort_IT+0x1ac>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d03b      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <HAL_DMA_Abort_IT+0x1b0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d036      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a28      	ldr	r2, [pc, #160]	; (80022fc <HAL_DMA_Abort_IT+0x1b4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d031      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a26      	ldr	r2, [pc, #152]	; (8002300 <HAL_DMA_Abort_IT+0x1b8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d02c      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a25      	ldr	r2, [pc, #148]	; (8002304 <HAL_DMA_Abort_IT+0x1bc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d027      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a23      	ldr	r2, [pc, #140]	; (8002308 <HAL_DMA_Abort_IT+0x1c0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d022      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a22      	ldr	r2, [pc, #136]	; (800230c <HAL_DMA_Abort_IT+0x1c4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d01d      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a20      	ldr	r2, [pc, #128]	; (8002310 <HAL_DMA_Abort_IT+0x1c8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d018      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <HAL_DMA_Abort_IT+0x1cc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d013      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_DMA_Abort_IT+0x1d0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00e      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1c      	ldr	r2, [pc, #112]	; (800231c <HAL_DMA_Abort_IT+0x1d4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d009      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_DMA_Abort_IT+0x1d8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d004      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x17c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_DMA_Abort_IT+0x1dc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d108      	bne.n	80022d6 <HAL_DMA_Abort_IT+0x18e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e178      	b.n	80025c8 <HAL_DMA_Abort_IT+0x480>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0201 	bic.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e16f      	b.n	80025c8 <HAL_DMA_Abort_IT+0x480>
 80022e8:	40020010 	.word	0x40020010
 80022ec:	40020028 	.word	0x40020028
 80022f0:	40020040 	.word	0x40020040
 80022f4:	40020058 	.word	0x40020058
 80022f8:	40020070 	.word	0x40020070
 80022fc:	40020088 	.word	0x40020088
 8002300:	400200a0 	.word	0x400200a0
 8002304:	400200b8 	.word	0x400200b8
 8002308:	40020410 	.word	0x40020410
 800230c:	40020428 	.word	0x40020428
 8002310:	40020440 	.word	0x40020440
 8002314:	40020458 	.word	0x40020458
 8002318:	40020470 	.word	0x40020470
 800231c:	40020488 	.word	0x40020488
 8002320:	400204a0 	.word	0x400204a0
 8002324:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 020e 	bic.w	r2, r2, #14
 8002336:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6c      	ldr	r2, [pc, #432]	; (80024f0 <HAL_DMA_Abort_IT+0x3a8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d04a      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6b      	ldr	r2, [pc, #428]	; (80024f4 <HAL_DMA_Abort_IT+0x3ac>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d045      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a69      	ldr	r2, [pc, #420]	; (80024f8 <HAL_DMA_Abort_IT+0x3b0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d040      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a68      	ldr	r2, [pc, #416]	; (80024fc <HAL_DMA_Abort_IT+0x3b4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d03b      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a66      	ldr	r2, [pc, #408]	; (8002500 <HAL_DMA_Abort_IT+0x3b8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d036      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a65      	ldr	r2, [pc, #404]	; (8002504 <HAL_DMA_Abort_IT+0x3bc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d031      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a63      	ldr	r2, [pc, #396]	; (8002508 <HAL_DMA_Abort_IT+0x3c0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d02c      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a62      	ldr	r2, [pc, #392]	; (800250c <HAL_DMA_Abort_IT+0x3c4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d027      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a60      	ldr	r2, [pc, #384]	; (8002510 <HAL_DMA_Abort_IT+0x3c8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d022      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a5f      	ldr	r2, [pc, #380]	; (8002514 <HAL_DMA_Abort_IT+0x3cc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d01d      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a5d      	ldr	r2, [pc, #372]	; (8002518 <HAL_DMA_Abort_IT+0x3d0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d018      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a5c      	ldr	r2, [pc, #368]	; (800251c <HAL_DMA_Abort_IT+0x3d4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d013      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a5a      	ldr	r2, [pc, #360]	; (8002520 <HAL_DMA_Abort_IT+0x3d8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a59      	ldr	r2, [pc, #356]	; (8002524 <HAL_DMA_Abort_IT+0x3dc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a57      	ldr	r2, [pc, #348]	; (8002528 <HAL_DMA_Abort_IT+0x3e0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x290>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a56      	ldr	r2, [pc, #344]	; (800252c <HAL_DMA_Abort_IT+0x3e4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d108      	bne.n	80023ea <HAL_DMA_Abort_IT+0x2a2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e007      	b.n	80023fa <HAL_DMA_Abort_IT+0x2b2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a3c      	ldr	r2, [pc, #240]	; (80024f0 <HAL_DMA_Abort_IT+0x3a8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d072      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a3a      	ldr	r2, [pc, #232]	; (80024f4 <HAL_DMA_Abort_IT+0x3ac>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d06d      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a39      	ldr	r2, [pc, #228]	; (80024f8 <HAL_DMA_Abort_IT+0x3b0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d068      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a37      	ldr	r2, [pc, #220]	; (80024fc <HAL_DMA_Abort_IT+0x3b4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d063      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a36      	ldr	r2, [pc, #216]	; (8002500 <HAL_DMA_Abort_IT+0x3b8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d05e      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a34      	ldr	r2, [pc, #208]	; (8002504 <HAL_DMA_Abort_IT+0x3bc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d059      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a33      	ldr	r2, [pc, #204]	; (8002508 <HAL_DMA_Abort_IT+0x3c0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d054      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a31      	ldr	r2, [pc, #196]	; (800250c <HAL_DMA_Abort_IT+0x3c4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d04f      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a30      	ldr	r2, [pc, #192]	; (8002510 <HAL_DMA_Abort_IT+0x3c8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d04a      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2e      	ldr	r2, [pc, #184]	; (8002514 <HAL_DMA_Abort_IT+0x3cc>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d045      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2d      	ldr	r2, [pc, #180]	; (8002518 <HAL_DMA_Abort_IT+0x3d0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d040      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2b      	ldr	r2, [pc, #172]	; (800251c <HAL_DMA_Abort_IT+0x3d4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d03b      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <HAL_DMA_Abort_IT+0x3d8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d036      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a28      	ldr	r2, [pc, #160]	; (8002524 <HAL_DMA_Abort_IT+0x3dc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d031      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a27      	ldr	r2, [pc, #156]	; (8002528 <HAL_DMA_Abort_IT+0x3e0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d02c      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <HAL_DMA_Abort_IT+0x3e4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d027      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a24      	ldr	r2, [pc, #144]	; (8002530 <HAL_DMA_Abort_IT+0x3e8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d022      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a22      	ldr	r2, [pc, #136]	; (8002534 <HAL_DMA_Abort_IT+0x3ec>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01d      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a21      	ldr	r2, [pc, #132]	; (8002538 <HAL_DMA_Abort_IT+0x3f0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d018      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1f      	ldr	r2, [pc, #124]	; (800253c <HAL_DMA_Abort_IT+0x3f4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <HAL_DMA_Abort_IT+0x3f8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00e      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_DMA_Abort_IT+0x3fc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d009      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <HAL_DMA_Abort_IT+0x400>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d004      	beq.n	80024ea <HAL_DMA_Abort_IT+0x3a2>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <HAL_DMA_Abort_IT+0x404>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d132      	bne.n	8002550 <HAL_DMA_Abort_IT+0x408>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e031      	b.n	8002552 <HAL_DMA_Abort_IT+0x40a>
 80024ee:	bf00      	nop
 80024f0:	40020010 	.word	0x40020010
 80024f4:	40020028 	.word	0x40020028
 80024f8:	40020040 	.word	0x40020040
 80024fc:	40020058 	.word	0x40020058
 8002500:	40020070 	.word	0x40020070
 8002504:	40020088 	.word	0x40020088
 8002508:	400200a0 	.word	0x400200a0
 800250c:	400200b8 	.word	0x400200b8
 8002510:	40020410 	.word	0x40020410
 8002514:	40020428 	.word	0x40020428
 8002518:	40020440 	.word	0x40020440
 800251c:	40020458 	.word	0x40020458
 8002520:	40020470 	.word	0x40020470
 8002524:	40020488 	.word	0x40020488
 8002528:	400204a0 	.word	0x400204a0
 800252c:	400204b8 	.word	0x400204b8
 8002530:	58025408 	.word	0x58025408
 8002534:	5802541c 	.word	0x5802541c
 8002538:	58025430 	.word	0x58025430
 800253c:	58025444 	.word	0x58025444
 8002540:	58025458 	.word	0x58025458
 8002544:	5802546c 	.word	0x5802546c
 8002548:	58025480 	.word	0x58025480
 800254c:	58025494 	.word	0x58025494
 8002550:	2300      	movs	r3, #0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d028      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002564:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2201      	movs	r2, #1
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002584:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800259c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025a6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop

080025d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025e2:	4b89      	ldr	r3, [pc, #548]	; (8002808 <HAL_GPIO_Init+0x234>)
 80025e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025e6:	e194      	b.n	8002912 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2101      	movs	r1, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8186 	beq.w	800290c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b01      	cmp	r3, #1
 800260a:	d005      	beq.n	8002618 <HAL_GPIO_Init+0x44>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d130      	bne.n	800267a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800264e:	2201      	movs	r2, #1
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	f003 0201 	and.w	r2, r3, #1
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b03      	cmp	r3, #3
 8002684:	d017      	beq.n	80026b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d123      	bne.n	800270a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	220f      	movs	r2, #15
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	69b9      	ldr	r1, [r7, #24]
 8002706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	2203      	movs	r2, #3
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0203 	and.w	r2, r3, #3
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80e0 	beq.w	800290c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274c:	4b2f      	ldr	r3, [pc, #188]	; (800280c <HAL_GPIO_Init+0x238>)
 800274e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002752:	4a2e      	ldr	r2, [pc, #184]	; (800280c <HAL_GPIO_Init+0x238>)
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800275c:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_GPIO_Init+0x238>)
 800275e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800276a:	4a29      	ldr	r2, [pc, #164]	; (8002810 <HAL_GPIO_Init+0x23c>)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	3302      	adds	r3, #2
 8002772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	220f      	movs	r2, #15
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a20      	ldr	r2, [pc, #128]	; (8002814 <HAL_GPIO_Init+0x240>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d052      	beq.n	800283c <HAL_GPIO_Init+0x268>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_GPIO_Init+0x244>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d031      	beq.n	8002802 <HAL_GPIO_Init+0x22e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a1e      	ldr	r2, [pc, #120]	; (800281c <HAL_GPIO_Init+0x248>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d02b      	beq.n	80027fe <HAL_GPIO_Init+0x22a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <HAL_GPIO_Init+0x24c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d025      	beq.n	80027fa <HAL_GPIO_Init+0x226>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a1c      	ldr	r2, [pc, #112]	; (8002824 <HAL_GPIO_Init+0x250>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01f      	beq.n	80027f6 <HAL_GPIO_Init+0x222>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <HAL_GPIO_Init+0x254>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d019      	beq.n	80027f2 <HAL_GPIO_Init+0x21e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a1a      	ldr	r2, [pc, #104]	; (800282c <HAL_GPIO_Init+0x258>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0x21a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a19      	ldr	r2, [pc, #100]	; (8002830 <HAL_GPIO_Init+0x25c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00d      	beq.n	80027ea <HAL_GPIO_Init+0x216>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a18      	ldr	r2, [pc, #96]	; (8002834 <HAL_GPIO_Init+0x260>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <HAL_GPIO_Init+0x212>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a17      	ldr	r2, [pc, #92]	; (8002838 <HAL_GPIO_Init+0x264>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_GPIO_Init+0x20e>
 80027de:	2309      	movs	r3, #9
 80027e0:	e02d      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027e2:	230a      	movs	r3, #10
 80027e4:	e02b      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027e6:	2308      	movs	r3, #8
 80027e8:	e029      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027ea:	2307      	movs	r3, #7
 80027ec:	e027      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027ee:	2306      	movs	r3, #6
 80027f0:	e025      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027f2:	2305      	movs	r3, #5
 80027f4:	e023      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027f6:	2304      	movs	r3, #4
 80027f8:	e021      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027fa:	2303      	movs	r3, #3
 80027fc:	e01f      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027fe:	2302      	movs	r3, #2
 8002800:	e01d      	b.n	800283e <HAL_GPIO_Init+0x26a>
 8002802:	2301      	movs	r3, #1
 8002804:	e01b      	b.n	800283e <HAL_GPIO_Init+0x26a>
 8002806:	bf00      	nop
 8002808:	58000080 	.word	0x58000080
 800280c:	58024400 	.word	0x58024400
 8002810:	58000400 	.word	0x58000400
 8002814:	58020000 	.word	0x58020000
 8002818:	58020400 	.word	0x58020400
 800281c:	58020800 	.word	0x58020800
 8002820:	58020c00 	.word	0x58020c00
 8002824:	58021000 	.word	0x58021000
 8002828:	58021400 	.word	0x58021400
 800282c:	58021800 	.word	0x58021800
 8002830:	58021c00 	.word	0x58021c00
 8002834:	58022000 	.word	0x58022000
 8002838:	58022400 	.word	0x58022400
 800283c:	2300      	movs	r3, #0
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	f002 0203 	and.w	r2, r2, #3
 8002844:	0092      	lsls	r2, r2, #2
 8002846:	4093      	lsls	r3, r2
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800284e:	4938      	ldr	r1, [pc, #224]	; (8002930 <HAL_GPIO_Init+0x35c>)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800285c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	3301      	adds	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	f47f ae63 	bne.w	80025e8 <HAL_GPIO_Init+0x14>
  }
}
 8002922:	bf00      	nop
 8002924:	bf00      	nop
 8002926:	3724      	adds	r7, #36	; 0x24
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	58000400 	.word	0x58000400

08002934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	807b      	strh	r3, [r7, #2]
 8002940:	4613      	mov	r3, r2
 8002942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002944:	787b      	ldrb	r3, [r7, #1]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800294a:	887a      	ldrh	r2, [r7, #2]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002950:	e003      	b.n	800295a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	041a      	lsls	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	619a      	str	r2, [r3, #24]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	460b      	mov	r3, r1
 8002970:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002978:	887a      	ldrh	r2, [r7, #2]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4013      	ands	r3, r2
 800297e:	041a      	lsls	r2, r3, #16
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	43d9      	mvns	r1, r3
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	400b      	ands	r3, r1
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	619a      	str	r2, [r3, #24]
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80029a4:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <HAL_HSEM_FastTake+0x2c>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3320      	adds	r3, #32
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	4a07      	ldr	r2, [pc, #28]	; (80029cc <HAL_HSEM_FastTake+0x30>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	e000      	b.n	80029ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	58026400 	.word	0x58026400
 80029cc:	80000300 	.word	0x80000300

080029d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80029da:	4906      	ldr	r1, [pc, #24]	; (80029f4 <HAL_HSEM_Release+0x24>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	58026400 	.word	0x58026400

080029f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07f      	b.n	8002b0a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe fc22 	bl	8001268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2224      	movs	r2, #36	; 0x24
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d107      	bne.n	8002a72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	e006      	b.n	8002a80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d104      	bne.n	8002a92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_I2C_Init+0x11c>)
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ab0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69d9      	ldr	r1, [r3, #28]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1a      	ldr	r2, [r3, #32]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	02008000 	.word	0x02008000

08002b18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	4608      	mov	r0, r1
 8002b22:	4611      	mov	r1, r2
 8002b24:	461a      	mov	r2, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	817b      	strh	r3, [r7, #10]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	813b      	strh	r3, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	f040 80f9 	bne.w	8002d32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_I2C_Mem_Write+0x34>
 8002b46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0ed      	b.n	8002d34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_I2C_Mem_Write+0x4e>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e0e6      	b.n	8002d34 <HAL_I2C_Mem_Write+0x21c>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b6e:	f7fe fe81 	bl	8001874 <HAL_GetTick>
 8002b72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2319      	movs	r3, #25
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fbcb 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0d1      	b.n	8002d34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2221      	movs	r2, #33	; 0x21
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a3a      	ldr	r2, [r7, #32]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bb8:	88f8      	ldrh	r0, [r7, #6]
 8002bba:	893a      	ldrh	r2, [r7, #8]
 8002bbc:	8979      	ldrh	r1, [r7, #10]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fadb 	bl	8003184 <I2C_RequestMemoryWrite>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0a9      	b.n	8002d34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2bff      	cmp	r3, #255	; 0xff
 8002be8:	d90e      	bls.n	8002c08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	22ff      	movs	r2, #255	; 0xff
 8002bee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	8979      	ldrh	r1, [r7, #10]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fd33 	bl	800366c <I2C_TransferConfig>
 8002c06:	e00f      	b.n	8002c28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	8979      	ldrh	r1, [r7, #10]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fd22 	bl	800366c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fbb5 	bl	800339c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e07b      	b.n	8002d34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d034      	beq.n	8002ce0 <HAL_I2C_Mem_Write+0x1c8>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d130      	bne.n	8002ce0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	2200      	movs	r2, #0
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fb47 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e04d      	b.n	8002d34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2bff      	cmp	r3, #255	; 0xff
 8002ca0:	d90e      	bls.n	8002cc0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	8979      	ldrh	r1, [r7, #10]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fcd7 	bl	800366c <I2C_TransferConfig>
 8002cbe:	e00f      	b.n	8002ce0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	8979      	ldrh	r1, [r7, #10]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fcc6 	bl	800366c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d19e      	bne.n	8002c28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fb94 	bl	800341c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e01a      	b.n	8002d34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2220      	movs	r2, #32
 8002d04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_I2C_Mem_Write+0x224>)
 8002d12:	400b      	ands	r3, r1
 8002d14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e000      	b.n	8002d34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
  }
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	fe00e800 	.word	0xfe00e800

08002d40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	4608      	mov	r0, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	817b      	strh	r3, [r7, #10]
 8002d52:	460b      	mov	r3, r1
 8002d54:	813b      	strh	r3, [r7, #8]
 8002d56:	4613      	mov	r3, r2
 8002d58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	f040 80fd 	bne.w	8002f62 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_I2C_Mem_Read+0x34>
 8002d6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d105      	bne.n	8002d80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0f1      	b.n	8002f64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_I2C_Mem_Read+0x4e>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e0ea      	b.n	8002f64 <HAL_I2C_Mem_Read+0x224>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d96:	f7fe fd6d 	bl	8001874 <HAL_GetTick>
 8002d9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2319      	movs	r3, #25
 8002da2:	2201      	movs	r2, #1
 8002da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fab7 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0d5      	b.n	8002f64 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2222      	movs	r2, #34	; 0x22
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2240      	movs	r2, #64	; 0x40
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002de0:	88f8      	ldrh	r0, [r7, #6]
 8002de2:	893a      	ldrh	r2, [r7, #8]
 8002de4:	8979      	ldrh	r1, [r7, #10]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	4603      	mov	r3, r0
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fa1b 	bl	800322c <I2C_RequestMemoryRead>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0ad      	b.n	8002f64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2bff      	cmp	r3, #255	; 0xff
 8002e10:	d90e      	bls.n	8002e30 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	22ff      	movs	r2, #255	; 0xff
 8002e16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	8979      	ldrh	r1, [r7, #10]
 8002e20:	4b52      	ldr	r3, [pc, #328]	; (8002f6c <HAL_I2C_Mem_Read+0x22c>)
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fc1f 	bl	800366c <I2C_TransferConfig>
 8002e2e:	e00f      	b.n	8002e50 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	8979      	ldrh	r1, [r7, #10]
 8002e42:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_I2C_Mem_Read+0x22c>)
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fc0e 	bl	800366c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	2200      	movs	r2, #0
 8002e58:	2104      	movs	r1, #4
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fa5e 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e07c      	b.n	8002f64 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d034      	beq.n	8002f10 <HAL_I2C_Mem_Read+0x1d0>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d130      	bne.n	8002f10 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fa2f 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e04d      	b.n	8002f64 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2bff      	cmp	r3, #255	; 0xff
 8002ed0:	d90e      	bls.n	8002ef0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	22ff      	movs	r2, #255	; 0xff
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	8979      	ldrh	r1, [r7, #10]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fbbf 	bl	800366c <I2C_TransferConfig>
 8002eee:	e00f      	b.n	8002f10 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	8979      	ldrh	r1, [r7, #10]
 8002f02:	2300      	movs	r3, #0
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fbae 	bl	800366c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d19a      	bne.n	8002e50 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fa7c 	bl	800341c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e01a      	b.n	8002f64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2220      	movs	r2, #32
 8002f34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_I2C_Mem_Read+0x230>)
 8002f42:	400b      	ands	r3, r1
 8002f44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
  }
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	80002400 	.word	0x80002400
 8002f70:	fe00e800 	.word	0xfe00e800

08002f74 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	460b      	mov	r3, r1
 8002f82:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	f040 80ef 	bne.w	8003174 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e0e5      	b.n	8003176 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_I2C_IsDeviceReady+0x44>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e0de      	b.n	8003176 <HAL_I2C_IsDeviceReady+0x202>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2224      	movs	r2, #36	; 0x24
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d105      	bne.n	8002fe2 <HAL_I2C_IsDeviceReady+0x6e>
 8002fd6:	897b      	ldrh	r3, [r7, #10]
 8002fd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fdc:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_I2C_IsDeviceReady+0x20c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	e004      	b.n	8002fec <HAL_I2C_IsDeviceReady+0x78>
 8002fe2:	897b      	ldrh	r3, [r7, #10]
 8002fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fc3f 	bl	8001874 <HAL_GetTick>
 8002ff6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b20      	cmp	r3, #32
 8003004:	bf0c      	ite	eq
 8003006:	2301      	moveq	r3, #1
 8003008:	2300      	movne	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b10      	cmp	r3, #16
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003024:	e034      	b.n	8003090 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d01a      	beq.n	8003064 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fe fc21 	bl	8001874 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <HAL_I2C_IsDeviceReady+0xd0>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10f      	bne.n	8003064 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e088      	b.n	8003176 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b20      	cmp	r3, #32
 8003070:	bf0c      	ite	eq
 8003072:	2301      	moveq	r3, #1
 8003074:	2300      	movne	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b10      	cmp	r3, #16
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003090:	7ffb      	ldrb	r3, [r7, #31]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d102      	bne.n	800309c <HAL_I2C_IsDeviceReady+0x128>
 8003096:	7fbb      	ldrb	r3, [r7, #30]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0c4      	beq.n	8003026 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	d01a      	beq.n	80030e0 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2120      	movs	r1, #32
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f931 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e058      	b.n	8003176 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2220      	movs	r2, #32
 80030ca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	e04a      	b.n	8003176 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2200      	movs	r2, #0
 80030e8:	2120      	movs	r1, #32
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f916 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e03d      	b.n	8003176 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2210      	movs	r2, #16
 8003100:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2220      	movs	r2, #32
 8003108:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	429a      	cmp	r2, r3
 8003110:	d118      	bne.n	8003144 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003120:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2200      	movs	r2, #0
 800312a:	2120      	movs	r1, #32
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f8f5 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e01c      	b.n	8003176 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2220      	movs	r2, #32
 8003142:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3301      	adds	r3, #1
 8003148:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	429a      	cmp	r2, r3
 8003150:	f63f af3d 	bhi.w	8002fce <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	3720      	adds	r7, #32
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	02002000 	.word	0x02002000

08003184 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	4608      	mov	r0, r1
 800318e:	4611      	mov	r1, r2
 8003190:	461a      	mov	r2, r3
 8003192:	4603      	mov	r3, r0
 8003194:	817b      	strh	r3, [r7, #10]
 8003196:	460b      	mov	r3, r1
 8003198:	813b      	strh	r3, [r7, #8]
 800319a:	4613      	mov	r3, r2
 800319c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	8979      	ldrh	r1, [r7, #10]
 80031a4:	4b20      	ldr	r3, [pc, #128]	; (8003228 <I2C_RequestMemoryWrite+0xa4>)
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fa5d 	bl	800366c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	69b9      	ldr	r1, [r7, #24]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8f0 	bl	800339c <I2C_WaitOnTXISFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e02c      	b.n	8003220 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d105      	bne.n	80031d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031cc:	893b      	ldrh	r3, [r7, #8]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	629a      	str	r2, [r3, #40]	; 0x28
 80031d6:	e015      	b.n	8003204 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031d8:	893b      	ldrh	r3, [r7, #8]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	b29b      	uxth	r3, r3
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	69b9      	ldr	r1, [r7, #24]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f8d6 	bl	800339c <I2C_WaitOnTXISFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e012      	b.n	8003220 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031fa:	893b      	ldrh	r3, [r7, #8]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2200      	movs	r2, #0
 800320c:	2180      	movs	r1, #128	; 0x80
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f884 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	80002000 	.word	0x80002000

0800322c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	4608      	mov	r0, r1
 8003236:	4611      	mov	r1, r2
 8003238:	461a      	mov	r2, r3
 800323a:	4603      	mov	r3, r0
 800323c:	817b      	strh	r3, [r7, #10]
 800323e:	460b      	mov	r3, r1
 8003240:	813b      	strh	r3, [r7, #8]
 8003242:	4613      	mov	r3, r2
 8003244:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	8979      	ldrh	r1, [r7, #10]
 800324c:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <I2C_RequestMemoryRead+0xa4>)
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2300      	movs	r3, #0
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fa0a 	bl	800366c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	69b9      	ldr	r1, [r7, #24]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f89d 	bl	800339c <I2C_WaitOnTXISFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e02c      	b.n	80032c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d105      	bne.n	800327e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003272:	893b      	ldrh	r3, [r7, #8]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
 800327c:	e015      	b.n	80032aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800327e:	893b      	ldrh	r3, [r7, #8]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	b29b      	uxth	r3, r3
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	69b9      	ldr	r1, [r7, #24]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f883 	bl	800339c <I2C_WaitOnTXISFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e012      	b.n	80032c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032a0:	893b      	ldrh	r3, [r7, #8]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2140      	movs	r1, #64	; 0x40
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f831 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	80002000 	.word	0x80002000

080032d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d103      	bne.n	80032f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d007      	beq.n	8003310 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	619a      	str	r2, [r3, #24]
  }
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800332c:	e022      	b.n	8003374 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d01e      	beq.n	8003374 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003336:	f7fe fa9d 	bl	8001874 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d113      	bne.n	8003374 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	f043 0220 	orr.w	r2, r3, #32
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e00f      	b.n	8003394 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4013      	ands	r3, r2
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	429a      	cmp	r2, r3
 8003390:	d0cd      	beq.n	800332e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033a8:	e02c      	b.n	8003404 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f870 	bl	8003494 <I2C_IsErrorOccurred>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e02a      	b.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d01e      	beq.n	8003404 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c6:	f7fe fa55 	bl	8001874 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d302      	bcc.n	80033dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d113      	bne.n	8003404 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	f043 0220 	orr.w	r2, r3, #32
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e007      	b.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d1cb      	bne.n	80033aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003428:	e028      	b.n	800347c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f830 	bl	8003494 <I2C_IsErrorOccurred>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e026      	b.n	800348c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343e:	f7fe fa19 	bl	8001874 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	d302      	bcc.n	8003454 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d113      	bne.n	800347c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003458:	f043 0220 	orr.w	r2, r3, #32
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e007      	b.n	800348c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b20      	cmp	r3, #32
 8003488:	d1cf      	bne.n	800342a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d075      	beq.n	80035ac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2210      	movs	r2, #16
 80034c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034c8:	e056      	b.n	8003578 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d052      	beq.n	8003578 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034d2:	f7fe f9cf 	bl	8001874 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d302      	bcc.n	80034e8 <I2C_IsErrorOccurred+0x54>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d147      	bne.n	8003578 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800350a:	d12e      	bne.n	800356a <I2C_IsErrorOccurred+0xd6>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003512:	d02a      	beq.n	800356a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	2b20      	cmp	r3, #32
 8003518:	d027      	beq.n	800356a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003528:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800352a:	f7fe f9a3 	bl	8001874 <HAL_GetTick>
 800352e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003530:	e01b      	b.n	800356a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003532:	f7fe f99f 	bl	8001874 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b19      	cmp	r3, #25
 800353e:	d914      	bls.n	800356a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b20      	cmp	r3, #32
 8003576:	d1dc      	bne.n	8003532 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b20      	cmp	r3, #32
 8003584:	d003      	beq.n	800358e <I2C_IsErrorOccurred+0xfa>
 8003586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800358a:	2b00      	cmp	r3, #0
 800358c:	d09d      	beq.n	80034ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800358e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003592:	2b00      	cmp	r3, #0
 8003594:	d103      	bne.n	800359e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2220      	movs	r2, #32
 800359c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f043 0308 	orr.w	r3, r3, #8
 80035e6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800361a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01c      	beq.n	800365c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f7ff fe56 	bl	80032d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <I2C_IsErrorOccurred+0x1d4>)
 8003634:	400b      	ands	r3, r1
 8003636:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	431a      	orrs	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800365c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003660:	4618      	mov	r0, r3
 8003662:	3728      	adds	r7, #40	; 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	fe00e800 	.word	0xfe00e800

0800366c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	817b      	strh	r3, [r7, #10]
 800367a:	4613      	mov	r3, r2
 800367c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800367e:	897b      	ldrh	r3, [r7, #10]
 8003680:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003684:	7a7b      	ldrb	r3, [r7, #9]
 8003686:	041b      	lsls	r3, r3, #16
 8003688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800368c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	4313      	orrs	r3, r2
 8003696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800369a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	0d5b      	lsrs	r3, r3, #21
 80036a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <I2C_TransferConfig+0x60>)
 80036ac:	430b      	orrs	r3, r1
 80036ae:	43db      	mvns	r3, r3
 80036b0:	ea02 0103 	and.w	r1, r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	03ff63ff 	.word	0x03ff63ff

080036d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d138      	bne.n	8003758 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e032      	b.n	800375a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2224      	movs	r2, #36	; 0x24
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003722:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6819      	ldr	r1, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b20      	cmp	r3, #32
 800377a:	d139      	bne.n	80037f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003786:	2302      	movs	r3, #2
 8003788:	e033      	b.n	80037f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2224      	movs	r2, #36	; 0x24
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	e000      	b.n	80037f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037f0:	2302      	movs	r3, #2
  }
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003800:	b08f      	sub	sp, #60	; 0x3c
 8003802:	af0a      	add	r7, sp, #40	; 0x28
 8003804:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e116      	b.n	8003a3e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fdf0 	bl	8001410 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2203      	movs	r2, #3
 8003834:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f005 f880 	bl	8008954 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	687e      	ldr	r6, [r7, #4]
 800385c:	466d      	mov	r5, sp
 800385e:	f106 0410 	add.w	r4, r6, #16
 8003862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800386a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800386e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003872:	1d33      	adds	r3, r6, #4
 8003874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003876:	6838      	ldr	r0, [r7, #0]
 8003878:	f004 fffe 	bl	8008878 <USB_CoreInit>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2202      	movs	r2, #2
 8003886:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0d7      	b.n	8003a3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f005 f86e 	bl	8008976 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
 800389e:	e04a      	b.n	8003936 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038a0:	7bfa      	ldrb	r2, [r7, #15]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	333d      	adds	r3, #61	; 0x3d
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	333c      	adds	r3, #60	; 0x3c
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	b298      	uxth	r0, r3
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3344      	adds	r3, #68	; 0x44
 80038dc:	4602      	mov	r2, r0
 80038de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	3340      	adds	r3, #64	; 0x40
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	3348      	adds	r3, #72	; 0x48
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	334c      	adds	r3, #76	; 0x4c
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3354      	adds	r3, #84	; 0x54
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	3301      	adds	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	d3af      	bcc.n	80038a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	e044      	b.n	80039d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003946:	7bfa      	ldrb	r2, [r7, #15]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800396e:	7bfa      	ldrb	r2, [r7, #15]
 8003970:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003972:	7bfa      	ldrb	r2, [r7, #15]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	3301      	adds	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d3b5      	bcc.n	8003946 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	687e      	ldr	r6, [r7, #4]
 80039e2:	466d      	mov	r5, sp
 80039e4:	f106 0410 	add.w	r4, r6, #16
 80039e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80039f8:	1d33      	adds	r3, r6, #4
 80039fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039fc:	6838      	ldr	r0, [r7, #0]
 80039fe:	f005 f807 	bl	8008a10 <USB_DevInit>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e014      	b.n	8003a3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d102      	bne.n	8003a32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f80b 	bl	8003a48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f005 f9c5 	bl	8008dc6 <USB_DevDisconnect>

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_PCDEx_ActivateLPM+0x44>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	10000003 	.word	0x10000003

08003a90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003a98:	4b29      	ldr	r3, [pc, #164]	; (8003b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	2b06      	cmp	r3, #6
 8003aa2:	d00a      	beq.n	8003aba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003aa4:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d001      	beq.n	8003ab6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e040      	b.n	8003b38 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e03e      	b.n	8003b38 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003aba:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003ac2:	491f      	ldr	r1, [pc, #124]	; (8003b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003aca:	f7fd fed3 	bl	8001874 <HAL_GetTick>
 8003ace:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ad0:	e009      	b.n	8003ae6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ad2:	f7fd fecf 	bl	8001874 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ae0:	d901      	bls.n	8003ae6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e028      	b.n	8003b38 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ae6:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af2:	d1ee      	bne.n	8003ad2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b1e      	cmp	r3, #30
 8003af8:	d008      	beq.n	8003b0c <HAL_PWREx_ConfigSupply+0x7c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b2e      	cmp	r3, #46	; 0x2e
 8003afe:	d005      	beq.n	8003b0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b1d      	cmp	r3, #29
 8003b04:	d002      	beq.n	8003b0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b2d      	cmp	r3, #45	; 0x2d
 8003b0a:	d114      	bne.n	8003b36 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003b0c:	f7fd feb2 	bl	8001874 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b12:	e009      	b.n	8003b28 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b14:	f7fd feae 	bl	8001874 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b22:	d901      	bls.n	8003b28 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e007      	b.n	8003b38 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b34:	d1ee      	bne.n	8003b14 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	58024800 	.word	0x58024800

08003b44 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b52:	60d3      	str	r3, [r2, #12]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	58024800 	.word	0x58024800

08003b64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	; 0x30
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f000 bc1d 	b.w	80043b2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8087 	beq.w	8003c94 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b86:	4b99      	ldr	r3, [pc, #612]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b90:	4b96      	ldr	r3, [pc, #600]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d007      	beq.n	8003bac <HAL_RCC_OscConfig+0x48>
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	2b18      	cmp	r3, #24
 8003ba0:	d110      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x60>
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	4b8f      	ldr	r3, [pc, #572]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d06c      	beq.n	8003c92 <HAL_RCC_OscConfig+0x12e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d168      	bne.n	8003c92 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e3f6      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bcc:	d106      	bne.n	8003bdc <HAL_RCC_OscConfig+0x78>
 8003bce:	4b87      	ldr	r3, [pc, #540]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a86      	ldr	r2, [pc, #536]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e02e      	b.n	8003c3a <HAL_RCC_OscConfig+0xd6>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10c      	bne.n	8003bfe <HAL_RCC_OscConfig+0x9a>
 8003be4:	4b81      	ldr	r3, [pc, #516]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a80      	ldr	r2, [pc, #512]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4b7e      	ldr	r3, [pc, #504]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a7d      	ldr	r2, [pc, #500]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	e01d      	b.n	8003c3a <HAL_RCC_OscConfig+0xd6>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c06:	d10c      	bne.n	8003c22 <HAL_RCC_OscConfig+0xbe>
 8003c08:	4b78      	ldr	r3, [pc, #480]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a77      	ldr	r2, [pc, #476]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b75      	ldr	r3, [pc, #468]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a74      	ldr	r2, [pc, #464]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	e00b      	b.n	8003c3a <HAL_RCC_OscConfig+0xd6>
 8003c22:	4b72      	ldr	r3, [pc, #456]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a71      	ldr	r2, [pc, #452]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b6f      	ldr	r3, [pc, #444]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a6e      	ldr	r2, [pc, #440]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d013      	beq.n	8003c6a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7fd fe17 	bl	8001874 <HAL_GetTick>
 8003c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c4a:	f7fd fe13 	bl	8001874 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b64      	cmp	r3, #100	; 0x64
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e3aa      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c5c:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0xe6>
 8003c68:	e014      	b.n	8003c94 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6a:	f7fd fe03 	bl	8001874 <HAL_GetTick>
 8003c6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c72:	f7fd fdff 	bl	8001874 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b64      	cmp	r3, #100	; 0x64
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e396      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c84:	4b59      	ldr	r3, [pc, #356]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_RCC_OscConfig+0x10e>
 8003c90:	e000      	b.n	8003c94 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80cb 	beq.w	8003e38 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca2:	4b52      	ldr	r3, [pc, #328]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003caa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cac:	4b4f      	ldr	r3, [pc, #316]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x164>
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	2b18      	cmp	r3, #24
 8003cbc:	d156      	bne.n	8003d6c <HAL_RCC_OscConfig+0x208>
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d151      	bne.n	8003d6c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc8:	4b48      	ldr	r3, [pc, #288]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x17c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e368      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ce0:	4b42      	ldr	r3, [pc, #264]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f023 0219 	bic.w	r2, r3, #25
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	493f      	ldr	r1, [pc, #252]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cf2:	f7fd fdbf 	bl	8001874 <HAL_GetTick>
 8003cf6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfa:	f7fd fdbb 	bl	8001874 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e352      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d0c:	4b37      	ldr	r3, [pc, #220]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	f7fd fddc 	bl	80018d4 <HAL_GetREVID>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d817      	bhi.n	8003d56 <HAL_RCC_OscConfig+0x1f2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b40      	cmp	r3, #64	; 0x40
 8003d2c:	d108      	bne.n	8003d40 <HAL_RCC_OscConfig+0x1dc>
 8003d2e:	4b2f      	ldr	r3, [pc, #188]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d36:	4a2d      	ldr	r2, [pc, #180]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d3e:	e07b      	b.n	8003e38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d40:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	031b      	lsls	r3, r3, #12
 8003d4e:	4927      	ldr	r1, [pc, #156]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d54:	e070      	b.n	8003e38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d56:	4b25      	ldr	r3, [pc, #148]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	061b      	lsls	r3, r3, #24
 8003d64:	4921      	ldr	r1, [pc, #132]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d6a:	e065      	b.n	8003e38 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d048      	beq.n	8003e06 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 0219 	bic.w	r2, r3, #25
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	491a      	ldr	r1, [pc, #104]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fd fd75 	bl	8001874 <HAL_GetTick>
 8003d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d8e:	f7fd fd71 	bl	8001874 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e308      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dac:	f7fd fd92 	bl	80018d4 <HAL_GetREVID>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d81a      	bhi.n	8003df0 <HAL_RCC_OscConfig+0x28c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d108      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x270>
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd0:	6053      	str	r3, [r2, #4]
 8003dd2:	e031      	b.n	8003e38 <HAL_RCC_OscConfig+0x2d4>
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	031b      	lsls	r3, r3, #12
 8003de2:	4902      	ldr	r1, [pc, #8]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
 8003de8:	e026      	b.n	8003e38 <HAL_RCC_OscConfig+0x2d4>
 8003dea:	bf00      	nop
 8003dec:	58024400 	.word	0x58024400
 8003df0:	4b9a      	ldr	r3, [pc, #616]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	4997      	ldr	r1, [pc, #604]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
 8003e04:	e018      	b.n	8003e38 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e06:	4b95      	ldr	r3, [pc, #596]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a94      	ldr	r2, [pc, #592]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fd fd2f 	bl	8001874 <HAL_GetTick>
 8003e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1a:	f7fd fd2b 	bl	8001874 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e2c2      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e2c:	4b8b      	ldr	r3, [pc, #556]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f0      	bne.n	8003e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80a9 	beq.w	8003f98 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e46:	4b85      	ldr	r3, [pc, #532]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e50:	4b82      	ldr	r3, [pc, #520]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d007      	beq.n	8003e6c <HAL_RCC_OscConfig+0x308>
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b18      	cmp	r3, #24
 8003e60:	d13a      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x374>
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d135      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e6c:	4b7b      	ldr	r3, [pc, #492]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_OscConfig+0x320>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	2b80      	cmp	r3, #128	; 0x80
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e296      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e84:	f7fd fd26 	bl	80018d4 <HAL_GetREVID>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d817      	bhi.n	8003ec2 <HAL_RCC_OscConfig+0x35e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d108      	bne.n	8003eac <HAL_RCC_OscConfig+0x348>
 8003e9a:	4b70      	ldr	r3, [pc, #448]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ea2:	4a6e      	ldr	r2, [pc, #440]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003ea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ea8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003eaa:	e075      	b.n	8003f98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eac:	4b6b      	ldr	r3, [pc, #428]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	069b      	lsls	r3, r3, #26
 8003eba:	4968      	ldr	r1, [pc, #416]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ec0:	e06a      	b.n	8003f98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ec2:	4b66      	ldr	r3, [pc, #408]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	061b      	lsls	r3, r3, #24
 8003ed0:	4962      	ldr	r1, [pc, #392]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ed6:	e05f      	b.n	8003f98 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d042      	beq.n	8003f66 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ee0:	4b5e      	ldr	r3, [pc, #376]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a5d      	ldr	r2, [pc, #372]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fd fcc2 	bl	8001874 <HAL_GetTick>
 8003ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ef4:	f7fd fcbe 	bl	8001874 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e255      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f06:	4b55      	ldr	r3, [pc, #340]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f12:	f7fd fcdf 	bl	80018d4 <HAL_GetREVID>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d817      	bhi.n	8003f50 <HAL_RCC_OscConfig+0x3ec>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d108      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3d6>
 8003f28:	4b4c      	ldr	r3, [pc, #304]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f30:	4a4a      	ldr	r2, [pc, #296]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003f32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f36:	6053      	str	r3, [r2, #4]
 8003f38:	e02e      	b.n	8003f98 <HAL_RCC_OscConfig+0x434>
 8003f3a:	4b48      	ldr	r3, [pc, #288]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	069b      	lsls	r3, r3, #26
 8003f48:	4944      	ldr	r1, [pc, #272]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	604b      	str	r3, [r1, #4]
 8003f4e:	e023      	b.n	8003f98 <HAL_RCC_OscConfig+0x434>
 8003f50:	4b42      	ldr	r3, [pc, #264]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	493f      	ldr	r1, [pc, #252]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60cb      	str	r3, [r1, #12]
 8003f64:	e018      	b.n	8003f98 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f66:	4b3d      	ldr	r3, [pc, #244]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a3c      	ldr	r2, [pc, #240]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f72:	f7fd fc7f 	bl	8001874 <HAL_GetTick>
 8003f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f7a:	f7fd fc7b 	bl	8001874 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e212      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f8c:	4b33      	ldr	r3, [pc, #204]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f0      	bne.n	8003f7a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d036      	beq.n	8004012 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d019      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fac:	4b2b      	ldr	r3, [pc, #172]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fd fc5c 	bl	8001874 <HAL_GetTick>
 8003fbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc0:	f7fd fc58 	bl	8001874 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e1ef      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fd2:	4b22      	ldr	r3, [pc, #136]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x45c>
 8003fde:	e018      	b.n	8004012 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe4:	4a1d      	ldr	r2, [pc, #116]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fd fc42 	bl	8001874 <HAL_GetTick>
 8003ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff4:	f7fd fc3e 	bl	8001874 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1d5      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8004008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d039      	beq.n	8004092 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01c      	beq.n	8004060 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004026:	4b0d      	ldr	r3, [pc, #52]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a0c      	ldr	r2, [pc, #48]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 800402c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004030:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004032:	f7fd fc1f 	bl	8001874 <HAL_GetTick>
 8004036:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800403a:	f7fd fc1b 	bl	8001874 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e1b2      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x4d6>
 8004058:	e01b      	b.n	8004092 <HAL_RCC_OscConfig+0x52e>
 800405a:	bf00      	nop
 800405c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004060:	4b9b      	ldr	r3, [pc, #620]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a9a      	ldr	r2, [pc, #616]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800406a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800406c:	f7fd fc02 	bl	8001874 <HAL_GetTick>
 8004070:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004074:	f7fd fbfe 	bl	8001874 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e195      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004086:	4b92      	ldr	r3, [pc, #584]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8081 	beq.w	80041a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040a0:	4b8c      	ldr	r3, [pc, #560]	; (80042d4 <HAL_RCC_OscConfig+0x770>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a8b      	ldr	r2, [pc, #556]	; (80042d4 <HAL_RCC_OscConfig+0x770>)
 80040a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040ac:	f7fd fbe2 	bl	8001874 <HAL_GetTick>
 80040b0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040b4:	f7fd fbde 	bl	8001874 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	; 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e175      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040c6:	4b83      	ldr	r3, [pc, #524]	; (80042d4 <HAL_RCC_OscConfig+0x770>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d106      	bne.n	80040e8 <HAL_RCC_OscConfig+0x584>
 80040da:	4b7d      	ldr	r3, [pc, #500]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a7c      	ldr	r2, [pc, #496]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	e02d      	b.n	8004144 <HAL_RCC_OscConfig+0x5e0>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10c      	bne.n	800410a <HAL_RCC_OscConfig+0x5a6>
 80040f0:	4b77      	ldr	r3, [pc, #476]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a76      	ldr	r2, [pc, #472]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
 80040fc:	4b74      	ldr	r3, [pc, #464]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a73      	ldr	r2, [pc, #460]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004102:	f023 0304 	bic.w	r3, r3, #4
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
 8004108:	e01c      	b.n	8004144 <HAL_RCC_OscConfig+0x5e0>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b05      	cmp	r3, #5
 8004110:	d10c      	bne.n	800412c <HAL_RCC_OscConfig+0x5c8>
 8004112:	4b6f      	ldr	r3, [pc, #444]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	4a6e      	ldr	r2, [pc, #440]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004118:	f043 0304 	orr.w	r3, r3, #4
 800411c:	6713      	str	r3, [r2, #112]	; 0x70
 800411e:	4b6c      	ldr	r3, [pc, #432]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	4a6b      	ldr	r2, [pc, #428]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	6713      	str	r3, [r2, #112]	; 0x70
 800412a:	e00b      	b.n	8004144 <HAL_RCC_OscConfig+0x5e0>
 800412c:	4b68      	ldr	r3, [pc, #416]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	4a67      	ldr	r2, [pc, #412]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	6713      	str	r3, [r2, #112]	; 0x70
 8004138:	4b65      	ldr	r3, [pc, #404]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	4a64      	ldr	r2, [pc, #400]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 800413e:	f023 0304 	bic.w	r3, r3, #4
 8004142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d015      	beq.n	8004178 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414c:	f7fd fb92 	bl	8001874 <HAL_GetTick>
 8004150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004152:	e00a      	b.n	800416a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004154:	f7fd fb8e 	bl	8001874 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e123      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800416a:	4b59      	ldr	r3, [pc, #356]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0ee      	beq.n	8004154 <HAL_RCC_OscConfig+0x5f0>
 8004176:	e014      	b.n	80041a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fd fb7c 	bl	8001874 <HAL_GetTick>
 800417c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004180:	f7fd fb78 	bl	8001874 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e10d      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004196:	4b4e      	ldr	r3, [pc, #312]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1ee      	bne.n	8004180 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8102 	beq.w	80043b0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80041ac:	4b48      	ldr	r3, [pc, #288]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041b4:	2b18      	cmp	r3, #24
 80041b6:	f000 80bd 	beq.w	8004334 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2b02      	cmp	r3, #2
 80041c0:	f040 809e 	bne.w	8004300 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c4:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a41      	ldr	r2, [pc, #260]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80041ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd fb50 	bl	8001874 <HAL_GetTick>
 80041d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fd fb4c 	bl	8001874 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e0e3      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041ea:	4b39      	ldr	r3, [pc, #228]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f6:	4b36      	ldr	r3, [pc, #216]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80041f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041fa:	4b37      	ldr	r3, [pc, #220]	; (80042d8 <HAL_RCC_OscConfig+0x774>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004206:	0112      	lsls	r2, r2, #4
 8004208:	430a      	orrs	r2, r1
 800420a:	4931      	ldr	r1, [pc, #196]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 800420c:	4313      	orrs	r3, r2
 800420e:	628b      	str	r3, [r1, #40]	; 0x28
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	3b01      	subs	r3, #1
 8004216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421e:	3b01      	subs	r3, #1
 8004220:	025b      	lsls	r3, r3, #9
 8004222:	b29b      	uxth	r3, r3
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422a:	3b01      	subs	r3, #1
 800422c:	041b      	lsls	r3, r3, #16
 800422e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	3b01      	subs	r3, #1
 800423a:	061b      	lsls	r3, r3, #24
 800423c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004240:	4923      	ldr	r1, [pc, #140]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004242:	4313      	orrs	r3, r2
 8004244:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004246:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004252:	4b1f      	ldr	r3, [pc, #124]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <HAL_RCC_OscConfig+0x778>)
 8004258:	4013      	ands	r3, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800425e:	00d2      	lsls	r2, r2, #3
 8004260:	491b      	ldr	r1, [pc, #108]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004262:	4313      	orrs	r3, r2
 8004264:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004266:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f023 020c 	bic.w	r2, r3, #12
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	4917      	ldr	r1, [pc, #92]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004274:	4313      	orrs	r3, r2
 8004276:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	f023 0202 	bic.w	r2, r3, #2
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004284:	4912      	ldr	r1, [pc, #72]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004286:	4313      	orrs	r3, r2
 8004288:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800428a:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	4a10      	ldr	r2, [pc, #64]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004296:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	4a0d      	ldr	r2, [pc, #52]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 800429c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80042a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80042ae:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	4a07      	ldr	r2, [pc, #28]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <HAL_RCC_OscConfig+0x76c>)
 80042c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fd fad5 	bl	8001874 <HAL_GetTick>
 80042ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042cc:	e011      	b.n	80042f2 <HAL_RCC_OscConfig+0x78e>
 80042ce:	bf00      	nop
 80042d0:	58024400 	.word	0x58024400
 80042d4:	58024800 	.word	0x58024800
 80042d8:	fffffc0c 	.word	0xfffffc0c
 80042dc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e0:	f7fd fac8 	bl	8001874 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e05f      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042f2:	4b32      	ldr	r3, [pc, #200]	; (80043bc <HAL_RCC_OscConfig+0x858>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0x77c>
 80042fe:	e057      	b.n	80043b0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004300:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <HAL_RCC_OscConfig+0x858>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a2d      	ldr	r2, [pc, #180]	; (80043bc <HAL_RCC_OscConfig+0x858>)
 8004306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800430a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fd fab2 	bl	8001874 <HAL_GetTick>
 8004310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004314:	f7fd faae 	bl	8001874 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e045      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004326:	4b25      	ldr	r3, [pc, #148]	; (80043bc <HAL_RCC_OscConfig+0x858>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x7b0>
 8004332:	e03d      	b.n	80043b0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004334:	4b21      	ldr	r3, [pc, #132]	; (80043bc <HAL_RCC_OscConfig+0x858>)
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800433a:	4b20      	ldr	r3, [pc, #128]	; (80043bc <HAL_RCC_OscConfig+0x858>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2b01      	cmp	r3, #1
 8004346:	d031      	beq.n	80043ac <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f003 0203 	and.w	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d12a      	bne.n	80043ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	091b      	lsrs	r3, r3, #4
 800435a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004362:	429a      	cmp	r2, r3
 8004364:	d122      	bne.n	80043ac <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d11a      	bne.n	80043ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	0a5b      	lsrs	r3, r3, #9
 800437a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d111      	bne.n	80043ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	0c1b      	lsrs	r3, r3, #16
 800438c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d108      	bne.n	80043ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	0e1b      	lsrs	r3, r3, #24
 800439e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3730      	adds	r7, #48	; 0x30
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	58024400 	.word	0x58024400

080043c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e19c      	b.n	800470e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043d4:	4b8a      	ldr	r3, [pc, #552]	; (8004600 <HAL_RCC_ClockConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d910      	bls.n	8004404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e2:	4b87      	ldr	r3, [pc, #540]	; (8004600 <HAL_RCC_ClockConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 020f 	bic.w	r2, r3, #15
 80043ea:	4985      	ldr	r1, [pc, #532]	; (8004600 <HAL_RCC_ClockConfig+0x240>)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f2:	4b83      	ldr	r3, [pc, #524]	; (8004600 <HAL_RCC_ClockConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d001      	beq.n	8004404 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e184      	b.n	800470e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d010      	beq.n	8004432 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	4b7b      	ldr	r3, [pc, #492]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800441c:	429a      	cmp	r2, r3
 800441e:	d908      	bls.n	8004432 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004420:	4b78      	ldr	r3, [pc, #480]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	4975      	ldr	r1, [pc, #468]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 800442e:	4313      	orrs	r3, r2
 8004430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d010      	beq.n	8004460 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	4b70      	ldr	r3, [pc, #448]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800444a:	429a      	cmp	r2, r3
 800444c:	d908      	bls.n	8004460 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800444e:	4b6d      	ldr	r3, [pc, #436]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	496a      	ldr	r1, [pc, #424]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 800445c:	4313      	orrs	r3, r2
 800445e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	d010      	beq.n	800448e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699a      	ldr	r2, [r3, #24]
 8004470:	4b64      	ldr	r3, [pc, #400]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004478:	429a      	cmp	r2, r3
 800447a:	d908      	bls.n	800448e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800447c:	4b61      	ldr	r3, [pc, #388]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	495e      	ldr	r1, [pc, #376]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 800448a:	4313      	orrs	r3, r2
 800448c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d010      	beq.n	80044bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	4b59      	ldr	r3, [pc, #356]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d908      	bls.n	80044bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80044aa:	4b56      	ldr	r3, [pc, #344]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	4953      	ldr	r1, [pc, #332]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d010      	beq.n	80044ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	4b4d      	ldr	r3, [pc, #308]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d908      	bls.n	80044ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d8:	4b4a      	ldr	r3, [pc, #296]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f023 020f 	bic.w	r2, r3, #15
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4947      	ldr	r1, [pc, #284]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d055      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80044f6:	4b43      	ldr	r3, [pc, #268]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	4940      	ldr	r1, [pc, #256]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 8004504:	4313      	orrs	r3, r2
 8004506:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b02      	cmp	r3, #2
 800450e:	d107      	bne.n	8004520 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004510:	4b3c      	ldr	r3, [pc, #240]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d121      	bne.n	8004560 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0f6      	b.n	800470e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d107      	bne.n	8004538 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004528:	4b36      	ldr	r3, [pc, #216]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d115      	bne.n	8004560 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0ea      	b.n	800470e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d107      	bne.n	8004550 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0de      	b.n	800470e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004550:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0d6      	b.n	800470e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004560:	4b28      	ldr	r3, [pc, #160]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f023 0207 	bic.w	r2, r3, #7
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4925      	ldr	r1, [pc, #148]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 800456e:	4313      	orrs	r3, r2
 8004570:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004572:	f7fd f97f 	bl	8001874 <HAL_GetTick>
 8004576:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004578:	e00a      	b.n	8004590 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457a:	f7fd f97b 	bl	8001874 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f241 3288 	movw	r2, #5000	; 0x1388
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e0be      	b.n	800470e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004590:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	429a      	cmp	r2, r3
 80045a0:	d1eb      	bne.n	800457a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d010      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	4b14      	ldr	r3, [pc, #80]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d208      	bcs.n	80045d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f023 020f 	bic.w	r2, r3, #15
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	490e      	ldr	r1, [pc, #56]	; (8004604 <HAL_RCC_ClockConfig+0x244>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_ClockConfig+0x240>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d214      	bcs.n	8004608 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <HAL_RCC_ClockConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 020f 	bic.w	r2, r3, #15
 80045e6:	4906      	ldr	r1, [pc, #24]	; (8004600 <HAL_RCC_ClockConfig+0x240>)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ee:	4b04      	ldr	r3, [pc, #16]	; (8004600 <HAL_RCC_ClockConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e086      	b.n	800470e <HAL_RCC_ClockConfig+0x34e>
 8004600:	52002000 	.word	0x52002000
 8004604:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d010      	beq.n	8004636 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004620:	429a      	cmp	r2, r3
 8004622:	d208      	bcs.n	8004636 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004624:	4b3c      	ldr	r3, [pc, #240]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	4939      	ldr	r1, [pc, #228]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 8004632:	4313      	orrs	r3, r2
 8004634:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d010      	beq.n	8004664 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	4b34      	ldr	r3, [pc, #208]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800464e:	429a      	cmp	r2, r3
 8004650:	d208      	bcs.n	8004664 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004652:	4b31      	ldr	r3, [pc, #196]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	492e      	ldr	r1, [pc, #184]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 8004660:	4313      	orrs	r3, r2
 8004662:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0310 	and.w	r3, r3, #16
 800466c:	2b00      	cmp	r3, #0
 800466e:	d010      	beq.n	8004692 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699a      	ldr	r2, [r3, #24]
 8004674:	4b28      	ldr	r3, [pc, #160]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800467c:	429a      	cmp	r2, r3
 800467e:	d208      	bcs.n	8004692 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004680:	4b25      	ldr	r3, [pc, #148]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	4922      	ldr	r1, [pc, #136]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 800468e:	4313      	orrs	r3, r2
 8004690:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d010      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	4b1d      	ldr	r3, [pc, #116]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d208      	bcs.n	80046c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80046ae:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4917      	ldr	r1, [pc, #92]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046c0:	f000 f834 	bl	800472c <HAL_RCC_GetSysClockFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b14      	ldr	r3, [pc, #80]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	0a1b      	lsrs	r3, r3, #8
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	4912      	ldr	r1, [pc, #72]	; (800471c <HAL_RCC_ClockConfig+0x35c>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
 80046dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046de:	4b0e      	ldr	r3, [pc, #56]	; (8004718 <HAL_RCC_ClockConfig+0x358>)
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	4a0d      	ldr	r2, [pc, #52]	; (800471c <HAL_RCC_ClockConfig+0x35c>)
 80046e8:	5cd3      	ldrb	r3, [r2, r3]
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
 80046f4:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <HAL_RCC_ClockConfig+0x360>)
 80046f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046f8:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <HAL_RCC_ClockConfig+0x364>)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <HAL_RCC_ClockConfig+0x368>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fd f86c 	bl	80017e0 <HAL_InitTick>
 8004708:	4603      	mov	r3, r0
 800470a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	58024400 	.word	0x58024400
 800471c:	0800bc44 	.word	0x0800bc44
 8004720:	24000004 	.word	0x24000004
 8004724:	24000000 	.word	0x24000000
 8004728:	24000008 	.word	0x24000008

0800472c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	; 0x24
 8004730:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004732:	4bb3      	ldr	r3, [pc, #716]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800473a:	2b18      	cmp	r3, #24
 800473c:	f200 8155 	bhi.w	80049ea <HAL_RCC_GetSysClockFreq+0x2be>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	080047ad 	.word	0x080047ad
 800474c:	080049eb 	.word	0x080049eb
 8004750:	080049eb 	.word	0x080049eb
 8004754:	080049eb 	.word	0x080049eb
 8004758:	080049eb 	.word	0x080049eb
 800475c:	080049eb 	.word	0x080049eb
 8004760:	080049eb 	.word	0x080049eb
 8004764:	080049eb 	.word	0x080049eb
 8004768:	080047d3 	.word	0x080047d3
 800476c:	080049eb 	.word	0x080049eb
 8004770:	080049eb 	.word	0x080049eb
 8004774:	080049eb 	.word	0x080049eb
 8004778:	080049eb 	.word	0x080049eb
 800477c:	080049eb 	.word	0x080049eb
 8004780:	080049eb 	.word	0x080049eb
 8004784:	080049eb 	.word	0x080049eb
 8004788:	080047d9 	.word	0x080047d9
 800478c:	080049eb 	.word	0x080049eb
 8004790:	080049eb 	.word	0x080049eb
 8004794:	080049eb 	.word	0x080049eb
 8004798:	080049eb 	.word	0x080049eb
 800479c:	080049eb 	.word	0x080049eb
 80047a0:	080049eb 	.word	0x080049eb
 80047a4:	080049eb 	.word	0x080049eb
 80047a8:	080047df 	.word	0x080047df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047ac:	4b94      	ldr	r3, [pc, #592]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047b8:	4b91      	ldr	r3, [pc, #580]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	4a90      	ldr	r2, [pc, #576]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
 80047c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80047ca:	e111      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80047cc:	4b8d      	ldr	r3, [pc, #564]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047ce:	61bb      	str	r3, [r7, #24]
    break;
 80047d0:	e10e      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80047d2:	4b8d      	ldr	r3, [pc, #564]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047d4:	61bb      	str	r3, [r7, #24]
    break;
 80047d6:	e10b      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80047d8:	4b8c      	ldr	r3, [pc, #560]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80047da:	61bb      	str	r3, [r7, #24]
    break;
 80047dc:	e108      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047de:	4b88      	ldr	r3, [pc, #544]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80047e8:	4b85      	ldr	r3, [pc, #532]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047f4:	4b82      	ldr	r3, [pc, #520]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80047fe:	4b80      	ldr	r3, [pc, #512]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	08db      	lsrs	r3, r3, #3
 8004804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80e1 	beq.w	80049e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b02      	cmp	r3, #2
 8004826:	f000 8083 	beq.w	8004930 <HAL_RCC_GetSysClockFreq+0x204>
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b02      	cmp	r3, #2
 800482e:	f200 80a1 	bhi.w	8004974 <HAL_RCC_GetSysClockFreq+0x248>
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0x114>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d056      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800483e:	e099      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004840:	4b6f      	ldr	r3, [pc, #444]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d02d      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800484c:	4b6c      	ldr	r3, [pc, #432]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	08db      	lsrs	r3, r3, #3
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	4a6b      	ldr	r2, [pc, #428]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
 800485c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	ee07 3a90 	vmov	s15, r3
 8004864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004876:	4b62      	ldr	r3, [pc, #392]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004886:	ed97 6a02 	vldr	s12, [r7, #8]
 800488a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004a10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800488e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800489a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80048a6:	e087      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004a14 <HAL_RCC_GetSysClockFreq+0x2e8>
 80048b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ba:	4b51      	ldr	r3, [pc, #324]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004a10 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ea:	e065      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004a18 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fe:	4b40      	ldr	r3, [pc, #256]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004912:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004a10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800491a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800491e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800492e:	e043      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004a1c <HAL_RCC_GetSysClockFreq+0x2f0>
 800493e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004942:	4b2f      	ldr	r3, [pc, #188]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004952:	ed97 6a02 	vldr	s12, [r7, #8]
 8004956:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004a10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800495a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800496a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004972:	e021      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004a18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004986:	4b1e      	ldr	r3, [pc, #120]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004996:	ed97 6a02 	vldr	s12, [r7, #8]
 800499a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004a10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800499e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80049b8:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	0a5b      	lsrs	r3, r3, #9
 80049be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c2:	3301      	adds	r3, #1
 80049c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049dc:	ee17 3a90 	vmov	r3, s15
 80049e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80049e2:	e005      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
    break;
 80049e8:	e002      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80049ea:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049ec:	61bb      	str	r3, [r7, #24]
    break;
 80049ee:	bf00      	nop
  }

  return sysclockfreq;
 80049f0:	69bb      	ldr	r3, [r7, #24]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3724      	adds	r7, #36	; 0x24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	58024400 	.word	0x58024400
 8004a04:	03d09000 	.word	0x03d09000
 8004a08:	003d0900 	.word	0x003d0900
 8004a0c:	007a1200 	.word	0x007a1200
 8004a10:	46000000 	.word	0x46000000
 8004a14:	4c742400 	.word	0x4c742400
 8004a18:	4a742400 	.word	0x4a742400
 8004a1c:	4af42400 	.word	0x4af42400

08004a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a26:	f7ff fe81 	bl	800472c <HAL_RCC_GetSysClockFreq>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	0a1b      	lsrs	r3, r3, #8
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	490f      	ldr	r1, [pc, #60]	; (8004a74 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a38:	5ccb      	ldrb	r3, [r1, r3]
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a44:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a4e:	5cd3      	ldrb	r3, [r2, r3]
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5a:	4a07      	ldr	r2, [pc, #28]	; (8004a78 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a5e:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004a64:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a66:	681b      	ldr	r3, [r3, #0]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	58024400 	.word	0x58024400
 8004a74:	0800bc44 	.word	0x0800bc44
 8004a78:	24000004 	.word	0x24000004
 8004a7c:	24000000 	.word	0x24000000

08004a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004a84:	f7ff ffcc 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	091b      	lsrs	r3, r3, #4
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4904      	ldr	r1, [pc, #16]	; (8004aa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a96:	5ccb      	ldrb	r3, [r1, r3]
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	58024400 	.word	0x58024400
 8004aa8:	0800bc44 	.word	0x0800bc44

08004aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ab0:	f7ff ffb6 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	0a1b      	lsrs	r3, r3, #8
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	4904      	ldr	r1, [pc, #16]	; (8004ad4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ac2:	5ccb      	ldrb	r3, [r1, r3]
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	58024400 	.word	0x58024400
 8004ad4:	0800bc44 	.word	0x0800bc44

08004ad8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d03f      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004af8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004afc:	d02a      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004afe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b02:	d824      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b08:	d018      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b0e:	d81e      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b18:	d007      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b1a:	e018      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1c:	4ba3      	ldr	r3, [pc, #652]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4aa2      	ldr	r2, [pc, #648]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004b28:	e015      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	2102      	movs	r1, #2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 f9d5 	bl	8005ee0 <RCCEx_PLL2_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004b3a:	e00c      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3324      	adds	r3, #36	; 0x24
 8004b40:	2102      	movs	r1, #2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 fa7e 	bl	8006044 <RCCEx_PLL3_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004b4c:	e003      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
      break;
 8004b52:	e000      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b5c:	4b93      	ldr	r3, [pc, #588]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b68:	4990      	ldr	r1, [pc, #576]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	650b      	str	r3, [r1, #80]	; 0x50
 8004b6e:	e001      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d03d      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d826      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba5 	.word	0x08004ba5
 8004b94:	08004bb3 	.word	0x08004bb3
 8004b98:	08004bc5 	.word	0x08004bc5
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bdd 	.word	0x08004bdd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba4:	4b81      	ldr	r3, [pc, #516]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	4a80      	ldr	r2, [pc, #512]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bb0:	e015      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 f991 	bl	8005ee0 <RCCEx_PLL2_Config>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bc2:	e00c      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3324      	adds	r3, #36	; 0x24
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f001 fa3a 	bl	8006044 <RCCEx_PLL3_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bd4:	e003      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004bda:	e000      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004be4:	4b71      	ldr	r3, [pc, #452]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be8:	f023 0207 	bic.w	r2, r3, #7
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf0:	496e      	ldr	r1, [pc, #440]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	650b      	str	r3, [r1, #80]	; 0x50
 8004bf6:	e001      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d042      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c10:	d02b      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c16:	d825      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004c18:	2bc0      	cmp	r3, #192	; 0xc0
 8004c1a:	d028      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c1c:	2bc0      	cmp	r3, #192	; 0xc0
 8004c1e:	d821      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004c20:	2b80      	cmp	r3, #128	; 0x80
 8004c22:	d016      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004c24:	2b80      	cmp	r3, #128	; 0x80
 8004c26:	d81d      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d007      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004c30:	e018      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c32:	4b5e      	ldr	r3, [pc, #376]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	4a5d      	ldr	r2, [pc, #372]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c3e:	e017      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	2100      	movs	r1, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f001 f94a 	bl	8005ee0 <RCCEx_PLL2_Config>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c50:	e00e      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3324      	adds	r3, #36	; 0x24
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 f9f3 	bl	8006044 <RCCEx_PLL3_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c62:	e005      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	75fb      	strb	r3, [r7, #23]
      break;
 8004c68:	e002      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004c6a:	bf00      	nop
 8004c6c:	e000      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d109      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c76:	4b4d      	ldr	r3, [pc, #308]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	494a      	ldr	r1, [pc, #296]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	650b      	str	r3, [r1, #80]	; 0x50
 8004c88:	e001      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d049      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ca0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ca4:	d030      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004ca6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004caa:	d82a      	bhi.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004cac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004cb0:	d02c      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004cb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004cb6:	d824      	bhi.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cbc:	d018      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc2:	d81e      	bhi.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004cc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ccc:	d007      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004cce:	e018      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd0:	4b36      	ldr	r3, [pc, #216]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4a35      	ldr	r2, [pc, #212]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cdc:	e017      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f001 f8fb 	bl	8005ee0 <RCCEx_PLL2_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004cee:	e00e      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3324      	adds	r3, #36	; 0x24
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f001 f9a4 	bl	8006044 <RCCEx_PLL3_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d00:	e005      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
      break;
 8004d06:	e002      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004d08:	bf00      	nop
 8004d0a:	e000      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d14:	4b25      	ldr	r3, [pc, #148]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d22:	4922      	ldr	r1, [pc, #136]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	658b      	str	r3, [r1, #88]	; 0x58
 8004d28:	e001      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d04b      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d44:	d030      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004d46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d4a:	d82a      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d50:	d02e      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004d52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d56:	d824      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d5c:	d018      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d62:	d81e      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d6c:	d007      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004d6e:	e018      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d70:	4b0e      	ldr	r3, [pc, #56]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4a0d      	ldr	r2, [pc, #52]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d7c:	e019      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 f8ab 	bl	8005ee0 <RCCEx_PLL2_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004d8e:	e010      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3324      	adds	r3, #36	; 0x24
 8004d94:	2100      	movs	r1, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 f954 	bl	8006044 <RCCEx_PLL3_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004da0:	e007      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
      break;
 8004da6:	e004      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004da8:	bf00      	nop
 8004daa:	e002      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004dac:	58024400 	.word	0x58024400
      break;
 8004db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004db8:	4b99      	ldr	r3, [pc, #612]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004dc6:	4996      	ldr	r1, [pc, #600]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	658b      	str	r3, [r1, #88]	; 0x58
 8004dcc:	e001      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d032      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de2:	2b30      	cmp	r3, #48	; 0x30
 8004de4:	d01c      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004de6:	2b30      	cmp	r3, #48	; 0x30
 8004de8:	d817      	bhi.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d00c      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d813      	bhi.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d10f      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dfa:	4b89      	ldr	r3, [pc, #548]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	4a88      	ldr	r2, [pc, #544]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004e06:	e00e      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 f866 	bl	8005ee0 <RCCEx_PLL2_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004e18:	e005      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e1e:	e002      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d109      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e2c:	4b7c      	ldr	r3, [pc, #496]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e38:	4979      	ldr	r1, [pc, #484]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e3e:	e001      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d047      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e58:	d030      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e5e:	d82a      	bhi.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004e60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e64:	d02c      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004e66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e6a:	d824      	bhi.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e70:	d018      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e76:	d81e      	bhi.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e80:	d007      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004e82:	e018      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e84:	4b66      	ldr	r3, [pc, #408]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	4a65      	ldr	r2, [pc, #404]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e90:	e017      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3304      	adds	r3, #4
 8004e96:	2100      	movs	r1, #0
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f001 f821 	bl	8005ee0 <RCCEx_PLL2_Config>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004ea2:	e00e      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3324      	adds	r3, #36	; 0x24
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 f8ca 	bl	8006044 <RCCEx_PLL3_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004eb4:	e005      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004eba:	e002      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004ebc:	bf00      	nop
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ec8:	4b55      	ldr	r3, [pc, #340]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ecc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed4:	4952      	ldr	r1, [pc, #328]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	650b      	str	r3, [r1, #80]	; 0x50
 8004eda:	e001      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d049      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ef4:	d02e      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004ef6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004efa:	d828      	bhi.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f00:	d02a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f06:	d822      	bhi.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004f08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f0c:	d026      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004f0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f12:	d81c      	bhi.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f18:	d010      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f1e:	d816      	bhi.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01d      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f28:	d111      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	2101      	movs	r1, #1
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 ffd5 	bl	8005ee0 <RCCEx_PLL2_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004f3a:	e012      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3324      	adds	r3, #36	; 0x24
 8004f40:	2101      	movs	r1, #1
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 f87e 	bl	8006044 <RCCEx_PLL3_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004f4c:	e009      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	75fb      	strb	r3, [r7, #23]
      break;
 8004f52:	e006      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004f54:	bf00      	nop
 8004f56:	e004      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004f58:	bf00      	nop
 8004f5a:	e002      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004f5c:	bf00      	nop
 8004f5e:	e000      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f68:	4b2d      	ldr	r3, [pc, #180]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f74:	492a      	ldr	r1, [pc, #168]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	650b      	str	r3, [r1, #80]	; 0x50
 8004f7a:	e001      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d04d      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f96:	d02e      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f9c:	d828      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa2:	d02a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa8:	d822      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004faa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fae:	d026      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004fb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fb4:	d81c      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fba:	d010      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc0:	d816      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d01d      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004fc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fca:	d111      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 ff84 	bl	8005ee0 <RCCEx_PLL2_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004fdc:	e012      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3324      	adds	r3, #36	; 0x24
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 f82d 	bl	8006044 <RCCEx_PLL3_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004fee:	e009      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff4:	e006      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e004      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e002      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004ffe:	bf00      	nop
 8005000:	e000      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005004:	7dfb      	ldrb	r3, [r7, #23]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10c      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005018:	4901      	ldr	r1, [pc, #4]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800501a:	4313      	orrs	r3, r2
 800501c:	658b      	str	r3, [r1, #88]	; 0x58
 800501e:	e003      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005020:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d02f      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800503c:	d00e      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800503e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005042:	d814      	bhi.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005044:	2b00      	cmp	r3, #0
 8005046:	d015      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800504c:	d10f      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800504e:	4baf      	ldr	r3, [pc, #700]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	4aae      	ldr	r2, [pc, #696]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005058:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800505a:	e00c      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	2101      	movs	r1, #1
 8005062:	4618      	mov	r0, r3
 8005064:	f000 ff3c 	bl	8005ee0 <RCCEx_PLL2_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800506c:	e003      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	75fb      	strb	r3, [r7, #23]
      break;
 8005072:	e000      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d109      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800507c:	4ba3      	ldr	r3, [pc, #652]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800507e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005080:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005088:	49a0      	ldr	r1, [pc, #640]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800508a:	4313      	orrs	r3, r2
 800508c:	650b      	str	r3, [r1, #80]	; 0x50
 800508e:	e001      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005090:	7dfb      	ldrb	r3, [r7, #23]
 8005092:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d032      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d81b      	bhi.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80050a8:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80050aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ae:	bf00      	nop
 80050b0:	080050e7 	.word	0x080050e7
 80050b4:	080050c1 	.word	0x080050c1
 80050b8:	080050cf 	.word	0x080050cf
 80050bc:	080050e7 	.word	0x080050e7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c0:	4b92      	ldr	r3, [pc, #584]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a91      	ldr	r2, [pc, #580]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80050cc:	e00c      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3304      	adds	r3, #4
 80050d2:	2102      	movs	r1, #2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 ff03 	bl	8005ee0 <RCCEx_PLL2_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80050de:	e003      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	75fb      	strb	r3, [r7, #23]
      break;
 80050e4:	e000      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80050e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80050ee:	4b87      	ldr	r3, [pc, #540]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f2:	f023 0203 	bic.w	r2, r3, #3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	4984      	ldr	r1, [pc, #528]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005100:	e001      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005102:	7dfb      	ldrb	r3, [r7, #23]
 8005104:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 8086 	beq.w	8005220 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005114:	4b7e      	ldr	r3, [pc, #504]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a7d      	ldr	r2, [pc, #500]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800511a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005120:	f7fc fba8 	bl	8001874 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005126:	e009      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005128:	f7fc fba4 	bl	8001874 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b64      	cmp	r3, #100	; 0x64
 8005134:	d902      	bls.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	75fb      	strb	r3, [r7, #23]
        break;
 800513a:	e005      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800513c:	4b74      	ldr	r3, [pc, #464]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0ef      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005148:	7dfb      	ldrb	r3, [r7, #23]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d166      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800514e:	4b6f      	ldr	r3, [pc, #444]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005150:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005158:	4053      	eors	r3, r2
 800515a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515e:	2b00      	cmp	r3, #0
 8005160:	d013      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005162:	4b6a      	ldr	r3, [pc, #424]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800516c:	4b67      	ldr	r3, [pc, #412]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	4a66      	ldr	r2, [pc, #408]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005176:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005178:	4b64      	ldr	r3, [pc, #400]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	4a63      	ldr	r2, [pc, #396]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800517e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005182:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005184:	4a61      	ldr	r2, [pc, #388]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005194:	d115      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005196:	f7fc fb6d 	bl	8001874 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800519c:	e00b      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fc fb69 	bl	8001874 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d902      	bls.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	75fb      	strb	r3, [r7, #23]
            break;
 80051b4:	e005      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051b6:	4b55      	ldr	r3, [pc, #340]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0ed      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80051c2:	7dfb      	ldrb	r3, [r7, #23]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d126      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d6:	d10d      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80051d8:	4b4c      	ldr	r3, [pc, #304]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051e6:	0919      	lsrs	r1, r3, #4
 80051e8:	4b4a      	ldr	r3, [pc, #296]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80051ea:	400b      	ands	r3, r1
 80051ec:	4947      	ldr	r1, [pc, #284]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	610b      	str	r3, [r1, #16]
 80051f2:	e005      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80051f4:	4b45      	ldr	r3, [pc, #276]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	4a44      	ldr	r2, [pc, #272]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80051fe:	6113      	str	r3, [r2, #16]
 8005200:	4b42      	ldr	r3, [pc, #264]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005202:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800520a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800520e:	493f      	ldr	r1, [pc, #252]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005210:	4313      	orrs	r3, r2
 8005212:	670b      	str	r3, [r1, #112]	; 0x70
 8005214:	e004      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	75bb      	strb	r3, [r7, #22]
 800521a:	e001      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8085 	beq.w	8005338 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005232:	2b28      	cmp	r3, #40	; 0x28
 8005234:	d866      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005319 	.word	0x08005319
 8005240:	08005305 	.word	0x08005305
 8005244:	08005305 	.word	0x08005305
 8005248:	08005305 	.word	0x08005305
 800524c:	08005305 	.word	0x08005305
 8005250:	08005305 	.word	0x08005305
 8005254:	08005305 	.word	0x08005305
 8005258:	08005305 	.word	0x08005305
 800525c:	080052e1 	.word	0x080052e1
 8005260:	08005305 	.word	0x08005305
 8005264:	08005305 	.word	0x08005305
 8005268:	08005305 	.word	0x08005305
 800526c:	08005305 	.word	0x08005305
 8005270:	08005305 	.word	0x08005305
 8005274:	08005305 	.word	0x08005305
 8005278:	08005305 	.word	0x08005305
 800527c:	080052f3 	.word	0x080052f3
 8005280:	08005305 	.word	0x08005305
 8005284:	08005305 	.word	0x08005305
 8005288:	08005305 	.word	0x08005305
 800528c:	08005305 	.word	0x08005305
 8005290:	08005305 	.word	0x08005305
 8005294:	08005305 	.word	0x08005305
 8005298:	08005305 	.word	0x08005305
 800529c:	08005319 	.word	0x08005319
 80052a0:	08005305 	.word	0x08005305
 80052a4:	08005305 	.word	0x08005305
 80052a8:	08005305 	.word	0x08005305
 80052ac:	08005305 	.word	0x08005305
 80052b0:	08005305 	.word	0x08005305
 80052b4:	08005305 	.word	0x08005305
 80052b8:	08005305 	.word	0x08005305
 80052bc:	08005319 	.word	0x08005319
 80052c0:	08005305 	.word	0x08005305
 80052c4:	08005305 	.word	0x08005305
 80052c8:	08005305 	.word	0x08005305
 80052cc:	08005305 	.word	0x08005305
 80052d0:	08005305 	.word	0x08005305
 80052d4:	08005305 	.word	0x08005305
 80052d8:	08005305 	.word	0x08005305
 80052dc:	08005319 	.word	0x08005319
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	2101      	movs	r1, #1
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fdfa 	bl	8005ee0 <RCCEx_PLL2_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80052f0:	e013      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3324      	adds	r3, #36	; 0x24
 80052f6:	2101      	movs	r1, #1
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fea3 	bl	8006044 <RCCEx_PLL3_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005302:	e00a      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	75fb      	strb	r3, [r7, #23]
      break;
 8005308:	e007      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800530a:	bf00      	nop
 800530c:	58024400 	.word	0x58024400
 8005310:	58024800 	.word	0x58024800
 8005314:	00ffffcf 	.word	0x00ffffcf
      break;
 8005318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800531a:	7dfb      	ldrb	r3, [r7, #23]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d109      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005320:	4b96      	ldr	r3, [pc, #600]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005324:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800532c:	4993      	ldr	r1, [pc, #588]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800532e:	4313      	orrs	r3, r2
 8005330:	654b      	str	r3, [r1, #84]	; 0x54
 8005332:	e001      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d038      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005348:	2b05      	cmp	r3, #5
 800534a:	d821      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800534c:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800534e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005352:	bf00      	nop
 8005354:	08005397 	.word	0x08005397
 8005358:	0800536d 	.word	0x0800536d
 800535c:	0800537f 	.word	0x0800537f
 8005360:	08005397 	.word	0x08005397
 8005364:	08005397 	.word	0x08005397
 8005368:	08005397 	.word	0x08005397
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	2101      	movs	r1, #1
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fdb4 	bl	8005ee0 <RCCEx_PLL2_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800537c:	e00c      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3324      	adds	r3, #36	; 0x24
 8005382:	2101      	movs	r1, #1
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fe5d 	bl	8006044 <RCCEx_PLL3_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800538e:	e003      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	75fb      	strb	r3, [r7, #23]
      break;
 8005394:	e000      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005398:	7dfb      	ldrb	r3, [r7, #23]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800539e:	4b77      	ldr	r3, [pc, #476]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	f023 0207 	bic.w	r2, r3, #7
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053aa:	4974      	ldr	r1, [pc, #464]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	654b      	str	r3, [r1, #84]	; 0x54
 80053b0:	e001      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
 80053b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d03a      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	2b05      	cmp	r3, #5
 80053ca:	d821      	bhi.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80053cc:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d2:	bf00      	nop
 80053d4:	08005417 	.word	0x08005417
 80053d8:	080053ed 	.word	0x080053ed
 80053dc:	080053ff 	.word	0x080053ff
 80053e0:	08005417 	.word	0x08005417
 80053e4:	08005417 	.word	0x08005417
 80053e8:	08005417 	.word	0x08005417
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	2101      	movs	r1, #1
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fd74 	bl	8005ee0 <RCCEx_PLL2_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80053fc:	e00c      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3324      	adds	r3, #36	; 0x24
 8005402:	2101      	movs	r1, #1
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fe1d 	bl	8006044 <RCCEx_PLL3_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800540e:	e003      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
      break;
 8005414:	e000      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10a      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800541e:	4b57      	ldr	r3, [pc, #348]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005422:	f023 0207 	bic.w	r2, r3, #7
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542c:	4953      	ldr	r1, [pc, #332]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800542e:	4313      	orrs	r3, r2
 8005430:	658b      	str	r3, [r1, #88]	; 0x58
 8005432:	e001      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	d04b      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800544a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800544e:	d02e      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005454:	d828      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d02a      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800545c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005460:	d822      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005462:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005466:	d026      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005468:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800546c:	d81c      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800546e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005472:	d010      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005478:	d816      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01d      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800547e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005482:	d111      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	2100      	movs	r1, #0
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fd28 	bl	8005ee0 <RCCEx_PLL2_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005494:	e012      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3324      	adds	r3, #36	; 0x24
 800549a:	2102      	movs	r1, #2
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fdd1 	bl	8006044 <RCCEx_PLL3_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80054a6:	e009      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
      break;
 80054ac:	e006      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80054ae:	bf00      	nop
 80054b0:	e004      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80054b2:	bf00      	nop
 80054b4:	e002      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80054b6:	bf00      	nop
 80054b8:	e000      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80054ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054c2:	4b2e      	ldr	r3, [pc, #184]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d0:	492a      	ldr	r1, [pc, #168]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	654b      	str	r3, [r1, #84]	; 0x54
 80054d6:	e001      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d04d      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80054f2:	d02e      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80054f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80054f8:	d828      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d02a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005504:	d822      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005506:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800550a:	d026      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800550c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005510:	d81c      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005516:	d010      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551c:	d816      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01d      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005526:	d111      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3304      	adds	r3, #4
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fcd6 	bl	8005ee0 <RCCEx_PLL2_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005538:	e012      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3324      	adds	r3, #36	; 0x24
 800553e:	2102      	movs	r1, #2
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fd7f 	bl	8006044 <RCCEx_PLL3_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800554a:	e009      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	75fb      	strb	r3, [r7, #23]
      break;
 8005550:	e006      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005552:	bf00      	nop
 8005554:	e004      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005556:	bf00      	nop
 8005558:	e002      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800555a:	bf00      	nop
 800555c:	e000      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800555e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005560:	7dfb      	ldrb	r3, [r7, #23]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10c      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005574:	4901      	ldr	r1, [pc, #4]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005576:	4313      	orrs	r3, r2
 8005578:	658b      	str	r3, [r1, #88]	; 0x58
 800557a:	e003      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800557c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558c:	2b00      	cmp	r3, #0
 800558e:	d04b      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005596:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800559a:	d02e      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800559c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80055a0:	d828      	bhi.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80055a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a6:	d02a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80055a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ac:	d822      	bhi.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80055ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80055b2:	d026      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80055b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80055b8:	d81c      	bhi.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80055ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055be:	d010      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80055c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055c4:	d816      	bhi.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01d      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80055ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ce:	d111      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	2100      	movs	r1, #0
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fc82 	bl	8005ee0 <RCCEx_PLL2_Config>
 80055dc:	4603      	mov	r3, r0
 80055de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80055e0:	e012      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3324      	adds	r3, #36	; 0x24
 80055e6:	2102      	movs	r1, #2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fd2b 	bl	8006044 <RCCEx_PLL3_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80055f2:	e009      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	75fb      	strb	r3, [r7, #23]
      break;
 80055f8:	e006      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80055fa:	bf00      	nop
 80055fc:	e004      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80055fe:	bf00      	nop
 8005600:	e002      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005602:	bf00      	nop
 8005604:	e000      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800560e:	4b9d      	ldr	r3, [pc, #628]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800561c:	4999      	ldr	r1, [pc, #612]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800561e:	4313      	orrs	r3, r2
 8005620:	658b      	str	r3, [r1, #88]	; 0x58
 8005622:	e001      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563e:	d10a      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3324      	adds	r3, #36	; 0x24
 8005644:	2102      	movs	r1, #2
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fcfc 	bl	8006044 <RCCEx_PLL3_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005656:	4b8b      	ldr	r3, [pc, #556]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005664:	4987      	ldr	r1, [pc, #540]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005666:	4313      	orrs	r3, r2
 8005668:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b00      	cmp	r3, #0
 8005674:	d01a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800567c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005680:	d10a      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3324      	adds	r3, #36	; 0x24
 8005686:	2102      	movs	r1, #2
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fcdb 	bl	8006044 <RCCEx_PLL3_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005698:	4b7a      	ldr	r3, [pc, #488]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056a6:	4977      	ldr	r1, [pc, #476]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d034      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056c2:	d01d      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80056c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056c8:	d817      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80056ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d2:	d009      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80056d4:	e011      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3304      	adds	r3, #4
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fbff 	bl	8005ee0 <RCCEx_PLL2_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80056e6:	e00c      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3324      	adds	r3, #36	; 0x24
 80056ec:	2102      	movs	r1, #2
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fca8 	bl	8006044 <RCCEx_PLL3_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80056f8:	e003      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	75fb      	strb	r3, [r7, #23]
      break;
 80056fe:	e000      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005708:	4b5e      	ldr	r3, [pc, #376]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005716:	495b      	ldr	r1, [pc, #364]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005718:	4313      	orrs	r3, r2
 800571a:	658b      	str	r3, [r1, #88]	; 0x58
 800571c:	e001      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571e:	7dfb      	ldrb	r3, [r7, #23]
 8005720:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d033      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005734:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005738:	d01c      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800573a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800573e:	d816      	bhi.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005744:	d003      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800574a:	d007      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800574c:	e00f      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800574e:	4b4d      	ldr	r3, [pc, #308]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	4a4c      	ldr	r2, [pc, #304]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005758:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800575a:	e00c      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3324      	adds	r3, #36	; 0x24
 8005760:	2101      	movs	r1, #1
 8005762:	4618      	mov	r0, r3
 8005764:	f000 fc6e 	bl	8006044 <RCCEx_PLL3_Config>
 8005768:	4603      	mov	r3, r0
 800576a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800576c:	e003      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	75fb      	strb	r3, [r7, #23]
      break;
 8005772:	e000      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005776:	7dfb      	ldrb	r3, [r7, #23]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800577c:	4b41      	ldr	r3, [pc, #260]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800578a:	493e      	ldr	r1, [pc, #248]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800578c:	4313      	orrs	r3, r2
 800578e:	654b      	str	r3, [r1, #84]	; 0x54
 8005790:	e001      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
 8005794:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d029      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80057aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ae:	d007      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80057b0:	e00f      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b2:	4b34      	ldr	r3, [pc, #208]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	4a33      	ldr	r2, [pc, #204]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80057be:	e00b      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	2102      	movs	r1, #2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fb8a 	bl	8005ee0 <RCCEx_PLL2_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80057d0:	e002      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	75fb      	strb	r3, [r7, #23]
      break;
 80057d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057de:	4b29      	ldr	r3, [pc, #164]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ea:	4926      	ldr	r1, [pc, #152]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80057f0:	e001      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3324      	adds	r3, #36	; 0x24
 8005806:	2102      	movs	r1, #2
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fc1b 	bl	8006044 <RCCEx_PLL3_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d033      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800582c:	d017      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800582e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005832:	d811      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005838:	d013      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800583a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800583e:	d80b      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d010      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005848:	d106      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800584a:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	4a0d      	ldr	r2, [pc, #52]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005854:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005856:	e007      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	75fb      	strb	r3, [r7, #23]
      break;
 800585c:	e004      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800585e:	bf00      	nop
 8005860:	e002      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005862:	bf00      	nop
 8005864:	e000      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005868:	7dfb      	ldrb	r3, [r7, #23]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10c      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800586e:	4b05      	ldr	r3, [pc, #20]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005872:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800587a:	4902      	ldr	r1, [pc, #8]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800587c:	4313      	orrs	r3, r2
 800587e:	654b      	str	r3, [r1, #84]	; 0x54
 8005880:	e004      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005882:	bf00      	nop
 8005884:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005898:	4b31      	ldr	r3, [pc, #196]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800589a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a4:	492e      	ldr	r1, [pc, #184]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80058b6:	4b2a      	ldr	r3, [pc, #168]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058c4:	4926      	ldr	r1, [pc, #152]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d008      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058d6:	4b22      	ldr	r3, [pc, #136]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058e2:	491f      	ldr	r1, [pc, #124]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00d      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058f4:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	4a19      	ldr	r2, [pc, #100]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058fe:	6113      	str	r3, [r2, #16]
 8005900:	4b17      	ldr	r3, [pc, #92]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800590a:	4915      	ldr	r1, [pc, #84]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800590c:	4313      	orrs	r3, r2
 800590e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	da08      	bge.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005918:	4b11      	ldr	r3, [pc, #68]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800591a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005924:	490e      	ldr	r1, [pc, #56]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005926:	4313      	orrs	r3, r2
 8005928:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005936:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005944:	4906      	ldr	r1, [pc, #24]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005946:	4313      	orrs	r3, r2
 8005948:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800594a:	7dbb      	ldrb	r3, [r7, #22]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	e000      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	58024400 	.word	0x58024400

08005964 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005968:	f7ff f85a 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 800596c:	4602      	mov	r2, r0
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	091b      	lsrs	r3, r3, #4
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	4904      	ldr	r1, [pc, #16]	; (800598c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800597a:	5ccb      	ldrb	r3, [r1, r3]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005984:	4618      	mov	r0, r3
 8005986:	bd80      	pop	{r7, pc}
 8005988:	58024400 	.word	0x58024400
 800598c:	0800bc44 	.word	0x0800bc44

08005990 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005990:	b480      	push	{r7}
 8005992:	b089      	sub	sp, #36	; 0x24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005998:	4ba1      	ldr	r3, [pc, #644]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	f003 0303 	and.w	r3, r3, #3
 80059a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80059a2:	4b9f      	ldr	r3, [pc, #636]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	0b1b      	lsrs	r3, r3, #12
 80059a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80059ae:	4b9c      	ldr	r3, [pc, #624]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	091b      	lsrs	r3, r3, #4
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80059ba:	4b99      	ldr	r3, [pc, #612]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059be:	08db      	lsrs	r3, r3, #3
 80059c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8111 	beq.w	8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	f000 8083 	beq.w	8005aec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	f200 80a1 	bhi.w	8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d056      	beq.n	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80059fa:	e099      	b.n	8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059fc:	4b88      	ldr	r3, [pc, #544]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0320 	and.w	r3, r3, #32
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d02d      	beq.n	8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a08:	4b85      	ldr	r3, [pc, #532]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	08db      	lsrs	r3, r3, #3
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	4a84      	ldr	r2, [pc, #528]	; (8005c24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
 8005a18:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a32:	4b7b      	ldr	r3, [pc, #492]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a62:	e087      	b.n	8005b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a76:	4b6a      	ldr	r3, [pc, #424]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aa6:	e065      	b.n	8005b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aba:	4b59      	ldr	r3, [pc, #356]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ace:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aea:	e043      	b.n	8005b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afe:	4b48      	ldr	r3, [pc, #288]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b2e:	e021      	b.n	8005b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b42:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005b74:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	0a5b      	lsrs	r3, r3, #9
 8005b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b9a:	ee17 2a90 	vmov	r2, s15
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ba2:	4b1f      	ldr	r3, [pc, #124]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	0c1b      	lsrs	r3, r3, #16
 8005ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bac:	ee07 3a90 	vmov	s15, r3
 8005bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bc8:	ee17 2a90 	vmov	r2, s15
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005bd0:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	0e1b      	lsrs	r3, r3, #24
 8005bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf6:	ee17 2a90 	vmov	r2, s15
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005bfe:	e008      	b.n	8005c12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	609a      	str	r2, [r3, #8]
}
 8005c12:	bf00      	nop
 8005c14:	3724      	adds	r7, #36	; 0x24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	58024400 	.word	0x58024400
 8005c24:	03d09000 	.word	0x03d09000
 8005c28:	46000000 	.word	0x46000000
 8005c2c:	4c742400 	.word	0x4c742400
 8005c30:	4a742400 	.word	0x4a742400
 8005c34:	4af42400 	.word	0x4af42400

08005c38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b089      	sub	sp, #36	; 0x24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c40:	4ba1      	ldr	r3, [pc, #644]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005c4a:	4b9f      	ldr	r3, [pc, #636]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	0d1b      	lsrs	r3, r3, #20
 8005c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c56:	4b9c      	ldr	r3, [pc, #624]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	0a1b      	lsrs	r3, r3, #8
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005c62:	4b99      	ldr	r3, [pc, #612]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	08db      	lsrs	r3, r3, #3
 8005c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8111 	beq.w	8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	f000 8083 	beq.w	8005d94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	f200 80a1 	bhi.w	8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d056      	beq.n	8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005ca2:	e099      	b.n	8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca4:	4b88      	ldr	r3, [pc, #544]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d02d      	beq.n	8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cb0:	4b85      	ldr	r3, [pc, #532]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	08db      	lsrs	r3, r3, #3
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	4a84      	ldr	r2, [pc, #528]	; (8005ecc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	ee07 3a90 	vmov	s15, r3
 8005cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cda:	4b7b      	ldr	r3, [pc, #492]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d0a:	e087      	b.n	8005e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1e:	4b6a      	ldr	r3, [pc, #424]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d4e:	e065      	b.n	8005e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d62:	4b59      	ldr	r3, [pc, #356]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6a:	ee07 3a90 	vmov	s15, r3
 8005d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d92:	e043      	b.n	8005e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005edc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da6:	4b48      	ldr	r3, [pc, #288]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dd6:	e021      	b.n	8005e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dea:	4b37      	ldr	r3, [pc, #220]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005e1c:	4b2a      	ldr	r3, [pc, #168]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	0a5b      	lsrs	r3, r3, #9
 8005e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e42:	ee17 2a90 	vmov	r2, s15
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005e4a:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	0c1b      	lsrs	r3, r3, #16
 8005e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e54:	ee07 3a90 	vmov	s15, r3
 8005e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e70:	ee17 2a90 	vmov	r2, s15
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005e78:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	0e1b      	lsrs	r3, r3, #24
 8005e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e9e:	ee17 2a90 	vmov	r2, s15
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005ea6:	e008      	b.n	8005eba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	609a      	str	r2, [r3, #8]
}
 8005eba:	bf00      	nop
 8005ebc:	3724      	adds	r7, #36	; 0x24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	03d09000 	.word	0x03d09000
 8005ed0:	46000000 	.word	0x46000000
 8005ed4:	4c742400 	.word	0x4c742400
 8005ed8:	4a742400 	.word	0x4a742400
 8005edc:	4af42400 	.word	0x4af42400

08005ee0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005eee:	4b53      	ldr	r3, [pc, #332]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d101      	bne.n	8005efe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e099      	b.n	8006032 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005efe:	4b4f      	ldr	r3, [pc, #316]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a4e      	ldr	r2, [pc, #312]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005f04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f0a:	f7fb fcb3 	bl	8001874 <HAL_GetTick>
 8005f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f10:	e008      	b.n	8005f24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f12:	f7fb fcaf 	bl	8001874 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e086      	b.n	8006032 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f24:	4b45      	ldr	r3, [pc, #276]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f0      	bne.n	8005f12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f30:	4b42      	ldr	r3, [pc, #264]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	031b      	lsls	r3, r3, #12
 8005f3e:	493f      	ldr	r1, [pc, #252]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	628b      	str	r3, [r1, #40]	; 0x28
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	025b      	lsls	r3, r3, #9
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	041b      	lsls	r3, r3, #16
 8005f62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	061b      	lsls	r3, r3, #24
 8005f70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f74:	4931      	ldr	r1, [pc, #196]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f7a:	4b30      	ldr	r3, [pc, #192]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	492d      	ldr	r1, [pc, #180]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f8c:	4b2b      	ldr	r3, [pc, #172]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	f023 0220 	bic.w	r2, r3, #32
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	4928      	ldr	r1, [pc, #160]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f9e:	4b27      	ldr	r3, [pc, #156]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	4a26      	ldr	r2, [pc, #152]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005fa4:	f023 0310 	bic.w	r3, r3, #16
 8005fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005faa:	4b24      	ldr	r3, [pc, #144]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fae:	4b24      	ldr	r3, [pc, #144]	; (8006040 <RCCEx_PLL2_Config+0x160>)
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	69d2      	ldr	r2, [r2, #28]
 8005fb6:	00d2      	lsls	r2, r2, #3
 8005fb8:	4920      	ldr	r1, [pc, #128]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005fbe:	4b1f      	ldr	r3, [pc, #124]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	4a1e      	ldr	r2, [pc, #120]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005fc4:	f043 0310 	orr.w	r3, r3, #16
 8005fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d106      	bne.n	8005fde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	4a19      	ldr	r2, [pc, #100]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005fd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fdc:	e00f      	b.n	8005ffe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d106      	bne.n	8005ff2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005fe4:	4b15      	ldr	r3, [pc, #84]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	4a14      	ldr	r2, [pc, #80]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ff0:	e005      	b.n	8005ffe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ff2:	4b12      	ldr	r3, [pc, #72]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	4a11      	ldr	r2, [pc, #68]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8005ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ffe:	4b0f      	ldr	r3, [pc, #60]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a0e      	ldr	r2, [pc, #56]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8006004:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800600a:	f7fb fc33 	bl	8001874 <HAL_GetTick>
 800600e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006010:	e008      	b.n	8006024 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006012:	f7fb fc2f 	bl	8001874 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d901      	bls.n	8006024 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e006      	b.n	8006032 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <RCCEx_PLL2_Config+0x15c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0f0      	beq.n	8006012 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	58024400 	.word	0x58024400
 8006040:	ffff0007 	.word	0xffff0007

08006044 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006052:	4b53      	ldr	r3, [pc, #332]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	2b03      	cmp	r3, #3
 800605c:	d101      	bne.n	8006062 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e099      	b.n	8006196 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006062:	4b4f      	ldr	r3, [pc, #316]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a4e      	ldr	r2, [pc, #312]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800606c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800606e:	f7fb fc01 	bl	8001874 <HAL_GetTick>
 8006072:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006074:	e008      	b.n	8006088 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006076:	f7fb fbfd 	bl	8001874 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e086      	b.n	8006196 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006088:	4b45      	ldr	r3, [pc, #276]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1f0      	bne.n	8006076 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006094:	4b42      	ldr	r3, [pc, #264]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006098:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	051b      	lsls	r3, r3, #20
 80060a2:	493f      	ldr	r1, [pc, #252]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	628b      	str	r3, [r1, #40]	; 0x28
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	025b      	lsls	r3, r3, #9
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	041b      	lsls	r3, r3, #16
 80060c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	3b01      	subs	r3, #1
 80060d2:	061b      	lsls	r3, r3, #24
 80060d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060d8:	4931      	ldr	r1, [pc, #196]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80060de:	4b30      	ldr	r3, [pc, #192]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 80060e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	492d      	ldr	r1, [pc, #180]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060f0:	4b2b      	ldr	r3, [pc, #172]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	4928      	ldr	r1, [pc, #160]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006102:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	4a26      	ldr	r2, [pc, #152]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800610c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800610e:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006112:	4b24      	ldr	r3, [pc, #144]	; (80061a4 <RCCEx_PLL3_Config+0x160>)
 8006114:	4013      	ands	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	69d2      	ldr	r2, [r2, #28]
 800611a:	00d2      	lsls	r2, r2, #3
 800611c:	4920      	ldr	r1, [pc, #128]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 800611e:	4313      	orrs	r3, r2
 8006120:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006122:	4b1f      	ldr	r3, [pc, #124]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	4a1e      	ldr	r2, [pc, #120]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006134:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006138:	4a19      	ldr	r2, [pc, #100]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 800613a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800613e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006140:	e00f      	b.n	8006162 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d106      	bne.n	8006156 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006148:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	4a14      	ldr	r2, [pc, #80]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 800614e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006152:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006154:	e005      	b.n	8006162 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006156:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	4a11      	ldr	r2, [pc, #68]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 800615c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006160:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006162:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a0e      	ldr	r2, [pc, #56]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 8006168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800616e:	f7fb fb81 	bl	8001874 <HAL_GetTick>
 8006172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006174:	e008      	b.n	8006188 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006176:	f7fb fb7d 	bl	8001874 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e006      	b.n	8006196 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006188:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <RCCEx_PLL3_Config+0x15c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006194:	7bfb      	ldrb	r3, [r7, #15]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	58024400 	.word	0x58024400
 80061a4:	ffff0007 	.word	0xffff0007

080061a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e042      	b.n	8006240 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d106      	bne.n	80061d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7fb f8b1 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2224      	movs	r2, #36	; 0x24
 80061d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fcd6 	bl	8006b9c <UART_SetConfig>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d101      	bne.n	80061fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e022      	b.n	8006240 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 fa32 	bl	800766c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006216:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006226:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fab9 	bl	80077b0 <UART_CheckIdleState>
 800623e:	4603      	mov	r3, r0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	; 0x28
 800624c:	af02      	add	r7, sp, #8
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	4613      	mov	r3, r2
 8006256:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800625e:	2b20      	cmp	r3, #32
 8006260:	f040 8083 	bne.w	800636a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <HAL_UART_Transmit+0x28>
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e07b      	b.n	800636c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_UART_Transmit+0x3a>
 800627e:	2302      	movs	r3, #2
 8006280:	e074      	b.n	800636c <HAL_UART_Transmit+0x124>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2221      	movs	r2, #33	; 0x21
 8006296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800629a:	f7fb faeb 	bl	8001874 <HAL_GetTick>
 800629e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	88fa      	ldrh	r2, [r7, #6]
 80062a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b8:	d108      	bne.n	80062cc <HAL_UART_Transmit+0x84>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	61bb      	str	r3, [r7, #24]
 80062ca:	e003      	b.n	80062d4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80062dc:	e02c      	b.n	8006338 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2200      	movs	r2, #0
 80062e6:	2180      	movs	r1, #128	; 0x80
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f001 faac 	bl	8007846 <UART_WaitOnFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e039      	b.n	800636c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10b      	bne.n	8006316 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800630c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	3302      	adds	r3, #2
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	e007      	b.n	8006326 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	781a      	ldrb	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	3301      	adds	r3, #1
 8006324:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b01      	subs	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1cc      	bne.n	80062de <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2200      	movs	r2, #0
 800634c:	2140      	movs	r1, #64	; 0x40
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f001 fa79 	bl	8007846 <UART_WaitOnFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e006      	b.n	800636c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	e000      	b.n	800636c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800636a:	2302      	movs	r3, #2
  }
}
 800636c:	4618      	mov	r0, r3
 800636e:	3720      	adds	r7, #32
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b08a      	sub	sp, #40	; 0x28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	4613      	mov	r3, r2
 8006380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006388:	2b20      	cmp	r3, #32
 800638a:	d142      	bne.n	8006412 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <HAL_UART_Receive_IT+0x24>
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e03b      	b.n	8006414 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_UART_Receive_IT+0x36>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e034      	b.n	8006414 <HAL_UART_Receive_IT+0xa0>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a17      	ldr	r2, [pc, #92]	; (800641c <HAL_UART_Receive_IT+0xa8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d01f      	beq.n	8006402 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d018      	beq.n	8006402 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	613b      	str	r3, [r7, #16]
   return(result);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	623b      	str	r3, [r7, #32]
 80063f0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	69f9      	ldr	r1, [r7, #28]
 80063f4:	6a3a      	ldr	r2, [r7, #32]
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e6      	bne.n	80063d0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	461a      	mov	r2, r3
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f001 fae5 	bl	80079d8 <UART_Start_Receive_IT>
 800640e:	4603      	mov	r3, r0
 8006410:	e000      	b.n	8006414 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006412:	2302      	movs	r3, #2
  }
}
 8006414:	4618      	mov	r0, r3
 8006416:	3728      	adds	r7, #40	; 0x28
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	58000c00 	.word	0x58000c00

08006420 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b0ba      	sub	sp, #232	; 0xe8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006446:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800644a:	f640 030f 	movw	r3, #2063	; 0x80f
 800644e:	4013      	ands	r3, r2
 8006450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006458:	2b00      	cmp	r3, #0
 800645a:	d11b      	bne.n	8006494 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800645c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d015      	beq.n	8006494 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 835a 	beq.w	8006b3e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
      }
      return;
 8006492:	e354      	b.n	8006b3e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 811f 	beq.w	80066dc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800649e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80064a2:	4b8b      	ldr	r3, [pc, #556]	; (80066d0 <HAL_UART_IRQHandler+0x2b0>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80064aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064ae:	4b89      	ldr	r3, [pc, #548]	; (80066d4 <HAL_UART_IRQHandler+0x2b4>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8112 	beq.w	80066dc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d011      	beq.n	80064e8 <HAL_UART_IRQHandler+0xc8>
 80064c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00b      	beq.n	80064e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2201      	movs	r2, #1
 80064d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064de:	f043 0201 	orr.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d011      	beq.n	8006518 <HAL_UART_IRQHandler+0xf8>
 80064f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2202      	movs	r2, #2
 8006506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800650e:	f043 0204 	orr.w	r2, r3, #4
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d011      	beq.n	8006548 <HAL_UART_IRQHandler+0x128>
 8006524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2204      	movs	r2, #4
 8006536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800653e:	f043 0202 	orr.w	r2, r3, #2
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d017      	beq.n	8006584 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006558:	f003 0320 	and.w	r3, r3, #32
 800655c:	2b00      	cmp	r3, #0
 800655e:	d105      	bne.n	800656c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006560:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006564:	4b5a      	ldr	r3, [pc, #360]	; (80066d0 <HAL_UART_IRQHandler+0x2b0>)
 8006566:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2208      	movs	r2, #8
 8006572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800657a:	f043 0208 	orr.w	r2, r3, #8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800658c:	2b00      	cmp	r3, #0
 800658e:	d012      	beq.n	80065b6 <HAL_UART_IRQHandler+0x196>
 8006590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ac:	f043 0220 	orr.w	r2, r3, #32
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 82c0 	beq.w	8006b42 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d013      	beq.n	80065f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d105      	bne.n	80065e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660a:	2b40      	cmp	r3, #64	; 0x40
 800660c:	d005      	beq.n	800661a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800660e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006612:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006616:	2b00      	cmp	r3, #0
 8006618:	d04f      	beq.n	80066ba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 fb06 	bl	8007c2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d141      	bne.n	80066b2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006644:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3308      	adds	r3, #8
 8006656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800665a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800665e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1d9      	bne.n	800662e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d013      	beq.n	80066aa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006686:	4a14      	ldr	r2, [pc, #80]	; (80066d8 <HAL_UART_IRQHandler+0x2b8>)
 8006688:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800668e:	4618      	mov	r0, r3
 8006690:	f7fb fd5a 	bl	8002148 <HAL_DMA_Abort_IT>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d017      	beq.n	80066ca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800669e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80066a4:	4610      	mov	r0, r2
 80066a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a8:	e00f      	b.n	80066ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa60 	bl	8006b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b0:	e00b      	b.n	80066ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fa5c 	bl	8006b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b8:	e007      	b.n	80066ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fa58 	bl	8006b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80066c8:	e23b      	b.n	8006b42 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ca:	bf00      	nop
    return;
 80066cc:	e239      	b.n	8006b42 <HAL_UART_IRQHandler+0x722>
 80066ce:	bf00      	nop
 80066d0:	10000001 	.word	0x10000001
 80066d4:	04000120 	.word	0x04000120
 80066d8:	08007cf9 	.word	0x08007cf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	f040 81ce 	bne.w	8006a82 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ea:	f003 0310 	and.w	r3, r3, #16
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 81c7 	beq.w	8006a82 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 81c0 	beq.w	8006a82 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2210      	movs	r2, #16
 8006708:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	f040 813b 	bne.w	8006990 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a8b      	ldr	r2, [pc, #556]	; (8006950 <HAL_UART_IRQHandler+0x530>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d059      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a89      	ldr	r2, [pc, #548]	; (8006954 <HAL_UART_IRQHandler+0x534>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d053      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a87      	ldr	r2, [pc, #540]	; (8006958 <HAL_UART_IRQHandler+0x538>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d04d      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a85      	ldr	r2, [pc, #532]	; (800695c <HAL_UART_IRQHandler+0x53c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d047      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a83      	ldr	r2, [pc, #524]	; (8006960 <HAL_UART_IRQHandler+0x540>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d041      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a81      	ldr	r2, [pc, #516]	; (8006964 <HAL_UART_IRQHandler+0x544>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d03b      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a7f      	ldr	r2, [pc, #508]	; (8006968 <HAL_UART_IRQHandler+0x548>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d035      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a7d      	ldr	r2, [pc, #500]	; (800696c <HAL_UART_IRQHandler+0x54c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d02f      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a7b      	ldr	r2, [pc, #492]	; (8006970 <HAL_UART_IRQHandler+0x550>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d029      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a79      	ldr	r2, [pc, #484]	; (8006974 <HAL_UART_IRQHandler+0x554>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d023      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a77      	ldr	r2, [pc, #476]	; (8006978 <HAL_UART_IRQHandler+0x558>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d01d      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a75      	ldr	r2, [pc, #468]	; (800697c <HAL_UART_IRQHandler+0x55c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d017      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a73      	ldr	r2, [pc, #460]	; (8006980 <HAL_UART_IRQHandler+0x560>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d011      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a71      	ldr	r2, [pc, #452]	; (8006984 <HAL_UART_IRQHandler+0x564>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00b      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a6f      	ldr	r2, [pc, #444]	; (8006988 <HAL_UART_IRQHandler+0x568>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d005      	beq.n	80067da <HAL_UART_IRQHandler+0x3ba>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a6d      	ldr	r2, [pc, #436]	; (800698c <HAL_UART_IRQHandler+0x56c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d105      	bne.n	80067e6 <HAL_UART_IRQHandler+0x3c6>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	e004      	b.n	80067f0 <HAL_UART_IRQHandler+0x3d0>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 81a4 	beq.w	8006b46 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006804:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006808:	429a      	cmp	r2, r3
 800680a:	f080 819c 	bcs.w	8006b46 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006814:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006822:	f000 8086 	beq.w	8006932 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800683a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800683e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006842:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006850:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006854:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800685c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006860:	e841 2300 	strex	r3, r2, [r1]
 8006864:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006868:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1da      	bne.n	8006826 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3308      	adds	r3, #8
 8006876:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006894:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006898:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800689c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e1      	bne.n	8006870 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3308      	adds	r3, #8
 80068b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3308      	adds	r3, #8
 80068cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e3      	bne.n	80068ac <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006902:	f023 0310 	bic.w	r3, r3, #16
 8006906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006914:	65bb      	str	r3, [r7, #88]	; 0x58
 8006916:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800691a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e4      	bne.n	80068f2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800692c:	4618      	mov	r0, r3
 800692e:	f7fb f8ed 	bl	8001b0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800693e:	b29b      	uxth	r3, r3
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	b29b      	uxth	r3, r3
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f91c 	bl	8006b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800694c:	e0fb      	b.n	8006b46 <HAL_UART_IRQHandler+0x726>
 800694e:	bf00      	nop
 8006950:	40020010 	.word	0x40020010
 8006954:	40020028 	.word	0x40020028
 8006958:	40020040 	.word	0x40020040
 800695c:	40020058 	.word	0x40020058
 8006960:	40020070 	.word	0x40020070
 8006964:	40020088 	.word	0x40020088
 8006968:	400200a0 	.word	0x400200a0
 800696c:	400200b8 	.word	0x400200b8
 8006970:	40020410 	.word	0x40020410
 8006974:	40020428 	.word	0x40020428
 8006978:	40020440 	.word	0x40020440
 800697c:	40020458 	.word	0x40020458
 8006980:	40020470 	.word	0x40020470
 8006984:	40020488 	.word	0x40020488
 8006988:	400204a0 	.word	0x400204a0
 800698c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800699c:	b29b      	uxth	r3, r3
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80cc 	beq.w	8006b4a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80069b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80c7 	beq.w	8006b4a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	461a      	mov	r2, r3
 80069da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069de:	647b      	str	r3, [r7, #68]	; 0x44
 80069e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e4      	bne.n	80069bc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	623b      	str	r3, [r7, #32]
   return(result);
 8006a02:	6a3a      	ldr	r2, [r7, #32]
 8006a04:	4b54      	ldr	r3, [pc, #336]	; (8006b58 <HAL_UART_IRQHandler+0x738>)
 8006a06:	4013      	ands	r3, r2
 8006a08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3308      	adds	r3, #8
 8006a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a16:	633a      	str	r2, [r7, #48]	; 0x30
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e3      	bne.n	80069f2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	e853 3f00 	ldrex	r3, [r3]
 8006a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0310 	bic.w	r3, r3, #16
 8006a52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	69b9      	ldr	r1, [r7, #24]
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e4      	bne.n	8006a3e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f882 	bl	8006b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a80:	e063      	b.n	8006b4a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00e      	beq.n	8006aac <HAL_UART_IRQHandler+0x68c>
 8006a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d008      	beq.n	8006aac <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006aa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 fdc5 	bl	8008634 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aaa:	e051      	b.n	8006b50 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d014      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d105      	bne.n	8006ad0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d008      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d03a      	beq.n	8006b4e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
    }
    return;
 8006ae0:	e035      	b.n	8006b4e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d009      	beq.n	8006b02 <HAL_UART_IRQHandler+0x6e2>
 8006aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 f912 	bl	8007d24 <UART_EndTransmit_IT>
    return;
 8006b00:	e026      	b.n	8006b50 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d009      	beq.n	8006b22 <HAL_UART_IRQHandler+0x702>
 8006b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 fd9e 	bl	800865c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b20:	e016      	b.n	8006b50 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d010      	beq.n	8006b50 <HAL_UART_IRQHandler+0x730>
 8006b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	da0c      	bge.n	8006b50 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 fd86 	bl	8008648 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b3c:	e008      	b.n	8006b50 <HAL_UART_IRQHandler+0x730>
      return;
 8006b3e:	bf00      	nop
 8006b40:	e006      	b.n	8006b50 <HAL_UART_IRQHandler+0x730>
    return;
 8006b42:	bf00      	nop
 8006b44:	e004      	b.n	8006b50 <HAL_UART_IRQHandler+0x730>
      return;
 8006b46:	bf00      	nop
 8006b48:	e002      	b.n	8006b50 <HAL_UART_IRQHandler+0x730>
      return;
 8006b4a:	bf00      	nop
 8006b4c:	e000      	b.n	8006b50 <HAL_UART_IRQHandler+0x730>
    return;
 8006b4e:	bf00      	nop
  }
}
 8006b50:	37e8      	adds	r7, #232	; 0xe8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	effffffe 	.word	0xeffffffe

08006b5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ba0:	b092      	sub	sp, #72	; 0x48
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4bbe      	ldr	r3, [pc, #760]	; (8006ec4 <UART_SetConfig+0x328>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4ab3      	ldr	r2, [pc, #716]	; (8006ec8 <UART_SetConfig+0x32c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d004      	beq.n	8006c08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c04:	4313      	orrs	r3, r2
 8006c06:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	4baf      	ldr	r3, [pc, #700]	; (8006ecc <UART_SetConfig+0x330>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	6812      	ldr	r2, [r2, #0]
 8006c16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	f023 010f 	bic.w	r1, r3, #15
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4aa6      	ldr	r2, [pc, #664]	; (8006ed0 <UART_SetConfig+0x334>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d177      	bne.n	8006d2c <UART_SetConfig+0x190>
 8006c3c:	4ba5      	ldr	r3, [pc, #660]	; (8006ed4 <UART_SetConfig+0x338>)
 8006c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c44:	2b28      	cmp	r3, #40	; 0x28
 8006c46:	d86d      	bhi.n	8006d24 <UART_SetConfig+0x188>
 8006c48:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <UART_SetConfig+0xb4>)
 8006c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4e:	bf00      	nop
 8006c50:	08006cf5 	.word	0x08006cf5
 8006c54:	08006d25 	.word	0x08006d25
 8006c58:	08006d25 	.word	0x08006d25
 8006c5c:	08006d25 	.word	0x08006d25
 8006c60:	08006d25 	.word	0x08006d25
 8006c64:	08006d25 	.word	0x08006d25
 8006c68:	08006d25 	.word	0x08006d25
 8006c6c:	08006d25 	.word	0x08006d25
 8006c70:	08006cfd 	.word	0x08006cfd
 8006c74:	08006d25 	.word	0x08006d25
 8006c78:	08006d25 	.word	0x08006d25
 8006c7c:	08006d25 	.word	0x08006d25
 8006c80:	08006d25 	.word	0x08006d25
 8006c84:	08006d25 	.word	0x08006d25
 8006c88:	08006d25 	.word	0x08006d25
 8006c8c:	08006d25 	.word	0x08006d25
 8006c90:	08006d05 	.word	0x08006d05
 8006c94:	08006d25 	.word	0x08006d25
 8006c98:	08006d25 	.word	0x08006d25
 8006c9c:	08006d25 	.word	0x08006d25
 8006ca0:	08006d25 	.word	0x08006d25
 8006ca4:	08006d25 	.word	0x08006d25
 8006ca8:	08006d25 	.word	0x08006d25
 8006cac:	08006d25 	.word	0x08006d25
 8006cb0:	08006d0d 	.word	0x08006d0d
 8006cb4:	08006d25 	.word	0x08006d25
 8006cb8:	08006d25 	.word	0x08006d25
 8006cbc:	08006d25 	.word	0x08006d25
 8006cc0:	08006d25 	.word	0x08006d25
 8006cc4:	08006d25 	.word	0x08006d25
 8006cc8:	08006d25 	.word	0x08006d25
 8006ccc:	08006d25 	.word	0x08006d25
 8006cd0:	08006d15 	.word	0x08006d15
 8006cd4:	08006d25 	.word	0x08006d25
 8006cd8:	08006d25 	.word	0x08006d25
 8006cdc:	08006d25 	.word	0x08006d25
 8006ce0:	08006d25 	.word	0x08006d25
 8006ce4:	08006d25 	.word	0x08006d25
 8006ce8:	08006d25 	.word	0x08006d25
 8006cec:	08006d25 	.word	0x08006d25
 8006cf0:	08006d1d 	.word	0x08006d1d
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfa:	e222      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d02:	e21e      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d04:	2308      	movs	r3, #8
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0a:	e21a      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d12:	e216      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d14:	2320      	movs	r3, #32
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1a:	e212      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d1c:	2340      	movs	r3, #64	; 0x40
 8006d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d22:	e20e      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d24:	2380      	movs	r3, #128	; 0x80
 8006d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2a:	e20a      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a69      	ldr	r2, [pc, #420]	; (8006ed8 <UART_SetConfig+0x33c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d130      	bne.n	8006d98 <UART_SetConfig+0x1fc>
 8006d36:	4b67      	ldr	r3, [pc, #412]	; (8006ed4 <UART_SetConfig+0x338>)
 8006d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	2b05      	cmp	r3, #5
 8006d40:	d826      	bhi.n	8006d90 <UART_SetConfig+0x1f4>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0x1ac>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d61 	.word	0x08006d61
 8006d4c:	08006d69 	.word	0x08006d69
 8006d50:	08006d71 	.word	0x08006d71
 8006d54:	08006d79 	.word	0x08006d79
 8006d58:	08006d81 	.word	0x08006d81
 8006d5c:	08006d89 	.word	0x08006d89
 8006d60:	2300      	movs	r3, #0
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d66:	e1ec      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d68:	2304      	movs	r3, #4
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6e:	e1e8      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d70:	2308      	movs	r3, #8
 8006d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d76:	e1e4      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d78:	2310      	movs	r3, #16
 8006d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7e:	e1e0      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d80:	2320      	movs	r3, #32
 8006d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d86:	e1dc      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d88:	2340      	movs	r3, #64	; 0x40
 8006d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8e:	e1d8      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d90:	2380      	movs	r3, #128	; 0x80
 8006d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d96:	e1d4      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a4f      	ldr	r2, [pc, #316]	; (8006edc <UART_SetConfig+0x340>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d130      	bne.n	8006e04 <UART_SetConfig+0x268>
 8006da2:	4b4c      	ldr	r3, [pc, #304]	; (8006ed4 <UART_SetConfig+0x338>)
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	d826      	bhi.n	8006dfc <UART_SetConfig+0x260>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <UART_SetConfig+0x218>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006dcd 	.word	0x08006dcd
 8006db8:	08006dd5 	.word	0x08006dd5
 8006dbc:	08006ddd 	.word	0x08006ddd
 8006dc0:	08006de5 	.word	0x08006de5
 8006dc4:	08006ded 	.word	0x08006ded
 8006dc8:	08006df5 	.word	0x08006df5
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd2:	e1b6      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dda:	e1b2      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006ddc:	2308      	movs	r3, #8
 8006dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de2:	e1ae      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006de4:	2310      	movs	r3, #16
 8006de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dea:	e1aa      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006dec:	2320      	movs	r3, #32
 8006dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df2:	e1a6      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006df4:	2340      	movs	r3, #64	; 0x40
 8006df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfa:	e1a2      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006dfc:	2380      	movs	r3, #128	; 0x80
 8006dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e02:	e19e      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a35      	ldr	r2, [pc, #212]	; (8006ee0 <UART_SetConfig+0x344>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d130      	bne.n	8006e70 <UART_SetConfig+0x2d4>
 8006e0e:	4b31      	ldr	r3, [pc, #196]	; (8006ed4 <UART_SetConfig+0x338>)
 8006e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	2b05      	cmp	r3, #5
 8006e18:	d826      	bhi.n	8006e68 <UART_SetConfig+0x2cc>
 8006e1a:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <UART_SetConfig+0x284>)
 8006e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e20:	08006e39 	.word	0x08006e39
 8006e24:	08006e41 	.word	0x08006e41
 8006e28:	08006e49 	.word	0x08006e49
 8006e2c:	08006e51 	.word	0x08006e51
 8006e30:	08006e59 	.word	0x08006e59
 8006e34:	08006e61 	.word	0x08006e61
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3e:	e180      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006e40:	2304      	movs	r3, #4
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e46:	e17c      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006e48:	2308      	movs	r3, #8
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4e:	e178      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006e50:	2310      	movs	r3, #16
 8006e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e56:	e174      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006e58:	2320      	movs	r3, #32
 8006e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5e:	e170      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006e60:	2340      	movs	r3, #64	; 0x40
 8006e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e66:	e16c      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006e68:	2380      	movs	r3, #128	; 0x80
 8006e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6e:	e168      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1b      	ldr	r2, [pc, #108]	; (8006ee4 <UART_SetConfig+0x348>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d142      	bne.n	8006f00 <UART_SetConfig+0x364>
 8006e7a:	4b16      	ldr	r3, [pc, #88]	; (8006ed4 <UART_SetConfig+0x338>)
 8006e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	2b05      	cmp	r3, #5
 8006e84:	d838      	bhi.n	8006ef8 <UART_SetConfig+0x35c>
 8006e86:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <UART_SetConfig+0x2f0>)
 8006e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8c:	08006ea5 	.word	0x08006ea5
 8006e90:	08006ead 	.word	0x08006ead
 8006e94:	08006eb5 	.word	0x08006eb5
 8006e98:	08006ebd 	.word	0x08006ebd
 8006e9c:	08006ee9 	.word	0x08006ee9
 8006ea0:	08006ef1 	.word	0x08006ef1
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eaa:	e14a      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006eac:	2304      	movs	r3, #4
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb2:	e146      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eba:	e142      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec2:	e13e      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006ec4:	cfff69f3 	.word	0xcfff69f3
 8006ec8:	58000c00 	.word	0x58000c00
 8006ecc:	11fff4ff 	.word	0x11fff4ff
 8006ed0:	40011000 	.word	0x40011000
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	40004400 	.word	0x40004400
 8006edc:	40004800 	.word	0x40004800
 8006ee0:	40004c00 	.word	0x40004c00
 8006ee4:	40005000 	.word	0x40005000
 8006ee8:	2320      	movs	r3, #32
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eee:	e128      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006ef0:	2340      	movs	r3, #64	; 0x40
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef6:	e124      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006ef8:	2380      	movs	r3, #128	; 0x80
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efe:	e120      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4acb      	ldr	r2, [pc, #812]	; (8007234 <UART_SetConfig+0x698>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d176      	bne.n	8006ff8 <UART_SetConfig+0x45c>
 8006f0a:	4bcb      	ldr	r3, [pc, #812]	; (8007238 <UART_SetConfig+0x69c>)
 8006f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f12:	2b28      	cmp	r3, #40	; 0x28
 8006f14:	d86c      	bhi.n	8006ff0 <UART_SetConfig+0x454>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <UART_SetConfig+0x380>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006fc1 	.word	0x08006fc1
 8006f20:	08006ff1 	.word	0x08006ff1
 8006f24:	08006ff1 	.word	0x08006ff1
 8006f28:	08006ff1 	.word	0x08006ff1
 8006f2c:	08006ff1 	.word	0x08006ff1
 8006f30:	08006ff1 	.word	0x08006ff1
 8006f34:	08006ff1 	.word	0x08006ff1
 8006f38:	08006ff1 	.word	0x08006ff1
 8006f3c:	08006fc9 	.word	0x08006fc9
 8006f40:	08006ff1 	.word	0x08006ff1
 8006f44:	08006ff1 	.word	0x08006ff1
 8006f48:	08006ff1 	.word	0x08006ff1
 8006f4c:	08006ff1 	.word	0x08006ff1
 8006f50:	08006ff1 	.word	0x08006ff1
 8006f54:	08006ff1 	.word	0x08006ff1
 8006f58:	08006ff1 	.word	0x08006ff1
 8006f5c:	08006fd1 	.word	0x08006fd1
 8006f60:	08006ff1 	.word	0x08006ff1
 8006f64:	08006ff1 	.word	0x08006ff1
 8006f68:	08006ff1 	.word	0x08006ff1
 8006f6c:	08006ff1 	.word	0x08006ff1
 8006f70:	08006ff1 	.word	0x08006ff1
 8006f74:	08006ff1 	.word	0x08006ff1
 8006f78:	08006ff1 	.word	0x08006ff1
 8006f7c:	08006fd9 	.word	0x08006fd9
 8006f80:	08006ff1 	.word	0x08006ff1
 8006f84:	08006ff1 	.word	0x08006ff1
 8006f88:	08006ff1 	.word	0x08006ff1
 8006f8c:	08006ff1 	.word	0x08006ff1
 8006f90:	08006ff1 	.word	0x08006ff1
 8006f94:	08006ff1 	.word	0x08006ff1
 8006f98:	08006ff1 	.word	0x08006ff1
 8006f9c:	08006fe1 	.word	0x08006fe1
 8006fa0:	08006ff1 	.word	0x08006ff1
 8006fa4:	08006ff1 	.word	0x08006ff1
 8006fa8:	08006ff1 	.word	0x08006ff1
 8006fac:	08006ff1 	.word	0x08006ff1
 8006fb0:	08006ff1 	.word	0x08006ff1
 8006fb4:	08006ff1 	.word	0x08006ff1
 8006fb8:	08006ff1 	.word	0x08006ff1
 8006fbc:	08006fe9 	.word	0x08006fe9
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc6:	e0bc      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006fc8:	2304      	movs	r3, #4
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e0b8      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006fd0:	2308      	movs	r3, #8
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd6:	e0b4      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006fd8:	2310      	movs	r3, #16
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fde:	e0b0      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006fe0:	2320      	movs	r3, #32
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe6:	e0ac      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006fe8:	2340      	movs	r3, #64	; 0x40
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fee:	e0a8      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff6:	e0a4      	b.n	8007142 <UART_SetConfig+0x5a6>
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a8f      	ldr	r2, [pc, #572]	; (800723c <UART_SetConfig+0x6a0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d130      	bne.n	8007064 <UART_SetConfig+0x4c8>
 8007002:	4b8d      	ldr	r3, [pc, #564]	; (8007238 <UART_SetConfig+0x69c>)
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b05      	cmp	r3, #5
 800700c:	d826      	bhi.n	800705c <UART_SetConfig+0x4c0>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <UART_SetConfig+0x478>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	0800702d 	.word	0x0800702d
 8007018:	08007035 	.word	0x08007035
 800701c:	0800703d 	.word	0x0800703d
 8007020:	08007045 	.word	0x08007045
 8007024:	0800704d 	.word	0x0800704d
 8007028:	08007055 	.word	0x08007055
 800702c:	2300      	movs	r3, #0
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007032:	e086      	b.n	8007142 <UART_SetConfig+0x5a6>
 8007034:	2304      	movs	r3, #4
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703a:	e082      	b.n	8007142 <UART_SetConfig+0x5a6>
 800703c:	2308      	movs	r3, #8
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007042:	e07e      	b.n	8007142 <UART_SetConfig+0x5a6>
 8007044:	2310      	movs	r3, #16
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704a:	e07a      	b.n	8007142 <UART_SetConfig+0x5a6>
 800704c:	2320      	movs	r3, #32
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007052:	e076      	b.n	8007142 <UART_SetConfig+0x5a6>
 8007054:	2340      	movs	r3, #64	; 0x40
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705a:	e072      	b.n	8007142 <UART_SetConfig+0x5a6>
 800705c:	2380      	movs	r3, #128	; 0x80
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007062:	e06e      	b.n	8007142 <UART_SetConfig+0x5a6>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a75      	ldr	r2, [pc, #468]	; (8007240 <UART_SetConfig+0x6a4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d130      	bne.n	80070d0 <UART_SetConfig+0x534>
 800706e:	4b72      	ldr	r3, [pc, #456]	; (8007238 <UART_SetConfig+0x69c>)
 8007070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	2b05      	cmp	r3, #5
 8007078:	d826      	bhi.n	80070c8 <UART_SetConfig+0x52c>
 800707a:	a201      	add	r2, pc, #4	; (adr r2, 8007080 <UART_SetConfig+0x4e4>)
 800707c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007080:	08007099 	.word	0x08007099
 8007084:	080070a1 	.word	0x080070a1
 8007088:	080070a9 	.word	0x080070a9
 800708c:	080070b1 	.word	0x080070b1
 8007090:	080070b9 	.word	0x080070b9
 8007094:	080070c1 	.word	0x080070c1
 8007098:	2300      	movs	r3, #0
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709e:	e050      	b.n	8007142 <UART_SetConfig+0x5a6>
 80070a0:	2304      	movs	r3, #4
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a6:	e04c      	b.n	8007142 <UART_SetConfig+0x5a6>
 80070a8:	2308      	movs	r3, #8
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ae:	e048      	b.n	8007142 <UART_SetConfig+0x5a6>
 80070b0:	2310      	movs	r3, #16
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b6:	e044      	b.n	8007142 <UART_SetConfig+0x5a6>
 80070b8:	2320      	movs	r3, #32
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070be:	e040      	b.n	8007142 <UART_SetConfig+0x5a6>
 80070c0:	2340      	movs	r3, #64	; 0x40
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070c6:	e03c      	b.n	8007142 <UART_SetConfig+0x5a6>
 80070c8:	2380      	movs	r3, #128	; 0x80
 80070ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ce:	e038      	b.n	8007142 <UART_SetConfig+0x5a6>
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a5b      	ldr	r2, [pc, #364]	; (8007244 <UART_SetConfig+0x6a8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d130      	bne.n	800713c <UART_SetConfig+0x5a0>
 80070da:	4b57      	ldr	r3, [pc, #348]	; (8007238 <UART_SetConfig+0x69c>)
 80070dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	2b05      	cmp	r3, #5
 80070e4:	d826      	bhi.n	8007134 <UART_SetConfig+0x598>
 80070e6:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <UART_SetConfig+0x550>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	08007105 	.word	0x08007105
 80070f0:	0800710d 	.word	0x0800710d
 80070f4:	08007115 	.word	0x08007115
 80070f8:	0800711d 	.word	0x0800711d
 80070fc:	08007125 	.word	0x08007125
 8007100:	0800712d 	.word	0x0800712d
 8007104:	2302      	movs	r3, #2
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710a:	e01a      	b.n	8007142 <UART_SetConfig+0x5a6>
 800710c:	2304      	movs	r3, #4
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007112:	e016      	b.n	8007142 <UART_SetConfig+0x5a6>
 8007114:	2308      	movs	r3, #8
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711a:	e012      	b.n	8007142 <UART_SetConfig+0x5a6>
 800711c:	2310      	movs	r3, #16
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007122:	e00e      	b.n	8007142 <UART_SetConfig+0x5a6>
 8007124:	2320      	movs	r3, #32
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712a:	e00a      	b.n	8007142 <UART_SetConfig+0x5a6>
 800712c:	2340      	movs	r3, #64	; 0x40
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007132:	e006      	b.n	8007142 <UART_SetConfig+0x5a6>
 8007134:	2380      	movs	r3, #128	; 0x80
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713a:	e002      	b.n	8007142 <UART_SetConfig+0x5a6>
 800713c:	2380      	movs	r3, #128	; 0x80
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a3f      	ldr	r2, [pc, #252]	; (8007244 <UART_SetConfig+0x6a8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	f040 80f8 	bne.w	800733e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800714e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007152:	2b20      	cmp	r3, #32
 8007154:	dc46      	bgt.n	80071e4 <UART_SetConfig+0x648>
 8007156:	2b02      	cmp	r3, #2
 8007158:	f2c0 8082 	blt.w	8007260 <UART_SetConfig+0x6c4>
 800715c:	3b02      	subs	r3, #2
 800715e:	2b1e      	cmp	r3, #30
 8007160:	d87e      	bhi.n	8007260 <UART_SetConfig+0x6c4>
 8007162:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <UART_SetConfig+0x5cc>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	080071eb 	.word	0x080071eb
 800716c:	08007261 	.word	0x08007261
 8007170:	080071f3 	.word	0x080071f3
 8007174:	08007261 	.word	0x08007261
 8007178:	08007261 	.word	0x08007261
 800717c:	08007261 	.word	0x08007261
 8007180:	08007203 	.word	0x08007203
 8007184:	08007261 	.word	0x08007261
 8007188:	08007261 	.word	0x08007261
 800718c:	08007261 	.word	0x08007261
 8007190:	08007261 	.word	0x08007261
 8007194:	08007261 	.word	0x08007261
 8007198:	08007261 	.word	0x08007261
 800719c:	08007261 	.word	0x08007261
 80071a0:	08007213 	.word	0x08007213
 80071a4:	08007261 	.word	0x08007261
 80071a8:	08007261 	.word	0x08007261
 80071ac:	08007261 	.word	0x08007261
 80071b0:	08007261 	.word	0x08007261
 80071b4:	08007261 	.word	0x08007261
 80071b8:	08007261 	.word	0x08007261
 80071bc:	08007261 	.word	0x08007261
 80071c0:	08007261 	.word	0x08007261
 80071c4:	08007261 	.word	0x08007261
 80071c8:	08007261 	.word	0x08007261
 80071cc:	08007261 	.word	0x08007261
 80071d0:	08007261 	.word	0x08007261
 80071d4:	08007261 	.word	0x08007261
 80071d8:	08007261 	.word	0x08007261
 80071dc:	08007261 	.word	0x08007261
 80071e0:	08007253 	.word	0x08007253
 80071e4:	2b40      	cmp	r3, #64	; 0x40
 80071e6:	d037      	beq.n	8007258 <UART_SetConfig+0x6bc>
 80071e8:	e03a      	b.n	8007260 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80071ea:	f7fe fbbb 	bl	8005964 <HAL_RCCEx_GetD3PCLK1Freq>
 80071ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071f0:	e03c      	b.n	800726c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fbca 	bl	8005990 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007200:	e034      	b.n	800726c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007202:	f107 0318 	add.w	r3, r7, #24
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fd16 	bl	8005c38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007210:	e02c      	b.n	800726c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007212:	4b09      	ldr	r3, [pc, #36]	; (8007238 <UART_SetConfig+0x69c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d016      	beq.n	800724c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800721e:	4b06      	ldr	r3, [pc, #24]	; (8007238 <UART_SetConfig+0x69c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	08db      	lsrs	r3, r3, #3
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	4a07      	ldr	r2, [pc, #28]	; (8007248 <UART_SetConfig+0x6ac>)
 800722a:	fa22 f303 	lsr.w	r3, r2, r3
 800722e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007230:	e01c      	b.n	800726c <UART_SetConfig+0x6d0>
 8007232:	bf00      	nop
 8007234:	40011400 	.word	0x40011400
 8007238:	58024400 	.word	0x58024400
 800723c:	40007800 	.word	0x40007800
 8007240:	40007c00 	.word	0x40007c00
 8007244:	58000c00 	.word	0x58000c00
 8007248:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800724c:	4b9d      	ldr	r3, [pc, #628]	; (80074c4 <UART_SetConfig+0x928>)
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007250:	e00c      	b.n	800726c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007252:	4b9d      	ldr	r3, [pc, #628]	; (80074c8 <UART_SetConfig+0x92c>)
 8007254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007256:	e009      	b.n	800726c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800725c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800725e:	e005      	b.n	800726c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800726a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800726c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 81de 	beq.w	8007630 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	4a94      	ldr	r2, [pc, #592]	; (80074cc <UART_SetConfig+0x930>)
 800727a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800727e:	461a      	mov	r2, r3
 8007280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007282:	fbb3 f3f2 	udiv	r3, r3, r2
 8007286:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	4613      	mov	r3, r2
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4413      	add	r3, r2
 8007292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007294:	429a      	cmp	r2, r3
 8007296:	d305      	bcc.n	80072a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800729e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d903      	bls.n	80072ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80072aa:	e1c1      	b.n	8007630 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ae:	2200      	movs	r2, #0
 80072b0:	60bb      	str	r3, [r7, #8]
 80072b2:	60fa      	str	r2, [r7, #12]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	4a84      	ldr	r2, [pc, #528]	; (80074cc <UART_SetConfig+0x930>)
 80072ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2200      	movs	r2, #0
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	607a      	str	r2, [r7, #4]
 80072c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072ce:	f7f9 f85f 	bl	8000390 <__aeabi_uldivmod>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4610      	mov	r0, r2
 80072d8:	4619      	mov	r1, r3
 80072da:	f04f 0200 	mov.w	r2, #0
 80072de:	f04f 0300 	mov.w	r3, #0
 80072e2:	020b      	lsls	r3, r1, #8
 80072e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072e8:	0202      	lsls	r2, r0, #8
 80072ea:	6979      	ldr	r1, [r7, #20]
 80072ec:	6849      	ldr	r1, [r1, #4]
 80072ee:	0849      	lsrs	r1, r1, #1
 80072f0:	2000      	movs	r0, #0
 80072f2:	460c      	mov	r4, r1
 80072f4:	4605      	mov	r5, r0
 80072f6:	eb12 0804 	adds.w	r8, r2, r4
 80072fa:	eb43 0905 	adc.w	r9, r3, r5
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	469a      	mov	sl, r3
 8007306:	4693      	mov	fp, r2
 8007308:	4652      	mov	r2, sl
 800730a:	465b      	mov	r3, fp
 800730c:	4640      	mov	r0, r8
 800730e:	4649      	mov	r1, r9
 8007310:	f7f9 f83e 	bl	8000390 <__aeabi_uldivmod>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4613      	mov	r3, r2
 800731a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007322:	d308      	bcc.n	8007336 <UART_SetConfig+0x79a>
 8007324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800732a:	d204      	bcs.n	8007336 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007332:	60da      	str	r2, [r3, #12]
 8007334:	e17c      	b.n	8007630 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800733c:	e178      	b.n	8007630 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007346:	f040 80c5 	bne.w	80074d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800734a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800734e:	2b20      	cmp	r3, #32
 8007350:	dc48      	bgt.n	80073e4 <UART_SetConfig+0x848>
 8007352:	2b00      	cmp	r3, #0
 8007354:	db7b      	blt.n	800744e <UART_SetConfig+0x8b2>
 8007356:	2b20      	cmp	r3, #32
 8007358:	d879      	bhi.n	800744e <UART_SetConfig+0x8b2>
 800735a:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <UART_SetConfig+0x7c4>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	080073eb 	.word	0x080073eb
 8007364:	080073f3 	.word	0x080073f3
 8007368:	0800744f 	.word	0x0800744f
 800736c:	0800744f 	.word	0x0800744f
 8007370:	080073fb 	.word	0x080073fb
 8007374:	0800744f 	.word	0x0800744f
 8007378:	0800744f 	.word	0x0800744f
 800737c:	0800744f 	.word	0x0800744f
 8007380:	0800740b 	.word	0x0800740b
 8007384:	0800744f 	.word	0x0800744f
 8007388:	0800744f 	.word	0x0800744f
 800738c:	0800744f 	.word	0x0800744f
 8007390:	0800744f 	.word	0x0800744f
 8007394:	0800744f 	.word	0x0800744f
 8007398:	0800744f 	.word	0x0800744f
 800739c:	0800744f 	.word	0x0800744f
 80073a0:	0800741b 	.word	0x0800741b
 80073a4:	0800744f 	.word	0x0800744f
 80073a8:	0800744f 	.word	0x0800744f
 80073ac:	0800744f 	.word	0x0800744f
 80073b0:	0800744f 	.word	0x0800744f
 80073b4:	0800744f 	.word	0x0800744f
 80073b8:	0800744f 	.word	0x0800744f
 80073bc:	0800744f 	.word	0x0800744f
 80073c0:	0800744f 	.word	0x0800744f
 80073c4:	0800744f 	.word	0x0800744f
 80073c8:	0800744f 	.word	0x0800744f
 80073cc:	0800744f 	.word	0x0800744f
 80073d0:	0800744f 	.word	0x0800744f
 80073d4:	0800744f 	.word	0x0800744f
 80073d8:	0800744f 	.word	0x0800744f
 80073dc:	0800744f 	.word	0x0800744f
 80073e0:	08007441 	.word	0x08007441
 80073e4:	2b40      	cmp	r3, #64	; 0x40
 80073e6:	d02e      	beq.n	8007446 <UART_SetConfig+0x8aa>
 80073e8:	e031      	b.n	800744e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073ea:	f7fd fb49 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 80073ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073f0:	e033      	b.n	800745a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073f2:	f7fd fb5b 	bl	8004aac <HAL_RCC_GetPCLK2Freq>
 80073f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073f8:	e02f      	b.n	800745a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe fac6 	bl	8005990 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007408:	e027      	b.n	800745a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800740a:	f107 0318 	add.w	r3, r7, #24
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fc12 	bl	8005c38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007418:	e01f      	b.n	800745a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800741a:	4b2d      	ldr	r3, [pc, #180]	; (80074d0 <UART_SetConfig+0x934>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	d009      	beq.n	800743a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007426:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <UART_SetConfig+0x934>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	08db      	lsrs	r3, r3, #3
 800742c:	f003 0303 	and.w	r3, r3, #3
 8007430:	4a24      	ldr	r2, [pc, #144]	; (80074c4 <UART_SetConfig+0x928>)
 8007432:	fa22 f303 	lsr.w	r3, r2, r3
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007438:	e00f      	b.n	800745a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800743a:	4b22      	ldr	r3, [pc, #136]	; (80074c4 <UART_SetConfig+0x928>)
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800743e:	e00c      	b.n	800745a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007440:	4b21      	ldr	r3, [pc, #132]	; (80074c8 <UART_SetConfig+0x92c>)
 8007442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007444:	e009      	b.n	800745a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800744c:	e005      	b.n	800745a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007458:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800745a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 80e7 	beq.w	8007630 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	4a19      	ldr	r2, [pc, #100]	; (80074cc <UART_SetConfig+0x930>)
 8007468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800746c:	461a      	mov	r2, r3
 800746e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007470:	fbb3 f3f2 	udiv	r3, r3, r2
 8007474:	005a      	lsls	r2, r3, #1
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	085b      	lsrs	r3, r3, #1
 800747c:	441a      	add	r2, r3
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	fbb2 f3f3 	udiv	r3, r2, r3
 8007486:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	2b0f      	cmp	r3, #15
 800748c:	d916      	bls.n	80074bc <UART_SetConfig+0x920>
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007494:	d212      	bcs.n	80074bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007498:	b29b      	uxth	r3, r3
 800749a:	f023 030f 	bic.w	r3, r3, #15
 800749e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80074ae:	4313      	orrs	r3, r2
 80074b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80074b8:	60da      	str	r2, [r3, #12]
 80074ba:	e0b9      	b.n	8007630 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80074c2:	e0b5      	b.n	8007630 <UART_SetConfig+0xa94>
 80074c4:	03d09000 	.word	0x03d09000
 80074c8:	003d0900 	.word	0x003d0900
 80074cc:	0800bc54 	.word	0x0800bc54
 80074d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80074d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074d8:	2b20      	cmp	r3, #32
 80074da:	dc49      	bgt.n	8007570 <UART_SetConfig+0x9d4>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	db7c      	blt.n	80075da <UART_SetConfig+0xa3e>
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d87a      	bhi.n	80075da <UART_SetConfig+0xa3e>
 80074e4:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <UART_SetConfig+0x950>)
 80074e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ea:	bf00      	nop
 80074ec:	08007577 	.word	0x08007577
 80074f0:	0800757f 	.word	0x0800757f
 80074f4:	080075db 	.word	0x080075db
 80074f8:	080075db 	.word	0x080075db
 80074fc:	08007587 	.word	0x08007587
 8007500:	080075db 	.word	0x080075db
 8007504:	080075db 	.word	0x080075db
 8007508:	080075db 	.word	0x080075db
 800750c:	08007597 	.word	0x08007597
 8007510:	080075db 	.word	0x080075db
 8007514:	080075db 	.word	0x080075db
 8007518:	080075db 	.word	0x080075db
 800751c:	080075db 	.word	0x080075db
 8007520:	080075db 	.word	0x080075db
 8007524:	080075db 	.word	0x080075db
 8007528:	080075db 	.word	0x080075db
 800752c:	080075a7 	.word	0x080075a7
 8007530:	080075db 	.word	0x080075db
 8007534:	080075db 	.word	0x080075db
 8007538:	080075db 	.word	0x080075db
 800753c:	080075db 	.word	0x080075db
 8007540:	080075db 	.word	0x080075db
 8007544:	080075db 	.word	0x080075db
 8007548:	080075db 	.word	0x080075db
 800754c:	080075db 	.word	0x080075db
 8007550:	080075db 	.word	0x080075db
 8007554:	080075db 	.word	0x080075db
 8007558:	080075db 	.word	0x080075db
 800755c:	080075db 	.word	0x080075db
 8007560:	080075db 	.word	0x080075db
 8007564:	080075db 	.word	0x080075db
 8007568:	080075db 	.word	0x080075db
 800756c:	080075cd 	.word	0x080075cd
 8007570:	2b40      	cmp	r3, #64	; 0x40
 8007572:	d02e      	beq.n	80075d2 <UART_SetConfig+0xa36>
 8007574:	e031      	b.n	80075da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007576:	f7fd fa83 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 800757a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800757c:	e033      	b.n	80075e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800757e:	f7fd fa95 	bl	8004aac <HAL_RCC_GetPCLK2Freq>
 8007582:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007584:	e02f      	b.n	80075e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe fa00 	bl	8005990 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007594:	e027      	b.n	80075e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007596:	f107 0318 	add.w	r3, r7, #24
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe fb4c 	bl	8005c38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a4:	e01f      	b.n	80075e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075a6:	4b2d      	ldr	r3, [pc, #180]	; (800765c <UART_SetConfig+0xac0>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d009      	beq.n	80075c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075b2:	4b2a      	ldr	r3, [pc, #168]	; (800765c <UART_SetConfig+0xac0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	08db      	lsrs	r3, r3, #3
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	4a28      	ldr	r2, [pc, #160]	; (8007660 <UART_SetConfig+0xac4>)
 80075be:	fa22 f303 	lsr.w	r3, r2, r3
 80075c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075c4:	e00f      	b.n	80075e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80075c6:	4b26      	ldr	r3, [pc, #152]	; (8007660 <UART_SetConfig+0xac4>)
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075ca:	e00c      	b.n	80075e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075cc:	4b25      	ldr	r3, [pc, #148]	; (8007664 <UART_SetConfig+0xac8>)
 80075ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075d0:	e009      	b.n	80075e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075d8:	e005      	b.n	80075e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80075e4:	bf00      	nop
    }

    if (pclk != 0U)
 80075e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d021      	beq.n	8007630 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	4a1d      	ldr	r2, [pc, #116]	; (8007668 <UART_SetConfig+0xacc>)
 80075f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	441a      	add	r2, r3
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	fbb2 f3f3 	udiv	r3, r2, r3
 800760e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	2b0f      	cmp	r3, #15
 8007614:	d909      	bls.n	800762a <UART_SetConfig+0xa8e>
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800761c:	d205      	bcs.n	800762a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	b29a      	uxth	r2, r3
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	60da      	str	r2, [r3, #12]
 8007628:	e002      	b.n	8007630 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2201      	movs	r2, #1
 8007634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2201      	movs	r2, #1
 800763c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2200      	movs	r2, #0
 8007644:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2200      	movs	r2, #0
 800764a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800764c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007650:	4618      	mov	r0, r3
 8007652:	3748      	adds	r7, #72	; 0x48
 8007654:	46bd      	mov	sp, r7
 8007656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800765a:	bf00      	nop
 800765c:	58024400 	.word	0x58024400
 8007660:	03d09000 	.word	0x03d09000
 8007664:	003d0900 	.word	0x003d0900
 8007668:	0800bc54 	.word	0x0800bc54

0800766c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	f003 0310 	and.w	r3, r3, #16
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00a      	beq.n	800771e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01a      	beq.n	8007782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800776a:	d10a      	bne.n	8007782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	605a      	str	r2, [r3, #4]
  }
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077c0:	f7fa f858 	bl	8001874 <HAL_GetTick>
 80077c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0308 	and.w	r3, r3, #8
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d10e      	bne.n	80077f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f82f 	bl	8007846 <UART_WaitOnFlagUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e025      	b.n	800783e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d10e      	bne.n	800781e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f819 	bl	8007846 <UART_WaitOnFlagUntilTimeout>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e00f      	b.n	800783e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b09c      	sub	sp, #112	; 0x70
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	603b      	str	r3, [r7, #0]
 8007852:	4613      	mov	r3, r2
 8007854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007856:	e0a9      	b.n	80079ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800785a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785e:	f000 80a5 	beq.w	80079ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007862:	f7fa f807 	bl	8001874 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800786e:	429a      	cmp	r2, r3
 8007870:	d302      	bcc.n	8007878 <UART_WaitOnFlagUntilTimeout+0x32>
 8007872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007874:	2b00      	cmp	r3, #0
 8007876:	d140      	bne.n	80078fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007888:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800788c:	667b      	str	r3, [r7, #100]	; 0x64
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007896:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007898:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800789c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e6      	bne.n	8007878 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3308      	adds	r3, #8
 80078b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078bc:	f023 0301 	bic.w	r3, r3, #1
 80078c0:	663b      	str	r3, [r7, #96]	; 0x60
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80078cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e5      	bne.n	80078aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e069      	b.n	80079ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0304 	and.w	r3, r3, #4
 8007904:	2b00      	cmp	r3, #0
 8007906:	d051      	beq.n	80079ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007916:	d149      	bne.n	80079ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007920:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007936:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
 8007942:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e6      	bne.n	8007922 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3308      	adds	r3, #8
 800795a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	613b      	str	r3, [r7, #16]
   return(result);
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f023 0301 	bic.w	r3, r3, #1
 800796a:	66bb      	str	r3, [r7, #104]	; 0x68
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3308      	adds	r3, #8
 8007972:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007974:	623a      	str	r2, [r7, #32]
 8007976:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	69f9      	ldr	r1, [r7, #28]
 800797a:	6a3a      	ldr	r2, [r7, #32]
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	61bb      	str	r3, [r7, #24]
   return(result);
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e5      	bne.n	8007954 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2220      	movs	r2, #32
 800798c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2220      	movs	r2, #32
 8007994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2220      	movs	r2, #32
 800799c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e010      	b.n	80079ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	69da      	ldr	r2, [r3, #28]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	4013      	ands	r3, r2
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	bf0c      	ite	eq
 80079bc:	2301      	moveq	r3, #1
 80079be:	2300      	movne	r3, #0
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	461a      	mov	r2, r3
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	f43f af46 	beq.w	8007858 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3770      	adds	r7, #112	; 0x70
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079d8:	b480      	push	{r7}
 80079da:	b0a3      	sub	sp, #140	; 0x8c
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	4613      	mov	r3, r2
 80079e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	88fa      	ldrh	r2, [r7, #6]
 80079f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	88fa      	ldrh	r2, [r7, #6]
 80079f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a0a:	d10e      	bne.n	8007a2a <UART_Start_Receive_IT+0x52>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d105      	bne.n	8007a20 <UART_Start_Receive_IT+0x48>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a1e:	e02d      	b.n	8007a7c <UART_Start_Receive_IT+0xa4>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	22ff      	movs	r2, #255	; 0xff
 8007a24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a28:	e028      	b.n	8007a7c <UART_Start_Receive_IT+0xa4>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10d      	bne.n	8007a4e <UART_Start_Receive_IT+0x76>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d104      	bne.n	8007a44 <UART_Start_Receive_IT+0x6c>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	22ff      	movs	r2, #255	; 0xff
 8007a3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a42:	e01b      	b.n	8007a7c <UART_Start_Receive_IT+0xa4>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	227f      	movs	r2, #127	; 0x7f
 8007a48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a4c:	e016      	b.n	8007a7c <UART_Start_Receive_IT+0xa4>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a56:	d10d      	bne.n	8007a74 <UART_Start_Receive_IT+0x9c>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d104      	bne.n	8007a6a <UART_Start_Receive_IT+0x92>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	227f      	movs	r2, #127	; 0x7f
 8007a64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a68:	e008      	b.n	8007a7c <UART_Start_Receive_IT+0xa4>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	223f      	movs	r2, #63	; 0x3f
 8007a6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a72:	e003      	b.n	8007a7c <UART_Start_Receive_IT+0xa4>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2222      	movs	r2, #34	; 0x22
 8007a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3308      	adds	r3, #8
 8007a92:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007ab0:	673a      	str	r2, [r7, #112]	; 0x70
 8007ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007ab6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e3      	bne.n	8007a8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007acc:	d153      	bne.n	8007b76 <UART_Start_Receive_IT+0x19e>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ad4:	88fa      	ldrh	r2, [r7, #6]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d34d      	bcc.n	8007b76 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae2:	d107      	bne.n	8007af4 <UART_Start_Receive_IT+0x11c>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d103      	bne.n	8007af4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4a4b      	ldr	r2, [pc, #300]	; (8007c1c <UART_Start_Receive_IT+0x244>)
 8007af0:	671a      	str	r2, [r3, #112]	; 0x70
 8007af2:	e002      	b.n	8007afa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4a4a      	ldr	r2, [pc, #296]	; (8007c20 <UART_Start_Receive_IT+0x248>)
 8007af8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d01a      	beq.n	8007b40 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b12:	e853 3f00 	ldrex	r3, [r3]
 8007b16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b2e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b34:	e841 2300 	strex	r3, r2, [r1]
 8007b38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e4      	bne.n	8007b0a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3308      	adds	r3, #8
 8007b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4a:	e853 3f00 	ldrex	r3, [r3]
 8007b4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b60:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e5      	bne.n	8007b40 <UART_Start_Receive_IT+0x168>
 8007b74:	e04a      	b.n	8007c0c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7e:	d107      	bne.n	8007b90 <UART_Start_Receive_IT+0x1b8>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d103      	bne.n	8007b90 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4a26      	ldr	r2, [pc, #152]	; (8007c24 <UART_Start_Receive_IT+0x24c>)
 8007b8c:	671a      	str	r2, [r3, #112]	; 0x70
 8007b8e:	e002      	b.n	8007b96 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a25      	ldr	r2, [pc, #148]	; (8007c28 <UART_Start_Receive_IT+0x250>)
 8007b94:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d019      	beq.n	8007bda <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007bba:	677b      	str	r3, [r7, #116]	; 0x74
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e6      	bne.n	8007ba6 <UART_Start_Receive_IT+0x1ce>
 8007bd8:	e018      	b.n	8007c0c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	613b      	str	r3, [r7, #16]
   return(result);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f043 0320 	orr.w	r3, r3, #32
 8007bee:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bf8:	623b      	str	r3, [r7, #32]
 8007bfa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	69f9      	ldr	r1, [r7, #28]
 8007bfe:	6a3a      	ldr	r2, [r7, #32]
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e6      	bne.n	8007bda <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	378c      	adds	r7, #140	; 0x8c
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	08008335 	.word	0x08008335
 8007c20:	0800803d 	.word	0x0800803d
 8007c24:	08007edb 	.word	0x08007edb
 8007c28:	08007d7b 	.word	0x08007d7b

08007c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b095      	sub	sp, #84	; 0x54
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c52:	643b      	str	r3, [r7, #64]	; 0x40
 8007c54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e6      	bne.n	8007c34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	4b1e      	ldr	r3, [pc, #120]	; (8007cf4 <UART_EndRxTransfer+0xc8>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3308      	adds	r3, #8
 8007c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e5      	bne.n	8007c66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d118      	bne.n	8007cd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f023 0310 	bic.w	r3, r3, #16
 8007cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc0:	61bb      	str	r3, [r7, #24]
 8007cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6979      	ldr	r1, [r7, #20]
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e6      	bne.n	8007ca2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007ce8:	bf00      	nop
 8007cea:	3754      	adds	r7, #84	; 0x54
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	effffffe 	.word	0xeffffffe

08007cf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7fe ff2a 	bl	8006b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d1c:	bf00      	nop
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	61bb      	str	r3, [r7, #24]
 8007d4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6979      	ldr	r1, [r7, #20]
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	613b      	str	r3, [r7, #16]
   return(result);
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e6      	bne.n	8007d2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7fe fef5 	bl	8006b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d72:	bf00      	nop
 8007d74:	3720      	adds	r7, #32
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b096      	sub	sp, #88	; 0x58
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d92:	2b22      	cmp	r3, #34	; 0x22
 8007d94:	f040 8095 	bne.w	8007ec2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007da2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007da6:	b2d9      	uxtb	r1, r3
 8007da8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db2:	400a      	ands	r2, r1
 8007db4:	b2d2      	uxtb	r2, r2
 8007db6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d178      	bne.n	8007ed2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007df4:	653b      	str	r3, [r7, #80]	; 0x50
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8007e00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e6      	bne.n	8007de0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3308      	adds	r3, #8
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	623b      	str	r3, [r7, #32]
   return(result);
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	f023 0301 	bic.w	r3, r3, #1
 8007e28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3308      	adds	r3, #8
 8007e30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e32:	633a      	str	r2, [r7, #48]	; 0x30
 8007e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e5      	bne.n	8007e12 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d12e      	bne.n	8007eba <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0310 	bic.w	r3, r3, #16
 8007e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e80:	61fb      	str	r3, [r7, #28]
 8007e82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	69b9      	ldr	r1, [r7, #24]
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e6      	bne.n	8007e62 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	f003 0310 	and.w	r3, r3, #16
 8007e9e:	2b10      	cmp	r3, #16
 8007ea0:	d103      	bne.n	8007eaa <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2210      	movs	r2, #16
 8007ea8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7fe fe66 	bl	8006b84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007eb8:	e00b      	b.n	8007ed2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7f9 f88e 	bl	8000fdc <HAL_UART_RxCpltCallback>
}
 8007ec0:	e007      	b.n	8007ed2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	699a      	ldr	r2, [r3, #24]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0208 	orr.w	r2, r2, #8
 8007ed0:	619a      	str	r2, [r3, #24]
}
 8007ed2:	bf00      	nop
 8007ed4:	3758      	adds	r7, #88	; 0x58
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b096      	sub	sp, #88	; 0x58
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ee8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef2:	2b22      	cmp	r3, #34	; 0x22
 8007ef4:	f040 8095 	bne.w	8008022 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f06:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f08:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007f0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f10:	4013      	ands	r3, r2
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f16:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1c:	1c9a      	adds	r2, r3, #2
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d178      	bne.n	8008032 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8007f60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e6      	bne.n	8007f40 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3308      	adds	r3, #8
 8007f78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	f023 0301 	bic.w	r3, r3, #1
 8007f88:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e5      	bne.n	8007f72 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d12e      	bne.n	800801a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f023 0310 	bic.w	r3, r3, #16
 8007fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fe0:	61bb      	str	r3, [r7, #24]
 8007fe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6979      	ldr	r1, [r7, #20]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	613b      	str	r3, [r7, #16]
   return(result);
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e6      	bne.n	8007fc2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	2b10      	cmp	r3, #16
 8008000:	d103      	bne.n	800800a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2210      	movs	r2, #16
 8008008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fe fdb6 	bl	8006b84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008018:	e00b      	b.n	8008032 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7f8 ffde 	bl	8000fdc <HAL_UART_RxCpltCallback>
}
 8008020:	e007      	b.n	8008032 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699a      	ldr	r2, [r3, #24]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f042 0208 	orr.w	r2, r2, #8
 8008030:	619a      	str	r2, [r3, #24]
}
 8008032:	bf00      	nop
 8008034:	3758      	adds	r7, #88	; 0x58
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b0a6      	sub	sp, #152	; 0x98
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800804a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008072:	2b22      	cmp	r3, #34	; 0x22
 8008074:	f040 814d 	bne.w	8008312 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800807e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008082:	e0f4      	b.n	800826e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800808e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008092:	b2d9      	uxtb	r1, r3
 8008094:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008098:	b2da      	uxtb	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800809e:	400a      	ands	r2, r1
 80080a0:	b2d2      	uxtb	r2, r2
 80080a2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	3b01      	subs	r3, #1
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d053      	beq.n	800817e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d011      	beq.n	8008106 <UART_RxISR_8BIT_FIFOEN+0xca>
 80080e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2201      	movs	r2, #1
 80080f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080fc:	f043 0201 	orr.w	r2, r3, #1
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008106:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d011      	beq.n	8008136 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00b      	beq.n	8008136 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2202      	movs	r2, #2
 8008124:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800812c:	f043 0204 	orr.w	r2, r3, #4
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008136:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b00      	cmp	r3, #0
 8008140:	d011      	beq.n	8008166 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008142:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2204      	movs	r2, #4
 8008154:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800815c:	f043 0202 	orr.w	r2, r3, #2
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d006      	beq.n	800817e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7fe fcfd 	bl	8006b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008184:	b29b      	uxth	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d171      	bne.n	800826e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800819a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800819e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80081ae:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80081b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80081b4:	e841 2300 	strex	r3, r2, [r1]
 80081b8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80081ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1e4      	bne.n	800818a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3308      	adds	r3, #8
 80081c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ca:	e853 3f00 	ldrex	r3, [r3]
 80081ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80081d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081d2:	4b56      	ldr	r3, [pc, #344]	; (800832c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3308      	adds	r3, #8
 80081de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80081e0:	657a      	str	r2, [r7, #84]	; 0x54
 80081e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081e8:	e841 2300 	strex	r3, r2, [r1]
 80081ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1e5      	bne.n	80081c0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008206:	2b01      	cmp	r3, #1
 8008208:	d12e      	bne.n	8008268 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	f023 0310 	bic.w	r3, r3, #16
 8008224:	67bb      	str	r3, [r7, #120]	; 0x78
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800822e:	643b      	str	r3, [r7, #64]	; 0x40
 8008230:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e6      	bne.n	8008210 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	f003 0310 	and.w	r3, r3, #16
 800824c:	2b10      	cmp	r3, #16
 800824e:	d103      	bne.n	8008258 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2210      	movs	r2, #16
 8008256:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7fe fc8f 	bl	8006b84 <HAL_UARTEx_RxEventCallback>
 8008266:	e002      	b.n	800826e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7f8 feb7 	bl	8000fdc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800826e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008272:	2b00      	cmp	r3, #0
 8008274:	d006      	beq.n	8008284 <UART_RxISR_8BIT_FIFOEN+0x248>
 8008276:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800827a:	f003 0320 	and.w	r3, r3, #32
 800827e:	2b00      	cmp	r3, #0
 8008280:	f47f af00 	bne.w	8008084 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800828a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800828e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008292:	2b00      	cmp	r3, #0
 8008294:	d045      	beq.n	8008322 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800829c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d23e      	bcs.n	8008322 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3308      	adds	r3, #8
 80082aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	e853 3f00 	ldrex	r3, [r3]
 80082b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082ba:	673b      	str	r3, [r7, #112]	; 0x70
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3308      	adds	r3, #8
 80082c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80082c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082cc:	e841 2300 	strex	r3, r2, [r1]
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e5      	bne.n	80082a4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a15      	ldr	r2, [pc, #84]	; (8008330 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80082dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	e853 3f00 	ldrex	r3, [r3]
 80082ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f043 0320 	orr.w	r3, r3, #32
 80082f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	461a      	mov	r2, r3
 80082fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fc:	61bb      	str	r3, [r7, #24]
 80082fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008300:	6979      	ldr	r1, [r7, #20]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	e841 2300 	strex	r3, r2, [r1]
 8008308:	613b      	str	r3, [r7, #16]
   return(result);
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e6      	bne.n	80082de <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008310:	e007      	b.n	8008322 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	699a      	ldr	r2, [r3, #24]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f042 0208 	orr.w	r2, r2, #8
 8008320:	619a      	str	r2, [r3, #24]
}
 8008322:	bf00      	nop
 8008324:	3798      	adds	r7, #152	; 0x98
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	effffffe 	.word	0xeffffffe
 8008330:	08007d7b 	.word	0x08007d7b

08008334 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b0a8      	sub	sp, #160	; 0xa0
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008342:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836a:	2b22      	cmp	r3, #34	; 0x22
 800836c:	f040 8151 	bne.w	8008612 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008376:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800837a:	e0f8      	b.n	800856e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800838a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800838e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008392:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008396:	4013      	ands	r3, r2
 8008398:	b29a      	uxth	r2, r3
 800839a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800839e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a4:	1c9a      	adds	r2, r3, #2
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	3b01      	subs	r3, #1
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d053      	beq.n	800847a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d011      	beq.n	8008402 <UART_RxISR_16BIT_FIFOEN+0xce>
 80083de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00b      	beq.n	8008402 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2201      	movs	r2, #1
 80083f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f8:	f043 0201 	orr.w	r2, r3, #1
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008402:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d011      	beq.n	8008432 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800840e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00b      	beq.n	8008432 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2202      	movs	r2, #2
 8008420:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008428:	f043 0204 	orr.w	r2, r3, #4
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008432:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008436:	f003 0304 	and.w	r3, r3, #4
 800843a:	2b00      	cmp	r3, #0
 800843c:	d011      	beq.n	8008462 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800843e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00b      	beq.n	8008462 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2204      	movs	r2, #4
 8008450:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008458:	f043 0202 	orr.w	r2, r3, #2
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008468:	2b00      	cmp	r3, #0
 800846a:	d006      	beq.n	800847a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7fe fb7f 	bl	8006b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008480:	b29b      	uxth	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d173      	bne.n	800856e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800848e:	e853 3f00 	ldrex	r3, [r3]
 8008492:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800849a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084aa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e4      	bne.n	8008486 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084ce:	4b57      	ldr	r3, [pc, #348]	; (800862c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3308      	adds	r3, #8
 80084dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80084e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084e8:	e841 2300 	strex	r3, r2, [r1]
 80084ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e3      	bne.n	80084bc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008506:	2b01      	cmp	r3, #1
 8008508:	d12e      	bne.n	8008568 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800851e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008520:	f023 0310 	bic.w	r3, r3, #16
 8008524:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800852e:	647b      	str	r3, [r7, #68]	; 0x44
 8008530:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800853c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e6      	bne.n	8008510 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	f003 0310 	and.w	r3, r3, #16
 800854c:	2b10      	cmp	r3, #16
 800854e:	d103      	bne.n	8008558 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2210      	movs	r2, #16
 8008556:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7fe fb0f 	bl	8006b84 <HAL_UARTEx_RxEventCallback>
 8008566:	e002      	b.n	800856e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7f8 fd37 	bl	8000fdc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800856e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008572:	2b00      	cmp	r3, #0
 8008574:	d006      	beq.n	8008584 <UART_RxISR_16BIT_FIFOEN+0x250>
 8008576:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800857a:	f003 0320 	and.w	r3, r3, #32
 800857e:	2b00      	cmp	r3, #0
 8008580:	f47f aefc 	bne.w	800837c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800858a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800858e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008592:	2b00      	cmp	r3, #0
 8008594:	d045      	beq.n	8008622 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800859c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d23e      	bcs.n	8008622 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3308      	adds	r3, #8
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	e853 3f00 	ldrex	r3, [r3]
 80085b2:	623b      	str	r3, [r7, #32]
   return(result);
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085ba:	677b      	str	r3, [r7, #116]	; 0x74
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3308      	adds	r3, #8
 80085c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80085c4:	633a      	str	r2, [r7, #48]	; 0x30
 80085c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085cc:	e841 2300 	strex	r3, r2, [r1]
 80085d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e5      	bne.n	80085a4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a15      	ldr	r2, [pc, #84]	; (8008630 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80085dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f043 0320 	orr.w	r3, r3, #32
 80085f2:	673b      	str	r3, [r7, #112]	; 0x70
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	461a      	mov	r2, r3
 80085fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085fc:	61fb      	str	r3, [r7, #28]
 80085fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	69b9      	ldr	r1, [r7, #24]
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	617b      	str	r3, [r7, #20]
   return(result);
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e6      	bne.n	80085de <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008610:	e007      	b.n	8008622 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	699a      	ldr	r2, [r3, #24]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f042 0208 	orr.w	r2, r2, #8
 8008620:	619a      	str	r2, [r3, #24]
}
 8008622:	bf00      	nop
 8008624:	37a0      	adds	r7, #160	; 0xa0
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	effffffe 	.word	0xeffffffe
 8008630:	08007edb 	.word	0x08007edb

08008634 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800867e:	2b01      	cmp	r3, #1
 8008680:	d101      	bne.n	8008686 <HAL_UARTEx_DisableFifoMode+0x16>
 8008682:	2302      	movs	r3, #2
 8008684:	e027      	b.n	80086d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2224      	movs	r2, #36	; 0x24
 8008692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 0201 	bic.w	r2, r2, #1
 80086ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d101      	bne.n	80086fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086f6:	2302      	movs	r3, #2
 80086f8:	e02d      	b.n	8008756 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2224      	movs	r2, #36	; 0x24
 8008706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0201 	bic.w	r2, r2, #1
 8008720:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f850 	bl	80087dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008772:	2302      	movs	r3, #2
 8008774:	e02d      	b.n	80087d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2224      	movs	r2, #36	; 0x24
 8008782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0201 	bic.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f812 	bl	80087dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d108      	bne.n	80087fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087fc:	e031      	b.n	8008862 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087fe:	2310      	movs	r3, #16
 8008800:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008802:	2310      	movs	r3, #16
 8008804:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	0e5b      	lsrs	r3, r3, #25
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f003 0307 	and.w	r3, r3, #7
 8008814:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	0f5b      	lsrs	r3, r3, #29
 800881e:	b2db      	uxtb	r3, r3
 8008820:	f003 0307 	and.w	r3, r3, #7
 8008824:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	7b3a      	ldrb	r2, [r7, #12]
 800882a:	4911      	ldr	r1, [pc, #68]	; (8008870 <UARTEx_SetNbDataToProcess+0x94>)
 800882c:	5c8a      	ldrb	r2, [r1, r2]
 800882e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008832:	7b3a      	ldrb	r2, [r7, #12]
 8008834:	490f      	ldr	r1, [pc, #60]	; (8008874 <UARTEx_SetNbDataToProcess+0x98>)
 8008836:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008838:	fb93 f3f2 	sdiv	r3, r3, r2
 800883c:	b29a      	uxth	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	7b7a      	ldrb	r2, [r7, #13]
 8008848:	4909      	ldr	r1, [pc, #36]	; (8008870 <UARTEx_SetNbDataToProcess+0x94>)
 800884a:	5c8a      	ldrb	r2, [r1, r2]
 800884c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008850:	7b7a      	ldrb	r2, [r7, #13]
 8008852:	4908      	ldr	r1, [pc, #32]	; (8008874 <UARTEx_SetNbDataToProcess+0x98>)
 8008854:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008856:	fb93 f3f2 	sdiv	r3, r3, r2
 800885a:	b29a      	uxth	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008862:	bf00      	nop
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	0800bc6c 	.word	0x0800bc6c
 8008874:	0800bc74 	.word	0x0800bc74

08008878 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008878:	b084      	sub	sp, #16
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	f107 001c 	add.w	r0, r7, #28
 8008886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	2b01      	cmp	r3, #1
 800888e:	d120      	bne.n	80088d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68da      	ldr	r2, [r3, #12]
 80088a0:	4b2a      	ldr	r3, [pc, #168]	; (800894c <USB_CoreInit+0xd4>)
 80088a2:	4013      	ands	r3, r2
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d105      	bne.n	80088c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 faac 	bl	8008e24 <USB_CoreReset>
 80088cc:	4603      	mov	r3, r0
 80088ce:	73fb      	strb	r3, [r7, #15]
 80088d0:	e01a      	b.n	8008908 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 faa0 	bl	8008e24 <USB_CoreReset>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80088e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d106      	bne.n	80088fc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	639a      	str	r2, [r3, #56]	; 0x38
 80088fa:	e005      	b.n	8008908 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008900:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890a:	2b01      	cmp	r3, #1
 800890c:	d116      	bne.n	800893c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008912:	b29a      	uxth	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800891c:	4b0c      	ldr	r3, [pc, #48]	; (8008950 <USB_CoreInit+0xd8>)
 800891e:	4313      	orrs	r3, r2
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f043 0206 	orr.w	r2, r3, #6
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f043 0220 	orr.w	r2, r3, #32
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800893c:	7bfb      	ldrb	r3, [r7, #15]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008948:	b004      	add	sp, #16
 800894a:	4770      	bx	lr
 800894c:	ffbdffbf 	.word	0xffbdffbf
 8008950:	03ee0000 	.word	0x03ee0000

08008954 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f023 0201 	bic.w	r2, r3, #1
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	460b      	mov	r3, r1
 8008980:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008992:	78fb      	ldrb	r3, [r7, #3]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d115      	bne.n	80089c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089a4:	2001      	movs	r0, #1
 80089a6:	f7f8 ff71 	bl	800188c <HAL_Delay>
      ms++;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3301      	adds	r3, #1
 80089ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fa29 	bl	8008e08 <USB_GetMode>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d01e      	beq.n	80089fa <USB_SetCurrentMode+0x84>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2b31      	cmp	r3, #49	; 0x31
 80089c0:	d9f0      	bls.n	80089a4 <USB_SetCurrentMode+0x2e>
 80089c2:	e01a      	b.n	80089fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80089c4:	78fb      	ldrb	r3, [r7, #3]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d115      	bne.n	80089f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089d6:	2001      	movs	r0, #1
 80089d8:	f7f8 ff58 	bl	800188c <HAL_Delay>
      ms++;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3301      	adds	r3, #1
 80089e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fa10 	bl	8008e08 <USB_GetMode>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <USB_SetCurrentMode+0x84>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b31      	cmp	r3, #49	; 0x31
 80089f2:	d9f0      	bls.n	80089d6 <USB_SetCurrentMode+0x60>
 80089f4:	e001      	b.n	80089fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e005      	b.n	8008a06 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b32      	cmp	r3, #50	; 0x32
 80089fe:	d101      	bne.n	8008a04 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e000      	b.n	8008a06 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
	...

08008a10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a10:	b084      	sub	sp, #16
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b086      	sub	sp, #24
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	613b      	str	r3, [r7, #16]
 8008a2e:	e009      	b.n	8008a44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	3340      	adds	r3, #64	; 0x40
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	3301      	adds	r3, #1
 8008a42:	613b      	str	r3, [r7, #16]
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	2b0e      	cmp	r3, #14
 8008a48:	d9f2      	bls.n	8008a30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d11c      	bne.n	8008a8a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a5e:	f043 0302 	orr.w	r3, r3, #2
 8008a62:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a68:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	e005      	b.n	8008a96 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	680b      	ldr	r3, [r1, #0]
 8008ab4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d10c      	bne.n	8008ad6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d104      	bne.n	8008acc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f965 	bl	8008d94 <USB_SetDevSpeed>
 8008aca:	e008      	b.n	8008ade <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008acc:	2101      	movs	r1, #1
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f960 	bl	8008d94 <USB_SetDevSpeed>
 8008ad4:	e003      	b.n	8008ade <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ad6:	2103      	movs	r1, #3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f95b 	bl	8008d94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ade:	2110      	movs	r1, #16
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f8f3 	bl	8008ccc <USB_FlushTxFifo>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f91f 	bl	8008d34 <USB_FlushRxFifo>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b06:	461a      	mov	r2, r3
 8008b08:	2300      	movs	r3, #0
 8008b0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b12:	461a      	mov	r2, r3
 8008b14:	2300      	movs	r3, #0
 8008b16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1e:	461a      	mov	r2, r3
 8008b20:	2300      	movs	r3, #0
 8008b22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b24:	2300      	movs	r3, #0
 8008b26:	613b      	str	r3, [r7, #16]
 8008b28:	e043      	b.n	8008bb2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b40:	d118      	bne.n	8008b74 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10a      	bne.n	8008b5e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b54:	461a      	mov	r2, r3
 8008b56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	e013      	b.n	8008b86 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	e008      	b.n	8008b86 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b80:	461a      	mov	r2, r3
 8008b82:	2300      	movs	r3, #0
 8008b84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b92:	461a      	mov	r2, r3
 8008b94:	2300      	movs	r3, #0
 8008b96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008baa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	613b      	str	r3, [r7, #16]
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d3b7      	bcc.n	8008b2a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bba:	2300      	movs	r3, #0
 8008bbc:	613b      	str	r3, [r7, #16]
 8008bbe:	e043      	b.n	8008c48 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bd6:	d118      	bne.n	8008c0a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10a      	bne.n	8008bf4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bea:	461a      	mov	r2, r3
 8008bec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	e013      	b.n	8008c1c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c00:	461a      	mov	r2, r3
 8008c02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	e008      	b.n	8008c1c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c16:	461a      	mov	r2, r3
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c28:	461a      	mov	r2, r3
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	3301      	adds	r3, #1
 8008c46:	613b      	str	r3, [r7, #16]
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d3b7      	bcc.n	8008bc0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008c70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d105      	bne.n	8008c84 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	f043 0210 	orr.w	r2, r3, #16
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	699a      	ldr	r2, [r3, #24]
 8008c88:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <USB_DevInit+0x2b4>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d005      	beq.n	8008ca2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	f043 0208 	orr.w	r2, r3, #8
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d105      	bne.n	8008cb4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	699a      	ldr	r2, [r3, #24]
 8008cac:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <USB_DevInit+0x2b8>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cc0:	b004      	add	sp, #16
 8008cc2:	4770      	bx	lr
 8008cc4:	803c3800 	.word	0x803c3800
 8008cc8:	40000004 	.word	0x40000004

08008ccc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4a13      	ldr	r2, [pc, #76]	; (8008d30 <USB_FlushTxFifo+0x64>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d901      	bls.n	8008cec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e01b      	b.n	8008d24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	daf2      	bge.n	8008cda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	019b      	lsls	r3, r3, #6
 8008cfc:	f043 0220 	orr.w	r2, r3, #32
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3301      	adds	r3, #1
 8008d08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4a08      	ldr	r2, [pc, #32]	; (8008d30 <USB_FlushTxFifo+0x64>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d901      	bls.n	8008d16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e006      	b.n	8008d24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f003 0320 	and.w	r3, r3, #32
 8008d1e:	2b20      	cmp	r3, #32
 8008d20:	d0f0      	beq.n	8008d04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr
 8008d30:	00030d40 	.word	0x00030d40

08008d34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3301      	adds	r3, #1
 8008d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	4a11      	ldr	r2, [pc, #68]	; (8008d90 <USB_FlushRxFifo+0x5c>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d901      	bls.n	8008d52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e018      	b.n	8008d84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	daf2      	bge.n	8008d40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2210      	movs	r2, #16
 8008d62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	3301      	adds	r3, #1
 8008d68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	4a08      	ldr	r2, [pc, #32]	; (8008d90 <USB_FlushRxFifo+0x5c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d901      	bls.n	8008d76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e006      	b.n	8008d84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f003 0310 	and.w	r3, r3, #16
 8008d7e:	2b10      	cmp	r3, #16
 8008d80:	d0f0      	beq.n	8008d64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	00030d40 	.word	0x00030d40

08008d94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	68f9      	ldr	r1, [r7, #12]
 8008db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008db4:	4313      	orrs	r3, r2
 8008db6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b085      	sub	sp, #20
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008de0:	f023 0303 	bic.w	r3, r3, #3
 8008de4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008df4:	f043 0302 	orr.w	r3, r3, #2
 8008df8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	f003 0301 	and.w	r3, r3, #1
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3301      	adds	r3, #1
 8008e34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	4a13      	ldr	r2, [pc, #76]	; (8008e88 <USB_CoreReset+0x64>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d901      	bls.n	8008e42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e01b      	b.n	8008e7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	daf2      	bge.n	8008e30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	f043 0201 	orr.w	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4a09      	ldr	r2, [pc, #36]	; (8008e88 <USB_CoreReset+0x64>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d901      	bls.n	8008e6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e006      	b.n	8008e7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d0f0      	beq.n	8008e5a <USB_CoreReset+0x36>

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	00030d40 	.word	0x00030d40

08008e8c <__errno>:
 8008e8c:	4b01      	ldr	r3, [pc, #4]	; (8008e94 <__errno+0x8>)
 8008e8e:	6818      	ldr	r0, [r3, #0]
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	24000010 	.word	0x24000010

08008e98 <__libc_init_array>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	4d0d      	ldr	r5, [pc, #52]	; (8008ed0 <__libc_init_array+0x38>)
 8008e9c:	4c0d      	ldr	r4, [pc, #52]	; (8008ed4 <__libc_init_array+0x3c>)
 8008e9e:	1b64      	subs	r4, r4, r5
 8008ea0:	10a4      	asrs	r4, r4, #2
 8008ea2:	2600      	movs	r6, #0
 8008ea4:	42a6      	cmp	r6, r4
 8008ea6:	d109      	bne.n	8008ebc <__libc_init_array+0x24>
 8008ea8:	4d0b      	ldr	r5, [pc, #44]	; (8008ed8 <__libc_init_array+0x40>)
 8008eaa:	4c0c      	ldr	r4, [pc, #48]	; (8008edc <__libc_init_array+0x44>)
 8008eac:	f002 fe5c 	bl	800bb68 <_init>
 8008eb0:	1b64      	subs	r4, r4, r5
 8008eb2:	10a4      	asrs	r4, r4, #2
 8008eb4:	2600      	movs	r6, #0
 8008eb6:	42a6      	cmp	r6, r4
 8008eb8:	d105      	bne.n	8008ec6 <__libc_init_array+0x2e>
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec0:	4798      	blx	r3
 8008ec2:	3601      	adds	r6, #1
 8008ec4:	e7ee      	b.n	8008ea4 <__libc_init_array+0xc>
 8008ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eca:	4798      	blx	r3
 8008ecc:	3601      	adds	r6, #1
 8008ece:	e7f2      	b.n	8008eb6 <__libc_init_array+0x1e>
 8008ed0:	0800c05c 	.word	0x0800c05c
 8008ed4:	0800c05c 	.word	0x0800c05c
 8008ed8:	0800c05c 	.word	0x0800c05c
 8008edc:	0800c060 	.word	0x0800c060

08008ee0 <memset>:
 8008ee0:	4402      	add	r2, r0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d100      	bne.n	8008eea <memset+0xa>
 8008ee8:	4770      	bx	lr
 8008eea:	f803 1b01 	strb.w	r1, [r3], #1
 8008eee:	e7f9      	b.n	8008ee4 <memset+0x4>

08008ef0 <__cvt>:
 8008ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ef2:	ed2d 8b02 	vpush	{d8}
 8008ef6:	eeb0 8b40 	vmov.f64	d8, d0
 8008efa:	b085      	sub	sp, #20
 8008efc:	4617      	mov	r7, r2
 8008efe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008f00:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008f02:	ee18 2a90 	vmov	r2, s17
 8008f06:	f025 0520 	bic.w	r5, r5, #32
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	bfb6      	itet	lt
 8008f0e:	222d      	movlt	r2, #45	; 0x2d
 8008f10:	2200      	movge	r2, #0
 8008f12:	eeb1 8b40 	vneglt.f64	d8, d0
 8008f16:	2d46      	cmp	r5, #70	; 0x46
 8008f18:	460c      	mov	r4, r1
 8008f1a:	701a      	strb	r2, [r3, #0]
 8008f1c:	d004      	beq.n	8008f28 <__cvt+0x38>
 8008f1e:	2d45      	cmp	r5, #69	; 0x45
 8008f20:	d100      	bne.n	8008f24 <__cvt+0x34>
 8008f22:	3401      	adds	r4, #1
 8008f24:	2102      	movs	r1, #2
 8008f26:	e000      	b.n	8008f2a <__cvt+0x3a>
 8008f28:	2103      	movs	r1, #3
 8008f2a:	ab03      	add	r3, sp, #12
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	ab02      	add	r3, sp, #8
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	4622      	mov	r2, r4
 8008f34:	4633      	mov	r3, r6
 8008f36:	eeb0 0b48 	vmov.f64	d0, d8
 8008f3a:	f000 fcc9 	bl	80098d0 <_dtoa_r>
 8008f3e:	2d47      	cmp	r5, #71	; 0x47
 8008f40:	d101      	bne.n	8008f46 <__cvt+0x56>
 8008f42:	07fb      	lsls	r3, r7, #31
 8008f44:	d51a      	bpl.n	8008f7c <__cvt+0x8c>
 8008f46:	2d46      	cmp	r5, #70	; 0x46
 8008f48:	eb00 0204 	add.w	r2, r0, r4
 8008f4c:	d10c      	bne.n	8008f68 <__cvt+0x78>
 8008f4e:	7803      	ldrb	r3, [r0, #0]
 8008f50:	2b30      	cmp	r3, #48	; 0x30
 8008f52:	d107      	bne.n	8008f64 <__cvt+0x74>
 8008f54:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f5c:	bf1c      	itt	ne
 8008f5e:	f1c4 0401 	rsbne	r4, r4, #1
 8008f62:	6034      	strne	r4, [r6, #0]
 8008f64:	6833      	ldr	r3, [r6, #0]
 8008f66:	441a      	add	r2, r3
 8008f68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f70:	bf08      	it	eq
 8008f72:	9203      	streq	r2, [sp, #12]
 8008f74:	2130      	movs	r1, #48	; 0x30
 8008f76:	9b03      	ldr	r3, [sp, #12]
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d307      	bcc.n	8008f8c <__cvt+0x9c>
 8008f7c:	9b03      	ldr	r3, [sp, #12]
 8008f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f80:	1a1b      	subs	r3, r3, r0
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	b005      	add	sp, #20
 8008f86:	ecbd 8b02 	vpop	{d8}
 8008f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f8c:	1c5c      	adds	r4, r3, #1
 8008f8e:	9403      	str	r4, [sp, #12]
 8008f90:	7019      	strb	r1, [r3, #0]
 8008f92:	e7f0      	b.n	8008f76 <__cvt+0x86>

08008f94 <__exponent>:
 8008f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f96:	4603      	mov	r3, r0
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	bfb8      	it	lt
 8008f9c:	4249      	neglt	r1, r1
 8008f9e:	f803 2b02 	strb.w	r2, [r3], #2
 8008fa2:	bfb4      	ite	lt
 8008fa4:	222d      	movlt	r2, #45	; 0x2d
 8008fa6:	222b      	movge	r2, #43	; 0x2b
 8008fa8:	2909      	cmp	r1, #9
 8008faa:	7042      	strb	r2, [r0, #1]
 8008fac:	dd2a      	ble.n	8009004 <__exponent+0x70>
 8008fae:	f10d 0407 	add.w	r4, sp, #7
 8008fb2:	46a4      	mov	ip, r4
 8008fb4:	270a      	movs	r7, #10
 8008fb6:	46a6      	mov	lr, r4
 8008fb8:	460a      	mov	r2, r1
 8008fba:	fb91 f6f7 	sdiv	r6, r1, r7
 8008fbe:	fb07 1516 	mls	r5, r7, r6, r1
 8008fc2:	3530      	adds	r5, #48	; 0x30
 8008fc4:	2a63      	cmp	r2, #99	; 0x63
 8008fc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008fca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008fce:	4631      	mov	r1, r6
 8008fd0:	dcf1      	bgt.n	8008fb6 <__exponent+0x22>
 8008fd2:	3130      	adds	r1, #48	; 0x30
 8008fd4:	f1ae 0502 	sub.w	r5, lr, #2
 8008fd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008fdc:	1c44      	adds	r4, r0, #1
 8008fde:	4629      	mov	r1, r5
 8008fe0:	4561      	cmp	r1, ip
 8008fe2:	d30a      	bcc.n	8008ffa <__exponent+0x66>
 8008fe4:	f10d 0209 	add.w	r2, sp, #9
 8008fe8:	eba2 020e 	sub.w	r2, r2, lr
 8008fec:	4565      	cmp	r5, ip
 8008fee:	bf88      	it	hi
 8008ff0:	2200      	movhi	r2, #0
 8008ff2:	4413      	add	r3, r2
 8008ff4:	1a18      	subs	r0, r3, r0
 8008ff6:	b003      	add	sp, #12
 8008ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ffe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009002:	e7ed      	b.n	8008fe0 <__exponent+0x4c>
 8009004:	2330      	movs	r3, #48	; 0x30
 8009006:	3130      	adds	r1, #48	; 0x30
 8009008:	7083      	strb	r3, [r0, #2]
 800900a:	70c1      	strb	r1, [r0, #3]
 800900c:	1d03      	adds	r3, r0, #4
 800900e:	e7f1      	b.n	8008ff4 <__exponent+0x60>

08009010 <_printf_float>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	b08b      	sub	sp, #44	; 0x2c
 8009016:	460c      	mov	r4, r1
 8009018:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800901c:	4616      	mov	r6, r2
 800901e:	461f      	mov	r7, r3
 8009020:	4605      	mov	r5, r0
 8009022:	f001 f9c3 	bl	800a3ac <_localeconv_r>
 8009026:	f8d0 b000 	ldr.w	fp, [r0]
 800902a:	4658      	mov	r0, fp
 800902c:	f7f7 f958 	bl	80002e0 <strlen>
 8009030:	2300      	movs	r3, #0
 8009032:	9308      	str	r3, [sp, #32]
 8009034:	f8d8 3000 	ldr.w	r3, [r8]
 8009038:	f894 9018 	ldrb.w	r9, [r4, #24]
 800903c:	6822      	ldr	r2, [r4, #0]
 800903e:	3307      	adds	r3, #7
 8009040:	f023 0307 	bic.w	r3, r3, #7
 8009044:	f103 0108 	add.w	r1, r3, #8
 8009048:	f8c8 1000 	str.w	r1, [r8]
 800904c:	4682      	mov	sl, r0
 800904e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009052:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009056:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80092b8 <_printf_float+0x2a8>
 800905a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800905e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009062:	eeb4 6b47 	vcmp.f64	d6, d7
 8009066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906a:	dd24      	ble.n	80090b6 <_printf_float+0xa6>
 800906c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009074:	d502      	bpl.n	800907c <_printf_float+0x6c>
 8009076:	232d      	movs	r3, #45	; 0x2d
 8009078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800907c:	4b90      	ldr	r3, [pc, #576]	; (80092c0 <_printf_float+0x2b0>)
 800907e:	4891      	ldr	r0, [pc, #580]	; (80092c4 <_printf_float+0x2b4>)
 8009080:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009084:	bf94      	ite	ls
 8009086:	4698      	movls	r8, r3
 8009088:	4680      	movhi	r8, r0
 800908a:	2303      	movs	r3, #3
 800908c:	6123      	str	r3, [r4, #16]
 800908e:	f022 0204 	bic.w	r2, r2, #4
 8009092:	2300      	movs	r3, #0
 8009094:	6022      	str	r2, [r4, #0]
 8009096:	9304      	str	r3, [sp, #16]
 8009098:	9700      	str	r7, [sp, #0]
 800909a:	4633      	mov	r3, r6
 800909c:	aa09      	add	r2, sp, #36	; 0x24
 800909e:	4621      	mov	r1, r4
 80090a0:	4628      	mov	r0, r5
 80090a2:	f000 f9d3 	bl	800944c <_printf_common>
 80090a6:	3001      	adds	r0, #1
 80090a8:	f040 808a 	bne.w	80091c0 <_printf_float+0x1b0>
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295
 80090b0:	b00b      	add	sp, #44	; 0x2c
 80090b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b6:	eeb4 0b40 	vcmp.f64	d0, d0
 80090ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090be:	d709      	bvc.n	80090d4 <_printf_float+0xc4>
 80090c0:	ee10 3a90 	vmov	r3, s1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	bfbc      	itt	lt
 80090c8:	232d      	movlt	r3, #45	; 0x2d
 80090ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090ce:	487e      	ldr	r0, [pc, #504]	; (80092c8 <_printf_float+0x2b8>)
 80090d0:	4b7e      	ldr	r3, [pc, #504]	; (80092cc <_printf_float+0x2bc>)
 80090d2:	e7d5      	b.n	8009080 <_printf_float+0x70>
 80090d4:	6863      	ldr	r3, [r4, #4]
 80090d6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80090da:	9104      	str	r1, [sp, #16]
 80090dc:	1c59      	adds	r1, r3, #1
 80090de:	d13c      	bne.n	800915a <_printf_float+0x14a>
 80090e0:	2306      	movs	r3, #6
 80090e2:	6063      	str	r3, [r4, #4]
 80090e4:	2300      	movs	r3, #0
 80090e6:	9303      	str	r3, [sp, #12]
 80090e8:	ab08      	add	r3, sp, #32
 80090ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80090ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090f2:	ab07      	add	r3, sp, #28
 80090f4:	6861      	ldr	r1, [r4, #4]
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	6022      	str	r2, [r4, #0]
 80090fa:	f10d 031b 	add.w	r3, sp, #27
 80090fe:	4628      	mov	r0, r5
 8009100:	f7ff fef6 	bl	8008ef0 <__cvt>
 8009104:	9b04      	ldr	r3, [sp, #16]
 8009106:	9907      	ldr	r1, [sp, #28]
 8009108:	2b47      	cmp	r3, #71	; 0x47
 800910a:	4680      	mov	r8, r0
 800910c:	d108      	bne.n	8009120 <_printf_float+0x110>
 800910e:	1cc8      	adds	r0, r1, #3
 8009110:	db02      	blt.n	8009118 <_printf_float+0x108>
 8009112:	6863      	ldr	r3, [r4, #4]
 8009114:	4299      	cmp	r1, r3
 8009116:	dd41      	ble.n	800919c <_printf_float+0x18c>
 8009118:	f1a9 0902 	sub.w	r9, r9, #2
 800911c:	fa5f f989 	uxtb.w	r9, r9
 8009120:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009124:	d820      	bhi.n	8009168 <_printf_float+0x158>
 8009126:	3901      	subs	r1, #1
 8009128:	464a      	mov	r2, r9
 800912a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800912e:	9107      	str	r1, [sp, #28]
 8009130:	f7ff ff30 	bl	8008f94 <__exponent>
 8009134:	9a08      	ldr	r2, [sp, #32]
 8009136:	9004      	str	r0, [sp, #16]
 8009138:	1813      	adds	r3, r2, r0
 800913a:	2a01      	cmp	r2, #1
 800913c:	6123      	str	r3, [r4, #16]
 800913e:	dc02      	bgt.n	8009146 <_printf_float+0x136>
 8009140:	6822      	ldr	r2, [r4, #0]
 8009142:	07d2      	lsls	r2, r2, #31
 8009144:	d501      	bpl.n	800914a <_printf_float+0x13a>
 8009146:	3301      	adds	r3, #1
 8009148:	6123      	str	r3, [r4, #16]
 800914a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d0a2      	beq.n	8009098 <_printf_float+0x88>
 8009152:	232d      	movs	r3, #45	; 0x2d
 8009154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009158:	e79e      	b.n	8009098 <_printf_float+0x88>
 800915a:	9904      	ldr	r1, [sp, #16]
 800915c:	2947      	cmp	r1, #71	; 0x47
 800915e:	d1c1      	bne.n	80090e4 <_printf_float+0xd4>
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1bf      	bne.n	80090e4 <_printf_float+0xd4>
 8009164:	2301      	movs	r3, #1
 8009166:	e7bc      	b.n	80090e2 <_printf_float+0xd2>
 8009168:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800916c:	d118      	bne.n	80091a0 <_printf_float+0x190>
 800916e:	2900      	cmp	r1, #0
 8009170:	6863      	ldr	r3, [r4, #4]
 8009172:	dd0b      	ble.n	800918c <_printf_float+0x17c>
 8009174:	6121      	str	r1, [r4, #16]
 8009176:	b913      	cbnz	r3, 800917e <_printf_float+0x16e>
 8009178:	6822      	ldr	r2, [r4, #0]
 800917a:	07d0      	lsls	r0, r2, #31
 800917c:	d502      	bpl.n	8009184 <_printf_float+0x174>
 800917e:	3301      	adds	r3, #1
 8009180:	440b      	add	r3, r1
 8009182:	6123      	str	r3, [r4, #16]
 8009184:	2300      	movs	r3, #0
 8009186:	65a1      	str	r1, [r4, #88]	; 0x58
 8009188:	9304      	str	r3, [sp, #16]
 800918a:	e7de      	b.n	800914a <_printf_float+0x13a>
 800918c:	b913      	cbnz	r3, 8009194 <_printf_float+0x184>
 800918e:	6822      	ldr	r2, [r4, #0]
 8009190:	07d2      	lsls	r2, r2, #31
 8009192:	d501      	bpl.n	8009198 <_printf_float+0x188>
 8009194:	3302      	adds	r3, #2
 8009196:	e7f4      	b.n	8009182 <_printf_float+0x172>
 8009198:	2301      	movs	r3, #1
 800919a:	e7f2      	b.n	8009182 <_printf_float+0x172>
 800919c:	f04f 0967 	mov.w	r9, #103	; 0x67
 80091a0:	9b08      	ldr	r3, [sp, #32]
 80091a2:	4299      	cmp	r1, r3
 80091a4:	db05      	blt.n	80091b2 <_printf_float+0x1a2>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	6121      	str	r1, [r4, #16]
 80091aa:	07d8      	lsls	r0, r3, #31
 80091ac:	d5ea      	bpl.n	8009184 <_printf_float+0x174>
 80091ae:	1c4b      	adds	r3, r1, #1
 80091b0:	e7e7      	b.n	8009182 <_printf_float+0x172>
 80091b2:	2900      	cmp	r1, #0
 80091b4:	bfd4      	ite	le
 80091b6:	f1c1 0202 	rsble	r2, r1, #2
 80091ba:	2201      	movgt	r2, #1
 80091bc:	4413      	add	r3, r2
 80091be:	e7e0      	b.n	8009182 <_printf_float+0x172>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	055a      	lsls	r2, r3, #21
 80091c4:	d407      	bmi.n	80091d6 <_printf_float+0x1c6>
 80091c6:	6923      	ldr	r3, [r4, #16]
 80091c8:	4642      	mov	r2, r8
 80091ca:	4631      	mov	r1, r6
 80091cc:	4628      	mov	r0, r5
 80091ce:	47b8      	blx	r7
 80091d0:	3001      	adds	r0, #1
 80091d2:	d12a      	bne.n	800922a <_printf_float+0x21a>
 80091d4:	e76a      	b.n	80090ac <_printf_float+0x9c>
 80091d6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80091da:	f240 80e2 	bls.w	80093a2 <_printf_float+0x392>
 80091de:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80091e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ea:	d133      	bne.n	8009254 <_printf_float+0x244>
 80091ec:	4a38      	ldr	r2, [pc, #224]	; (80092d0 <_printf_float+0x2c0>)
 80091ee:	2301      	movs	r3, #1
 80091f0:	4631      	mov	r1, r6
 80091f2:	4628      	mov	r0, r5
 80091f4:	47b8      	blx	r7
 80091f6:	3001      	adds	r0, #1
 80091f8:	f43f af58 	beq.w	80090ac <_printf_float+0x9c>
 80091fc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009200:	429a      	cmp	r2, r3
 8009202:	db02      	blt.n	800920a <_printf_float+0x1fa>
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	07d8      	lsls	r0, r3, #31
 8009208:	d50f      	bpl.n	800922a <_printf_float+0x21a>
 800920a:	4653      	mov	r3, sl
 800920c:	465a      	mov	r2, fp
 800920e:	4631      	mov	r1, r6
 8009210:	4628      	mov	r0, r5
 8009212:	47b8      	blx	r7
 8009214:	3001      	adds	r0, #1
 8009216:	f43f af49 	beq.w	80090ac <_printf_float+0x9c>
 800921a:	f04f 0800 	mov.w	r8, #0
 800921e:	f104 091a 	add.w	r9, r4, #26
 8009222:	9b08      	ldr	r3, [sp, #32]
 8009224:	3b01      	subs	r3, #1
 8009226:	4543      	cmp	r3, r8
 8009228:	dc09      	bgt.n	800923e <_printf_float+0x22e>
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	079b      	lsls	r3, r3, #30
 800922e:	f100 8108 	bmi.w	8009442 <_printf_float+0x432>
 8009232:	68e0      	ldr	r0, [r4, #12]
 8009234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009236:	4298      	cmp	r0, r3
 8009238:	bfb8      	it	lt
 800923a:	4618      	movlt	r0, r3
 800923c:	e738      	b.n	80090b0 <_printf_float+0xa0>
 800923e:	2301      	movs	r3, #1
 8009240:	464a      	mov	r2, r9
 8009242:	4631      	mov	r1, r6
 8009244:	4628      	mov	r0, r5
 8009246:	47b8      	blx	r7
 8009248:	3001      	adds	r0, #1
 800924a:	f43f af2f 	beq.w	80090ac <_printf_float+0x9c>
 800924e:	f108 0801 	add.w	r8, r8, #1
 8009252:	e7e6      	b.n	8009222 <_printf_float+0x212>
 8009254:	9b07      	ldr	r3, [sp, #28]
 8009256:	2b00      	cmp	r3, #0
 8009258:	dc3c      	bgt.n	80092d4 <_printf_float+0x2c4>
 800925a:	4a1d      	ldr	r2, [pc, #116]	; (80092d0 <_printf_float+0x2c0>)
 800925c:	2301      	movs	r3, #1
 800925e:	4631      	mov	r1, r6
 8009260:	4628      	mov	r0, r5
 8009262:	47b8      	blx	r7
 8009264:	3001      	adds	r0, #1
 8009266:	f43f af21 	beq.w	80090ac <_printf_float+0x9c>
 800926a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800926e:	4313      	orrs	r3, r2
 8009270:	d102      	bne.n	8009278 <_printf_float+0x268>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	07d9      	lsls	r1, r3, #31
 8009276:	d5d8      	bpl.n	800922a <_printf_float+0x21a>
 8009278:	4653      	mov	r3, sl
 800927a:	465a      	mov	r2, fp
 800927c:	4631      	mov	r1, r6
 800927e:	4628      	mov	r0, r5
 8009280:	47b8      	blx	r7
 8009282:	3001      	adds	r0, #1
 8009284:	f43f af12 	beq.w	80090ac <_printf_float+0x9c>
 8009288:	f04f 0900 	mov.w	r9, #0
 800928c:	f104 0a1a 	add.w	sl, r4, #26
 8009290:	9b07      	ldr	r3, [sp, #28]
 8009292:	425b      	negs	r3, r3
 8009294:	454b      	cmp	r3, r9
 8009296:	dc01      	bgt.n	800929c <_printf_float+0x28c>
 8009298:	9b08      	ldr	r3, [sp, #32]
 800929a:	e795      	b.n	80091c8 <_printf_float+0x1b8>
 800929c:	2301      	movs	r3, #1
 800929e:	4652      	mov	r2, sl
 80092a0:	4631      	mov	r1, r6
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b8      	blx	r7
 80092a6:	3001      	adds	r0, #1
 80092a8:	f43f af00 	beq.w	80090ac <_printf_float+0x9c>
 80092ac:	f109 0901 	add.w	r9, r9, #1
 80092b0:	e7ee      	b.n	8009290 <_printf_float+0x280>
 80092b2:	bf00      	nop
 80092b4:	f3af 8000 	nop.w
 80092b8:	ffffffff 	.word	0xffffffff
 80092bc:	7fefffff 	.word	0x7fefffff
 80092c0:	0800bc80 	.word	0x0800bc80
 80092c4:	0800bc84 	.word	0x0800bc84
 80092c8:	0800bc8c 	.word	0x0800bc8c
 80092cc:	0800bc88 	.word	0x0800bc88
 80092d0:	0800bc90 	.word	0x0800bc90
 80092d4:	9a08      	ldr	r2, [sp, #32]
 80092d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092d8:	429a      	cmp	r2, r3
 80092da:	bfa8      	it	ge
 80092dc:	461a      	movge	r2, r3
 80092de:	2a00      	cmp	r2, #0
 80092e0:	4691      	mov	r9, r2
 80092e2:	dc38      	bgt.n	8009356 <_printf_float+0x346>
 80092e4:	2300      	movs	r3, #0
 80092e6:	9305      	str	r3, [sp, #20]
 80092e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092ec:	f104 021a 	add.w	r2, r4, #26
 80092f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092f2:	9905      	ldr	r1, [sp, #20]
 80092f4:	9304      	str	r3, [sp, #16]
 80092f6:	eba3 0309 	sub.w	r3, r3, r9
 80092fa:	428b      	cmp	r3, r1
 80092fc:	dc33      	bgt.n	8009366 <_printf_float+0x356>
 80092fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009302:	429a      	cmp	r2, r3
 8009304:	db3c      	blt.n	8009380 <_printf_float+0x370>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	07da      	lsls	r2, r3, #31
 800930a:	d439      	bmi.n	8009380 <_printf_float+0x370>
 800930c:	9b08      	ldr	r3, [sp, #32]
 800930e:	9a04      	ldr	r2, [sp, #16]
 8009310:	9907      	ldr	r1, [sp, #28]
 8009312:	1a9a      	subs	r2, r3, r2
 8009314:	eba3 0901 	sub.w	r9, r3, r1
 8009318:	4591      	cmp	r9, r2
 800931a:	bfa8      	it	ge
 800931c:	4691      	movge	r9, r2
 800931e:	f1b9 0f00 	cmp.w	r9, #0
 8009322:	dc35      	bgt.n	8009390 <_printf_float+0x380>
 8009324:	f04f 0800 	mov.w	r8, #0
 8009328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800932c:	f104 0a1a 	add.w	sl, r4, #26
 8009330:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009334:	1a9b      	subs	r3, r3, r2
 8009336:	eba3 0309 	sub.w	r3, r3, r9
 800933a:	4543      	cmp	r3, r8
 800933c:	f77f af75 	ble.w	800922a <_printf_float+0x21a>
 8009340:	2301      	movs	r3, #1
 8009342:	4652      	mov	r2, sl
 8009344:	4631      	mov	r1, r6
 8009346:	4628      	mov	r0, r5
 8009348:	47b8      	blx	r7
 800934a:	3001      	adds	r0, #1
 800934c:	f43f aeae 	beq.w	80090ac <_printf_float+0x9c>
 8009350:	f108 0801 	add.w	r8, r8, #1
 8009354:	e7ec      	b.n	8009330 <_printf_float+0x320>
 8009356:	4613      	mov	r3, r2
 8009358:	4631      	mov	r1, r6
 800935a:	4642      	mov	r2, r8
 800935c:	4628      	mov	r0, r5
 800935e:	47b8      	blx	r7
 8009360:	3001      	adds	r0, #1
 8009362:	d1bf      	bne.n	80092e4 <_printf_float+0x2d4>
 8009364:	e6a2      	b.n	80090ac <_printf_float+0x9c>
 8009366:	2301      	movs	r3, #1
 8009368:	4631      	mov	r1, r6
 800936a:	4628      	mov	r0, r5
 800936c:	9204      	str	r2, [sp, #16]
 800936e:	47b8      	blx	r7
 8009370:	3001      	adds	r0, #1
 8009372:	f43f ae9b 	beq.w	80090ac <_printf_float+0x9c>
 8009376:	9b05      	ldr	r3, [sp, #20]
 8009378:	9a04      	ldr	r2, [sp, #16]
 800937a:	3301      	adds	r3, #1
 800937c:	9305      	str	r3, [sp, #20]
 800937e:	e7b7      	b.n	80092f0 <_printf_float+0x2e0>
 8009380:	4653      	mov	r3, sl
 8009382:	465a      	mov	r2, fp
 8009384:	4631      	mov	r1, r6
 8009386:	4628      	mov	r0, r5
 8009388:	47b8      	blx	r7
 800938a:	3001      	adds	r0, #1
 800938c:	d1be      	bne.n	800930c <_printf_float+0x2fc>
 800938e:	e68d      	b.n	80090ac <_printf_float+0x9c>
 8009390:	9a04      	ldr	r2, [sp, #16]
 8009392:	464b      	mov	r3, r9
 8009394:	4442      	add	r2, r8
 8009396:	4631      	mov	r1, r6
 8009398:	4628      	mov	r0, r5
 800939a:	47b8      	blx	r7
 800939c:	3001      	adds	r0, #1
 800939e:	d1c1      	bne.n	8009324 <_printf_float+0x314>
 80093a0:	e684      	b.n	80090ac <_printf_float+0x9c>
 80093a2:	9a08      	ldr	r2, [sp, #32]
 80093a4:	2a01      	cmp	r2, #1
 80093a6:	dc01      	bgt.n	80093ac <_printf_float+0x39c>
 80093a8:	07db      	lsls	r3, r3, #31
 80093aa:	d537      	bpl.n	800941c <_printf_float+0x40c>
 80093ac:	2301      	movs	r3, #1
 80093ae:	4642      	mov	r2, r8
 80093b0:	4631      	mov	r1, r6
 80093b2:	4628      	mov	r0, r5
 80093b4:	47b8      	blx	r7
 80093b6:	3001      	adds	r0, #1
 80093b8:	f43f ae78 	beq.w	80090ac <_printf_float+0x9c>
 80093bc:	4653      	mov	r3, sl
 80093be:	465a      	mov	r2, fp
 80093c0:	4631      	mov	r1, r6
 80093c2:	4628      	mov	r0, r5
 80093c4:	47b8      	blx	r7
 80093c6:	3001      	adds	r0, #1
 80093c8:	f43f ae70 	beq.w	80090ac <_printf_float+0x9c>
 80093cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80093d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80093d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d8:	d01b      	beq.n	8009412 <_printf_float+0x402>
 80093da:	9b08      	ldr	r3, [sp, #32]
 80093dc:	f108 0201 	add.w	r2, r8, #1
 80093e0:	3b01      	subs	r3, #1
 80093e2:	4631      	mov	r1, r6
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b8      	blx	r7
 80093e8:	3001      	adds	r0, #1
 80093ea:	d10e      	bne.n	800940a <_printf_float+0x3fa>
 80093ec:	e65e      	b.n	80090ac <_printf_float+0x9c>
 80093ee:	2301      	movs	r3, #1
 80093f0:	464a      	mov	r2, r9
 80093f2:	4631      	mov	r1, r6
 80093f4:	4628      	mov	r0, r5
 80093f6:	47b8      	blx	r7
 80093f8:	3001      	adds	r0, #1
 80093fa:	f43f ae57 	beq.w	80090ac <_printf_float+0x9c>
 80093fe:	f108 0801 	add.w	r8, r8, #1
 8009402:	9b08      	ldr	r3, [sp, #32]
 8009404:	3b01      	subs	r3, #1
 8009406:	4543      	cmp	r3, r8
 8009408:	dcf1      	bgt.n	80093ee <_printf_float+0x3de>
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009410:	e6db      	b.n	80091ca <_printf_float+0x1ba>
 8009412:	f04f 0800 	mov.w	r8, #0
 8009416:	f104 091a 	add.w	r9, r4, #26
 800941a:	e7f2      	b.n	8009402 <_printf_float+0x3f2>
 800941c:	2301      	movs	r3, #1
 800941e:	4642      	mov	r2, r8
 8009420:	e7df      	b.n	80093e2 <_printf_float+0x3d2>
 8009422:	2301      	movs	r3, #1
 8009424:	464a      	mov	r2, r9
 8009426:	4631      	mov	r1, r6
 8009428:	4628      	mov	r0, r5
 800942a:	47b8      	blx	r7
 800942c:	3001      	adds	r0, #1
 800942e:	f43f ae3d 	beq.w	80090ac <_printf_float+0x9c>
 8009432:	f108 0801 	add.w	r8, r8, #1
 8009436:	68e3      	ldr	r3, [r4, #12]
 8009438:	9909      	ldr	r1, [sp, #36]	; 0x24
 800943a:	1a5b      	subs	r3, r3, r1
 800943c:	4543      	cmp	r3, r8
 800943e:	dcf0      	bgt.n	8009422 <_printf_float+0x412>
 8009440:	e6f7      	b.n	8009232 <_printf_float+0x222>
 8009442:	f04f 0800 	mov.w	r8, #0
 8009446:	f104 0919 	add.w	r9, r4, #25
 800944a:	e7f4      	b.n	8009436 <_printf_float+0x426>

0800944c <_printf_common>:
 800944c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009450:	4616      	mov	r6, r2
 8009452:	4699      	mov	r9, r3
 8009454:	688a      	ldr	r2, [r1, #8]
 8009456:	690b      	ldr	r3, [r1, #16]
 8009458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800945c:	4293      	cmp	r3, r2
 800945e:	bfb8      	it	lt
 8009460:	4613      	movlt	r3, r2
 8009462:	6033      	str	r3, [r6, #0]
 8009464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009468:	4607      	mov	r7, r0
 800946a:	460c      	mov	r4, r1
 800946c:	b10a      	cbz	r2, 8009472 <_printf_common+0x26>
 800946e:	3301      	adds	r3, #1
 8009470:	6033      	str	r3, [r6, #0]
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	0699      	lsls	r1, r3, #26
 8009476:	bf42      	ittt	mi
 8009478:	6833      	ldrmi	r3, [r6, #0]
 800947a:	3302      	addmi	r3, #2
 800947c:	6033      	strmi	r3, [r6, #0]
 800947e:	6825      	ldr	r5, [r4, #0]
 8009480:	f015 0506 	ands.w	r5, r5, #6
 8009484:	d106      	bne.n	8009494 <_printf_common+0x48>
 8009486:	f104 0a19 	add.w	sl, r4, #25
 800948a:	68e3      	ldr	r3, [r4, #12]
 800948c:	6832      	ldr	r2, [r6, #0]
 800948e:	1a9b      	subs	r3, r3, r2
 8009490:	42ab      	cmp	r3, r5
 8009492:	dc26      	bgt.n	80094e2 <_printf_common+0x96>
 8009494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009498:	1e13      	subs	r3, r2, #0
 800949a:	6822      	ldr	r2, [r4, #0]
 800949c:	bf18      	it	ne
 800949e:	2301      	movne	r3, #1
 80094a0:	0692      	lsls	r2, r2, #26
 80094a2:	d42b      	bmi.n	80094fc <_printf_common+0xb0>
 80094a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094a8:	4649      	mov	r1, r9
 80094aa:	4638      	mov	r0, r7
 80094ac:	47c0      	blx	r8
 80094ae:	3001      	adds	r0, #1
 80094b0:	d01e      	beq.n	80094f0 <_printf_common+0xa4>
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	68e5      	ldr	r5, [r4, #12]
 80094b6:	6832      	ldr	r2, [r6, #0]
 80094b8:	f003 0306 	and.w	r3, r3, #6
 80094bc:	2b04      	cmp	r3, #4
 80094be:	bf08      	it	eq
 80094c0:	1aad      	subeq	r5, r5, r2
 80094c2:	68a3      	ldr	r3, [r4, #8]
 80094c4:	6922      	ldr	r2, [r4, #16]
 80094c6:	bf0c      	ite	eq
 80094c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094cc:	2500      	movne	r5, #0
 80094ce:	4293      	cmp	r3, r2
 80094d0:	bfc4      	itt	gt
 80094d2:	1a9b      	subgt	r3, r3, r2
 80094d4:	18ed      	addgt	r5, r5, r3
 80094d6:	2600      	movs	r6, #0
 80094d8:	341a      	adds	r4, #26
 80094da:	42b5      	cmp	r5, r6
 80094dc:	d11a      	bne.n	8009514 <_printf_common+0xc8>
 80094de:	2000      	movs	r0, #0
 80094e0:	e008      	b.n	80094f4 <_printf_common+0xa8>
 80094e2:	2301      	movs	r3, #1
 80094e4:	4652      	mov	r2, sl
 80094e6:	4649      	mov	r1, r9
 80094e8:	4638      	mov	r0, r7
 80094ea:	47c0      	blx	r8
 80094ec:	3001      	adds	r0, #1
 80094ee:	d103      	bne.n	80094f8 <_printf_common+0xac>
 80094f0:	f04f 30ff 	mov.w	r0, #4294967295
 80094f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f8:	3501      	adds	r5, #1
 80094fa:	e7c6      	b.n	800948a <_printf_common+0x3e>
 80094fc:	18e1      	adds	r1, r4, r3
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	2030      	movs	r0, #48	; 0x30
 8009502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009506:	4422      	add	r2, r4
 8009508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800950c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009510:	3302      	adds	r3, #2
 8009512:	e7c7      	b.n	80094a4 <_printf_common+0x58>
 8009514:	2301      	movs	r3, #1
 8009516:	4622      	mov	r2, r4
 8009518:	4649      	mov	r1, r9
 800951a:	4638      	mov	r0, r7
 800951c:	47c0      	blx	r8
 800951e:	3001      	adds	r0, #1
 8009520:	d0e6      	beq.n	80094f0 <_printf_common+0xa4>
 8009522:	3601      	adds	r6, #1
 8009524:	e7d9      	b.n	80094da <_printf_common+0x8e>
	...

08009528 <_printf_i>:
 8009528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800952c:	7e0f      	ldrb	r7, [r1, #24]
 800952e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009530:	2f78      	cmp	r7, #120	; 0x78
 8009532:	4691      	mov	r9, r2
 8009534:	4680      	mov	r8, r0
 8009536:	460c      	mov	r4, r1
 8009538:	469a      	mov	sl, r3
 800953a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800953e:	d807      	bhi.n	8009550 <_printf_i+0x28>
 8009540:	2f62      	cmp	r7, #98	; 0x62
 8009542:	d80a      	bhi.n	800955a <_printf_i+0x32>
 8009544:	2f00      	cmp	r7, #0
 8009546:	f000 80d8 	beq.w	80096fa <_printf_i+0x1d2>
 800954a:	2f58      	cmp	r7, #88	; 0x58
 800954c:	f000 80a3 	beq.w	8009696 <_printf_i+0x16e>
 8009550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009558:	e03a      	b.n	80095d0 <_printf_i+0xa8>
 800955a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800955e:	2b15      	cmp	r3, #21
 8009560:	d8f6      	bhi.n	8009550 <_printf_i+0x28>
 8009562:	a101      	add	r1, pc, #4	; (adr r1, 8009568 <_printf_i+0x40>)
 8009564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009568:	080095c1 	.word	0x080095c1
 800956c:	080095d5 	.word	0x080095d5
 8009570:	08009551 	.word	0x08009551
 8009574:	08009551 	.word	0x08009551
 8009578:	08009551 	.word	0x08009551
 800957c:	08009551 	.word	0x08009551
 8009580:	080095d5 	.word	0x080095d5
 8009584:	08009551 	.word	0x08009551
 8009588:	08009551 	.word	0x08009551
 800958c:	08009551 	.word	0x08009551
 8009590:	08009551 	.word	0x08009551
 8009594:	080096e1 	.word	0x080096e1
 8009598:	08009605 	.word	0x08009605
 800959c:	080096c3 	.word	0x080096c3
 80095a0:	08009551 	.word	0x08009551
 80095a4:	08009551 	.word	0x08009551
 80095a8:	08009703 	.word	0x08009703
 80095ac:	08009551 	.word	0x08009551
 80095b0:	08009605 	.word	0x08009605
 80095b4:	08009551 	.word	0x08009551
 80095b8:	08009551 	.word	0x08009551
 80095bc:	080096cb 	.word	0x080096cb
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	1d1a      	adds	r2, r3, #4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	602a      	str	r2, [r5, #0]
 80095c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095d0:	2301      	movs	r3, #1
 80095d2:	e0a3      	b.n	800971c <_printf_i+0x1f4>
 80095d4:	6820      	ldr	r0, [r4, #0]
 80095d6:	6829      	ldr	r1, [r5, #0]
 80095d8:	0606      	lsls	r6, r0, #24
 80095da:	f101 0304 	add.w	r3, r1, #4
 80095de:	d50a      	bpl.n	80095f6 <_printf_i+0xce>
 80095e0:	680e      	ldr	r6, [r1, #0]
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	2e00      	cmp	r6, #0
 80095e6:	da03      	bge.n	80095f0 <_printf_i+0xc8>
 80095e8:	232d      	movs	r3, #45	; 0x2d
 80095ea:	4276      	negs	r6, r6
 80095ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f0:	485e      	ldr	r0, [pc, #376]	; (800976c <_printf_i+0x244>)
 80095f2:	230a      	movs	r3, #10
 80095f4:	e019      	b.n	800962a <_printf_i+0x102>
 80095f6:	680e      	ldr	r6, [r1, #0]
 80095f8:	602b      	str	r3, [r5, #0]
 80095fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095fe:	bf18      	it	ne
 8009600:	b236      	sxthne	r6, r6
 8009602:	e7ef      	b.n	80095e4 <_printf_i+0xbc>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	6820      	ldr	r0, [r4, #0]
 8009608:	1d19      	adds	r1, r3, #4
 800960a:	6029      	str	r1, [r5, #0]
 800960c:	0601      	lsls	r1, r0, #24
 800960e:	d501      	bpl.n	8009614 <_printf_i+0xec>
 8009610:	681e      	ldr	r6, [r3, #0]
 8009612:	e002      	b.n	800961a <_printf_i+0xf2>
 8009614:	0646      	lsls	r6, r0, #25
 8009616:	d5fb      	bpl.n	8009610 <_printf_i+0xe8>
 8009618:	881e      	ldrh	r6, [r3, #0]
 800961a:	4854      	ldr	r0, [pc, #336]	; (800976c <_printf_i+0x244>)
 800961c:	2f6f      	cmp	r7, #111	; 0x6f
 800961e:	bf0c      	ite	eq
 8009620:	2308      	moveq	r3, #8
 8009622:	230a      	movne	r3, #10
 8009624:	2100      	movs	r1, #0
 8009626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800962a:	6865      	ldr	r5, [r4, #4]
 800962c:	60a5      	str	r5, [r4, #8]
 800962e:	2d00      	cmp	r5, #0
 8009630:	bfa2      	ittt	ge
 8009632:	6821      	ldrge	r1, [r4, #0]
 8009634:	f021 0104 	bicge.w	r1, r1, #4
 8009638:	6021      	strge	r1, [r4, #0]
 800963a:	b90e      	cbnz	r6, 8009640 <_printf_i+0x118>
 800963c:	2d00      	cmp	r5, #0
 800963e:	d04d      	beq.n	80096dc <_printf_i+0x1b4>
 8009640:	4615      	mov	r5, r2
 8009642:	fbb6 f1f3 	udiv	r1, r6, r3
 8009646:	fb03 6711 	mls	r7, r3, r1, r6
 800964a:	5dc7      	ldrb	r7, [r0, r7]
 800964c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009650:	4637      	mov	r7, r6
 8009652:	42bb      	cmp	r3, r7
 8009654:	460e      	mov	r6, r1
 8009656:	d9f4      	bls.n	8009642 <_printf_i+0x11a>
 8009658:	2b08      	cmp	r3, #8
 800965a:	d10b      	bne.n	8009674 <_printf_i+0x14c>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	07de      	lsls	r6, r3, #31
 8009660:	d508      	bpl.n	8009674 <_printf_i+0x14c>
 8009662:	6923      	ldr	r3, [r4, #16]
 8009664:	6861      	ldr	r1, [r4, #4]
 8009666:	4299      	cmp	r1, r3
 8009668:	bfde      	ittt	le
 800966a:	2330      	movle	r3, #48	; 0x30
 800966c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009670:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009674:	1b52      	subs	r2, r2, r5
 8009676:	6122      	str	r2, [r4, #16]
 8009678:	f8cd a000 	str.w	sl, [sp]
 800967c:	464b      	mov	r3, r9
 800967e:	aa03      	add	r2, sp, #12
 8009680:	4621      	mov	r1, r4
 8009682:	4640      	mov	r0, r8
 8009684:	f7ff fee2 	bl	800944c <_printf_common>
 8009688:	3001      	adds	r0, #1
 800968a:	d14c      	bne.n	8009726 <_printf_i+0x1fe>
 800968c:	f04f 30ff 	mov.w	r0, #4294967295
 8009690:	b004      	add	sp, #16
 8009692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009696:	4835      	ldr	r0, [pc, #212]	; (800976c <_printf_i+0x244>)
 8009698:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800969c:	6829      	ldr	r1, [r5, #0]
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80096a4:	6029      	str	r1, [r5, #0]
 80096a6:	061d      	lsls	r5, r3, #24
 80096a8:	d514      	bpl.n	80096d4 <_printf_i+0x1ac>
 80096aa:	07df      	lsls	r7, r3, #31
 80096ac:	bf44      	itt	mi
 80096ae:	f043 0320 	orrmi.w	r3, r3, #32
 80096b2:	6023      	strmi	r3, [r4, #0]
 80096b4:	b91e      	cbnz	r6, 80096be <_printf_i+0x196>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	f023 0320 	bic.w	r3, r3, #32
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	2310      	movs	r3, #16
 80096c0:	e7b0      	b.n	8009624 <_printf_i+0xfc>
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	f043 0320 	orr.w	r3, r3, #32
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	2378      	movs	r3, #120	; 0x78
 80096cc:	4828      	ldr	r0, [pc, #160]	; (8009770 <_printf_i+0x248>)
 80096ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096d2:	e7e3      	b.n	800969c <_printf_i+0x174>
 80096d4:	0659      	lsls	r1, r3, #25
 80096d6:	bf48      	it	mi
 80096d8:	b2b6      	uxthmi	r6, r6
 80096da:	e7e6      	b.n	80096aa <_printf_i+0x182>
 80096dc:	4615      	mov	r5, r2
 80096de:	e7bb      	b.n	8009658 <_printf_i+0x130>
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	6826      	ldr	r6, [r4, #0]
 80096e4:	6961      	ldr	r1, [r4, #20]
 80096e6:	1d18      	adds	r0, r3, #4
 80096e8:	6028      	str	r0, [r5, #0]
 80096ea:	0635      	lsls	r5, r6, #24
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	d501      	bpl.n	80096f4 <_printf_i+0x1cc>
 80096f0:	6019      	str	r1, [r3, #0]
 80096f2:	e002      	b.n	80096fa <_printf_i+0x1d2>
 80096f4:	0670      	lsls	r0, r6, #25
 80096f6:	d5fb      	bpl.n	80096f0 <_printf_i+0x1c8>
 80096f8:	8019      	strh	r1, [r3, #0]
 80096fa:	2300      	movs	r3, #0
 80096fc:	6123      	str	r3, [r4, #16]
 80096fe:	4615      	mov	r5, r2
 8009700:	e7ba      	b.n	8009678 <_printf_i+0x150>
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	1d1a      	adds	r2, r3, #4
 8009706:	602a      	str	r2, [r5, #0]
 8009708:	681d      	ldr	r5, [r3, #0]
 800970a:	6862      	ldr	r2, [r4, #4]
 800970c:	2100      	movs	r1, #0
 800970e:	4628      	mov	r0, r5
 8009710:	f7f6 fdee 	bl	80002f0 <memchr>
 8009714:	b108      	cbz	r0, 800971a <_printf_i+0x1f2>
 8009716:	1b40      	subs	r0, r0, r5
 8009718:	6060      	str	r0, [r4, #4]
 800971a:	6863      	ldr	r3, [r4, #4]
 800971c:	6123      	str	r3, [r4, #16]
 800971e:	2300      	movs	r3, #0
 8009720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009724:	e7a8      	b.n	8009678 <_printf_i+0x150>
 8009726:	6923      	ldr	r3, [r4, #16]
 8009728:	462a      	mov	r2, r5
 800972a:	4649      	mov	r1, r9
 800972c:	4640      	mov	r0, r8
 800972e:	47d0      	blx	sl
 8009730:	3001      	adds	r0, #1
 8009732:	d0ab      	beq.n	800968c <_printf_i+0x164>
 8009734:	6823      	ldr	r3, [r4, #0]
 8009736:	079b      	lsls	r3, r3, #30
 8009738:	d413      	bmi.n	8009762 <_printf_i+0x23a>
 800973a:	68e0      	ldr	r0, [r4, #12]
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	4298      	cmp	r0, r3
 8009740:	bfb8      	it	lt
 8009742:	4618      	movlt	r0, r3
 8009744:	e7a4      	b.n	8009690 <_printf_i+0x168>
 8009746:	2301      	movs	r3, #1
 8009748:	4632      	mov	r2, r6
 800974a:	4649      	mov	r1, r9
 800974c:	4640      	mov	r0, r8
 800974e:	47d0      	blx	sl
 8009750:	3001      	adds	r0, #1
 8009752:	d09b      	beq.n	800968c <_printf_i+0x164>
 8009754:	3501      	adds	r5, #1
 8009756:	68e3      	ldr	r3, [r4, #12]
 8009758:	9903      	ldr	r1, [sp, #12]
 800975a:	1a5b      	subs	r3, r3, r1
 800975c:	42ab      	cmp	r3, r5
 800975e:	dcf2      	bgt.n	8009746 <_printf_i+0x21e>
 8009760:	e7eb      	b.n	800973a <_printf_i+0x212>
 8009762:	2500      	movs	r5, #0
 8009764:	f104 0619 	add.w	r6, r4, #25
 8009768:	e7f5      	b.n	8009756 <_printf_i+0x22e>
 800976a:	bf00      	nop
 800976c:	0800bc92 	.word	0x0800bc92
 8009770:	0800bca3 	.word	0x0800bca3

08009774 <siprintf>:
 8009774:	b40e      	push	{r1, r2, r3}
 8009776:	b500      	push	{lr}
 8009778:	b09c      	sub	sp, #112	; 0x70
 800977a:	ab1d      	add	r3, sp, #116	; 0x74
 800977c:	9002      	str	r0, [sp, #8]
 800977e:	9006      	str	r0, [sp, #24]
 8009780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009784:	4809      	ldr	r0, [pc, #36]	; (80097ac <siprintf+0x38>)
 8009786:	9107      	str	r1, [sp, #28]
 8009788:	9104      	str	r1, [sp, #16]
 800978a:	4909      	ldr	r1, [pc, #36]	; (80097b0 <siprintf+0x3c>)
 800978c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009790:	9105      	str	r1, [sp, #20]
 8009792:	6800      	ldr	r0, [r0, #0]
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	a902      	add	r1, sp, #8
 8009798:	f001 faf8 	bl	800ad8c <_svfiprintf_r>
 800979c:	9b02      	ldr	r3, [sp, #8]
 800979e:	2200      	movs	r2, #0
 80097a0:	701a      	strb	r2, [r3, #0]
 80097a2:	b01c      	add	sp, #112	; 0x70
 80097a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097a8:	b003      	add	sp, #12
 80097aa:	4770      	bx	lr
 80097ac:	24000010 	.word	0x24000010
 80097b0:	ffff0208 	.word	0xffff0208

080097b4 <quorem>:
 80097b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	6903      	ldr	r3, [r0, #16]
 80097ba:	690c      	ldr	r4, [r1, #16]
 80097bc:	42a3      	cmp	r3, r4
 80097be:	4607      	mov	r7, r0
 80097c0:	f2c0 8081 	blt.w	80098c6 <quorem+0x112>
 80097c4:	3c01      	subs	r4, #1
 80097c6:	f101 0814 	add.w	r8, r1, #20
 80097ca:	f100 0514 	add.w	r5, r0, #20
 80097ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097d2:	9301      	str	r3, [sp, #4]
 80097d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097dc:	3301      	adds	r3, #1
 80097de:	429a      	cmp	r2, r3
 80097e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80097e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80097ec:	d331      	bcc.n	8009852 <quorem+0x9e>
 80097ee:	f04f 0e00 	mov.w	lr, #0
 80097f2:	4640      	mov	r0, r8
 80097f4:	46ac      	mov	ip, r5
 80097f6:	46f2      	mov	sl, lr
 80097f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80097fc:	b293      	uxth	r3, r2
 80097fe:	fb06 e303 	mla	r3, r6, r3, lr
 8009802:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009806:	b29b      	uxth	r3, r3
 8009808:	ebaa 0303 	sub.w	r3, sl, r3
 800980c:	f8dc a000 	ldr.w	sl, [ip]
 8009810:	0c12      	lsrs	r2, r2, #16
 8009812:	fa13 f38a 	uxtah	r3, r3, sl
 8009816:	fb06 e202 	mla	r2, r6, r2, lr
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	9b00      	ldr	r3, [sp, #0]
 800981e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009822:	b292      	uxth	r2, r2
 8009824:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009828:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800982c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009830:	4581      	cmp	r9, r0
 8009832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009836:	f84c 3b04 	str.w	r3, [ip], #4
 800983a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800983e:	d2db      	bcs.n	80097f8 <quorem+0x44>
 8009840:	f855 300b 	ldr.w	r3, [r5, fp]
 8009844:	b92b      	cbnz	r3, 8009852 <quorem+0x9e>
 8009846:	9b01      	ldr	r3, [sp, #4]
 8009848:	3b04      	subs	r3, #4
 800984a:	429d      	cmp	r5, r3
 800984c:	461a      	mov	r2, r3
 800984e:	d32e      	bcc.n	80098ae <quorem+0xfa>
 8009850:	613c      	str	r4, [r7, #16]
 8009852:	4638      	mov	r0, r7
 8009854:	f001 f846 	bl	800a8e4 <__mcmp>
 8009858:	2800      	cmp	r0, #0
 800985a:	db24      	blt.n	80098a6 <quorem+0xf2>
 800985c:	3601      	adds	r6, #1
 800985e:	4628      	mov	r0, r5
 8009860:	f04f 0c00 	mov.w	ip, #0
 8009864:	f858 2b04 	ldr.w	r2, [r8], #4
 8009868:	f8d0 e000 	ldr.w	lr, [r0]
 800986c:	b293      	uxth	r3, r2
 800986e:	ebac 0303 	sub.w	r3, ip, r3
 8009872:	0c12      	lsrs	r2, r2, #16
 8009874:	fa13 f38e 	uxtah	r3, r3, lr
 8009878:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800987c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009880:	b29b      	uxth	r3, r3
 8009882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009886:	45c1      	cmp	r9, r8
 8009888:	f840 3b04 	str.w	r3, [r0], #4
 800988c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009890:	d2e8      	bcs.n	8009864 <quorem+0xb0>
 8009892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800989a:	b922      	cbnz	r2, 80098a6 <quorem+0xf2>
 800989c:	3b04      	subs	r3, #4
 800989e:	429d      	cmp	r5, r3
 80098a0:	461a      	mov	r2, r3
 80098a2:	d30a      	bcc.n	80098ba <quorem+0x106>
 80098a4:	613c      	str	r4, [r7, #16]
 80098a6:	4630      	mov	r0, r6
 80098a8:	b003      	add	sp, #12
 80098aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ae:	6812      	ldr	r2, [r2, #0]
 80098b0:	3b04      	subs	r3, #4
 80098b2:	2a00      	cmp	r2, #0
 80098b4:	d1cc      	bne.n	8009850 <quorem+0x9c>
 80098b6:	3c01      	subs	r4, #1
 80098b8:	e7c7      	b.n	800984a <quorem+0x96>
 80098ba:	6812      	ldr	r2, [r2, #0]
 80098bc:	3b04      	subs	r3, #4
 80098be:	2a00      	cmp	r2, #0
 80098c0:	d1f0      	bne.n	80098a4 <quorem+0xf0>
 80098c2:	3c01      	subs	r4, #1
 80098c4:	e7eb      	b.n	800989e <quorem+0xea>
 80098c6:	2000      	movs	r0, #0
 80098c8:	e7ee      	b.n	80098a8 <quorem+0xf4>
 80098ca:	0000      	movs	r0, r0
 80098cc:	0000      	movs	r0, r0
	...

080098d0 <_dtoa_r>:
 80098d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d4:	ed2d 8b02 	vpush	{d8}
 80098d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098da:	b091      	sub	sp, #68	; 0x44
 80098dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80098e0:	ec59 8b10 	vmov	r8, r9, d0
 80098e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80098e6:	9106      	str	r1, [sp, #24]
 80098e8:	4606      	mov	r6, r0
 80098ea:	9208      	str	r2, [sp, #32]
 80098ec:	930c      	str	r3, [sp, #48]	; 0x30
 80098ee:	b975      	cbnz	r5, 800990e <_dtoa_r+0x3e>
 80098f0:	2010      	movs	r0, #16
 80098f2:	f000 fd5f 	bl	800a3b4 <malloc>
 80098f6:	4602      	mov	r2, r0
 80098f8:	6270      	str	r0, [r6, #36]	; 0x24
 80098fa:	b920      	cbnz	r0, 8009906 <_dtoa_r+0x36>
 80098fc:	4baa      	ldr	r3, [pc, #680]	; (8009ba8 <_dtoa_r+0x2d8>)
 80098fe:	21ea      	movs	r1, #234	; 0xea
 8009900:	48aa      	ldr	r0, [pc, #680]	; (8009bac <_dtoa_r+0x2dc>)
 8009902:	f001 fb53 	bl	800afac <__assert_func>
 8009906:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800990a:	6005      	str	r5, [r0, #0]
 800990c:	60c5      	str	r5, [r0, #12]
 800990e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009910:	6819      	ldr	r1, [r3, #0]
 8009912:	b151      	cbz	r1, 800992a <_dtoa_r+0x5a>
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	604a      	str	r2, [r1, #4]
 8009918:	2301      	movs	r3, #1
 800991a:	4093      	lsls	r3, r2
 800991c:	608b      	str	r3, [r1, #8]
 800991e:	4630      	mov	r0, r6
 8009920:	f000 fd9e 	bl	800a460 <_Bfree>
 8009924:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009926:	2200      	movs	r2, #0
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	f1b9 0300 	subs.w	r3, r9, #0
 800992e:	bfbb      	ittet	lt
 8009930:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009934:	9303      	strlt	r3, [sp, #12]
 8009936:	2300      	movge	r3, #0
 8009938:	2201      	movlt	r2, #1
 800993a:	bfac      	ite	ge
 800993c:	6023      	strge	r3, [r4, #0]
 800993e:	6022      	strlt	r2, [r4, #0]
 8009940:	4b9b      	ldr	r3, [pc, #620]	; (8009bb0 <_dtoa_r+0x2e0>)
 8009942:	9c03      	ldr	r4, [sp, #12]
 8009944:	43a3      	bics	r3, r4
 8009946:	d11c      	bne.n	8009982 <_dtoa_r+0xb2>
 8009948:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800994a:	f242 730f 	movw	r3, #9999	; 0x270f
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009954:	ea53 0308 	orrs.w	r3, r3, r8
 8009958:	f000 84fd 	beq.w	800a356 <_dtoa_r+0xa86>
 800995c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800995e:	b963      	cbnz	r3, 800997a <_dtoa_r+0xaa>
 8009960:	4b94      	ldr	r3, [pc, #592]	; (8009bb4 <_dtoa_r+0x2e4>)
 8009962:	e01f      	b.n	80099a4 <_dtoa_r+0xd4>
 8009964:	4b94      	ldr	r3, [pc, #592]	; (8009bb8 <_dtoa_r+0x2e8>)
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	3308      	adds	r3, #8
 800996a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	9801      	ldr	r0, [sp, #4]
 8009970:	b011      	add	sp, #68	; 0x44
 8009972:	ecbd 8b02 	vpop	{d8}
 8009976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997a:	4b8e      	ldr	r3, [pc, #568]	; (8009bb4 <_dtoa_r+0x2e4>)
 800997c:	9301      	str	r3, [sp, #4]
 800997e:	3303      	adds	r3, #3
 8009980:	e7f3      	b.n	800996a <_dtoa_r+0x9a>
 8009982:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009986:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800998a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800998e:	d10b      	bne.n	80099a8 <_dtoa_r+0xd8>
 8009990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009992:	2301      	movs	r3, #1
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 84d9 	beq.w	800a350 <_dtoa_r+0xa80>
 800999e:	4887      	ldr	r0, [pc, #540]	; (8009bbc <_dtoa_r+0x2ec>)
 80099a0:	6018      	str	r0, [r3, #0]
 80099a2:	1e43      	subs	r3, r0, #1
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	e7e2      	b.n	800996e <_dtoa_r+0x9e>
 80099a8:	a90f      	add	r1, sp, #60	; 0x3c
 80099aa:	aa0e      	add	r2, sp, #56	; 0x38
 80099ac:	4630      	mov	r0, r6
 80099ae:	eeb0 0b48 	vmov.f64	d0, d8
 80099b2:	f001 f83d 	bl	800aa30 <__d2b>
 80099b6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80099ba:	4605      	mov	r5, r0
 80099bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80099be:	2900      	cmp	r1, #0
 80099c0:	d046      	beq.n	8009a50 <_dtoa_r+0x180>
 80099c2:	ee18 4a90 	vmov	r4, s17
 80099c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80099ca:	ec53 2b18 	vmov	r2, r3, d8
 80099ce:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80099d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80099d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80099da:	2400      	movs	r4, #0
 80099dc:	ec43 2b16 	vmov	d6, r2, r3
 80099e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80099e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009b90 <_dtoa_r+0x2c0>
 80099e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80099ec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009b98 <_dtoa_r+0x2c8>
 80099f0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80099f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009ba0 <_dtoa_r+0x2d0>
 80099f8:	ee07 1a90 	vmov	s15, r1
 80099fc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009a00:	eeb0 7b46 	vmov.f64	d7, d6
 8009a04:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009a08:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009a0c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a14:	ee16 ba90 	vmov	fp, s13
 8009a18:	940a      	str	r4, [sp, #40]	; 0x28
 8009a1a:	d508      	bpl.n	8009a2e <_dtoa_r+0x15e>
 8009a1c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009a20:	eeb4 6b47 	vcmp.f64	d6, d7
 8009a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a28:	bf18      	it	ne
 8009a2a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009a2e:	f1bb 0f16 	cmp.w	fp, #22
 8009a32:	d82f      	bhi.n	8009a94 <_dtoa_r+0x1c4>
 8009a34:	4b62      	ldr	r3, [pc, #392]	; (8009bc0 <_dtoa_r+0x2f0>)
 8009a36:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a3a:	ed93 7b00 	vldr	d7, [r3]
 8009a3e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a46:	d501      	bpl.n	8009a4c <_dtoa_r+0x17c>
 8009a48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e022      	b.n	8009a96 <_dtoa_r+0x1c6>
 8009a50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a52:	4401      	add	r1, r0
 8009a54:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	bfc1      	itttt	gt
 8009a5c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a60:	fa04 f303 	lslgt.w	r3, r4, r3
 8009a64:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009a68:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009a6c:	bfd6      	itet	le
 8009a6e:	f1c3 0320 	rsble	r3, r3, #32
 8009a72:	ea43 0808 	orrgt.w	r8, r3, r8
 8009a76:	fa08 f803 	lslle.w	r8, r8, r3
 8009a7a:	ee07 8a90 	vmov	s15, r8
 8009a7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009a82:	3901      	subs	r1, #1
 8009a84:	ee17 4a90 	vmov	r4, s15
 8009a88:	ec53 2b17 	vmov	r2, r3, d7
 8009a8c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009a90:	2401      	movs	r4, #1
 8009a92:	e7a3      	b.n	80099dc <_dtoa_r+0x10c>
 8009a94:	2301      	movs	r3, #1
 8009a96:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a98:	1a43      	subs	r3, r0, r1
 8009a9a:	1e5a      	subs	r2, r3, #1
 8009a9c:	bf45      	ittet	mi
 8009a9e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009aa2:	9304      	strmi	r3, [sp, #16]
 8009aa4:	2300      	movpl	r3, #0
 8009aa6:	2300      	movmi	r3, #0
 8009aa8:	9205      	str	r2, [sp, #20]
 8009aaa:	bf54      	ite	pl
 8009aac:	9304      	strpl	r3, [sp, #16]
 8009aae:	9305      	strmi	r3, [sp, #20]
 8009ab0:	f1bb 0f00 	cmp.w	fp, #0
 8009ab4:	db18      	blt.n	8009ae8 <_dtoa_r+0x218>
 8009ab6:	9b05      	ldr	r3, [sp, #20]
 8009ab8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8009abc:	445b      	add	r3, fp
 8009abe:	9305      	str	r3, [sp, #20]
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9a06      	ldr	r2, [sp, #24]
 8009ac4:	2a09      	cmp	r2, #9
 8009ac6:	d849      	bhi.n	8009b5c <_dtoa_r+0x28c>
 8009ac8:	2a05      	cmp	r2, #5
 8009aca:	bfc4      	itt	gt
 8009acc:	3a04      	subgt	r2, #4
 8009ace:	9206      	strgt	r2, [sp, #24]
 8009ad0:	9a06      	ldr	r2, [sp, #24]
 8009ad2:	f1a2 0202 	sub.w	r2, r2, #2
 8009ad6:	bfcc      	ite	gt
 8009ad8:	2400      	movgt	r4, #0
 8009ada:	2401      	movle	r4, #1
 8009adc:	2a03      	cmp	r2, #3
 8009ade:	d848      	bhi.n	8009b72 <_dtoa_r+0x2a2>
 8009ae0:	e8df f002 	tbb	[pc, r2]
 8009ae4:	3a2c2e0b 	.word	0x3a2c2e0b
 8009ae8:	9b04      	ldr	r3, [sp, #16]
 8009aea:	2200      	movs	r2, #0
 8009aec:	eba3 030b 	sub.w	r3, r3, fp
 8009af0:	9304      	str	r3, [sp, #16]
 8009af2:	9209      	str	r2, [sp, #36]	; 0x24
 8009af4:	f1cb 0300 	rsb	r3, fp, #0
 8009af8:	e7e3      	b.n	8009ac2 <_dtoa_r+0x1f2>
 8009afa:	2200      	movs	r2, #0
 8009afc:	9207      	str	r2, [sp, #28]
 8009afe:	9a08      	ldr	r2, [sp, #32]
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	dc39      	bgt.n	8009b78 <_dtoa_r+0x2a8>
 8009b04:	f04f 0a01 	mov.w	sl, #1
 8009b08:	46d1      	mov	r9, sl
 8009b0a:	4652      	mov	r2, sl
 8009b0c:	f8cd a020 	str.w	sl, [sp, #32]
 8009b10:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009b12:	2100      	movs	r1, #0
 8009b14:	6079      	str	r1, [r7, #4]
 8009b16:	2004      	movs	r0, #4
 8009b18:	f100 0c14 	add.w	ip, r0, #20
 8009b1c:	4594      	cmp	ip, r2
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	d92f      	bls.n	8009b82 <_dtoa_r+0x2b2>
 8009b22:	4630      	mov	r0, r6
 8009b24:	930d      	str	r3, [sp, #52]	; 0x34
 8009b26:	f000 fc5b 	bl	800a3e0 <_Balloc>
 8009b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b2c:	9001      	str	r0, [sp, #4]
 8009b2e:	4602      	mov	r2, r0
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d149      	bne.n	8009bc8 <_dtoa_r+0x2f8>
 8009b34:	4b23      	ldr	r3, [pc, #140]	; (8009bc4 <_dtoa_r+0x2f4>)
 8009b36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b3a:	e6e1      	b.n	8009900 <_dtoa_r+0x30>
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	e7dd      	b.n	8009afc <_dtoa_r+0x22c>
 8009b40:	2200      	movs	r2, #0
 8009b42:	9207      	str	r2, [sp, #28]
 8009b44:	9a08      	ldr	r2, [sp, #32]
 8009b46:	eb0b 0a02 	add.w	sl, fp, r2
 8009b4a:	f10a 0901 	add.w	r9, sl, #1
 8009b4e:	464a      	mov	r2, r9
 8009b50:	2a01      	cmp	r2, #1
 8009b52:	bfb8      	it	lt
 8009b54:	2201      	movlt	r2, #1
 8009b56:	e7db      	b.n	8009b10 <_dtoa_r+0x240>
 8009b58:	2201      	movs	r2, #1
 8009b5a:	e7f2      	b.n	8009b42 <_dtoa_r+0x272>
 8009b5c:	2401      	movs	r4, #1
 8009b5e:	2200      	movs	r2, #0
 8009b60:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009b64:	f04f 3aff 	mov.w	sl, #4294967295
 8009b68:	2100      	movs	r1, #0
 8009b6a:	46d1      	mov	r9, sl
 8009b6c:	2212      	movs	r2, #18
 8009b6e:	9108      	str	r1, [sp, #32]
 8009b70:	e7ce      	b.n	8009b10 <_dtoa_r+0x240>
 8009b72:	2201      	movs	r2, #1
 8009b74:	9207      	str	r2, [sp, #28]
 8009b76:	e7f5      	b.n	8009b64 <_dtoa_r+0x294>
 8009b78:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009b7c:	46d1      	mov	r9, sl
 8009b7e:	4652      	mov	r2, sl
 8009b80:	e7c6      	b.n	8009b10 <_dtoa_r+0x240>
 8009b82:	3101      	adds	r1, #1
 8009b84:	6079      	str	r1, [r7, #4]
 8009b86:	0040      	lsls	r0, r0, #1
 8009b88:	e7c6      	b.n	8009b18 <_dtoa_r+0x248>
 8009b8a:	bf00      	nop
 8009b8c:	f3af 8000 	nop.w
 8009b90:	636f4361 	.word	0x636f4361
 8009b94:	3fd287a7 	.word	0x3fd287a7
 8009b98:	8b60c8b3 	.word	0x8b60c8b3
 8009b9c:	3fc68a28 	.word	0x3fc68a28
 8009ba0:	509f79fb 	.word	0x509f79fb
 8009ba4:	3fd34413 	.word	0x3fd34413
 8009ba8:	0800bcc1 	.word	0x0800bcc1
 8009bac:	0800bcd8 	.word	0x0800bcd8
 8009bb0:	7ff00000 	.word	0x7ff00000
 8009bb4:	0800bcbd 	.word	0x0800bcbd
 8009bb8:	0800bcb4 	.word	0x0800bcb4
 8009bbc:	0800bc91 	.word	0x0800bc91
 8009bc0:	0800bdc8 	.word	0x0800bdc8
 8009bc4:	0800bd33 	.word	0x0800bd33
 8009bc8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009bca:	9901      	ldr	r1, [sp, #4]
 8009bcc:	6011      	str	r1, [r2, #0]
 8009bce:	f1b9 0f0e 	cmp.w	r9, #14
 8009bd2:	d86c      	bhi.n	8009cae <_dtoa_r+0x3de>
 8009bd4:	2c00      	cmp	r4, #0
 8009bd6:	d06a      	beq.n	8009cae <_dtoa_r+0x3de>
 8009bd8:	f1bb 0f00 	cmp.w	fp, #0
 8009bdc:	f340 80a0 	ble.w	8009d20 <_dtoa_r+0x450>
 8009be0:	49c1      	ldr	r1, [pc, #772]	; (8009ee8 <_dtoa_r+0x618>)
 8009be2:	f00b 020f 	and.w	r2, fp, #15
 8009be6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009bea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009bee:	ed92 7b00 	vldr	d7, [r2]
 8009bf2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009bf6:	f000 8087 	beq.w	8009d08 <_dtoa_r+0x438>
 8009bfa:	4abc      	ldr	r2, [pc, #752]	; (8009eec <_dtoa_r+0x61c>)
 8009bfc:	ed92 6b08 	vldr	d6, [r2, #32]
 8009c00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009c04:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009c08:	f001 010f 	and.w	r1, r1, #15
 8009c0c:	2203      	movs	r2, #3
 8009c0e:	48b7      	ldr	r0, [pc, #732]	; (8009eec <_dtoa_r+0x61c>)
 8009c10:	2900      	cmp	r1, #0
 8009c12:	d17b      	bne.n	8009d0c <_dtoa_r+0x43c>
 8009c14:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009c18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009c1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c22:	2900      	cmp	r1, #0
 8009c24:	f000 80a2 	beq.w	8009d6c <_dtoa_r+0x49c>
 8009c28:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009c2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c38:	f140 8098 	bpl.w	8009d6c <_dtoa_r+0x49c>
 8009c3c:	f1b9 0f00 	cmp.w	r9, #0
 8009c40:	f000 8094 	beq.w	8009d6c <_dtoa_r+0x49c>
 8009c44:	f1ba 0f00 	cmp.w	sl, #0
 8009c48:	dd2f      	ble.n	8009caa <_dtoa_r+0x3da>
 8009c4a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009c4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c52:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c56:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009c5a:	3201      	adds	r2, #1
 8009c5c:	4650      	mov	r0, sl
 8009c5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009c62:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009c66:	ee07 2a90 	vmov	s15, r2
 8009c6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009c6e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009c72:	ee15 4a90 	vmov	r4, s11
 8009c76:	ec52 1b15 	vmov	r1, r2, d5
 8009c7a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d177      	bne.n	8009d72 <_dtoa_r+0x4a2>
 8009c82:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009c86:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009c8a:	ec42 1b17 	vmov	d7, r1, r2
 8009c8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c96:	f300 8263 	bgt.w	800a160 <_dtoa_r+0x890>
 8009c9a:	eeb1 7b47 	vneg.f64	d7, d7
 8009c9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca6:	f100 8258 	bmi.w	800a15a <_dtoa_r+0x88a>
 8009caa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009cae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cb0:	2a00      	cmp	r2, #0
 8009cb2:	f2c0 811d 	blt.w	8009ef0 <_dtoa_r+0x620>
 8009cb6:	f1bb 0f0e 	cmp.w	fp, #14
 8009cba:	f300 8119 	bgt.w	8009ef0 <_dtoa_r+0x620>
 8009cbe:	4b8a      	ldr	r3, [pc, #552]	; (8009ee8 <_dtoa_r+0x618>)
 8009cc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009cc4:	ed93 6b00 	vldr	d6, [r3]
 8009cc8:	9b08      	ldr	r3, [sp, #32]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f280 80b7 	bge.w	8009e3e <_dtoa_r+0x56e>
 8009cd0:	f1b9 0f00 	cmp.w	r9, #0
 8009cd4:	f300 80b3 	bgt.w	8009e3e <_dtoa_r+0x56e>
 8009cd8:	f040 823f 	bne.w	800a15a <_dtoa_r+0x88a>
 8009cdc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009ce0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009ce4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ce8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf0:	464c      	mov	r4, r9
 8009cf2:	464f      	mov	r7, r9
 8009cf4:	f280 8215 	bge.w	800a122 <_dtoa_r+0x852>
 8009cf8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009cfc:	2331      	movs	r3, #49	; 0x31
 8009cfe:	f808 3b01 	strb.w	r3, [r8], #1
 8009d02:	f10b 0b01 	add.w	fp, fp, #1
 8009d06:	e211      	b.n	800a12c <_dtoa_r+0x85c>
 8009d08:	2202      	movs	r2, #2
 8009d0a:	e780      	b.n	8009c0e <_dtoa_r+0x33e>
 8009d0c:	07cc      	lsls	r4, r1, #31
 8009d0e:	d504      	bpl.n	8009d1a <_dtoa_r+0x44a>
 8009d10:	ed90 6b00 	vldr	d6, [r0]
 8009d14:	3201      	adds	r2, #1
 8009d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d1a:	1049      	asrs	r1, r1, #1
 8009d1c:	3008      	adds	r0, #8
 8009d1e:	e777      	b.n	8009c10 <_dtoa_r+0x340>
 8009d20:	d022      	beq.n	8009d68 <_dtoa_r+0x498>
 8009d22:	f1cb 0100 	rsb	r1, fp, #0
 8009d26:	4a70      	ldr	r2, [pc, #448]	; (8009ee8 <_dtoa_r+0x618>)
 8009d28:	f001 000f 	and.w	r0, r1, #15
 8009d2c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009d30:	ed92 7b00 	vldr	d7, [r2]
 8009d34:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009d38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d3c:	486b      	ldr	r0, [pc, #428]	; (8009eec <_dtoa_r+0x61c>)
 8009d3e:	1109      	asrs	r1, r1, #4
 8009d40:	2400      	movs	r4, #0
 8009d42:	2202      	movs	r2, #2
 8009d44:	b929      	cbnz	r1, 8009d52 <_dtoa_r+0x482>
 8009d46:	2c00      	cmp	r4, #0
 8009d48:	f43f af6a 	beq.w	8009c20 <_dtoa_r+0x350>
 8009d4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d50:	e766      	b.n	8009c20 <_dtoa_r+0x350>
 8009d52:	07cf      	lsls	r7, r1, #31
 8009d54:	d505      	bpl.n	8009d62 <_dtoa_r+0x492>
 8009d56:	ed90 6b00 	vldr	d6, [r0]
 8009d5a:	3201      	adds	r2, #1
 8009d5c:	2401      	movs	r4, #1
 8009d5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d62:	1049      	asrs	r1, r1, #1
 8009d64:	3008      	adds	r0, #8
 8009d66:	e7ed      	b.n	8009d44 <_dtoa_r+0x474>
 8009d68:	2202      	movs	r2, #2
 8009d6a:	e759      	b.n	8009c20 <_dtoa_r+0x350>
 8009d6c:	465f      	mov	r7, fp
 8009d6e:	4648      	mov	r0, r9
 8009d70:	e775      	b.n	8009c5e <_dtoa_r+0x38e>
 8009d72:	ec42 1b17 	vmov	d7, r1, r2
 8009d76:	4a5c      	ldr	r2, [pc, #368]	; (8009ee8 <_dtoa_r+0x618>)
 8009d78:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009d7c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009d80:	9a01      	ldr	r2, [sp, #4]
 8009d82:	1814      	adds	r4, r2, r0
 8009d84:	9a07      	ldr	r2, [sp, #28]
 8009d86:	b352      	cbz	r2, 8009dde <_dtoa_r+0x50e>
 8009d88:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009d8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009d90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d94:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009d98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009d9c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009da0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009da4:	ee14 2a90 	vmov	r2, s9
 8009da8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009dac:	3230      	adds	r2, #48	; 0x30
 8009dae:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009db2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dba:	f808 2b01 	strb.w	r2, [r8], #1
 8009dbe:	d439      	bmi.n	8009e34 <_dtoa_r+0x564>
 8009dc0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009dc4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dcc:	d472      	bmi.n	8009eb4 <_dtoa_r+0x5e4>
 8009dce:	45a0      	cmp	r8, r4
 8009dd0:	f43f af6b 	beq.w	8009caa <_dtoa_r+0x3da>
 8009dd4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009dd8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009ddc:	e7e0      	b.n	8009da0 <_dtoa_r+0x4d0>
 8009dde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009de2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009de6:	4621      	mov	r1, r4
 8009de8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009dec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009df0:	ee14 2a90 	vmov	r2, s9
 8009df4:	3230      	adds	r2, #48	; 0x30
 8009df6:	f808 2b01 	strb.w	r2, [r8], #1
 8009dfa:	45a0      	cmp	r8, r4
 8009dfc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009e00:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e04:	d118      	bne.n	8009e38 <_dtoa_r+0x568>
 8009e06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009e0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009e0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e16:	dc4d      	bgt.n	8009eb4 <_dtoa_r+0x5e4>
 8009e18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009e1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e24:	f57f af41 	bpl.w	8009caa <_dtoa_r+0x3da>
 8009e28:	4688      	mov	r8, r1
 8009e2a:	3901      	subs	r1, #1
 8009e2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009e30:	2b30      	cmp	r3, #48	; 0x30
 8009e32:	d0f9      	beq.n	8009e28 <_dtoa_r+0x558>
 8009e34:	46bb      	mov	fp, r7
 8009e36:	e02a      	b.n	8009e8e <_dtoa_r+0x5be>
 8009e38:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009e3c:	e7d6      	b.n	8009dec <_dtoa_r+0x51c>
 8009e3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009e46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009e4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009e52:	ee15 3a10 	vmov	r3, s10
 8009e56:	3330      	adds	r3, #48	; 0x30
 8009e58:	f808 3b01 	strb.w	r3, [r8], #1
 8009e5c:	9b01      	ldr	r3, [sp, #4]
 8009e5e:	eba8 0303 	sub.w	r3, r8, r3
 8009e62:	4599      	cmp	r9, r3
 8009e64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009e68:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009e6c:	d133      	bne.n	8009ed6 <_dtoa_r+0x606>
 8009e6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009e72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e7a:	dc1a      	bgt.n	8009eb2 <_dtoa_r+0x5e2>
 8009e7c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e84:	d103      	bne.n	8009e8e <_dtoa_r+0x5be>
 8009e86:	ee15 3a10 	vmov	r3, s10
 8009e8a:	07d9      	lsls	r1, r3, #31
 8009e8c:	d411      	bmi.n	8009eb2 <_dtoa_r+0x5e2>
 8009e8e:	4629      	mov	r1, r5
 8009e90:	4630      	mov	r0, r6
 8009e92:	f000 fae5 	bl	800a460 <_Bfree>
 8009e96:	2300      	movs	r3, #0
 8009e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e9a:	f888 3000 	strb.w	r3, [r8]
 8009e9e:	f10b 0301 	add.w	r3, fp, #1
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f43f ad61 	beq.w	800996e <_dtoa_r+0x9e>
 8009eac:	f8c3 8000 	str.w	r8, [r3]
 8009eb0:	e55d      	b.n	800996e <_dtoa_r+0x9e>
 8009eb2:	465f      	mov	r7, fp
 8009eb4:	4643      	mov	r3, r8
 8009eb6:	4698      	mov	r8, r3
 8009eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ebc:	2a39      	cmp	r2, #57	; 0x39
 8009ebe:	d106      	bne.n	8009ece <_dtoa_r+0x5fe>
 8009ec0:	9a01      	ldr	r2, [sp, #4]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d1f7      	bne.n	8009eb6 <_dtoa_r+0x5e6>
 8009ec6:	9901      	ldr	r1, [sp, #4]
 8009ec8:	2230      	movs	r2, #48	; 0x30
 8009eca:	3701      	adds	r7, #1
 8009ecc:	700a      	strb	r2, [r1, #0]
 8009ece:	781a      	ldrb	r2, [r3, #0]
 8009ed0:	3201      	adds	r2, #1
 8009ed2:	701a      	strb	r2, [r3, #0]
 8009ed4:	e7ae      	b.n	8009e34 <_dtoa_r+0x564>
 8009ed6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009eda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee2:	d1b2      	bne.n	8009e4a <_dtoa_r+0x57a>
 8009ee4:	e7d3      	b.n	8009e8e <_dtoa_r+0x5be>
 8009ee6:	bf00      	nop
 8009ee8:	0800bdc8 	.word	0x0800bdc8
 8009eec:	0800bda0 	.word	0x0800bda0
 8009ef0:	9907      	ldr	r1, [sp, #28]
 8009ef2:	2900      	cmp	r1, #0
 8009ef4:	f000 80d0 	beq.w	800a098 <_dtoa_r+0x7c8>
 8009ef8:	9906      	ldr	r1, [sp, #24]
 8009efa:	2901      	cmp	r1, #1
 8009efc:	f300 80b4 	bgt.w	800a068 <_dtoa_r+0x798>
 8009f00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f02:	2900      	cmp	r1, #0
 8009f04:	f000 80ac 	beq.w	800a060 <_dtoa_r+0x790>
 8009f08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009f10:	461c      	mov	r4, r3
 8009f12:	930a      	str	r3, [sp, #40]	; 0x28
 8009f14:	9b04      	ldr	r3, [sp, #16]
 8009f16:	4413      	add	r3, r2
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	9b05      	ldr	r3, [sp, #20]
 8009f1c:	2101      	movs	r1, #1
 8009f1e:	4413      	add	r3, r2
 8009f20:	4630      	mov	r0, r6
 8009f22:	9305      	str	r3, [sp, #20]
 8009f24:	f000 fb54 	bl	800a5d0 <__i2b>
 8009f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	f1b8 0f00 	cmp.w	r8, #0
 8009f30:	dd0d      	ble.n	8009f4e <_dtoa_r+0x67e>
 8009f32:	9a05      	ldr	r2, [sp, #20]
 8009f34:	2a00      	cmp	r2, #0
 8009f36:	dd0a      	ble.n	8009f4e <_dtoa_r+0x67e>
 8009f38:	4542      	cmp	r2, r8
 8009f3a:	9904      	ldr	r1, [sp, #16]
 8009f3c:	bfa8      	it	ge
 8009f3e:	4642      	movge	r2, r8
 8009f40:	1a89      	subs	r1, r1, r2
 8009f42:	9104      	str	r1, [sp, #16]
 8009f44:	9905      	ldr	r1, [sp, #20]
 8009f46:	eba8 0802 	sub.w	r8, r8, r2
 8009f4a:	1a8a      	subs	r2, r1, r2
 8009f4c:	9205      	str	r2, [sp, #20]
 8009f4e:	b303      	cbz	r3, 8009f92 <_dtoa_r+0x6c2>
 8009f50:	9a07      	ldr	r2, [sp, #28]
 8009f52:	2a00      	cmp	r2, #0
 8009f54:	f000 80a5 	beq.w	800a0a2 <_dtoa_r+0x7d2>
 8009f58:	2c00      	cmp	r4, #0
 8009f5a:	dd13      	ble.n	8009f84 <_dtoa_r+0x6b4>
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	4622      	mov	r2, r4
 8009f60:	4630      	mov	r0, r6
 8009f62:	930d      	str	r3, [sp, #52]	; 0x34
 8009f64:	f000 fbf4 	bl	800a750 <__pow5mult>
 8009f68:	462a      	mov	r2, r5
 8009f6a:	4601      	mov	r1, r0
 8009f6c:	4607      	mov	r7, r0
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f000 fb44 	bl	800a5fc <__multiply>
 8009f74:	4629      	mov	r1, r5
 8009f76:	900a      	str	r0, [sp, #40]	; 0x28
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f000 fa71 	bl	800a460 <_Bfree>
 8009f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f82:	4615      	mov	r5, r2
 8009f84:	1b1a      	subs	r2, r3, r4
 8009f86:	d004      	beq.n	8009f92 <_dtoa_r+0x6c2>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 fbe0 	bl	800a750 <__pow5mult>
 8009f90:	4605      	mov	r5, r0
 8009f92:	2101      	movs	r1, #1
 8009f94:	4630      	mov	r0, r6
 8009f96:	f000 fb1b 	bl	800a5d0 <__i2b>
 8009f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	f340 8081 	ble.w	800a0a6 <_dtoa_r+0x7d6>
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	4601      	mov	r1, r0
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f000 fbd1 	bl	800a750 <__pow5mult>
 8009fae:	9b06      	ldr	r3, [sp, #24]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	dd7a      	ble.n	800a0ac <_dtoa_r+0x7dc>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8009fba:	6922      	ldr	r2, [r4, #16]
 8009fbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009fc0:	6910      	ldr	r0, [r2, #16]
 8009fc2:	f000 fab5 	bl	800a530 <__hi0bits>
 8009fc6:	f1c0 0020 	rsb	r0, r0, #32
 8009fca:	9b05      	ldr	r3, [sp, #20]
 8009fcc:	4418      	add	r0, r3
 8009fce:	f010 001f 	ands.w	r0, r0, #31
 8009fd2:	f000 808c 	beq.w	800a0ee <_dtoa_r+0x81e>
 8009fd6:	f1c0 0220 	rsb	r2, r0, #32
 8009fda:	2a04      	cmp	r2, #4
 8009fdc:	f340 8085 	ble.w	800a0ea <_dtoa_r+0x81a>
 8009fe0:	f1c0 001c 	rsb	r0, r0, #28
 8009fe4:	9b04      	ldr	r3, [sp, #16]
 8009fe6:	4403      	add	r3, r0
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	9b05      	ldr	r3, [sp, #20]
 8009fec:	4403      	add	r3, r0
 8009fee:	4480      	add	r8, r0
 8009ff0:	9305      	str	r3, [sp, #20]
 8009ff2:	9b04      	ldr	r3, [sp, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dd05      	ble.n	800a004 <_dtoa_r+0x734>
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f000 fc01 	bl	800a804 <__lshift>
 800a002:	4605      	mov	r5, r0
 800a004:	9b05      	ldr	r3, [sp, #20]
 800a006:	2b00      	cmp	r3, #0
 800a008:	dd05      	ble.n	800a016 <_dtoa_r+0x746>
 800a00a:	4621      	mov	r1, r4
 800a00c:	461a      	mov	r2, r3
 800a00e:	4630      	mov	r0, r6
 800a010:	f000 fbf8 	bl	800a804 <__lshift>
 800a014:	4604      	mov	r4, r0
 800a016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d06a      	beq.n	800a0f2 <_dtoa_r+0x822>
 800a01c:	4621      	mov	r1, r4
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 fc60 	bl	800a8e4 <__mcmp>
 800a024:	2800      	cmp	r0, #0
 800a026:	da64      	bge.n	800a0f2 <_dtoa_r+0x822>
 800a028:	2300      	movs	r3, #0
 800a02a:	4629      	mov	r1, r5
 800a02c:	220a      	movs	r2, #10
 800a02e:	4630      	mov	r0, r6
 800a030:	f000 fa38 	bl	800a4a4 <__multadd>
 800a034:	9b07      	ldr	r3, [sp, #28]
 800a036:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a03a:	4605      	mov	r5, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f000 8191 	beq.w	800a364 <_dtoa_r+0xa94>
 800a042:	4639      	mov	r1, r7
 800a044:	2300      	movs	r3, #0
 800a046:	220a      	movs	r2, #10
 800a048:	4630      	mov	r0, r6
 800a04a:	f000 fa2b 	bl	800a4a4 <__multadd>
 800a04e:	f1ba 0f00 	cmp.w	sl, #0
 800a052:	4607      	mov	r7, r0
 800a054:	f300 808d 	bgt.w	800a172 <_dtoa_r+0x8a2>
 800a058:	9b06      	ldr	r3, [sp, #24]
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	dc50      	bgt.n	800a100 <_dtoa_r+0x830>
 800a05e:	e088      	b.n	800a172 <_dtoa_r+0x8a2>
 800a060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a062:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a066:	e751      	b.n	8009f0c <_dtoa_r+0x63c>
 800a068:	f109 34ff 	add.w	r4, r9, #4294967295
 800a06c:	42a3      	cmp	r3, r4
 800a06e:	bfbf      	itttt	lt
 800a070:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a072:	1ae3      	sublt	r3, r4, r3
 800a074:	18d2      	addlt	r2, r2, r3
 800a076:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a078:	bfb6      	itet	lt
 800a07a:	4623      	movlt	r3, r4
 800a07c:	1b1c      	subge	r4, r3, r4
 800a07e:	2400      	movlt	r4, #0
 800a080:	f1b9 0f00 	cmp.w	r9, #0
 800a084:	bfb5      	itete	lt
 800a086:	9a04      	ldrlt	r2, [sp, #16]
 800a088:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a08c:	eba2 0809 	sublt.w	r8, r2, r9
 800a090:	464a      	movge	r2, r9
 800a092:	bfb8      	it	lt
 800a094:	2200      	movlt	r2, #0
 800a096:	e73c      	b.n	8009f12 <_dtoa_r+0x642>
 800a098:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a09c:	9f07      	ldr	r7, [sp, #28]
 800a09e:	461c      	mov	r4, r3
 800a0a0:	e744      	b.n	8009f2c <_dtoa_r+0x65c>
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	e770      	b.n	8009f88 <_dtoa_r+0x6b8>
 800a0a6:	9b06      	ldr	r3, [sp, #24]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	dc18      	bgt.n	800a0de <_dtoa_r+0x80e>
 800a0ac:	9b02      	ldr	r3, [sp, #8]
 800a0ae:	b9b3      	cbnz	r3, 800a0de <_dtoa_r+0x80e>
 800a0b0:	9b03      	ldr	r3, [sp, #12]
 800a0b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a0b6:	b9a2      	cbnz	r2, 800a0e2 <_dtoa_r+0x812>
 800a0b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0bc:	0d12      	lsrs	r2, r2, #20
 800a0be:	0512      	lsls	r2, r2, #20
 800a0c0:	b18a      	cbz	r2, 800a0e6 <_dtoa_r+0x816>
 800a0c2:	9b04      	ldr	r3, [sp, #16]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	9304      	str	r3, [sp, #16]
 800a0c8:	9b05      	ldr	r3, [sp, #20]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	9305      	str	r3, [sp, #20]
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f47f af70 	bne.w	8009fba <_dtoa_r+0x6ea>
 800a0da:	2001      	movs	r0, #1
 800a0dc:	e775      	b.n	8009fca <_dtoa_r+0x6fa>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	e7f6      	b.n	800a0d0 <_dtoa_r+0x800>
 800a0e2:	9b02      	ldr	r3, [sp, #8]
 800a0e4:	e7f4      	b.n	800a0d0 <_dtoa_r+0x800>
 800a0e6:	920a      	str	r2, [sp, #40]	; 0x28
 800a0e8:	e7f3      	b.n	800a0d2 <_dtoa_r+0x802>
 800a0ea:	d082      	beq.n	8009ff2 <_dtoa_r+0x722>
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	301c      	adds	r0, #28
 800a0f0:	e778      	b.n	8009fe4 <_dtoa_r+0x714>
 800a0f2:	f1b9 0f00 	cmp.w	r9, #0
 800a0f6:	dc37      	bgt.n	800a168 <_dtoa_r+0x898>
 800a0f8:	9b06      	ldr	r3, [sp, #24]
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	dd34      	ble.n	800a168 <_dtoa_r+0x898>
 800a0fe:	46ca      	mov	sl, r9
 800a100:	f1ba 0f00 	cmp.w	sl, #0
 800a104:	d10d      	bne.n	800a122 <_dtoa_r+0x852>
 800a106:	4621      	mov	r1, r4
 800a108:	4653      	mov	r3, sl
 800a10a:	2205      	movs	r2, #5
 800a10c:	4630      	mov	r0, r6
 800a10e:	f000 f9c9 	bl	800a4a4 <__multadd>
 800a112:	4601      	mov	r1, r0
 800a114:	4604      	mov	r4, r0
 800a116:	4628      	mov	r0, r5
 800a118:	f000 fbe4 	bl	800a8e4 <__mcmp>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	f73f adeb 	bgt.w	8009cf8 <_dtoa_r+0x428>
 800a122:	9b08      	ldr	r3, [sp, #32]
 800a124:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a128:	ea6f 0b03 	mvn.w	fp, r3
 800a12c:	f04f 0900 	mov.w	r9, #0
 800a130:	4621      	mov	r1, r4
 800a132:	4630      	mov	r0, r6
 800a134:	f000 f994 	bl	800a460 <_Bfree>
 800a138:	2f00      	cmp	r7, #0
 800a13a:	f43f aea8 	beq.w	8009e8e <_dtoa_r+0x5be>
 800a13e:	f1b9 0f00 	cmp.w	r9, #0
 800a142:	d005      	beq.n	800a150 <_dtoa_r+0x880>
 800a144:	45b9      	cmp	r9, r7
 800a146:	d003      	beq.n	800a150 <_dtoa_r+0x880>
 800a148:	4649      	mov	r1, r9
 800a14a:	4630      	mov	r0, r6
 800a14c:	f000 f988 	bl	800a460 <_Bfree>
 800a150:	4639      	mov	r1, r7
 800a152:	4630      	mov	r0, r6
 800a154:	f000 f984 	bl	800a460 <_Bfree>
 800a158:	e699      	b.n	8009e8e <_dtoa_r+0x5be>
 800a15a:	2400      	movs	r4, #0
 800a15c:	4627      	mov	r7, r4
 800a15e:	e7e0      	b.n	800a122 <_dtoa_r+0x852>
 800a160:	46bb      	mov	fp, r7
 800a162:	4604      	mov	r4, r0
 800a164:	4607      	mov	r7, r0
 800a166:	e5c7      	b.n	8009cf8 <_dtoa_r+0x428>
 800a168:	9b07      	ldr	r3, [sp, #28]
 800a16a:	46ca      	mov	sl, r9
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 8100 	beq.w	800a372 <_dtoa_r+0xaa2>
 800a172:	f1b8 0f00 	cmp.w	r8, #0
 800a176:	dd05      	ble.n	800a184 <_dtoa_r+0x8b4>
 800a178:	4639      	mov	r1, r7
 800a17a:	4642      	mov	r2, r8
 800a17c:	4630      	mov	r0, r6
 800a17e:	f000 fb41 	bl	800a804 <__lshift>
 800a182:	4607      	mov	r7, r0
 800a184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a186:	2b00      	cmp	r3, #0
 800a188:	d05d      	beq.n	800a246 <_dtoa_r+0x976>
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	4630      	mov	r0, r6
 800a18e:	f000 f927 	bl	800a3e0 <_Balloc>
 800a192:	4680      	mov	r8, r0
 800a194:	b928      	cbnz	r0, 800a1a2 <_dtoa_r+0x8d2>
 800a196:	4b82      	ldr	r3, [pc, #520]	; (800a3a0 <_dtoa_r+0xad0>)
 800a198:	4602      	mov	r2, r0
 800a19a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a19e:	f7ff bbaf 	b.w	8009900 <_dtoa_r+0x30>
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	3202      	adds	r2, #2
 800a1a6:	0092      	lsls	r2, r2, #2
 800a1a8:	f107 010c 	add.w	r1, r7, #12
 800a1ac:	300c      	adds	r0, #12
 800a1ae:	f000 f909 	bl	800a3c4 <memcpy>
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	4641      	mov	r1, r8
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f000 fb24 	bl	800a804 <__lshift>
 800a1bc:	9b01      	ldr	r3, [sp, #4]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	9b01      	ldr	r3, [sp, #4]
 800a1c4:	4453      	add	r3, sl
 800a1c6:	9308      	str	r3, [sp, #32]
 800a1c8:	9b02      	ldr	r3, [sp, #8]
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	46b9      	mov	r9, r7
 800a1d0:	9307      	str	r3, [sp, #28]
 800a1d2:	4607      	mov	r7, r0
 800a1d4:	9b04      	ldr	r3, [sp, #16]
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	4628      	mov	r0, r5
 800a1dc:	9302      	str	r3, [sp, #8]
 800a1de:	f7ff fae9 	bl	80097b4 <quorem>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	3330      	adds	r3, #48	; 0x30
 800a1e6:	9005      	str	r0, [sp, #20]
 800a1e8:	4649      	mov	r1, r9
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ee:	f000 fb79 	bl	800a8e4 <__mcmp>
 800a1f2:	463a      	mov	r2, r7
 800a1f4:	4682      	mov	sl, r0
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f000 fb8f 	bl	800a91c <__mdiff>
 800a1fe:	68c2      	ldr	r2, [r0, #12]
 800a200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a202:	4680      	mov	r8, r0
 800a204:	bb0a      	cbnz	r2, 800a24a <_dtoa_r+0x97a>
 800a206:	4601      	mov	r1, r0
 800a208:	4628      	mov	r0, r5
 800a20a:	f000 fb6b 	bl	800a8e4 <__mcmp>
 800a20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a210:	4602      	mov	r2, r0
 800a212:	4641      	mov	r1, r8
 800a214:	4630      	mov	r0, r6
 800a216:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a21a:	f000 f921 	bl	800a460 <_Bfree>
 800a21e:	9b06      	ldr	r3, [sp, #24]
 800a220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a222:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a226:	ea43 0102 	orr.w	r1, r3, r2
 800a22a:	9b07      	ldr	r3, [sp, #28]
 800a22c:	430b      	orrs	r3, r1
 800a22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a230:	d10d      	bne.n	800a24e <_dtoa_r+0x97e>
 800a232:	2b39      	cmp	r3, #57	; 0x39
 800a234:	d029      	beq.n	800a28a <_dtoa_r+0x9ba>
 800a236:	f1ba 0f00 	cmp.w	sl, #0
 800a23a:	dd01      	ble.n	800a240 <_dtoa_r+0x970>
 800a23c:	9b05      	ldr	r3, [sp, #20]
 800a23e:	3331      	adds	r3, #49	; 0x31
 800a240:	9a02      	ldr	r2, [sp, #8]
 800a242:	7013      	strb	r3, [r2, #0]
 800a244:	e774      	b.n	800a130 <_dtoa_r+0x860>
 800a246:	4638      	mov	r0, r7
 800a248:	e7b8      	b.n	800a1bc <_dtoa_r+0x8ec>
 800a24a:	2201      	movs	r2, #1
 800a24c:	e7e1      	b.n	800a212 <_dtoa_r+0x942>
 800a24e:	f1ba 0f00 	cmp.w	sl, #0
 800a252:	db06      	blt.n	800a262 <_dtoa_r+0x992>
 800a254:	9906      	ldr	r1, [sp, #24]
 800a256:	ea41 0a0a 	orr.w	sl, r1, sl
 800a25a:	9907      	ldr	r1, [sp, #28]
 800a25c:	ea5a 0101 	orrs.w	r1, sl, r1
 800a260:	d120      	bne.n	800a2a4 <_dtoa_r+0x9d4>
 800a262:	2a00      	cmp	r2, #0
 800a264:	ddec      	ble.n	800a240 <_dtoa_r+0x970>
 800a266:	4629      	mov	r1, r5
 800a268:	2201      	movs	r2, #1
 800a26a:	4630      	mov	r0, r6
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	f000 fac9 	bl	800a804 <__lshift>
 800a272:	4621      	mov	r1, r4
 800a274:	4605      	mov	r5, r0
 800a276:	f000 fb35 	bl	800a8e4 <__mcmp>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	9b04      	ldr	r3, [sp, #16]
 800a27e:	dc02      	bgt.n	800a286 <_dtoa_r+0x9b6>
 800a280:	d1de      	bne.n	800a240 <_dtoa_r+0x970>
 800a282:	07da      	lsls	r2, r3, #31
 800a284:	d5dc      	bpl.n	800a240 <_dtoa_r+0x970>
 800a286:	2b39      	cmp	r3, #57	; 0x39
 800a288:	d1d8      	bne.n	800a23c <_dtoa_r+0x96c>
 800a28a:	9a02      	ldr	r2, [sp, #8]
 800a28c:	2339      	movs	r3, #57	; 0x39
 800a28e:	7013      	strb	r3, [r2, #0]
 800a290:	4643      	mov	r3, r8
 800a292:	4698      	mov	r8, r3
 800a294:	3b01      	subs	r3, #1
 800a296:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a29a:	2a39      	cmp	r2, #57	; 0x39
 800a29c:	d051      	beq.n	800a342 <_dtoa_r+0xa72>
 800a29e:	3201      	adds	r2, #1
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	e745      	b.n	800a130 <_dtoa_r+0x860>
 800a2a4:	2a00      	cmp	r2, #0
 800a2a6:	dd03      	ble.n	800a2b0 <_dtoa_r+0x9e0>
 800a2a8:	2b39      	cmp	r3, #57	; 0x39
 800a2aa:	d0ee      	beq.n	800a28a <_dtoa_r+0x9ba>
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	e7c7      	b.n	800a240 <_dtoa_r+0x970>
 800a2b0:	9a04      	ldr	r2, [sp, #16]
 800a2b2:	9908      	ldr	r1, [sp, #32]
 800a2b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2b8:	428a      	cmp	r2, r1
 800a2ba:	d02b      	beq.n	800a314 <_dtoa_r+0xa44>
 800a2bc:	4629      	mov	r1, r5
 800a2be:	2300      	movs	r3, #0
 800a2c0:	220a      	movs	r2, #10
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	f000 f8ee 	bl	800a4a4 <__multadd>
 800a2c8:	45b9      	cmp	r9, r7
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	f04f 0300 	mov.w	r3, #0
 800a2d0:	f04f 020a 	mov.w	r2, #10
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	d107      	bne.n	800a2ea <_dtoa_r+0xa1a>
 800a2da:	f000 f8e3 	bl	800a4a4 <__multadd>
 800a2de:	4681      	mov	r9, r0
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	9b04      	ldr	r3, [sp, #16]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	e774      	b.n	800a1d4 <_dtoa_r+0x904>
 800a2ea:	f000 f8db 	bl	800a4a4 <__multadd>
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	4681      	mov	r9, r0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	220a      	movs	r2, #10
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f000 f8d4 	bl	800a4a4 <__multadd>
 800a2fc:	4607      	mov	r7, r0
 800a2fe:	e7f0      	b.n	800a2e2 <_dtoa_r+0xa12>
 800a300:	f1ba 0f00 	cmp.w	sl, #0
 800a304:	9a01      	ldr	r2, [sp, #4]
 800a306:	bfcc      	ite	gt
 800a308:	46d0      	movgt	r8, sl
 800a30a:	f04f 0801 	movle.w	r8, #1
 800a30e:	4490      	add	r8, r2
 800a310:	f04f 0900 	mov.w	r9, #0
 800a314:	4629      	mov	r1, r5
 800a316:	2201      	movs	r2, #1
 800a318:	4630      	mov	r0, r6
 800a31a:	9302      	str	r3, [sp, #8]
 800a31c:	f000 fa72 	bl	800a804 <__lshift>
 800a320:	4621      	mov	r1, r4
 800a322:	4605      	mov	r5, r0
 800a324:	f000 fade 	bl	800a8e4 <__mcmp>
 800a328:	2800      	cmp	r0, #0
 800a32a:	dcb1      	bgt.n	800a290 <_dtoa_r+0x9c0>
 800a32c:	d102      	bne.n	800a334 <_dtoa_r+0xa64>
 800a32e:	9b02      	ldr	r3, [sp, #8]
 800a330:	07db      	lsls	r3, r3, #31
 800a332:	d4ad      	bmi.n	800a290 <_dtoa_r+0x9c0>
 800a334:	4643      	mov	r3, r8
 800a336:	4698      	mov	r8, r3
 800a338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a33c:	2a30      	cmp	r2, #48	; 0x30
 800a33e:	d0fa      	beq.n	800a336 <_dtoa_r+0xa66>
 800a340:	e6f6      	b.n	800a130 <_dtoa_r+0x860>
 800a342:	9a01      	ldr	r2, [sp, #4]
 800a344:	429a      	cmp	r2, r3
 800a346:	d1a4      	bne.n	800a292 <_dtoa_r+0x9c2>
 800a348:	f10b 0b01 	add.w	fp, fp, #1
 800a34c:	2331      	movs	r3, #49	; 0x31
 800a34e:	e778      	b.n	800a242 <_dtoa_r+0x972>
 800a350:	4b14      	ldr	r3, [pc, #80]	; (800a3a4 <_dtoa_r+0xad4>)
 800a352:	f7ff bb27 	b.w	80099a4 <_dtoa_r+0xd4>
 800a356:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f47f ab03 	bne.w	8009964 <_dtoa_r+0x94>
 800a35e:	4b12      	ldr	r3, [pc, #72]	; (800a3a8 <_dtoa_r+0xad8>)
 800a360:	f7ff bb20 	b.w	80099a4 <_dtoa_r+0xd4>
 800a364:	f1ba 0f00 	cmp.w	sl, #0
 800a368:	dc03      	bgt.n	800a372 <_dtoa_r+0xaa2>
 800a36a:	9b06      	ldr	r3, [sp, #24]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	f73f aec7 	bgt.w	800a100 <_dtoa_r+0x830>
 800a372:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a376:	4621      	mov	r1, r4
 800a378:	4628      	mov	r0, r5
 800a37a:	f7ff fa1b 	bl	80097b4 <quorem>
 800a37e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a382:	f808 3b01 	strb.w	r3, [r8], #1
 800a386:	9a01      	ldr	r2, [sp, #4]
 800a388:	eba8 0202 	sub.w	r2, r8, r2
 800a38c:	4592      	cmp	sl, r2
 800a38e:	ddb7      	ble.n	800a300 <_dtoa_r+0xa30>
 800a390:	4629      	mov	r1, r5
 800a392:	2300      	movs	r3, #0
 800a394:	220a      	movs	r2, #10
 800a396:	4630      	mov	r0, r6
 800a398:	f000 f884 	bl	800a4a4 <__multadd>
 800a39c:	4605      	mov	r5, r0
 800a39e:	e7ea      	b.n	800a376 <_dtoa_r+0xaa6>
 800a3a0:	0800bd33 	.word	0x0800bd33
 800a3a4:	0800bc90 	.word	0x0800bc90
 800a3a8:	0800bcb4 	.word	0x0800bcb4

0800a3ac <_localeconv_r>:
 800a3ac:	4800      	ldr	r0, [pc, #0]	; (800a3b0 <_localeconv_r+0x4>)
 800a3ae:	4770      	bx	lr
 800a3b0:	24000164 	.word	0x24000164

0800a3b4 <malloc>:
 800a3b4:	4b02      	ldr	r3, [pc, #8]	; (800a3c0 <malloc+0xc>)
 800a3b6:	4601      	mov	r1, r0
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	f000 bc17 	b.w	800abec <_malloc_r>
 800a3be:	bf00      	nop
 800a3c0:	24000010 	.word	0x24000010

0800a3c4 <memcpy>:
 800a3c4:	440a      	add	r2, r1
 800a3c6:	4291      	cmp	r1, r2
 800a3c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3cc:	d100      	bne.n	800a3d0 <memcpy+0xc>
 800a3ce:	4770      	bx	lr
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3da:	4291      	cmp	r1, r2
 800a3dc:	d1f9      	bne.n	800a3d2 <memcpy+0xe>
 800a3de:	bd10      	pop	{r4, pc}

0800a3e0 <_Balloc>:
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	460d      	mov	r5, r1
 800a3e8:	b976      	cbnz	r6, 800a408 <_Balloc+0x28>
 800a3ea:	2010      	movs	r0, #16
 800a3ec:	f7ff ffe2 	bl	800a3b4 <malloc>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	6260      	str	r0, [r4, #36]	; 0x24
 800a3f4:	b920      	cbnz	r0, 800a400 <_Balloc+0x20>
 800a3f6:	4b18      	ldr	r3, [pc, #96]	; (800a458 <_Balloc+0x78>)
 800a3f8:	4818      	ldr	r0, [pc, #96]	; (800a45c <_Balloc+0x7c>)
 800a3fa:	2166      	movs	r1, #102	; 0x66
 800a3fc:	f000 fdd6 	bl	800afac <__assert_func>
 800a400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a404:	6006      	str	r6, [r0, #0]
 800a406:	60c6      	str	r6, [r0, #12]
 800a408:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a40a:	68f3      	ldr	r3, [r6, #12]
 800a40c:	b183      	cbz	r3, 800a430 <_Balloc+0x50>
 800a40e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a416:	b9b8      	cbnz	r0, 800a448 <_Balloc+0x68>
 800a418:	2101      	movs	r1, #1
 800a41a:	fa01 f605 	lsl.w	r6, r1, r5
 800a41e:	1d72      	adds	r2, r6, #5
 800a420:	0092      	lsls	r2, r2, #2
 800a422:	4620      	mov	r0, r4
 800a424:	f000 fb60 	bl	800aae8 <_calloc_r>
 800a428:	b160      	cbz	r0, 800a444 <_Balloc+0x64>
 800a42a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a42e:	e00e      	b.n	800a44e <_Balloc+0x6e>
 800a430:	2221      	movs	r2, #33	; 0x21
 800a432:	2104      	movs	r1, #4
 800a434:	4620      	mov	r0, r4
 800a436:	f000 fb57 	bl	800aae8 <_calloc_r>
 800a43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a43c:	60f0      	str	r0, [r6, #12]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1e4      	bne.n	800a40e <_Balloc+0x2e>
 800a444:	2000      	movs	r0, #0
 800a446:	bd70      	pop	{r4, r5, r6, pc}
 800a448:	6802      	ldr	r2, [r0, #0]
 800a44a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a44e:	2300      	movs	r3, #0
 800a450:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a454:	e7f7      	b.n	800a446 <_Balloc+0x66>
 800a456:	bf00      	nop
 800a458:	0800bcc1 	.word	0x0800bcc1
 800a45c:	0800bd44 	.word	0x0800bd44

0800a460 <_Bfree>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a464:	4605      	mov	r5, r0
 800a466:	460c      	mov	r4, r1
 800a468:	b976      	cbnz	r6, 800a488 <_Bfree+0x28>
 800a46a:	2010      	movs	r0, #16
 800a46c:	f7ff ffa2 	bl	800a3b4 <malloc>
 800a470:	4602      	mov	r2, r0
 800a472:	6268      	str	r0, [r5, #36]	; 0x24
 800a474:	b920      	cbnz	r0, 800a480 <_Bfree+0x20>
 800a476:	4b09      	ldr	r3, [pc, #36]	; (800a49c <_Bfree+0x3c>)
 800a478:	4809      	ldr	r0, [pc, #36]	; (800a4a0 <_Bfree+0x40>)
 800a47a:	218a      	movs	r1, #138	; 0x8a
 800a47c:	f000 fd96 	bl	800afac <__assert_func>
 800a480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a484:	6006      	str	r6, [r0, #0]
 800a486:	60c6      	str	r6, [r0, #12]
 800a488:	b13c      	cbz	r4, 800a49a <_Bfree+0x3a>
 800a48a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a48c:	6862      	ldr	r2, [r4, #4]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a494:	6021      	str	r1, [r4, #0]
 800a496:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a49a:	bd70      	pop	{r4, r5, r6, pc}
 800a49c:	0800bcc1 	.word	0x0800bcc1
 800a4a0:	0800bd44 	.word	0x0800bd44

0800a4a4 <__multadd>:
 800a4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a8:	690d      	ldr	r5, [r1, #16]
 800a4aa:	4607      	mov	r7, r0
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	461e      	mov	r6, r3
 800a4b0:	f101 0c14 	add.w	ip, r1, #20
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a4ba:	b299      	uxth	r1, r3
 800a4bc:	fb02 6101 	mla	r1, r2, r1, r6
 800a4c0:	0c1e      	lsrs	r6, r3, #16
 800a4c2:	0c0b      	lsrs	r3, r1, #16
 800a4c4:	fb02 3306 	mla	r3, r2, r6, r3
 800a4c8:	b289      	uxth	r1, r1
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4d0:	4285      	cmp	r5, r0
 800a4d2:	f84c 1b04 	str.w	r1, [ip], #4
 800a4d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4da:	dcec      	bgt.n	800a4b6 <__multadd+0x12>
 800a4dc:	b30e      	cbz	r6, 800a522 <__multadd+0x7e>
 800a4de:	68a3      	ldr	r3, [r4, #8]
 800a4e0:	42ab      	cmp	r3, r5
 800a4e2:	dc19      	bgt.n	800a518 <__multadd+0x74>
 800a4e4:	6861      	ldr	r1, [r4, #4]
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	3101      	adds	r1, #1
 800a4ea:	f7ff ff79 	bl	800a3e0 <_Balloc>
 800a4ee:	4680      	mov	r8, r0
 800a4f0:	b928      	cbnz	r0, 800a4fe <__multadd+0x5a>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <__multadd+0x84>)
 800a4f6:	480d      	ldr	r0, [pc, #52]	; (800a52c <__multadd+0x88>)
 800a4f8:	21b5      	movs	r1, #181	; 0xb5
 800a4fa:	f000 fd57 	bl	800afac <__assert_func>
 800a4fe:	6922      	ldr	r2, [r4, #16]
 800a500:	3202      	adds	r2, #2
 800a502:	f104 010c 	add.w	r1, r4, #12
 800a506:	0092      	lsls	r2, r2, #2
 800a508:	300c      	adds	r0, #12
 800a50a:	f7ff ff5b 	bl	800a3c4 <memcpy>
 800a50e:	4621      	mov	r1, r4
 800a510:	4638      	mov	r0, r7
 800a512:	f7ff ffa5 	bl	800a460 <_Bfree>
 800a516:	4644      	mov	r4, r8
 800a518:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a51c:	3501      	adds	r5, #1
 800a51e:	615e      	str	r6, [r3, #20]
 800a520:	6125      	str	r5, [r4, #16]
 800a522:	4620      	mov	r0, r4
 800a524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a528:	0800bd33 	.word	0x0800bd33
 800a52c:	0800bd44 	.word	0x0800bd44

0800a530 <__hi0bits>:
 800a530:	0c03      	lsrs	r3, r0, #16
 800a532:	041b      	lsls	r3, r3, #16
 800a534:	b9d3      	cbnz	r3, 800a56c <__hi0bits+0x3c>
 800a536:	0400      	lsls	r0, r0, #16
 800a538:	2310      	movs	r3, #16
 800a53a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a53e:	bf04      	itt	eq
 800a540:	0200      	lsleq	r0, r0, #8
 800a542:	3308      	addeq	r3, #8
 800a544:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a548:	bf04      	itt	eq
 800a54a:	0100      	lsleq	r0, r0, #4
 800a54c:	3304      	addeq	r3, #4
 800a54e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a552:	bf04      	itt	eq
 800a554:	0080      	lsleq	r0, r0, #2
 800a556:	3302      	addeq	r3, #2
 800a558:	2800      	cmp	r0, #0
 800a55a:	db05      	blt.n	800a568 <__hi0bits+0x38>
 800a55c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a560:	f103 0301 	add.w	r3, r3, #1
 800a564:	bf08      	it	eq
 800a566:	2320      	moveq	r3, #32
 800a568:	4618      	mov	r0, r3
 800a56a:	4770      	bx	lr
 800a56c:	2300      	movs	r3, #0
 800a56e:	e7e4      	b.n	800a53a <__hi0bits+0xa>

0800a570 <__lo0bits>:
 800a570:	6803      	ldr	r3, [r0, #0]
 800a572:	f013 0207 	ands.w	r2, r3, #7
 800a576:	4601      	mov	r1, r0
 800a578:	d00b      	beq.n	800a592 <__lo0bits+0x22>
 800a57a:	07da      	lsls	r2, r3, #31
 800a57c:	d423      	bmi.n	800a5c6 <__lo0bits+0x56>
 800a57e:	0798      	lsls	r0, r3, #30
 800a580:	bf49      	itett	mi
 800a582:	085b      	lsrmi	r3, r3, #1
 800a584:	089b      	lsrpl	r3, r3, #2
 800a586:	2001      	movmi	r0, #1
 800a588:	600b      	strmi	r3, [r1, #0]
 800a58a:	bf5c      	itt	pl
 800a58c:	600b      	strpl	r3, [r1, #0]
 800a58e:	2002      	movpl	r0, #2
 800a590:	4770      	bx	lr
 800a592:	b298      	uxth	r0, r3
 800a594:	b9a8      	cbnz	r0, 800a5c2 <__lo0bits+0x52>
 800a596:	0c1b      	lsrs	r3, r3, #16
 800a598:	2010      	movs	r0, #16
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	b90a      	cbnz	r2, 800a5a2 <__lo0bits+0x32>
 800a59e:	3008      	adds	r0, #8
 800a5a0:	0a1b      	lsrs	r3, r3, #8
 800a5a2:	071a      	lsls	r2, r3, #28
 800a5a4:	bf04      	itt	eq
 800a5a6:	091b      	lsreq	r3, r3, #4
 800a5a8:	3004      	addeq	r0, #4
 800a5aa:	079a      	lsls	r2, r3, #30
 800a5ac:	bf04      	itt	eq
 800a5ae:	089b      	lsreq	r3, r3, #2
 800a5b0:	3002      	addeq	r0, #2
 800a5b2:	07da      	lsls	r2, r3, #31
 800a5b4:	d403      	bmi.n	800a5be <__lo0bits+0x4e>
 800a5b6:	085b      	lsrs	r3, r3, #1
 800a5b8:	f100 0001 	add.w	r0, r0, #1
 800a5bc:	d005      	beq.n	800a5ca <__lo0bits+0x5a>
 800a5be:	600b      	str	r3, [r1, #0]
 800a5c0:	4770      	bx	lr
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	e7e9      	b.n	800a59a <__lo0bits+0x2a>
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	4770      	bx	lr
 800a5ca:	2020      	movs	r0, #32
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <__i2b>:
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	f7ff ff03 	bl	800a3e0 <_Balloc>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	b928      	cbnz	r0, 800a5ea <__i2b+0x1a>
 800a5de:	4b05      	ldr	r3, [pc, #20]	; (800a5f4 <__i2b+0x24>)
 800a5e0:	4805      	ldr	r0, [pc, #20]	; (800a5f8 <__i2b+0x28>)
 800a5e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5e6:	f000 fce1 	bl	800afac <__assert_func>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	6144      	str	r4, [r0, #20]
 800a5ee:	6103      	str	r3, [r0, #16]
 800a5f0:	bd10      	pop	{r4, pc}
 800a5f2:	bf00      	nop
 800a5f4:	0800bd33 	.word	0x0800bd33
 800a5f8:	0800bd44 	.word	0x0800bd44

0800a5fc <__multiply>:
 800a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a600:	4691      	mov	r9, r2
 800a602:	690a      	ldr	r2, [r1, #16]
 800a604:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a608:	429a      	cmp	r2, r3
 800a60a:	bfb8      	it	lt
 800a60c:	460b      	movlt	r3, r1
 800a60e:	460c      	mov	r4, r1
 800a610:	bfbc      	itt	lt
 800a612:	464c      	movlt	r4, r9
 800a614:	4699      	movlt	r9, r3
 800a616:	6927      	ldr	r7, [r4, #16]
 800a618:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a61c:	68a3      	ldr	r3, [r4, #8]
 800a61e:	6861      	ldr	r1, [r4, #4]
 800a620:	eb07 060a 	add.w	r6, r7, sl
 800a624:	42b3      	cmp	r3, r6
 800a626:	b085      	sub	sp, #20
 800a628:	bfb8      	it	lt
 800a62a:	3101      	addlt	r1, #1
 800a62c:	f7ff fed8 	bl	800a3e0 <_Balloc>
 800a630:	b930      	cbnz	r0, 800a640 <__multiply+0x44>
 800a632:	4602      	mov	r2, r0
 800a634:	4b44      	ldr	r3, [pc, #272]	; (800a748 <__multiply+0x14c>)
 800a636:	4845      	ldr	r0, [pc, #276]	; (800a74c <__multiply+0x150>)
 800a638:	f240 115d 	movw	r1, #349	; 0x15d
 800a63c:	f000 fcb6 	bl	800afac <__assert_func>
 800a640:	f100 0514 	add.w	r5, r0, #20
 800a644:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a648:	462b      	mov	r3, r5
 800a64a:	2200      	movs	r2, #0
 800a64c:	4543      	cmp	r3, r8
 800a64e:	d321      	bcc.n	800a694 <__multiply+0x98>
 800a650:	f104 0314 	add.w	r3, r4, #20
 800a654:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a658:	f109 0314 	add.w	r3, r9, #20
 800a65c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a660:	9202      	str	r2, [sp, #8]
 800a662:	1b3a      	subs	r2, r7, r4
 800a664:	3a15      	subs	r2, #21
 800a666:	f022 0203 	bic.w	r2, r2, #3
 800a66a:	3204      	adds	r2, #4
 800a66c:	f104 0115 	add.w	r1, r4, #21
 800a670:	428f      	cmp	r7, r1
 800a672:	bf38      	it	cc
 800a674:	2204      	movcc	r2, #4
 800a676:	9201      	str	r2, [sp, #4]
 800a678:	9a02      	ldr	r2, [sp, #8]
 800a67a:	9303      	str	r3, [sp, #12]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d80c      	bhi.n	800a69a <__multiply+0x9e>
 800a680:	2e00      	cmp	r6, #0
 800a682:	dd03      	ble.n	800a68c <__multiply+0x90>
 800a684:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d05a      	beq.n	800a742 <__multiply+0x146>
 800a68c:	6106      	str	r6, [r0, #16]
 800a68e:	b005      	add	sp, #20
 800a690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a694:	f843 2b04 	str.w	r2, [r3], #4
 800a698:	e7d8      	b.n	800a64c <__multiply+0x50>
 800a69a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a69e:	f1ba 0f00 	cmp.w	sl, #0
 800a6a2:	d024      	beq.n	800a6ee <__multiply+0xf2>
 800a6a4:	f104 0e14 	add.w	lr, r4, #20
 800a6a8:	46a9      	mov	r9, r5
 800a6aa:	f04f 0c00 	mov.w	ip, #0
 800a6ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a6b2:	f8d9 1000 	ldr.w	r1, [r9]
 800a6b6:	fa1f fb82 	uxth.w	fp, r2
 800a6ba:	b289      	uxth	r1, r1
 800a6bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a6c4:	f8d9 2000 	ldr.w	r2, [r9]
 800a6c8:	4461      	add	r1, ip
 800a6ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6d6:	b289      	uxth	r1, r1
 800a6d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6dc:	4577      	cmp	r7, lr
 800a6de:	f849 1b04 	str.w	r1, [r9], #4
 800a6e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6e6:	d8e2      	bhi.n	800a6ae <__multiply+0xb2>
 800a6e8:	9a01      	ldr	r2, [sp, #4]
 800a6ea:	f845 c002 	str.w	ip, [r5, r2]
 800a6ee:	9a03      	ldr	r2, [sp, #12]
 800a6f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	f1b9 0f00 	cmp.w	r9, #0
 800a6fa:	d020      	beq.n	800a73e <__multiply+0x142>
 800a6fc:	6829      	ldr	r1, [r5, #0]
 800a6fe:	f104 0c14 	add.w	ip, r4, #20
 800a702:	46ae      	mov	lr, r5
 800a704:	f04f 0a00 	mov.w	sl, #0
 800a708:	f8bc b000 	ldrh.w	fp, [ip]
 800a70c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a710:	fb09 220b 	mla	r2, r9, fp, r2
 800a714:	4492      	add	sl, r2
 800a716:	b289      	uxth	r1, r1
 800a718:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a71c:	f84e 1b04 	str.w	r1, [lr], #4
 800a720:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a724:	f8be 1000 	ldrh.w	r1, [lr]
 800a728:	0c12      	lsrs	r2, r2, #16
 800a72a:	fb09 1102 	mla	r1, r9, r2, r1
 800a72e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a732:	4567      	cmp	r7, ip
 800a734:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a738:	d8e6      	bhi.n	800a708 <__multiply+0x10c>
 800a73a:	9a01      	ldr	r2, [sp, #4]
 800a73c:	50a9      	str	r1, [r5, r2]
 800a73e:	3504      	adds	r5, #4
 800a740:	e79a      	b.n	800a678 <__multiply+0x7c>
 800a742:	3e01      	subs	r6, #1
 800a744:	e79c      	b.n	800a680 <__multiply+0x84>
 800a746:	bf00      	nop
 800a748:	0800bd33 	.word	0x0800bd33
 800a74c:	0800bd44 	.word	0x0800bd44

0800a750 <__pow5mult>:
 800a750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a754:	4615      	mov	r5, r2
 800a756:	f012 0203 	ands.w	r2, r2, #3
 800a75a:	4606      	mov	r6, r0
 800a75c:	460f      	mov	r7, r1
 800a75e:	d007      	beq.n	800a770 <__pow5mult+0x20>
 800a760:	4c25      	ldr	r4, [pc, #148]	; (800a7f8 <__pow5mult+0xa8>)
 800a762:	3a01      	subs	r2, #1
 800a764:	2300      	movs	r3, #0
 800a766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a76a:	f7ff fe9b 	bl	800a4a4 <__multadd>
 800a76e:	4607      	mov	r7, r0
 800a770:	10ad      	asrs	r5, r5, #2
 800a772:	d03d      	beq.n	800a7f0 <__pow5mult+0xa0>
 800a774:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a776:	b97c      	cbnz	r4, 800a798 <__pow5mult+0x48>
 800a778:	2010      	movs	r0, #16
 800a77a:	f7ff fe1b 	bl	800a3b4 <malloc>
 800a77e:	4602      	mov	r2, r0
 800a780:	6270      	str	r0, [r6, #36]	; 0x24
 800a782:	b928      	cbnz	r0, 800a790 <__pow5mult+0x40>
 800a784:	4b1d      	ldr	r3, [pc, #116]	; (800a7fc <__pow5mult+0xac>)
 800a786:	481e      	ldr	r0, [pc, #120]	; (800a800 <__pow5mult+0xb0>)
 800a788:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a78c:	f000 fc0e 	bl	800afac <__assert_func>
 800a790:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a794:	6004      	str	r4, [r0, #0]
 800a796:	60c4      	str	r4, [r0, #12]
 800a798:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a79c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7a0:	b94c      	cbnz	r4, 800a7b6 <__pow5mult+0x66>
 800a7a2:	f240 2171 	movw	r1, #625	; 0x271
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f7ff ff12 	bl	800a5d0 <__i2b>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	6003      	str	r3, [r0, #0]
 800a7b6:	f04f 0900 	mov.w	r9, #0
 800a7ba:	07eb      	lsls	r3, r5, #31
 800a7bc:	d50a      	bpl.n	800a7d4 <__pow5mult+0x84>
 800a7be:	4639      	mov	r1, r7
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f7ff ff1a 	bl	800a5fc <__multiply>
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	4680      	mov	r8, r0
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	f7ff fe47 	bl	800a460 <_Bfree>
 800a7d2:	4647      	mov	r7, r8
 800a7d4:	106d      	asrs	r5, r5, #1
 800a7d6:	d00b      	beq.n	800a7f0 <__pow5mult+0xa0>
 800a7d8:	6820      	ldr	r0, [r4, #0]
 800a7da:	b938      	cbnz	r0, 800a7ec <__pow5mult+0x9c>
 800a7dc:	4622      	mov	r2, r4
 800a7de:	4621      	mov	r1, r4
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7ff ff0b 	bl	800a5fc <__multiply>
 800a7e6:	6020      	str	r0, [r4, #0]
 800a7e8:	f8c0 9000 	str.w	r9, [r0]
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	e7e4      	b.n	800a7ba <__pow5mult+0x6a>
 800a7f0:	4638      	mov	r0, r7
 800a7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7f6:	bf00      	nop
 800a7f8:	0800be90 	.word	0x0800be90
 800a7fc:	0800bcc1 	.word	0x0800bcc1
 800a800:	0800bd44 	.word	0x0800bd44

0800a804 <__lshift>:
 800a804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a808:	460c      	mov	r4, r1
 800a80a:	6849      	ldr	r1, [r1, #4]
 800a80c:	6923      	ldr	r3, [r4, #16]
 800a80e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a812:	68a3      	ldr	r3, [r4, #8]
 800a814:	4607      	mov	r7, r0
 800a816:	4691      	mov	r9, r2
 800a818:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a81c:	f108 0601 	add.w	r6, r8, #1
 800a820:	42b3      	cmp	r3, r6
 800a822:	db0b      	blt.n	800a83c <__lshift+0x38>
 800a824:	4638      	mov	r0, r7
 800a826:	f7ff fddb 	bl	800a3e0 <_Balloc>
 800a82a:	4605      	mov	r5, r0
 800a82c:	b948      	cbnz	r0, 800a842 <__lshift+0x3e>
 800a82e:	4602      	mov	r2, r0
 800a830:	4b2a      	ldr	r3, [pc, #168]	; (800a8dc <__lshift+0xd8>)
 800a832:	482b      	ldr	r0, [pc, #172]	; (800a8e0 <__lshift+0xdc>)
 800a834:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a838:	f000 fbb8 	bl	800afac <__assert_func>
 800a83c:	3101      	adds	r1, #1
 800a83e:	005b      	lsls	r3, r3, #1
 800a840:	e7ee      	b.n	800a820 <__lshift+0x1c>
 800a842:	2300      	movs	r3, #0
 800a844:	f100 0114 	add.w	r1, r0, #20
 800a848:	f100 0210 	add.w	r2, r0, #16
 800a84c:	4618      	mov	r0, r3
 800a84e:	4553      	cmp	r3, sl
 800a850:	db37      	blt.n	800a8c2 <__lshift+0xbe>
 800a852:	6920      	ldr	r0, [r4, #16]
 800a854:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a858:	f104 0314 	add.w	r3, r4, #20
 800a85c:	f019 091f 	ands.w	r9, r9, #31
 800a860:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a864:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a868:	d02f      	beq.n	800a8ca <__lshift+0xc6>
 800a86a:	f1c9 0e20 	rsb	lr, r9, #32
 800a86e:	468a      	mov	sl, r1
 800a870:	f04f 0c00 	mov.w	ip, #0
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	fa02 f209 	lsl.w	r2, r2, r9
 800a87a:	ea42 020c 	orr.w	r2, r2, ip
 800a87e:	f84a 2b04 	str.w	r2, [sl], #4
 800a882:	f853 2b04 	ldr.w	r2, [r3], #4
 800a886:	4298      	cmp	r0, r3
 800a888:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a88c:	d8f2      	bhi.n	800a874 <__lshift+0x70>
 800a88e:	1b03      	subs	r3, r0, r4
 800a890:	3b15      	subs	r3, #21
 800a892:	f023 0303 	bic.w	r3, r3, #3
 800a896:	3304      	adds	r3, #4
 800a898:	f104 0215 	add.w	r2, r4, #21
 800a89c:	4290      	cmp	r0, r2
 800a89e:	bf38      	it	cc
 800a8a0:	2304      	movcc	r3, #4
 800a8a2:	f841 c003 	str.w	ip, [r1, r3]
 800a8a6:	f1bc 0f00 	cmp.w	ip, #0
 800a8aa:	d001      	beq.n	800a8b0 <__lshift+0xac>
 800a8ac:	f108 0602 	add.w	r6, r8, #2
 800a8b0:	3e01      	subs	r6, #1
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	612e      	str	r6, [r5, #16]
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	f7ff fdd2 	bl	800a460 <_Bfree>
 800a8bc:	4628      	mov	r0, r5
 800a8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	e7c1      	b.n	800a84e <__lshift+0x4a>
 800a8ca:	3904      	subs	r1, #4
 800a8cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8d4:	4298      	cmp	r0, r3
 800a8d6:	d8f9      	bhi.n	800a8cc <__lshift+0xc8>
 800a8d8:	e7ea      	b.n	800a8b0 <__lshift+0xac>
 800a8da:	bf00      	nop
 800a8dc:	0800bd33 	.word	0x0800bd33
 800a8e0:	0800bd44 	.word	0x0800bd44

0800a8e4 <__mcmp>:
 800a8e4:	b530      	push	{r4, r5, lr}
 800a8e6:	6902      	ldr	r2, [r0, #16]
 800a8e8:	690c      	ldr	r4, [r1, #16]
 800a8ea:	1b12      	subs	r2, r2, r4
 800a8ec:	d10e      	bne.n	800a90c <__mcmp+0x28>
 800a8ee:	f100 0314 	add.w	r3, r0, #20
 800a8f2:	3114      	adds	r1, #20
 800a8f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a900:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a904:	42a5      	cmp	r5, r4
 800a906:	d003      	beq.n	800a910 <__mcmp+0x2c>
 800a908:	d305      	bcc.n	800a916 <__mcmp+0x32>
 800a90a:	2201      	movs	r2, #1
 800a90c:	4610      	mov	r0, r2
 800a90e:	bd30      	pop	{r4, r5, pc}
 800a910:	4283      	cmp	r3, r0
 800a912:	d3f3      	bcc.n	800a8fc <__mcmp+0x18>
 800a914:	e7fa      	b.n	800a90c <__mcmp+0x28>
 800a916:	f04f 32ff 	mov.w	r2, #4294967295
 800a91a:	e7f7      	b.n	800a90c <__mcmp+0x28>

0800a91c <__mdiff>:
 800a91c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a920:	460c      	mov	r4, r1
 800a922:	4606      	mov	r6, r0
 800a924:	4611      	mov	r1, r2
 800a926:	4620      	mov	r0, r4
 800a928:	4690      	mov	r8, r2
 800a92a:	f7ff ffdb 	bl	800a8e4 <__mcmp>
 800a92e:	1e05      	subs	r5, r0, #0
 800a930:	d110      	bne.n	800a954 <__mdiff+0x38>
 800a932:	4629      	mov	r1, r5
 800a934:	4630      	mov	r0, r6
 800a936:	f7ff fd53 	bl	800a3e0 <_Balloc>
 800a93a:	b930      	cbnz	r0, 800a94a <__mdiff+0x2e>
 800a93c:	4b3a      	ldr	r3, [pc, #232]	; (800aa28 <__mdiff+0x10c>)
 800a93e:	4602      	mov	r2, r0
 800a940:	f240 2132 	movw	r1, #562	; 0x232
 800a944:	4839      	ldr	r0, [pc, #228]	; (800aa2c <__mdiff+0x110>)
 800a946:	f000 fb31 	bl	800afac <__assert_func>
 800a94a:	2301      	movs	r3, #1
 800a94c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a954:	bfa4      	itt	ge
 800a956:	4643      	movge	r3, r8
 800a958:	46a0      	movge	r8, r4
 800a95a:	4630      	mov	r0, r6
 800a95c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a960:	bfa6      	itte	ge
 800a962:	461c      	movge	r4, r3
 800a964:	2500      	movge	r5, #0
 800a966:	2501      	movlt	r5, #1
 800a968:	f7ff fd3a 	bl	800a3e0 <_Balloc>
 800a96c:	b920      	cbnz	r0, 800a978 <__mdiff+0x5c>
 800a96e:	4b2e      	ldr	r3, [pc, #184]	; (800aa28 <__mdiff+0x10c>)
 800a970:	4602      	mov	r2, r0
 800a972:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a976:	e7e5      	b.n	800a944 <__mdiff+0x28>
 800a978:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a97c:	6926      	ldr	r6, [r4, #16]
 800a97e:	60c5      	str	r5, [r0, #12]
 800a980:	f104 0914 	add.w	r9, r4, #20
 800a984:	f108 0514 	add.w	r5, r8, #20
 800a988:	f100 0e14 	add.w	lr, r0, #20
 800a98c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a990:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a994:	f108 0210 	add.w	r2, r8, #16
 800a998:	46f2      	mov	sl, lr
 800a99a:	2100      	movs	r1, #0
 800a99c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9a4:	fa1f f883 	uxth.w	r8, r3
 800a9a8:	fa11 f18b 	uxtah	r1, r1, fp
 800a9ac:	0c1b      	lsrs	r3, r3, #16
 800a9ae:	eba1 0808 	sub.w	r8, r1, r8
 800a9b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9ba:	fa1f f888 	uxth.w	r8, r8
 800a9be:	1419      	asrs	r1, r3, #16
 800a9c0:	454e      	cmp	r6, r9
 800a9c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9c6:	f84a 3b04 	str.w	r3, [sl], #4
 800a9ca:	d8e7      	bhi.n	800a99c <__mdiff+0x80>
 800a9cc:	1b33      	subs	r3, r6, r4
 800a9ce:	3b15      	subs	r3, #21
 800a9d0:	f023 0303 	bic.w	r3, r3, #3
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	3415      	adds	r4, #21
 800a9d8:	42a6      	cmp	r6, r4
 800a9da:	bf38      	it	cc
 800a9dc:	2304      	movcc	r3, #4
 800a9de:	441d      	add	r5, r3
 800a9e0:	4473      	add	r3, lr
 800a9e2:	469e      	mov	lr, r3
 800a9e4:	462e      	mov	r6, r5
 800a9e6:	4566      	cmp	r6, ip
 800a9e8:	d30e      	bcc.n	800aa08 <__mdiff+0xec>
 800a9ea:	f10c 0203 	add.w	r2, ip, #3
 800a9ee:	1b52      	subs	r2, r2, r5
 800a9f0:	f022 0203 	bic.w	r2, r2, #3
 800a9f4:	3d03      	subs	r5, #3
 800a9f6:	45ac      	cmp	ip, r5
 800a9f8:	bf38      	it	cc
 800a9fa:	2200      	movcc	r2, #0
 800a9fc:	441a      	add	r2, r3
 800a9fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa02:	b17b      	cbz	r3, 800aa24 <__mdiff+0x108>
 800aa04:	6107      	str	r7, [r0, #16]
 800aa06:	e7a3      	b.n	800a950 <__mdiff+0x34>
 800aa08:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa0c:	fa11 f288 	uxtah	r2, r1, r8
 800aa10:	1414      	asrs	r4, r2, #16
 800aa12:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa16:	b292      	uxth	r2, r2
 800aa18:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa1c:	f84e 2b04 	str.w	r2, [lr], #4
 800aa20:	1421      	asrs	r1, r4, #16
 800aa22:	e7e0      	b.n	800a9e6 <__mdiff+0xca>
 800aa24:	3f01      	subs	r7, #1
 800aa26:	e7ea      	b.n	800a9fe <__mdiff+0xe2>
 800aa28:	0800bd33 	.word	0x0800bd33
 800aa2c:	0800bd44 	.word	0x0800bd44

0800aa30 <__d2b>:
 800aa30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa34:	4689      	mov	r9, r1
 800aa36:	2101      	movs	r1, #1
 800aa38:	ec57 6b10 	vmov	r6, r7, d0
 800aa3c:	4690      	mov	r8, r2
 800aa3e:	f7ff fccf 	bl	800a3e0 <_Balloc>
 800aa42:	4604      	mov	r4, r0
 800aa44:	b930      	cbnz	r0, 800aa54 <__d2b+0x24>
 800aa46:	4602      	mov	r2, r0
 800aa48:	4b25      	ldr	r3, [pc, #148]	; (800aae0 <__d2b+0xb0>)
 800aa4a:	4826      	ldr	r0, [pc, #152]	; (800aae4 <__d2b+0xb4>)
 800aa4c:	f240 310a 	movw	r1, #778	; 0x30a
 800aa50:	f000 faac 	bl	800afac <__assert_func>
 800aa54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa5c:	bb35      	cbnz	r5, 800aaac <__d2b+0x7c>
 800aa5e:	2e00      	cmp	r6, #0
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	d028      	beq.n	800aab6 <__d2b+0x86>
 800aa64:	4668      	mov	r0, sp
 800aa66:	9600      	str	r6, [sp, #0]
 800aa68:	f7ff fd82 	bl	800a570 <__lo0bits>
 800aa6c:	9900      	ldr	r1, [sp, #0]
 800aa6e:	b300      	cbz	r0, 800aab2 <__d2b+0x82>
 800aa70:	9a01      	ldr	r2, [sp, #4]
 800aa72:	f1c0 0320 	rsb	r3, r0, #32
 800aa76:	fa02 f303 	lsl.w	r3, r2, r3
 800aa7a:	430b      	orrs	r3, r1
 800aa7c:	40c2      	lsrs	r2, r0
 800aa7e:	6163      	str	r3, [r4, #20]
 800aa80:	9201      	str	r2, [sp, #4]
 800aa82:	9b01      	ldr	r3, [sp, #4]
 800aa84:	61a3      	str	r3, [r4, #24]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	bf14      	ite	ne
 800aa8a:	2202      	movne	r2, #2
 800aa8c:	2201      	moveq	r2, #1
 800aa8e:	6122      	str	r2, [r4, #16]
 800aa90:	b1d5      	cbz	r5, 800aac8 <__d2b+0x98>
 800aa92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa96:	4405      	add	r5, r0
 800aa98:	f8c9 5000 	str.w	r5, [r9]
 800aa9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aaa0:	f8c8 0000 	str.w	r0, [r8]
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	b003      	add	sp, #12
 800aaa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aab0:	e7d5      	b.n	800aa5e <__d2b+0x2e>
 800aab2:	6161      	str	r1, [r4, #20]
 800aab4:	e7e5      	b.n	800aa82 <__d2b+0x52>
 800aab6:	a801      	add	r0, sp, #4
 800aab8:	f7ff fd5a 	bl	800a570 <__lo0bits>
 800aabc:	9b01      	ldr	r3, [sp, #4]
 800aabe:	6163      	str	r3, [r4, #20]
 800aac0:	2201      	movs	r2, #1
 800aac2:	6122      	str	r2, [r4, #16]
 800aac4:	3020      	adds	r0, #32
 800aac6:	e7e3      	b.n	800aa90 <__d2b+0x60>
 800aac8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aacc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aad0:	f8c9 0000 	str.w	r0, [r9]
 800aad4:	6918      	ldr	r0, [r3, #16]
 800aad6:	f7ff fd2b 	bl	800a530 <__hi0bits>
 800aada:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aade:	e7df      	b.n	800aaa0 <__d2b+0x70>
 800aae0:	0800bd33 	.word	0x0800bd33
 800aae4:	0800bd44 	.word	0x0800bd44

0800aae8 <_calloc_r>:
 800aae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaea:	fba1 2402 	umull	r2, r4, r1, r2
 800aaee:	b94c      	cbnz	r4, 800ab04 <_calloc_r+0x1c>
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	9201      	str	r2, [sp, #4]
 800aaf4:	f000 f87a 	bl	800abec <_malloc_r>
 800aaf8:	9a01      	ldr	r2, [sp, #4]
 800aafa:	4605      	mov	r5, r0
 800aafc:	b930      	cbnz	r0, 800ab0c <_calloc_r+0x24>
 800aafe:	4628      	mov	r0, r5
 800ab00:	b003      	add	sp, #12
 800ab02:	bd30      	pop	{r4, r5, pc}
 800ab04:	220c      	movs	r2, #12
 800ab06:	6002      	str	r2, [r0, #0]
 800ab08:	2500      	movs	r5, #0
 800ab0a:	e7f8      	b.n	800aafe <_calloc_r+0x16>
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	f7fe f9e7 	bl	8008ee0 <memset>
 800ab12:	e7f4      	b.n	800aafe <_calloc_r+0x16>

0800ab14 <_free_r>:
 800ab14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab16:	2900      	cmp	r1, #0
 800ab18:	d044      	beq.n	800aba4 <_free_r+0x90>
 800ab1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab1e:	9001      	str	r0, [sp, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f1a1 0404 	sub.w	r4, r1, #4
 800ab26:	bfb8      	it	lt
 800ab28:	18e4      	addlt	r4, r4, r3
 800ab2a:	f000 fa9b 	bl	800b064 <__malloc_lock>
 800ab2e:	4a1e      	ldr	r2, [pc, #120]	; (800aba8 <_free_r+0x94>)
 800ab30:	9801      	ldr	r0, [sp, #4]
 800ab32:	6813      	ldr	r3, [r2, #0]
 800ab34:	b933      	cbnz	r3, 800ab44 <_free_r+0x30>
 800ab36:	6063      	str	r3, [r4, #4]
 800ab38:	6014      	str	r4, [r2, #0]
 800ab3a:	b003      	add	sp, #12
 800ab3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab40:	f000 ba96 	b.w	800b070 <__malloc_unlock>
 800ab44:	42a3      	cmp	r3, r4
 800ab46:	d908      	bls.n	800ab5a <_free_r+0x46>
 800ab48:	6825      	ldr	r5, [r4, #0]
 800ab4a:	1961      	adds	r1, r4, r5
 800ab4c:	428b      	cmp	r3, r1
 800ab4e:	bf01      	itttt	eq
 800ab50:	6819      	ldreq	r1, [r3, #0]
 800ab52:	685b      	ldreq	r3, [r3, #4]
 800ab54:	1949      	addeq	r1, r1, r5
 800ab56:	6021      	streq	r1, [r4, #0]
 800ab58:	e7ed      	b.n	800ab36 <_free_r+0x22>
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	b10b      	cbz	r3, 800ab64 <_free_r+0x50>
 800ab60:	42a3      	cmp	r3, r4
 800ab62:	d9fa      	bls.n	800ab5a <_free_r+0x46>
 800ab64:	6811      	ldr	r1, [r2, #0]
 800ab66:	1855      	adds	r5, r2, r1
 800ab68:	42a5      	cmp	r5, r4
 800ab6a:	d10b      	bne.n	800ab84 <_free_r+0x70>
 800ab6c:	6824      	ldr	r4, [r4, #0]
 800ab6e:	4421      	add	r1, r4
 800ab70:	1854      	adds	r4, r2, r1
 800ab72:	42a3      	cmp	r3, r4
 800ab74:	6011      	str	r1, [r2, #0]
 800ab76:	d1e0      	bne.n	800ab3a <_free_r+0x26>
 800ab78:	681c      	ldr	r4, [r3, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	6053      	str	r3, [r2, #4]
 800ab7e:	4421      	add	r1, r4
 800ab80:	6011      	str	r1, [r2, #0]
 800ab82:	e7da      	b.n	800ab3a <_free_r+0x26>
 800ab84:	d902      	bls.n	800ab8c <_free_r+0x78>
 800ab86:	230c      	movs	r3, #12
 800ab88:	6003      	str	r3, [r0, #0]
 800ab8a:	e7d6      	b.n	800ab3a <_free_r+0x26>
 800ab8c:	6825      	ldr	r5, [r4, #0]
 800ab8e:	1961      	adds	r1, r4, r5
 800ab90:	428b      	cmp	r3, r1
 800ab92:	bf04      	itt	eq
 800ab94:	6819      	ldreq	r1, [r3, #0]
 800ab96:	685b      	ldreq	r3, [r3, #4]
 800ab98:	6063      	str	r3, [r4, #4]
 800ab9a:	bf04      	itt	eq
 800ab9c:	1949      	addeq	r1, r1, r5
 800ab9e:	6021      	streq	r1, [r4, #0]
 800aba0:	6054      	str	r4, [r2, #4]
 800aba2:	e7ca      	b.n	800ab3a <_free_r+0x26>
 800aba4:	b003      	add	sp, #12
 800aba6:	bd30      	pop	{r4, r5, pc}
 800aba8:	24000854 	.word	0x24000854

0800abac <sbrk_aligned>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	4e0e      	ldr	r6, [pc, #56]	; (800abe8 <sbrk_aligned+0x3c>)
 800abb0:	460c      	mov	r4, r1
 800abb2:	6831      	ldr	r1, [r6, #0]
 800abb4:	4605      	mov	r5, r0
 800abb6:	b911      	cbnz	r1, 800abbe <sbrk_aligned+0x12>
 800abb8:	f000 f9e8 	bl	800af8c <_sbrk_r>
 800abbc:	6030      	str	r0, [r6, #0]
 800abbe:	4621      	mov	r1, r4
 800abc0:	4628      	mov	r0, r5
 800abc2:	f000 f9e3 	bl	800af8c <_sbrk_r>
 800abc6:	1c43      	adds	r3, r0, #1
 800abc8:	d00a      	beq.n	800abe0 <sbrk_aligned+0x34>
 800abca:	1cc4      	adds	r4, r0, #3
 800abcc:	f024 0403 	bic.w	r4, r4, #3
 800abd0:	42a0      	cmp	r0, r4
 800abd2:	d007      	beq.n	800abe4 <sbrk_aligned+0x38>
 800abd4:	1a21      	subs	r1, r4, r0
 800abd6:	4628      	mov	r0, r5
 800abd8:	f000 f9d8 	bl	800af8c <_sbrk_r>
 800abdc:	3001      	adds	r0, #1
 800abde:	d101      	bne.n	800abe4 <sbrk_aligned+0x38>
 800abe0:	f04f 34ff 	mov.w	r4, #4294967295
 800abe4:	4620      	mov	r0, r4
 800abe6:	bd70      	pop	{r4, r5, r6, pc}
 800abe8:	24000858 	.word	0x24000858

0800abec <_malloc_r>:
 800abec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf0:	1ccd      	adds	r5, r1, #3
 800abf2:	f025 0503 	bic.w	r5, r5, #3
 800abf6:	3508      	adds	r5, #8
 800abf8:	2d0c      	cmp	r5, #12
 800abfa:	bf38      	it	cc
 800abfc:	250c      	movcc	r5, #12
 800abfe:	2d00      	cmp	r5, #0
 800ac00:	4607      	mov	r7, r0
 800ac02:	db01      	blt.n	800ac08 <_malloc_r+0x1c>
 800ac04:	42a9      	cmp	r1, r5
 800ac06:	d905      	bls.n	800ac14 <_malloc_r+0x28>
 800ac08:	230c      	movs	r3, #12
 800ac0a:	603b      	str	r3, [r7, #0]
 800ac0c:	2600      	movs	r6, #0
 800ac0e:	4630      	mov	r0, r6
 800ac10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac14:	4e2e      	ldr	r6, [pc, #184]	; (800acd0 <_malloc_r+0xe4>)
 800ac16:	f000 fa25 	bl	800b064 <__malloc_lock>
 800ac1a:	6833      	ldr	r3, [r6, #0]
 800ac1c:	461c      	mov	r4, r3
 800ac1e:	bb34      	cbnz	r4, 800ac6e <_malloc_r+0x82>
 800ac20:	4629      	mov	r1, r5
 800ac22:	4638      	mov	r0, r7
 800ac24:	f7ff ffc2 	bl	800abac <sbrk_aligned>
 800ac28:	1c43      	adds	r3, r0, #1
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	d14d      	bne.n	800acca <_malloc_r+0xde>
 800ac2e:	6834      	ldr	r4, [r6, #0]
 800ac30:	4626      	mov	r6, r4
 800ac32:	2e00      	cmp	r6, #0
 800ac34:	d140      	bne.n	800acb8 <_malloc_r+0xcc>
 800ac36:	6823      	ldr	r3, [r4, #0]
 800ac38:	4631      	mov	r1, r6
 800ac3a:	4638      	mov	r0, r7
 800ac3c:	eb04 0803 	add.w	r8, r4, r3
 800ac40:	f000 f9a4 	bl	800af8c <_sbrk_r>
 800ac44:	4580      	cmp	r8, r0
 800ac46:	d13a      	bne.n	800acbe <_malloc_r+0xd2>
 800ac48:	6821      	ldr	r1, [r4, #0]
 800ac4a:	3503      	adds	r5, #3
 800ac4c:	1a6d      	subs	r5, r5, r1
 800ac4e:	f025 0503 	bic.w	r5, r5, #3
 800ac52:	3508      	adds	r5, #8
 800ac54:	2d0c      	cmp	r5, #12
 800ac56:	bf38      	it	cc
 800ac58:	250c      	movcc	r5, #12
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	4638      	mov	r0, r7
 800ac5e:	f7ff ffa5 	bl	800abac <sbrk_aligned>
 800ac62:	3001      	adds	r0, #1
 800ac64:	d02b      	beq.n	800acbe <_malloc_r+0xd2>
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	442b      	add	r3, r5
 800ac6a:	6023      	str	r3, [r4, #0]
 800ac6c:	e00e      	b.n	800ac8c <_malloc_r+0xa0>
 800ac6e:	6822      	ldr	r2, [r4, #0]
 800ac70:	1b52      	subs	r2, r2, r5
 800ac72:	d41e      	bmi.n	800acb2 <_malloc_r+0xc6>
 800ac74:	2a0b      	cmp	r2, #11
 800ac76:	d916      	bls.n	800aca6 <_malloc_r+0xba>
 800ac78:	1961      	adds	r1, r4, r5
 800ac7a:	42a3      	cmp	r3, r4
 800ac7c:	6025      	str	r5, [r4, #0]
 800ac7e:	bf18      	it	ne
 800ac80:	6059      	strne	r1, [r3, #4]
 800ac82:	6863      	ldr	r3, [r4, #4]
 800ac84:	bf08      	it	eq
 800ac86:	6031      	streq	r1, [r6, #0]
 800ac88:	5162      	str	r2, [r4, r5]
 800ac8a:	604b      	str	r3, [r1, #4]
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	f104 060b 	add.w	r6, r4, #11
 800ac92:	f000 f9ed 	bl	800b070 <__malloc_unlock>
 800ac96:	f026 0607 	bic.w	r6, r6, #7
 800ac9a:	1d23      	adds	r3, r4, #4
 800ac9c:	1af2      	subs	r2, r6, r3
 800ac9e:	d0b6      	beq.n	800ac0e <_malloc_r+0x22>
 800aca0:	1b9b      	subs	r3, r3, r6
 800aca2:	50a3      	str	r3, [r4, r2]
 800aca4:	e7b3      	b.n	800ac0e <_malloc_r+0x22>
 800aca6:	6862      	ldr	r2, [r4, #4]
 800aca8:	42a3      	cmp	r3, r4
 800acaa:	bf0c      	ite	eq
 800acac:	6032      	streq	r2, [r6, #0]
 800acae:	605a      	strne	r2, [r3, #4]
 800acb0:	e7ec      	b.n	800ac8c <_malloc_r+0xa0>
 800acb2:	4623      	mov	r3, r4
 800acb4:	6864      	ldr	r4, [r4, #4]
 800acb6:	e7b2      	b.n	800ac1e <_malloc_r+0x32>
 800acb8:	4634      	mov	r4, r6
 800acba:	6876      	ldr	r6, [r6, #4]
 800acbc:	e7b9      	b.n	800ac32 <_malloc_r+0x46>
 800acbe:	230c      	movs	r3, #12
 800acc0:	603b      	str	r3, [r7, #0]
 800acc2:	4638      	mov	r0, r7
 800acc4:	f000 f9d4 	bl	800b070 <__malloc_unlock>
 800acc8:	e7a1      	b.n	800ac0e <_malloc_r+0x22>
 800acca:	6025      	str	r5, [r4, #0]
 800accc:	e7de      	b.n	800ac8c <_malloc_r+0xa0>
 800acce:	bf00      	nop
 800acd0:	24000854 	.word	0x24000854

0800acd4 <__ssputs_r>:
 800acd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd8:	688e      	ldr	r6, [r1, #8]
 800acda:	429e      	cmp	r6, r3
 800acdc:	4682      	mov	sl, r0
 800acde:	460c      	mov	r4, r1
 800ace0:	4690      	mov	r8, r2
 800ace2:	461f      	mov	r7, r3
 800ace4:	d838      	bhi.n	800ad58 <__ssputs_r+0x84>
 800ace6:	898a      	ldrh	r2, [r1, #12]
 800ace8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acec:	d032      	beq.n	800ad54 <__ssputs_r+0x80>
 800acee:	6825      	ldr	r5, [r4, #0]
 800acf0:	6909      	ldr	r1, [r1, #16]
 800acf2:	eba5 0901 	sub.w	r9, r5, r1
 800acf6:	6965      	ldr	r5, [r4, #20]
 800acf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad00:	3301      	adds	r3, #1
 800ad02:	444b      	add	r3, r9
 800ad04:	106d      	asrs	r5, r5, #1
 800ad06:	429d      	cmp	r5, r3
 800ad08:	bf38      	it	cc
 800ad0a:	461d      	movcc	r5, r3
 800ad0c:	0553      	lsls	r3, r2, #21
 800ad0e:	d531      	bpl.n	800ad74 <__ssputs_r+0xa0>
 800ad10:	4629      	mov	r1, r5
 800ad12:	f7ff ff6b 	bl	800abec <_malloc_r>
 800ad16:	4606      	mov	r6, r0
 800ad18:	b950      	cbnz	r0, 800ad30 <__ssputs_r+0x5c>
 800ad1a:	230c      	movs	r3, #12
 800ad1c:	f8ca 3000 	str.w	r3, [sl]
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad26:	81a3      	strh	r3, [r4, #12]
 800ad28:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad30:	6921      	ldr	r1, [r4, #16]
 800ad32:	464a      	mov	r2, r9
 800ad34:	f7ff fb46 	bl	800a3c4 <memcpy>
 800ad38:	89a3      	ldrh	r3, [r4, #12]
 800ad3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad42:	81a3      	strh	r3, [r4, #12]
 800ad44:	6126      	str	r6, [r4, #16]
 800ad46:	6165      	str	r5, [r4, #20]
 800ad48:	444e      	add	r6, r9
 800ad4a:	eba5 0509 	sub.w	r5, r5, r9
 800ad4e:	6026      	str	r6, [r4, #0]
 800ad50:	60a5      	str	r5, [r4, #8]
 800ad52:	463e      	mov	r6, r7
 800ad54:	42be      	cmp	r6, r7
 800ad56:	d900      	bls.n	800ad5a <__ssputs_r+0x86>
 800ad58:	463e      	mov	r6, r7
 800ad5a:	6820      	ldr	r0, [r4, #0]
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	4641      	mov	r1, r8
 800ad60:	f000 f966 	bl	800b030 <memmove>
 800ad64:	68a3      	ldr	r3, [r4, #8]
 800ad66:	1b9b      	subs	r3, r3, r6
 800ad68:	60a3      	str	r3, [r4, #8]
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	4433      	add	r3, r6
 800ad6e:	6023      	str	r3, [r4, #0]
 800ad70:	2000      	movs	r0, #0
 800ad72:	e7db      	b.n	800ad2c <__ssputs_r+0x58>
 800ad74:	462a      	mov	r2, r5
 800ad76:	f000 f981 	bl	800b07c <_realloc_r>
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d1e1      	bne.n	800ad44 <__ssputs_r+0x70>
 800ad80:	6921      	ldr	r1, [r4, #16]
 800ad82:	4650      	mov	r0, sl
 800ad84:	f7ff fec6 	bl	800ab14 <_free_r>
 800ad88:	e7c7      	b.n	800ad1a <__ssputs_r+0x46>
	...

0800ad8c <_svfiprintf_r>:
 800ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	4698      	mov	r8, r3
 800ad92:	898b      	ldrh	r3, [r1, #12]
 800ad94:	061b      	lsls	r3, r3, #24
 800ad96:	b09d      	sub	sp, #116	; 0x74
 800ad98:	4607      	mov	r7, r0
 800ad9a:	460d      	mov	r5, r1
 800ad9c:	4614      	mov	r4, r2
 800ad9e:	d50e      	bpl.n	800adbe <_svfiprintf_r+0x32>
 800ada0:	690b      	ldr	r3, [r1, #16]
 800ada2:	b963      	cbnz	r3, 800adbe <_svfiprintf_r+0x32>
 800ada4:	2140      	movs	r1, #64	; 0x40
 800ada6:	f7ff ff21 	bl	800abec <_malloc_r>
 800adaa:	6028      	str	r0, [r5, #0]
 800adac:	6128      	str	r0, [r5, #16]
 800adae:	b920      	cbnz	r0, 800adba <_svfiprintf_r+0x2e>
 800adb0:	230c      	movs	r3, #12
 800adb2:	603b      	str	r3, [r7, #0]
 800adb4:	f04f 30ff 	mov.w	r0, #4294967295
 800adb8:	e0d1      	b.n	800af5e <_svfiprintf_r+0x1d2>
 800adba:	2340      	movs	r3, #64	; 0x40
 800adbc:	616b      	str	r3, [r5, #20]
 800adbe:	2300      	movs	r3, #0
 800adc0:	9309      	str	r3, [sp, #36]	; 0x24
 800adc2:	2320      	movs	r3, #32
 800adc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800adcc:	2330      	movs	r3, #48	; 0x30
 800adce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af78 <_svfiprintf_r+0x1ec>
 800add2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800add6:	f04f 0901 	mov.w	r9, #1
 800adda:	4623      	mov	r3, r4
 800addc:	469a      	mov	sl, r3
 800adde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ade2:	b10a      	cbz	r2, 800ade8 <_svfiprintf_r+0x5c>
 800ade4:	2a25      	cmp	r2, #37	; 0x25
 800ade6:	d1f9      	bne.n	800addc <_svfiprintf_r+0x50>
 800ade8:	ebba 0b04 	subs.w	fp, sl, r4
 800adec:	d00b      	beq.n	800ae06 <_svfiprintf_r+0x7a>
 800adee:	465b      	mov	r3, fp
 800adf0:	4622      	mov	r2, r4
 800adf2:	4629      	mov	r1, r5
 800adf4:	4638      	mov	r0, r7
 800adf6:	f7ff ff6d 	bl	800acd4 <__ssputs_r>
 800adfa:	3001      	adds	r0, #1
 800adfc:	f000 80aa 	beq.w	800af54 <_svfiprintf_r+0x1c8>
 800ae00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae02:	445a      	add	r2, fp
 800ae04:	9209      	str	r2, [sp, #36]	; 0x24
 800ae06:	f89a 3000 	ldrb.w	r3, [sl]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 80a2 	beq.w	800af54 <_svfiprintf_r+0x1c8>
 800ae10:	2300      	movs	r3, #0
 800ae12:	f04f 32ff 	mov.w	r2, #4294967295
 800ae16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae1a:	f10a 0a01 	add.w	sl, sl, #1
 800ae1e:	9304      	str	r3, [sp, #16]
 800ae20:	9307      	str	r3, [sp, #28]
 800ae22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae26:	931a      	str	r3, [sp, #104]	; 0x68
 800ae28:	4654      	mov	r4, sl
 800ae2a:	2205      	movs	r2, #5
 800ae2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae30:	4851      	ldr	r0, [pc, #324]	; (800af78 <_svfiprintf_r+0x1ec>)
 800ae32:	f7f5 fa5d 	bl	80002f0 <memchr>
 800ae36:	9a04      	ldr	r2, [sp, #16]
 800ae38:	b9d8      	cbnz	r0, 800ae72 <_svfiprintf_r+0xe6>
 800ae3a:	06d0      	lsls	r0, r2, #27
 800ae3c:	bf44      	itt	mi
 800ae3e:	2320      	movmi	r3, #32
 800ae40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae44:	0711      	lsls	r1, r2, #28
 800ae46:	bf44      	itt	mi
 800ae48:	232b      	movmi	r3, #43	; 0x2b
 800ae4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae52:	2b2a      	cmp	r3, #42	; 0x2a
 800ae54:	d015      	beq.n	800ae82 <_svfiprintf_r+0xf6>
 800ae56:	9a07      	ldr	r2, [sp, #28]
 800ae58:	4654      	mov	r4, sl
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	f04f 0c0a 	mov.w	ip, #10
 800ae60:	4621      	mov	r1, r4
 800ae62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae66:	3b30      	subs	r3, #48	; 0x30
 800ae68:	2b09      	cmp	r3, #9
 800ae6a:	d94e      	bls.n	800af0a <_svfiprintf_r+0x17e>
 800ae6c:	b1b0      	cbz	r0, 800ae9c <_svfiprintf_r+0x110>
 800ae6e:	9207      	str	r2, [sp, #28]
 800ae70:	e014      	b.n	800ae9c <_svfiprintf_r+0x110>
 800ae72:	eba0 0308 	sub.w	r3, r0, r8
 800ae76:	fa09 f303 	lsl.w	r3, r9, r3
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	9304      	str	r3, [sp, #16]
 800ae7e:	46a2      	mov	sl, r4
 800ae80:	e7d2      	b.n	800ae28 <_svfiprintf_r+0x9c>
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	1d19      	adds	r1, r3, #4
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	9103      	str	r1, [sp, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	bfbb      	ittet	lt
 800ae8e:	425b      	neglt	r3, r3
 800ae90:	f042 0202 	orrlt.w	r2, r2, #2
 800ae94:	9307      	strge	r3, [sp, #28]
 800ae96:	9307      	strlt	r3, [sp, #28]
 800ae98:	bfb8      	it	lt
 800ae9a:	9204      	strlt	r2, [sp, #16]
 800ae9c:	7823      	ldrb	r3, [r4, #0]
 800ae9e:	2b2e      	cmp	r3, #46	; 0x2e
 800aea0:	d10c      	bne.n	800aebc <_svfiprintf_r+0x130>
 800aea2:	7863      	ldrb	r3, [r4, #1]
 800aea4:	2b2a      	cmp	r3, #42	; 0x2a
 800aea6:	d135      	bne.n	800af14 <_svfiprintf_r+0x188>
 800aea8:	9b03      	ldr	r3, [sp, #12]
 800aeaa:	1d1a      	adds	r2, r3, #4
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	9203      	str	r2, [sp, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	bfb8      	it	lt
 800aeb4:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeb8:	3402      	adds	r4, #2
 800aeba:	9305      	str	r3, [sp, #20]
 800aebc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af88 <_svfiprintf_r+0x1fc>
 800aec0:	7821      	ldrb	r1, [r4, #0]
 800aec2:	2203      	movs	r2, #3
 800aec4:	4650      	mov	r0, sl
 800aec6:	f7f5 fa13 	bl	80002f0 <memchr>
 800aeca:	b140      	cbz	r0, 800aede <_svfiprintf_r+0x152>
 800aecc:	2340      	movs	r3, #64	; 0x40
 800aece:	eba0 000a 	sub.w	r0, r0, sl
 800aed2:	fa03 f000 	lsl.w	r0, r3, r0
 800aed6:	9b04      	ldr	r3, [sp, #16]
 800aed8:	4303      	orrs	r3, r0
 800aeda:	3401      	adds	r4, #1
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee2:	4826      	ldr	r0, [pc, #152]	; (800af7c <_svfiprintf_r+0x1f0>)
 800aee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aee8:	2206      	movs	r2, #6
 800aeea:	f7f5 fa01 	bl	80002f0 <memchr>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d038      	beq.n	800af64 <_svfiprintf_r+0x1d8>
 800aef2:	4b23      	ldr	r3, [pc, #140]	; (800af80 <_svfiprintf_r+0x1f4>)
 800aef4:	bb1b      	cbnz	r3, 800af3e <_svfiprintf_r+0x1b2>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	3307      	adds	r3, #7
 800aefa:	f023 0307 	bic.w	r3, r3, #7
 800aefe:	3308      	adds	r3, #8
 800af00:	9303      	str	r3, [sp, #12]
 800af02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af04:	4433      	add	r3, r6
 800af06:	9309      	str	r3, [sp, #36]	; 0x24
 800af08:	e767      	b.n	800adda <_svfiprintf_r+0x4e>
 800af0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af0e:	460c      	mov	r4, r1
 800af10:	2001      	movs	r0, #1
 800af12:	e7a5      	b.n	800ae60 <_svfiprintf_r+0xd4>
 800af14:	2300      	movs	r3, #0
 800af16:	3401      	adds	r4, #1
 800af18:	9305      	str	r3, [sp, #20]
 800af1a:	4619      	mov	r1, r3
 800af1c:	f04f 0c0a 	mov.w	ip, #10
 800af20:	4620      	mov	r0, r4
 800af22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af26:	3a30      	subs	r2, #48	; 0x30
 800af28:	2a09      	cmp	r2, #9
 800af2a:	d903      	bls.n	800af34 <_svfiprintf_r+0x1a8>
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0c5      	beq.n	800aebc <_svfiprintf_r+0x130>
 800af30:	9105      	str	r1, [sp, #20]
 800af32:	e7c3      	b.n	800aebc <_svfiprintf_r+0x130>
 800af34:	fb0c 2101 	mla	r1, ip, r1, r2
 800af38:	4604      	mov	r4, r0
 800af3a:	2301      	movs	r3, #1
 800af3c:	e7f0      	b.n	800af20 <_svfiprintf_r+0x194>
 800af3e:	ab03      	add	r3, sp, #12
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	462a      	mov	r2, r5
 800af44:	4b0f      	ldr	r3, [pc, #60]	; (800af84 <_svfiprintf_r+0x1f8>)
 800af46:	a904      	add	r1, sp, #16
 800af48:	4638      	mov	r0, r7
 800af4a:	f7fe f861 	bl	8009010 <_printf_float>
 800af4e:	1c42      	adds	r2, r0, #1
 800af50:	4606      	mov	r6, r0
 800af52:	d1d6      	bne.n	800af02 <_svfiprintf_r+0x176>
 800af54:	89ab      	ldrh	r3, [r5, #12]
 800af56:	065b      	lsls	r3, r3, #25
 800af58:	f53f af2c 	bmi.w	800adb4 <_svfiprintf_r+0x28>
 800af5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af5e:	b01d      	add	sp, #116	; 0x74
 800af60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af64:	ab03      	add	r3, sp, #12
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	462a      	mov	r2, r5
 800af6a:	4b06      	ldr	r3, [pc, #24]	; (800af84 <_svfiprintf_r+0x1f8>)
 800af6c:	a904      	add	r1, sp, #16
 800af6e:	4638      	mov	r0, r7
 800af70:	f7fe fada 	bl	8009528 <_printf_i>
 800af74:	e7eb      	b.n	800af4e <_svfiprintf_r+0x1c2>
 800af76:	bf00      	nop
 800af78:	0800be9c 	.word	0x0800be9c
 800af7c:	0800bea6 	.word	0x0800bea6
 800af80:	08009011 	.word	0x08009011
 800af84:	0800acd5 	.word	0x0800acd5
 800af88:	0800bea2 	.word	0x0800bea2

0800af8c <_sbrk_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d06      	ldr	r5, [pc, #24]	; (800afa8 <_sbrk_r+0x1c>)
 800af90:	2300      	movs	r3, #0
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	f7f6 fb86 	bl	80016a8 <_sbrk>
 800af9c:	1c43      	adds	r3, r0, #1
 800af9e:	d102      	bne.n	800afa6 <_sbrk_r+0x1a>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b103      	cbz	r3, 800afa6 <_sbrk_r+0x1a>
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	bd38      	pop	{r3, r4, r5, pc}
 800afa8:	2400085c 	.word	0x2400085c

0800afac <__assert_func>:
 800afac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afae:	4614      	mov	r4, r2
 800afb0:	461a      	mov	r2, r3
 800afb2:	4b09      	ldr	r3, [pc, #36]	; (800afd8 <__assert_func+0x2c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4605      	mov	r5, r0
 800afb8:	68d8      	ldr	r0, [r3, #12]
 800afba:	b14c      	cbz	r4, 800afd0 <__assert_func+0x24>
 800afbc:	4b07      	ldr	r3, [pc, #28]	; (800afdc <__assert_func+0x30>)
 800afbe:	9100      	str	r1, [sp, #0]
 800afc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afc4:	4906      	ldr	r1, [pc, #24]	; (800afe0 <__assert_func+0x34>)
 800afc6:	462b      	mov	r3, r5
 800afc8:	f000 f80e 	bl	800afe8 <fiprintf>
 800afcc:	f000 faac 	bl	800b528 <abort>
 800afd0:	4b04      	ldr	r3, [pc, #16]	; (800afe4 <__assert_func+0x38>)
 800afd2:	461c      	mov	r4, r3
 800afd4:	e7f3      	b.n	800afbe <__assert_func+0x12>
 800afd6:	bf00      	nop
 800afd8:	24000010 	.word	0x24000010
 800afdc:	0800bead 	.word	0x0800bead
 800afe0:	0800beba 	.word	0x0800beba
 800afe4:	0800bee8 	.word	0x0800bee8

0800afe8 <fiprintf>:
 800afe8:	b40e      	push	{r1, r2, r3}
 800afea:	b503      	push	{r0, r1, lr}
 800afec:	4601      	mov	r1, r0
 800afee:	ab03      	add	r3, sp, #12
 800aff0:	4805      	ldr	r0, [pc, #20]	; (800b008 <fiprintf+0x20>)
 800aff2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aff6:	6800      	ldr	r0, [r0, #0]
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	f000 f897 	bl	800b12c <_vfiprintf_r>
 800affe:	b002      	add	sp, #8
 800b000:	f85d eb04 	ldr.w	lr, [sp], #4
 800b004:	b003      	add	sp, #12
 800b006:	4770      	bx	lr
 800b008:	24000010 	.word	0x24000010

0800b00c <__ascii_mbtowc>:
 800b00c:	b082      	sub	sp, #8
 800b00e:	b901      	cbnz	r1, 800b012 <__ascii_mbtowc+0x6>
 800b010:	a901      	add	r1, sp, #4
 800b012:	b142      	cbz	r2, 800b026 <__ascii_mbtowc+0x1a>
 800b014:	b14b      	cbz	r3, 800b02a <__ascii_mbtowc+0x1e>
 800b016:	7813      	ldrb	r3, [r2, #0]
 800b018:	600b      	str	r3, [r1, #0]
 800b01a:	7812      	ldrb	r2, [r2, #0]
 800b01c:	1e10      	subs	r0, r2, #0
 800b01e:	bf18      	it	ne
 800b020:	2001      	movne	r0, #1
 800b022:	b002      	add	sp, #8
 800b024:	4770      	bx	lr
 800b026:	4610      	mov	r0, r2
 800b028:	e7fb      	b.n	800b022 <__ascii_mbtowc+0x16>
 800b02a:	f06f 0001 	mvn.w	r0, #1
 800b02e:	e7f8      	b.n	800b022 <__ascii_mbtowc+0x16>

0800b030 <memmove>:
 800b030:	4288      	cmp	r0, r1
 800b032:	b510      	push	{r4, lr}
 800b034:	eb01 0402 	add.w	r4, r1, r2
 800b038:	d902      	bls.n	800b040 <memmove+0x10>
 800b03a:	4284      	cmp	r4, r0
 800b03c:	4623      	mov	r3, r4
 800b03e:	d807      	bhi.n	800b050 <memmove+0x20>
 800b040:	1e43      	subs	r3, r0, #1
 800b042:	42a1      	cmp	r1, r4
 800b044:	d008      	beq.n	800b058 <memmove+0x28>
 800b046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b04a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b04e:	e7f8      	b.n	800b042 <memmove+0x12>
 800b050:	4402      	add	r2, r0
 800b052:	4601      	mov	r1, r0
 800b054:	428a      	cmp	r2, r1
 800b056:	d100      	bne.n	800b05a <memmove+0x2a>
 800b058:	bd10      	pop	{r4, pc}
 800b05a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b05e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b062:	e7f7      	b.n	800b054 <memmove+0x24>

0800b064 <__malloc_lock>:
 800b064:	4801      	ldr	r0, [pc, #4]	; (800b06c <__malloc_lock+0x8>)
 800b066:	f000 bc1f 	b.w	800b8a8 <__retarget_lock_acquire_recursive>
 800b06a:	bf00      	nop
 800b06c:	24000860 	.word	0x24000860

0800b070 <__malloc_unlock>:
 800b070:	4801      	ldr	r0, [pc, #4]	; (800b078 <__malloc_unlock+0x8>)
 800b072:	f000 bc1a 	b.w	800b8aa <__retarget_lock_release_recursive>
 800b076:	bf00      	nop
 800b078:	24000860 	.word	0x24000860

0800b07c <_realloc_r>:
 800b07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b080:	4680      	mov	r8, r0
 800b082:	4614      	mov	r4, r2
 800b084:	460e      	mov	r6, r1
 800b086:	b921      	cbnz	r1, 800b092 <_realloc_r+0x16>
 800b088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b08c:	4611      	mov	r1, r2
 800b08e:	f7ff bdad 	b.w	800abec <_malloc_r>
 800b092:	b92a      	cbnz	r2, 800b0a0 <_realloc_r+0x24>
 800b094:	f7ff fd3e 	bl	800ab14 <_free_r>
 800b098:	4625      	mov	r5, r4
 800b09a:	4628      	mov	r0, r5
 800b09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a0:	f000 fc6a 	bl	800b978 <_malloc_usable_size_r>
 800b0a4:	4284      	cmp	r4, r0
 800b0a6:	4607      	mov	r7, r0
 800b0a8:	d802      	bhi.n	800b0b0 <_realloc_r+0x34>
 800b0aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0ae:	d812      	bhi.n	800b0d6 <_realloc_r+0x5a>
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	f7ff fd9a 	bl	800abec <_malloc_r>
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d0ed      	beq.n	800b09a <_realloc_r+0x1e>
 800b0be:	42bc      	cmp	r4, r7
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	bf28      	it	cs
 800b0c6:	463a      	movcs	r2, r7
 800b0c8:	f7ff f97c 	bl	800a3c4 <memcpy>
 800b0cc:	4631      	mov	r1, r6
 800b0ce:	4640      	mov	r0, r8
 800b0d0:	f7ff fd20 	bl	800ab14 <_free_r>
 800b0d4:	e7e1      	b.n	800b09a <_realloc_r+0x1e>
 800b0d6:	4635      	mov	r5, r6
 800b0d8:	e7df      	b.n	800b09a <_realloc_r+0x1e>

0800b0da <__sfputc_r>:
 800b0da:	6893      	ldr	r3, [r2, #8]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	b410      	push	{r4}
 800b0e2:	6093      	str	r3, [r2, #8]
 800b0e4:	da08      	bge.n	800b0f8 <__sfputc_r+0x1e>
 800b0e6:	6994      	ldr	r4, [r2, #24]
 800b0e8:	42a3      	cmp	r3, r4
 800b0ea:	db01      	blt.n	800b0f0 <__sfputc_r+0x16>
 800b0ec:	290a      	cmp	r1, #10
 800b0ee:	d103      	bne.n	800b0f8 <__sfputc_r+0x1e>
 800b0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0f4:	f000 b94a 	b.w	800b38c <__swbuf_r>
 800b0f8:	6813      	ldr	r3, [r2, #0]
 800b0fa:	1c58      	adds	r0, r3, #1
 800b0fc:	6010      	str	r0, [r2, #0]
 800b0fe:	7019      	strb	r1, [r3, #0]
 800b100:	4608      	mov	r0, r1
 800b102:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <__sfputs_r>:
 800b108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10a:	4606      	mov	r6, r0
 800b10c:	460f      	mov	r7, r1
 800b10e:	4614      	mov	r4, r2
 800b110:	18d5      	adds	r5, r2, r3
 800b112:	42ac      	cmp	r4, r5
 800b114:	d101      	bne.n	800b11a <__sfputs_r+0x12>
 800b116:	2000      	movs	r0, #0
 800b118:	e007      	b.n	800b12a <__sfputs_r+0x22>
 800b11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b11e:	463a      	mov	r2, r7
 800b120:	4630      	mov	r0, r6
 800b122:	f7ff ffda 	bl	800b0da <__sfputc_r>
 800b126:	1c43      	adds	r3, r0, #1
 800b128:	d1f3      	bne.n	800b112 <__sfputs_r+0xa>
 800b12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b12c <_vfiprintf_r>:
 800b12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b130:	460d      	mov	r5, r1
 800b132:	b09d      	sub	sp, #116	; 0x74
 800b134:	4614      	mov	r4, r2
 800b136:	4698      	mov	r8, r3
 800b138:	4606      	mov	r6, r0
 800b13a:	b118      	cbz	r0, 800b144 <_vfiprintf_r+0x18>
 800b13c:	6983      	ldr	r3, [r0, #24]
 800b13e:	b90b      	cbnz	r3, 800b144 <_vfiprintf_r+0x18>
 800b140:	f000 fb14 	bl	800b76c <__sinit>
 800b144:	4b89      	ldr	r3, [pc, #548]	; (800b36c <_vfiprintf_r+0x240>)
 800b146:	429d      	cmp	r5, r3
 800b148:	d11b      	bne.n	800b182 <_vfiprintf_r+0x56>
 800b14a:	6875      	ldr	r5, [r6, #4]
 800b14c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b14e:	07d9      	lsls	r1, r3, #31
 800b150:	d405      	bmi.n	800b15e <_vfiprintf_r+0x32>
 800b152:	89ab      	ldrh	r3, [r5, #12]
 800b154:	059a      	lsls	r2, r3, #22
 800b156:	d402      	bmi.n	800b15e <_vfiprintf_r+0x32>
 800b158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b15a:	f000 fba5 	bl	800b8a8 <__retarget_lock_acquire_recursive>
 800b15e:	89ab      	ldrh	r3, [r5, #12]
 800b160:	071b      	lsls	r3, r3, #28
 800b162:	d501      	bpl.n	800b168 <_vfiprintf_r+0x3c>
 800b164:	692b      	ldr	r3, [r5, #16]
 800b166:	b9eb      	cbnz	r3, 800b1a4 <_vfiprintf_r+0x78>
 800b168:	4629      	mov	r1, r5
 800b16a:	4630      	mov	r0, r6
 800b16c:	f000 f96e 	bl	800b44c <__swsetup_r>
 800b170:	b1c0      	cbz	r0, 800b1a4 <_vfiprintf_r+0x78>
 800b172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b174:	07dc      	lsls	r4, r3, #31
 800b176:	d50e      	bpl.n	800b196 <_vfiprintf_r+0x6a>
 800b178:	f04f 30ff 	mov.w	r0, #4294967295
 800b17c:	b01d      	add	sp, #116	; 0x74
 800b17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b182:	4b7b      	ldr	r3, [pc, #492]	; (800b370 <_vfiprintf_r+0x244>)
 800b184:	429d      	cmp	r5, r3
 800b186:	d101      	bne.n	800b18c <_vfiprintf_r+0x60>
 800b188:	68b5      	ldr	r5, [r6, #8]
 800b18a:	e7df      	b.n	800b14c <_vfiprintf_r+0x20>
 800b18c:	4b79      	ldr	r3, [pc, #484]	; (800b374 <_vfiprintf_r+0x248>)
 800b18e:	429d      	cmp	r5, r3
 800b190:	bf08      	it	eq
 800b192:	68f5      	ldreq	r5, [r6, #12]
 800b194:	e7da      	b.n	800b14c <_vfiprintf_r+0x20>
 800b196:	89ab      	ldrh	r3, [r5, #12]
 800b198:	0598      	lsls	r0, r3, #22
 800b19a:	d4ed      	bmi.n	800b178 <_vfiprintf_r+0x4c>
 800b19c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b19e:	f000 fb84 	bl	800b8aa <__retarget_lock_release_recursive>
 800b1a2:	e7e9      	b.n	800b178 <_vfiprintf_r+0x4c>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b1a8:	2320      	movs	r3, #32
 800b1aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1b2:	2330      	movs	r3, #48	; 0x30
 800b1b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b378 <_vfiprintf_r+0x24c>
 800b1b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1bc:	f04f 0901 	mov.w	r9, #1
 800b1c0:	4623      	mov	r3, r4
 800b1c2:	469a      	mov	sl, r3
 800b1c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1c8:	b10a      	cbz	r2, 800b1ce <_vfiprintf_r+0xa2>
 800b1ca:	2a25      	cmp	r2, #37	; 0x25
 800b1cc:	d1f9      	bne.n	800b1c2 <_vfiprintf_r+0x96>
 800b1ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d2:	d00b      	beq.n	800b1ec <_vfiprintf_r+0xc0>
 800b1d4:	465b      	mov	r3, fp
 800b1d6:	4622      	mov	r2, r4
 800b1d8:	4629      	mov	r1, r5
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f7ff ff94 	bl	800b108 <__sfputs_r>
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	f000 80aa 	beq.w	800b33a <_vfiprintf_r+0x20e>
 800b1e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1e8:	445a      	add	r2, fp
 800b1ea:	9209      	str	r2, [sp, #36]	; 0x24
 800b1ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 80a2 	beq.w	800b33a <_vfiprintf_r+0x20e>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b200:	f10a 0a01 	add.w	sl, sl, #1
 800b204:	9304      	str	r3, [sp, #16]
 800b206:	9307      	str	r3, [sp, #28]
 800b208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b20c:	931a      	str	r3, [sp, #104]	; 0x68
 800b20e:	4654      	mov	r4, sl
 800b210:	2205      	movs	r2, #5
 800b212:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b216:	4858      	ldr	r0, [pc, #352]	; (800b378 <_vfiprintf_r+0x24c>)
 800b218:	f7f5 f86a 	bl	80002f0 <memchr>
 800b21c:	9a04      	ldr	r2, [sp, #16]
 800b21e:	b9d8      	cbnz	r0, 800b258 <_vfiprintf_r+0x12c>
 800b220:	06d1      	lsls	r1, r2, #27
 800b222:	bf44      	itt	mi
 800b224:	2320      	movmi	r3, #32
 800b226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b22a:	0713      	lsls	r3, r2, #28
 800b22c:	bf44      	itt	mi
 800b22e:	232b      	movmi	r3, #43	; 0x2b
 800b230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b234:	f89a 3000 	ldrb.w	r3, [sl]
 800b238:	2b2a      	cmp	r3, #42	; 0x2a
 800b23a:	d015      	beq.n	800b268 <_vfiprintf_r+0x13c>
 800b23c:	9a07      	ldr	r2, [sp, #28]
 800b23e:	4654      	mov	r4, sl
 800b240:	2000      	movs	r0, #0
 800b242:	f04f 0c0a 	mov.w	ip, #10
 800b246:	4621      	mov	r1, r4
 800b248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b24c:	3b30      	subs	r3, #48	; 0x30
 800b24e:	2b09      	cmp	r3, #9
 800b250:	d94e      	bls.n	800b2f0 <_vfiprintf_r+0x1c4>
 800b252:	b1b0      	cbz	r0, 800b282 <_vfiprintf_r+0x156>
 800b254:	9207      	str	r2, [sp, #28]
 800b256:	e014      	b.n	800b282 <_vfiprintf_r+0x156>
 800b258:	eba0 0308 	sub.w	r3, r0, r8
 800b25c:	fa09 f303 	lsl.w	r3, r9, r3
 800b260:	4313      	orrs	r3, r2
 800b262:	9304      	str	r3, [sp, #16]
 800b264:	46a2      	mov	sl, r4
 800b266:	e7d2      	b.n	800b20e <_vfiprintf_r+0xe2>
 800b268:	9b03      	ldr	r3, [sp, #12]
 800b26a:	1d19      	adds	r1, r3, #4
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	9103      	str	r1, [sp, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	bfbb      	ittet	lt
 800b274:	425b      	neglt	r3, r3
 800b276:	f042 0202 	orrlt.w	r2, r2, #2
 800b27a:	9307      	strge	r3, [sp, #28]
 800b27c:	9307      	strlt	r3, [sp, #28]
 800b27e:	bfb8      	it	lt
 800b280:	9204      	strlt	r2, [sp, #16]
 800b282:	7823      	ldrb	r3, [r4, #0]
 800b284:	2b2e      	cmp	r3, #46	; 0x2e
 800b286:	d10c      	bne.n	800b2a2 <_vfiprintf_r+0x176>
 800b288:	7863      	ldrb	r3, [r4, #1]
 800b28a:	2b2a      	cmp	r3, #42	; 0x2a
 800b28c:	d135      	bne.n	800b2fa <_vfiprintf_r+0x1ce>
 800b28e:	9b03      	ldr	r3, [sp, #12]
 800b290:	1d1a      	adds	r2, r3, #4
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	9203      	str	r2, [sp, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	bfb8      	it	lt
 800b29a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b29e:	3402      	adds	r4, #2
 800b2a0:	9305      	str	r3, [sp, #20]
 800b2a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b388 <_vfiprintf_r+0x25c>
 800b2a6:	7821      	ldrb	r1, [r4, #0]
 800b2a8:	2203      	movs	r2, #3
 800b2aa:	4650      	mov	r0, sl
 800b2ac:	f7f5 f820 	bl	80002f0 <memchr>
 800b2b0:	b140      	cbz	r0, 800b2c4 <_vfiprintf_r+0x198>
 800b2b2:	2340      	movs	r3, #64	; 0x40
 800b2b4:	eba0 000a 	sub.w	r0, r0, sl
 800b2b8:	fa03 f000 	lsl.w	r0, r3, r0
 800b2bc:	9b04      	ldr	r3, [sp, #16]
 800b2be:	4303      	orrs	r3, r0
 800b2c0:	3401      	adds	r4, #1
 800b2c2:	9304      	str	r3, [sp, #16]
 800b2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c8:	482c      	ldr	r0, [pc, #176]	; (800b37c <_vfiprintf_r+0x250>)
 800b2ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2ce:	2206      	movs	r2, #6
 800b2d0:	f7f5 f80e 	bl	80002f0 <memchr>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d03f      	beq.n	800b358 <_vfiprintf_r+0x22c>
 800b2d8:	4b29      	ldr	r3, [pc, #164]	; (800b380 <_vfiprintf_r+0x254>)
 800b2da:	bb1b      	cbnz	r3, 800b324 <_vfiprintf_r+0x1f8>
 800b2dc:	9b03      	ldr	r3, [sp, #12]
 800b2de:	3307      	adds	r3, #7
 800b2e0:	f023 0307 	bic.w	r3, r3, #7
 800b2e4:	3308      	adds	r3, #8
 800b2e6:	9303      	str	r3, [sp, #12]
 800b2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ea:	443b      	add	r3, r7
 800b2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ee:	e767      	b.n	800b1c0 <_vfiprintf_r+0x94>
 800b2f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2f4:	460c      	mov	r4, r1
 800b2f6:	2001      	movs	r0, #1
 800b2f8:	e7a5      	b.n	800b246 <_vfiprintf_r+0x11a>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	3401      	adds	r4, #1
 800b2fe:	9305      	str	r3, [sp, #20]
 800b300:	4619      	mov	r1, r3
 800b302:	f04f 0c0a 	mov.w	ip, #10
 800b306:	4620      	mov	r0, r4
 800b308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b30c:	3a30      	subs	r2, #48	; 0x30
 800b30e:	2a09      	cmp	r2, #9
 800b310:	d903      	bls.n	800b31a <_vfiprintf_r+0x1ee>
 800b312:	2b00      	cmp	r3, #0
 800b314:	d0c5      	beq.n	800b2a2 <_vfiprintf_r+0x176>
 800b316:	9105      	str	r1, [sp, #20]
 800b318:	e7c3      	b.n	800b2a2 <_vfiprintf_r+0x176>
 800b31a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b31e:	4604      	mov	r4, r0
 800b320:	2301      	movs	r3, #1
 800b322:	e7f0      	b.n	800b306 <_vfiprintf_r+0x1da>
 800b324:	ab03      	add	r3, sp, #12
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	462a      	mov	r2, r5
 800b32a:	4b16      	ldr	r3, [pc, #88]	; (800b384 <_vfiprintf_r+0x258>)
 800b32c:	a904      	add	r1, sp, #16
 800b32e:	4630      	mov	r0, r6
 800b330:	f7fd fe6e 	bl	8009010 <_printf_float>
 800b334:	4607      	mov	r7, r0
 800b336:	1c78      	adds	r0, r7, #1
 800b338:	d1d6      	bne.n	800b2e8 <_vfiprintf_r+0x1bc>
 800b33a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b33c:	07d9      	lsls	r1, r3, #31
 800b33e:	d405      	bmi.n	800b34c <_vfiprintf_r+0x220>
 800b340:	89ab      	ldrh	r3, [r5, #12]
 800b342:	059a      	lsls	r2, r3, #22
 800b344:	d402      	bmi.n	800b34c <_vfiprintf_r+0x220>
 800b346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b348:	f000 faaf 	bl	800b8aa <__retarget_lock_release_recursive>
 800b34c:	89ab      	ldrh	r3, [r5, #12]
 800b34e:	065b      	lsls	r3, r3, #25
 800b350:	f53f af12 	bmi.w	800b178 <_vfiprintf_r+0x4c>
 800b354:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b356:	e711      	b.n	800b17c <_vfiprintf_r+0x50>
 800b358:	ab03      	add	r3, sp, #12
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	462a      	mov	r2, r5
 800b35e:	4b09      	ldr	r3, [pc, #36]	; (800b384 <_vfiprintf_r+0x258>)
 800b360:	a904      	add	r1, sp, #16
 800b362:	4630      	mov	r0, r6
 800b364:	f7fe f8e0 	bl	8009528 <_printf_i>
 800b368:	e7e4      	b.n	800b334 <_vfiprintf_r+0x208>
 800b36a:	bf00      	nop
 800b36c:	0800c014 	.word	0x0800c014
 800b370:	0800c034 	.word	0x0800c034
 800b374:	0800bff4 	.word	0x0800bff4
 800b378:	0800be9c 	.word	0x0800be9c
 800b37c:	0800bea6 	.word	0x0800bea6
 800b380:	08009011 	.word	0x08009011
 800b384:	0800b109 	.word	0x0800b109
 800b388:	0800bea2 	.word	0x0800bea2

0800b38c <__swbuf_r>:
 800b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38e:	460e      	mov	r6, r1
 800b390:	4614      	mov	r4, r2
 800b392:	4605      	mov	r5, r0
 800b394:	b118      	cbz	r0, 800b39e <__swbuf_r+0x12>
 800b396:	6983      	ldr	r3, [r0, #24]
 800b398:	b90b      	cbnz	r3, 800b39e <__swbuf_r+0x12>
 800b39a:	f000 f9e7 	bl	800b76c <__sinit>
 800b39e:	4b21      	ldr	r3, [pc, #132]	; (800b424 <__swbuf_r+0x98>)
 800b3a0:	429c      	cmp	r4, r3
 800b3a2:	d12b      	bne.n	800b3fc <__swbuf_r+0x70>
 800b3a4:	686c      	ldr	r4, [r5, #4]
 800b3a6:	69a3      	ldr	r3, [r4, #24]
 800b3a8:	60a3      	str	r3, [r4, #8]
 800b3aa:	89a3      	ldrh	r3, [r4, #12]
 800b3ac:	071a      	lsls	r2, r3, #28
 800b3ae:	d52f      	bpl.n	800b410 <__swbuf_r+0x84>
 800b3b0:	6923      	ldr	r3, [r4, #16]
 800b3b2:	b36b      	cbz	r3, 800b410 <__swbuf_r+0x84>
 800b3b4:	6923      	ldr	r3, [r4, #16]
 800b3b6:	6820      	ldr	r0, [r4, #0]
 800b3b8:	1ac0      	subs	r0, r0, r3
 800b3ba:	6963      	ldr	r3, [r4, #20]
 800b3bc:	b2f6      	uxtb	r6, r6
 800b3be:	4283      	cmp	r3, r0
 800b3c0:	4637      	mov	r7, r6
 800b3c2:	dc04      	bgt.n	800b3ce <__swbuf_r+0x42>
 800b3c4:	4621      	mov	r1, r4
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	f000 f93c 	bl	800b644 <_fflush_r>
 800b3cc:	bb30      	cbnz	r0, 800b41c <__swbuf_r+0x90>
 800b3ce:	68a3      	ldr	r3, [r4, #8]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	60a3      	str	r3, [r4, #8]
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	6022      	str	r2, [r4, #0]
 800b3da:	701e      	strb	r6, [r3, #0]
 800b3dc:	6963      	ldr	r3, [r4, #20]
 800b3de:	3001      	adds	r0, #1
 800b3e0:	4283      	cmp	r3, r0
 800b3e2:	d004      	beq.n	800b3ee <__swbuf_r+0x62>
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	07db      	lsls	r3, r3, #31
 800b3e8:	d506      	bpl.n	800b3f8 <__swbuf_r+0x6c>
 800b3ea:	2e0a      	cmp	r6, #10
 800b3ec:	d104      	bne.n	800b3f8 <__swbuf_r+0x6c>
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f000 f927 	bl	800b644 <_fflush_r>
 800b3f6:	b988      	cbnz	r0, 800b41c <__swbuf_r+0x90>
 800b3f8:	4638      	mov	r0, r7
 800b3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <__swbuf_r+0x9c>)
 800b3fe:	429c      	cmp	r4, r3
 800b400:	d101      	bne.n	800b406 <__swbuf_r+0x7a>
 800b402:	68ac      	ldr	r4, [r5, #8]
 800b404:	e7cf      	b.n	800b3a6 <__swbuf_r+0x1a>
 800b406:	4b09      	ldr	r3, [pc, #36]	; (800b42c <__swbuf_r+0xa0>)
 800b408:	429c      	cmp	r4, r3
 800b40a:	bf08      	it	eq
 800b40c:	68ec      	ldreq	r4, [r5, #12]
 800b40e:	e7ca      	b.n	800b3a6 <__swbuf_r+0x1a>
 800b410:	4621      	mov	r1, r4
 800b412:	4628      	mov	r0, r5
 800b414:	f000 f81a 	bl	800b44c <__swsetup_r>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d0cb      	beq.n	800b3b4 <__swbuf_r+0x28>
 800b41c:	f04f 37ff 	mov.w	r7, #4294967295
 800b420:	e7ea      	b.n	800b3f8 <__swbuf_r+0x6c>
 800b422:	bf00      	nop
 800b424:	0800c014 	.word	0x0800c014
 800b428:	0800c034 	.word	0x0800c034
 800b42c:	0800bff4 	.word	0x0800bff4

0800b430 <__ascii_wctomb>:
 800b430:	b149      	cbz	r1, 800b446 <__ascii_wctomb+0x16>
 800b432:	2aff      	cmp	r2, #255	; 0xff
 800b434:	bf85      	ittet	hi
 800b436:	238a      	movhi	r3, #138	; 0x8a
 800b438:	6003      	strhi	r3, [r0, #0]
 800b43a:	700a      	strbls	r2, [r1, #0]
 800b43c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b440:	bf98      	it	ls
 800b442:	2001      	movls	r0, #1
 800b444:	4770      	bx	lr
 800b446:	4608      	mov	r0, r1
 800b448:	4770      	bx	lr
	...

0800b44c <__swsetup_r>:
 800b44c:	4b32      	ldr	r3, [pc, #200]	; (800b518 <__swsetup_r+0xcc>)
 800b44e:	b570      	push	{r4, r5, r6, lr}
 800b450:	681d      	ldr	r5, [r3, #0]
 800b452:	4606      	mov	r6, r0
 800b454:	460c      	mov	r4, r1
 800b456:	b125      	cbz	r5, 800b462 <__swsetup_r+0x16>
 800b458:	69ab      	ldr	r3, [r5, #24]
 800b45a:	b913      	cbnz	r3, 800b462 <__swsetup_r+0x16>
 800b45c:	4628      	mov	r0, r5
 800b45e:	f000 f985 	bl	800b76c <__sinit>
 800b462:	4b2e      	ldr	r3, [pc, #184]	; (800b51c <__swsetup_r+0xd0>)
 800b464:	429c      	cmp	r4, r3
 800b466:	d10f      	bne.n	800b488 <__swsetup_r+0x3c>
 800b468:	686c      	ldr	r4, [r5, #4]
 800b46a:	89a3      	ldrh	r3, [r4, #12]
 800b46c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b470:	0719      	lsls	r1, r3, #28
 800b472:	d42c      	bmi.n	800b4ce <__swsetup_r+0x82>
 800b474:	06dd      	lsls	r5, r3, #27
 800b476:	d411      	bmi.n	800b49c <__swsetup_r+0x50>
 800b478:	2309      	movs	r3, #9
 800b47a:	6033      	str	r3, [r6, #0]
 800b47c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b480:	81a3      	strh	r3, [r4, #12]
 800b482:	f04f 30ff 	mov.w	r0, #4294967295
 800b486:	e03e      	b.n	800b506 <__swsetup_r+0xba>
 800b488:	4b25      	ldr	r3, [pc, #148]	; (800b520 <__swsetup_r+0xd4>)
 800b48a:	429c      	cmp	r4, r3
 800b48c:	d101      	bne.n	800b492 <__swsetup_r+0x46>
 800b48e:	68ac      	ldr	r4, [r5, #8]
 800b490:	e7eb      	b.n	800b46a <__swsetup_r+0x1e>
 800b492:	4b24      	ldr	r3, [pc, #144]	; (800b524 <__swsetup_r+0xd8>)
 800b494:	429c      	cmp	r4, r3
 800b496:	bf08      	it	eq
 800b498:	68ec      	ldreq	r4, [r5, #12]
 800b49a:	e7e6      	b.n	800b46a <__swsetup_r+0x1e>
 800b49c:	0758      	lsls	r0, r3, #29
 800b49e:	d512      	bpl.n	800b4c6 <__swsetup_r+0x7a>
 800b4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4a2:	b141      	cbz	r1, 800b4b6 <__swsetup_r+0x6a>
 800b4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4a8:	4299      	cmp	r1, r3
 800b4aa:	d002      	beq.n	800b4b2 <__swsetup_r+0x66>
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7ff fb31 	bl	800ab14 <_free_r>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	6363      	str	r3, [r4, #52]	; 0x34
 800b4b6:	89a3      	ldrh	r3, [r4, #12]
 800b4b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4bc:	81a3      	strh	r3, [r4, #12]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	6063      	str	r3, [r4, #4]
 800b4c2:	6923      	ldr	r3, [r4, #16]
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	89a3      	ldrh	r3, [r4, #12]
 800b4c8:	f043 0308 	orr.w	r3, r3, #8
 800b4cc:	81a3      	strh	r3, [r4, #12]
 800b4ce:	6923      	ldr	r3, [r4, #16]
 800b4d0:	b94b      	cbnz	r3, 800b4e6 <__swsetup_r+0x9a>
 800b4d2:	89a3      	ldrh	r3, [r4, #12]
 800b4d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4dc:	d003      	beq.n	800b4e6 <__swsetup_r+0x9a>
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	f000 fa09 	bl	800b8f8 <__smakebuf_r>
 800b4e6:	89a0      	ldrh	r0, [r4, #12]
 800b4e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4ec:	f010 0301 	ands.w	r3, r0, #1
 800b4f0:	d00a      	beq.n	800b508 <__swsetup_r+0xbc>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60a3      	str	r3, [r4, #8]
 800b4f6:	6963      	ldr	r3, [r4, #20]
 800b4f8:	425b      	negs	r3, r3
 800b4fa:	61a3      	str	r3, [r4, #24]
 800b4fc:	6923      	ldr	r3, [r4, #16]
 800b4fe:	b943      	cbnz	r3, 800b512 <__swsetup_r+0xc6>
 800b500:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b504:	d1ba      	bne.n	800b47c <__swsetup_r+0x30>
 800b506:	bd70      	pop	{r4, r5, r6, pc}
 800b508:	0781      	lsls	r1, r0, #30
 800b50a:	bf58      	it	pl
 800b50c:	6963      	ldrpl	r3, [r4, #20]
 800b50e:	60a3      	str	r3, [r4, #8]
 800b510:	e7f4      	b.n	800b4fc <__swsetup_r+0xb0>
 800b512:	2000      	movs	r0, #0
 800b514:	e7f7      	b.n	800b506 <__swsetup_r+0xba>
 800b516:	bf00      	nop
 800b518:	24000010 	.word	0x24000010
 800b51c:	0800c014 	.word	0x0800c014
 800b520:	0800c034 	.word	0x0800c034
 800b524:	0800bff4 	.word	0x0800bff4

0800b528 <abort>:
 800b528:	b508      	push	{r3, lr}
 800b52a:	2006      	movs	r0, #6
 800b52c:	f000 fa54 	bl	800b9d8 <raise>
 800b530:	2001      	movs	r0, #1
 800b532:	f7f6 f841 	bl	80015b8 <_exit>
	...

0800b538 <__sflush_r>:
 800b538:	898a      	ldrh	r2, [r1, #12]
 800b53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53e:	4605      	mov	r5, r0
 800b540:	0710      	lsls	r0, r2, #28
 800b542:	460c      	mov	r4, r1
 800b544:	d458      	bmi.n	800b5f8 <__sflush_r+0xc0>
 800b546:	684b      	ldr	r3, [r1, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	dc05      	bgt.n	800b558 <__sflush_r+0x20>
 800b54c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b54e:	2b00      	cmp	r3, #0
 800b550:	dc02      	bgt.n	800b558 <__sflush_r+0x20>
 800b552:	2000      	movs	r0, #0
 800b554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b55a:	2e00      	cmp	r6, #0
 800b55c:	d0f9      	beq.n	800b552 <__sflush_r+0x1a>
 800b55e:	2300      	movs	r3, #0
 800b560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b564:	682f      	ldr	r7, [r5, #0]
 800b566:	602b      	str	r3, [r5, #0]
 800b568:	d032      	beq.n	800b5d0 <__sflush_r+0x98>
 800b56a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	075a      	lsls	r2, r3, #29
 800b570:	d505      	bpl.n	800b57e <__sflush_r+0x46>
 800b572:	6863      	ldr	r3, [r4, #4]
 800b574:	1ac0      	subs	r0, r0, r3
 800b576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b578:	b10b      	cbz	r3, 800b57e <__sflush_r+0x46>
 800b57a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b57c:	1ac0      	subs	r0, r0, r3
 800b57e:	2300      	movs	r3, #0
 800b580:	4602      	mov	r2, r0
 800b582:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b584:	6a21      	ldr	r1, [r4, #32]
 800b586:	4628      	mov	r0, r5
 800b588:	47b0      	blx	r6
 800b58a:	1c43      	adds	r3, r0, #1
 800b58c:	89a3      	ldrh	r3, [r4, #12]
 800b58e:	d106      	bne.n	800b59e <__sflush_r+0x66>
 800b590:	6829      	ldr	r1, [r5, #0]
 800b592:	291d      	cmp	r1, #29
 800b594:	d82c      	bhi.n	800b5f0 <__sflush_r+0xb8>
 800b596:	4a2a      	ldr	r2, [pc, #168]	; (800b640 <__sflush_r+0x108>)
 800b598:	40ca      	lsrs	r2, r1
 800b59a:	07d6      	lsls	r6, r2, #31
 800b59c:	d528      	bpl.n	800b5f0 <__sflush_r+0xb8>
 800b59e:	2200      	movs	r2, #0
 800b5a0:	6062      	str	r2, [r4, #4]
 800b5a2:	04d9      	lsls	r1, r3, #19
 800b5a4:	6922      	ldr	r2, [r4, #16]
 800b5a6:	6022      	str	r2, [r4, #0]
 800b5a8:	d504      	bpl.n	800b5b4 <__sflush_r+0x7c>
 800b5aa:	1c42      	adds	r2, r0, #1
 800b5ac:	d101      	bne.n	800b5b2 <__sflush_r+0x7a>
 800b5ae:	682b      	ldr	r3, [r5, #0]
 800b5b0:	b903      	cbnz	r3, 800b5b4 <__sflush_r+0x7c>
 800b5b2:	6560      	str	r0, [r4, #84]	; 0x54
 800b5b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5b6:	602f      	str	r7, [r5, #0]
 800b5b8:	2900      	cmp	r1, #0
 800b5ba:	d0ca      	beq.n	800b552 <__sflush_r+0x1a>
 800b5bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5c0:	4299      	cmp	r1, r3
 800b5c2:	d002      	beq.n	800b5ca <__sflush_r+0x92>
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	f7ff faa5 	bl	800ab14 <_free_r>
 800b5ca:	2000      	movs	r0, #0
 800b5cc:	6360      	str	r0, [r4, #52]	; 0x34
 800b5ce:	e7c1      	b.n	800b554 <__sflush_r+0x1c>
 800b5d0:	6a21      	ldr	r1, [r4, #32]
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	47b0      	blx	r6
 800b5d8:	1c41      	adds	r1, r0, #1
 800b5da:	d1c7      	bne.n	800b56c <__sflush_r+0x34>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0c4      	beq.n	800b56c <__sflush_r+0x34>
 800b5e2:	2b1d      	cmp	r3, #29
 800b5e4:	d001      	beq.n	800b5ea <__sflush_r+0xb2>
 800b5e6:	2b16      	cmp	r3, #22
 800b5e8:	d101      	bne.n	800b5ee <__sflush_r+0xb6>
 800b5ea:	602f      	str	r7, [r5, #0]
 800b5ec:	e7b1      	b.n	800b552 <__sflush_r+0x1a>
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5f4:	81a3      	strh	r3, [r4, #12]
 800b5f6:	e7ad      	b.n	800b554 <__sflush_r+0x1c>
 800b5f8:	690f      	ldr	r7, [r1, #16]
 800b5fa:	2f00      	cmp	r7, #0
 800b5fc:	d0a9      	beq.n	800b552 <__sflush_r+0x1a>
 800b5fe:	0793      	lsls	r3, r2, #30
 800b600:	680e      	ldr	r6, [r1, #0]
 800b602:	bf08      	it	eq
 800b604:	694b      	ldreq	r3, [r1, #20]
 800b606:	600f      	str	r7, [r1, #0]
 800b608:	bf18      	it	ne
 800b60a:	2300      	movne	r3, #0
 800b60c:	eba6 0807 	sub.w	r8, r6, r7
 800b610:	608b      	str	r3, [r1, #8]
 800b612:	f1b8 0f00 	cmp.w	r8, #0
 800b616:	dd9c      	ble.n	800b552 <__sflush_r+0x1a>
 800b618:	6a21      	ldr	r1, [r4, #32]
 800b61a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b61c:	4643      	mov	r3, r8
 800b61e:	463a      	mov	r2, r7
 800b620:	4628      	mov	r0, r5
 800b622:	47b0      	blx	r6
 800b624:	2800      	cmp	r0, #0
 800b626:	dc06      	bgt.n	800b636 <__sflush_r+0xfe>
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b62e:	81a3      	strh	r3, [r4, #12]
 800b630:	f04f 30ff 	mov.w	r0, #4294967295
 800b634:	e78e      	b.n	800b554 <__sflush_r+0x1c>
 800b636:	4407      	add	r7, r0
 800b638:	eba8 0800 	sub.w	r8, r8, r0
 800b63c:	e7e9      	b.n	800b612 <__sflush_r+0xda>
 800b63e:	bf00      	nop
 800b640:	20400001 	.word	0x20400001

0800b644 <_fflush_r>:
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	690b      	ldr	r3, [r1, #16]
 800b648:	4605      	mov	r5, r0
 800b64a:	460c      	mov	r4, r1
 800b64c:	b913      	cbnz	r3, 800b654 <_fflush_r+0x10>
 800b64e:	2500      	movs	r5, #0
 800b650:	4628      	mov	r0, r5
 800b652:	bd38      	pop	{r3, r4, r5, pc}
 800b654:	b118      	cbz	r0, 800b65e <_fflush_r+0x1a>
 800b656:	6983      	ldr	r3, [r0, #24]
 800b658:	b90b      	cbnz	r3, 800b65e <_fflush_r+0x1a>
 800b65a:	f000 f887 	bl	800b76c <__sinit>
 800b65e:	4b14      	ldr	r3, [pc, #80]	; (800b6b0 <_fflush_r+0x6c>)
 800b660:	429c      	cmp	r4, r3
 800b662:	d11b      	bne.n	800b69c <_fflush_r+0x58>
 800b664:	686c      	ldr	r4, [r5, #4]
 800b666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0ef      	beq.n	800b64e <_fflush_r+0xa>
 800b66e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b670:	07d0      	lsls	r0, r2, #31
 800b672:	d404      	bmi.n	800b67e <_fflush_r+0x3a>
 800b674:	0599      	lsls	r1, r3, #22
 800b676:	d402      	bmi.n	800b67e <_fflush_r+0x3a>
 800b678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b67a:	f000 f915 	bl	800b8a8 <__retarget_lock_acquire_recursive>
 800b67e:	4628      	mov	r0, r5
 800b680:	4621      	mov	r1, r4
 800b682:	f7ff ff59 	bl	800b538 <__sflush_r>
 800b686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b688:	07da      	lsls	r2, r3, #31
 800b68a:	4605      	mov	r5, r0
 800b68c:	d4e0      	bmi.n	800b650 <_fflush_r+0xc>
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	059b      	lsls	r3, r3, #22
 800b692:	d4dd      	bmi.n	800b650 <_fflush_r+0xc>
 800b694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b696:	f000 f908 	bl	800b8aa <__retarget_lock_release_recursive>
 800b69a:	e7d9      	b.n	800b650 <_fflush_r+0xc>
 800b69c:	4b05      	ldr	r3, [pc, #20]	; (800b6b4 <_fflush_r+0x70>)
 800b69e:	429c      	cmp	r4, r3
 800b6a0:	d101      	bne.n	800b6a6 <_fflush_r+0x62>
 800b6a2:	68ac      	ldr	r4, [r5, #8]
 800b6a4:	e7df      	b.n	800b666 <_fflush_r+0x22>
 800b6a6:	4b04      	ldr	r3, [pc, #16]	; (800b6b8 <_fflush_r+0x74>)
 800b6a8:	429c      	cmp	r4, r3
 800b6aa:	bf08      	it	eq
 800b6ac:	68ec      	ldreq	r4, [r5, #12]
 800b6ae:	e7da      	b.n	800b666 <_fflush_r+0x22>
 800b6b0:	0800c014 	.word	0x0800c014
 800b6b4:	0800c034 	.word	0x0800c034
 800b6b8:	0800bff4 	.word	0x0800bff4

0800b6bc <std>:
 800b6bc:	2300      	movs	r3, #0
 800b6be:	b510      	push	{r4, lr}
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	e9c0 3300 	strd	r3, r3, [r0]
 800b6c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6ca:	6083      	str	r3, [r0, #8]
 800b6cc:	8181      	strh	r1, [r0, #12]
 800b6ce:	6643      	str	r3, [r0, #100]	; 0x64
 800b6d0:	81c2      	strh	r2, [r0, #14]
 800b6d2:	6183      	str	r3, [r0, #24]
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	2208      	movs	r2, #8
 800b6d8:	305c      	adds	r0, #92	; 0x5c
 800b6da:	f7fd fc01 	bl	8008ee0 <memset>
 800b6de:	4b05      	ldr	r3, [pc, #20]	; (800b6f4 <std+0x38>)
 800b6e0:	6263      	str	r3, [r4, #36]	; 0x24
 800b6e2:	4b05      	ldr	r3, [pc, #20]	; (800b6f8 <std+0x3c>)
 800b6e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6e6:	4b05      	ldr	r3, [pc, #20]	; (800b6fc <std+0x40>)
 800b6e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6ea:	4b05      	ldr	r3, [pc, #20]	; (800b700 <std+0x44>)
 800b6ec:	6224      	str	r4, [r4, #32]
 800b6ee:	6323      	str	r3, [r4, #48]	; 0x30
 800b6f0:	bd10      	pop	{r4, pc}
 800b6f2:	bf00      	nop
 800b6f4:	0800ba11 	.word	0x0800ba11
 800b6f8:	0800ba33 	.word	0x0800ba33
 800b6fc:	0800ba6b 	.word	0x0800ba6b
 800b700:	0800ba8f 	.word	0x0800ba8f

0800b704 <_cleanup_r>:
 800b704:	4901      	ldr	r1, [pc, #4]	; (800b70c <_cleanup_r+0x8>)
 800b706:	f000 b8af 	b.w	800b868 <_fwalk_reent>
 800b70a:	bf00      	nop
 800b70c:	0800b645 	.word	0x0800b645

0800b710 <__sfmoreglue>:
 800b710:	b570      	push	{r4, r5, r6, lr}
 800b712:	2268      	movs	r2, #104	; 0x68
 800b714:	1e4d      	subs	r5, r1, #1
 800b716:	4355      	muls	r5, r2
 800b718:	460e      	mov	r6, r1
 800b71a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b71e:	f7ff fa65 	bl	800abec <_malloc_r>
 800b722:	4604      	mov	r4, r0
 800b724:	b140      	cbz	r0, 800b738 <__sfmoreglue+0x28>
 800b726:	2100      	movs	r1, #0
 800b728:	e9c0 1600 	strd	r1, r6, [r0]
 800b72c:	300c      	adds	r0, #12
 800b72e:	60a0      	str	r0, [r4, #8]
 800b730:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b734:	f7fd fbd4 	bl	8008ee0 <memset>
 800b738:	4620      	mov	r0, r4
 800b73a:	bd70      	pop	{r4, r5, r6, pc}

0800b73c <__sfp_lock_acquire>:
 800b73c:	4801      	ldr	r0, [pc, #4]	; (800b744 <__sfp_lock_acquire+0x8>)
 800b73e:	f000 b8b3 	b.w	800b8a8 <__retarget_lock_acquire_recursive>
 800b742:	bf00      	nop
 800b744:	24000861 	.word	0x24000861

0800b748 <__sfp_lock_release>:
 800b748:	4801      	ldr	r0, [pc, #4]	; (800b750 <__sfp_lock_release+0x8>)
 800b74a:	f000 b8ae 	b.w	800b8aa <__retarget_lock_release_recursive>
 800b74e:	bf00      	nop
 800b750:	24000861 	.word	0x24000861

0800b754 <__sinit_lock_acquire>:
 800b754:	4801      	ldr	r0, [pc, #4]	; (800b75c <__sinit_lock_acquire+0x8>)
 800b756:	f000 b8a7 	b.w	800b8a8 <__retarget_lock_acquire_recursive>
 800b75a:	bf00      	nop
 800b75c:	24000862 	.word	0x24000862

0800b760 <__sinit_lock_release>:
 800b760:	4801      	ldr	r0, [pc, #4]	; (800b768 <__sinit_lock_release+0x8>)
 800b762:	f000 b8a2 	b.w	800b8aa <__retarget_lock_release_recursive>
 800b766:	bf00      	nop
 800b768:	24000862 	.word	0x24000862

0800b76c <__sinit>:
 800b76c:	b510      	push	{r4, lr}
 800b76e:	4604      	mov	r4, r0
 800b770:	f7ff fff0 	bl	800b754 <__sinit_lock_acquire>
 800b774:	69a3      	ldr	r3, [r4, #24]
 800b776:	b11b      	cbz	r3, 800b780 <__sinit+0x14>
 800b778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b77c:	f7ff bff0 	b.w	800b760 <__sinit_lock_release>
 800b780:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b784:	6523      	str	r3, [r4, #80]	; 0x50
 800b786:	4b13      	ldr	r3, [pc, #76]	; (800b7d4 <__sinit+0x68>)
 800b788:	4a13      	ldr	r2, [pc, #76]	; (800b7d8 <__sinit+0x6c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b78e:	42a3      	cmp	r3, r4
 800b790:	bf04      	itt	eq
 800b792:	2301      	moveq	r3, #1
 800b794:	61a3      	streq	r3, [r4, #24]
 800b796:	4620      	mov	r0, r4
 800b798:	f000 f820 	bl	800b7dc <__sfp>
 800b79c:	6060      	str	r0, [r4, #4]
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f000 f81c 	bl	800b7dc <__sfp>
 800b7a4:	60a0      	str	r0, [r4, #8]
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f000 f818 	bl	800b7dc <__sfp>
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	60e0      	str	r0, [r4, #12]
 800b7b0:	2104      	movs	r1, #4
 800b7b2:	6860      	ldr	r0, [r4, #4]
 800b7b4:	f7ff ff82 	bl	800b6bc <std>
 800b7b8:	68a0      	ldr	r0, [r4, #8]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	2109      	movs	r1, #9
 800b7be:	f7ff ff7d 	bl	800b6bc <std>
 800b7c2:	68e0      	ldr	r0, [r4, #12]
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	2112      	movs	r1, #18
 800b7c8:	f7ff ff78 	bl	800b6bc <std>
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	61a3      	str	r3, [r4, #24]
 800b7d0:	e7d2      	b.n	800b778 <__sinit+0xc>
 800b7d2:	bf00      	nop
 800b7d4:	0800bc7c 	.word	0x0800bc7c
 800b7d8:	0800b705 	.word	0x0800b705

0800b7dc <__sfp>:
 800b7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7de:	4607      	mov	r7, r0
 800b7e0:	f7ff ffac 	bl	800b73c <__sfp_lock_acquire>
 800b7e4:	4b1e      	ldr	r3, [pc, #120]	; (800b860 <__sfp+0x84>)
 800b7e6:	681e      	ldr	r6, [r3, #0]
 800b7e8:	69b3      	ldr	r3, [r6, #24]
 800b7ea:	b913      	cbnz	r3, 800b7f2 <__sfp+0x16>
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f7ff ffbd 	bl	800b76c <__sinit>
 800b7f2:	3648      	adds	r6, #72	; 0x48
 800b7f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	d503      	bpl.n	800b804 <__sfp+0x28>
 800b7fc:	6833      	ldr	r3, [r6, #0]
 800b7fe:	b30b      	cbz	r3, 800b844 <__sfp+0x68>
 800b800:	6836      	ldr	r6, [r6, #0]
 800b802:	e7f7      	b.n	800b7f4 <__sfp+0x18>
 800b804:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b808:	b9d5      	cbnz	r5, 800b840 <__sfp+0x64>
 800b80a:	4b16      	ldr	r3, [pc, #88]	; (800b864 <__sfp+0x88>)
 800b80c:	60e3      	str	r3, [r4, #12]
 800b80e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b812:	6665      	str	r5, [r4, #100]	; 0x64
 800b814:	f000 f847 	bl	800b8a6 <__retarget_lock_init_recursive>
 800b818:	f7ff ff96 	bl	800b748 <__sfp_lock_release>
 800b81c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b820:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b824:	6025      	str	r5, [r4, #0]
 800b826:	61a5      	str	r5, [r4, #24]
 800b828:	2208      	movs	r2, #8
 800b82a:	4629      	mov	r1, r5
 800b82c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b830:	f7fd fb56 	bl	8008ee0 <memset>
 800b834:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b838:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b83c:	4620      	mov	r0, r4
 800b83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b840:	3468      	adds	r4, #104	; 0x68
 800b842:	e7d9      	b.n	800b7f8 <__sfp+0x1c>
 800b844:	2104      	movs	r1, #4
 800b846:	4638      	mov	r0, r7
 800b848:	f7ff ff62 	bl	800b710 <__sfmoreglue>
 800b84c:	4604      	mov	r4, r0
 800b84e:	6030      	str	r0, [r6, #0]
 800b850:	2800      	cmp	r0, #0
 800b852:	d1d5      	bne.n	800b800 <__sfp+0x24>
 800b854:	f7ff ff78 	bl	800b748 <__sfp_lock_release>
 800b858:	230c      	movs	r3, #12
 800b85a:	603b      	str	r3, [r7, #0]
 800b85c:	e7ee      	b.n	800b83c <__sfp+0x60>
 800b85e:	bf00      	nop
 800b860:	0800bc7c 	.word	0x0800bc7c
 800b864:	ffff0001 	.word	0xffff0001

0800b868 <_fwalk_reent>:
 800b868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b86c:	4606      	mov	r6, r0
 800b86e:	4688      	mov	r8, r1
 800b870:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b874:	2700      	movs	r7, #0
 800b876:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b87a:	f1b9 0901 	subs.w	r9, r9, #1
 800b87e:	d505      	bpl.n	800b88c <_fwalk_reent+0x24>
 800b880:	6824      	ldr	r4, [r4, #0]
 800b882:	2c00      	cmp	r4, #0
 800b884:	d1f7      	bne.n	800b876 <_fwalk_reent+0xe>
 800b886:	4638      	mov	r0, r7
 800b888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b88c:	89ab      	ldrh	r3, [r5, #12]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d907      	bls.n	800b8a2 <_fwalk_reent+0x3a>
 800b892:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b896:	3301      	adds	r3, #1
 800b898:	d003      	beq.n	800b8a2 <_fwalk_reent+0x3a>
 800b89a:	4629      	mov	r1, r5
 800b89c:	4630      	mov	r0, r6
 800b89e:	47c0      	blx	r8
 800b8a0:	4307      	orrs	r7, r0
 800b8a2:	3568      	adds	r5, #104	; 0x68
 800b8a4:	e7e9      	b.n	800b87a <_fwalk_reent+0x12>

0800b8a6 <__retarget_lock_init_recursive>:
 800b8a6:	4770      	bx	lr

0800b8a8 <__retarget_lock_acquire_recursive>:
 800b8a8:	4770      	bx	lr

0800b8aa <__retarget_lock_release_recursive>:
 800b8aa:	4770      	bx	lr

0800b8ac <__swhatbuf_r>:
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	460e      	mov	r6, r1
 800b8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b4:	2900      	cmp	r1, #0
 800b8b6:	b096      	sub	sp, #88	; 0x58
 800b8b8:	4614      	mov	r4, r2
 800b8ba:	461d      	mov	r5, r3
 800b8bc:	da08      	bge.n	800b8d0 <__swhatbuf_r+0x24>
 800b8be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	602a      	str	r2, [r5, #0]
 800b8c6:	061a      	lsls	r2, r3, #24
 800b8c8:	d410      	bmi.n	800b8ec <__swhatbuf_r+0x40>
 800b8ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ce:	e00e      	b.n	800b8ee <__swhatbuf_r+0x42>
 800b8d0:	466a      	mov	r2, sp
 800b8d2:	f000 f903 	bl	800badc <_fstat_r>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	dbf1      	blt.n	800b8be <__swhatbuf_r+0x12>
 800b8da:	9a01      	ldr	r2, [sp, #4]
 800b8dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8e4:	425a      	negs	r2, r3
 800b8e6:	415a      	adcs	r2, r3
 800b8e8:	602a      	str	r2, [r5, #0]
 800b8ea:	e7ee      	b.n	800b8ca <__swhatbuf_r+0x1e>
 800b8ec:	2340      	movs	r3, #64	; 0x40
 800b8ee:	2000      	movs	r0, #0
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	b016      	add	sp, #88	; 0x58
 800b8f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8f8 <__smakebuf_r>:
 800b8f8:	898b      	ldrh	r3, [r1, #12]
 800b8fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8fc:	079d      	lsls	r5, r3, #30
 800b8fe:	4606      	mov	r6, r0
 800b900:	460c      	mov	r4, r1
 800b902:	d507      	bpl.n	800b914 <__smakebuf_r+0x1c>
 800b904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	6123      	str	r3, [r4, #16]
 800b90c:	2301      	movs	r3, #1
 800b90e:	6163      	str	r3, [r4, #20]
 800b910:	b002      	add	sp, #8
 800b912:	bd70      	pop	{r4, r5, r6, pc}
 800b914:	ab01      	add	r3, sp, #4
 800b916:	466a      	mov	r2, sp
 800b918:	f7ff ffc8 	bl	800b8ac <__swhatbuf_r>
 800b91c:	9900      	ldr	r1, [sp, #0]
 800b91e:	4605      	mov	r5, r0
 800b920:	4630      	mov	r0, r6
 800b922:	f7ff f963 	bl	800abec <_malloc_r>
 800b926:	b948      	cbnz	r0, 800b93c <__smakebuf_r+0x44>
 800b928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b92c:	059a      	lsls	r2, r3, #22
 800b92e:	d4ef      	bmi.n	800b910 <__smakebuf_r+0x18>
 800b930:	f023 0303 	bic.w	r3, r3, #3
 800b934:	f043 0302 	orr.w	r3, r3, #2
 800b938:	81a3      	strh	r3, [r4, #12]
 800b93a:	e7e3      	b.n	800b904 <__smakebuf_r+0xc>
 800b93c:	4b0d      	ldr	r3, [pc, #52]	; (800b974 <__smakebuf_r+0x7c>)
 800b93e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	6020      	str	r0, [r4, #0]
 800b944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b948:	81a3      	strh	r3, [r4, #12]
 800b94a:	9b00      	ldr	r3, [sp, #0]
 800b94c:	6163      	str	r3, [r4, #20]
 800b94e:	9b01      	ldr	r3, [sp, #4]
 800b950:	6120      	str	r0, [r4, #16]
 800b952:	b15b      	cbz	r3, 800b96c <__smakebuf_r+0x74>
 800b954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b958:	4630      	mov	r0, r6
 800b95a:	f000 f8d1 	bl	800bb00 <_isatty_r>
 800b95e:	b128      	cbz	r0, 800b96c <__smakebuf_r+0x74>
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	f023 0303 	bic.w	r3, r3, #3
 800b966:	f043 0301 	orr.w	r3, r3, #1
 800b96a:	81a3      	strh	r3, [r4, #12]
 800b96c:	89a0      	ldrh	r0, [r4, #12]
 800b96e:	4305      	orrs	r5, r0
 800b970:	81a5      	strh	r5, [r4, #12]
 800b972:	e7cd      	b.n	800b910 <__smakebuf_r+0x18>
 800b974:	0800b705 	.word	0x0800b705

0800b978 <_malloc_usable_size_r>:
 800b978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b97c:	1f18      	subs	r0, r3, #4
 800b97e:	2b00      	cmp	r3, #0
 800b980:	bfbc      	itt	lt
 800b982:	580b      	ldrlt	r3, [r1, r0]
 800b984:	18c0      	addlt	r0, r0, r3
 800b986:	4770      	bx	lr

0800b988 <_raise_r>:
 800b988:	291f      	cmp	r1, #31
 800b98a:	b538      	push	{r3, r4, r5, lr}
 800b98c:	4604      	mov	r4, r0
 800b98e:	460d      	mov	r5, r1
 800b990:	d904      	bls.n	800b99c <_raise_r+0x14>
 800b992:	2316      	movs	r3, #22
 800b994:	6003      	str	r3, [r0, #0]
 800b996:	f04f 30ff 	mov.w	r0, #4294967295
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b99e:	b112      	cbz	r2, 800b9a6 <_raise_r+0x1e>
 800b9a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9a4:	b94b      	cbnz	r3, 800b9ba <_raise_r+0x32>
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f000 f830 	bl	800ba0c <_getpid_r>
 800b9ac:	462a      	mov	r2, r5
 800b9ae:	4601      	mov	r1, r0
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9b6:	f000 b817 	b.w	800b9e8 <_kill_r>
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d00a      	beq.n	800b9d4 <_raise_r+0x4c>
 800b9be:	1c59      	adds	r1, r3, #1
 800b9c0:	d103      	bne.n	800b9ca <_raise_r+0x42>
 800b9c2:	2316      	movs	r3, #22
 800b9c4:	6003      	str	r3, [r0, #0]
 800b9c6:	2001      	movs	r0, #1
 800b9c8:	e7e7      	b.n	800b99a <_raise_r+0x12>
 800b9ca:	2400      	movs	r4, #0
 800b9cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	4798      	blx	r3
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	e7e0      	b.n	800b99a <_raise_r+0x12>

0800b9d8 <raise>:
 800b9d8:	4b02      	ldr	r3, [pc, #8]	; (800b9e4 <raise+0xc>)
 800b9da:	4601      	mov	r1, r0
 800b9dc:	6818      	ldr	r0, [r3, #0]
 800b9de:	f7ff bfd3 	b.w	800b988 <_raise_r>
 800b9e2:	bf00      	nop
 800b9e4:	24000010 	.word	0x24000010

0800b9e8 <_kill_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	4d07      	ldr	r5, [pc, #28]	; (800ba08 <_kill_r+0x20>)
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	4608      	mov	r0, r1
 800b9f2:	4611      	mov	r1, r2
 800b9f4:	602b      	str	r3, [r5, #0]
 800b9f6:	f7f5 fdcf 	bl	8001598 <_kill>
 800b9fa:	1c43      	adds	r3, r0, #1
 800b9fc:	d102      	bne.n	800ba04 <_kill_r+0x1c>
 800b9fe:	682b      	ldr	r3, [r5, #0]
 800ba00:	b103      	cbz	r3, 800ba04 <_kill_r+0x1c>
 800ba02:	6023      	str	r3, [r4, #0]
 800ba04:	bd38      	pop	{r3, r4, r5, pc}
 800ba06:	bf00      	nop
 800ba08:	2400085c 	.word	0x2400085c

0800ba0c <_getpid_r>:
 800ba0c:	f7f5 bdbc 	b.w	8001588 <_getpid>

0800ba10 <__sread>:
 800ba10:	b510      	push	{r4, lr}
 800ba12:	460c      	mov	r4, r1
 800ba14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba18:	f000 f894 	bl	800bb44 <_read_r>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	bfab      	itete	ge
 800ba20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba22:	89a3      	ldrhlt	r3, [r4, #12]
 800ba24:	181b      	addge	r3, r3, r0
 800ba26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba2a:	bfac      	ite	ge
 800ba2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba2e:	81a3      	strhlt	r3, [r4, #12]
 800ba30:	bd10      	pop	{r4, pc}

0800ba32 <__swrite>:
 800ba32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba36:	461f      	mov	r7, r3
 800ba38:	898b      	ldrh	r3, [r1, #12]
 800ba3a:	05db      	lsls	r3, r3, #23
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	460c      	mov	r4, r1
 800ba40:	4616      	mov	r6, r2
 800ba42:	d505      	bpl.n	800ba50 <__swrite+0x1e>
 800ba44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba48:	2302      	movs	r3, #2
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f000 f868 	bl	800bb20 <_lseek_r>
 800ba50:	89a3      	ldrh	r3, [r4, #12]
 800ba52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba5a:	81a3      	strh	r3, [r4, #12]
 800ba5c:	4632      	mov	r2, r6
 800ba5e:	463b      	mov	r3, r7
 800ba60:	4628      	mov	r0, r5
 800ba62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba66:	f000 b817 	b.w	800ba98 <_write_r>

0800ba6a <__sseek>:
 800ba6a:	b510      	push	{r4, lr}
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba72:	f000 f855 	bl	800bb20 <_lseek_r>
 800ba76:	1c43      	adds	r3, r0, #1
 800ba78:	89a3      	ldrh	r3, [r4, #12]
 800ba7a:	bf15      	itete	ne
 800ba7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba86:	81a3      	strheq	r3, [r4, #12]
 800ba88:	bf18      	it	ne
 800ba8a:	81a3      	strhne	r3, [r4, #12]
 800ba8c:	bd10      	pop	{r4, pc}

0800ba8e <__sclose>:
 800ba8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba92:	f000 b813 	b.w	800babc <_close_r>
	...

0800ba98 <_write_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4d07      	ldr	r5, [pc, #28]	; (800bab8 <_write_r+0x20>)
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	4608      	mov	r0, r1
 800baa0:	4611      	mov	r1, r2
 800baa2:	2200      	movs	r2, #0
 800baa4:	602a      	str	r2, [r5, #0]
 800baa6:	461a      	mov	r2, r3
 800baa8:	f7f5 fdad 	bl	8001606 <_write>
 800baac:	1c43      	adds	r3, r0, #1
 800baae:	d102      	bne.n	800bab6 <_write_r+0x1e>
 800bab0:	682b      	ldr	r3, [r5, #0]
 800bab2:	b103      	cbz	r3, 800bab6 <_write_r+0x1e>
 800bab4:	6023      	str	r3, [r4, #0]
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	2400085c 	.word	0x2400085c

0800babc <_close_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4d06      	ldr	r5, [pc, #24]	; (800bad8 <_close_r+0x1c>)
 800bac0:	2300      	movs	r3, #0
 800bac2:	4604      	mov	r4, r0
 800bac4:	4608      	mov	r0, r1
 800bac6:	602b      	str	r3, [r5, #0]
 800bac8:	f7f5 fdb9 	bl	800163e <_close>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d102      	bne.n	800bad6 <_close_r+0x1a>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	b103      	cbz	r3, 800bad6 <_close_r+0x1a>
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	2400085c 	.word	0x2400085c

0800badc <_fstat_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	4d07      	ldr	r5, [pc, #28]	; (800bafc <_fstat_r+0x20>)
 800bae0:	2300      	movs	r3, #0
 800bae2:	4604      	mov	r4, r0
 800bae4:	4608      	mov	r0, r1
 800bae6:	4611      	mov	r1, r2
 800bae8:	602b      	str	r3, [r5, #0]
 800baea:	f7f5 fdb4 	bl	8001656 <_fstat>
 800baee:	1c43      	adds	r3, r0, #1
 800baf0:	d102      	bne.n	800baf8 <_fstat_r+0x1c>
 800baf2:	682b      	ldr	r3, [r5, #0]
 800baf4:	b103      	cbz	r3, 800baf8 <_fstat_r+0x1c>
 800baf6:	6023      	str	r3, [r4, #0]
 800baf8:	bd38      	pop	{r3, r4, r5, pc}
 800bafa:	bf00      	nop
 800bafc:	2400085c 	.word	0x2400085c

0800bb00 <_isatty_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d06      	ldr	r5, [pc, #24]	; (800bb1c <_isatty_r+0x1c>)
 800bb04:	2300      	movs	r3, #0
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	602b      	str	r3, [r5, #0]
 800bb0c:	f7f5 fdb3 	bl	8001676 <_isatty>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d102      	bne.n	800bb1a <_isatty_r+0x1a>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	b103      	cbz	r3, 800bb1a <_isatty_r+0x1a>
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	2400085c 	.word	0x2400085c

0800bb20 <_lseek_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4d07      	ldr	r5, [pc, #28]	; (800bb40 <_lseek_r+0x20>)
 800bb24:	4604      	mov	r4, r0
 800bb26:	4608      	mov	r0, r1
 800bb28:	4611      	mov	r1, r2
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	602a      	str	r2, [r5, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	f7f5 fdac 	bl	800168c <_lseek>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d102      	bne.n	800bb3e <_lseek_r+0x1e>
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	b103      	cbz	r3, 800bb3e <_lseek_r+0x1e>
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	bd38      	pop	{r3, r4, r5, pc}
 800bb40:	2400085c 	.word	0x2400085c

0800bb44 <_read_r>:
 800bb44:	b538      	push	{r3, r4, r5, lr}
 800bb46:	4d07      	ldr	r5, [pc, #28]	; (800bb64 <_read_r+0x20>)
 800bb48:	4604      	mov	r4, r0
 800bb4a:	4608      	mov	r0, r1
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	2200      	movs	r2, #0
 800bb50:	602a      	str	r2, [r5, #0]
 800bb52:	461a      	mov	r2, r3
 800bb54:	f7f5 fd3a 	bl	80015cc <_read>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d102      	bne.n	800bb62 <_read_r+0x1e>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	b103      	cbz	r3, 800bb62 <_read_r+0x1e>
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	2400085c 	.word	0x2400085c

0800bb68 <_init>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	bf00      	nop
 800bb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6e:	bc08      	pop	{r3}
 800bb70:	469e      	mov	lr, r3
 800bb72:	4770      	bx	lr

0800bb74 <_fini>:
 800bb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb76:	bf00      	nop
 800bb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb7a:	bc08      	pop	{r3}
 800bb7c:	469e      	mov	lr, r3
 800bb7e:	4770      	bx	lr
