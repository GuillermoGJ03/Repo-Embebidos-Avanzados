
Ejercicio_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006028  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062f8  080062f8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006300  08006300  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006300  08006300  00016300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006304  08006304  00016304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  08006308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  24000014  0800631c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400061c  0800631c  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a244  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0a  00000000  00000000  0003a286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003ce90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a663  00000000  00000000  0003f538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001883a  00000000  00000000  00079b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001851d7  00000000  00000000  000923d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002175ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005544  00000000  00000000  002175fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080062a8 	.word	0x080062a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	080062a8 	.word	0x080062a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b7a      	ldr	r3, [pc, #488]	; (8000900 <main+0x1f8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 faef 	bl	8000d14 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fc7f 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f8eb 	bl	8000914 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b70      	ldr	r3, [pc, #448]	; (8000900 <main+0x1f8>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a6e      	ldr	r2, [pc, #440]	; (8000900 <main+0x1f8>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b6c      	ldr	r3, [pc, #432]	; (8000900 <main+0x1f8>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f001 f807 	bl	8001770 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f001 f81d 	bl	80017a4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b63      	ldr	r3, [pc, #396]	; (8000900 <main+0x1f8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 fac1 	bl	8000d14 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 fa0f 	bl	8000bb4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f98f 	bl	8000ab8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079a:	f000 f9d9 	bl	8000b50 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800079e:	f000 f93d 	bl	8000a1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007a2:	4858      	ldr	r0, [pc, #352]	; (8000904 <main+0x1fc>)
 80007a4:	f003 fd3e 	bl	8004224 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(state == 0){
 80007a8:	4b57      	ldr	r3, [pc, #348]	; (8000908 <main+0x200>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d110      	bne.n	80007d2 <main+0xca>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2101      	movs	r1, #1
 80007b4:	4855      	ldr	r0, [pc, #340]	; (800090c <main+0x204>)
 80007b6:	f000 ffc1 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2102      	movs	r1, #2
 80007be:	4854      	ldr	r0, [pc, #336]	; (8000910 <main+0x208>)
 80007c0:	f000 ffbc 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ca:	4850      	ldr	r0, [pc, #320]	; (800090c <main+0x204>)
 80007cc:	f000 ffb6 	bl	800173c <HAL_GPIO_WritePin>
 80007d0:	e7ea      	b.n	80007a8 <main+0xa0>
	  } else if(state == 1){
 80007d2:	4b4d      	ldr	r3, [pc, #308]	; (8000908 <main+0x200>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d110      	bne.n	80007fc <main+0xf4>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2101      	movs	r1, #1
 80007de:	484b      	ldr	r0, [pc, #300]	; (800090c <main+0x204>)
 80007e0:	f000 ffac 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2102      	movs	r1, #2
 80007e8:	4849      	ldr	r0, [pc, #292]	; (8000910 <main+0x208>)
 80007ea:	f000 ffa7 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f4:	4845      	ldr	r0, [pc, #276]	; (800090c <main+0x204>)
 80007f6:	f000 ffa1 	bl	800173c <HAL_GPIO_WritePin>
 80007fa:	e7d5      	b.n	80007a8 <main+0xa0>
	  } else if(state == 2){
 80007fc:	4b42      	ldr	r3, [pc, #264]	; (8000908 <main+0x200>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d110      	bne.n	8000826 <main+0x11e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4840      	ldr	r0, [pc, #256]	; (800090c <main+0x204>)
 800080a:	f000 ff97 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, SET);
 800080e:	2201      	movs	r2, #1
 8000810:	2102      	movs	r1, #2
 8000812:	483f      	ldr	r0, [pc, #252]	; (8000910 <main+0x208>)
 8000814:	f000 ff92 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081e:	483b      	ldr	r0, [pc, #236]	; (800090c <main+0x204>)
 8000820:	f000 ff8c 	bl	800173c <HAL_GPIO_WritePin>
 8000824:	e7c0      	b.n	80007a8 <main+0xa0>
	  } else if(state == 3){
 8000826:	4b38      	ldr	r3, [pc, #224]	; (8000908 <main+0x200>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b03      	cmp	r3, #3
 800082c:	d110      	bne.n	8000850 <main+0x148>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800082e:	2201      	movs	r2, #1
 8000830:	2101      	movs	r1, #1
 8000832:	4836      	ldr	r0, [pc, #216]	; (800090c <main+0x204>)
 8000834:	f000 ff82 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2102      	movs	r1, #2
 800083c:	4834      	ldr	r0, [pc, #208]	; (8000910 <main+0x208>)
 800083e:	f000 ff7d 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000848:	4830      	ldr	r0, [pc, #192]	; (800090c <main+0x204>)
 800084a:	f000 ff77 	bl	800173c <HAL_GPIO_WritePin>
 800084e:	e7ab      	b.n	80007a8 <main+0xa0>
	  } else if (state == 4){
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <main+0x200>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b04      	cmp	r3, #4
 8000856:	d110      	bne.n	800087a <main+0x172>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	482b      	ldr	r0, [pc, #172]	; (800090c <main+0x204>)
 800085e:	f000 ff6d 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2102      	movs	r1, #2
 8000866:	482a      	ldr	r0, [pc, #168]	; (8000910 <main+0x208>)
 8000868:	f000 ff68 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000872:	4826      	ldr	r0, [pc, #152]	; (800090c <main+0x204>)
 8000874:	f000 ff62 	bl	800173c <HAL_GPIO_WritePin>
 8000878:	e796      	b.n	80007a8 <main+0xa0>
	  } else if(state == 5){
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <main+0x200>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b05      	cmp	r3, #5
 8000880:	d110      	bne.n	80008a4 <main+0x19c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000882:	2201      	movs	r2, #1
 8000884:	2101      	movs	r1, #1
 8000886:	4821      	ldr	r0, [pc, #132]	; (800090c <main+0x204>)
 8000888:	f000 ff58 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2102      	movs	r1, #2
 8000890:	481f      	ldr	r0, [pc, #124]	; (8000910 <main+0x208>)
 8000892:	f000 ff53 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089c:	481b      	ldr	r0, [pc, #108]	; (800090c <main+0x204>)
 800089e:	f000 ff4d 	bl	800173c <HAL_GPIO_WritePin>
 80008a2:	e781      	b.n	80007a8 <main+0xa0>
	  } else if(state == 6){
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <main+0x200>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b06      	cmp	r3, #6
 80008aa:	d110      	bne.n	80008ce <main+0x1c6>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2101      	movs	r1, #1
 80008b0:	4816      	ldr	r0, [pc, #88]	; (800090c <main+0x204>)
 80008b2:	f000 ff43 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2102      	movs	r1, #2
 80008ba:	4815      	ldr	r0, [pc, #84]	; (8000910 <main+0x208>)
 80008bc:	f000 ff3e 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c6:	4811      	ldr	r0, [pc, #68]	; (800090c <main+0x204>)
 80008c8:	f000 ff38 	bl	800173c <HAL_GPIO_WritePin>
 80008cc:	e76c      	b.n	80007a8 <main+0xa0>
	  } else if(state == 7){
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <main+0x200>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b07      	cmp	r3, #7
 80008d4:	d110      	bne.n	80008f8 <main+0x1f0>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2101      	movs	r1, #1
 80008da:	480c      	ldr	r0, [pc, #48]	; (800090c <main+0x204>)
 80008dc:	f000 ff2e 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	2102      	movs	r1, #2
 80008e4:	480a      	ldr	r0, [pc, #40]	; (8000910 <main+0x208>)
 80008e6:	f000 ff29 	bl	800173c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <main+0x204>)
 80008f2:	f000 ff23 	bl	800173c <HAL_GPIO_WritePin>
 80008f6:	e757      	b.n	80007a8 <main+0xa0>
	  } else{
		  state = 0;
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <main+0x200>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
	  if(state == 0){
 80008fe:	e753      	b.n	80007a8 <main+0xa0>
 8000900:	58024400 	.word	0x58024400
 8000904:	24000030 	.word	0x24000030
 8000908:	24000008 	.word	0x24000008
 800090c:	58020400 	.word	0x58020400
 8000910:	58021000 	.word	0x58021000

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	; 0x70
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	224c      	movs	r2, #76	; 0x4c
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f005 fcb8 	bl	8006298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2220      	movs	r2, #32
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f005 fcb2 	bl	8006298 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000934:	2004      	movs	r0, #4
 8000936:	f001 f891 	bl	8001a5c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <SystemClock_Config+0xfc>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <SystemClock_Config+0xfc>)
 8000944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <SystemClock_Config+0xfc>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <SystemClock_Config+0x100>)
 8000956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000958:	4a2e      	ldr	r2, [pc, #184]	; (8000a14 <SystemClock_Config+0x100>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000960:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <SystemClock_Config+0x100>)
 8000962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800096c:	bf00      	nop
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <SystemClock_Config+0xfc>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800097a:	d1f8      	bne.n	800096e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800097c:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <SystemClock_Config+0x104>)
 800097e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000980:	f023 0303 	bic.w	r3, r3, #3
 8000984:	4a24      	ldr	r2, [pc, #144]	; (8000a18 <SystemClock_Config+0x104>)
 8000986:	f043 0302 	orr.w	r3, r3, #2
 800098a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000990:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	2302      	movs	r3, #2
 800099c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009a2:	2378      	movs	r3, #120	; 0x78
 80009a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009b2:	230c      	movs	r3, #12
 80009b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f8b4 	bl	8001b30 <HAL_RCC_OscConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009ce:	f000 f9a1 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	233f      	movs	r3, #63	; 0x3f
 80009d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2303      	movs	r3, #3
 80009d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009de:	2308      	movs	r3, #8
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009e6:	2340      	movs	r3, #64	; 0x40
 80009e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2104      	movs	r1, #4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fcc7 	bl	800238c <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000a04:	f000 f986 	bl	8000d14 <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3770      	adds	r7, #112	; 0x70
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	58024800 	.word	0x58024800
 8000a14:	58000400 	.word	0x58000400
 8000a18:	58024400 	.word	0x58024400

08000a1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_TIM2_Init+0x98>)
 8000a3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_TIM2_Init+0x98>)
 8000a44:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000a48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_TIM2_Init+0x98>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_TIM2_Init+0x98>)
 8000a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_TIM2_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_TIM2_Init+0x98>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a64:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <MX_TIM2_Init+0x98>)
 8000a66:	f003 fb85 	bl	8004174 <HAL_TIM_Base_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a70:	f000 f950 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <MX_TIM2_Init+0x98>)
 8000a82:	f003 fd67 	bl	8004554 <HAL_TIM_ConfigClockSource>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a8c:	f000 f942 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_TIM2_Init+0x98>)
 8000a9e:	f003 ffb1 	bl	8004a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000aa8:	f000 f934 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000030 	.word	0x24000030

08000ab8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <MX_USART3_UART_Init+0x94>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b02:	f004 f82b 	bl	8004b5c <HAL_UART_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f000 f902 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b14:	f004 ffc8 	bl	8005aa8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b1e:	f000 f8f9 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b26:	f004 fffd 	bl	8005b24 <HAL_UARTEx_SetRxFifoThreshold>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f000 f8f0 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b36:	f004 ff7e 	bl	8005a36 <HAL_UARTEx_DisableFifoMode>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 f8e8 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2400007c 	.word	0x2400007c
 8000b4c:	40004800 	.word	0x40004800

08000b50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b56:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5c:	2209      	movs	r2, #9
 8000b5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b98:	f000 fe18 	bl	80017cc <HAL_PCD_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ba2:	f000 f8b7 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2400010c 	.word	0x2400010c
 8000bb0:	40080000 	.word	0x40080000

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b43      	ldr	r3, [pc, #268]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	4a41      	ldr	r2, [pc, #260]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bda:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be8:	4b3b      	ldr	r3, [pc, #236]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	4a3a      	ldr	r2, [pc, #232]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_GPIO_Init+0x124>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c84:	4815      	ldr	r0, [pc, #84]	; (8000cdc <MX_GPIO_Init+0x128>)
 8000c86:	f000 fd59 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4814      	ldr	r0, [pc, #80]	; (8000ce0 <MX_GPIO_Init+0x12c>)
 8000c90:	f000 fd54 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c94:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MX_GPIO_Init+0x128>)
 8000cae:	f000 fb95 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_GPIO_Init+0x12c>)
 8000cca:	f000 fb87 	bl	80013dc <HAL_GPIO_Init>

}
 8000cce:	bf00      	nop
 8000cd0:	3730      	adds	r7, #48	; 0x30
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020400 	.word	0x58020400
 8000ce0:	58021000 	.word	0x58021000

08000ce4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d105      	bne.n	8000d00 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		state++;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cfe:	701a      	strb	r2, [r3, #0]
	}
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	24000030 	.word	0x24000030
 8000d10:	24000008 	.word	0x24000008

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_MspInit+0x30>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d2c:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x30>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x30>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	58024400 	.word	0x58024400

08000d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d64:	d116      	bne.n	8000d94 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_TIM_Base_MspInit+0x48>)
 8000d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d6c:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <HAL_TIM_Base_MspInit+0x48>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_TIM_Base_MspInit+0x48>)
 8000d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	201c      	movs	r0, #28
 8000d8a:	f000 faf2 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d8e:	201c      	movs	r0, #28
 8000d90:	f000 fb09 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	58024400 	.word	0x58024400

08000da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0b8      	sub	sp, #224	; 0xe0
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	22bc      	movs	r2, #188	; 0xbc
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f005 fa69 	bl	8006298 <memset>
  if(huart->Instance==USART3)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a25      	ldr	r2, [pc, #148]	; (8000e60 <HAL_UART_MspInit+0xc0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d142      	bne.n	8000e56 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 fe60 	bl	8002aa4 <HAL_RCCEx_PeriphCLKConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dea:	f7ff ff93 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_UART_MspInit+0xc4>)
 8000df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000df4:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <HAL_UART_MspInit+0xc4>)
 8000df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_UART_MspInit+0xc4>)
 8000e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_UART_MspInit+0xc4>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <HAL_UART_MspInit+0xc4>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_UART_MspInit+0xc4>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e44:	2307      	movs	r3, #7
 8000e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <HAL_UART_MspInit+0xc8>)
 8000e52:	f000 fac3 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e56:	bf00      	nop
 8000e58:	37e0      	adds	r7, #224	; 0xe0
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40004800 	.word	0x40004800
 8000e64:	58024400 	.word	0x58024400
 8000e68:	58020c00 	.word	0x58020c00

08000e6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0b8      	sub	sp, #224	; 0xe0
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	22bc      	movs	r2, #188	; 0xbc
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f005 fa03 	bl	8006298 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a36      	ldr	r2, [pc, #216]	; (8000f70 <HAL_PCD_MspInit+0x104>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d165      	bne.n	8000f68 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ea0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000ea6:	2318      	movs	r3, #24
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000eb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eba:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ec0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ec4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f001 fde9 	bl	8002aa4 <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000ed8:	f7ff ff1c 	bl	8000d14 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000edc:	f000 fe18 	bl	8001b10 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <HAL_PCD_MspInit+0x108>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <HAL_PCD_MspInit+0x108>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_PCD_MspInit+0x108>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000efe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f18:	230a      	movs	r3, #10
 8000f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f22:	4619      	mov	r1, r3
 8000f24:	4814      	ldr	r0, [pc, #80]	; (8000f78 <HAL_PCD_MspInit+0x10c>)
 8000f26:	f000 fa59 	bl	80013dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f42:	4619      	mov	r1, r3
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <HAL_PCD_MspInit+0x10c>)
 8000f46:	f000 fa49 	bl	80013dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_PCD_MspInit+0x108>)
 8000f4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f50:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_PCD_MspInit+0x108>)
 8000f52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_PCD_MspInit+0x108>)
 8000f5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	37e0      	adds	r7, #224	; 0xe0
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40080000 	.word	0x40080000
 8000f74:	58024400 	.word	0x58024400
 8000f78:	58020000 	.word	0x58020000

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f000 f8a8 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <TIM2_IRQHandler+0x10>)
 8000fd6:	f003 f99d 	bl	8004314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	24000030 	.word	0x24000030

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe8:	f7ff faf8 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	; (8001024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	; (8001030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001012:	f005 f91d 	bl	8006250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fb77 	bl	8000708 <main>
  bx  lr
 800101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001020:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001024:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001028:	08006308 	.word	0x08006308
  ldr r2, =_sbss
 800102c:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001030:	2400061c 	.word	0x2400061c

08001034 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC3_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103e:	2003      	movs	r0, #3
 8001040:	f000 f98c 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001044:	f001 fb58 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 8001048:	4602      	mov	r2, r0
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_Init+0x68>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	f003 030f 	and.w	r3, r3, #15
 8001054:	4913      	ldr	r1, [pc, #76]	; (80010a4 <HAL_Init+0x6c>)
 8001056:	5ccb      	ldrb	r3, [r1, r3]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <HAL_Init+0x68>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <HAL_Init+0x6c>)
 800106c:	5cd3      	ldrb	r3, [r2, r3]
 800106e:	f003 031f 	and.w	r3, r3, #31
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	fa22 f303 	lsr.w	r3, r2, r3
 8001078:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <HAL_Init+0x70>)
 800107a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_Init+0x74>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f814 	bl	80010b0 <HAL_InitTick>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e002      	b.n	8001098 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001092:	f7ff fe45 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	58024400 	.word	0x58024400
 80010a4:	080062c0 	.word	0x080062c0
 80010a8:	24000004 	.word	0x24000004
 80010ac:	24000000 	.word	0x24000000

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_InitTick+0x60>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e021      	b.n	8001108 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <HAL_InitTick+0x64>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_InitTick+0x60>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f971 	bl	80013c2 <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 f93b 	bl	8001372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_InitTick+0x68>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	24000010 	.word	0x24000010
 8001114:	24000000 	.word	0x24000000
 8001118:	2400000c 	.word	0x2400000c

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	24000010 	.word	0x24000010
 8001140:	24000618 	.word	0x24000618

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	24000618 	.word	0x24000618

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001182:	bf00      	nop
 8001184:	f7ff ffde 	bl	8001144 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	24000010 	.word	0x24000010

080011a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetREVID+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0c1b      	lsrs	r3, r3, #16
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	5c001000 	.word	0x5c001000

080011bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <__NVIC_SetPriorityGrouping+0x40>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d8:	4013      	ands	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ea:	4a04      	ldr	r2, [pc, #16]	; (80011fc <__NVIC_SetPriorityGrouping+0x40>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	60d3      	str	r3, [r2, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00
 8001200:	05fa0000 	.word	0x05fa0000

08001204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <__NVIC_GetPriorityGrouping+0x18>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	f003 0307 	and.w	r3, r3, #7
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800122a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122e:	2b00      	cmp	r3, #0
 8001230:	db0b      	blt.n	800124a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	f003 021f 	and.w	r2, r3, #31
 8001238:	4907      	ldr	r1, [pc, #28]	; (8001258 <__NVIC_EnableIRQ+0x38>)
 800123a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	2001      	movs	r0, #1
 8001242:	fa00 f202 	lsl.w	r2, r0, r2
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000e100 	.word	0xe000e100

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001328:	d301      	bcc.n	800132e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e00f      	b.n	800134e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <SysTick_Config+0x40>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	210f      	movs	r1, #15
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f7ff ff8e 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <SysTick_Config+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <SysTick_Config+0x40>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff29 	bl	80011bc <__NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff40 	bl	8001204 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff90 	bl	80012b0 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5f 	bl	800125c <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff33 	bl	8001220 <__NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa4 	bl	8001318 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013ea:	4b89      	ldr	r3, [pc, #548]	; (8001610 <HAL_GPIO_Init+0x234>)
 80013ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013ee:	e194      	b.n	800171a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8186 	beq.w	8001714 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b01      	cmp	r3, #1
 8001412:	d005      	beq.n	8001420 <HAL_GPIO_Init+0x44>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d130      	bne.n	8001482 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001456:	2201      	movs	r2, #1
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	f003 0201 	and.w	r2, r3, #1
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b03      	cmp	r3, #3
 800148c:	d017      	beq.n	80014be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d123      	bne.n	8001512 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	220f      	movs	r2, #15
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	69b9      	ldr	r1, [r7, #24]
 800150e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0203 	and.w	r2, r3, #3
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80e0 	beq.w	8001714 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_GPIO_Init+0x238>)
 8001556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800155a:	4a2e      	ldr	r2, [pc, #184]	; (8001614 <HAL_GPIO_Init+0x238>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001564:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_GPIO_Init+0x238>)
 8001566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001572:	4a29      	ldr	r2, [pc, #164]	; (8001618 <HAL_GPIO_Init+0x23c>)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a20      	ldr	r2, [pc, #128]	; (800161c <HAL_GPIO_Init+0x240>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d052      	beq.n	8001644 <HAL_GPIO_Init+0x268>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <HAL_GPIO_Init+0x244>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d031      	beq.n	800160a <HAL_GPIO_Init+0x22e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <HAL_GPIO_Init+0x248>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d02b      	beq.n	8001606 <HAL_GPIO_Init+0x22a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_GPIO_Init+0x24c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d025      	beq.n	8001602 <HAL_GPIO_Init+0x226>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a1c      	ldr	r2, [pc, #112]	; (800162c <HAL_GPIO_Init+0x250>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01f      	beq.n	80015fe <HAL_GPIO_Init+0x222>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <HAL_GPIO_Init+0x254>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d019      	beq.n	80015fa <HAL_GPIO_Init+0x21e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <HAL_GPIO_Init+0x258>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x21a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <HAL_GPIO_Init+0x25c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00d      	beq.n	80015f2 <HAL_GPIO_Init+0x216>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a18      	ldr	r2, [pc, #96]	; (800163c <HAL_GPIO_Init+0x260>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x212>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_GPIO_Init+0x264>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_GPIO_Init+0x20e>
 80015e6:	2309      	movs	r3, #9
 80015e8:	e02d      	b.n	8001646 <HAL_GPIO_Init+0x26a>
 80015ea:	230a      	movs	r3, #10
 80015ec:	e02b      	b.n	8001646 <HAL_GPIO_Init+0x26a>
 80015ee:	2308      	movs	r3, #8
 80015f0:	e029      	b.n	8001646 <HAL_GPIO_Init+0x26a>
 80015f2:	2307      	movs	r3, #7
 80015f4:	e027      	b.n	8001646 <HAL_GPIO_Init+0x26a>
 80015f6:	2306      	movs	r3, #6
 80015f8:	e025      	b.n	8001646 <HAL_GPIO_Init+0x26a>
 80015fa:	2305      	movs	r3, #5
 80015fc:	e023      	b.n	8001646 <HAL_GPIO_Init+0x26a>
 80015fe:	2304      	movs	r3, #4
 8001600:	e021      	b.n	8001646 <HAL_GPIO_Init+0x26a>
 8001602:	2303      	movs	r3, #3
 8001604:	e01f      	b.n	8001646 <HAL_GPIO_Init+0x26a>
 8001606:	2302      	movs	r3, #2
 8001608:	e01d      	b.n	8001646 <HAL_GPIO_Init+0x26a>
 800160a:	2301      	movs	r3, #1
 800160c:	e01b      	b.n	8001646 <HAL_GPIO_Init+0x26a>
 800160e:	bf00      	nop
 8001610:	58000080 	.word	0x58000080
 8001614:	58024400 	.word	0x58024400
 8001618:	58000400 	.word	0x58000400
 800161c:	58020000 	.word	0x58020000
 8001620:	58020400 	.word	0x58020400
 8001624:	58020800 	.word	0x58020800
 8001628:	58020c00 	.word	0x58020c00
 800162c:	58021000 	.word	0x58021000
 8001630:	58021400 	.word	0x58021400
 8001634:	58021800 	.word	0x58021800
 8001638:	58021c00 	.word	0x58021c00
 800163c:	58022000 	.word	0x58022000
 8001640:	58022400 	.word	0x58022400
 8001644:	2300      	movs	r3, #0
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	f002 0203 	and.w	r2, r2, #3
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	4093      	lsls	r3, r2
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001656:	4938      	ldr	r1, [pc, #224]	; (8001738 <HAL_GPIO_Init+0x35c>)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800168a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	3301      	adds	r3, #1
 8001718:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	f47f ae63 	bne.w	80013f0 <HAL_GPIO_Init+0x14>
  }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	3724      	adds	r7, #36	; 0x24
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	58000400 	.word	0x58000400

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001758:	e003      	b.n	8001762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	041a      	lsls	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	619a      	str	r2, [r3, #24]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001778:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_HSEM_FastTake+0x2c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3320      	adds	r3, #32
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_HSEM_FastTake+0x30>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	e000      	b.n	800178e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	58026400 	.word	0x58026400
 80017a0:	80000300 	.word	0x80000300

080017a4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80017ae:	4906      	ldr	r1, [pc, #24]	; (80017c8 <HAL_HSEM_Release+0x24>)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	58026400 	.word	0x58026400

080017cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	b08f      	sub	sp, #60	; 0x3c
 80017d0:	af0a      	add	r7, sp, #40	; 0x28
 80017d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e116      	b.n	8001a0c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d106      	bne.n	80017fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fb37 	bl	8000e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2203      	movs	r2, #3
 8001802:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f004 fa7b 	bl	8005d18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	687e      	ldr	r6, [r7, #4]
 800182a:	466d      	mov	r5, sp
 800182c:	f106 0410 	add.w	r4, r6, #16
 8001830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001838:	e894 0003 	ldmia.w	r4, {r0, r1}
 800183c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001840:	1d33      	adds	r3, r6, #4
 8001842:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001844:	6838      	ldr	r0, [r7, #0]
 8001846:	f004 f9f9 	bl	8005c3c <USB_CoreInit>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2202      	movs	r2, #2
 8001854:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0d7      	b.n	8001a0c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f004 fa69 	bl	8005d3a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	e04a      	b.n	8001904 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	333d      	adds	r3, #61	; 0x3d
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	333c      	adds	r3, #60	; 0x3c
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	b298      	uxth	r0, r3
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	3344      	adds	r3, #68	; 0x44
 80018aa:	4602      	mov	r2, r0
 80018ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	3340      	adds	r3, #64	; 0x40
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	3348      	adds	r3, #72	; 0x48
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	334c      	adds	r3, #76	; 0x4c
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3354      	adds	r3, #84	; 0x54
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	3301      	adds	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	d3af      	bcc.n	800186e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e044      	b.n	800199e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	3301      	adds	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d3b5      	bcc.n	8001914 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	687e      	ldr	r6, [r7, #4]
 80019b0:	466d      	mov	r5, sp
 80019b2:	f106 0410 	add.w	r4, r6, #16
 80019b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80019c6:	1d33      	adds	r3, r6, #4
 80019c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ca:	6838      	ldr	r0, [r7, #0]
 80019cc:	f004 fa02 	bl	8005dd4 <USB_DevInit>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e014      	b.n	8001a0c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d102      	bne.n	8001a00 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f80a 	bl	8001a14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f004 fbc0 	bl	800618a <USB_DevDisconnect>

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_PCDEx_ActivateLPM+0x44>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	10000003 	.word	0x10000003

08001a5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	2b06      	cmp	r3, #6
 8001a6e:	d00a      	beq.n	8001a86 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d001      	beq.n	8001a82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e040      	b.n	8001b04 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e03e      	b.n	8001b04 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001a8e:	491f      	ldr	r1, [pc, #124]	; (8001b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a96:	f7ff fb55 	bl	8001144 <HAL_GetTick>
 8001a9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a9c:	e009      	b.n	8001ab2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a9e:	f7ff fb51 	bl	8001144 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aac:	d901      	bls.n	8001ab2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e028      	b.n	8001b04 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001abe:	d1ee      	bne.n	8001a9e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b1e      	cmp	r3, #30
 8001ac4:	d008      	beq.n	8001ad8 <HAL_PWREx_ConfigSupply+0x7c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8001aca:	d005      	beq.n	8001ad8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b1d      	cmp	r3, #29
 8001ad0:	d002      	beq.n	8001ad8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b2d      	cmp	r3, #45	; 0x2d
 8001ad6:	d114      	bne.n	8001b02 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ad8:	f7ff fb34 	bl	8001144 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ade:	e009      	b.n	8001af4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ae0:	f7ff fb30 	bl	8001144 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aee:	d901      	bls.n	8001af4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e007      	b.n	8001b04 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b00:	d1ee      	bne.n	8001ae0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	58024800 	.word	0x58024800

08001b10 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	58024800 	.word	0x58024800

08001b30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	; 0x30
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f000 bc1d 	b.w	800237e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8087 	beq.w	8001c60 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	4b99      	ldr	r3, [pc, #612]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b5c:	4b96      	ldr	r3, [pc, #600]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d007      	beq.n	8001b78 <HAL_RCC_OscConfig+0x48>
 8001b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6a:	2b18      	cmp	r3, #24
 8001b6c:	d110      	bne.n	8001b90 <HAL_RCC_OscConfig+0x60>
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d10b      	bne.n	8001b90 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	4b8f      	ldr	r3, [pc, #572]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d06c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x12e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d168      	bne.n	8001c5e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e3f6      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x78>
 8001b9a:	4b87      	ldr	r3, [pc, #540]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a86      	ldr	r2, [pc, #536]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e02e      	b.n	8001c06 <HAL_RCC_OscConfig+0xd6>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10c      	bne.n	8001bca <HAL_RCC_OscConfig+0x9a>
 8001bb0:	4b81      	ldr	r3, [pc, #516]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a80      	ldr	r2, [pc, #512]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b7e      	ldr	r3, [pc, #504]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a7d      	ldr	r2, [pc, #500]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	e01d      	b.n	8001c06 <HAL_RCC_OscConfig+0xd6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd2:	d10c      	bne.n	8001bee <HAL_RCC_OscConfig+0xbe>
 8001bd4:	4b78      	ldr	r3, [pc, #480]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a77      	ldr	r2, [pc, #476]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b75      	ldr	r3, [pc, #468]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a74      	ldr	r2, [pc, #464]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	e00b      	b.n	8001c06 <HAL_RCC_OscConfig+0xd6>
 8001bee:	4b72      	ldr	r3, [pc, #456]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a71      	ldr	r2, [pc, #452]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b6f      	ldr	r3, [pc, #444]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6e      	ldr	r2, [pc, #440]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d013      	beq.n	8001c36 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7ff fa99 	bl	8001144 <HAL_GetTick>
 8001c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c16:	f7ff fa95 	bl	8001144 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b64      	cmp	r3, #100	; 0x64
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e3aa      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c28:	4b63      	ldr	r3, [pc, #396]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0xe6>
 8001c34:	e014      	b.n	8001c60 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff fa85 	bl	8001144 <HAL_GetTick>
 8001c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3e:	f7ff fa81 	bl	8001144 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b64      	cmp	r3, #100	; 0x64
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e396      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c50:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x10e>
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80cb 	beq.w	8001e04 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6e:	4b52      	ldr	r3, [pc, #328]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c76:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c78:	4b4f      	ldr	r3, [pc, #316]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <HAL_RCC_OscConfig+0x164>
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	2b18      	cmp	r3, #24
 8001c88:	d156      	bne.n	8001d38 <HAL_RCC_OscConfig+0x208>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d151      	bne.n	8001d38 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c94:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_OscConfig+0x17c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e368      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cac:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 0219 	bic.w	r2, r3, #25
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	493f      	ldr	r1, [pc, #252]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cbe:	f7ff fa41 	bl	8001144 <HAL_GetTick>
 8001cc2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fa3d 	bl	8001144 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e352      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cd8:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	f7ff fa5e 	bl	80011a4 <HAL_GetREVID>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d817      	bhi.n	8001d22 <HAL_RCC_OscConfig+0x1f2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2b40      	cmp	r3, #64	; 0x40
 8001cf8:	d108      	bne.n	8001d0c <HAL_RCC_OscConfig+0x1dc>
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d02:	4a2d      	ldr	r2, [pc, #180]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d0a:	e07b      	b.n	8001e04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	031b      	lsls	r3, r3, #12
 8001d1a:	4927      	ldr	r1, [pc, #156]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d20:	e070      	b.n	8001e04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	061b      	lsls	r3, r3, #24
 8001d30:	4921      	ldr	r1, [pc, #132]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d36:	e065      	b.n	8001e04 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d048      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 0219 	bic.w	r2, r3, #25
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	491a      	ldr	r1, [pc, #104]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff f9f7 	bl	8001144 <HAL_GetTick>
 8001d56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff f9f3 	bl	8001144 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e308      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	f7ff fa14 	bl	80011a4 <HAL_GetREVID>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d81a      	bhi.n	8001dbc <HAL_RCC_OscConfig+0x28c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b40      	cmp	r3, #64	; 0x40
 8001d8c:	d108      	bne.n	8001da0 <HAL_RCC_OscConfig+0x270>
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	6053      	str	r3, [r2, #4]
 8001d9e:	e031      	b.n	8001e04 <HAL_RCC_OscConfig+0x2d4>
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	031b      	lsls	r3, r3, #12
 8001dae:	4902      	ldr	r1, [pc, #8]	; (8001db8 <HAL_RCC_OscConfig+0x288>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
 8001db4:	e026      	b.n	8001e04 <HAL_RCC_OscConfig+0x2d4>
 8001db6:	bf00      	nop
 8001db8:	58024400 	.word	0x58024400
 8001dbc:	4b9a      	ldr	r3, [pc, #616]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	061b      	lsls	r3, r3, #24
 8001dca:	4997      	ldr	r1, [pc, #604]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
 8001dd0:	e018      	b.n	8001e04 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd2:	4b95      	ldr	r3, [pc, #596]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a94      	ldr	r2, [pc, #592]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff f9b1 	bl	8001144 <HAL_GetTick>
 8001de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de6:	f7ff f9ad 	bl	8001144 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e2c2      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001df8:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f0      	bne.n	8001de6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80a9 	beq.w	8001f64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e12:	4b85      	ldr	r3, [pc, #532]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e1c:	4b82      	ldr	r3, [pc, #520]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d007      	beq.n	8001e38 <HAL_RCC_OscConfig+0x308>
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b18      	cmp	r3, #24
 8001e2c:	d13a      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x374>
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d135      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e38:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_OscConfig+0x320>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	2b80      	cmp	r3, #128	; 0x80
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e296      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e50:	f7ff f9a8 	bl	80011a4 <HAL_GetREVID>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d817      	bhi.n	8001e8e <HAL_RCC_OscConfig+0x35e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d108      	bne.n	8001e78 <HAL_RCC_OscConfig+0x348>
 8001e66:	4b70      	ldr	r3, [pc, #448]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e6e:	4a6e      	ldr	r2, [pc, #440]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e76:	e075      	b.n	8001f64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e78:	4b6b      	ldr	r3, [pc, #428]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	069b      	lsls	r3, r3, #26
 8001e86:	4968      	ldr	r1, [pc, #416]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e8c:	e06a      	b.n	8001f64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e8e:	4b66      	ldr	r3, [pc, #408]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	061b      	lsls	r3, r3, #24
 8001e9c:	4962      	ldr	r1, [pc, #392]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ea2:	e05f      	b.n	8001f64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d042      	beq.n	8001f32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001eac:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f944 	bl	8001144 <HAL_GetTick>
 8001ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ec0:	f7ff f940 	bl	8001144 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e255      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ed2:	4b55      	ldr	r3, [pc, #340]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ede:	f7ff f961 	bl	80011a4 <HAL_GetREVID>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d817      	bhi.n	8001f1c <HAL_RCC_OscConfig+0x3ec>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d108      	bne.n	8001f06 <HAL_RCC_OscConfig+0x3d6>
 8001ef4:	4b4c      	ldr	r3, [pc, #304]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001efc:	4a4a      	ldr	r2, [pc, #296]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001efe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f02:	6053      	str	r3, [r2, #4]
 8001f04:	e02e      	b.n	8001f64 <HAL_RCC_OscConfig+0x434>
 8001f06:	4b48      	ldr	r3, [pc, #288]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	069b      	lsls	r3, r3, #26
 8001f14:	4944      	ldr	r1, [pc, #272]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
 8001f1a:	e023      	b.n	8001f64 <HAL_RCC_OscConfig+0x434>
 8001f1c:	4b42      	ldr	r3, [pc, #264]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	061b      	lsls	r3, r3, #24
 8001f2a:	493f      	ldr	r1, [pc, #252]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
 8001f30:	e018      	b.n	8001f64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a3c      	ldr	r2, [pc, #240]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f901 	bl	8001144 <HAL_GetTick>
 8001f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f46:	f7ff f8fd 	bl	8001144 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e212      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f58:	4b33      	ldr	r3, [pc, #204]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d036      	beq.n	8001fde <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d019      	beq.n	8001fac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7c:	4a2a      	ldr	r2, [pc, #168]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff f8de 	bl	8001144 <HAL_GetTick>
 8001f88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f8da 	bl	8001144 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1ef      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x45c>
 8001faa:	e018      	b.n	8001fde <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb8:	f7ff f8c4 	bl	8001144 <HAL_GetTick>
 8001fbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7ff f8c0 	bl	8001144 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e1d5      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d039      	beq.n	800205e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d01c      	beq.n	800202c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001ff8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ffc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff f8a1 	bl	8001144 <HAL_GetTick>
 8002002:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002006:	f7ff f89d 	bl	8001144 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e1b2      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x4d6>
 8002024:	e01b      	b.n	800205e <HAL_RCC_OscConfig+0x52e>
 8002026:	bf00      	nop
 8002028:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800202c:	4b9b      	ldr	r3, [pc, #620]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a9a      	ldr	r2, [pc, #616]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002036:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002038:	f7ff f884 	bl	8001144 <HAL_GetTick>
 800203c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002040:	f7ff f880 	bl	8001144 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e195      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002052:	4b92      	ldr	r3, [pc, #584]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8081 	beq.w	800216e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800206c:	4b8c      	ldr	r3, [pc, #560]	; (80022a0 <HAL_RCC_OscConfig+0x770>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a8b      	ldr	r2, [pc, #556]	; (80022a0 <HAL_RCC_OscConfig+0x770>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002078:	f7ff f864 	bl	8001144 <HAL_GetTick>
 800207c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002080:	f7ff f860 	bl	8001144 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e175      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002092:	4b83      	ldr	r3, [pc, #524]	; (80022a0 <HAL_RCC_OscConfig+0x770>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d106      	bne.n	80020b4 <HAL_RCC_OscConfig+0x584>
 80020a6:	4b7d      	ldr	r3, [pc, #500]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020aa:	4a7c      	ldr	r2, [pc, #496]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6713      	str	r3, [r2, #112]	; 0x70
 80020b2:	e02d      	b.n	8002110 <HAL_RCC_OscConfig+0x5e0>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_OscConfig+0x5a6>
 80020bc:	4b77      	ldr	r3, [pc, #476]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	4a76      	ldr	r2, [pc, #472]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	6713      	str	r3, [r2, #112]	; 0x70
 80020c8:	4b74      	ldr	r3, [pc, #464]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	4a73      	ldr	r2, [pc, #460]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80020ce:	f023 0304 	bic.w	r3, r3, #4
 80020d2:	6713      	str	r3, [r2, #112]	; 0x70
 80020d4:	e01c      	b.n	8002110 <HAL_RCC_OscConfig+0x5e0>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x5c8>
 80020de:	4b6f      	ldr	r3, [pc, #444]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a6e      	ldr	r2, [pc, #440]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ea:	4b6c      	ldr	r3, [pc, #432]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a6b      	ldr	r2, [pc, #428]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0x5e0>
 80020f8:	4b68      	ldr	r3, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	4a67      	ldr	r2, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	6713      	str	r3, [r2, #112]	; 0x70
 8002104:	4b65      	ldr	r3, [pc, #404]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a64      	ldr	r2, [pc, #400]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 800210a:	f023 0304 	bic.w	r3, r3, #4
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d015      	beq.n	8002144 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7ff f814 	bl	8001144 <HAL_GetTick>
 800211c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800211e:	e00a      	b.n	8002136 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	f7ff f810 	bl	8001144 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e123      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002136:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0ee      	beq.n	8002120 <HAL_RCC_OscConfig+0x5f0>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7fe fffe 	bl	8001144 <HAL_GetTick>
 8002148:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800214a:	e00a      	b.n	8002162 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214c:	f7fe fffa 	bl	8001144 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e10d      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002162:	4b4e      	ldr	r3, [pc, #312]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1ee      	bne.n	800214c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8102 	beq.w	800237c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002178:	4b48      	ldr	r3, [pc, #288]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002180:	2b18      	cmp	r3, #24
 8002182:	f000 80bd 	beq.w	8002300 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	2b02      	cmp	r3, #2
 800218c:	f040 809e 	bne.w	80022cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002190:	4b42      	ldr	r3, [pc, #264]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a41      	ldr	r2, [pc, #260]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe ffd2 	bl	8001144 <HAL_GetTick>
 80021a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe ffce 	bl	8001144 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e0e3      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021b6:	4b39      	ldr	r3, [pc, #228]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80021c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c6:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <HAL_RCC_OscConfig+0x774>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	430a      	orrs	r2, r1
 80021d6:	4931      	ldr	r1, [pc, #196]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	628b      	str	r3, [r1, #40]	; 0x28
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	3b01      	subs	r3, #1
 80021e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ea:	3b01      	subs	r3, #1
 80021ec:	025b      	lsls	r3, r3, #9
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f6:	3b01      	subs	r3, #1
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	3b01      	subs	r3, #1
 8002206:	061b      	lsls	r3, r3, #24
 8002208:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800220c:	4923      	ldr	r1, [pc, #140]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 800220e:	4313      	orrs	r3, r2
 8002210:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	4a21      	ldr	r2, [pc, #132]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800221e:	4b1f      	ldr	r3, [pc, #124]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <HAL_RCC_OscConfig+0x778>)
 8002224:	4013      	ands	r3, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800222a:	00d2      	lsls	r2, r2, #3
 800222c:	491b      	ldr	r1, [pc, #108]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	f023 020c 	bic.w	r2, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4917      	ldr	r1, [pc, #92]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002240:	4313      	orrs	r3, r2
 8002242:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	f023 0202 	bic.w	r2, r3, #2
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	4912      	ldr	r1, [pc, #72]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002252:	4313      	orrs	r3, r2
 8002254:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	4a0d      	ldr	r2, [pc, #52]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002278:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	4a07      	ldr	r2, [pc, #28]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002286:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a04      	ldr	r2, [pc, #16]	; (800229c <HAL_RCC_OscConfig+0x76c>)
 800228c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7fe ff57 	bl	8001144 <HAL_GetTick>
 8002296:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002298:	e011      	b.n	80022be <HAL_RCC_OscConfig+0x78e>
 800229a:	bf00      	nop
 800229c:	58024400 	.word	0x58024400
 80022a0:	58024800 	.word	0x58024800
 80022a4:	fffffc0c 	.word	0xfffffc0c
 80022a8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ac:	f7fe ff4a 	bl	8001144 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e05f      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022be:	4b32      	ldr	r3, [pc, #200]	; (8002388 <HAL_RCC_OscConfig+0x858>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x77c>
 80022ca:	e057      	b.n	800237c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022cc:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_RCC_OscConfig+0x858>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2d      	ldr	r2, [pc, #180]	; (8002388 <HAL_RCC_OscConfig+0x858>)
 80022d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe ff34 	bl	8001144 <HAL_GetTick>
 80022dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe ff30 	bl	8001144 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e045      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022f2:	4b25      	ldr	r3, [pc, #148]	; (8002388 <HAL_RCC_OscConfig+0x858>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x7b0>
 80022fe:	e03d      	b.n	800237c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002300:	4b21      	ldr	r3, [pc, #132]	; (8002388 <HAL_RCC_OscConfig+0x858>)
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_RCC_OscConfig+0x858>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	2b01      	cmp	r3, #1
 8002312:	d031      	beq.n	8002378 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f003 0203 	and.w	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d12a      	bne.n	8002378 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d122      	bne.n	8002378 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d11a      	bne.n	8002378 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	0a5b      	lsrs	r3, r3, #9
 8002346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d111      	bne.n	8002378 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	0c1b      	lsrs	r3, r3, #16
 8002358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d108      	bne.n	8002378 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	0e1b      	lsrs	r3, r3, #24
 800236a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3730      	adds	r7, #48	; 0x30
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	58024400 	.word	0x58024400

0800238c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e19c      	b.n	80026da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b8a      	ldr	r3, [pc, #552]	; (80025cc <HAL_RCC_ClockConfig+0x240>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d910      	bls.n	80023d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b87      	ldr	r3, [pc, #540]	; (80025cc <HAL_RCC_ClockConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 020f 	bic.w	r2, r3, #15
 80023b6:	4985      	ldr	r1, [pc, #532]	; (80025cc <HAL_RCC_ClockConfig+0x240>)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b83      	ldr	r3, [pc, #524]	; (80025cc <HAL_RCC_ClockConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e184      	b.n	80026da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d010      	beq.n	80023fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	4b7b      	ldr	r3, [pc, #492]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d908      	bls.n	80023fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023ec:	4b78      	ldr	r3, [pc, #480]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	4975      	ldr	r1, [pc, #468]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d010      	beq.n	800242c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	4b70      	ldr	r3, [pc, #448]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002416:	429a      	cmp	r2, r3
 8002418:	d908      	bls.n	800242c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800241a:	4b6d      	ldr	r3, [pc, #436]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	496a      	ldr	r1, [pc, #424]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 8002428:	4313      	orrs	r3, r2
 800242a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	d010      	beq.n	800245a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699a      	ldr	r2, [r3, #24]
 800243c:	4b64      	ldr	r3, [pc, #400]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002444:	429a      	cmp	r2, r3
 8002446:	d908      	bls.n	800245a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002448:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	495e      	ldr	r1, [pc, #376]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 8002456:	4313      	orrs	r3, r2
 8002458:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b00      	cmp	r3, #0
 8002464:	d010      	beq.n	8002488 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	4b59      	ldr	r3, [pc, #356]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002472:	429a      	cmp	r2, r3
 8002474:	d908      	bls.n	8002488 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4953      	ldr	r1, [pc, #332]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 8002484:	4313      	orrs	r3, r2
 8002486:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d010      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	4b4d      	ldr	r3, [pc, #308]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d908      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f023 020f 	bic.w	r2, r3, #15
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4947      	ldr	r1, [pc, #284]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d055      	beq.n	800256e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80024c2:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4940      	ldr	r1, [pc, #256]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d107      	bne.n	80024ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024dc:	4b3c      	ldr	r3, [pc, #240]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d121      	bne.n	800252c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0f6      	b.n	80026da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d115      	bne.n	800252c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0ea      	b.n	80026da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800250c:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0de      	b.n	80026da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800251c:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0d6      	b.n	80026da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f023 0207 	bic.w	r2, r3, #7
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4925      	ldr	r1, [pc, #148]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 800253a:	4313      	orrs	r3, r2
 800253c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253e:	f7fe fe01 	bl	8001144 <HAL_GetTick>
 8002542:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002544:	e00a      	b.n	800255c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002546:	f7fe fdfd 	bl	8001144 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	; 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0be      	b.n	80026da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255c:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	429a      	cmp	r2, r3
 800256c:	d1eb      	bne.n	8002546 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d010      	beq.n	800259c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	429a      	cmp	r2, r3
 8002588:	d208      	bcs.n	800259c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f023 020f 	bic.w	r2, r3, #15
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	490e      	ldr	r1, [pc, #56]	; (80025d0 <HAL_RCC_ClockConfig+0x244>)
 8002598:	4313      	orrs	r3, r2
 800259a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_ClockConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d214      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_RCC_ClockConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 020f 	bic.w	r2, r3, #15
 80025b2:	4906      	ldr	r1, [pc, #24]	; (80025cc <HAL_RCC_ClockConfig+0x240>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_RCC_ClockConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e086      	b.n	80026da <HAL_RCC_ClockConfig+0x34e>
 80025cc:	52002000 	.word	0x52002000
 80025d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d010      	beq.n	8002602 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d208      	bcs.n	8002602 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025f0:	4b3c      	ldr	r3, [pc, #240]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	4939      	ldr	r1, [pc, #228]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d010      	beq.n	8002630 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800261a:	429a      	cmp	r2, r3
 800261c:	d208      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800261e:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	492e      	ldr	r1, [pc, #184]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 800262c:	4313      	orrs	r3, r2
 800262e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	d010      	beq.n	800265e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002648:	429a      	cmp	r2, r3
 800264a:	d208      	bcs.n	800265e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800264c:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4922      	ldr	r1, [pc, #136]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 800265a:	4313      	orrs	r3, r2
 800265c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d010      	beq.n	800268c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002676:	429a      	cmp	r2, r3
 8002678:	d208      	bcs.n	800268c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4917      	ldr	r1, [pc, #92]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 8002688:	4313      	orrs	r3, r2
 800268a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800268c:	f000 f834 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	4912      	ldr	r1, [pc, #72]	; (80026e8 <HAL_RCC_ClockConfig+0x35c>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
 80026a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <HAL_RCC_ClockConfig+0x358>)
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <HAL_RCC_ClockConfig+0x35c>)
 80026b4:	5cd3      	ldrb	r3, [r2, r3]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
 80026c0:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <HAL_RCC_ClockConfig+0x360>)
 80026c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026c4:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x364>)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_RCC_ClockConfig+0x368>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fcee 	bl	80010b0 <HAL_InitTick>
 80026d4:	4603      	mov	r3, r0
 80026d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	58024400 	.word	0x58024400
 80026e8:	080062c0 	.word	0x080062c0
 80026ec:	24000004 	.word	0x24000004
 80026f0:	24000000 	.word	0x24000000
 80026f4:	2400000c 	.word	0x2400000c

080026f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026fe:	4bb3      	ldr	r3, [pc, #716]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002706:	2b18      	cmp	r3, #24
 8002708:	f200 8155 	bhi.w	80029b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800270c:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <HAL_RCC_GetSysClockFreq+0x1c>)
 800270e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002712:	bf00      	nop
 8002714:	08002779 	.word	0x08002779
 8002718:	080029b7 	.word	0x080029b7
 800271c:	080029b7 	.word	0x080029b7
 8002720:	080029b7 	.word	0x080029b7
 8002724:	080029b7 	.word	0x080029b7
 8002728:	080029b7 	.word	0x080029b7
 800272c:	080029b7 	.word	0x080029b7
 8002730:	080029b7 	.word	0x080029b7
 8002734:	0800279f 	.word	0x0800279f
 8002738:	080029b7 	.word	0x080029b7
 800273c:	080029b7 	.word	0x080029b7
 8002740:	080029b7 	.word	0x080029b7
 8002744:	080029b7 	.word	0x080029b7
 8002748:	080029b7 	.word	0x080029b7
 800274c:	080029b7 	.word	0x080029b7
 8002750:	080029b7 	.word	0x080029b7
 8002754:	080027a5 	.word	0x080027a5
 8002758:	080029b7 	.word	0x080029b7
 800275c:	080029b7 	.word	0x080029b7
 8002760:	080029b7 	.word	0x080029b7
 8002764:	080029b7 	.word	0x080029b7
 8002768:	080029b7 	.word	0x080029b7
 800276c:	080029b7 	.word	0x080029b7
 8002770:	080029b7 	.word	0x080029b7
 8002774:	080027ab 	.word	0x080027ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002778:	4b94      	ldr	r3, [pc, #592]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d009      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002784:	4b91      	ldr	r3, [pc, #580]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	08db      	lsrs	r3, r3, #3
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	4a90      	ldr	r2, [pc, #576]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
 8002794:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002796:	e111      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002798:	4b8d      	ldr	r3, [pc, #564]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800279a:	61bb      	str	r3, [r7, #24]
    break;
 800279c:	e10e      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800279e:	4b8d      	ldr	r3, [pc, #564]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027a0:	61bb      	str	r3, [r7, #24]
    break;
 80027a2:	e10b      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80027a4:	4b8c      	ldr	r3, [pc, #560]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80027a6:	61bb      	str	r3, [r7, #24]
    break;
 80027a8:	e108      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027aa:	4b88      	ldr	r3, [pc, #544]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80027b4:	4b85      	ldr	r3, [pc, #532]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80027c0:	4b82      	ldr	r3, [pc, #520]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80027ca:	4b80      	ldr	r3, [pc, #512]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	08db      	lsrs	r3, r3, #3
 80027d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80e1 	beq.w	80029b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	f000 8083 	beq.w	80028fc <HAL_RCC_GetSysClockFreq+0x204>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	f200 80a1 	bhi.w	8002940 <HAL_RCC_GetSysClockFreq+0x248>
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x114>
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d056      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800280a:	e099      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800280c:	4b6f      	ldr	r3, [pc, #444]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d02d      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002818:	4b6c      	ldr	r3, [pc, #432]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	08db      	lsrs	r3, r3, #3
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	4a6b      	ldr	r2, [pc, #428]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
 8002828:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002842:	4b62      	ldr	r3, [pc, #392]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002852:	ed97 6a02 	vldr	s12, [r7, #8]
 8002856:	eddf 5a61 	vldr	s11, [pc, #388]	; 80029dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800285a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800285e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800286a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002872:	e087      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80029e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002886:	4b51      	ldr	r3, [pc, #324]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002896:	ed97 6a02 	vldr	s12, [r7, #8]
 800289a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80029dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800289e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028b6:	e065      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80029e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ca:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028da:	ed97 6a02 	vldr	s12, [r7, #8]
 80028de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80029dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80028e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028fa:	e043      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002906:	eddf 6a38 	vldr	s13, [pc, #224]	; 80029e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800290a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800290e:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800291e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002922:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80029dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800292a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800292e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800293e:	e021      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80029e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800294e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002962:	ed97 6a02 	vldr	s12, [r7, #8]
 8002966:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80029dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800296a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800296e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800297a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002982:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	0a5b      	lsrs	r3, r3, #9
 800298a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800298e:	3301      	adds	r3, #1
 8002990:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800299c:	edd7 6a07 	vldr	s13, [r7, #28]
 80029a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a8:	ee17 3a90 	vmov	r3, s15
 80029ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80029ae:	e005      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]
    break;
 80029b4:	e002      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029b8:	61bb      	str	r3, [r7, #24]
    break;
 80029ba:	bf00      	nop
  }

  return sysclockfreq;
 80029bc:	69bb      	ldr	r3, [r7, #24]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	58024400 	.word	0x58024400
 80029d0:	03d09000 	.word	0x03d09000
 80029d4:	003d0900 	.word	0x003d0900
 80029d8:	007a1200 	.word	0x007a1200
 80029dc:	46000000 	.word	0x46000000
 80029e0:	4c742400 	.word	0x4c742400
 80029e4:	4a742400 	.word	0x4a742400
 80029e8:	4af42400 	.word	0x4af42400

080029ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80029f2:	f7ff fe81 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x50>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	0a1b      	lsrs	r3, r3, #8
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	490f      	ldr	r1, [pc, #60]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a04:	5ccb      	ldrb	r3, [r1, r3]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x50>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	fa22 f303 	lsr.w	r3, r2, r3
 8002a26:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	58024400 	.word	0x58024400
 8002a40:	080062c0 	.word	0x080062c0
 8002a44:	24000004 	.word	0x24000004
 8002a48:	24000000 	.word	0x24000000

08002a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a50:	f7ff ffcc 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	4904      	ldr	r1, [pc, #16]	; (8002a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a62:	5ccb      	ldrb	r3, [r1, r3]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	58024400 	.word	0x58024400
 8002a74:	080062c0 	.word	0x080062c0

08002a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002a7c:	f7ff ffb6 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	080062c0 	.word	0x080062c0

08002aa4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002aac:	2300      	movs	r3, #0
 8002aae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d03f      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ac8:	d02a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002aca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ace:	d824      	bhi.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ad0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ad4:	d018      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ad6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ada:	d81e      	bhi.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae4:	d007      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ae6:	e018      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae8:	4ba3      	ldr	r3, [pc, #652]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	4aa2      	ldr	r2, [pc, #648]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002af4:	e015      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2102      	movs	r1, #2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 f9d5 	bl	8003eac <RCCEx_PLL2_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b06:	e00c      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3324      	adds	r3, #36	; 0x24
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f001 fa7e 	bl	8004010 <RCCEx_PLL3_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b18:	e003      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b1e:	e000      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b28:	4b93      	ldr	r3, [pc, #588]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b34:	4990      	ldr	r1, [pc, #576]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	650b      	str	r3, [r1, #80]	; 0x50
 8002b3a:	e001      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d03d      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d826      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002b54:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002b71 	.word	0x08002b71
 8002b60:	08002b7f 	.word	0x08002b7f
 8002b64:	08002b91 	.word	0x08002b91
 8002b68:	08002ba9 	.word	0x08002ba9
 8002b6c:	08002ba9 	.word	0x08002ba9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b70:	4b81      	ldr	r3, [pc, #516]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4a80      	ldr	r2, [pc, #512]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b7c:	e015      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3304      	adds	r3, #4
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f001 f991 	bl	8003eac <RCCEx_PLL2_Config>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b8e:	e00c      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3324      	adds	r3, #36	; 0x24
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 fa3a 	bl	8004010 <RCCEx_PLL3_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ba0:	e003      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ba6:	e000      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bb0:	4b71      	ldr	r3, [pc, #452]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb4:	f023 0207 	bic.w	r2, r3, #7
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	496e      	ldr	r1, [pc, #440]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	650b      	str	r3, [r1, #80]	; 0x50
 8002bc2:	e001      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d042      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bdc:	d02b      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be2:	d825      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002be4:	2bc0      	cmp	r3, #192	; 0xc0
 8002be6:	d028      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002be8:	2bc0      	cmp	r3, #192	; 0xc0
 8002bea:	d821      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	d016      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d81d      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d007      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002bfc:	e018      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfe:	4b5e      	ldr	r3, [pc, #376]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	4a5d      	ldr	r2, [pc, #372]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c0a:	e017      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 f94a 	bl	8003eac <RCCEx_PLL2_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c1c:	e00e      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3324      	adds	r3, #36	; 0x24
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 f9f3 	bl	8004010 <RCCEx_PLL3_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c2e:	e005      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
      break;
 8002c34:	e002      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c42:	4b4d      	ldr	r3, [pc, #308]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c46:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	494a      	ldr	r1, [pc, #296]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	650b      	str	r3, [r1, #80]	; 0x50
 8002c54:	e001      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d049      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c70:	d030      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002c72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c76:	d82a      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c7c:	d02c      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002c7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c82:	d824      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c88:	d018      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c8e:	d81e      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002c94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c98:	d007      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002c9a:	e018      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c9c:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	4a35      	ldr	r2, [pc, #212]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ca8:	e017      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f001 f8fb 	bl	8003eac <RCCEx_PLL2_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002cba:	e00e      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3324      	adds	r3, #36	; 0x24
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 f9a4 	bl	8004010 <RCCEx_PLL3_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ccc:	e005      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd2:	e002      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002cd4:	bf00      	nop
 8002cd6:	e000      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002cee:	4922      	ldr	r1, [pc, #136]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	658b      	str	r3, [r1, #88]	; 0x58
 8002cf4:	e001      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d04b      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d10:	d030      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002d12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d16:	d82a      	bhi.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d1c:	d02e      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002d1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d22:	d824      	bhi.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d28:	d018      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002d2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d2e:	d81e      	bhi.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d38:	d007      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002d3a:	e018      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d48:	e019      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 f8ab 	bl	8003eac <RCCEx_PLL2_Config>
 8002d56:	4603      	mov	r3, r0
 8002d58:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002d5a:	e010      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3324      	adds	r3, #36	; 0x24
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 f954 	bl	8004010 <RCCEx_PLL3_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d6c:	e007      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
      break;
 8002d72:	e004      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002d74:	bf00      	nop
 8002d76:	e002      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002d78:	58024400 	.word	0x58024400
      break;
 8002d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d84:	4b99      	ldr	r3, [pc, #612]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d92:	4996      	ldr	r1, [pc, #600]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	658b      	str	r3, [r1, #88]	; 0x58
 8002d98:	e001      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d032      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dae:	2b30      	cmp	r3, #48	; 0x30
 8002db0:	d01c      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002db2:	2b30      	cmp	r3, #48	; 0x30
 8002db4:	d817      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d00c      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d813      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d10f      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc6:	4b89      	ldr	r3, [pc, #548]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	4a88      	ldr	r2, [pc, #544]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002dd2:	e00e      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	2102      	movs	r1, #2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f001 f866 	bl	8003eac <RCCEx_PLL2_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002de4:	e005      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	75fb      	strb	r3, [r7, #23]
      break;
 8002dea:	e002      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002dec:	bf00      	nop
 8002dee:	e000      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002df8:	4b7c      	ldr	r3, [pc, #496]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e04:	4979      	ldr	r1, [pc, #484]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e0a:	e001      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d047      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e24:	d030      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e2a:	d82a      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e30:	d02c      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002e32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e36:	d824      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3c:	d018      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e42:	d81e      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4c:	d007      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002e4e:	e018      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e50:	4b66      	ldr	r3, [pc, #408]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	4a65      	ldr	r2, [pc, #404]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e5c:	e017      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 f821 	bl	8003eac <RCCEx_PLL2_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e6e:	e00e      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3324      	adds	r3, #36	; 0x24
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 f8ca 	bl	8004010 <RCCEx_PLL3_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e80:	e005      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	75fb      	strb	r3, [r7, #23]
      break;
 8002e86:	e002      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002e88:	bf00      	nop
 8002e8a:	e000      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e94:	4b55      	ldr	r3, [pc, #340]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e98:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	4952      	ldr	r1, [pc, #328]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	650b      	str	r3, [r1, #80]	; 0x50
 8002ea6:	e001      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d049      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec0:	d02e      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ec2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec6:	d828      	bhi.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ec8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ecc:	d02a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002ece:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ed2:	d822      	bhi.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ed4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ed8:	d026      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002eda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ede:	d81c      	bhi.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ee4:	d010      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eea:	d816      	bhi.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01d      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef4:	d111      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2101      	movs	r1, #1
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 ffd5 	bl	8003eac <RCCEx_PLL2_Config>
 8002f02:	4603      	mov	r3, r0
 8002f04:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f06:	e012      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3324      	adds	r3, #36	; 0x24
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 f87e 	bl	8004010 <RCCEx_PLL3_Config>
 8002f14:	4603      	mov	r3, r0
 8002f16:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f18:	e009      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f1e:	e006      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f20:	bf00      	nop
 8002f22:	e004      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f24:	bf00      	nop
 8002f26:	e002      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f28:	bf00      	nop
 8002f2a:	e000      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f34:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f38:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f40:	492a      	ldr	r1, [pc, #168]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	650b      	str	r3, [r1, #80]	; 0x50
 8002f46:	e001      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d04d      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f62:	d02e      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f68:	d828      	bhi.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6e:	d02a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f74:	d822      	bhi.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002f76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f7a:	d026      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002f7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f80:	d81c      	bhi.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f86:	d010      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f8c:	d816      	bhi.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01d      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f96:	d111      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 ff84 	bl	8003eac <RCCEx_PLL2_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002fa8:	e012      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3324      	adds	r3, #36	; 0x24
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 f82d 	bl	8004010 <RCCEx_PLL3_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002fba:	e009      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc0:	e006      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002fc2:	bf00      	nop
 8002fc4:	e004      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002fc6:	bf00      	nop
 8002fc8:	e002      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e000      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fe4:	4901      	ldr	r1, [pc, #4]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	658b      	str	r3, [r1, #88]	; 0x58
 8002fea:	e003      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d02f      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003008:	d00e      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800300a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800300e:	d814      	bhi.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d015      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003018:	d10f      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800301a:	4baf      	ldr	r3, [pc, #700]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	4aae      	ldr	r2, [pc, #696]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003026:	e00c      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	2101      	movs	r1, #1
 800302e:	4618      	mov	r0, r3
 8003030:	f000 ff3c 	bl	8003eac <RCCEx_PLL2_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003038:	e003      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	75fb      	strb	r3, [r7, #23]
      break;
 800303e:	e000      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003048:	4ba3      	ldr	r3, [pc, #652]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800304a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003054:	49a0      	ldr	r1, [pc, #640]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003056:	4313      	orrs	r3, r2
 8003058:	650b      	str	r3, [r1, #80]	; 0x50
 800305a:	e001      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d032      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	2b03      	cmp	r3, #3
 8003072:	d81b      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	080030b3 	.word	0x080030b3
 8003080:	0800308d 	.word	0x0800308d
 8003084:	0800309b 	.word	0x0800309b
 8003088:	080030b3 	.word	0x080030b3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800308c:	4b92      	ldr	r3, [pc, #584]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	4a91      	ldr	r2, [pc, #580]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003096:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003098:	e00c      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3304      	adds	r3, #4
 800309e:	2102      	movs	r1, #2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 ff03 	bl	8003eac <RCCEx_PLL2_Config>
 80030a6:	4603      	mov	r3, r0
 80030a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80030aa:	e003      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	75fb      	strb	r3, [r7, #23]
      break;
 80030b0:	e000      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80030b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80030ba:	4b87      	ldr	r3, [pc, #540]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	f023 0203 	bic.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	4984      	ldr	r1, [pc, #528]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80030cc:	e001      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8086 	beq.w	80031ec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030e0:	4b7e      	ldr	r3, [pc, #504]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a7d      	ldr	r2, [pc, #500]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80030e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ec:	f7fe f82a 	bl	8001144 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030f2:	e009      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f4:	f7fe f826 	bl	8001144 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d902      	bls.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	75fb      	strb	r3, [r7, #23]
        break;
 8003106:	e005      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003108:	4b74      	ldr	r3, [pc, #464]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ef      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003114:	7dfb      	ldrb	r3, [r7, #23]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d166      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800311a:	4b6f      	ldr	r3, [pc, #444]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800311c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003124:	4053      	eors	r3, r2
 8003126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312a:	2b00      	cmp	r3, #0
 800312c:	d013      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800312e:	4b6a      	ldr	r3, [pc, #424]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003136:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003138:	4b67      	ldr	r3, [pc, #412]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	4a66      	ldr	r2, [pc, #408]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800313e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003142:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003144:	4b64      	ldr	r3, [pc, #400]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	4a63      	ldr	r2, [pc, #396]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800314a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003150:	4a61      	ldr	r2, [pc, #388]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800315c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003160:	d115      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fd ffef 	bl	8001144 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003168:	e00b      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fd ffeb 	bl	8001144 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	; 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d902      	bls.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	75fb      	strb	r3, [r7, #23]
            break;
 8003180:	e005      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003182:	4b55      	ldr	r3, [pc, #340]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0ed      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800318e:	7dfb      	ldrb	r3, [r7, #23]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d126      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800319a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a2:	d10d      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80031a4:	4b4c      	ldr	r3, [pc, #304]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031b2:	0919      	lsrs	r1, r3, #4
 80031b4:	4b4a      	ldr	r3, [pc, #296]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80031b6:	400b      	ands	r3, r1
 80031b8:	4947      	ldr	r1, [pc, #284]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	610b      	str	r3, [r1, #16]
 80031be:	e005      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80031c0:	4b45      	ldr	r3, [pc, #276]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	4a44      	ldr	r2, [pc, #272]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80031ca:	6113      	str	r3, [r2, #16]
 80031cc:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031da:	493f      	ldr	r1, [pc, #252]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	670b      	str	r3, [r1, #112]	; 0x70
 80031e0:	e004      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	75bb      	strb	r3, [r7, #22]
 80031e6:	e001      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8085 	beq.w	8003304 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031fe:	2b28      	cmp	r3, #40	; 0x28
 8003200:	d866      	bhi.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003202:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	080032e5 	.word	0x080032e5
 800320c:	080032d1 	.word	0x080032d1
 8003210:	080032d1 	.word	0x080032d1
 8003214:	080032d1 	.word	0x080032d1
 8003218:	080032d1 	.word	0x080032d1
 800321c:	080032d1 	.word	0x080032d1
 8003220:	080032d1 	.word	0x080032d1
 8003224:	080032d1 	.word	0x080032d1
 8003228:	080032ad 	.word	0x080032ad
 800322c:	080032d1 	.word	0x080032d1
 8003230:	080032d1 	.word	0x080032d1
 8003234:	080032d1 	.word	0x080032d1
 8003238:	080032d1 	.word	0x080032d1
 800323c:	080032d1 	.word	0x080032d1
 8003240:	080032d1 	.word	0x080032d1
 8003244:	080032d1 	.word	0x080032d1
 8003248:	080032bf 	.word	0x080032bf
 800324c:	080032d1 	.word	0x080032d1
 8003250:	080032d1 	.word	0x080032d1
 8003254:	080032d1 	.word	0x080032d1
 8003258:	080032d1 	.word	0x080032d1
 800325c:	080032d1 	.word	0x080032d1
 8003260:	080032d1 	.word	0x080032d1
 8003264:	080032d1 	.word	0x080032d1
 8003268:	080032e5 	.word	0x080032e5
 800326c:	080032d1 	.word	0x080032d1
 8003270:	080032d1 	.word	0x080032d1
 8003274:	080032d1 	.word	0x080032d1
 8003278:	080032d1 	.word	0x080032d1
 800327c:	080032d1 	.word	0x080032d1
 8003280:	080032d1 	.word	0x080032d1
 8003284:	080032d1 	.word	0x080032d1
 8003288:	080032e5 	.word	0x080032e5
 800328c:	080032d1 	.word	0x080032d1
 8003290:	080032d1 	.word	0x080032d1
 8003294:	080032d1 	.word	0x080032d1
 8003298:	080032d1 	.word	0x080032d1
 800329c:	080032d1 	.word	0x080032d1
 80032a0:	080032d1 	.word	0x080032d1
 80032a4:	080032d1 	.word	0x080032d1
 80032a8:	080032e5 	.word	0x080032e5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	2101      	movs	r1, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fdfa 	bl	8003eac <RCCEx_PLL2_Config>
 80032b8:	4603      	mov	r3, r0
 80032ba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80032bc:	e013      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3324      	adds	r3, #36	; 0x24
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fea3 	bl	8004010 <RCCEx_PLL3_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80032ce:	e00a      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	75fb      	strb	r3, [r7, #23]
      break;
 80032d4:	e007      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80032d6:	bf00      	nop
 80032d8:	58024400 	.word	0x58024400
 80032dc:	58024800 	.word	0x58024800
 80032e0:	00ffffcf 	.word	0x00ffffcf
      break;
 80032e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80032ec:	4b96      	ldr	r3, [pc, #600]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032f8:	4993      	ldr	r1, [pc, #588]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	654b      	str	r3, [r1, #84]	; 0x54
 80032fe:	e001      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003300:	7dfb      	ldrb	r3, [r7, #23]
 8003302:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d038      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003314:	2b05      	cmp	r3, #5
 8003316:	d821      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003318:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003363 	.word	0x08003363
 8003324:	08003339 	.word	0x08003339
 8003328:	0800334b 	.word	0x0800334b
 800332c:	08003363 	.word	0x08003363
 8003330:	08003363 	.word	0x08003363
 8003334:	08003363 	.word	0x08003363
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	2101      	movs	r1, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fdb4 	bl	8003eac <RCCEx_PLL2_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003348:	e00c      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3324      	adds	r3, #36	; 0x24
 800334e:	2101      	movs	r1, #1
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fe5d 	bl	8004010 <RCCEx_PLL3_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800335a:	e003      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	75fb      	strb	r3, [r7, #23]
      break;
 8003360:	e000      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800336a:	4b77      	ldr	r3, [pc, #476]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336e:	f023 0207 	bic.w	r2, r3, #7
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003376:	4974      	ldr	r1, [pc, #464]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003378:	4313      	orrs	r3, r2
 800337a:	654b      	str	r3, [r1, #84]	; 0x54
 800337c:	e001      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337e:	7dfb      	ldrb	r3, [r7, #23]
 8003380:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d03a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	2b05      	cmp	r3, #5
 8003396:	d821      	bhi.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003398:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	080033e3 	.word	0x080033e3
 80033a4:	080033b9 	.word	0x080033b9
 80033a8:	080033cb 	.word	0x080033cb
 80033ac:	080033e3 	.word	0x080033e3
 80033b0:	080033e3 	.word	0x080033e3
 80033b4:	080033e3 	.word	0x080033e3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	2101      	movs	r1, #1
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fd74 	bl	8003eac <RCCEx_PLL2_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80033c8:	e00c      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3324      	adds	r3, #36	; 0x24
 80033ce:	2101      	movs	r1, #1
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fe1d 	bl	8004010 <RCCEx_PLL3_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80033da:	e003      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	75fb      	strb	r3, [r7, #23]
      break;
 80033e0:	e000      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80033e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033ea:	4b57      	ldr	r3, [pc, #348]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	f023 0207 	bic.w	r2, r3, #7
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	4953      	ldr	r1, [pc, #332]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	658b      	str	r3, [r1, #88]	; 0x58
 80033fe:	e001      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	2b00      	cmp	r3, #0
 800340e:	d04b      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800341a:	d02e      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003420:	d828      	bhi.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003426:	d02a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342c:	d822      	bhi.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800342e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003432:	d026      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003434:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003438:	d81c      	bhi.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800343a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800343e:	d010      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003444:	d816      	bhi.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01d      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800344a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800344e:	d111      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	2100      	movs	r1, #0
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fd28 	bl	8003eac <RCCEx_PLL2_Config>
 800345c:	4603      	mov	r3, r0
 800345e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003460:	e012      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3324      	adds	r3, #36	; 0x24
 8003466:	2102      	movs	r1, #2
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fdd1 	bl	8004010 <RCCEx_PLL3_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003472:	e009      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	75fb      	strb	r3, [r7, #23]
      break;
 8003478:	e006      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800347a:	bf00      	nop
 800347c:	e004      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800347e:	bf00      	nop
 8003480:	e002      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800348e:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800349c:	492a      	ldr	r1, [pc, #168]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	654b      	str	r3, [r1, #84]	; 0x54
 80034a2:	e001      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d04d      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80034be:	d02e      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80034c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80034c4:	d828      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ca:	d02a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80034cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d0:	d822      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80034d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034d6:	d026      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80034d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034dc:	d81c      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80034de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e2:	d010      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80034e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e8:	d816      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01d      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d111      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fcd6 	bl	8003eac <RCCEx_PLL2_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003504:	e012      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3324      	adds	r3, #36	; 0x24
 800350a:	2102      	movs	r1, #2
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fd7f 	bl	8004010 <RCCEx_PLL3_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003516:	e009      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
      break;
 800351c:	e006      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800351e:	bf00      	nop
 8003520:	e004      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003522:	bf00      	nop
 8003524:	e002      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003526:	bf00      	nop
 8003528:	e000      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800352a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10c      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003536:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003540:	4901      	ldr	r1, [pc, #4]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	658b      	str	r3, [r1, #88]	; 0x58
 8003546:	e003      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003548:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003558:	2b00      	cmp	r3, #0
 800355a:	d04b      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003562:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003566:	d02e      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003568:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800356c:	d828      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800356e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003572:	d02a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003578:	d822      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800357a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800357e:	d026      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003580:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003584:	d81c      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800358a:	d010      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800358c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003590:	d816      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d01d      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359a:	d111      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3304      	adds	r3, #4
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fc82 	bl	8003eac <RCCEx_PLL2_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80035ac:	e012      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3324      	adds	r3, #36	; 0x24
 80035b2:	2102      	movs	r1, #2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fd2b 	bl	8004010 <RCCEx_PLL3_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80035be:	e009      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	75fb      	strb	r3, [r7, #23]
      break;
 80035c4:	e006      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80035c6:	bf00      	nop
 80035c8:	e004      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80035ca:	bf00      	nop
 80035cc:	e002      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80035d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80035da:	4b9d      	ldr	r3, [pc, #628]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035e8:	4999      	ldr	r1, [pc, #612]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	658b      	str	r3, [r1, #88]	; 0x58
 80035ee:	e001      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360a:	d10a      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3324      	adds	r3, #36	; 0x24
 8003610:	2102      	movs	r1, #2
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fcfc 	bl	8004010 <RCCEx_PLL3_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003622:	4b8b      	ldr	r3, [pc, #556]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003630:	4987      	ldr	r1, [pc, #540]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003632:	4313      	orrs	r3, r2
 8003634:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364c:	d10a      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3324      	adds	r3, #36	; 0x24
 8003652:	2102      	movs	r1, #2
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fcdb 	bl	8004010 <RCCEx_PLL3_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003664:	4b7a      	ldr	r3, [pc, #488]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003672:	4977      	ldr	r1, [pc, #476]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003674:	4313      	orrs	r3, r2
 8003676:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d034      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800368a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800368e:	d01d      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003694:	d817      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800369a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369e:	d009      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80036a0:	e011      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fbff 	bl	8003eac <RCCEx_PLL2_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80036b2:	e00c      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3324      	adds	r3, #36	; 0x24
 80036b8:	2102      	movs	r1, #2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fca8 	bl	8004010 <RCCEx_PLL3_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80036c4:	e003      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	75fb      	strb	r3, [r7, #23]
      break;
 80036ca:	e000      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80036cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10a      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036d4:	4b5e      	ldr	r3, [pc, #376]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036e2:	495b      	ldr	r1, [pc, #364]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	658b      	str	r3, [r1, #88]	; 0x58
 80036e8:	e001      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d033      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003700:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003704:	d01c      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003706:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800370a:	d816      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800370c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003710:	d003      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003716:	d007      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003718:	e00f      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371a:	4b4d      	ldr	r3, [pc, #308]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	4a4c      	ldr	r2, [pc, #304]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003726:	e00c      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3324      	adds	r3, #36	; 0x24
 800372c:	2101      	movs	r1, #1
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fc6e 	bl	8004010 <RCCEx_PLL3_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003738:	e003      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
      break;
 800373e:	e000      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003748:	4b41      	ldr	r3, [pc, #260]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003756:	493e      	ldr	r1, [pc, #248]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003758:	4313      	orrs	r3, r2
 800375a:	654b      	str	r3, [r1, #84]	; 0x54
 800375c:	e001      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d029      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377a:	d007      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800377c:	e00f      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800377e:	4b34      	ldr	r3, [pc, #208]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	4a33      	ldr	r2, [pc, #204]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003788:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800378a:	e00b      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	2102      	movs	r1, #2
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fb8a 	bl	8003eac <RCCEx_PLL2_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800379c:	e002      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
      break;
 80037a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037aa:	4b29      	ldr	r3, [pc, #164]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	4926      	ldr	r1, [pc, #152]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037bc:	e001      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037be:	7dfb      	ldrb	r3, [r7, #23]
 80037c0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3324      	adds	r3, #36	; 0x24
 80037d2:	2102      	movs	r1, #2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fc1b 	bl	8004010 <RCCEx_PLL3_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d033      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f8:	d017      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80037fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037fe:	d811      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003804:	d013      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380a:	d80b      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d010      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003814:	d106      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003816:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800381c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003820:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003822:	e007      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	75fb      	strb	r3, [r7, #23]
      break;
 8003828:	e004      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800382a:	bf00      	nop
 800382c:	e002      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10c      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003846:	4902      	ldr	r1, [pc, #8]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003848:	4313      	orrs	r3, r2
 800384a:	654b      	str	r3, [r1, #84]	; 0x54
 800384c:	e004      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800384e:	bf00      	nop
 8003850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003864:	4b31      	ldr	r3, [pc, #196]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003868:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	492e      	ldr	r1, [pc, #184]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003872:	4313      	orrs	r3, r2
 8003874:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003882:	4b2a      	ldr	r3, [pc, #168]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003890:	4926      	ldr	r1, [pc, #152]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003892:	4313      	orrs	r3, r2
 8003894:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038a2:	4b22      	ldr	r3, [pc, #136]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ae:	491f      	ldr	r1, [pc, #124]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038ca:	6113      	str	r3, [r2, #16]
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80038d6:	4915      	ldr	r1, [pc, #84]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	da08      	bge.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038e4:	4b11      	ldr	r3, [pc, #68]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f0:	490e      	ldr	r1, [pc, #56]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	4906      	ldr	r1, [pc, #24]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003912:	4313      	orrs	r3, r2
 8003914:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003916:	7dbb      	ldrb	r3, [r7, #22]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	58024400 	.word	0x58024400

08003930 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003934:	f7ff f85a 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4904      	ldr	r1, [pc, #16]	; (8003958 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	58024400 	.word	0x58024400
 8003958:	080062c0 	.word	0x080062c0

0800395c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	; 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003964:	4ba1      	ldr	r3, [pc, #644]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800396e:	4b9f      	ldr	r3, [pc, #636]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	0b1b      	lsrs	r3, r3, #12
 8003974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003978:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800397a:	4b9c      	ldr	r3, [pc, #624]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003986:	4b99      	ldr	r3, [pc, #612]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398a:	08db      	lsrs	r3, r3, #3
 800398c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8111 	beq.w	8003bcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	f000 8083 	beq.w	8003ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	f200 80a1 	bhi.w	8003afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d056      	beq.n	8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80039c6:	e099      	b.n	8003afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039c8:	4b88      	ldr	r3, [pc, #544]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d02d      	beq.n	8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039d4:	4b85      	ldr	r3, [pc, #532]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	08db      	lsrs	r3, r3, #3
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	4a84      	ldr	r2, [pc, #528]	; (8003bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
 80039e4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	ee07 3a90 	vmov	s15, r3
 80039ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fe:	4b7b      	ldr	r3, [pc, #492]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003a2e:	e087      	b.n	8003b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a42:	4b6a      	ldr	r3, [pc, #424]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a72:	e065      	b.n	8003b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a86:	4b59      	ldr	r3, [pc, #356]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ab6:	e043      	b.n	8003b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aca:	4b48      	ldr	r3, [pc, #288]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ade:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003afa:	e021      	b.n	8003b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b0e:	4b37      	ldr	r3, [pc, #220]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003b40:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	0a5b      	lsrs	r3, r3, #9
 8003b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b66:	ee17 2a90 	vmov	r2, s15
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	0c1b      	lsrs	r3, r3, #16
 8003b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b94:	ee17 2a90 	vmov	r2, s15
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003b9c:	4b13      	ldr	r3, [pc, #76]	; (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	0e1b      	lsrs	r3, r3, #24
 8003ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc2:	ee17 2a90 	vmov	r2, s15
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003bca:	e008      	b.n	8003bde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	609a      	str	r2, [r3, #8]
}
 8003bde:	bf00      	nop
 8003be0:	3724      	adds	r7, #36	; 0x24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	03d09000 	.word	0x03d09000
 8003bf4:	46000000 	.word	0x46000000
 8003bf8:	4c742400 	.word	0x4c742400
 8003bfc:	4a742400 	.word	0x4a742400
 8003c00:	4af42400 	.word	0x4af42400

08003c04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b089      	sub	sp, #36	; 0x24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c0c:	4ba1      	ldr	r3, [pc, #644]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003c16:	4b9f      	ldr	r3, [pc, #636]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	0d1b      	lsrs	r3, r3, #20
 8003c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c22:	4b9c      	ldr	r3, [pc, #624]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003c2e:	4b99      	ldr	r3, [pc, #612]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	08db      	lsrs	r3, r3, #3
 8003c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8111 	beq.w	8003e74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	f000 8083 	beq.w	8003d60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	f200 80a1 	bhi.w	8003da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d056      	beq.n	8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003c6e:	e099      	b.n	8003da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c70:	4b88      	ldr	r3, [pc, #544]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d02d      	beq.n	8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c7c:	4b85      	ldr	r3, [pc, #532]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	08db      	lsrs	r3, r3, #3
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	4a84      	ldr	r2, [pc, #528]	; (8003e98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	ee07 3a90 	vmov	s15, r3
 8003c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca6:	4b7b      	ldr	r3, [pc, #492]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003cd6:	e087      	b.n	8003de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cea:	4b6a      	ldr	r3, [pc, #424]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d1a:	e065      	b.n	8003de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2e:	4b59      	ldr	r3, [pc, #356]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d42:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d5e:	e043      	b.n	8003de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d72:	4b48      	ldr	r3, [pc, #288]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d86:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003da2:	e021      	b.n	8003de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db6:	4b37      	ldr	r3, [pc, #220]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003de6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003de8:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	0a5b      	lsrs	r3, r3, #9
 8003dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e0e:	ee17 2a90 	vmov	r2, s15
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003e16:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e20:	ee07 3a90 	vmov	s15, r3
 8003e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e30:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e3c:	ee17 2a90 	vmov	r2, s15
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003e44:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	0e1b      	lsrs	r3, r3, #24
 8003e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e6a:	ee17 2a90 	vmov	r2, s15
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003e72:	e008      	b.n	8003e86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	609a      	str	r2, [r3, #8]
}
 8003e86:	bf00      	nop
 8003e88:	3724      	adds	r7, #36	; 0x24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	58024400 	.word	0x58024400
 8003e98:	03d09000 	.word	0x03d09000
 8003e9c:	46000000 	.word	0x46000000
 8003ea0:	4c742400 	.word	0x4c742400
 8003ea4:	4a742400 	.word	0x4a742400
 8003ea8:	4af42400 	.word	0x4af42400

08003eac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003eba:	4b53      	ldr	r3, [pc, #332]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d101      	bne.n	8003eca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e099      	b.n	8003ffe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003eca:	4b4f      	ldr	r3, [pc, #316]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a4e      	ldr	r2, [pc, #312]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003ed0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed6:	f7fd f935 	bl	8001144 <HAL_GetTick>
 8003eda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003edc:	e008      	b.n	8003ef0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ede:	f7fd f931 	bl	8001144 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e086      	b.n	8003ffe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ef0:	4b45      	ldr	r3, [pc, #276]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f0      	bne.n	8003ede <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003efc:	4b42      	ldr	r3, [pc, #264]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	031b      	lsls	r3, r3, #12
 8003f0a:	493f      	ldr	r1, [pc, #252]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	628b      	str	r3, [r1, #40]	; 0x28
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	025b      	lsls	r3, r3, #9
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	061b      	lsls	r3, r3, #24
 8003f3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f40:	4931      	ldr	r1, [pc, #196]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f46:	4b30      	ldr	r3, [pc, #192]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	492d      	ldr	r1, [pc, #180]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f58:	4b2b      	ldr	r3, [pc, #172]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	f023 0220 	bic.w	r2, r3, #32
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	4928      	ldr	r1, [pc, #160]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003f6a:	4b27      	ldr	r3, [pc, #156]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	4a26      	ldr	r2, [pc, #152]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f70:	f023 0310 	bic.w	r3, r3, #16
 8003f74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7a:	4b24      	ldr	r3, [pc, #144]	; (800400c <RCCEx_PLL2_Config+0x160>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	69d2      	ldr	r2, [r2, #28]
 8003f82:	00d2      	lsls	r2, r2, #3
 8003f84:	4920      	ldr	r1, [pc, #128]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f8a:	4b1f      	ldr	r3, [pc, #124]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	4a1e      	ldr	r2, [pc, #120]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f90:	f043 0310 	orr.w	r3, r3, #16
 8003f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f9c:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	4a19      	ldr	r2, [pc, #100]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003fa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fa8:	e00f      	b.n	8003fca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d106      	bne.n	8003fbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003fb0:	4b15      	ldr	r3, [pc, #84]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fbc:	e005      	b.n	8003fca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	4a11      	ldr	r2, [pc, #68]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003fca:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd6:	f7fd f8b5 	bl	8001144 <HAL_GetTick>
 8003fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003fdc:	e008      	b.n	8003ff0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003fde:	f7fd f8b1 	bl	8001144 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e006      	b.n	8003ffe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <RCCEx_PLL2_Config+0x15c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	58024400 	.word	0x58024400
 800400c:	ffff0007 	.word	0xffff0007

08004010 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800401e:	4b53      	ldr	r3, [pc, #332]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b03      	cmp	r3, #3
 8004028:	d101      	bne.n	800402e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e099      	b.n	8004162 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800402e:	4b4f      	ldr	r3, [pc, #316]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a4e      	ldr	r2, [pc, #312]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403a:	f7fd f883 	bl	8001144 <HAL_GetTick>
 800403e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004040:	e008      	b.n	8004054 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004042:	f7fd f87f 	bl	8001144 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e086      	b.n	8004162 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004054:	4b45      	ldr	r3, [pc, #276]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f0      	bne.n	8004042 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004060:	4b42      	ldr	r3, [pc, #264]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	051b      	lsls	r3, r3, #20
 800406e:	493f      	ldr	r1, [pc, #252]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004070:	4313      	orrs	r3, r2
 8004072:	628b      	str	r3, [r1, #40]	; 0x28
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	3b01      	subs	r3, #1
 800407a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	3b01      	subs	r3, #1
 8004084:	025b      	lsls	r3, r3, #9
 8004086:	b29b      	uxth	r3, r3
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	3b01      	subs	r3, #1
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	3b01      	subs	r3, #1
 800409e:	061b      	lsls	r3, r3, #24
 80040a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040a4:	4931      	ldr	r1, [pc, #196]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	492d      	ldr	r1, [pc, #180]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80040bc:	4b2b      	ldr	r3, [pc, #172]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	4928      	ldr	r1, [pc, #160]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80040ce:	4b27      	ldr	r3, [pc, #156]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	4a26      	ldr	r2, [pc, #152]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 80040d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 80040dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <RCCEx_PLL3_Config+0x160>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	69d2      	ldr	r2, [r2, #28]
 80040e6:	00d2      	lsls	r2, r2, #3
 80040e8:	4920      	ldr	r1, [pc, #128]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80040ee:	4b1f      	ldr	r3, [pc, #124]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	4a1e      	ldr	r2, [pc, #120]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d106      	bne.n	800410e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	4a19      	ldr	r2, [pc, #100]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004106:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800410a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800410c:	e00f      	b.n	800412e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d106      	bne.n	8004122 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004114:	4b15      	ldr	r3, [pc, #84]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	4a14      	ldr	r2, [pc, #80]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 800411a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800411e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004120:	e005      	b.n	800412e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	4a11      	ldr	r2, [pc, #68]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004128:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800412e:	4b0f      	ldr	r3, [pc, #60]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a0e      	ldr	r2, [pc, #56]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413a:	f7fd f803 	bl	8001144 <HAL_GetTick>
 800413e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004140:	e008      	b.n	8004154 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004142:	f7fc ffff 	bl	8001144 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e006      	b.n	8004162 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <RCCEx_PLL3_Config+0x15c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004160:	7bfb      	ldrb	r3, [r7, #15]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	58024400 	.word	0x58024400
 8004170:	ffff0007 	.word	0xffff0007

08004174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e049      	b.n	800421a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fc fdda 	bl	8000d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f000 faee 	bl	8004794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	d001      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e054      	b.n	80042e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a26      	ldr	r2, [pc, #152]	; (80042f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d022      	beq.n	80042a4 <HAL_TIM_Base_Start_IT+0x80>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004266:	d01d      	beq.n	80042a4 <HAL_TIM_Base_Start_IT+0x80>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a22      	ldr	r2, [pc, #136]	; (80042f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d018      	beq.n	80042a4 <HAL_TIM_Base_Start_IT+0x80>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a21      	ldr	r2, [pc, #132]	; (80042fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <HAL_TIM_Base_Start_IT+0x80>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <HAL_TIM_Base_Start_IT+0xdc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00e      	beq.n	80042a4 <HAL_TIM_Base_Start_IT+0x80>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <HAL_TIM_Base_Start_IT+0xe0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d009      	beq.n	80042a4 <HAL_TIM_Base_Start_IT+0x80>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1c      	ldr	r2, [pc, #112]	; (8004308 <HAL_TIM_Base_Start_IT+0xe4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_TIM_Base_Start_IT+0x80>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1b      	ldr	r2, [pc, #108]	; (800430c <HAL_TIM_Base_Start_IT+0xe8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d115      	bne.n	80042d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	4b19      	ldr	r3, [pc, #100]	; (8004310 <HAL_TIM_Base_Start_IT+0xec>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b06      	cmp	r3, #6
 80042b4:	d015      	beq.n	80042e2 <HAL_TIM_Base_Start_IT+0xbe>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042bc:	d011      	beq.n	80042e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ce:	e008      	b.n	80042e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e000      	b.n	80042e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40000400 	.word	0x40000400
 80042fc:	40000800 	.word	0x40000800
 8004300:	40000c00 	.word	0x40000c00
 8004304:	40010400 	.word	0x40010400
 8004308:	40001800 	.word	0x40001800
 800430c:	40014000 	.word	0x40014000
 8004310:	00010007 	.word	0x00010007

08004314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d122      	bne.n	8004370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b02      	cmp	r3, #2
 8004336:	d11b      	bne.n	8004370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0202 	mvn.w	r2, #2
 8004340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f9fe 	bl	8004758 <HAL_TIM_IC_CaptureCallback>
 800435c:	e005      	b.n	800436a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f9f0 	bl	8004744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fa01 	bl	800476c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d122      	bne.n	80043c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b04      	cmp	r3, #4
 800438a:	d11b      	bne.n	80043c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0204 	mvn.w	r2, #4
 8004394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f9d4 	bl	8004758 <HAL_TIM_IC_CaptureCallback>
 80043b0:	e005      	b.n	80043be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9c6 	bl	8004744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f9d7 	bl	800476c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d122      	bne.n	8004418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d11b      	bne.n	8004418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0208 	mvn.w	r2, #8
 80043e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2204      	movs	r2, #4
 80043ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f9aa 	bl	8004758 <HAL_TIM_IC_CaptureCallback>
 8004404:	e005      	b.n	8004412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f99c 	bl	8004744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f9ad 	bl	800476c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b10      	cmp	r3, #16
 8004424:	d122      	bne.n	800446c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b10      	cmp	r3, #16
 8004432:	d11b      	bne.n	800446c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0210 	mvn.w	r2, #16
 800443c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2208      	movs	r2, #8
 8004442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f980 	bl	8004758 <HAL_TIM_IC_CaptureCallback>
 8004458:	e005      	b.n	8004466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f972 	bl	8004744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f983 	bl	800476c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b01      	cmp	r3, #1
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0201 	mvn.w	r2, #1
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc fc26 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a2:	2b80      	cmp	r3, #128	; 0x80
 80044a4:	d10e      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b80      	cmp	r3, #128	; 0x80
 80044b2:	d107      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fb38 	bl	8004b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d2:	d10e      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044de:	2b80      	cmp	r3, #128	; 0x80
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fb2b 	bl	8004b48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b40      	cmp	r3, #64	; 0x40
 80044fe:	d10e      	bne.n	800451e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d107      	bne.n	800451e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f931 	bl	8004780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b20      	cmp	r3, #32
 800452a:	d10e      	bne.n	800454a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b20      	cmp	r3, #32
 8004538:	d107      	bne.n	800454a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f06f 0220 	mvn.w	r2, #32
 8004542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 faeb 	bl	8004b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_TIM_ConfigClockSource+0x1c>
 800456c:	2302      	movs	r3, #2
 800456e:	e0dc      	b.n	800472a <HAL_TIM_ConfigClockSource+0x1d6>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	4b6a      	ldr	r3, [pc, #424]	; (8004734 <HAL_TIM_ConfigClockSource+0x1e0>)
 800458c:	4013      	ands	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004596:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a64      	ldr	r2, [pc, #400]	; (8004738 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	f000 80a9 	beq.w	80046fe <HAL_TIM_ConfigClockSource+0x1aa>
 80045ac:	4a62      	ldr	r2, [pc, #392]	; (8004738 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	f200 80ae 	bhi.w	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 80045b4:	4a61      	ldr	r2, [pc, #388]	; (800473c <HAL_TIM_ConfigClockSource+0x1e8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	f000 80a1 	beq.w	80046fe <HAL_TIM_ConfigClockSource+0x1aa>
 80045bc:	4a5f      	ldr	r2, [pc, #380]	; (800473c <HAL_TIM_ConfigClockSource+0x1e8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	f200 80a6 	bhi.w	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 80045c4:	4a5e      	ldr	r2, [pc, #376]	; (8004740 <HAL_TIM_ConfigClockSource+0x1ec>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	f000 8099 	beq.w	80046fe <HAL_TIM_ConfigClockSource+0x1aa>
 80045cc:	4a5c      	ldr	r2, [pc, #368]	; (8004740 <HAL_TIM_ConfigClockSource+0x1ec>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	f200 809e 	bhi.w	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 80045d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045d8:	f000 8091 	beq.w	80046fe <HAL_TIM_ConfigClockSource+0x1aa>
 80045dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045e0:	f200 8096 	bhi.w	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 80045e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e8:	f000 8089 	beq.w	80046fe <HAL_TIM_ConfigClockSource+0x1aa>
 80045ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045f0:	f200 808e 	bhi.w	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 80045f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f8:	d03e      	beq.n	8004678 <HAL_TIM_ConfigClockSource+0x124>
 80045fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fe:	f200 8087 	bhi.w	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004606:	f000 8086 	beq.w	8004716 <HAL_TIM_ConfigClockSource+0x1c2>
 800460a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460e:	d87f      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 8004610:	2b70      	cmp	r3, #112	; 0x70
 8004612:	d01a      	beq.n	800464a <HAL_TIM_ConfigClockSource+0xf6>
 8004614:	2b70      	cmp	r3, #112	; 0x70
 8004616:	d87b      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 8004618:	2b60      	cmp	r3, #96	; 0x60
 800461a:	d050      	beq.n	80046be <HAL_TIM_ConfigClockSource+0x16a>
 800461c:	2b60      	cmp	r3, #96	; 0x60
 800461e:	d877      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 8004620:	2b50      	cmp	r3, #80	; 0x50
 8004622:	d03c      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x14a>
 8004624:	2b50      	cmp	r3, #80	; 0x50
 8004626:	d873      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 8004628:	2b40      	cmp	r3, #64	; 0x40
 800462a:	d058      	beq.n	80046de <HAL_TIM_ConfigClockSource+0x18a>
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d86f      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 8004630:	2b30      	cmp	r3, #48	; 0x30
 8004632:	d064      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x1aa>
 8004634:	2b30      	cmp	r3, #48	; 0x30
 8004636:	d86b      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 8004638:	2b20      	cmp	r3, #32
 800463a:	d060      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x1aa>
 800463c:	2b20      	cmp	r3, #32
 800463e:	d867      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d05c      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x1aa>
 8004644:	2b10      	cmp	r3, #16
 8004646:	d05a      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x1aa>
 8004648:	e062      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6899      	ldr	r1, [r3, #8]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f000 f9b3 	bl	80049c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800466c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	609a      	str	r2, [r3, #8]
      break;
 8004676:	e04f      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6899      	ldr	r1, [r3, #8]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f000 f99c 	bl	80049c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800469a:	609a      	str	r2, [r3, #8]
      break;
 800469c:	e03c      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6859      	ldr	r1, [r3, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	461a      	mov	r2, r3
 80046ac:	f000 f90c 	bl	80048c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2150      	movs	r1, #80	; 0x50
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 f966 	bl	8004988 <TIM_ITRx_SetConfig>
      break;
 80046bc:	e02c      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	461a      	mov	r2, r3
 80046cc:	f000 f92b 	bl	8004926 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2160      	movs	r1, #96	; 0x60
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f956 	bl	8004988 <TIM_ITRx_SetConfig>
      break;
 80046dc:	e01c      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f000 f8ec 	bl	80048c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2140      	movs	r1, #64	; 0x40
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f946 	bl	8004988 <TIM_ITRx_SetConfig>
      break;
 80046fc:	e00c      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4619      	mov	r1, r3
 8004708:	4610      	mov	r0, r2
 800470a:	f000 f93d 	bl	8004988 <TIM_ITRx_SetConfig>
      break;
 800470e:	e003      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
      break;
 8004714:	e000      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004728:	7bfb      	ldrb	r3, [r7, #15]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	ffceff88 	.word	0xffceff88
 8004738:	00100040 	.word	0x00100040
 800473c:	00100030 	.word	0x00100030
 8004740:	00100020 	.word	0x00100020

08004744 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a40      	ldr	r2, [pc, #256]	; (80048a8 <TIM_Base_SetConfig+0x114>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b2:	d00f      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a3d      	ldr	r2, [pc, #244]	; (80048ac <TIM_Base_SetConfig+0x118>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00b      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a3c      	ldr	r2, [pc, #240]	; (80048b0 <TIM_Base_SetConfig+0x11c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a3b      	ldr	r2, [pc, #236]	; (80048b4 <TIM_Base_SetConfig+0x120>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a3a      	ldr	r2, [pc, #232]	; (80048b8 <TIM_Base_SetConfig+0x124>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d108      	bne.n	80047e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <TIM_Base_SetConfig+0x114>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01f      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f4:	d01b      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <TIM_Base_SetConfig+0x118>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d017      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2b      	ldr	r2, [pc, #172]	; (80048b0 <TIM_Base_SetConfig+0x11c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2a      	ldr	r2, [pc, #168]	; (80048b4 <TIM_Base_SetConfig+0x120>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00f      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a29      	ldr	r2, [pc, #164]	; (80048b8 <TIM_Base_SetConfig+0x124>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00b      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a28      	ldr	r2, [pc, #160]	; (80048bc <TIM_Base_SetConfig+0x128>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a27      	ldr	r2, [pc, #156]	; (80048c0 <TIM_Base_SetConfig+0x12c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a26      	ldr	r2, [pc, #152]	; (80048c4 <TIM_Base_SetConfig+0x130>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d108      	bne.n	8004840 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a10      	ldr	r2, [pc, #64]	; (80048a8 <TIM_Base_SetConfig+0x114>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00f      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <TIM_Base_SetConfig+0x124>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a11      	ldr	r2, [pc, #68]	; (80048bc <TIM_Base_SetConfig+0x128>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <TIM_Base_SetConfig+0x12c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a0f      	ldr	r2, [pc, #60]	; (80048c4 <TIM_Base_SetConfig+0x130>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d103      	bne.n	8004894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	615a      	str	r2, [r3, #20]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40010000 	.word	0x40010000
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40000c00 	.word	0x40000c00
 80048b8:	40010400 	.word	0x40010400
 80048bc:	40014000 	.word	0x40014000
 80048c0:	40014400 	.word	0x40014400
 80048c4:	40014800 	.word	0x40014800

080048c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f023 0201 	bic.w	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f023 030a 	bic.w	r3, r3, #10
 8004904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004926:	b480      	push	{r7}
 8004928:	b087      	sub	sp, #28
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0210 	bic.w	r2, r3, #16
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	031b      	lsls	r3, r3, #12
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <TIM_ITRx_SetConfig+0x38>)
 800499c:	4013      	ands	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f043 0307 	orr.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	609a      	str	r2, [r3, #8]
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	ffcfff8f 	.word	0xffcfff8f

080049c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	021a      	lsls	r2, r3, #8
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	609a      	str	r2, [r3, #8]
}
 80049f8:	bf00      	nop
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e06d      	b.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a30      	ldr	r2, [pc, #192]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2f      	ldr	r2, [pc, #188]	; (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d108      	bne.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a20      	ldr	r2, [pc, #128]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d022      	beq.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8e:	d01d      	beq.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d018      	beq.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00e      	beq.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d009      	beq.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a16      	ldr	r2, [pc, #88]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a15      	ldr	r2, [pc, #84]	; (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d10c      	bne.n	8004ae6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40010000 	.word	0x40010000
 8004b08:	40010400 	.word	0x40010400
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800
 8004b14:	40000c00 	.word	0x40000c00
 8004b18:	40001800 	.word	0x40001800
 8004b1c:	40014000 	.word	0x40014000

08004b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e042      	b.n	8004bf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fc f90d 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2224      	movs	r2, #36	; 0x24
 8004b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f82c 	bl	8004bfc <UART_SetConfig>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e022      	b.n	8004bf4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fd88 	bl	80056cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fe0f 	bl	8005810 <UART_CheckIdleState>
 8004bf2:	4603      	mov	r3, r0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c00:	b092      	sub	sp, #72	; 0x48
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4bbe      	ldr	r3, [pc, #760]	; (8004f24 <UART_SetConfig+0x328>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4ab3      	ldr	r2, [pc, #716]	; (8004f28 <UART_SetConfig+0x32c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c64:	4313      	orrs	r3, r2
 8004c66:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	4baf      	ldr	r3, [pc, #700]	; (8004f2c <UART_SetConfig+0x330>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	f023 010f 	bic.w	r1, r3, #15
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4aa6      	ldr	r2, [pc, #664]	; (8004f30 <UART_SetConfig+0x334>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d177      	bne.n	8004d8c <UART_SetConfig+0x190>
 8004c9c:	4ba5      	ldr	r3, [pc, #660]	; (8004f34 <UART_SetConfig+0x338>)
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ca4:	2b28      	cmp	r3, #40	; 0x28
 8004ca6:	d86d      	bhi.n	8004d84 <UART_SetConfig+0x188>
 8004ca8:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <UART_SetConfig+0xb4>)
 8004caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cae:	bf00      	nop
 8004cb0:	08004d55 	.word	0x08004d55
 8004cb4:	08004d85 	.word	0x08004d85
 8004cb8:	08004d85 	.word	0x08004d85
 8004cbc:	08004d85 	.word	0x08004d85
 8004cc0:	08004d85 	.word	0x08004d85
 8004cc4:	08004d85 	.word	0x08004d85
 8004cc8:	08004d85 	.word	0x08004d85
 8004ccc:	08004d85 	.word	0x08004d85
 8004cd0:	08004d5d 	.word	0x08004d5d
 8004cd4:	08004d85 	.word	0x08004d85
 8004cd8:	08004d85 	.word	0x08004d85
 8004cdc:	08004d85 	.word	0x08004d85
 8004ce0:	08004d85 	.word	0x08004d85
 8004ce4:	08004d85 	.word	0x08004d85
 8004ce8:	08004d85 	.word	0x08004d85
 8004cec:	08004d85 	.word	0x08004d85
 8004cf0:	08004d65 	.word	0x08004d65
 8004cf4:	08004d85 	.word	0x08004d85
 8004cf8:	08004d85 	.word	0x08004d85
 8004cfc:	08004d85 	.word	0x08004d85
 8004d00:	08004d85 	.word	0x08004d85
 8004d04:	08004d85 	.word	0x08004d85
 8004d08:	08004d85 	.word	0x08004d85
 8004d0c:	08004d85 	.word	0x08004d85
 8004d10:	08004d6d 	.word	0x08004d6d
 8004d14:	08004d85 	.word	0x08004d85
 8004d18:	08004d85 	.word	0x08004d85
 8004d1c:	08004d85 	.word	0x08004d85
 8004d20:	08004d85 	.word	0x08004d85
 8004d24:	08004d85 	.word	0x08004d85
 8004d28:	08004d85 	.word	0x08004d85
 8004d2c:	08004d85 	.word	0x08004d85
 8004d30:	08004d75 	.word	0x08004d75
 8004d34:	08004d85 	.word	0x08004d85
 8004d38:	08004d85 	.word	0x08004d85
 8004d3c:	08004d85 	.word	0x08004d85
 8004d40:	08004d85 	.word	0x08004d85
 8004d44:	08004d85 	.word	0x08004d85
 8004d48:	08004d85 	.word	0x08004d85
 8004d4c:	08004d85 	.word	0x08004d85
 8004d50:	08004d7d 	.word	0x08004d7d
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5a:	e222      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d62:	e21e      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004d64:	2308      	movs	r3, #8
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6a:	e21a      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d72:	e216      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004d74:	2320      	movs	r3, #32
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d7a:	e212      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004d7c:	2340      	movs	r3, #64	; 0x40
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d82:	e20e      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d8a:	e20a      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a69      	ldr	r2, [pc, #420]	; (8004f38 <UART_SetConfig+0x33c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d130      	bne.n	8004df8 <UART_SetConfig+0x1fc>
 8004d96:	4b67      	ldr	r3, [pc, #412]	; (8004f34 <UART_SetConfig+0x338>)
 8004d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	d826      	bhi.n	8004df0 <UART_SetConfig+0x1f4>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <UART_SetConfig+0x1ac>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004dc1 	.word	0x08004dc1
 8004dac:	08004dc9 	.word	0x08004dc9
 8004db0:	08004dd1 	.word	0x08004dd1
 8004db4:	08004dd9 	.word	0x08004dd9
 8004db8:	08004de1 	.word	0x08004de1
 8004dbc:	08004de9 	.word	0x08004de9
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc6:	e1ec      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004dc8:	2304      	movs	r3, #4
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dce:	e1e8      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd6:	e1e4      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dde:	e1e0      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004de0:	2320      	movs	r3, #32
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de6:	e1dc      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004de8:	2340      	movs	r3, #64	; 0x40
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dee:	e1d8      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004df0:	2380      	movs	r3, #128	; 0x80
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004df6:	e1d4      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a4f      	ldr	r2, [pc, #316]	; (8004f3c <UART_SetConfig+0x340>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d130      	bne.n	8004e64 <UART_SetConfig+0x268>
 8004e02:	4b4c      	ldr	r3, [pc, #304]	; (8004f34 <UART_SetConfig+0x338>)
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	2b05      	cmp	r3, #5
 8004e0c:	d826      	bhi.n	8004e5c <UART_SetConfig+0x260>
 8004e0e:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0x218>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004e2d 	.word	0x08004e2d
 8004e18:	08004e35 	.word	0x08004e35
 8004e1c:	08004e3d 	.word	0x08004e3d
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e4d 	.word	0x08004e4d
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e32:	e1b6      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004e34:	2304      	movs	r3, #4
 8004e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3a:	e1b2      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e42:	e1ae      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004e44:	2310      	movs	r3, #16
 8004e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e4a:	e1aa      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e52:	e1a6      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004e54:	2340      	movs	r3, #64	; 0x40
 8004e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e5a:	e1a2      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e62:	e19e      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a35      	ldr	r2, [pc, #212]	; (8004f40 <UART_SetConfig+0x344>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d130      	bne.n	8004ed0 <UART_SetConfig+0x2d4>
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <UART_SetConfig+0x338>)
 8004e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d826      	bhi.n	8004ec8 <UART_SetConfig+0x2cc>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <UART_SetConfig+0x284>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004e99 	.word	0x08004e99
 8004e84:	08004ea1 	.word	0x08004ea1
 8004e88:	08004ea9 	.word	0x08004ea9
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004eb9 	.word	0x08004eb9
 8004e94:	08004ec1 	.word	0x08004ec1
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e9e:	e180      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ea6:	e17c      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eae:	e178      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eb6:	e174      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004eb8:	2320      	movs	r3, #32
 8004eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ebe:	e170      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004ec0:	2340      	movs	r3, #64	; 0x40
 8004ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec6:	e16c      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004ec8:	2380      	movs	r3, #128	; 0x80
 8004eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ece:	e168      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <UART_SetConfig+0x348>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d142      	bne.n	8004f60 <UART_SetConfig+0x364>
 8004eda:	4b16      	ldr	r3, [pc, #88]	; (8004f34 <UART_SetConfig+0x338>)
 8004edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	2b05      	cmp	r3, #5
 8004ee4:	d838      	bhi.n	8004f58 <UART_SetConfig+0x35c>
 8004ee6:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <UART_SetConfig+0x2f0>)
 8004ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eec:	08004f05 	.word	0x08004f05
 8004ef0:	08004f0d 	.word	0x08004f0d
 8004ef4:	08004f15 	.word	0x08004f15
 8004ef8:	08004f1d 	.word	0x08004f1d
 8004efc:	08004f49 	.word	0x08004f49
 8004f00:	08004f51 	.word	0x08004f51
 8004f04:	2300      	movs	r3, #0
 8004f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f0a:	e14a      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f12:	e146      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004f14:	2308      	movs	r3, #8
 8004f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f1a:	e142      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f22:	e13e      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004f24:	cfff69f3 	.word	0xcfff69f3
 8004f28:	58000c00 	.word	0x58000c00
 8004f2c:	11fff4ff 	.word	0x11fff4ff
 8004f30:	40011000 	.word	0x40011000
 8004f34:	58024400 	.word	0x58024400
 8004f38:	40004400 	.word	0x40004400
 8004f3c:	40004800 	.word	0x40004800
 8004f40:	40004c00 	.word	0x40004c00
 8004f44:	40005000 	.word	0x40005000
 8004f48:	2320      	movs	r3, #32
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4e:	e128      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004f50:	2340      	movs	r3, #64	; 0x40
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e124      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5e:	e120      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4acb      	ldr	r2, [pc, #812]	; (8005294 <UART_SetConfig+0x698>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d176      	bne.n	8005058 <UART_SetConfig+0x45c>
 8004f6a:	4bcb      	ldr	r3, [pc, #812]	; (8005298 <UART_SetConfig+0x69c>)
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f72:	2b28      	cmp	r3, #40	; 0x28
 8004f74:	d86c      	bhi.n	8005050 <UART_SetConfig+0x454>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x380>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08005021 	.word	0x08005021
 8004f80:	08005051 	.word	0x08005051
 8004f84:	08005051 	.word	0x08005051
 8004f88:	08005051 	.word	0x08005051
 8004f8c:	08005051 	.word	0x08005051
 8004f90:	08005051 	.word	0x08005051
 8004f94:	08005051 	.word	0x08005051
 8004f98:	08005051 	.word	0x08005051
 8004f9c:	08005029 	.word	0x08005029
 8004fa0:	08005051 	.word	0x08005051
 8004fa4:	08005051 	.word	0x08005051
 8004fa8:	08005051 	.word	0x08005051
 8004fac:	08005051 	.word	0x08005051
 8004fb0:	08005051 	.word	0x08005051
 8004fb4:	08005051 	.word	0x08005051
 8004fb8:	08005051 	.word	0x08005051
 8004fbc:	08005031 	.word	0x08005031
 8004fc0:	08005051 	.word	0x08005051
 8004fc4:	08005051 	.word	0x08005051
 8004fc8:	08005051 	.word	0x08005051
 8004fcc:	08005051 	.word	0x08005051
 8004fd0:	08005051 	.word	0x08005051
 8004fd4:	08005051 	.word	0x08005051
 8004fd8:	08005051 	.word	0x08005051
 8004fdc:	08005039 	.word	0x08005039
 8004fe0:	08005051 	.word	0x08005051
 8004fe4:	08005051 	.word	0x08005051
 8004fe8:	08005051 	.word	0x08005051
 8004fec:	08005051 	.word	0x08005051
 8004ff0:	08005051 	.word	0x08005051
 8004ff4:	08005051 	.word	0x08005051
 8004ff8:	08005051 	.word	0x08005051
 8004ffc:	08005041 	.word	0x08005041
 8005000:	08005051 	.word	0x08005051
 8005004:	08005051 	.word	0x08005051
 8005008:	08005051 	.word	0x08005051
 800500c:	08005051 	.word	0x08005051
 8005010:	08005051 	.word	0x08005051
 8005014:	08005051 	.word	0x08005051
 8005018:	08005051 	.word	0x08005051
 800501c:	08005049 	.word	0x08005049
 8005020:	2301      	movs	r3, #1
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e0bc      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005028:	2304      	movs	r3, #4
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e0b8      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005030:	2308      	movs	r3, #8
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e0b4      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005038:	2310      	movs	r3, #16
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503e:	e0b0      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005040:	2320      	movs	r3, #32
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005046:	e0ac      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005048:	2340      	movs	r3, #64	; 0x40
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504e:	e0a8      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005056:	e0a4      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a8f      	ldr	r2, [pc, #572]	; (800529c <UART_SetConfig+0x6a0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d130      	bne.n	80050c4 <UART_SetConfig+0x4c8>
 8005062:	4b8d      	ldr	r3, [pc, #564]	; (8005298 <UART_SetConfig+0x69c>)
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	2b05      	cmp	r3, #5
 800506c:	d826      	bhi.n	80050bc <UART_SetConfig+0x4c0>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <UART_SetConfig+0x478>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	0800508d 	.word	0x0800508d
 8005078:	08005095 	.word	0x08005095
 800507c:	0800509d 	.word	0x0800509d
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080050ad 	.word	0x080050ad
 8005088:	080050b5 	.word	0x080050b5
 800508c:	2300      	movs	r3, #0
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005092:	e086      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005094:	2304      	movs	r3, #4
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e082      	b.n	80051a2 <UART_SetConfig+0x5a6>
 800509c:	2308      	movs	r3, #8
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a2:	e07e      	b.n	80051a2 <UART_SetConfig+0x5a6>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050aa:	e07a      	b.n	80051a2 <UART_SetConfig+0x5a6>
 80050ac:	2320      	movs	r3, #32
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b2:	e076      	b.n	80051a2 <UART_SetConfig+0x5a6>
 80050b4:	2340      	movs	r3, #64	; 0x40
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ba:	e072      	b.n	80051a2 <UART_SetConfig+0x5a6>
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c2:	e06e      	b.n	80051a2 <UART_SetConfig+0x5a6>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a75      	ldr	r2, [pc, #468]	; (80052a0 <UART_SetConfig+0x6a4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d130      	bne.n	8005130 <UART_SetConfig+0x534>
 80050ce:	4b72      	ldr	r3, [pc, #456]	; (8005298 <UART_SetConfig+0x69c>)
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d826      	bhi.n	8005128 <UART_SetConfig+0x52c>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <UART_SetConfig+0x4e4>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	080050f9 	.word	0x080050f9
 80050e4:	08005101 	.word	0x08005101
 80050e8:	08005109 	.word	0x08005109
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005121 	.word	0x08005121
 80050f8:	2300      	movs	r3, #0
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fe:	e050      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005100:	2304      	movs	r3, #4
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005106:	e04c      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005108:	2308      	movs	r3, #8
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510e:	e048      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005110:	2310      	movs	r3, #16
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005116:	e044      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005118:	2320      	movs	r3, #32
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511e:	e040      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005120:	2340      	movs	r3, #64	; 0x40
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005126:	e03c      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512e:	e038      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a5b      	ldr	r2, [pc, #364]	; (80052a4 <UART_SetConfig+0x6a8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d130      	bne.n	800519c <UART_SetConfig+0x5a0>
 800513a:	4b57      	ldr	r3, [pc, #348]	; (8005298 <UART_SetConfig+0x69c>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	2b05      	cmp	r3, #5
 8005144:	d826      	bhi.n	8005194 <UART_SetConfig+0x598>
 8005146:	a201      	add	r2, pc, #4	; (adr r2, 800514c <UART_SetConfig+0x550>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	08005165 	.word	0x08005165
 8005150:	0800516d 	.word	0x0800516d
 8005154:	08005175 	.word	0x08005175
 8005158:	0800517d 	.word	0x0800517d
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518d 	.word	0x0800518d
 8005164:	2302      	movs	r3, #2
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516a:	e01a      	b.n	80051a2 <UART_SetConfig+0x5a6>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005172:	e016      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517a:	e012      	b.n	80051a2 <UART_SetConfig+0x5a6>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005182:	e00e      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005184:	2320      	movs	r3, #32
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518a:	e00a      	b.n	80051a2 <UART_SetConfig+0x5a6>
 800518c:	2340      	movs	r3, #64	; 0x40
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005192:	e006      	b.n	80051a2 <UART_SetConfig+0x5a6>
 8005194:	2380      	movs	r3, #128	; 0x80
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519a:	e002      	b.n	80051a2 <UART_SetConfig+0x5a6>
 800519c:	2380      	movs	r3, #128	; 0x80
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a3f      	ldr	r2, [pc, #252]	; (80052a4 <UART_SetConfig+0x6a8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	f040 80f8 	bne.w	800539e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	dc46      	bgt.n	8005244 <UART_SetConfig+0x648>
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	f2c0 8082 	blt.w	80052c0 <UART_SetConfig+0x6c4>
 80051bc:	3b02      	subs	r3, #2
 80051be:	2b1e      	cmp	r3, #30
 80051c0:	d87e      	bhi.n	80052c0 <UART_SetConfig+0x6c4>
 80051c2:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <UART_SetConfig+0x5cc>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	0800524b 	.word	0x0800524b
 80051cc:	080052c1 	.word	0x080052c1
 80051d0:	08005253 	.word	0x08005253
 80051d4:	080052c1 	.word	0x080052c1
 80051d8:	080052c1 	.word	0x080052c1
 80051dc:	080052c1 	.word	0x080052c1
 80051e0:	08005263 	.word	0x08005263
 80051e4:	080052c1 	.word	0x080052c1
 80051e8:	080052c1 	.word	0x080052c1
 80051ec:	080052c1 	.word	0x080052c1
 80051f0:	080052c1 	.word	0x080052c1
 80051f4:	080052c1 	.word	0x080052c1
 80051f8:	080052c1 	.word	0x080052c1
 80051fc:	080052c1 	.word	0x080052c1
 8005200:	08005273 	.word	0x08005273
 8005204:	080052c1 	.word	0x080052c1
 8005208:	080052c1 	.word	0x080052c1
 800520c:	080052c1 	.word	0x080052c1
 8005210:	080052c1 	.word	0x080052c1
 8005214:	080052c1 	.word	0x080052c1
 8005218:	080052c1 	.word	0x080052c1
 800521c:	080052c1 	.word	0x080052c1
 8005220:	080052c1 	.word	0x080052c1
 8005224:	080052c1 	.word	0x080052c1
 8005228:	080052c1 	.word	0x080052c1
 800522c:	080052c1 	.word	0x080052c1
 8005230:	080052c1 	.word	0x080052c1
 8005234:	080052c1 	.word	0x080052c1
 8005238:	080052c1 	.word	0x080052c1
 800523c:	080052c1 	.word	0x080052c1
 8005240:	080052b3 	.word	0x080052b3
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d037      	beq.n	80052b8 <UART_SetConfig+0x6bc>
 8005248:	e03a      	b.n	80052c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800524a:	f7fe fb71 	bl	8003930 <HAL_RCCEx_GetD3PCLK1Freq>
 800524e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005250:	e03c      	b.n	80052cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe fb80 	bl	800395c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005260:	e034      	b.n	80052cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005262:	f107 0318 	add.w	r3, r7, #24
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fccc 	bl	8003c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005270:	e02c      	b.n	80052cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005272:	4b09      	ldr	r3, [pc, #36]	; (8005298 <UART_SetConfig+0x69c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d016      	beq.n	80052ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800527e:	4b06      	ldr	r3, [pc, #24]	; (8005298 <UART_SetConfig+0x69c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	08db      	lsrs	r3, r3, #3
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <UART_SetConfig+0x6ac>)
 800528a:	fa22 f303 	lsr.w	r3, r2, r3
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005290:	e01c      	b.n	80052cc <UART_SetConfig+0x6d0>
 8005292:	bf00      	nop
 8005294:	40011400 	.word	0x40011400
 8005298:	58024400 	.word	0x58024400
 800529c:	40007800 	.word	0x40007800
 80052a0:	40007c00 	.word	0x40007c00
 80052a4:	58000c00 	.word	0x58000c00
 80052a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80052ac:	4b9d      	ldr	r3, [pc, #628]	; (8005524 <UART_SetConfig+0x928>)
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052b0:	e00c      	b.n	80052cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80052b2:	4b9d      	ldr	r3, [pc, #628]	; (8005528 <UART_SetConfig+0x92c>)
 80052b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052b6:	e009      	b.n	80052cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052be:	e005      	b.n	80052cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80052ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 81de 	beq.w	8005690 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	4a94      	ldr	r2, [pc, #592]	; (800552c <UART_SetConfig+0x930>)
 80052da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052de:	461a      	mov	r2, r3
 80052e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80052e6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	4413      	add	r3, r2
 80052f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d305      	bcc.n	8005304 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005300:	429a      	cmp	r2, r3
 8005302:	d903      	bls.n	800530c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800530a:	e1c1      	b.n	8005690 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800530c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530e:	2200      	movs	r2, #0
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	60fa      	str	r2, [r7, #12]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	4a84      	ldr	r2, [pc, #528]	; (800552c <UART_SetConfig+0x930>)
 800531a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800531e:	b29b      	uxth	r3, r3
 8005320:	2200      	movs	r2, #0
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800532a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800532e:	f7fa ffd3 	bl	80002d8 <__aeabi_uldivmod>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4610      	mov	r0, r2
 8005338:	4619      	mov	r1, r3
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	020b      	lsls	r3, r1, #8
 8005344:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005348:	0202      	lsls	r2, r0, #8
 800534a:	6979      	ldr	r1, [r7, #20]
 800534c:	6849      	ldr	r1, [r1, #4]
 800534e:	0849      	lsrs	r1, r1, #1
 8005350:	2000      	movs	r0, #0
 8005352:	460c      	mov	r4, r1
 8005354:	4605      	mov	r5, r0
 8005356:	eb12 0804 	adds.w	r8, r2, r4
 800535a:	eb43 0905 	adc.w	r9, r3, r5
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	469a      	mov	sl, r3
 8005366:	4693      	mov	fp, r2
 8005368:	4652      	mov	r2, sl
 800536a:	465b      	mov	r3, fp
 800536c:	4640      	mov	r0, r8
 800536e:	4649      	mov	r1, r9
 8005370:	f7fa ffb2 	bl	80002d8 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4613      	mov	r3, r2
 800537a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005382:	d308      	bcc.n	8005396 <UART_SetConfig+0x79a>
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800538a:	d204      	bcs.n	8005396 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005392:	60da      	str	r2, [r3, #12]
 8005394:	e17c      	b.n	8005690 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800539c:	e178      	b.n	8005690 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a6:	f040 80c5 	bne.w	8005534 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80053aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	dc48      	bgt.n	8005444 <UART_SetConfig+0x848>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	db7b      	blt.n	80054ae <UART_SetConfig+0x8b2>
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d879      	bhi.n	80054ae <UART_SetConfig+0x8b2>
 80053ba:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <UART_SetConfig+0x7c4>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	0800544b 	.word	0x0800544b
 80053c4:	08005453 	.word	0x08005453
 80053c8:	080054af 	.word	0x080054af
 80053cc:	080054af 	.word	0x080054af
 80053d0:	0800545b 	.word	0x0800545b
 80053d4:	080054af 	.word	0x080054af
 80053d8:	080054af 	.word	0x080054af
 80053dc:	080054af 	.word	0x080054af
 80053e0:	0800546b 	.word	0x0800546b
 80053e4:	080054af 	.word	0x080054af
 80053e8:	080054af 	.word	0x080054af
 80053ec:	080054af 	.word	0x080054af
 80053f0:	080054af 	.word	0x080054af
 80053f4:	080054af 	.word	0x080054af
 80053f8:	080054af 	.word	0x080054af
 80053fc:	080054af 	.word	0x080054af
 8005400:	0800547b 	.word	0x0800547b
 8005404:	080054af 	.word	0x080054af
 8005408:	080054af 	.word	0x080054af
 800540c:	080054af 	.word	0x080054af
 8005410:	080054af 	.word	0x080054af
 8005414:	080054af 	.word	0x080054af
 8005418:	080054af 	.word	0x080054af
 800541c:	080054af 	.word	0x080054af
 8005420:	080054af 	.word	0x080054af
 8005424:	080054af 	.word	0x080054af
 8005428:	080054af 	.word	0x080054af
 800542c:	080054af 	.word	0x080054af
 8005430:	080054af 	.word	0x080054af
 8005434:	080054af 	.word	0x080054af
 8005438:	080054af 	.word	0x080054af
 800543c:	080054af 	.word	0x080054af
 8005440:	080054a1 	.word	0x080054a1
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d02e      	beq.n	80054a6 <UART_SetConfig+0x8aa>
 8005448:	e031      	b.n	80054ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800544a:	f7fd faff 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 800544e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005450:	e033      	b.n	80054ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005452:	f7fd fb11 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 8005456:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005458:	e02f      	b.n	80054ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800545a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fa7c 	bl	800395c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005468:	e027      	b.n	80054ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800546a:	f107 0318 	add.w	r3, r7, #24
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe fbc8 	bl	8003c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005478:	e01f      	b.n	80054ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800547a:	4b2d      	ldr	r3, [pc, #180]	; (8005530 <UART_SetConfig+0x934>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005486:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <UART_SetConfig+0x934>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	08db      	lsrs	r3, r3, #3
 800548c:	f003 0303 	and.w	r3, r3, #3
 8005490:	4a24      	ldr	r2, [pc, #144]	; (8005524 <UART_SetConfig+0x928>)
 8005492:	fa22 f303 	lsr.w	r3, r2, r3
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005498:	e00f      	b.n	80054ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800549a:	4b22      	ldr	r3, [pc, #136]	; (8005524 <UART_SetConfig+0x928>)
 800549c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800549e:	e00c      	b.n	80054ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054a0:	4b21      	ldr	r3, [pc, #132]	; (8005528 <UART_SetConfig+0x92c>)
 80054a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054a4:	e009      	b.n	80054ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054ac:	e005      	b.n	80054ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80054b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 80e7 	beq.w	8005690 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	4a19      	ldr	r2, [pc, #100]	; (800552c <UART_SetConfig+0x930>)
 80054c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054cc:	461a      	mov	r2, r3
 80054ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80054d4:	005a      	lsls	r2, r3, #1
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	441a      	add	r2, r3
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	2b0f      	cmp	r3, #15
 80054ec:	d916      	bls.n	800551c <UART_SetConfig+0x920>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f4:	d212      	bcs.n	800551c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f023 030f 	bic.w	r3, r3, #15
 80054fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	b29b      	uxth	r3, r3
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	b29a      	uxth	r2, r3
 800550c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800550e:	4313      	orrs	r3, r2
 8005510:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005518:	60da      	str	r2, [r3, #12]
 800551a:	e0b9      	b.n	8005690 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005522:	e0b5      	b.n	8005690 <UART_SetConfig+0xa94>
 8005524:	03d09000 	.word	0x03d09000
 8005528:	003d0900 	.word	0x003d0900
 800552c:	080062d0 	.word	0x080062d0
 8005530:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005534:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005538:	2b20      	cmp	r3, #32
 800553a:	dc49      	bgt.n	80055d0 <UART_SetConfig+0x9d4>
 800553c:	2b00      	cmp	r3, #0
 800553e:	db7c      	blt.n	800563a <UART_SetConfig+0xa3e>
 8005540:	2b20      	cmp	r3, #32
 8005542:	d87a      	bhi.n	800563a <UART_SetConfig+0xa3e>
 8005544:	a201      	add	r2, pc, #4	; (adr r2, 800554c <UART_SetConfig+0x950>)
 8005546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554a:	bf00      	nop
 800554c:	080055d7 	.word	0x080055d7
 8005550:	080055df 	.word	0x080055df
 8005554:	0800563b 	.word	0x0800563b
 8005558:	0800563b 	.word	0x0800563b
 800555c:	080055e7 	.word	0x080055e7
 8005560:	0800563b 	.word	0x0800563b
 8005564:	0800563b 	.word	0x0800563b
 8005568:	0800563b 	.word	0x0800563b
 800556c:	080055f7 	.word	0x080055f7
 8005570:	0800563b 	.word	0x0800563b
 8005574:	0800563b 	.word	0x0800563b
 8005578:	0800563b 	.word	0x0800563b
 800557c:	0800563b 	.word	0x0800563b
 8005580:	0800563b 	.word	0x0800563b
 8005584:	0800563b 	.word	0x0800563b
 8005588:	0800563b 	.word	0x0800563b
 800558c:	08005607 	.word	0x08005607
 8005590:	0800563b 	.word	0x0800563b
 8005594:	0800563b 	.word	0x0800563b
 8005598:	0800563b 	.word	0x0800563b
 800559c:	0800563b 	.word	0x0800563b
 80055a0:	0800563b 	.word	0x0800563b
 80055a4:	0800563b 	.word	0x0800563b
 80055a8:	0800563b 	.word	0x0800563b
 80055ac:	0800563b 	.word	0x0800563b
 80055b0:	0800563b 	.word	0x0800563b
 80055b4:	0800563b 	.word	0x0800563b
 80055b8:	0800563b 	.word	0x0800563b
 80055bc:	0800563b 	.word	0x0800563b
 80055c0:	0800563b 	.word	0x0800563b
 80055c4:	0800563b 	.word	0x0800563b
 80055c8:	0800563b 	.word	0x0800563b
 80055cc:	0800562d 	.word	0x0800562d
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d02e      	beq.n	8005632 <UART_SetConfig+0xa36>
 80055d4:	e031      	b.n	800563a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d6:	f7fd fa39 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 80055da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055dc:	e033      	b.n	8005646 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055de:	f7fd fa4b 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 80055e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055e4:	e02f      	b.n	8005646 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe f9b6 	bl	800395c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055f4:	e027      	b.n	8005646 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055f6:	f107 0318 	add.w	r3, r7, #24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe fb02 	bl	8003c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005604:	e01f      	b.n	8005646 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005606:	4b2d      	ldr	r3, [pc, #180]	; (80056bc <UART_SetConfig+0xac0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005612:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <UART_SetConfig+0xac0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	08db      	lsrs	r3, r3, #3
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	4a28      	ldr	r2, [pc, #160]	; (80056c0 <UART_SetConfig+0xac4>)
 800561e:	fa22 f303 	lsr.w	r3, r2, r3
 8005622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005624:	e00f      	b.n	8005646 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005626:	4b26      	ldr	r3, [pc, #152]	; (80056c0 <UART_SetConfig+0xac4>)
 8005628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800562a:	e00c      	b.n	8005646 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800562c:	4b25      	ldr	r3, [pc, #148]	; (80056c4 <UART_SetConfig+0xac8>)
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005630:	e009      	b.n	8005646 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005638:	e005      	b.n	8005646 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005644:	bf00      	nop
    }

    if (pclk != 0U)
 8005646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d021      	beq.n	8005690 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	4a1d      	ldr	r2, [pc, #116]	; (80056c8 <UART_SetConfig+0xacc>)
 8005652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005656:	461a      	mov	r2, r3
 8005658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565a:	fbb3 f2f2 	udiv	r2, r3, r2
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	441a      	add	r2, r3
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	fbb2 f3f3 	udiv	r3, r2, r3
 800566e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	2b0f      	cmp	r3, #15
 8005674:	d909      	bls.n	800568a <UART_SetConfig+0xa8e>
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567c:	d205      	bcs.n	800568a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	b29a      	uxth	r2, r3
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60da      	str	r2, [r3, #12]
 8005688:	e002      	b.n	8005690 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2201      	movs	r2, #1
 8005694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2201      	movs	r2, #1
 800569c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2200      	movs	r2, #0
 80056a4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80056ac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3748      	adds	r7, #72	; 0x48
 80056b4:	46bd      	mov	sp, r7
 80056b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ba:	bf00      	nop
 80056bc:	58024400 	.word	0x58024400
 80056c0:	03d09000 	.word	0x03d09000
 80056c4:	003d0900 	.word	0x003d0900
 80056c8:	080062d0 	.word	0x080062d0

080056cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01a      	beq.n	80057e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ca:	d10a      	bne.n	80057e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	605a      	str	r2, [r3, #4]
  }
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af02      	add	r7, sp, #8
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005820:	f7fb fc90 	bl	8001144 <HAL_GetTick>
 8005824:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b08      	cmp	r3, #8
 8005832:	d10e      	bne.n	8005852 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f82f 	bl	80058a6 <UART_WaitOnFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e025      	b.n	800589e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b04      	cmp	r3, #4
 800585e:	d10e      	bne.n	800587e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f819 	bl	80058a6 <UART_WaitOnFlagUntilTimeout>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e00f      	b.n	800589e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2220      	movs	r2, #32
 8005882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b09c      	sub	sp, #112	; 0x70
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	4613      	mov	r3, r2
 80058b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b6:	e0a9      	b.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058be:	f000 80a5 	beq.w	8005a0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c2:	f7fb fc3f 	bl	8001144 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d302      	bcc.n	80058d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80058d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d140      	bne.n	800595a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058ec:	667b      	str	r3, [r7, #100]	; 0x64
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e6      	bne.n	80058d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3308      	adds	r3, #8
 8005910:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	663b      	str	r3, [r7, #96]	; 0x60
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3308      	adds	r3, #8
 8005928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800592a:	64ba      	str	r2, [r7, #72]	; 0x48
 800592c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e5      	bne.n	800590a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e069      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d051      	beq.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005976:	d149      	bne.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005980:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005996:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
 80059a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e6      	bne.n	8005982 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3308      	adds	r3, #8
 80059ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	613b      	str	r3, [r7, #16]
   return(result);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059d4:	623a      	str	r2, [r7, #32]
 80059d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	69f9      	ldr	r1, [r7, #28]
 80059da:	6a3a      	ldr	r2, [r7, #32]
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e5      	bne.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e010      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	4013      	ands	r3, r2
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	bf0c      	ite	eq
 8005a1c:	2301      	moveq	r3, #1
 8005a1e:	2300      	movne	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	461a      	mov	r2, r3
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	f43f af46 	beq.w	80058b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3770      	adds	r7, #112	; 0x70
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_UARTEx_DisableFifoMode+0x16>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e027      	b.n	8005a9c <HAL_UARTEx_DisableFifoMode+0x66>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2224      	movs	r2, #36	; 0x24
 8005a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e02d      	b.n	8005b1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2224      	movs	r2, #36	; 0x24
 8005acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0201 	bic.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f84f 	bl	8005ba0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e02d      	b.n	8005b98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2224      	movs	r2, #36	; 0x24
 8005b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0201 	bic.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f811 	bl	8005ba0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d108      	bne.n	8005bc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bc0:	e031      	b.n	8005c26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bc2:	2310      	movs	r3, #16
 8005bc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bc6:	2310      	movs	r3, #16
 8005bc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	0e5b      	lsrs	r3, r3, #25
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	0f5b      	lsrs	r3, r3, #29
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bea:	7bbb      	ldrb	r3, [r7, #14]
 8005bec:	7b3a      	ldrb	r2, [r7, #12]
 8005bee:	4911      	ldr	r1, [pc, #68]	; (8005c34 <UARTEx_SetNbDataToProcess+0x94>)
 8005bf0:	5c8a      	ldrb	r2, [r1, r2]
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bf6:	7b3a      	ldrb	r2, [r7, #12]
 8005bf8:	490f      	ldr	r1, [pc, #60]	; (8005c38 <UARTEx_SetNbDataToProcess+0x98>)
 8005bfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	7b7a      	ldrb	r2, [r7, #13]
 8005c0c:	4909      	ldr	r1, [pc, #36]	; (8005c34 <UARTEx_SetNbDataToProcess+0x94>)
 8005c0e:	5c8a      	ldrb	r2, [r1, r2]
 8005c10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c14:	7b7a      	ldrb	r2, [r7, #13]
 8005c16:	4908      	ldr	r1, [pc, #32]	; (8005c38 <UARTEx_SetNbDataToProcess+0x98>)
 8005c18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	080062e8 	.word	0x080062e8
 8005c38:	080062f0 	.word	0x080062f0

08005c3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	f107 001c 	add.w	r0, r7, #28
 8005c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d120      	bne.n	8005c96 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	4b2a      	ldr	r3, [pc, #168]	; (8005d10 <USB_CoreInit+0xd4>)
 8005c66:	4013      	ands	r3, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d105      	bne.n	8005c8a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 faac 	bl	80061e8 <USB_CoreReset>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
 8005c94:	e01a      	b.n	8005ccc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 faa0 	bl	80061e8 <USB_CoreReset>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8005cbe:	e005      	b.n	8005ccc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d116      	bne.n	8005d00 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <USB_CoreInit+0xd8>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f043 0206 	orr.w	r2, r3, #6
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d0c:	b004      	add	sp, #16
 8005d0e:	4770      	bx	lr
 8005d10:	ffbdffbf 	.word	0xffbdffbf
 8005d14:	03ee0000 	.word	0x03ee0000

08005d18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f023 0201 	bic.w	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	460b      	mov	r3, r1
 8005d44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d115      	bne.n	8005d88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d68:	2001      	movs	r0, #1
 8005d6a:	f7fb f9f7 	bl	800115c <HAL_Delay>
      ms++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3301      	adds	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fa29 	bl	80061cc <USB_GetMode>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d01e      	beq.n	8005dbe <USB_SetCurrentMode+0x84>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b31      	cmp	r3, #49	; 0x31
 8005d84:	d9f0      	bls.n	8005d68 <USB_SetCurrentMode+0x2e>
 8005d86:	e01a      	b.n	8005dbe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d115      	bne.n	8005dba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	f7fb f9de 	bl	800115c <HAL_Delay>
      ms++;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa10 	bl	80061cc <USB_GetMode>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d005      	beq.n	8005dbe <USB_SetCurrentMode+0x84>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b31      	cmp	r3, #49	; 0x31
 8005db6:	d9f0      	bls.n	8005d9a <USB_SetCurrentMode+0x60>
 8005db8:	e001      	b.n	8005dbe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e005      	b.n	8005dca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b32      	cmp	r3, #50	; 0x32
 8005dc2:	d101      	bne.n	8005dc8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b086      	sub	sp, #24
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dee:	2300      	movs	r3, #0
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	e009      	b.n	8005e08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	3340      	adds	r3, #64	; 0x40
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	2200      	movs	r2, #0
 8005e00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	3301      	adds	r3, #1
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b0e      	cmp	r3, #14
 8005e0c:	d9f2      	bls.n	8005df4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d11c      	bne.n	8005e4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e22:	f043 0302 	orr.w	r3, r3, #2
 8005e26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	e005      	b.n	8005e5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e60:	461a      	mov	r2, r3
 8005e62:	2300      	movs	r3, #0
 8005e64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e74:	461a      	mov	r2, r3
 8005e76:	680b      	ldr	r3, [r1, #0]
 8005e78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d10c      	bne.n	8005e9a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d104      	bne.n	8005e90 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e86:	2100      	movs	r1, #0
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f965 	bl	8006158 <USB_SetDevSpeed>
 8005e8e:	e008      	b.n	8005ea2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e90:	2101      	movs	r1, #1
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f960 	bl	8006158 <USB_SetDevSpeed>
 8005e98:	e003      	b.n	8005ea2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e9a:	2103      	movs	r1, #3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f95b 	bl	8006158 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ea2:	2110      	movs	r1, #16
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f8f3 	bl	8006090 <USB_FlushTxFifo>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f91f 	bl	80060f8 <USB_FlushRxFifo>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eca:	461a      	mov	r2, r3
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	e043      	b.n	8005f76 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f04:	d118      	bne.n	8005f38 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	e013      	b.n	8005f4a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e008      	b.n	8005f4a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	461a      	mov	r2, r3
 8005f46:	2300      	movs	r3, #0
 8005f48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f56:	461a      	mov	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	461a      	mov	r2, r3
 8005f6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	3301      	adds	r3, #1
 8005f74:	613b      	str	r3, [r7, #16]
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d3b7      	bcc.n	8005eee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f7e:	2300      	movs	r3, #0
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	e043      	b.n	800600c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f9a:	d118      	bne.n	8005fce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e013      	b.n	8005fe0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	e008      	b.n	8005fe0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2300      	movs	r3, #0
 8005fde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fec:	461a      	mov	r2, r3
 8005fee:	2300      	movs	r3, #0
 8005ff0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	461a      	mov	r2, r3
 8006000:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006004:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3301      	adds	r3, #1
 800600a:	613b      	str	r3, [r7, #16]
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	429a      	cmp	r2, r3
 8006012:	d3b7      	bcc.n	8005f84 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006026:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006034:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	2b00      	cmp	r3, #0
 800603a:	d105      	bne.n	8006048 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	f043 0210 	orr.w	r2, r3, #16
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699a      	ldr	r2, [r3, #24]
 800604c:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <USB_DevInit+0x2b4>)
 800604e:	4313      	orrs	r3, r2
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f043 0208 	orr.w	r2, r3, #8
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006068:	2b01      	cmp	r3, #1
 800606a:	d105      	bne.n	8006078 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699a      	ldr	r2, [r3, #24]
 8006070:	4b06      	ldr	r3, [pc, #24]	; (800608c <USB_DevInit+0x2b8>)
 8006072:	4313      	orrs	r3, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006084:	b004      	add	sp, #16
 8006086:	4770      	bx	lr
 8006088:	803c3800 	.word	0x803c3800
 800608c:	40000004 	.word	0x40000004

08006090 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3301      	adds	r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4a13      	ldr	r2, [pc, #76]	; (80060f4 <USB_FlushTxFifo+0x64>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d901      	bls.n	80060b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e01b      	b.n	80060e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	daf2      	bge.n	800609e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	019b      	lsls	r3, r3, #6
 80060c0:	f043 0220 	orr.w	r2, r3, #32
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a08      	ldr	r2, [pc, #32]	; (80060f4 <USB_FlushTxFifo+0x64>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e006      	b.n	80060e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d0f0      	beq.n	80060c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	00030d40 	.word	0x00030d40

080060f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3301      	adds	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4a11      	ldr	r2, [pc, #68]	; (8006154 <USB_FlushRxFifo+0x5c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d901      	bls.n	8006116 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e018      	b.n	8006148 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	daf2      	bge.n	8006104 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2210      	movs	r2, #16
 8006126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3301      	adds	r3, #1
 800612c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4a08      	ldr	r2, [pc, #32]	; (8006154 <USB_FlushRxFifo+0x5c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d901      	bls.n	800613a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e006      	b.n	8006148 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0310 	and.w	r3, r3, #16
 8006142:	2b10      	cmp	r3, #16
 8006144:	d0f0      	beq.n	8006128 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	00030d40 	.word	0x00030d40

08006158 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006178:	4313      	orrs	r3, r2
 800617a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800618a:	b480      	push	{r7}
 800618c:	b085      	sub	sp, #20
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061a4:	f023 0303 	bic.w	r3, r3, #3
 80061a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061b8:	f043 0302 	orr.w	r3, r3, #2
 80061bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	f003 0301 	and.w	r3, r3, #1
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3301      	adds	r3, #1
 80061f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4a13      	ldr	r2, [pc, #76]	; (800624c <USB_CoreReset+0x64>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d901      	bls.n	8006206 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e01b      	b.n	800623e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	daf2      	bge.n	80061f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f043 0201 	orr.w	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3301      	adds	r3, #1
 8006222:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4a09      	ldr	r2, [pc, #36]	; (800624c <USB_CoreReset+0x64>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d901      	bls.n	8006230 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e006      	b.n	800623e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b01      	cmp	r3, #1
 800623a:	d0f0      	beq.n	800621e <USB_CoreReset+0x36>

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	00030d40 	.word	0x00030d40

08006250 <__libc_init_array>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	4d0d      	ldr	r5, [pc, #52]	; (8006288 <__libc_init_array+0x38>)
 8006254:	4c0d      	ldr	r4, [pc, #52]	; (800628c <__libc_init_array+0x3c>)
 8006256:	1b64      	subs	r4, r4, r5
 8006258:	10a4      	asrs	r4, r4, #2
 800625a:	2600      	movs	r6, #0
 800625c:	42a6      	cmp	r6, r4
 800625e:	d109      	bne.n	8006274 <__libc_init_array+0x24>
 8006260:	4d0b      	ldr	r5, [pc, #44]	; (8006290 <__libc_init_array+0x40>)
 8006262:	4c0c      	ldr	r4, [pc, #48]	; (8006294 <__libc_init_array+0x44>)
 8006264:	f000 f820 	bl	80062a8 <_init>
 8006268:	1b64      	subs	r4, r4, r5
 800626a:	10a4      	asrs	r4, r4, #2
 800626c:	2600      	movs	r6, #0
 800626e:	42a6      	cmp	r6, r4
 8006270:	d105      	bne.n	800627e <__libc_init_array+0x2e>
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	f855 3b04 	ldr.w	r3, [r5], #4
 8006278:	4798      	blx	r3
 800627a:	3601      	adds	r6, #1
 800627c:	e7ee      	b.n	800625c <__libc_init_array+0xc>
 800627e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006282:	4798      	blx	r3
 8006284:	3601      	adds	r6, #1
 8006286:	e7f2      	b.n	800626e <__libc_init_array+0x1e>
 8006288:	08006300 	.word	0x08006300
 800628c:	08006300 	.word	0x08006300
 8006290:	08006300 	.word	0x08006300
 8006294:	08006304 	.word	0x08006304

08006298 <memset>:
 8006298:	4402      	add	r2, r0
 800629a:	4603      	mov	r3, r0
 800629c:	4293      	cmp	r3, r2
 800629e:	d100      	bne.n	80062a2 <memset+0xa>
 80062a0:	4770      	bx	lr
 80062a2:	f803 1b01 	strb.w	r1, [r3], #1
 80062a6:	e7f9      	b.n	800629c <memset+0x4>

080062a8 <_init>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	bf00      	nop
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr

080062b4 <_fini>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	bf00      	nop
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr
