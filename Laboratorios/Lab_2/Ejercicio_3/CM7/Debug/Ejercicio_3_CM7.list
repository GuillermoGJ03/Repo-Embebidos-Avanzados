
Ejercicio_3_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a168  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800a408  0800a408  0001a408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c4  0800a8c4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c4  0800a8c4  0001a8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8cc  0800a8cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8cc  0800a8cc  0001a8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8d0  0800a8d0  0001a8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800a8d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  240001e0  0800aab4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240008a8  0800aab4  000208a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5c1  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000328c  00000000  00000000  0003e7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00041a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  000431f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bf75  00000000  00000000  00044858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db4f  00000000  00000000  000807cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00188be4  00000000  00000000  0009e31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00226f00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007580  00000000  00000000  00226f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a3f0 	.word	0x0800a3f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800a3f0 	.word	0x0800a3f0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007cc:	bf00      	nop
 80007ce:	4b82      	ldr	r3, [pc, #520]	; (80009d8 <main+0x218>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x24>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dcf4      	bgt.n	80007ce <main+0xe>
  if ( timeout < 0 )
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da01      	bge.n	80007ee <main+0x2e>
  {
  Error_Handler();
 80007ea:	f000 fc9f 	bl	800112c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 ff5b 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_I2C_Init(&hi2c4);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f919 	bl	8000a28 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b78      	ldr	r3, [pc, #480]	; (80009d8 <main+0x218>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a76      	ldr	r2, [pc, #472]	; (80009d8 <main+0x218>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b74      	ldr	r3, [pc, #464]	; (80009d8 <main+0x218>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f001 fae3 	bl	8001de0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f001 faf9 	bl	8001e14 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000828:	bf00      	nop
 800082a:	4b6b      	ldr	r3, [pc, #428]	; (80009d8 <main+0x218>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x80>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6a>
if ( timeout < 0 )
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8a>
{
Error_Handler();
 8000846:	f000 fc71 	bl	800112c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 fa7d 	bl	8000d48 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084e:	f000 f9fd 	bl	8000c4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000852:	f000 fa47 	bl	8000ce4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000856:	f000 f9ab 	bl	8000bb0 <MX_TIM2_Init>
  MX_I2C4_Init();
 800085a:	f000 f969 	bl	8000b30 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  // Revisión de conexión del dispositivo
  status = HAL_I2C_IsDeviceReady(&hi2c4, MPU6050_ADDR, 1, 3000);
 800085e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000862:	2201      	movs	r2, #1
 8000864:	21d0      	movs	r1, #208	; 0xd0
 8000866:	485d      	ldr	r0, [pc, #372]	; (80009dc <main+0x21c>)
 8000868:	f001 fda6 	bl	80023b8 <HAL_I2C_IsDeviceReady>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	4b5b      	ldr	r3, [pc, #364]	; (80009e0 <main+0x220>)
 8000872:	701a      	strb	r2, [r3, #0]
  if (status == HAL_OK) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000874:	4b5a      	ldr	r3, [pc, #360]	; (80009e0 <main+0x220>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d105      	bne.n	8000888 <main+0xc8>
 800087c:	2201      	movs	r2, #1
 800087e:	2101      	movs	r1, #1
 8000880:	4858      	ldr	r0, [pc, #352]	; (80009e4 <main+0x224>)
 8000882:	f001 fa93 	bl	8001dac <HAL_GPIO_WritePin>
 8000886:	e005      	b.n	8000894 <main+0xd4>
  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800088e:	4855      	ldr	r0, [pc, #340]	; (80009e4 <main+0x224>)
 8000890:	f001 fa8c 	bl	8001dac <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000898:	f000 ff98 	bl	80017cc <HAL_Delay>
  // Inicialización del MPU6050
  MPU6050_init();
 800089c:	f000 fad6 	bl	8000e4c <MPU6050_init>

  // Prueba de comunicación UART
  uart_buf_len = sprintf(uart_buf, "MPU6050 test\r\n");
 80008a0:	4951      	ldr	r1, [pc, #324]	; (80009e8 <main+0x228>)
 80008a2:	4852      	ldr	r0, [pc, #328]	; (80009ec <main+0x22c>)
 80008a4:	f007 fbaa 	bl	8007ffc <siprintf>
 80008a8:	4603      	mov	r3, r0
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <main+0x230>)
 80008ae:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80008b0:	4b4f      	ldr	r3, [pc, #316]	; (80009f0 <main+0x230>)
 80008b2:	881a      	ldrh	r2, [r3, #0]
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	494d      	ldr	r1, [pc, #308]	; (80009ec <main+0x22c>)
 80008b8:	484e      	ldr	r0, [pc, #312]	; (80009f4 <main+0x234>)
 80008ba:	f005 fb6b 	bl	8005f94 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_read_acc();
 80008be:	f000 fb3f 	bl	8000f40 <MPU6050_read_acc>
	  MPU6050_read_gyro();
 80008c2:	f000 fbc1 	bl	8001048 <MPU6050_read_gyro>

	  uart_buf_len = sprintf(uart_buf, "AccX = %.2f m/s^2 \r\n", acc_X);
 80008c6:	4b4c      	ldr	r3, [pc, #304]	; (80009f8 <main+0x238>)
 80008c8:	edd3 7a00 	vldr	s15, [r3]
 80008cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008d0:	ec53 2b17 	vmov	r2, r3, d7
 80008d4:	4949      	ldr	r1, [pc, #292]	; (80009fc <main+0x23c>)
 80008d6:	4845      	ldr	r0, [pc, #276]	; (80009ec <main+0x22c>)
 80008d8:	f007 fb90 	bl	8007ffc <siprintf>
 80008dc:	4603      	mov	r3, r0
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4b43      	ldr	r3, [pc, #268]	; (80009f0 <main+0x230>)
 80008e2:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80008e4:	4b42      	ldr	r3, [pc, #264]	; (80009f0 <main+0x230>)
 80008e6:	881a      	ldrh	r2, [r3, #0]
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	4940      	ldr	r1, [pc, #256]	; (80009ec <main+0x22c>)
 80008ec:	4841      	ldr	r0, [pc, #260]	; (80009f4 <main+0x234>)
 80008ee:	f005 fb51 	bl	8005f94 <HAL_UART_Transmit>
	  uart_buf_len = sprintf(uart_buf, "AccY = %.2f m/s^2 \r\n", acc_Y);
 80008f2:	4b43      	ldr	r3, [pc, #268]	; (8000a00 <main+0x240>)
 80008f4:	edd3 7a00 	vldr	s15, [r3]
 80008f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008fc:	ec53 2b17 	vmov	r2, r3, d7
 8000900:	4940      	ldr	r1, [pc, #256]	; (8000a04 <main+0x244>)
 8000902:	483a      	ldr	r0, [pc, #232]	; (80009ec <main+0x22c>)
 8000904:	f007 fb7a 	bl	8007ffc <siprintf>
 8000908:	4603      	mov	r3, r0
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <main+0x230>)
 800090e:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8000910:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <main+0x230>)
 8000912:	881a      	ldrh	r2, [r3, #0]
 8000914:	2364      	movs	r3, #100	; 0x64
 8000916:	4935      	ldr	r1, [pc, #212]	; (80009ec <main+0x22c>)
 8000918:	4836      	ldr	r0, [pc, #216]	; (80009f4 <main+0x234>)
 800091a:	f005 fb3b 	bl	8005f94 <HAL_UART_Transmit>
	  uart_buf_len = sprintf(uart_buf, "AccZ = %.2f m/s^2 \r\n", acc_Z);
 800091e:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <main+0x248>)
 8000920:	edd3 7a00 	vldr	s15, [r3]
 8000924:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000928:	ec53 2b17 	vmov	r2, r3, d7
 800092c:	4937      	ldr	r1, [pc, #220]	; (8000a0c <main+0x24c>)
 800092e:	482f      	ldr	r0, [pc, #188]	; (80009ec <main+0x22c>)
 8000930:	f007 fb64 	bl	8007ffc <siprintf>
 8000934:	4603      	mov	r3, r0
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <main+0x230>)
 800093a:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 800093c:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <main+0x230>)
 800093e:	881a      	ldrh	r2, [r3, #0]
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	492a      	ldr	r1, [pc, #168]	; (80009ec <main+0x22c>)
 8000944:	482b      	ldr	r0, [pc, #172]	; (80009f4 <main+0x234>)
 8000946:	f005 fb25 	bl	8005f94 <HAL_UART_Transmit>


	  uart_buf_len = sprintf(uart_buf, "GyrX = %.2f °/s \r\n", gyr_X);
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <main+0x250>)
 800094c:	edd3 7a00 	vldr	s15, [r3]
 8000950:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000954:	ec53 2b17 	vmov	r2, r3, d7
 8000958:	492e      	ldr	r1, [pc, #184]	; (8000a14 <main+0x254>)
 800095a:	4824      	ldr	r0, [pc, #144]	; (80009ec <main+0x22c>)
 800095c:	f007 fb4e 	bl	8007ffc <siprintf>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <main+0x230>)
 8000966:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <main+0x230>)
 800096a:	881a      	ldrh	r2, [r3, #0]
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	491f      	ldr	r1, [pc, #124]	; (80009ec <main+0x22c>)
 8000970:	4820      	ldr	r0, [pc, #128]	; (80009f4 <main+0x234>)
 8000972:	f005 fb0f 	bl	8005f94 <HAL_UART_Transmit>
	  uart_buf_len = sprintf(uart_buf, "GyrY = %.2f °/s \r\n", gyr_Y);
 8000976:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <main+0x258>)
 8000978:	edd3 7a00 	vldr	s15, [r3]
 800097c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000980:	ec53 2b17 	vmov	r2, r3, d7
 8000984:	4925      	ldr	r1, [pc, #148]	; (8000a1c <main+0x25c>)
 8000986:	4819      	ldr	r0, [pc, #100]	; (80009ec <main+0x22c>)
 8000988:	f007 fb38 	bl	8007ffc <siprintf>
 800098c:	4603      	mov	r3, r0
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <main+0x230>)
 8000992:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <main+0x230>)
 8000996:	881a      	ldrh	r2, [r3, #0]
 8000998:	2364      	movs	r3, #100	; 0x64
 800099a:	4914      	ldr	r1, [pc, #80]	; (80009ec <main+0x22c>)
 800099c:	4815      	ldr	r0, [pc, #84]	; (80009f4 <main+0x234>)
 800099e:	f005 faf9 	bl	8005f94 <HAL_UART_Transmit>
	  uart_buf_len = sprintf(uart_buf, "GyrZ = %.2f °/s \r\n\n", gyr_Z);
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <main+0x260>)
 80009a4:	edd3 7a00 	vldr	s15, [r3]
 80009a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009ac:	ec53 2b17 	vmov	r2, r3, d7
 80009b0:	491c      	ldr	r1, [pc, #112]	; (8000a24 <main+0x264>)
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <main+0x22c>)
 80009b4:	f007 fb22 	bl	8007ffc <siprintf>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <main+0x230>)
 80009be:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <main+0x230>)
 80009c2:	881a      	ldrh	r2, [r3, #0]
 80009c4:	2364      	movs	r3, #100	; 0x64
 80009c6:	4909      	ldr	r1, [pc, #36]	; (80009ec <main+0x22c>)
 80009c8:	480a      	ldr	r0, [pc, #40]	; (80009f4 <main+0x234>)
 80009ca:	f005 fae3 	bl	8005f94 <HAL_UART_Transmit>

	  HAL_Delay(500);
 80009ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d2:	f000 fefb 	bl	80017cc <HAL_Delay>
	  MPU6050_read_acc();
 80009d6:	e772      	b.n	80008be <main+0xfe>
 80009d8:	58024400 	.word	0x58024400
 80009dc:	240001fc 	.word	0x240001fc
 80009e0:	24000858 	.word	0x24000858
 80009e4:	58020400 	.word	0x58020400
 80009e8:	0800a408 	.word	0x0800a408
 80009ec:	2400085c 	.word	0x2400085c
 80009f0:	2400088e 	.word	0x2400088e
 80009f4:	24000294 	.word	0x24000294
 80009f8:	24000840 	.word	0x24000840
 80009fc:	0800a418 	.word	0x0800a418
 8000a00:	24000844 	.word	0x24000844
 8000a04:	0800a430 	.word	0x0800a430
 8000a08:	24000848 	.word	0x24000848
 8000a0c:	0800a448 	.word	0x0800a448
 8000a10:	2400084c 	.word	0x2400084c
 8000a14:	0800a460 	.word	0x0800a460
 8000a18:	24000850 	.word	0x24000850
 8000a1c:	0800a474 	.word	0x0800a474
 8000a20:	24000854 	.word	0x24000854
 8000a24:	0800a488 	.word	0x0800a488

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09c      	sub	sp, #112	; 0x70
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	224c      	movs	r2, #76	; 0x4c
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f006 fe96 	bl	8007768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2220      	movs	r2, #32
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f006 fe90 	bl	8007768 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a48:	2004      	movs	r0, #4
 8000a4a:	f002 fa43 	bl	8002ed4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b34      	ldr	r3, [pc, #208]	; (8000b24 <SystemClock_Config+0xfc>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a33      	ldr	r2, [pc, #204]	; (8000b24 <SystemClock_Config+0xfc>)
 8000a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <SystemClock_Config+0xfc>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <SystemClock_Config+0x100>)
 8000a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6c:	4a2e      	ldr	r2, [pc, #184]	; (8000b28 <SystemClock_Config+0x100>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a74:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <SystemClock_Config+0x100>)
 8000a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a80:	bf00      	nop
 8000a82:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <SystemClock_Config+0xfc>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a8e:	d1f8      	bne.n	8000a82 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <SystemClock_Config+0x104>)
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	f023 0303 	bic.w	r3, r3, #3
 8000a98:	4a24      	ldr	r2, [pc, #144]	; (8000b2c <SystemClock_Config+0x104>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000ab6:	2378      	movs	r3, #120	; 0x78
 8000ab8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 fa66 	bl	8002fa8 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000ae2:	f000 fb23 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	233f      	movs	r3, #63	; 0x3f
 8000ae8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2303      	movs	r3, #3
 8000aec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000af2:	2308      	movs	r3, #8
 8000af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000af6:	2340      	movs	r3, #64	; 0x40
 8000af8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000afa:	2340      	movs	r3, #64	; 0x40
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b02:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b04:	2340      	movs	r3, #64	; 0x40
 8000b06:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fe79 	bl	8003804 <HAL_RCC_ClockConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000b18:	f000 fb08 	bl	800112c <Error_Handler>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3770      	adds	r7, #112	; 0x70
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	58024800 	.word	0x58024800
 8000b28:	58000400 	.word	0x58000400
 8000b2c:	58024400 	.word	0x58024400

08000b30 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_I2C4_Init+0x74>)
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <MX_I2C4_Init+0x78>)
 8000b38:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_I2C4_Init+0x74>)
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <MX_I2C4_Init+0x7c>)
 8000b3e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_I2C4_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_I2C4_Init+0x74>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_I2C4_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_I2C4_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_I2C4_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_I2C4_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_I2C4_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b6a:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <MX_I2C4_Init+0x74>)
 8000b6c:	f001 f966 	bl	8001e3c <HAL_I2C_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b76:	f000 fad9 	bl	800112c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <MX_I2C4_Init+0x74>)
 8000b7e:	f001 ffc9 	bl	8002b14 <HAL_I2CEx_ConfigAnalogFilter>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b88:	f000 fad0 	bl	800112c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_I2C4_Init+0x74>)
 8000b90:	f002 f80b 	bl	8002baa <HAL_I2CEx_ConfigDigitalFilter>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b9a:	f000 fac7 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	240001fc 	.word	0x240001fc
 8000ba8:	58001c00 	.word	0x58001c00
 8000bac:	307075b1 	.word	0x307075b1

08000bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_TIM2_Init+0x98>)
 8000bd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_TIM2_Init+0x98>)
 8000bd8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000bdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_TIM2_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_TIM2_Init+0x98>)
 8000be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_TIM2_Init+0x98>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MX_TIM2_Init+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bf8:	4813      	ldr	r0, [pc, #76]	; (8000c48 <MX_TIM2_Init+0x98>)
 8000bfa:	f004 fcf7 	bl	80055ec <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c04:	f000 fa92 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_TIM2_Init+0x98>)
 8000c16:	f004 fe5f 	bl	80058d8 <HAL_TIM_ConfigClockSource>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c20:	f000 fa84 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_TIM2_Init+0x98>)
 8000c32:	f005 f8b3 	bl	8005d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c3c:	f000 fa76 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	24000248 	.word	0x24000248

08000c4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c52:	4a23      	ldr	r2, [pc, #140]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c94:	4811      	ldr	r0, [pc, #68]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c96:	f005 f92d 	bl	8005ef4 <HAL_UART_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 fa44 	bl	800112c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000ca8:	f006 f960 	bl	8006f6c <HAL_UARTEx_SetTxFifoThreshold>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb2:	f000 fa3b 	bl	800112c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4808      	ldr	r0, [pc, #32]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000cba:	f006 f995 	bl	8006fe8 <HAL_UARTEx_SetRxFifoThreshold>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc4:	f000 fa32 	bl	800112c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000cca:	f006 f916 	bl	8006efa <HAL_UARTEx_DisableFifoMode>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 fa2a 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	24000294 	.word	0x24000294
 8000ce0:	40004800 	.word	0x40004800

08000ce4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cea:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf0:	2209      	movs	r2, #9
 8000cf2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d02:	2202      	movs	r2, #2
 8000d04:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d2c:	f001 ff89 	bl	8002c42 <HAL_PCD_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d36:	f000 f9f9 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	24000324 	.word	0x24000324
 8000d44:	40080000 	.word	0x40080000

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d64:	4a37      	ldr	r2, [pc, #220]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6e:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7c:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d82:	4a30      	ldr	r2, [pc, #192]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	4a28      	ldr	r2, [pc, #160]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	f003 0320 	and.w	r3, r3, #32
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	f003 0308 	and.w	r3, r3, #8
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <MX_GPIO_Init+0x100>)
 8000e1a:	f000 ffc7 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e1e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_GPIO_Init+0x100>)
 8000e38:	f000 fe08 	bl	8001a4c <HAL_GPIO_Init>

}
 8000e3c:	bf00      	nop
 8000e3e:	3730      	adds	r7, #48	; 0x30
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	58024400 	.word	0x58024400
 8000e48:	58020400 	.word	0x58020400

08000e4c <MPU6050_init>:

/* USER CODE BEGIN 4 */
void MPU6050_init(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 3000);
 8000e52:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <MPU6050_init+0xd4>)
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2301      	movs	r3, #1
 8000e62:	2275      	movs	r2, #117	; 0x75
 8000e64:	21d0      	movs	r1, #208	; 0xd0
 8000e66:	482f      	ldr	r0, [pc, #188]	; (8000f24 <MPU6050_init+0xd8>)
 8000e68:	f001 f98c 	bl	8002184 <HAL_I2C_Mem_Read>
	uart_buf_len = sprintf(uart_buf, "Dirección: %u \r\n", check);
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <MPU6050_init+0xd4>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	492d      	ldr	r1, [pc, #180]	; (8000f28 <MPU6050_init+0xdc>)
 8000e74:	482d      	ldr	r0, [pc, #180]	; (8000f2c <MPU6050_init+0xe0>)
 8000e76:	f007 f8c1 	bl	8007ffc <siprintf>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <MPU6050_init+0xe4>)
 8000e80:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, &uart_buf, uart_buf_len, 100);
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <MPU6050_init+0xe4>)
 8000e84:	881a      	ldrh	r2, [r3, #0]
 8000e86:	2364      	movs	r3, #100	; 0x64
 8000e88:	4928      	ldr	r1, [pc, #160]	; (8000f2c <MPU6050_init+0xe0>)
 8000e8a:	482a      	ldr	r0, [pc, #168]	; (8000f34 <MPU6050_init+0xe8>)
 8000e8c:	f005 f882 	bl	8005f94 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e94:	f000 fc9a 	bl	80017cc <HAL_Delay>

	data = 0x00;
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <MPU6050_init+0xec>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 3000);
 8000e9e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <MPU6050_init+0xec>)
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	226b      	movs	r2, #107	; 0x6b
 8000eb0:	21d0      	movs	r1, #208	; 0xd0
 8000eb2:	481c      	ldr	r0, [pc, #112]	; (8000f24 <MPU6050_init+0xd8>)
 8000eb4:	f001 f852 	bl	8001f5c <HAL_I2C_Mem_Write>
	data = 0b10000111;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MPU6050_init+0xec>)
 8000eba:	2287      	movs	r2, #135	; 0x87
 8000ebc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, SMPLRT_DIV, 1, &data, 1, 3000);
 8000ebe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MPU6050_init+0xec>)
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	2219      	movs	r2, #25
 8000ed0:	21d0      	movs	r1, #208	; 0xd0
 8000ed2:	4814      	ldr	r0, [pc, #80]	; (8000f24 <MPU6050_init+0xd8>)
 8000ed4:	f001 f842 	bl	8001f5c <HAL_I2C_Mem_Write>
	data = 0x00;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MPU6050_init+0xec>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, GYRO_CONFIG, 1, &data, 1, 3000);
 8000ede:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ee2:	9302      	str	r3, [sp, #8]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MPU6050_init+0xec>)
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2301      	movs	r3, #1
 8000eee:	221b      	movs	r2, #27
 8000ef0:	21d0      	movs	r1, #208	; 0xd0
 8000ef2:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MPU6050_init+0xd8>)
 8000ef4:	f001 f832 	bl	8001f5c <HAL_I2C_Mem_Write>
	data = 0x00;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MPU6050_init+0xec>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c4, MPU6050_ADDR, ACCEL_CONFIG, 1, &data, 1, 3000);
 8000efe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f02:	9302      	str	r3, [sp, #8]
 8000f04:	2301      	movs	r3, #1
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MPU6050_init+0xec>)
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	221c      	movs	r2, #28
 8000f10:	21d0      	movs	r1, #208	; 0xd0
 8000f12:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MPU6050_init+0xd8>)
 8000f14:	f001 f822 	bl	8001f5c <HAL_I2C_Mem_Write>

}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	24000830 	.word	0x24000830
 8000f24:	240001fc 	.word	0x240001fc
 8000f28:	0800a4a0 	.word	0x0800a4a0
 8000f2c:	2400085c 	.word	0x2400085c
 8000f30:	2400088e 	.word	0x2400088e
 8000f34:	24000294 	.word	0x24000294
 8000f38:	24000831 	.word	0x24000831
 8000f3c:	00000000 	.word	0x00000000

08000f40 <MPU6050_read_acc>:

void MPU6050_read_acc(void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af04      	add	r7, sp, #16
	uint8_t read_acc[6];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, ACCEL_XOUT_H, 1, read_acc, 6, 3000);
 8000f46:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	463b      	mov	r3, r7
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2301      	movs	r3, #1
 8000f56:	223b      	movs	r2, #59	; 0x3b
 8000f58:	21d0      	movs	r1, #208	; 0xd0
 8000f5a:	4833      	ldr	r0, [pc, #204]	; (8001028 <MPU6050_read_acc+0xe8>)
 8000f5c:	f001 f912 	bl	8002184 <HAL_I2C_Mem_Read>

	acc_X_read = (int16_t)(read_acc[0] << 8 | read_acc[1]);
 8000f60:	783b      	ldrb	r3, [r7, #0]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	787b      	ldrb	r3, [r7, #1]
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <MPU6050_read_acc+0xec>)
 8000f70:	801a      	strh	r2, [r3, #0]
	acc_Y_read = (int16_t)(read_acc[2] << 8 | read_acc[3]);
 8000f72:	78bb      	ldrb	r3, [r7, #2]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <MPU6050_read_acc+0xf0>)
 8000f82:	801a      	strh	r2, [r3, #0]
	acc_Z_read = (int16_t)(read_acc[4] << 8 | read_acc[5]);
 8000f84:	793b      	ldrb	r3, [r7, #4]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	797b      	ldrb	r3, [r7, #5]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <MPU6050_read_acc+0xf4>)
 8000f94:	801a      	strh	r2, [r3, #0]

	acc_X = (acc_X_read/16384.0) * 9.81;
 8000f96:	4b25      	ldr	r3, [pc, #148]	; (800102c <MPU6050_read_acc+0xec>)
 8000f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fa4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8001018 <MPU6050_read_acc+0xd8>
 8000fa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fac:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001020 <MPU6050_read_acc+0xe0>
 8000fb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MPU6050_read_acc+0xf8>)
 8000fba:	edc3 7a00 	vstr	s15, [r3]
	acc_Y = (acc_Y_read/16384.0) * 9.81;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MPU6050_read_acc+0xf0>)
 8000fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fcc:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001018 <MPU6050_read_acc+0xd8>
 8000fd0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fd4:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001020 <MPU6050_read_acc+0xe0>
 8000fd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MPU6050_read_acc+0xfc>)
 8000fe2:	edc3 7a00 	vstr	s15, [r3]
	acc_Z = (acc_Z_read/16384.0) * 9.81;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MPU6050_read_acc+0xf4>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ff4:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8001018 <MPU6050_read_acc+0xd8>
 8000ff8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ffc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001020 <MPU6050_read_acc+0xe0>
 8001000:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001004:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <MPU6050_read_acc+0x100>)
 800100a:	edc3 7a00 	vstr	s15, [r3]

}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	00000000 	.word	0x00000000
 800101c:	40d00000 	.word	0x40d00000
 8001020:	51eb851f 	.word	0x51eb851f
 8001024:	40239eb8 	.word	0x40239eb8
 8001028:	240001fc 	.word	0x240001fc
 800102c:	24000832 	.word	0x24000832
 8001030:	24000834 	.word	0x24000834
 8001034:	24000836 	.word	0x24000836
 8001038:	24000840 	.word	0x24000840
 800103c:	24000844 	.word	0x24000844
 8001040:	24000848 	.word	0x24000848
 8001044:	00000000 	.word	0x00000000

08001048 <MPU6050_read_gyro>:

void MPU6050_read_gyro(void){
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af04      	add	r7, sp, #16
	uint8_t read_gyro[6];

	HAL_I2C_Mem_Read(&hi2c4, MPU6050_ADDR, GYRO_XOUT_H, 1, read_gyro, 6, 3000);
 800104e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2306      	movs	r3, #6
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	463b      	mov	r3, r7
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	2243      	movs	r2, #67	; 0x43
 8001060:	21d0      	movs	r1, #208	; 0xd0
 8001062:	482b      	ldr	r0, [pc, #172]	; (8001110 <MPU6050_read_gyro+0xc8>)
 8001064:	f001 f88e 	bl	8002184 <HAL_I2C_Mem_Read>

	gyr_X_read = (int16_t)(read_gyro[0] << 8 | read_gyro[1]);
 8001068:	783b      	ldrb	r3, [r7, #0]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	787b      	ldrb	r3, [r7, #1]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <MPU6050_read_gyro+0xcc>)
 8001078:	801a      	strh	r2, [r3, #0]
	gyr_Y_read = (int16_t)(read_gyro[2] << 8 | read_gyro[3]);
 800107a:	78bb      	ldrb	r3, [r7, #2]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <MPU6050_read_gyro+0xd0>)
 800108a:	801a      	strh	r2, [r3, #0]
	gyr_Z_read = (int16_t)(read_gyro[4] << 8 | read_gyro[5]);
 800108c:	793b      	ldrb	r3, [r7, #4]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b21a      	sxth	r2, r3
 8001092:	797b      	ldrb	r3, [r7, #5]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21a      	sxth	r2, r3
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <MPU6050_read_gyro+0xd4>)
 800109c:	801a      	strh	r2, [r3, #0]

	gyr_X = gyr_X_read/131.0;
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MPU6050_read_gyro+0xcc>)
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010ac:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8001108 <MPU6050_read_gyro+0xc0>
 80010b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MPU6050_read_gyro+0xd8>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]
	gyr_Y = gyr_Y_read/131.0;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MPU6050_read_gyro+0xd0>)
 80010c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010cc:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8001108 <MPU6050_read_gyro+0xc0>
 80010d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MPU6050_read_gyro+0xdc>)
 80010da:	edc3 7a00 	vstr	s15, [r3]
	gyr_Z = gyr_Z_read/131.0;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MPU6050_read_gyro+0xd4>)
 80010e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010ec:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8001108 <MPU6050_read_gyro+0xc0>
 80010f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MPU6050_read_gyro+0xe0>)
 80010fa:	edc3 7a00 	vstr	s15, [r3]
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	00000000 	.word	0x00000000
 800110c:	40606000 	.word	0x40606000
 8001110:	240001fc 	.word	0x240001fc
 8001114:	24000838 	.word	0x24000838
 8001118:	2400083a 	.word	0x2400083a
 800111c:	2400083c 	.word	0x2400083c
 8001120:	2400084c 	.word	0x2400084c
 8001124:	24000850 	.word	0x24000850
 8001128:	24000854 	.word	0x24000854

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	e7fe      	b.n	8001134 <Error_Handler+0x8>
	...

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_MspInit+0x30>)
 8001140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001144:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_MspInit+0x30>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_MspInit+0x30>)
 8001150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	58024400 	.word	0x58024400

0800116c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0b8      	sub	sp, #224	; 0xe0
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	22bc      	movs	r2, #188	; 0xbc
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f006 faeb 	bl	8007768 <memset>
  if(hi2c->Instance==I2C4)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a25      	ldr	r2, [pc, #148]	; (800122c <HAL_I2C_MspInit+0xc0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d142      	bne.n	8001222 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800119c:	2310      	movs	r3, #16
 800119e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 feb6 	bl	8003f1c <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011b6:	f7ff ffb9 	bl	800112c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <HAL_I2C_MspInit+0xc4>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <HAL_I2C_MspInit+0xc4>)
 80011c2:	f043 0320 	orr.w	r3, r3, #32
 80011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_I2C_MspInit+0xc4>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	f003 0320 	and.w	r3, r3, #32
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011d8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e0:	2312      	movs	r3, #18
 80011e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011f2:	2304      	movs	r3, #4
 80011f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011fc:	4619      	mov	r1, r3
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <HAL_I2C_MspInit+0xc8>)
 8001200:	f000 fc24 	bl	8001a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_I2C_MspInit+0xc4>)
 8001206:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_I2C_MspInit+0xc4>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_I2C_MspInit+0xc4>)
 8001216:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001222:	bf00      	nop
 8001224:	37e0      	adds	r7, #224	; 0xe0
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	58001c00 	.word	0x58001c00
 8001230:	58024400 	.word	0x58024400
 8001234:	58021400 	.word	0x58021400

08001238 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001248:	d116      	bne.n	8001278 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_TIM_Base_MspInit+0x48>)
 800124c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <HAL_TIM_Base_MspInit+0x48>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_TIM_Base_MspInit+0x48>)
 800125c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	201c      	movs	r0, #28
 800126e:	f000 fbb8 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001272:	201c      	movs	r0, #28
 8001274:	f000 fbcf 	bl	8001a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	58024400 	.word	0x58024400

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0b8      	sub	sp, #224	; 0xe0
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	22bc      	movs	r2, #188	; 0xbc
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f006 fa5f 	bl	8007768 <memset>
  if(huart->Instance==USART3)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a25      	ldr	r2, [pc, #148]	; (8001344 <HAL_UART_MspInit+0xc0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d142      	bne.n	800133a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012b4:	2302      	movs	r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fe2a 	bl	8003f1c <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012ce:	f7ff ff2d 	bl	800112c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d8:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	4a14      	ldr	r2, [pc, #80]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_UART_MspInit+0xc4>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800130e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001312:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001328:	2307      	movs	r3, #7
 800132a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_UART_MspInit+0xc8>)
 8001336:	f000 fb89 	bl	8001a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	37e0      	adds	r7, #224	; 0xe0
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40004800 	.word	0x40004800
 8001348:	58024400 	.word	0x58024400
 800134c:	58020c00 	.word	0x58020c00

08001350 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0b8      	sub	sp, #224	; 0xe0
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	22bc      	movs	r2, #188	; 0xbc
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f006 f9f9 	bl	8007768 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a36      	ldr	r2, [pc, #216]	; (8001454 <HAL_PCD_MspInit+0x104>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d165      	bne.n	800144c <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001380:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001384:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001386:	2301      	movs	r3, #1
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 800138a:	2318      	movs	r3, #24
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800138e:	2302      	movs	r3, #2
 8001390:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001392:	2304      	movs	r3, #4
 8001394:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001396:	2302      	movs	r3, #2
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800139a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800139e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80013a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 fdb3 	bl	8003f1c <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80013bc:	f7ff feb6 	bl	800112c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013c0:	f001 fde2 	bl	8002f88 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_PCD_MspInit+0x108>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <HAL_PCD_MspInit+0x108>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_PCD_MspInit+0x108>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013e2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80013e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013fc:	230a      	movs	r3, #10
 80013fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001406:	4619      	mov	r1, r3
 8001408:	4814      	ldr	r0, [pc, #80]	; (800145c <HAL_PCD_MspInit+0x10c>)
 800140a:	f000 fb1f 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800140e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001412:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001426:	4619      	mov	r1, r3
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <HAL_PCD_MspInit+0x10c>)
 800142a:	f000 fb0f 	bl	8001a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_PCD_MspInit+0x108>)
 8001430:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001434:	4a08      	ldr	r2, [pc, #32]	; (8001458 <HAL_PCD_MspInit+0x108>)
 8001436:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800143a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_PCD_MspInit+0x108>)
 8001440:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	37e0      	adds	r7, #224	; 0xe0
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40080000 	.word	0x40080000
 8001458:	58024400 	.word	0x58024400
 800145c:	58020000 	.word	0x58020000

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ac:	f000 f96e 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM2_IRQHandler+0x10>)
 80014ba:	f004 f8ee 	bl	800569a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	24000248 	.word	0x24000248

080014c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
	return 1;
 80014cc:	2301      	movs	r3, #1
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <_kill>:

int _kill(int pid, int sig)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014e2:	f006 f917 	bl	8007714 <__errno>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2216      	movs	r2, #22
 80014ea:	601a      	str	r2, [r3, #0]
	return -1;
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_exit>:

void _exit (int status)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ffe7 	bl	80014d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800150a:	e7fe      	b.n	800150a <_exit+0x12>

0800150c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e00a      	b.n	8001534 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800151e:	f3af 8000 	nop.w
 8001522:	4601      	mov	r1, r0
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	60ba      	str	r2, [r7, #8]
 800152a:	b2ca      	uxtb	r2, r1
 800152c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	dbf0      	blt.n	800151e <_read+0x12>
	}

return len;
 800153c:	687b      	ldr	r3, [r7, #4]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e009      	b.n	800156c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	60ba      	str	r2, [r7, #8]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	429a      	cmp	r2, r3
 8001572:	dbf1      	blt.n	8001558 <_write+0x12>
	}
	return len;
 8001574:	687b      	ldr	r3, [r7, #4]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_close>:

int _close(int file)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
	return -1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a6:	605a      	str	r2, [r3, #4]
	return 0;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_isatty>:

int _isatty(int file)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
	return 1;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
	return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <_sbrk+0x5c>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <_sbrk+0x60>)
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <_sbrk+0x64>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <_sbrk+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d207      	bcs.n	8001628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001618:	f006 f87c 	bl	8007714 <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e009      	b.n	800163c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <_sbrk+0x64>)
 8001638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	24080000 	.word	0x24080000
 8001648:	00000400 	.word	0x00000400
 800164c:	24000890 	.word	0x24000890
 8001650:	240008a8 	.word	0x240008a8

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001658:	f7ff f81c 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165e:	490d      	ldr	r1, [pc, #52]	; (8001694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001674:	4c0a      	ldr	r4, [pc, #40]	; (80016a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f006 f84d 	bl	8007720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff f89b 	bl	80007c0 <main>
  bx  lr
 800168a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001690:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001694:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001698:	0800a8d4 	.word	0x0800a8d4
  ldr r2, =_sbss
 800169c:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80016a0:	240008a8 	.word	0x240008a8

080016a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC3_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ae:	2003      	movs	r0, #3
 80016b0:	f000 f98c 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016b4:	f002 fa5c 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
 80016b8:	4602      	mov	r2, r0
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_Init+0x68>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	4913      	ldr	r1, [pc, #76]	; (8001714 <HAL_Init+0x6c>)
 80016c6:	5ccb      	ldrb	r3, [r1, r3]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
 80016d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_Init+0x68>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <HAL_Init+0x6c>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <HAL_Init+0x70>)
 80016ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016ec:	4a0b      	ldr	r2, [pc, #44]	; (800171c <HAL_Init+0x74>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 f814 	bl	8001720 <HAL_InitTick>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e002      	b.n	8001708 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001702:	f7ff fd19 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	58024400 	.word	0x58024400
 8001714:	0800a4b4 	.word	0x0800a4b4
 8001718:	24000004 	.word	0x24000004
 800171c:	24000000 	.word	0x24000000

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_InitTick+0x60>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e021      	b.n	8001778 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_InitTick+0x64>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_InitTick+0x60>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f971 	bl	8001a32 <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f000 f93b 	bl	80019e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_InitTick+0x68>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2400000c 	.word	0x2400000c
 8001784:	24000000 	.word	0x24000000
 8001788:	24000008 	.word	0x24000008

0800178c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x20>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x24>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_IncTick+0x24>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	2400000c 	.word	0x2400000c
 80017b0:	24000894 	.word	0x24000894

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	24000894 	.word	0x24000894

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2400000c 	.word	0x2400000c

08001814 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetREVID+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	0c1b      	lsrs	r3, r3, #16
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	5c001000 	.word	0x5c001000

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <__NVIC_SetPriorityGrouping+0x40>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001856:	4313      	orrs	r3, r2
 8001858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <__NVIC_SetPriorityGrouping+0x40>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00
 8001870:	05fa0000 	.word	0x05fa0000

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4907      	ldr	r1, [pc, #28]	; (80018c8 <__NVIC_EnableIRQ+0x38>)
 80018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff ff8e 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff29 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019f0:	f7ff ff40 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	6978      	ldr	r0, [r7, #20]
 80019fc:	f7ff ff90 	bl	8001920 <NVIC_EncodePriority>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff5f 	bl	80018cc <__NVIC_SetPriority>
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff33 	bl	8001890 <__NVIC_EnableIRQ>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffa4 	bl	8001988 <SysTick_Config>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a5a:	4b89      	ldr	r3, [pc, #548]	; (8001c80 <HAL_GPIO_Init+0x234>)
 8001a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a5e:	e194      	b.n	8001d8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8186 	beq.w	8001d84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d005      	beq.n	8001a90 <HAL_GPIO_Init+0x44>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d130      	bne.n	8001af2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	f003 0201 	and.w	r2, r3, #1
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d017      	beq.n	8001b2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d123      	bne.n	8001b82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	08da      	lsrs	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3208      	adds	r2, #8
 8001b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	220f      	movs	r2, #15
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	691a      	ldr	r2, [r3, #16]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	69b9      	ldr	r1, [r7, #24]
 8001b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0203 	and.w	r2, r3, #3
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80e0 	beq.w	8001d84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <HAL_GPIO_Init+0x238>)
 8001bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bca:	4a2e      	ldr	r2, [pc, #184]	; (8001c84 <HAL_GPIO_Init+0x238>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_GPIO_Init+0x238>)
 8001bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be2:	4a29      	ldr	r2, [pc, #164]	; (8001c88 <HAL_GPIO_Init+0x23c>)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <HAL_GPIO_Init+0x240>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d052      	beq.n	8001cb4 <HAL_GPIO_Init+0x268>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a1f      	ldr	r2, [pc, #124]	; (8001c90 <HAL_GPIO_Init+0x244>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d031      	beq.n	8001c7a <HAL_GPIO_Init+0x22e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <HAL_GPIO_Init+0x248>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d02b      	beq.n	8001c76 <HAL_GPIO_Init+0x22a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <HAL_GPIO_Init+0x24c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d025      	beq.n	8001c72 <HAL_GPIO_Init+0x226>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <HAL_GPIO_Init+0x250>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01f      	beq.n	8001c6e <HAL_GPIO_Init+0x222>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <HAL_GPIO_Init+0x254>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d019      	beq.n	8001c6a <HAL_GPIO_Init+0x21e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a1a      	ldr	r2, [pc, #104]	; (8001ca4 <HAL_GPIO_Init+0x258>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_GPIO_Init+0x21a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_GPIO_Init+0x25c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00d      	beq.n	8001c62 <HAL_GPIO_Init+0x216>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_GPIO_Init+0x260>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0x212>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <HAL_GPIO_Init+0x264>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_Init+0x20e>
 8001c56:	2309      	movs	r3, #9
 8001c58:	e02d      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	e02b      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c5e:	2308      	movs	r3, #8
 8001c60:	e029      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e027      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c66:	2306      	movs	r3, #6
 8001c68:	e025      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	e023      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c6e:	2304      	movs	r3, #4
 8001c70:	e021      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e01f      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e01d      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e01b      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c7e:	bf00      	nop
 8001c80:	58000080 	.word	0x58000080
 8001c84:	58024400 	.word	0x58024400
 8001c88:	58000400 	.word	0x58000400
 8001c8c:	58020000 	.word	0x58020000
 8001c90:	58020400 	.word	0x58020400
 8001c94:	58020800 	.word	0x58020800
 8001c98:	58020c00 	.word	0x58020c00
 8001c9c:	58021000 	.word	0x58021000
 8001ca0:	58021400 	.word	0x58021400
 8001ca4:	58021800 	.word	0x58021800
 8001ca8:	58021c00 	.word	0x58021c00
 8001cac:	58022000 	.word	0x58022000
 8001cb0:	58022400 	.word	0x58022400
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	f002 0203 	and.w	r2, r2, #3
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc6:	4938      	ldr	r1, [pc, #224]	; (8001da8 <HAL_GPIO_Init+0x35c>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	3301      	adds	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f47f ae63 	bne.w	8001a60 <HAL_GPIO_Init+0x14>
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	3724      	adds	r7, #36	; 0x24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	58000400 	.word	0x58000400

08001dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001dc8:	e003      	b.n	8001dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	041a      	lsls	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001de8:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_HSEM_FastTake+0x2c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3320      	adds	r3, #32
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_HSEM_FastTake+0x30>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	58026400 	.word	0x58026400
 8001e10:	80000300 	.word	0x80000300

08001e14 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001e1e:	4906      	ldr	r1, [pc, #24]	; (8001e38 <HAL_HSEM_Release+0x24>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	58026400 	.word	0x58026400

08001e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e07f      	b.n	8001f4e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff f982 	bl	800116c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2224      	movs	r2, #36	; 0x24
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	e006      	b.n	8001ec4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ec2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d104      	bne.n	8001ed6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ed4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_I2C_Init+0x11c>)
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69d9      	ldr	r1, [r3, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1a      	ldr	r2, [r3, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	02008000 	.word	0x02008000

08001f5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	4608      	mov	r0, r1
 8001f66:	4611      	mov	r1, r2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	817b      	strh	r3, [r7, #10]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	813b      	strh	r3, [r7, #8]
 8001f72:	4613      	mov	r3, r2
 8001f74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	f040 80f9 	bne.w	8002176 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_I2C_Mem_Write+0x34>
 8001f8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0ed      	b.n	8002178 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_I2C_Mem_Write+0x4e>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e0e6      	b.n	8002178 <HAL_I2C_Mem_Write+0x21c>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fb2:	f7ff fbff 	bl	80017b4 <HAL_GetTick>
 8001fb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	2319      	movs	r3, #25
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fbcb 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0d1      	b.n	8002178 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2221      	movs	r2, #33	; 0x21
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a3a      	ldr	r2, [r7, #32]
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ffc:	88f8      	ldrh	r0, [r7, #6]
 8001ffe:	893a      	ldrh	r2, [r7, #8]
 8002000:	8979      	ldrh	r1, [r7, #10]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4603      	mov	r3, r0
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fadb 	bl	80025c8 <I2C_RequestMemoryWrite>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0a9      	b.n	8002178 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	2bff      	cmp	r3, #255	; 0xff
 800202c:	d90e      	bls.n	800204c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	22ff      	movs	r2, #255	; 0xff
 8002032:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002038:	b2da      	uxtb	r2, r3
 800203a:	8979      	ldrh	r1, [r7, #10]
 800203c:	2300      	movs	r3, #0
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 fd33 	bl	8002ab0 <I2C_TransferConfig>
 800204a:	e00f      	b.n	800206c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205a:	b2da      	uxtb	r2, r3
 800205c:	8979      	ldrh	r1, [r7, #10]
 800205e:	2300      	movs	r3, #0
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fd22 	bl	8002ab0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fbb5 	bl	80027e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e07b      	b.n	8002178 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d034      	beq.n	8002124 <HAL_I2C_Mem_Write+0x1c8>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d130      	bne.n	8002124 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c8:	2200      	movs	r2, #0
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 fb47 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e04d      	b.n	8002178 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2bff      	cmp	r3, #255	; 0xff
 80020e4:	d90e      	bls.n	8002104 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	22ff      	movs	r2, #255	; 0xff
 80020ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	8979      	ldrh	r1, [r7, #10]
 80020f4:	2300      	movs	r3, #0
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fcd7 	bl	8002ab0 <I2C_TransferConfig>
 8002102:	e00f      	b.n	8002124 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002112:	b2da      	uxtb	r2, r3
 8002114:	8979      	ldrh	r1, [r7, #10]
 8002116:	2300      	movs	r3, #0
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 fcc6 	bl	8002ab0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d19e      	bne.n	800206c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fb94 	bl	8002860 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e01a      	b.n	8002178 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2220      	movs	r2, #32
 8002148:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_I2C_Mem_Write+0x224>)
 8002156:	400b      	ands	r3, r1
 8002158:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	e000      	b.n	8002178 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002176:	2302      	movs	r3, #2
  }
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	fe00e800 	.word	0xfe00e800

08002184 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	461a      	mov	r2, r3
 8002192:	4603      	mov	r3, r0
 8002194:	817b      	strh	r3, [r7, #10]
 8002196:	460b      	mov	r3, r1
 8002198:	813b      	strh	r3, [r7, #8]
 800219a:	4613      	mov	r3, r2
 800219c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	f040 80fd 	bne.w	80023a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_I2C_Mem_Read+0x34>
 80021b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0f1      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_I2C_Mem_Read+0x4e>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e0ea      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021da:	f7ff faeb 	bl	80017b4 <HAL_GetTick>
 80021de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2319      	movs	r3, #25
 80021e6:	2201      	movs	r2, #1
 80021e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fab7 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0d5      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2222      	movs	r2, #34	; 0x22
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a3a      	ldr	r2, [r7, #32]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800221c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002224:	88f8      	ldrh	r0, [r7, #6]
 8002226:	893a      	ldrh	r2, [r7, #8]
 8002228:	8979      	ldrh	r1, [r7, #10]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	4603      	mov	r3, r0
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fa1b 	bl	8002670 <I2C_RequestMemoryRead>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0ad      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	2bff      	cmp	r3, #255	; 0xff
 8002254:	d90e      	bls.n	8002274 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	22ff      	movs	r2, #255	; 0xff
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	b2da      	uxtb	r2, r3
 8002262:	8979      	ldrh	r1, [r7, #10]
 8002264:	4b52      	ldr	r3, [pc, #328]	; (80023b0 <HAL_I2C_Mem_Read+0x22c>)
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fc1f 	bl	8002ab0 <I2C_TransferConfig>
 8002272:	e00f      	b.n	8002294 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002282:	b2da      	uxtb	r2, r3
 8002284:	8979      	ldrh	r1, [r7, #10]
 8002286:	4b4a      	ldr	r3, [pc, #296]	; (80023b0 <HAL_I2C_Mem_Read+0x22c>)
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fc0e 	bl	8002ab0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	2200      	movs	r2, #0
 800229c:	2104      	movs	r1, #4
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 fa5e 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e07c      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d034      	beq.n	8002354 <HAL_I2C_Mem_Read+0x1d0>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d130      	bne.n	8002354 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	2200      	movs	r2, #0
 80022fa:	2180      	movs	r1, #128	; 0x80
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fa2f 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e04d      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	2bff      	cmp	r3, #255	; 0xff
 8002314:	d90e      	bls.n	8002334 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	22ff      	movs	r2, #255	; 0xff
 800231a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	b2da      	uxtb	r2, r3
 8002322:	8979      	ldrh	r1, [r7, #10]
 8002324:	2300      	movs	r3, #0
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fbbf 	bl	8002ab0 <I2C_TransferConfig>
 8002332:	e00f      	b.n	8002354 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	b2da      	uxtb	r2, r3
 8002344:	8979      	ldrh	r1, [r7, #10]
 8002346:	2300      	movs	r3, #0
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fbae 	bl	8002ab0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d19a      	bne.n	8002294 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fa7c 	bl	8002860 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e01a      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2220      	movs	r2, #32
 8002378:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_I2C_Mem_Read+0x230>)
 8002386:	400b      	ands	r3, r1
 8002388:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	80002400 	.word	0x80002400
 80023b4:	fe00e800 	.word	0xfe00e800

080023b8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	460b      	mov	r3, r1
 80023c6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	f040 80ef 	bne.w	80025b8 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023e8:	d101      	bne.n	80023ee <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80023ea:	2302      	movs	r3, #2
 80023ec:	e0e5      	b.n	80025ba <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_I2C_IsDeviceReady+0x44>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e0de      	b.n	80025ba <HAL_I2C_IsDeviceReady+0x202>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2224      	movs	r2, #36	; 0x24
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d105      	bne.n	8002426 <HAL_I2C_IsDeviceReady+0x6e>
 800241a:	897b      	ldrh	r3, [r7, #10]
 800241c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002420:	4b68      	ldr	r3, [pc, #416]	; (80025c4 <HAL_I2C_IsDeviceReady+0x20c>)
 8002422:	4313      	orrs	r3, r2
 8002424:	e004      	b.n	8002430 <HAL_I2C_IsDeviceReady+0x78>
 8002426:	897b      	ldrh	r3, [r7, #10]
 8002428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800242c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002436:	f7ff f9bd 	bl	80017b4 <HAL_GetTick>
 800243a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b20      	cmp	r3, #32
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b10      	cmp	r3, #16
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002468:	e034      	b.n	80024d4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002470:	d01a      	beq.n	80024a8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002472:	f7ff f99f 	bl	80017b4 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d302      	bcc.n	8002488 <HAL_I2C_IsDeviceReady+0xd0>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10f      	bne.n	80024a8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e088      	b.n	80025ba <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b10      	cmp	r3, #16
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80024d4:	7ffb      	ldrb	r3, [r7, #31]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <HAL_I2C_IsDeviceReady+0x128>
 80024da:	7fbb      	ldrb	r3, [r7, #30]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0c4      	beq.n	800246a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b10      	cmp	r3, #16
 80024ec:	d01a      	beq.n	8002524 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2200      	movs	r2, #0
 80024f6:	2120      	movs	r1, #32
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f931 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e058      	b.n	80025ba <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2220      	movs	r2, #32
 800250e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	e04a      	b.n	80025ba <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2200      	movs	r2, #0
 800252c:	2120      	movs	r1, #32
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f916 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e03d      	b.n	80025ba <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2210      	movs	r2, #16
 8002544:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2220      	movs	r2, #32
 800254c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	d118      	bne.n	8002588 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002564:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	2120      	movs	r1, #32
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f8f5 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e01c      	b.n	80025ba <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2220      	movs	r2, #32
 8002586:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3301      	adds	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	f63f af3d 	bhi.w	8002412 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a4:	f043 0220 	orr.w	r2, r3, #32
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	02002000 	.word	0x02002000

080025c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	4608      	mov	r0, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	817b      	strh	r3, [r7, #10]
 80025da:	460b      	mov	r3, r1
 80025dc:	813b      	strh	r3, [r7, #8]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	8979      	ldrh	r1, [r7, #10]
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <I2C_RequestMemoryWrite+0xa4>)
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fa5d 	bl	8002ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	69b9      	ldr	r1, [r7, #24]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f8f0 	bl	80027e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e02c      	b.n	8002664 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d105      	bne.n	800261c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002610:	893b      	ldrh	r3, [r7, #8]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	629a      	str	r2, [r3, #40]	; 0x28
 800261a:	e015      	b.n	8002648 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800261c:	893b      	ldrh	r3, [r7, #8]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	b29b      	uxth	r3, r3
 8002622:	b2da      	uxtb	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	69b9      	ldr	r1, [r7, #24]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f8d6 	bl	80027e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e012      	b.n	8002664 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800263e:	893b      	ldrh	r3, [r7, #8]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2200      	movs	r2, #0
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f884 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	80002000 	.word	0x80002000

08002670 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	4608      	mov	r0, r1
 800267a:	4611      	mov	r1, r2
 800267c:	461a      	mov	r2, r3
 800267e:	4603      	mov	r3, r0
 8002680:	817b      	strh	r3, [r7, #10]
 8002682:	460b      	mov	r3, r1
 8002684:	813b      	strh	r3, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	8979      	ldrh	r1, [r7, #10]
 8002690:	4b20      	ldr	r3, [pc, #128]	; (8002714 <I2C_RequestMemoryRead+0xa4>)
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2300      	movs	r3, #0
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fa0a 	bl	8002ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	69b9      	ldr	r1, [r7, #24]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f89d 	bl	80027e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e02c      	b.n	800270a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d105      	bne.n	80026c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026b6:	893b      	ldrh	r3, [r7, #8]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
 80026c0:	e015      	b.n	80026ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026c2:	893b      	ldrh	r3, [r7, #8]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	69b9      	ldr	r1, [r7, #24]
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f883 	bl	80027e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e012      	b.n	800270a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026e4:	893b      	ldrh	r3, [r7, #8]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2200      	movs	r2, #0
 80026f6:	2140      	movs	r1, #64	; 0x40
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f831 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	80002000 	.word	0x80002000

08002718 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b02      	cmp	r3, #2
 800272c:	d103      	bne.n	8002736 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2200      	movs	r2, #0
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d007      	beq.n	8002754 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	619a      	str	r2, [r3, #24]
  }
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	4613      	mov	r3, r2
 800276e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002770:	e022      	b.n	80027b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d01e      	beq.n	80027b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7ff f81b 	bl	80017b4 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <I2C_WaitOnFlagUntilTimeout+0x30>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d113      	bne.n	80027b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e00f      	b.n	80027d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d0cd      	beq.n	8002772 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027ec:	e02c      	b.n	8002848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f870 	bl	80028d8 <I2C_IsErrorOccurred>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e02a      	b.n	8002858 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d01e      	beq.n	8002848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280a:	f7fe ffd3 	bl	80017b4 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	429a      	cmp	r2, r3
 8002818:	d302      	bcc.n	8002820 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d113      	bne.n	8002848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e007      	b.n	8002858 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b02      	cmp	r3, #2
 8002854:	d1cb      	bne.n	80027ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800286c:	e028      	b.n	80028c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f830 	bl	80028d8 <I2C_IsErrorOccurred>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e026      	b.n	80028d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002882:	f7fe ff97 	bl	80017b4 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	429a      	cmp	r2, r3
 8002890:	d302      	bcc.n	8002898 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d113      	bne.n	80028c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e007      	b.n	80028d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d1cf      	bne.n	800286e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	d075      	beq.n	80029f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2210      	movs	r2, #16
 800290a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800290c:	e056      	b.n	80029bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d052      	beq.n	80029bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002916:	f7fe ff4d 	bl	80017b4 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <I2C_IsErrorOccurred+0x54>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d147      	bne.n	80029bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002936:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800293e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800294a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294e:	d12e      	bne.n	80029ae <I2C_IsErrorOccurred+0xd6>
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002956:	d02a      	beq.n	80029ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	2b20      	cmp	r3, #32
 800295c:	d027      	beq.n	80029ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800296c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800296e:	f7fe ff21 	bl	80017b4 <HAL_GetTick>
 8002972:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002974:	e01b      	b.n	80029ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002976:	f7fe ff1d 	bl	80017b4 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b19      	cmp	r3, #25
 8002982:	d914      	bls.n	80029ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d1dc      	bne.n	8002976 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	d003      	beq.n	80029d2 <I2C_IsErrorOccurred+0xfa>
 80029ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d09d      	beq.n	800290e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2220      	movs	r2, #32
 80029e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	f043 0304 	orr.w	r3, r3, #4
 80029e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	f043 0308 	orr.w	r3, r3, #8
 8002a2a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d01c      	beq.n	8002aa0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7ff fe56 	bl	8002718 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <I2C_IsErrorOccurred+0x1d4>)
 8002a78:	400b      	ands	r3, r1
 8002a7a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3728      	adds	r7, #40	; 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	fe00e800 	.word	0xfe00e800

08002ab0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	817b      	strh	r3, [r7, #10]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ac2:	897b      	ldrh	r3, [r7, #10]
 8002ac4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ac8:	7a7b      	ldrb	r3, [r7, #9]
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ad0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ade:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	0d5b      	lsrs	r3, r3, #21
 8002aea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <I2C_TransferConfig+0x60>)
 8002af0:	430b      	orrs	r3, r1
 8002af2:	43db      	mvns	r3, r3
 8002af4:	ea02 0103 	and.w	r1, r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	03ff63ff 	.word	0x03ff63ff

08002b14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d138      	bne.n	8002b9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e032      	b.n	8002b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2224      	movs	r2, #36	; 0x24
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6819      	ldr	r1, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e000      	b.n	8002b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
  }
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d139      	bne.n	8002c34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e033      	b.n	8002c36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2224      	movs	r2, #36	; 0x24
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e000      	b.n	8002c36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
  }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c44:	b08f      	sub	sp, #60	; 0x3c
 8002c46:	af0a      	add	r7, sp, #40	; 0x28
 8002c48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e116      	b.n	8002e82 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe fb6e 	bl	8001350 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2203      	movs	r2, #3
 8002c78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f004 faa2 	bl	80071dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	687e      	ldr	r6, [r7, #4]
 8002ca0:	466d      	mov	r5, sp
 8002ca2:	f106 0410 	add.w	r4, r6, #16
 8002ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cb6:	1d33      	adds	r3, r6, #4
 8002cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cba:	6838      	ldr	r0, [r7, #0]
 8002cbc:	f004 fa20 	bl	8007100 <USB_CoreInit>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0d7      	b.n	8002e82 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f004 fa90 	bl	80071fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e04a      	b.n	8002d7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	333d      	adds	r3, #61	; 0x3d
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	333c      	adds	r3, #60	; 0x3c
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	b298      	uxth	r0, r3
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3344      	adds	r3, #68	; 0x44
 8002d20:	4602      	mov	r2, r0
 8002d22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3340      	adds	r3, #64	; 0x40
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	3348      	adds	r3, #72	; 0x48
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	334c      	adds	r3, #76	; 0x4c
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3354      	adds	r3, #84	; 0x54
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	3301      	adds	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	7bfa      	ldrb	r2, [r7, #15]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d3af      	bcc.n	8002ce4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	e044      	b.n	8002e14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	3301      	adds	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
 8002e14:	7bfa      	ldrb	r2, [r7, #15]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d3b5      	bcc.n	8002d8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	687e      	ldr	r6, [r7, #4]
 8002e26:	466d      	mov	r5, sp
 8002e28:	f106 0410 	add.w	r4, r6, #16
 8002e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e38:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e3c:	1d33      	adds	r3, r6, #4
 8002e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e40:	6838      	ldr	r0, [r7, #0]
 8002e42:	f004 fa29 	bl	8007298 <USB_DevInit>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e014      	b.n	8002e82 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d102      	bne.n	8002e76 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f80b 	bl	8002e8c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f004 fbe7 	bl	800764e <USB_DevDisconnect>

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	10000003 	.word	0x10000003

08002ed4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002edc:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	2b06      	cmp	r3, #6
 8002ee6:	d00a      	beq.n	8002efe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ee8:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d001      	beq.n	8002efa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e040      	b.n	8002f7c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e03e      	b.n	8002f7c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002f06:	491f      	ldr	r1, [pc, #124]	; (8002f84 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002f0e:	f7fe fc51 	bl	80017b4 <HAL_GetTick>
 8002f12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f14:	e009      	b.n	8002f2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f16:	f7fe fc4d 	bl	80017b4 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f24:	d901      	bls.n	8002f2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e028      	b.n	8002f7c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f2a:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f36:	d1ee      	bne.n	8002f16 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b1e      	cmp	r3, #30
 8002f3c:	d008      	beq.n	8002f50 <HAL_PWREx_ConfigSupply+0x7c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b2e      	cmp	r3, #46	; 0x2e
 8002f42:	d005      	beq.n	8002f50 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b1d      	cmp	r3, #29
 8002f48:	d002      	beq.n	8002f50 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b2d      	cmp	r3, #45	; 0x2d
 8002f4e:	d114      	bne.n	8002f7a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002f50:	f7fe fc30 	bl	80017b4 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f56:	e009      	b.n	8002f6c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f58:	f7fe fc2c 	bl	80017b4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f66:	d901      	bls.n	8002f6c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f78:	d1ee      	bne.n	8002f58 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	58024800 	.word	0x58024800

08002f88 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f96:	60d3      	str	r3, [r2, #12]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	58024800 	.word	0x58024800

08002fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08c      	sub	sp, #48	; 0x30
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f000 bc1d 	b.w	80037f6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8087 	beq.w	80030d8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fca:	4b99      	ldr	r3, [pc, #612]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fd4:	4b96      	ldr	r3, [pc, #600]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d007      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x48>
 8002fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe2:	2b18      	cmp	r3, #24
 8002fe4:	d110      	bne.n	8003008 <HAL_RCC_OscConfig+0x60>
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d10b      	bne.n	8003008 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	4b8f      	ldr	r3, [pc, #572]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d06c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x12e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d168      	bne.n	80030d6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e3f6      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d106      	bne.n	8003020 <HAL_RCC_OscConfig+0x78>
 8003012:	4b87      	ldr	r3, [pc, #540]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a86      	ldr	r2, [pc, #536]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e02e      	b.n	800307e <HAL_RCC_OscConfig+0xd6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0x9a>
 8003028:	4b81      	ldr	r3, [pc, #516]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a80      	ldr	r2, [pc, #512]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 800302e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b7e      	ldr	r3, [pc, #504]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a7d      	ldr	r2, [pc, #500]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 800303a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	e01d      	b.n	800307e <HAL_RCC_OscConfig+0xd6>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304a:	d10c      	bne.n	8003066 <HAL_RCC_OscConfig+0xbe>
 800304c:	4b78      	ldr	r3, [pc, #480]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a77      	ldr	r2, [pc, #476]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b75      	ldr	r3, [pc, #468]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a74      	ldr	r2, [pc, #464]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 800305e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	e00b      	b.n	800307e <HAL_RCC_OscConfig+0xd6>
 8003066:	4b72      	ldr	r3, [pc, #456]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a71      	ldr	r2, [pc, #452]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 800306c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6e      	ldr	r2, [pc, #440]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d013      	beq.n	80030ae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fe fb95 	bl	80017b4 <HAL_GetTick>
 800308a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800308e:	f7fe fb91 	bl	80017b4 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b64      	cmp	r3, #100	; 0x64
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e3aa      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a0:	4b63      	ldr	r3, [pc, #396]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0xe6>
 80030ac:	e014      	b.n	80030d8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fe fb81 	bl	80017b4 <HAL_GetTick>
 80030b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b6:	f7fe fb7d 	bl	80017b4 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b64      	cmp	r3, #100	; 0x64
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e396      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030c8:	4b59      	ldr	r3, [pc, #356]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f0      	bne.n	80030b6 <HAL_RCC_OscConfig+0x10e>
 80030d4:	e000      	b.n	80030d8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80cb 	beq.w	800327c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030e6:	4b52      	ldr	r3, [pc, #328]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030f0:	4b4f      	ldr	r3, [pc, #316]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <HAL_RCC_OscConfig+0x164>
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	2b18      	cmp	r3, #24
 8003100:	d156      	bne.n	80031b0 <HAL_RCC_OscConfig+0x208>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d151      	bne.n	80031b0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800310c:	4b48      	ldr	r3, [pc, #288]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_OscConfig+0x17c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e368      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003124:	4b42      	ldr	r3, [pc, #264]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 0219 	bic.w	r2, r3, #25
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	493f      	ldr	r1, [pc, #252]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003136:	f7fe fb3d 	bl	80017b4 <HAL_GetTick>
 800313a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313e:	f7fe fb39 	bl	80017b4 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e352      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003150:	4b37      	ldr	r3, [pc, #220]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	f7fe fb5a 	bl	8001814 <HAL_GetREVID>
 8003160:	4603      	mov	r3, r0
 8003162:	f241 0203 	movw	r2, #4099	; 0x1003
 8003166:	4293      	cmp	r3, r2
 8003168:	d817      	bhi.n	800319a <HAL_RCC_OscConfig+0x1f2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b40      	cmp	r3, #64	; 0x40
 8003170:	d108      	bne.n	8003184 <HAL_RCC_OscConfig+0x1dc>
 8003172:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800317a:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 800317c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003180:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003182:	e07b      	b.n	800327c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	031b      	lsls	r3, r3, #12
 8003192:	4927      	ldr	r1, [pc, #156]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003198:	e070      	b.n	800327c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	061b      	lsls	r3, r3, #24
 80031a8:	4921      	ldr	r1, [pc, #132]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ae:	e065      	b.n	800327c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d048      	beq.n	800324a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 0219 	bic.w	r2, r3, #25
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	491a      	ldr	r1, [pc, #104]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fe faf3 	bl	80017b4 <HAL_GetTick>
 80031ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d2:	f7fe faef 	bl	80017b4 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e308      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031e4:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f0:	f7fe fb10 	bl	8001814 <HAL_GetREVID>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d81a      	bhi.n	8003234 <HAL_RCC_OscConfig+0x28c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b40      	cmp	r3, #64	; 0x40
 8003204:	d108      	bne.n	8003218 <HAL_RCC_OscConfig+0x270>
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800320e:	4a08      	ldr	r2, [pc, #32]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003214:	6053      	str	r3, [r2, #4]
 8003216:	e031      	b.n	800327c <HAL_RCC_OscConfig+0x2d4>
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	031b      	lsls	r3, r3, #12
 8003226:	4902      	ldr	r1, [pc, #8]	; (8003230 <HAL_RCC_OscConfig+0x288>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
 800322c:	e026      	b.n	800327c <HAL_RCC_OscConfig+0x2d4>
 800322e:	bf00      	nop
 8003230:	58024400 	.word	0x58024400
 8003234:	4b9a      	ldr	r3, [pc, #616]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	4997      	ldr	r1, [pc, #604]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
 8003248:	e018      	b.n	800327c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	4b95      	ldr	r3, [pc, #596]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a94      	ldr	r2, [pc, #592]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fe faad 	bl	80017b4 <HAL_GetTick>
 800325a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325e:	f7fe faa9 	bl	80017b4 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e2c2      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003270:	4b8b      	ldr	r3, [pc, #556]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f0      	bne.n	800325e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80a9 	beq.w	80033dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800328a:	4b85      	ldr	r3, [pc, #532]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003292:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003294:	4b82      	ldr	r3, [pc, #520]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d007      	beq.n	80032b0 <HAL_RCC_OscConfig+0x308>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b18      	cmp	r3, #24
 80032a4:	d13a      	bne.n	800331c <HAL_RCC_OscConfig+0x374>
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d135      	bne.n	800331c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032b0:	4b7b      	ldr	r3, [pc, #492]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_OscConfig+0x320>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	2b80      	cmp	r3, #128	; 0x80
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e296      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032c8:	f7fe faa4 	bl	8001814 <HAL_GetREVID>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d817      	bhi.n	8003306 <HAL_RCC_OscConfig+0x35e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d108      	bne.n	80032f0 <HAL_RCC_OscConfig+0x348>
 80032de:	4b70      	ldr	r3, [pc, #448]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80032e6:	4a6e      	ldr	r2, [pc, #440]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 80032e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032ec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032ee:	e075      	b.n	80033dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032f0:	4b6b      	ldr	r3, [pc, #428]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	069b      	lsls	r3, r3, #26
 80032fe:	4968      	ldr	r1, [pc, #416]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003304:	e06a      	b.n	80033dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003306:	4b66      	ldr	r3, [pc, #408]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	061b      	lsls	r3, r3, #24
 8003314:	4962      	ldr	r1, [pc, #392]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003316:	4313      	orrs	r3, r2
 8003318:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800331a:	e05f      	b.n	80033dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d042      	beq.n	80033aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003324:	4b5e      	ldr	r3, [pc, #376]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a5d      	ldr	r2, [pc, #372]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 800332a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fa40 	bl	80017b4 <HAL_GetTick>
 8003334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003338:	f7fe fa3c 	bl	80017b4 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e255      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800334a:	4b55      	ldr	r3, [pc, #340]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003356:	f7fe fa5d 	bl	8001814 <HAL_GetREVID>
 800335a:	4603      	mov	r3, r0
 800335c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003360:	4293      	cmp	r3, r2
 8003362:	d817      	bhi.n	8003394 <HAL_RCC_OscConfig+0x3ec>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	2b20      	cmp	r3, #32
 800336a:	d108      	bne.n	800337e <HAL_RCC_OscConfig+0x3d6>
 800336c:	4b4c      	ldr	r3, [pc, #304]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003374:	4a4a      	ldr	r2, [pc, #296]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800337a:	6053      	str	r3, [r2, #4]
 800337c:	e02e      	b.n	80033dc <HAL_RCC_OscConfig+0x434>
 800337e:	4b48      	ldr	r3, [pc, #288]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	069b      	lsls	r3, r3, #26
 800338c:	4944      	ldr	r1, [pc, #272]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
 8003392:	e023      	b.n	80033dc <HAL_RCC_OscConfig+0x434>
 8003394:	4b42      	ldr	r3, [pc, #264]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	493f      	ldr	r1, [pc, #252]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60cb      	str	r3, [r1, #12]
 80033a8:	e018      	b.n	80033dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80033aa:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a3c      	ldr	r2, [pc, #240]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 80033b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fe f9fd 	bl	80017b4 <HAL_GetTick>
 80033ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80033be:	f7fe f9f9 	bl	80017b4 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e212      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033d0:	4b33      	ldr	r3, [pc, #204]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f0      	bne.n	80033be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d036      	beq.n	8003456 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d019      	beq.n	8003424 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f0:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 80033f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f4:	4a2a      	ldr	r2, [pc, #168]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe f9da 	bl	80017b4 <HAL_GetTick>
 8003400:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe f9d6 	bl	80017b4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e1ef      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003416:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x45c>
 8003422:	e018      	b.n	8003456 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003424:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003430:	f7fe f9c0 	bl	80017b4 <HAL_GetTick>
 8003434:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003438:	f7fe f9bc 	bl	80017b4 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1d5      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 800344c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d039      	beq.n	80034d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003470:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003474:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003476:	f7fe f99d 	bl	80017b4 <HAL_GetTick>
 800347a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800347e:	f7fe f999 	bl	80017b4 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1b2      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_RCC_OscConfig+0x4f8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x4d6>
 800349c:	e01b      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
 800349e:	bf00      	nop
 80034a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034a4:	4b9b      	ldr	r3, [pc, #620]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a9a      	ldr	r2, [pc, #616]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80034aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034b0:	f7fe f980 	bl	80017b4 <HAL_GetTick>
 80034b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80034b8:	f7fe f97c 	bl	80017b4 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e195      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034ca:	4b92      	ldr	r3, [pc, #584]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8081 	beq.w	80035e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034e4:	4b8c      	ldr	r3, [pc, #560]	; (8003718 <HAL_RCC_OscConfig+0x770>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a8b      	ldr	r2, [pc, #556]	; (8003718 <HAL_RCC_OscConfig+0x770>)
 80034ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034f0:	f7fe f960 	bl	80017b4 <HAL_GetTick>
 80034f4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034f8:	f7fe f95c 	bl	80017b4 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e175      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800350a:	4b83      	ldr	r3, [pc, #524]	; (8003718 <HAL_RCC_OscConfig+0x770>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d106      	bne.n	800352c <HAL_RCC_OscConfig+0x584>
 800351e:	4b7d      	ldr	r3, [pc, #500]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a7c      	ldr	r2, [pc, #496]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
 800352a:	e02d      	b.n	8003588 <HAL_RCC_OscConfig+0x5e0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10c      	bne.n	800354e <HAL_RCC_OscConfig+0x5a6>
 8003534:	4b77      	ldr	r3, [pc, #476]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a76      	ldr	r2, [pc, #472]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	4b74      	ldr	r3, [pc, #464]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a73      	ldr	r2, [pc, #460]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003546:	f023 0304 	bic.w	r3, r3, #4
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
 800354c:	e01c      	b.n	8003588 <HAL_RCC_OscConfig+0x5e0>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b05      	cmp	r3, #5
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0x5c8>
 8003556:	4b6f      	ldr	r3, [pc, #444]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	4a6e      	ldr	r2, [pc, #440]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	6713      	str	r3, [r2, #112]	; 0x70
 8003562:	4b6c      	ldr	r3, [pc, #432]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	4a6b      	ldr	r2, [pc, #428]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	6713      	str	r3, [r2, #112]	; 0x70
 800356e:	e00b      	b.n	8003588 <HAL_RCC_OscConfig+0x5e0>
 8003570:	4b68      	ldr	r3, [pc, #416]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	4a67      	ldr	r2, [pc, #412]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	6713      	str	r3, [r2, #112]	; 0x70
 800357c:	4b65      	ldr	r3, [pc, #404]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a64      	ldr	r2, [pc, #400]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003582:	f023 0304 	bic.w	r3, r3, #4
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d015      	beq.n	80035bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fe f910 	bl	80017b4 <HAL_GetTick>
 8003594:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003596:	e00a      	b.n	80035ae <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003598:	f7fe f90c 	bl	80017b4 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e123      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ae:	4b59      	ldr	r3, [pc, #356]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0ee      	beq.n	8003598 <HAL_RCC_OscConfig+0x5f0>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fe f8fa 	bl	80017b4 <HAL_GetTick>
 80035c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035c2:	e00a      	b.n	80035da <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c4:	f7fe f8f6 	bl	80017b4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e10d      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035da:	4b4e      	ldr	r3, [pc, #312]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1ee      	bne.n	80035c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8102 	beq.w	80037f4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035f0:	4b48      	ldr	r3, [pc, #288]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035f8:	2b18      	cmp	r3, #24
 80035fa:	f000 80bd 	beq.w	8003778 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	2b02      	cmp	r3, #2
 8003604:	f040 809e 	bne.w	8003744 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003608:	4b42      	ldr	r3, [pc, #264]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a41      	ldr	r2, [pc, #260]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 800360e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe f8ce 	bl	80017b4 <HAL_GetTick>
 8003618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361c:	f7fe f8ca 	bl	80017b4 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0e3      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800362e:	4b39      	ldr	r3, [pc, #228]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 800363c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800363e:	4b37      	ldr	r3, [pc, #220]	; (800371c <HAL_RCC_OscConfig+0x774>)
 8003640:	4013      	ands	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800364a:	0112      	lsls	r2, r2, #4
 800364c:	430a      	orrs	r2, r1
 800364e:	4931      	ldr	r1, [pc, #196]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003650:	4313      	orrs	r3, r2
 8003652:	628b      	str	r3, [r1, #40]	; 0x28
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	3b01      	subs	r3, #1
 800365a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	3b01      	subs	r3, #1
 8003664:	025b      	lsls	r3, r3, #9
 8003666:	b29b      	uxth	r3, r3
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	3b01      	subs	r3, #1
 8003670:	041b      	lsls	r3, r3, #16
 8003672:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	3b01      	subs	r3, #1
 800367e:	061b      	lsls	r3, r3, #24
 8003680:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003684:	4923      	ldr	r1, [pc, #140]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003686:	4313      	orrs	r3, r2
 8003688:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	4a21      	ldr	r2, [pc, #132]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003696:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369a:	4b21      	ldr	r3, [pc, #132]	; (8003720 <HAL_RCC_OscConfig+0x778>)
 800369c:	4013      	ands	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036a2:	00d2      	lsls	r2, r2, #3
 80036a4:	491b      	ldr	r1, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036aa:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f023 020c 	bic.w	r2, r3, #12
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	4917      	ldr	r1, [pc, #92]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036bc:	4b15      	ldr	r3, [pc, #84]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	f023 0202 	bic.w	r2, r3, #2
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	4912      	ldr	r1, [pc, #72]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	4a10      	ldr	r2, [pc, #64]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036da:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	4a07      	ldr	r2, [pc, #28]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a04      	ldr	r2, [pc, #16]	; (8003714 <HAL_RCC_OscConfig+0x76c>)
 8003704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fe f853 	bl	80017b4 <HAL_GetTick>
 800370e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003710:	e011      	b.n	8003736 <HAL_RCC_OscConfig+0x78e>
 8003712:	bf00      	nop
 8003714:	58024400 	.word	0x58024400
 8003718:	58024800 	.word	0x58024800
 800371c:	fffffc0c 	.word	0xfffffc0c
 8003720:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe f846 	bl	80017b4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e05f      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003736:	4b32      	ldr	r3, [pc, #200]	; (8003800 <HAL_RCC_OscConfig+0x858>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x77c>
 8003742:	e057      	b.n	80037f4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003744:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <HAL_RCC_OscConfig+0x858>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2d      	ldr	r2, [pc, #180]	; (8003800 <HAL_RCC_OscConfig+0x858>)
 800374a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800374e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe f830 	bl	80017b4 <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003758:	f7fe f82c 	bl	80017b4 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e045      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800376a:	4b25      	ldr	r3, [pc, #148]	; (8003800 <HAL_RCC_OscConfig+0x858>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x7b0>
 8003776:	e03d      	b.n	80037f4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCC_OscConfig+0x858>)
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_RCC_OscConfig+0x858>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2b01      	cmp	r3, #1
 800378a:	d031      	beq.n	80037f0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0203 	and.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d12a      	bne.n	80037f0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d122      	bne.n	80037f0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d11a      	bne.n	80037f0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0a5b      	lsrs	r3, r3, #9
 80037be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d111      	bne.n	80037f0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	0c1b      	lsrs	r3, r3, #16
 80037d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d108      	bne.n	80037f0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	0e1b      	lsrs	r3, r3, #24
 80037e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3730      	adds	r7, #48	; 0x30
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	58024400 	.word	0x58024400

08003804 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e19c      	b.n	8003b52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003818:	4b8a      	ldr	r3, [pc, #552]	; (8003a44 <HAL_RCC_ClockConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d910      	bls.n	8003848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b87      	ldr	r3, [pc, #540]	; (8003a44 <HAL_RCC_ClockConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 020f 	bic.w	r2, r3, #15
 800382e:	4985      	ldr	r1, [pc, #532]	; (8003a44 <HAL_RCC_ClockConfig+0x240>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b83      	ldr	r3, [pc, #524]	; (8003a44 <HAL_RCC_ClockConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e184      	b.n	8003b52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d010      	beq.n	8003876 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	4b7b      	ldr	r3, [pc, #492]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003860:	429a      	cmp	r2, r3
 8003862:	d908      	bls.n	8003876 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003864:	4b78      	ldr	r3, [pc, #480]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	4975      	ldr	r1, [pc, #468]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 8003872:	4313      	orrs	r3, r2
 8003874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d010      	beq.n	80038a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	4b70      	ldr	r3, [pc, #448]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800388e:	429a      	cmp	r2, r3
 8003890:	d908      	bls.n	80038a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003892:	4b6d      	ldr	r3, [pc, #436]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	496a      	ldr	r1, [pc, #424]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d010      	beq.n	80038d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	4b64      	ldr	r3, [pc, #400]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038bc:	429a      	cmp	r2, r3
 80038be:	d908      	bls.n	80038d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038c0:	4b61      	ldr	r3, [pc, #388]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	495e      	ldr	r1, [pc, #376]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d010      	beq.n	8003900 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69da      	ldr	r2, [r3, #28]
 80038e2:	4b59      	ldr	r3, [pc, #356]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d908      	bls.n	8003900 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038ee:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	4953      	ldr	r1, [pc, #332]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d010      	beq.n	800392e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	4b4d      	ldr	r3, [pc, #308]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	429a      	cmp	r2, r3
 800391a:	d908      	bls.n	800392e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b4a      	ldr	r3, [pc, #296]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f023 020f 	bic.w	r2, r3, #15
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4947      	ldr	r1, [pc, #284]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 800392a:	4313      	orrs	r3, r2
 800392c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d055      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800393a:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4940      	ldr	r1, [pc, #256]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 8003948:	4313      	orrs	r3, r2
 800394a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d107      	bne.n	8003964 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003954:	4b3c      	ldr	r3, [pc, #240]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d121      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0f6      	b.n	8003b52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d107      	bne.n	800397c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800396c:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d115      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0ea      	b.n	8003b52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d107      	bne.n	8003994 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003984:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d109      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0de      	b.n	8003b52 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003994:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0d6      	b.n	8003b52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039a4:	4b28      	ldr	r3, [pc, #160]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f023 0207 	bic.w	r2, r3, #7
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4925      	ldr	r1, [pc, #148]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b6:	f7fd fefd 	bl	80017b4 <HAL_GetTick>
 80039ba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039bc:	e00a      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039be:	f7fd fef9 	bl	80017b4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e0be      	b.n	8003b52 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d4:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d1eb      	bne.n	80039be <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d010      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d208      	bcs.n	8003a14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a02:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f023 020f 	bic.w	r2, r3, #15
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	490e      	ldr	r1, [pc, #56]	; (8003a48 <HAL_RCC_ClockConfig+0x244>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_ClockConfig+0x240>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d214      	bcs.n	8003a4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <HAL_RCC_ClockConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 020f 	bic.w	r2, r3, #15
 8003a2a:	4906      	ldr	r1, [pc, #24]	; (8003a44 <HAL_RCC_ClockConfig+0x240>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <HAL_RCC_ClockConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e086      	b.n	8003b52 <HAL_RCC_ClockConfig+0x34e>
 8003a44:	52002000 	.word	0x52002000
 8003a48:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d010      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d208      	bcs.n	8003a7a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a68:	4b3c      	ldr	r3, [pc, #240]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	4939      	ldr	r1, [pc, #228]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d010      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	4b34      	ldr	r3, [pc, #208]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d208      	bcs.n	8003aa8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a96:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	492e      	ldr	r1, [pc, #184]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d010      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699a      	ldr	r2, [r3, #24]
 8003ab8:	4b28      	ldr	r3, [pc, #160]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d208      	bcs.n	8003ad6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ac4:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	4922      	ldr	r1, [pc, #136]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d010      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d208      	bcs.n	8003b04 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003af2:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	4917      	ldr	r1, [pc, #92]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b04:	f000 f834 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	4912      	ldr	r1, [pc, #72]	; (8003b60 <HAL_RCC_ClockConfig+0x35c>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b22:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <HAL_RCC_ClockConfig+0x358>)
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	4a0d      	ldr	r2, [pc, #52]	; (8003b60 <HAL_RCC_ClockConfig+0x35c>)
 8003b2c:	5cd3      	ldrb	r3, [r2, r3]
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
 8003b38:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <HAL_RCC_ClockConfig+0x360>)
 8003b3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b3c:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <HAL_RCC_ClockConfig+0x364>)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <HAL_RCC_ClockConfig+0x368>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd fdea 	bl	8001720 <HAL_InitTick>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	0800a4b4 	.word	0x0800a4b4
 8003b64:	24000004 	.word	0x24000004
 8003b68:	24000000 	.word	0x24000000
 8003b6c:	24000008 	.word	0x24000008

08003b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b089      	sub	sp, #36	; 0x24
 8003b74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b76:	4bb3      	ldr	r3, [pc, #716]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b7e:	2b18      	cmp	r3, #24
 8003b80:	f200 8155 	bhi.w	8003e2e <HAL_RCC_GetSysClockFreq+0x2be>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bf1 	.word	0x08003bf1
 8003b90:	08003e2f 	.word	0x08003e2f
 8003b94:	08003e2f 	.word	0x08003e2f
 8003b98:	08003e2f 	.word	0x08003e2f
 8003b9c:	08003e2f 	.word	0x08003e2f
 8003ba0:	08003e2f 	.word	0x08003e2f
 8003ba4:	08003e2f 	.word	0x08003e2f
 8003ba8:	08003e2f 	.word	0x08003e2f
 8003bac:	08003c17 	.word	0x08003c17
 8003bb0:	08003e2f 	.word	0x08003e2f
 8003bb4:	08003e2f 	.word	0x08003e2f
 8003bb8:	08003e2f 	.word	0x08003e2f
 8003bbc:	08003e2f 	.word	0x08003e2f
 8003bc0:	08003e2f 	.word	0x08003e2f
 8003bc4:	08003e2f 	.word	0x08003e2f
 8003bc8:	08003e2f 	.word	0x08003e2f
 8003bcc:	08003c1d 	.word	0x08003c1d
 8003bd0:	08003e2f 	.word	0x08003e2f
 8003bd4:	08003e2f 	.word	0x08003e2f
 8003bd8:	08003e2f 	.word	0x08003e2f
 8003bdc:	08003e2f 	.word	0x08003e2f
 8003be0:	08003e2f 	.word	0x08003e2f
 8003be4:	08003e2f 	.word	0x08003e2f
 8003be8:	08003e2f 	.word	0x08003e2f
 8003bec:	08003c23 	.word	0x08003c23
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bf0:	4b94      	ldr	r3, [pc, #592]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bfc:	4b91      	ldr	r3, [pc, #580]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	08db      	lsrs	r3, r3, #3
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	4a90      	ldr	r2, [pc, #576]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003c0e:	e111      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c10:	4b8d      	ldr	r3, [pc, #564]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c12:	61bb      	str	r3, [r7, #24]
    break;
 8003c14:	e10e      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003c16:	4b8d      	ldr	r3, [pc, #564]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c18:	61bb      	str	r3, [r7, #24]
    break;
 8003c1a:	e10b      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003c1c:	4b8c      	ldr	r3, [pc, #560]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c1e:	61bb      	str	r3, [r7, #24]
    break;
 8003c20:	e108      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c22:	4b88      	ldr	r3, [pc, #544]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c2c:	4b85      	ldr	r3, [pc, #532]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c36:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c38:	4b82      	ldr	r3, [pc, #520]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c42:	4b80      	ldr	r3, [pc, #512]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c46:	08db      	lsrs	r3, r3, #3
 8003c48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80e1 	beq.w	8003e28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	f000 8083 	beq.w	8003d74 <HAL_RCC_GetSysClockFreq+0x204>
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	f200 80a1 	bhi.w	8003db8 <HAL_RCC_GetSysClockFreq+0x248>
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x114>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d056      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c82:	e099      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c84:	4b6f      	ldr	r3, [pc, #444]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02d      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c90:	4b6c      	ldr	r3, [pc, #432]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	08db      	lsrs	r3, r3, #3
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	4a6b      	ldr	r2, [pc, #428]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cba:	4b62      	ldr	r3, [pc, #392]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003cea:	e087      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfe:	4b51      	ldr	r3, [pc, #324]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d2e:	e065      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d42:	4b40      	ldr	r3, [pc, #256]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d72:	e043      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d86:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003db6:	e021      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dca:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dde:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dfa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	0a5b      	lsrs	r3, r3, #9
 8003e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e06:	3301      	adds	r3, #1
 8003e08:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e14:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e20:	ee17 3a90 	vmov	r3, s15
 8003e24:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003e26:	e005      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]
    break;
 8003e2c:	e002      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e30:	61bb      	str	r3, [r7, #24]
    break;
 8003e32:	bf00      	nop
  }

  return sysclockfreq;
 8003e34:	69bb      	ldr	r3, [r7, #24]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3724      	adds	r7, #36	; 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	58024400 	.word	0x58024400
 8003e48:	03d09000 	.word	0x03d09000
 8003e4c:	003d0900 	.word	0x003d0900
 8003e50:	007a1200 	.word	0x007a1200
 8003e54:	46000000 	.word	0x46000000
 8003e58:	4c742400 	.word	0x4c742400
 8003e5c:	4a742400 	.word	0x4a742400
 8003e60:	4af42400 	.word	0x4af42400

08003e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e6a:	f7ff fe81 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	0a1b      	lsrs	r3, r3, #8
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	490f      	ldr	r1, [pc, #60]	; (8003eb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e7c:	5ccb      	ldrb	r3, [r1, r3]
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	fa22 f303 	lsr.w	r3, r2, r3
 8003e86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	4a09      	ldr	r2, [pc, #36]	; (8003eb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9e:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <HAL_RCC_GetHCLKFreq+0x58>)
 8003ea0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ea2:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <HAL_RCC_GetHCLKFreq+0x58>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	0800a4b4 	.word	0x0800a4b4
 8003ebc:	24000004 	.word	0x24000004
 8003ec0:	24000000 	.word	0x24000000

08003ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003ec8:	f7ff ffcc 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4904      	ldr	r1, [pc, #16]	; (8003eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	0800a4b4 	.word	0x0800a4b4

08003ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ef4:	f7ff ffb6 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4904      	ldr	r1, [pc, #16]	; (8003f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	58024400 	.word	0x58024400
 8003f18:	0800a4b4 	.word	0x0800a4b4

08003f1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f24:	2300      	movs	r3, #0
 8003f26:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f28:	2300      	movs	r3, #0
 8003f2a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d03f      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f40:	d02a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f46:	d824      	bhi.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f4c:	d018      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f52:	d81e      	bhi.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f5c:	d007      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f5e:	e018      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f60:	4ba3      	ldr	r3, [pc, #652]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	4aa2      	ldr	r2, [pc, #648]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f6c:	e015      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3304      	adds	r3, #4
 8003f72:	2102      	movs	r1, #2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f001 f9d5 	bl	8005324 <RCCEx_PLL2_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f7e:	e00c      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3324      	adds	r3, #36	; 0x24
 8003f84:	2102      	movs	r1, #2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 fa7e 	bl	8005488 <RCCEx_PLL3_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f90:	e003      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75fb      	strb	r3, [r7, #23]
      break;
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d109      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003fa0:	4b93      	ldr	r3, [pc, #588]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fac:	4990      	ldr	r1, [pc, #576]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	650b      	str	r3, [r1, #80]	; 0x50
 8003fb2:	e001      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
 8003fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d03d      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d826      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003fe9 	.word	0x08003fe9
 8003fd8:	08003ff7 	.word	0x08003ff7
 8003fdc:	08004009 	.word	0x08004009
 8003fe0:	08004021 	.word	0x08004021
 8003fe4:	08004021 	.word	0x08004021
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe8:	4b81      	ldr	r3, [pc, #516]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	4a80      	ldr	r2, [pc, #512]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ff4:	e015      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 f991 	bl	8005324 <RCCEx_PLL2_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004006:	e00c      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3324      	adds	r3, #36	; 0x24
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f001 fa3a 	bl	8005488 <RCCEx_PLL3_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004018:	e003      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	75fb      	strb	r3, [r7, #23]
      break;
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004022:	7dfb      	ldrb	r3, [r7, #23]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004028:	4b71      	ldr	r3, [pc, #452]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800402a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402c:	f023 0207 	bic.w	r2, r3, #7
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	496e      	ldr	r1, [pc, #440]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004036:	4313      	orrs	r3, r2
 8004038:	650b      	str	r3, [r1, #80]	; 0x50
 800403a:	e001      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004048:	2b00      	cmp	r3, #0
 800404a:	d042      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004054:	d02b      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405a:	d825      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800405c:	2bc0      	cmp	r3, #192	; 0xc0
 800405e:	d028      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004060:	2bc0      	cmp	r3, #192	; 0xc0
 8004062:	d821      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004064:	2b80      	cmp	r3, #128	; 0x80
 8004066:	d016      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004068:	2b80      	cmp	r3, #128	; 0x80
 800406a:	d81d      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d007      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004074:	e018      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004076:	4b5e      	ldr	r3, [pc, #376]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	4a5d      	ldr	r2, [pc, #372]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800407c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004080:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004082:	e017      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f001 f94a 	bl	8005324 <RCCEx_PLL2_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004094:	e00e      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3324      	adds	r3, #36	; 0x24
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f001 f9f3 	bl	8005488 <RCCEx_PLL3_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80040a6:	e005      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	75fb      	strb	r3, [r7, #23]
      break;
 80040ac:	e002      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80040ae:	bf00      	nop
 80040b0:	e000      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80040b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80040ba:	4b4d      	ldr	r3, [pc, #308]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c6:	494a      	ldr	r1, [pc, #296]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	650b      	str	r3, [r1, #80]	; 0x50
 80040cc:	e001      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
 80040d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d049      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040e8:	d030      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80040ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ee:	d82a      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040f4:	d02c      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80040f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040fa:	d824      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004100:	d018      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004106:	d81e      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800410c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004110:	d007      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004112:	e018      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004114:	4b36      	ldr	r3, [pc, #216]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	4a35      	ldr	r2, [pc, #212]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800411a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004120:	e017      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3304      	adds	r3, #4
 8004126:	2100      	movs	r1, #0
 8004128:	4618      	mov	r0, r3
 800412a:	f001 f8fb 	bl	8005324 <RCCEx_PLL2_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004132:	e00e      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3324      	adds	r3, #36	; 0x24
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f001 f9a4 	bl	8005488 <RCCEx_PLL3_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004144:	e005      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	75fb      	strb	r3, [r7, #23]
      break;
 800414a:	e002      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800414c:	bf00      	nop
 800414e:	e000      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004152:	7dfb      	ldrb	r3, [r7, #23]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004158:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004166:	4922      	ldr	r1, [pc, #136]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004168:	4313      	orrs	r3, r2
 800416a:	658b      	str	r3, [r1, #88]	; 0x58
 800416c:	e001      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416e:	7dfb      	ldrb	r3, [r7, #23]
 8004170:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417a:	2b00      	cmp	r3, #0
 800417c:	d04b      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004184:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004188:	d030      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800418a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800418e:	d82a      	bhi.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004190:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004194:	d02e      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004196:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800419a:	d824      	bhi.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800419c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041a0:	d018      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80041a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041a6:	d81e      	bhi.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80041ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041b0:	d007      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80041b2:	e018      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b4:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	4a0d      	ldr	r2, [pc, #52]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041c0:	e019      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f001 f8ab 	bl	8005324 <RCCEx_PLL2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80041d2:	e010      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3324      	adds	r3, #36	; 0x24
 80041d8:	2100      	movs	r1, #0
 80041da:	4618      	mov	r0, r3
 80041dc:	f001 f954 	bl	8005488 <RCCEx_PLL3_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041e4:	e007      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
      break;
 80041ea:	e004      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80041ec:	bf00      	nop
 80041ee:	e002      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80041f0:	58024400 	.word	0x58024400
      break;
 80041f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80041fc:	4b99      	ldr	r3, [pc, #612]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800420a:	4996      	ldr	r1, [pc, #600]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800420c:	4313      	orrs	r3, r2
 800420e:	658b      	str	r3, [r1, #88]	; 0x58
 8004210:	e001      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004212:	7dfb      	ldrb	r3, [r7, #23]
 8004214:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d032      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004226:	2b30      	cmp	r3, #48	; 0x30
 8004228:	d01c      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800422a:	2b30      	cmp	r3, #48	; 0x30
 800422c:	d817      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800422e:	2b20      	cmp	r3, #32
 8004230:	d00c      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004232:	2b20      	cmp	r3, #32
 8004234:	d813      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004236:	2b00      	cmp	r3, #0
 8004238:	d016      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800423a:	2b10      	cmp	r3, #16
 800423c:	d10f      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423e:	4b89      	ldr	r3, [pc, #548]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	4a88      	ldr	r2, [pc, #544]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004248:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800424a:	e00e      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f866 	bl	8005324 <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800425c:	e005      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
      break;
 8004262:	e002      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004264:	bf00      	nop
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004270:	4b7c      	ldr	r3, [pc, #496]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004274:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427c:	4979      	ldr	r1, [pc, #484]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800427e:	4313      	orrs	r3, r2
 8004280:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004282:	e001      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d047      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800429c:	d030      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800429e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a2:	d82a      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80042a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042a8:	d02c      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80042aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042ae:	d824      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80042b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b4:	d018      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80042b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ba:	d81e      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c4:	d007      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80042c6:	e018      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c8:	4b66      	ldr	r3, [pc, #408]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	4a65      	ldr	r2, [pc, #404]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042d4:	e017      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3304      	adds	r3, #4
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 f821 	bl	8005324 <RCCEx_PLL2_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042e6:	e00e      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3324      	adds	r3, #36	; 0x24
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 f8ca 	bl	8005488 <RCCEx_PLL3_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042f8:	e005      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
      break;
 80042fe:	e002      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004300:	bf00      	nop
 8004302:	e000      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800430c:	4b55      	ldr	r3, [pc, #340]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800430e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004310:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	4952      	ldr	r1, [pc, #328]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800431a:	4313      	orrs	r3, r2
 800431c:	650b      	str	r3, [r1, #80]	; 0x50
 800431e:	e001      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d049      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004338:	d02e      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800433a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800433e:	d828      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004344:	d02a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800434a:	d822      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800434c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004350:	d026      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004352:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004356:	d81c      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800435c:	d010      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800435e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004362:	d816      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01d      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	d111      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3304      	adds	r3, #4
 8004372:	2101      	movs	r1, #1
 8004374:	4618      	mov	r0, r3
 8004376:	f000 ffd5 	bl	8005324 <RCCEx_PLL2_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800437e:	e012      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3324      	adds	r3, #36	; 0x24
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f001 f87e 	bl	8005488 <RCCEx_PLL3_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004390:	e009      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
      break;
 8004396:	e006      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004398:	bf00      	nop
 800439a:	e004      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800439c:	bf00      	nop
 800439e:	e002      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80043a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80043ac:	4b2d      	ldr	r3, [pc, #180]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80043ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b8:	492a      	ldr	r1, [pc, #168]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	650b      	str	r3, [r1, #80]	; 0x50
 80043be:	e001      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
 80043c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d04d      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043da:	d02e      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80043dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e0:	d828      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e6:	d02a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ec:	d822      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043f2:	d026      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80043f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043f8:	d81c      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043fe:	d010      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004404:	d816      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d01d      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800440a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800440e:	d111      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	2101      	movs	r1, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f000 ff84 	bl	8005324 <RCCEx_PLL2_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004420:	e012      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3324      	adds	r3, #36	; 0x24
 8004426:	2101      	movs	r1, #1
 8004428:	4618      	mov	r0, r3
 800442a:	f001 f82d 	bl	8005488 <RCCEx_PLL3_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004432:	e009      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	75fb      	strb	r3, [r7, #23]
      break;
 8004438:	e006      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800443a:	bf00      	nop
 800443c:	e004      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800443e:	bf00      	nop
 8004440:	e002      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004442:	bf00      	nop
 8004444:	e000      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004446:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10c      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800444e:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800445c:	4901      	ldr	r1, [pc, #4]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800445e:	4313      	orrs	r3, r2
 8004460:	658b      	str	r3, [r1, #88]	; 0x58
 8004462:	e003      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d02f      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004480:	d00e      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004486:	d814      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d015      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800448c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004490:	d10f      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004492:	4baf      	ldr	r3, [pc, #700]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	4aae      	ldr	r2, [pc, #696]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800449e:	e00c      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 ff3c 	bl	8005324 <RCCEx_PLL2_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80044b0:	e003      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	75fb      	strb	r3, [r7, #23]
      break;
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80044b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044c0:	4ba3      	ldr	r3, [pc, #652]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044cc:	49a0      	ldr	r1, [pc, #640]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	650b      	str	r3, [r1, #80]	; 0x50
 80044d2:	e001      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d032      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d81b      	bhi.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	08004505 	.word	0x08004505
 80044fc:	08004513 	.word	0x08004513
 8004500:	0800452b 	.word	0x0800452b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004504:	4b92      	ldr	r3, [pc, #584]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	4a91      	ldr	r2, [pc, #580]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800450a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004510:	e00c      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3304      	adds	r3, #4
 8004516:	2102      	movs	r1, #2
 8004518:	4618      	mov	r0, r3
 800451a:	f000 ff03 	bl	8005324 <RCCEx_PLL2_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004522:	e003      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
      break;
 8004528:	e000      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800452a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004532:	4b87      	ldr	r3, [pc, #540]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	4984      	ldr	r1, [pc, #528]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004540:	4313      	orrs	r3, r2
 8004542:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004544:	e001      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8086 	beq.w	8004664 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004558:	4b7e      	ldr	r3, [pc, #504]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a7d      	ldr	r2, [pc, #500]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800455e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004562:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004564:	f7fd f926 	bl	80017b4 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800456a:	e009      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456c:	f7fd f922 	bl	80017b4 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d902      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	75fb      	strb	r3, [r7, #23]
        break;
 800457e:	e005      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004580:	4b74      	ldr	r3, [pc, #464]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ef      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d166      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004592:	4b6f      	ldr	r3, [pc, #444]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004594:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800459c:	4053      	eors	r3, r2
 800459e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d013      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a6:	4b6a      	ldr	r3, [pc, #424]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045b0:	4b67      	ldr	r3, [pc, #412]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b4:	4a66      	ldr	r2, [pc, #408]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045bc:	4b64      	ldr	r3, [pc, #400]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	4a63      	ldr	r2, [pc, #396]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045c8:	4a61      	ldr	r2, [pc, #388]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d8:	d115      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7fd f8eb 	bl	80017b4 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045e0:	e00b      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fd f8e7 	bl	80017b4 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d902      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	75fb      	strb	r3, [r7, #23]
            break;
 80045f8:	e005      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045fa:	4b55      	ldr	r3, [pc, #340]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0ed      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004606:	7dfb      	ldrb	r3, [r7, #23]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d126      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800461a:	d10d      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800461c:	4b4c      	ldr	r3, [pc, #304]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800462a:	0919      	lsrs	r1, r3, #4
 800462c:	4b4a      	ldr	r3, [pc, #296]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800462e:	400b      	ands	r3, r1
 8004630:	4947      	ldr	r1, [pc, #284]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004632:	4313      	orrs	r3, r2
 8004634:	610b      	str	r3, [r1, #16]
 8004636:	e005      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004638:	4b45      	ldr	r3, [pc, #276]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	4a44      	ldr	r2, [pc, #272]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800463e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004642:	6113      	str	r3, [r2, #16]
 8004644:	4b42      	ldr	r3, [pc, #264]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004646:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800464e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004652:	493f      	ldr	r1, [pc, #252]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004654:	4313      	orrs	r3, r2
 8004656:	670b      	str	r3, [r1, #112]	; 0x70
 8004658:	e004      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	75bb      	strb	r3, [r7, #22]
 800465e:	e001      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8085 	beq.w	800477c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004676:	2b28      	cmp	r3, #40	; 0x28
 8004678:	d866      	bhi.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	0800475d 	.word	0x0800475d
 8004684:	08004749 	.word	0x08004749
 8004688:	08004749 	.word	0x08004749
 800468c:	08004749 	.word	0x08004749
 8004690:	08004749 	.word	0x08004749
 8004694:	08004749 	.word	0x08004749
 8004698:	08004749 	.word	0x08004749
 800469c:	08004749 	.word	0x08004749
 80046a0:	08004725 	.word	0x08004725
 80046a4:	08004749 	.word	0x08004749
 80046a8:	08004749 	.word	0x08004749
 80046ac:	08004749 	.word	0x08004749
 80046b0:	08004749 	.word	0x08004749
 80046b4:	08004749 	.word	0x08004749
 80046b8:	08004749 	.word	0x08004749
 80046bc:	08004749 	.word	0x08004749
 80046c0:	08004737 	.word	0x08004737
 80046c4:	08004749 	.word	0x08004749
 80046c8:	08004749 	.word	0x08004749
 80046cc:	08004749 	.word	0x08004749
 80046d0:	08004749 	.word	0x08004749
 80046d4:	08004749 	.word	0x08004749
 80046d8:	08004749 	.word	0x08004749
 80046dc:	08004749 	.word	0x08004749
 80046e0:	0800475d 	.word	0x0800475d
 80046e4:	08004749 	.word	0x08004749
 80046e8:	08004749 	.word	0x08004749
 80046ec:	08004749 	.word	0x08004749
 80046f0:	08004749 	.word	0x08004749
 80046f4:	08004749 	.word	0x08004749
 80046f8:	08004749 	.word	0x08004749
 80046fc:	08004749 	.word	0x08004749
 8004700:	0800475d 	.word	0x0800475d
 8004704:	08004749 	.word	0x08004749
 8004708:	08004749 	.word	0x08004749
 800470c:	08004749 	.word	0x08004749
 8004710:	08004749 	.word	0x08004749
 8004714:	08004749 	.word	0x08004749
 8004718:	08004749 	.word	0x08004749
 800471c:	08004749 	.word	0x08004749
 8004720:	0800475d 	.word	0x0800475d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	2101      	movs	r1, #1
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fdfa 	bl	8005324 <RCCEx_PLL2_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004734:	e013      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3324      	adds	r3, #36	; 0x24
 800473a:	2101      	movs	r1, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fea3 	bl	8005488 <RCCEx_PLL3_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004746:	e00a      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	75fb      	strb	r3, [r7, #23]
      break;
 800474c:	e007      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800474e:	bf00      	nop
 8004750:	58024400 	.word	0x58024400
 8004754:	58024800 	.word	0x58024800
 8004758:	00ffffcf 	.word	0x00ffffcf
      break;
 800475c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800475e:	7dfb      	ldrb	r3, [r7, #23]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004764:	4b96      	ldr	r3, [pc, #600]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004770:	4993      	ldr	r1, [pc, #588]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004772:	4313      	orrs	r3, r2
 8004774:	654b      	str	r3, [r1, #84]	; 0x54
 8004776:	e001      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	7dfb      	ldrb	r3, [r7, #23]
 800477a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d038      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478c:	2b05      	cmp	r3, #5
 800478e:	d821      	bhi.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004790:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080047db 	.word	0x080047db
 800479c:	080047b1 	.word	0x080047b1
 80047a0:	080047c3 	.word	0x080047c3
 80047a4:	080047db 	.word	0x080047db
 80047a8:	080047db 	.word	0x080047db
 80047ac:	080047db 	.word	0x080047db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	2101      	movs	r1, #1
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fdb4 	bl	8005324 <RCCEx_PLL2_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80047c0:	e00c      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3324      	adds	r3, #36	; 0x24
 80047c6:	2101      	movs	r1, #1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fe5d 	bl	8005488 <RCCEx_PLL3_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80047d2:	e003      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	75fb      	strb	r3, [r7, #23]
      break;
 80047d8:	e000      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80047da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80047e2:	4b77      	ldr	r3, [pc, #476]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80047e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e6:	f023 0207 	bic.w	r2, r3, #7
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ee:	4974      	ldr	r1, [pc, #464]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	654b      	str	r3, [r1, #84]	; 0x54
 80047f4:	e001      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
 80047f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	d03a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	2b05      	cmp	r3, #5
 800480e:	d821      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004810:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004816:	bf00      	nop
 8004818:	0800485b 	.word	0x0800485b
 800481c:	08004831 	.word	0x08004831
 8004820:	08004843 	.word	0x08004843
 8004824:	0800485b 	.word	0x0800485b
 8004828:	0800485b 	.word	0x0800485b
 800482c:	0800485b 	.word	0x0800485b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	2101      	movs	r1, #1
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fd74 	bl	8005324 <RCCEx_PLL2_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004840:	e00c      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3324      	adds	r3, #36	; 0x24
 8004846:	2101      	movs	r1, #1
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fe1d 	bl	8005488 <RCCEx_PLL3_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004852:	e003      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	75fb      	strb	r3, [r7, #23]
      break;
 8004858:	e000      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800485a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485c:	7dfb      	ldrb	r3, [r7, #23]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004862:	4b57      	ldr	r3, [pc, #348]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004866:	f023 0207 	bic.w	r2, r3, #7
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004870:	4953      	ldr	r1, [pc, #332]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	658b      	str	r3, [r1, #88]	; 0x58
 8004876:	e001      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d04b      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800488e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004892:	d02e      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004898:	d828      	bhi.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489e:	d02a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a4:	d822      	bhi.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80048a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048aa:	d026      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80048ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048b0:	d81c      	bhi.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80048b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048b6:	d010      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80048b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048bc:	d816      	bhi.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d01d      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80048c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048c6:	d111      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	2100      	movs	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fd28 	bl	8005324 <RCCEx_PLL2_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80048d8:	e012      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3324      	adds	r3, #36	; 0x24
 80048de:	2102      	movs	r1, #2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fdd1 	bl	8005488 <RCCEx_PLL3_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80048ea:	e009      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	75fb      	strb	r3, [r7, #23]
      break;
 80048f0:	e006      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048f2:	bf00      	nop
 80048f4:	e004      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048f6:	bf00      	nop
 80048f8:	e002      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048fa:	bf00      	nop
 80048fc:	e000      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004900:	7dfb      	ldrb	r3, [r7, #23]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004906:	4b2e      	ldr	r3, [pc, #184]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004914:	492a      	ldr	r1, [pc, #168]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004916:	4313      	orrs	r3, r2
 8004918:	654b      	str	r3, [r1, #84]	; 0x54
 800491a:	e001      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d04d      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004932:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004936:	d02e      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004938:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800493c:	d828      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800493e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004942:	d02a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004948:	d822      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800494a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800494e:	d026      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004950:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004954:	d81c      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495a:	d010      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800495c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004960:	d816      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01d      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496a:	d111      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fcd6 	bl	8005324 <RCCEx_PLL2_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800497c:	e012      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3324      	adds	r3, #36	; 0x24
 8004982:	2102      	movs	r1, #2
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fd7f 	bl	8005488 <RCCEx_PLL3_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800498e:	e009      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	75fb      	strb	r3, [r7, #23]
      break;
 8004994:	e006      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004996:	bf00      	nop
 8004998:	e004      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800499a:	bf00      	nop
 800499c:	e002      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80049a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049b8:	4901      	ldr	r1, [pc, #4]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	658b      	str	r3, [r1, #88]	; 0x58
 80049be:	e003      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80049c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d04b      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80049de:	d02e      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80049e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80049e4:	d828      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ea:	d02a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80049ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f0:	d822      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049f6:	d026      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80049f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049fc:	d81c      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a02:	d010      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004a04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a08:	d816      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01d      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a12:	d111      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fc82 	bl	8005324 <RCCEx_PLL2_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004a24:	e012      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3324      	adds	r3, #36	; 0x24
 8004a2a:	2102      	movs	r1, #2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fd2b 	bl	8005488 <RCCEx_PLL3_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004a36:	e009      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a3c:	e006      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a3e:	bf00      	nop
 8004a40:	e004      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a52:	4b9d      	ldr	r3, [pc, #628]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a60:	4999      	ldr	r1, [pc, #612]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	658b      	str	r3, [r1, #88]	; 0x58
 8004a66:	e001      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
 8004a6a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a82:	d10a      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3324      	adds	r3, #36	; 0x24
 8004a88:	2102      	movs	r1, #2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fcfc 	bl	8005488 <RCCEx_PLL3_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a9a:	4b8b      	ldr	r3, [pc, #556]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aa8:	4987      	ldr	r1, [pc, #540]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01a      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac4:	d10a      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3324      	adds	r3, #36	; 0x24
 8004aca:	2102      	movs	r1, #2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fcdb 	bl	8005488 <RCCEx_PLL3_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004adc:	4b7a      	ldr	r3, [pc, #488]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aea:	4977      	ldr	r1, [pc, #476]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d034      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b06:	d01d      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0c:	d817      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b16:	d009      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004b18:	e011      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fbff 	bl	8005324 <RCCEx_PLL2_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004b2a:	e00c      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3324      	adds	r3, #36	; 0x24
 8004b30:	2102      	movs	r1, #2
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fca8 	bl	8005488 <RCCEx_PLL3_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004b3c:	e003      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	75fb      	strb	r3, [r7, #23]
      break;
 8004b42:	e000      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b4c:	4b5e      	ldr	r3, [pc, #376]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b5a:	495b      	ldr	r1, [pc, #364]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	658b      	str	r3, [r1, #88]	; 0x58
 8004b60:	e001      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
 8004b64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d033      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b7c:	d01c      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004b7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b82:	d816      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b88:	d003      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004b8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b8e:	d007      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004b90:	e00f      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b92:	4b4d      	ldr	r3, [pc, #308]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	4a4c      	ldr	r2, [pc, #304]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b9e:	e00c      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3324      	adds	r3, #36	; 0x24
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fc6e 	bl	8005488 <RCCEx_PLL3_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004bb0:	e003      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb6:	e000      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bc0:	4b41      	ldr	r3, [pc, #260]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bce:	493e      	ldr	r1, [pc, #248]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	654b      	str	r3, [r1, #84]	; 0x54
 8004bd4:	e001      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
 8004bd8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d029      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf2:	d007      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004bf4:	e00f      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf6:	4b34      	ldr	r3, [pc, #208]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	4a33      	ldr	r2, [pc, #204]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c02:	e00b      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fb8a 	bl	8005324 <RCCEx_PLL2_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c14:	e002      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c22:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	4926      	ldr	r1, [pc, #152]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c34:	e001      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3324      	adds	r3, #36	; 0x24
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fc1b 	bl	8005488 <RCCEx_PLL3_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d033      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c70:	d017      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c76:	d811      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7c:	d013      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c82:	d80b      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d010      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c8c:	d106      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	4a0d      	ldr	r2, [pc, #52]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004c9a:	e007      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca0:	e004      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e002      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cbe:	4902      	ldr	r1, [pc, #8]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	654b      	str	r3, [r1, #84]	; 0x54
 8004cc4:	e004      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004cc6:	bf00      	nop
 8004cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cdc:	4b31      	ldr	r3, [pc, #196]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce8:	492e      	ldr	r1, [pc, #184]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004cfa:	4b2a      	ldr	r3, [pc, #168]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d08:	4926      	ldr	r1, [pc, #152]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d008      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d1a:	4b22      	ldr	r3, [pc, #136]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d26:	491f      	ldr	r1, [pc, #124]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00d      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d38:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	4a19      	ldr	r2, [pc, #100]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d42:	6113      	str	r3, [r2, #16]
 8004d44:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d4e:	4915      	ldr	r1, [pc, #84]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	da08      	bge.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d5c:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d68:	490e      	ldr	r1, [pc, #56]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d88:	4906      	ldr	r1, [pc, #24]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004d8e:	7dbb      	ldrb	r3, [r7, #22]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e000      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	58024400 	.word	0x58024400

08004da8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004dac:	f7ff f85a 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	4904      	ldr	r1, [pc, #16]	; (8004dd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004dbe:	5ccb      	ldrb	r3, [r1, r3]
 8004dc0:	f003 031f 	and.w	r3, r3, #31
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	58024400 	.word	0x58024400
 8004dd0:	0800a4b4 	.word	0x0800a4b4

08004dd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b089      	sub	sp, #36	; 0x24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ddc:	4ba1      	ldr	r3, [pc, #644]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004de6:	4b9f      	ldr	r3, [pc, #636]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	0b1b      	lsrs	r3, r3, #12
 8004dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004df2:	4b9c      	ldr	r3, [pc, #624]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004dfe:	4b99      	ldr	r3, [pc, #612]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	08db      	lsrs	r3, r3, #3
 8004e04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	fb02 f303 	mul.w	r3, r2, r3
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8111 	beq.w	8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	f000 8083 	beq.w	8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	f200 80a1 	bhi.w	8004f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d056      	beq.n	8004eec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e3e:	e099      	b.n	8004f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e40:	4b88      	ldr	r3, [pc, #544]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02d      	beq.n	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e4c:	4b85      	ldr	r3, [pc, #532]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	08db      	lsrs	r3, r3, #3
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	4a84      	ldr	r2, [pc, #528]	; (8005068 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	ee07 3a90 	vmov	s15, r3
 8004e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e76:	4b7b      	ldr	r3, [pc, #492]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800506c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ea6:	e087      	b.n	8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005070 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eba:	4b6a      	ldr	r3, [pc, #424]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ece:	eddf 5a67 	vldr	s11, [pc, #412]	; 800506c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eea:	e065      	b.n	8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efe:	4b59      	ldr	r3, [pc, #356]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800506c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f2e:	e043      	b.n	8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005078 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f42:	4b48      	ldr	r3, [pc, #288]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800506c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f72:	e021      	b.n	8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f86:	4b37      	ldr	r3, [pc, #220]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800506c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004fb8:	4b2a      	ldr	r3, [pc, #168]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	0a5b      	lsrs	r3, r3, #9
 8004fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fde:	ee17 2a90 	vmov	r2, s15
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004fe6:	4b1f      	ldr	r3, [pc, #124]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	0c1b      	lsrs	r3, r3, #16
 8004fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff0:	ee07 3a90 	vmov	s15, r3
 8004ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005000:	edd7 6a07 	vldr	s13, [r7, #28]
 8005004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800500c:	ee17 2a90 	vmov	r2, s15
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005014:	4b13      	ldr	r3, [pc, #76]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	0e1b      	lsrs	r3, r3, #24
 800501a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800502a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800502e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800503a:	ee17 2a90 	vmov	r2, s15
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005042:	e008      	b.n	8005056 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	609a      	str	r2, [r3, #8]
}
 8005056:	bf00      	nop
 8005058:	3724      	adds	r7, #36	; 0x24
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	58024400 	.word	0x58024400
 8005068:	03d09000 	.word	0x03d09000
 800506c:	46000000 	.word	0x46000000
 8005070:	4c742400 	.word	0x4c742400
 8005074:	4a742400 	.word	0x4a742400
 8005078:	4af42400 	.word	0x4af42400

0800507c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800507c:	b480      	push	{r7}
 800507e:	b089      	sub	sp, #36	; 0x24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005084:	4ba1      	ldr	r3, [pc, #644]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800508e:	4b9f      	ldr	r3, [pc, #636]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	0d1b      	lsrs	r3, r3, #20
 8005094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005098:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800509a:	4b9c      	ldr	r3, [pc, #624]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80050a6:	4b99      	ldr	r3, [pc, #612]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	08db      	lsrs	r3, r3, #3
 80050ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8111 	beq.w	80052ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	f000 8083 	beq.w	80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	f200 80a1 	bhi.w	800521c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d056      	beq.n	8005194 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050e6:	e099      	b.n	800521c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050e8:	4b88      	ldr	r3, [pc, #544]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d02d      	beq.n	8005150 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050f4:	4b85      	ldr	r3, [pc, #532]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	08db      	lsrs	r3, r3, #3
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	4a84      	ldr	r2, [pc, #528]	; (8005310 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
 8005104:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	ee07 3a90 	vmov	s15, r3
 800510c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511e:	4b7b      	ldr	r3, [pc, #492]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005132:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800514e:	e087      	b.n	8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005318 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	4b6a      	ldr	r3, [pc, #424]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005172:	ed97 6a03 	vldr	s12, [r7, #12]
 8005176:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800517a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005192:	e065      	b.n	8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800531c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a6:	4b59      	ldr	r3, [pc, #356]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051d6:	e043      	b.n	8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005320 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ea:	4b48      	ldr	r3, [pc, #288]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80051fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800521a:	e021      	b.n	8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005226:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800531c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800522a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522e:	4b37      	ldr	r3, [pc, #220]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005242:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800525e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005260:	4b2a      	ldr	r3, [pc, #168]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	0a5b      	lsrs	r3, r3, #9
 8005266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800527a:	edd7 6a07 	vldr	s13, [r7, #28]
 800527e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005286:	ee17 2a90 	vmov	r2, s15
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800528e:	4b1f      	ldr	r3, [pc, #124]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	0c1b      	lsrs	r3, r3, #16
 8005294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005298:	ee07 3a90 	vmov	s15, r3
 800529c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b4:	ee17 2a90 	vmov	r2, s15
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80052bc:	4b13      	ldr	r3, [pc, #76]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	0e1b      	lsrs	r3, r3, #24
 80052c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80052da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052e2:	ee17 2a90 	vmov	r2, s15
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80052ea:	e008      	b.n	80052fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	609a      	str	r2, [r3, #8]
}
 80052fe:	bf00      	nop
 8005300:	3724      	adds	r7, #36	; 0x24
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	58024400 	.word	0x58024400
 8005310:	03d09000 	.word	0x03d09000
 8005314:	46000000 	.word	0x46000000
 8005318:	4c742400 	.word	0x4c742400
 800531c:	4a742400 	.word	0x4a742400
 8005320:	4af42400 	.word	0x4af42400

08005324 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005332:	4b53      	ldr	r3, [pc, #332]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	2b03      	cmp	r3, #3
 800533c:	d101      	bne.n	8005342 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e099      	b.n	8005476 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005342:	4b4f      	ldr	r3, [pc, #316]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a4e      	ldr	r2, [pc, #312]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 8005348:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800534c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800534e:	f7fc fa31 	bl	80017b4 <HAL_GetTick>
 8005352:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005354:	e008      	b.n	8005368 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005356:	f7fc fa2d 	bl	80017b4 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e086      	b.n	8005476 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005368:	4b45      	ldr	r3, [pc, #276]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1f0      	bne.n	8005356 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005374:	4b42      	ldr	r3, [pc, #264]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	031b      	lsls	r3, r3, #12
 8005382:	493f      	ldr	r1, [pc, #252]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 8005384:	4313      	orrs	r3, r2
 8005386:	628b      	str	r3, [r1, #40]	; 0x28
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	3b01      	subs	r3, #1
 800538e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	3b01      	subs	r3, #1
 8005398:	025b      	lsls	r3, r3, #9
 800539a:	b29b      	uxth	r3, r3
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	3b01      	subs	r3, #1
 80053b2:	061b      	lsls	r3, r3, #24
 80053b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80053b8:	4931      	ldr	r1, [pc, #196]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80053be:	4b30      	ldr	r3, [pc, #192]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	492d      	ldr	r1, [pc, #180]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80053d0:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	f023 0220 	bic.w	r2, r3, #32
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	4928      	ldr	r1, [pc, #160]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80053e2:	4b27      	ldr	r3, [pc, #156]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	4a26      	ldr	r2, [pc, #152]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 80053e8:	f023 0310 	bic.w	r3, r3, #16
 80053ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053ee:	4b24      	ldr	r3, [pc, #144]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 80053f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053f2:	4b24      	ldr	r3, [pc, #144]	; (8005484 <RCCEx_PLL2_Config+0x160>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	69d2      	ldr	r2, [r2, #28]
 80053fa:	00d2      	lsls	r2, r2, #3
 80053fc:	4920      	ldr	r1, [pc, #128]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005402:	4b1f      	ldr	r3, [pc, #124]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 8005408:	f043 0310 	orr.w	r3, r3, #16
 800540c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d106      	bne.n	8005422 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005414:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	4a19      	ldr	r2, [pc, #100]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 800541a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800541e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005420:	e00f      	b.n	8005442 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d106      	bne.n	8005436 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005428:	4b15      	ldr	r3, [pc, #84]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	4a14      	ldr	r2, [pc, #80]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 800542e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005432:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005434:	e005      	b.n	8005442 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	4a11      	ldr	r2, [pc, #68]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 800543c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005440:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005442:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a0e      	ldr	r2, [pc, #56]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 8005448:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800544c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544e:	f7fc f9b1 	bl	80017b4 <HAL_GetTick>
 8005452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005454:	e008      	b.n	8005468 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005456:	f7fc f9ad 	bl	80017b4 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e006      	b.n	8005476 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <RCCEx_PLL2_Config+0x15c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0f0      	beq.n	8005456 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	58024400 	.word	0x58024400
 8005484:	ffff0007 	.word	0xffff0007

08005488 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005496:	4b53      	ldr	r3, [pc, #332]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d101      	bne.n	80054a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e099      	b.n	80055da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80054a6:	4b4f      	ldr	r3, [pc, #316]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a4e      	ldr	r2, [pc, #312]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 80054ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b2:	f7fc f97f 	bl	80017b4 <HAL_GetTick>
 80054b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054b8:	e008      	b.n	80054cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80054ba:	f7fc f97b 	bl	80017b4 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e086      	b.n	80055da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054cc:	4b45      	ldr	r3, [pc, #276]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f0      	bne.n	80054ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80054d8:	4b42      	ldr	r3, [pc, #264]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	051b      	lsls	r3, r3, #20
 80054e6:	493f      	ldr	r1, [pc, #252]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	628b      	str	r3, [r1, #40]	; 0x28
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	025b      	lsls	r3, r3, #9
 80054fe:	b29b      	uxth	r3, r3
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	3b01      	subs	r3, #1
 8005508:	041b      	lsls	r3, r3, #16
 800550a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	3b01      	subs	r3, #1
 8005516:	061b      	lsls	r3, r3, #24
 8005518:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800551c:	4931      	ldr	r1, [pc, #196]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 800551e:	4313      	orrs	r3, r2
 8005520:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005522:	4b30      	ldr	r3, [pc, #192]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	492d      	ldr	r1, [pc, #180]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 8005530:	4313      	orrs	r3, r2
 8005532:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005534:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	4928      	ldr	r1, [pc, #160]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 8005542:	4313      	orrs	r3, r2
 8005544:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005546:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	4a26      	ldr	r2, [pc, #152]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 800554c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005550:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005552:	4b24      	ldr	r3, [pc, #144]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 8005554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <RCCEx_PLL3_Config+0x160>)
 8005558:	4013      	ands	r3, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	69d2      	ldr	r2, [r2, #28]
 800555e:	00d2      	lsls	r2, r2, #3
 8005560:	4920      	ldr	r1, [pc, #128]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 8005562:	4313      	orrs	r3, r2
 8005564:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005566:	4b1f      	ldr	r3, [pc, #124]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 800556c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d106      	bne.n	8005586 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005578:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 800557e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005582:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005584:	e00f      	b.n	80055a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d106      	bne.n	800559a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800558c:	4b15      	ldr	r3, [pc, #84]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	4a14      	ldr	r2, [pc, #80]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 8005592:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005598:	e005      	b.n	80055a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800559a:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	4a11      	ldr	r2, [pc, #68]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 80055a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80055a6:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a0e      	ldr	r2, [pc, #56]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 80055ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b2:	f7fc f8ff 	bl	80017b4 <HAL_GetTick>
 80055b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055b8:	e008      	b.n	80055cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80055ba:	f7fc f8fb 	bl	80017b4 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e006      	b.n	80055da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <RCCEx_PLL3_Config+0x15c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	58024400 	.word	0x58024400
 80055e8:	ffff0007 	.word	0xffff0007

080055ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e049      	b.n	8005692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fb fe10 	bl	8001238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f000 fa7e 	bl	8005b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d122      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d11b      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f06f 0202 	mvn.w	r2, #2
 80056c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	f003 0303 	and.w	r3, r3, #3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fa07 	bl	8005af0 <HAL_TIM_IC_CaptureCallback>
 80056e2:	e005      	b.n	80056f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f9f9 	bl	8005adc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa0a 	bl	8005b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b04      	cmp	r3, #4
 8005702:	d122      	bne.n	800574a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b04      	cmp	r3, #4
 8005710:	d11b      	bne.n	800574a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f06f 0204 	mvn.w	r2, #4
 800571a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f9dd 	bl	8005af0 <HAL_TIM_IC_CaptureCallback>
 8005736:	e005      	b.n	8005744 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f9cf 	bl	8005adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f9e0 	bl	8005b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b08      	cmp	r3, #8
 8005756:	d122      	bne.n	800579e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b08      	cmp	r3, #8
 8005764:	d11b      	bne.n	800579e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f06f 0208 	mvn.w	r2, #8
 800576e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2204      	movs	r2, #4
 8005774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f9b3 	bl	8005af0 <HAL_TIM_IC_CaptureCallback>
 800578a:	e005      	b.n	8005798 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f9a5 	bl	8005adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f9b6 	bl	8005b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d122      	bne.n	80057f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	2b10      	cmp	r3, #16
 80057b8:	d11b      	bne.n	80057f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f06f 0210 	mvn.w	r2, #16
 80057c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2208      	movs	r2, #8
 80057c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f989 	bl	8005af0 <HAL_TIM_IC_CaptureCallback>
 80057de:	e005      	b.n	80057ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f97b 	bl	8005adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f98c 	bl	8005b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d10e      	bne.n	800581e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b01      	cmp	r3, #1
 800580c:	d107      	bne.n	800581e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f06f 0201 	mvn.w	r2, #1
 8005816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f955 	bl	8005ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005828:	2b80      	cmp	r3, #128	; 0x80
 800582a:	d10e      	bne.n	800584a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	2b80      	cmp	r3, #128	; 0x80
 8005838:	d107      	bne.n	800584a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fb41 	bl	8005ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005858:	d10e      	bne.n	8005878 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005864:	2b80      	cmp	r3, #128	; 0x80
 8005866:	d107      	bne.n	8005878 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fb34 	bl	8005ee0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d10e      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d107      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800589c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f93a 	bl	8005b18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d10e      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d107      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0220 	mvn.w	r2, #32
 80058c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 faf4 	bl	8005eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058d0:	bf00      	nop
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_TIM_ConfigClockSource+0x1c>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e0dc      	b.n	8005aae <HAL_TIM_ConfigClockSource+0x1d6>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	4b6a      	ldr	r3, [pc, #424]	; (8005ab8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005910:	4013      	ands	r3, r2
 8005912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800591a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a64      	ldr	r2, [pc, #400]	; (8005abc <HAL_TIM_ConfigClockSource+0x1e4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	f000 80a9 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005930:	4a62      	ldr	r2, [pc, #392]	; (8005abc <HAL_TIM_ConfigClockSource+0x1e4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	f200 80ae 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005938:	4a61      	ldr	r2, [pc, #388]	; (8005ac0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	f000 80a1 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005940:	4a5f      	ldr	r2, [pc, #380]	; (8005ac0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	f200 80a6 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005948:	4a5e      	ldr	r2, [pc, #376]	; (8005ac4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800594a:	4293      	cmp	r3, r2
 800594c:	f000 8099 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005950:	4a5c      	ldr	r2, [pc, #368]	; (8005ac4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005952:	4293      	cmp	r3, r2
 8005954:	f200 809e 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005958:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800595c:	f000 8091 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005960:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005964:	f200 8096 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800596c:	f000 8089 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005974:	f200 808e 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597c:	d03e      	beq.n	80059fc <HAL_TIM_ConfigClockSource+0x124>
 800597e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005982:	f200 8087 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598a:	f000 8086 	beq.w	8005a9a <HAL_TIM_ConfigClockSource+0x1c2>
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005992:	d87f      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005994:	2b70      	cmp	r3, #112	; 0x70
 8005996:	d01a      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0xf6>
 8005998:	2b70      	cmp	r3, #112	; 0x70
 800599a:	d87b      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 800599c:	2b60      	cmp	r3, #96	; 0x60
 800599e:	d050      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x16a>
 80059a0:	2b60      	cmp	r3, #96	; 0x60
 80059a2:	d877      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 80059a4:	2b50      	cmp	r3, #80	; 0x50
 80059a6:	d03c      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0x14a>
 80059a8:	2b50      	cmp	r3, #80	; 0x50
 80059aa:	d873      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d058      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x18a>
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d86f      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 80059b4:	2b30      	cmp	r3, #48	; 0x30
 80059b6:	d064      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x1aa>
 80059b8:	2b30      	cmp	r3, #48	; 0x30
 80059ba:	d86b      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d060      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x1aa>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d867      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d05c      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x1aa>
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d05a      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x1aa>
 80059cc:	e062      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6899      	ldr	r1, [r3, #8]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f000 f9bd 	bl	8005d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	609a      	str	r2, [r3, #8]
      break;
 80059fa:	e04f      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	6899      	ldr	r1, [r3, #8]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f000 f9a6 	bl	8005d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a1e:	609a      	str	r2, [r3, #8]
      break;
 8005a20:	e03c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f000 f916 	bl	8005c60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2150      	movs	r1, #80	; 0x50
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 f970 	bl	8005d20 <TIM_ITRx_SetConfig>
      break;
 8005a40:	e02c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6818      	ldr	r0, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6859      	ldr	r1, [r3, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f000 f935 	bl	8005cbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2160      	movs	r1, #96	; 0x60
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 f960 	bl	8005d20 <TIM_ITRx_SetConfig>
      break;
 8005a60:	e01c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6859      	ldr	r1, [r3, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f000 f8f6 	bl	8005c60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2140      	movs	r1, #64	; 0x40
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f950 	bl	8005d20 <TIM_ITRx_SetConfig>
      break;
 8005a80:	e00c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	f000 f947 	bl	8005d20 <TIM_ITRx_SetConfig>
      break;
 8005a92:	e003      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	73fb      	strb	r3, [r7, #15]
      break;
 8005a98:	e000      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	ffceff88 	.word	0xffceff88
 8005abc:	00100040 	.word	0x00100040
 8005ac0:	00100030 	.word	0x00100030
 8005ac4:	00100020 	.word	0x00100020

08005ac8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a40      	ldr	r2, [pc, #256]	; (8005c40 <TIM_Base_SetConfig+0x114>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d013      	beq.n	8005b6c <TIM_Base_SetConfig+0x40>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4a:	d00f      	beq.n	8005b6c <TIM_Base_SetConfig+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a3d      	ldr	r2, [pc, #244]	; (8005c44 <TIM_Base_SetConfig+0x118>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00b      	beq.n	8005b6c <TIM_Base_SetConfig+0x40>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a3c      	ldr	r2, [pc, #240]	; (8005c48 <TIM_Base_SetConfig+0x11c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d007      	beq.n	8005b6c <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a3b      	ldr	r2, [pc, #236]	; (8005c4c <TIM_Base_SetConfig+0x120>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a3a      	ldr	r2, [pc, #232]	; (8005c50 <TIM_Base_SetConfig+0x124>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d108      	bne.n	8005b7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a2f      	ldr	r2, [pc, #188]	; (8005c40 <TIM_Base_SetConfig+0x114>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01f      	beq.n	8005bc6 <TIM_Base_SetConfig+0x9a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8c:	d01b      	beq.n	8005bc6 <TIM_Base_SetConfig+0x9a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a2c      	ldr	r2, [pc, #176]	; (8005c44 <TIM_Base_SetConfig+0x118>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d017      	beq.n	8005bc6 <TIM_Base_SetConfig+0x9a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2b      	ldr	r2, [pc, #172]	; (8005c48 <TIM_Base_SetConfig+0x11c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <TIM_Base_SetConfig+0x9a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2a      	ldr	r2, [pc, #168]	; (8005c4c <TIM_Base_SetConfig+0x120>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00f      	beq.n	8005bc6 <TIM_Base_SetConfig+0x9a>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a29      	ldr	r2, [pc, #164]	; (8005c50 <TIM_Base_SetConfig+0x124>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00b      	beq.n	8005bc6 <TIM_Base_SetConfig+0x9a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a28      	ldr	r2, [pc, #160]	; (8005c54 <TIM_Base_SetConfig+0x128>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d007      	beq.n	8005bc6 <TIM_Base_SetConfig+0x9a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a27      	ldr	r2, [pc, #156]	; (8005c58 <TIM_Base_SetConfig+0x12c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_Base_SetConfig+0x9a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a26      	ldr	r2, [pc, #152]	; (8005c5c <TIM_Base_SetConfig+0x130>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d108      	bne.n	8005bd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a10      	ldr	r2, [pc, #64]	; (8005c40 <TIM_Base_SetConfig+0x114>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00f      	beq.n	8005c24 <TIM_Base_SetConfig+0xf8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a12      	ldr	r2, [pc, #72]	; (8005c50 <TIM_Base_SetConfig+0x124>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <TIM_Base_SetConfig+0xf8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a11      	ldr	r2, [pc, #68]	; (8005c54 <TIM_Base_SetConfig+0x128>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_Base_SetConfig+0xf8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a10      	ldr	r2, [pc, #64]	; (8005c58 <TIM_Base_SetConfig+0x12c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_Base_SetConfig+0xf8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a0f      	ldr	r2, [pc, #60]	; (8005c5c <TIM_Base_SetConfig+0x130>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d103      	bne.n	8005c2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	615a      	str	r2, [r3, #20]
}
 8005c32:	bf00      	nop
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40000400 	.word	0x40000400
 8005c48:	40000800 	.word	0x40000800
 8005c4c:	40000c00 	.word	0x40000c00
 8005c50:	40010400 	.word	0x40010400
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014400 	.word	0x40014400
 8005c5c:	40014800 	.word	0x40014800

08005c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f023 0201 	bic.w	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f023 030a 	bic.w	r3, r3, #10
 8005c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b087      	sub	sp, #28
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f023 0210 	bic.w	r2, r3, #16
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	031b      	lsls	r3, r3, #12
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <TIM_ITRx_SetConfig+0x38>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f043 0307 	orr.w	r3, r3, #7
 8005d42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	609a      	str	r2, [r3, #8]
}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	ffcfff8f 	.word	0xffcfff8f

08005d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	021a      	lsls	r2, r3, #8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	609a      	str	r2, [r3, #8]
}
 8005d90:	bf00      	nop
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e06d      	b.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a30      	ldr	r2, [pc, #192]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d004      	beq.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2f      	ldr	r2, [pc, #188]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d108      	bne.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a20      	ldr	r2, [pc, #128]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d022      	beq.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e26:	d01d      	beq.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1d      	ldr	r2, [pc, #116]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d018      	beq.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1c      	ldr	r2, [pc, #112]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d013      	beq.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1a      	ldr	r2, [pc, #104]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00e      	beq.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a15      	ldr	r2, [pc, #84]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a16      	ldr	r2, [pc, #88]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a15      	ldr	r2, [pc, #84]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d10c      	bne.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40010400 	.word	0x40010400
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40001800 	.word	0x40001800
 8005eb4:	40014000 	.word	0x40014000

08005eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e042      	b.n	8005f8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fb f9b3 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2224      	movs	r2, #36	; 0x24
 8005f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0201 	bic.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8c2 	bl	80060c0 <UART_SetConfig>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e022      	b.n	8005f8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fe1e 	bl	8006b90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fea5 	bl	8006cd4 <UART_CheckIdleState>
 8005f8a:	4603      	mov	r3, r0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	; 0x28
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	f040 8083 	bne.w	80060b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <HAL_UART_Transmit+0x28>
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e07b      	b.n	80060b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_UART_Transmit+0x3a>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e074      	b.n	80060b8 <HAL_UART_Transmit+0x124>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2221      	movs	r2, #33	; 0x21
 8005fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fe6:	f7fb fbe5 	bl	80017b4 <HAL_GetTick>
 8005fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	88fa      	ldrh	r2, [r7, #6]
 8005ff0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	88fa      	ldrh	r2, [r7, #6]
 8005ff8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006004:	d108      	bne.n	8006018 <HAL_UART_Transmit+0x84>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d104      	bne.n	8006018 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800600e:	2300      	movs	r3, #0
 8006010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	e003      	b.n	8006020 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800601c:	2300      	movs	r3, #0
 800601e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006028:	e02c      	b.n	8006084 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2200      	movs	r2, #0
 8006032:	2180      	movs	r1, #128	; 0x80
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fe98 	bl	8006d6a <UART_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e039      	b.n	80060b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10b      	bne.n	8006062 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006058:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	3302      	adds	r3, #2
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	e007      	b.n	8006072 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	781a      	ldrb	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	3301      	adds	r3, #1
 8006070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800608a:	b29b      	uxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1cc      	bne.n	800602a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2200      	movs	r2, #0
 8006098:	2140      	movs	r1, #64	; 0x40
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fe65 	bl	8006d6a <UART_WaitOnFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e006      	b.n	80060b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e000      	b.n	80060b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80060b6:	2302      	movs	r3, #2
  }
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060c4:	b092      	sub	sp, #72	; 0x48
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	431a      	orrs	r2, r3
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	431a      	orrs	r2, r3
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4bbe      	ldr	r3, [pc, #760]	; (80063e8 <UART_SetConfig+0x328>)
 80060f0:	4013      	ands	r3, r2
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060f8:	430b      	orrs	r3, r1
 80060fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4ab3      	ldr	r2, [pc, #716]	; (80063ec <UART_SetConfig+0x32c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d004      	beq.n	800612c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006128:	4313      	orrs	r3, r2
 800612a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	4baf      	ldr	r3, [pc, #700]	; (80063f0 <UART_SetConfig+0x330>)
 8006134:	4013      	ands	r3, r2
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	6812      	ldr	r2, [r2, #0]
 800613a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800613c:	430b      	orrs	r3, r1
 800613e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	f023 010f 	bic.w	r1, r3, #15
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4aa6      	ldr	r2, [pc, #664]	; (80063f4 <UART_SetConfig+0x334>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d177      	bne.n	8006250 <UART_SetConfig+0x190>
 8006160:	4ba5      	ldr	r3, [pc, #660]	; (80063f8 <UART_SetConfig+0x338>)
 8006162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006168:	2b28      	cmp	r3, #40	; 0x28
 800616a:	d86d      	bhi.n	8006248 <UART_SetConfig+0x188>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <UART_SetConfig+0xb4>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	08006219 	.word	0x08006219
 8006178:	08006249 	.word	0x08006249
 800617c:	08006249 	.word	0x08006249
 8006180:	08006249 	.word	0x08006249
 8006184:	08006249 	.word	0x08006249
 8006188:	08006249 	.word	0x08006249
 800618c:	08006249 	.word	0x08006249
 8006190:	08006249 	.word	0x08006249
 8006194:	08006221 	.word	0x08006221
 8006198:	08006249 	.word	0x08006249
 800619c:	08006249 	.word	0x08006249
 80061a0:	08006249 	.word	0x08006249
 80061a4:	08006249 	.word	0x08006249
 80061a8:	08006249 	.word	0x08006249
 80061ac:	08006249 	.word	0x08006249
 80061b0:	08006249 	.word	0x08006249
 80061b4:	08006229 	.word	0x08006229
 80061b8:	08006249 	.word	0x08006249
 80061bc:	08006249 	.word	0x08006249
 80061c0:	08006249 	.word	0x08006249
 80061c4:	08006249 	.word	0x08006249
 80061c8:	08006249 	.word	0x08006249
 80061cc:	08006249 	.word	0x08006249
 80061d0:	08006249 	.word	0x08006249
 80061d4:	08006231 	.word	0x08006231
 80061d8:	08006249 	.word	0x08006249
 80061dc:	08006249 	.word	0x08006249
 80061e0:	08006249 	.word	0x08006249
 80061e4:	08006249 	.word	0x08006249
 80061e8:	08006249 	.word	0x08006249
 80061ec:	08006249 	.word	0x08006249
 80061f0:	08006249 	.word	0x08006249
 80061f4:	08006239 	.word	0x08006239
 80061f8:	08006249 	.word	0x08006249
 80061fc:	08006249 	.word	0x08006249
 8006200:	08006249 	.word	0x08006249
 8006204:	08006249 	.word	0x08006249
 8006208:	08006249 	.word	0x08006249
 800620c:	08006249 	.word	0x08006249
 8006210:	08006249 	.word	0x08006249
 8006214:	08006241 	.word	0x08006241
 8006218:	2301      	movs	r3, #1
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621e:	e222      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006220:	2304      	movs	r3, #4
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006226:	e21e      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006228:	2308      	movs	r3, #8
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622e:	e21a      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006230:	2310      	movs	r3, #16
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006236:	e216      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006238:	2320      	movs	r3, #32
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623e:	e212      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006240:	2340      	movs	r3, #64	; 0x40
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006246:	e20e      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006248:	2380      	movs	r3, #128	; 0x80
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624e:	e20a      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a69      	ldr	r2, [pc, #420]	; (80063fc <UART_SetConfig+0x33c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d130      	bne.n	80062bc <UART_SetConfig+0x1fc>
 800625a:	4b67      	ldr	r3, [pc, #412]	; (80063f8 <UART_SetConfig+0x338>)
 800625c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	2b05      	cmp	r3, #5
 8006264:	d826      	bhi.n	80062b4 <UART_SetConfig+0x1f4>
 8006266:	a201      	add	r2, pc, #4	; (adr r2, 800626c <UART_SetConfig+0x1ac>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	08006285 	.word	0x08006285
 8006270:	0800628d 	.word	0x0800628d
 8006274:	08006295 	.word	0x08006295
 8006278:	0800629d 	.word	0x0800629d
 800627c:	080062a5 	.word	0x080062a5
 8006280:	080062ad 	.word	0x080062ad
 8006284:	2300      	movs	r3, #0
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628a:	e1ec      	b.n	8006666 <UART_SetConfig+0x5a6>
 800628c:	2304      	movs	r3, #4
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006292:	e1e8      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006294:	2308      	movs	r3, #8
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629a:	e1e4      	b.n	8006666 <UART_SetConfig+0x5a6>
 800629c:	2310      	movs	r3, #16
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a2:	e1e0      	b.n	8006666 <UART_SetConfig+0x5a6>
 80062a4:	2320      	movs	r3, #32
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062aa:	e1dc      	b.n	8006666 <UART_SetConfig+0x5a6>
 80062ac:	2340      	movs	r3, #64	; 0x40
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b2:	e1d8      	b.n	8006666 <UART_SetConfig+0x5a6>
 80062b4:	2380      	movs	r3, #128	; 0x80
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ba:	e1d4      	b.n	8006666 <UART_SetConfig+0x5a6>
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a4f      	ldr	r2, [pc, #316]	; (8006400 <UART_SetConfig+0x340>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d130      	bne.n	8006328 <UART_SetConfig+0x268>
 80062c6:	4b4c      	ldr	r3, [pc, #304]	; (80063f8 <UART_SetConfig+0x338>)
 80062c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	2b05      	cmp	r3, #5
 80062d0:	d826      	bhi.n	8006320 <UART_SetConfig+0x260>
 80062d2:	a201      	add	r2, pc, #4	; (adr r2, 80062d8 <UART_SetConfig+0x218>)
 80062d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d8:	080062f1 	.word	0x080062f1
 80062dc:	080062f9 	.word	0x080062f9
 80062e0:	08006301 	.word	0x08006301
 80062e4:	08006309 	.word	0x08006309
 80062e8:	08006311 	.word	0x08006311
 80062ec:	08006319 	.word	0x08006319
 80062f0:	2300      	movs	r3, #0
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f6:	e1b6      	b.n	8006666 <UART_SetConfig+0x5a6>
 80062f8:	2304      	movs	r3, #4
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fe:	e1b2      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006300:	2308      	movs	r3, #8
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006306:	e1ae      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006308:	2310      	movs	r3, #16
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630e:	e1aa      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006310:	2320      	movs	r3, #32
 8006312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006316:	e1a6      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006318:	2340      	movs	r3, #64	; 0x40
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631e:	e1a2      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006326:	e19e      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a35      	ldr	r2, [pc, #212]	; (8006404 <UART_SetConfig+0x344>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d130      	bne.n	8006394 <UART_SetConfig+0x2d4>
 8006332:	4b31      	ldr	r3, [pc, #196]	; (80063f8 <UART_SetConfig+0x338>)
 8006334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	2b05      	cmp	r3, #5
 800633c:	d826      	bhi.n	800638c <UART_SetConfig+0x2cc>
 800633e:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <UART_SetConfig+0x284>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	0800635d 	.word	0x0800635d
 8006348:	08006365 	.word	0x08006365
 800634c:	0800636d 	.word	0x0800636d
 8006350:	08006375 	.word	0x08006375
 8006354:	0800637d 	.word	0x0800637d
 8006358:	08006385 	.word	0x08006385
 800635c:	2300      	movs	r3, #0
 800635e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006362:	e180      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006364:	2304      	movs	r3, #4
 8006366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636a:	e17c      	b.n	8006666 <UART_SetConfig+0x5a6>
 800636c:	2308      	movs	r3, #8
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006372:	e178      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006374:	2310      	movs	r3, #16
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637a:	e174      	b.n	8006666 <UART_SetConfig+0x5a6>
 800637c:	2320      	movs	r3, #32
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006382:	e170      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006384:	2340      	movs	r3, #64	; 0x40
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638a:	e16c      	b.n	8006666 <UART_SetConfig+0x5a6>
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006392:	e168      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a1b      	ldr	r2, [pc, #108]	; (8006408 <UART_SetConfig+0x348>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d142      	bne.n	8006424 <UART_SetConfig+0x364>
 800639e:	4b16      	ldr	r3, [pc, #88]	; (80063f8 <UART_SetConfig+0x338>)
 80063a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b05      	cmp	r3, #5
 80063a8:	d838      	bhi.n	800641c <UART_SetConfig+0x35c>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <UART_SetConfig+0x2f0>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063c9 	.word	0x080063c9
 80063b4:	080063d1 	.word	0x080063d1
 80063b8:	080063d9 	.word	0x080063d9
 80063bc:	080063e1 	.word	0x080063e1
 80063c0:	0800640d 	.word	0x0800640d
 80063c4:	08006415 	.word	0x08006415
 80063c8:	2300      	movs	r3, #0
 80063ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ce:	e14a      	b.n	8006666 <UART_SetConfig+0x5a6>
 80063d0:	2304      	movs	r3, #4
 80063d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d6:	e146      	b.n	8006666 <UART_SetConfig+0x5a6>
 80063d8:	2308      	movs	r3, #8
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063de:	e142      	b.n	8006666 <UART_SetConfig+0x5a6>
 80063e0:	2310      	movs	r3, #16
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e6:	e13e      	b.n	8006666 <UART_SetConfig+0x5a6>
 80063e8:	cfff69f3 	.word	0xcfff69f3
 80063ec:	58000c00 	.word	0x58000c00
 80063f0:	11fff4ff 	.word	0x11fff4ff
 80063f4:	40011000 	.word	0x40011000
 80063f8:	58024400 	.word	0x58024400
 80063fc:	40004400 	.word	0x40004400
 8006400:	40004800 	.word	0x40004800
 8006404:	40004c00 	.word	0x40004c00
 8006408:	40005000 	.word	0x40005000
 800640c:	2320      	movs	r3, #32
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006412:	e128      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006414:	2340      	movs	r3, #64	; 0x40
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641a:	e124      	b.n	8006666 <UART_SetConfig+0x5a6>
 800641c:	2380      	movs	r3, #128	; 0x80
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006422:	e120      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4acb      	ldr	r2, [pc, #812]	; (8006758 <UART_SetConfig+0x698>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d176      	bne.n	800651c <UART_SetConfig+0x45c>
 800642e:	4bcb      	ldr	r3, [pc, #812]	; (800675c <UART_SetConfig+0x69c>)
 8006430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006436:	2b28      	cmp	r3, #40	; 0x28
 8006438:	d86c      	bhi.n	8006514 <UART_SetConfig+0x454>
 800643a:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <UART_SetConfig+0x380>)
 800643c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006440:	080064e5 	.word	0x080064e5
 8006444:	08006515 	.word	0x08006515
 8006448:	08006515 	.word	0x08006515
 800644c:	08006515 	.word	0x08006515
 8006450:	08006515 	.word	0x08006515
 8006454:	08006515 	.word	0x08006515
 8006458:	08006515 	.word	0x08006515
 800645c:	08006515 	.word	0x08006515
 8006460:	080064ed 	.word	0x080064ed
 8006464:	08006515 	.word	0x08006515
 8006468:	08006515 	.word	0x08006515
 800646c:	08006515 	.word	0x08006515
 8006470:	08006515 	.word	0x08006515
 8006474:	08006515 	.word	0x08006515
 8006478:	08006515 	.word	0x08006515
 800647c:	08006515 	.word	0x08006515
 8006480:	080064f5 	.word	0x080064f5
 8006484:	08006515 	.word	0x08006515
 8006488:	08006515 	.word	0x08006515
 800648c:	08006515 	.word	0x08006515
 8006490:	08006515 	.word	0x08006515
 8006494:	08006515 	.word	0x08006515
 8006498:	08006515 	.word	0x08006515
 800649c:	08006515 	.word	0x08006515
 80064a0:	080064fd 	.word	0x080064fd
 80064a4:	08006515 	.word	0x08006515
 80064a8:	08006515 	.word	0x08006515
 80064ac:	08006515 	.word	0x08006515
 80064b0:	08006515 	.word	0x08006515
 80064b4:	08006515 	.word	0x08006515
 80064b8:	08006515 	.word	0x08006515
 80064bc:	08006515 	.word	0x08006515
 80064c0:	08006505 	.word	0x08006505
 80064c4:	08006515 	.word	0x08006515
 80064c8:	08006515 	.word	0x08006515
 80064cc:	08006515 	.word	0x08006515
 80064d0:	08006515 	.word	0x08006515
 80064d4:	08006515 	.word	0x08006515
 80064d8:	08006515 	.word	0x08006515
 80064dc:	08006515 	.word	0x08006515
 80064e0:	0800650d 	.word	0x0800650d
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ea:	e0bc      	b.n	8006666 <UART_SetConfig+0x5a6>
 80064ec:	2304      	movs	r3, #4
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f2:	e0b8      	b.n	8006666 <UART_SetConfig+0x5a6>
 80064f4:	2308      	movs	r3, #8
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fa:	e0b4      	b.n	8006666 <UART_SetConfig+0x5a6>
 80064fc:	2310      	movs	r3, #16
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006502:	e0b0      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006504:	2320      	movs	r3, #32
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650a:	e0ac      	b.n	8006666 <UART_SetConfig+0x5a6>
 800650c:	2340      	movs	r3, #64	; 0x40
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006512:	e0a8      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006514:	2380      	movs	r3, #128	; 0x80
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651a:	e0a4      	b.n	8006666 <UART_SetConfig+0x5a6>
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a8f      	ldr	r2, [pc, #572]	; (8006760 <UART_SetConfig+0x6a0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d130      	bne.n	8006588 <UART_SetConfig+0x4c8>
 8006526:	4b8d      	ldr	r3, [pc, #564]	; (800675c <UART_SetConfig+0x69c>)
 8006528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	2b05      	cmp	r3, #5
 8006530:	d826      	bhi.n	8006580 <UART_SetConfig+0x4c0>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <UART_SetConfig+0x478>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	08006551 	.word	0x08006551
 800653c:	08006559 	.word	0x08006559
 8006540:	08006561 	.word	0x08006561
 8006544:	08006569 	.word	0x08006569
 8006548:	08006571 	.word	0x08006571
 800654c:	08006579 	.word	0x08006579
 8006550:	2300      	movs	r3, #0
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006556:	e086      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006558:	2304      	movs	r3, #4
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655e:	e082      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006560:	2308      	movs	r3, #8
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006566:	e07e      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006568:	2310      	movs	r3, #16
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656e:	e07a      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006570:	2320      	movs	r3, #32
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006576:	e076      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006578:	2340      	movs	r3, #64	; 0x40
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657e:	e072      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006580:	2380      	movs	r3, #128	; 0x80
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006586:	e06e      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a75      	ldr	r2, [pc, #468]	; (8006764 <UART_SetConfig+0x6a4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d130      	bne.n	80065f4 <UART_SetConfig+0x534>
 8006592:	4b72      	ldr	r3, [pc, #456]	; (800675c <UART_SetConfig+0x69c>)
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	2b05      	cmp	r3, #5
 800659c:	d826      	bhi.n	80065ec <UART_SetConfig+0x52c>
 800659e:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <UART_SetConfig+0x4e4>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	080065bd 	.word	0x080065bd
 80065a8:	080065c5 	.word	0x080065c5
 80065ac:	080065cd 	.word	0x080065cd
 80065b0:	080065d5 	.word	0x080065d5
 80065b4:	080065dd 	.word	0x080065dd
 80065b8:	080065e5 	.word	0x080065e5
 80065bc:	2300      	movs	r3, #0
 80065be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c2:	e050      	b.n	8006666 <UART_SetConfig+0x5a6>
 80065c4:	2304      	movs	r3, #4
 80065c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ca:	e04c      	b.n	8006666 <UART_SetConfig+0x5a6>
 80065cc:	2308      	movs	r3, #8
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d2:	e048      	b.n	8006666 <UART_SetConfig+0x5a6>
 80065d4:	2310      	movs	r3, #16
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065da:	e044      	b.n	8006666 <UART_SetConfig+0x5a6>
 80065dc:	2320      	movs	r3, #32
 80065de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065e2:	e040      	b.n	8006666 <UART_SetConfig+0x5a6>
 80065e4:	2340      	movs	r3, #64	; 0x40
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ea:	e03c      	b.n	8006666 <UART_SetConfig+0x5a6>
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f2:	e038      	b.n	8006666 <UART_SetConfig+0x5a6>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a5b      	ldr	r2, [pc, #364]	; (8006768 <UART_SetConfig+0x6a8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d130      	bne.n	8006660 <UART_SetConfig+0x5a0>
 80065fe:	4b57      	ldr	r3, [pc, #348]	; (800675c <UART_SetConfig+0x69c>)
 8006600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	2b05      	cmp	r3, #5
 8006608:	d826      	bhi.n	8006658 <UART_SetConfig+0x598>
 800660a:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <UART_SetConfig+0x550>)
 800660c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006610:	08006629 	.word	0x08006629
 8006614:	08006631 	.word	0x08006631
 8006618:	08006639 	.word	0x08006639
 800661c:	08006641 	.word	0x08006641
 8006620:	08006649 	.word	0x08006649
 8006624:	08006651 	.word	0x08006651
 8006628:	2302      	movs	r3, #2
 800662a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662e:	e01a      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006630:	2304      	movs	r3, #4
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006636:	e016      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006638:	2308      	movs	r3, #8
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663e:	e012      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006640:	2310      	movs	r3, #16
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006646:	e00e      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006648:	2320      	movs	r3, #32
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664e:	e00a      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006650:	2340      	movs	r3, #64	; 0x40
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006656:	e006      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006658:	2380      	movs	r3, #128	; 0x80
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665e:	e002      	b.n	8006666 <UART_SetConfig+0x5a6>
 8006660:	2380      	movs	r3, #128	; 0x80
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a3f      	ldr	r2, [pc, #252]	; (8006768 <UART_SetConfig+0x6a8>)
 800666c:	4293      	cmp	r3, r2
 800666e:	f040 80f8 	bne.w	8006862 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006672:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006676:	2b20      	cmp	r3, #32
 8006678:	dc46      	bgt.n	8006708 <UART_SetConfig+0x648>
 800667a:	2b02      	cmp	r3, #2
 800667c:	f2c0 8082 	blt.w	8006784 <UART_SetConfig+0x6c4>
 8006680:	3b02      	subs	r3, #2
 8006682:	2b1e      	cmp	r3, #30
 8006684:	d87e      	bhi.n	8006784 <UART_SetConfig+0x6c4>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0x5cc>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	0800670f 	.word	0x0800670f
 8006690:	08006785 	.word	0x08006785
 8006694:	08006717 	.word	0x08006717
 8006698:	08006785 	.word	0x08006785
 800669c:	08006785 	.word	0x08006785
 80066a0:	08006785 	.word	0x08006785
 80066a4:	08006727 	.word	0x08006727
 80066a8:	08006785 	.word	0x08006785
 80066ac:	08006785 	.word	0x08006785
 80066b0:	08006785 	.word	0x08006785
 80066b4:	08006785 	.word	0x08006785
 80066b8:	08006785 	.word	0x08006785
 80066bc:	08006785 	.word	0x08006785
 80066c0:	08006785 	.word	0x08006785
 80066c4:	08006737 	.word	0x08006737
 80066c8:	08006785 	.word	0x08006785
 80066cc:	08006785 	.word	0x08006785
 80066d0:	08006785 	.word	0x08006785
 80066d4:	08006785 	.word	0x08006785
 80066d8:	08006785 	.word	0x08006785
 80066dc:	08006785 	.word	0x08006785
 80066e0:	08006785 	.word	0x08006785
 80066e4:	08006785 	.word	0x08006785
 80066e8:	08006785 	.word	0x08006785
 80066ec:	08006785 	.word	0x08006785
 80066f0:	08006785 	.word	0x08006785
 80066f4:	08006785 	.word	0x08006785
 80066f8:	08006785 	.word	0x08006785
 80066fc:	08006785 	.word	0x08006785
 8006700:	08006785 	.word	0x08006785
 8006704:	08006777 	.word	0x08006777
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d037      	beq.n	800677c <UART_SetConfig+0x6bc>
 800670c:	e03a      	b.n	8006784 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800670e:	f7fe fb4b 	bl	8004da8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006712:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006714:	e03c      	b.n	8006790 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe fb5a 	bl	8004dd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006724:	e034      	b.n	8006790 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006726:	f107 0318 	add.w	r3, r7, #24
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fca6 	bl	800507c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006734:	e02c      	b.n	8006790 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <UART_SetConfig+0x69c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b00      	cmp	r3, #0
 8006740:	d016      	beq.n	8006770 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <UART_SetConfig+0x69c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	08db      	lsrs	r3, r3, #3
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	4a07      	ldr	r2, [pc, #28]	; (800676c <UART_SetConfig+0x6ac>)
 800674e:	fa22 f303 	lsr.w	r3, r2, r3
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006754:	e01c      	b.n	8006790 <UART_SetConfig+0x6d0>
 8006756:	bf00      	nop
 8006758:	40011400 	.word	0x40011400
 800675c:	58024400 	.word	0x58024400
 8006760:	40007800 	.word	0x40007800
 8006764:	40007c00 	.word	0x40007c00
 8006768:	58000c00 	.word	0x58000c00
 800676c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006770:	4b9d      	ldr	r3, [pc, #628]	; (80069e8 <UART_SetConfig+0x928>)
 8006772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006774:	e00c      	b.n	8006790 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006776:	4b9d      	ldr	r3, [pc, #628]	; (80069ec <UART_SetConfig+0x92c>)
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800677a:	e009      	b.n	8006790 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800677c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006782:	e005      	b.n	8006790 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800678e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 81de 	beq.w	8006b54 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	4a94      	ldr	r2, [pc, #592]	; (80069f0 <UART_SetConfig+0x930>)
 800679e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067a2:	461a      	mov	r2, r3
 80067a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80067aa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	4613      	mov	r3, r2
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	4413      	add	r3, r2
 80067b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d305      	bcc.n	80067c8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d903      	bls.n	80067d0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80067ce:	e1c1      	b.n	8006b54 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d2:	2200      	movs	r2, #0
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	60fa      	str	r2, [r7, #12]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	4a84      	ldr	r2, [pc, #528]	; (80069f0 <UART_SetConfig+0x930>)
 80067de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2200      	movs	r2, #0
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	607a      	str	r2, [r7, #4]
 80067ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067f2:	f7f9 fdcd 	bl	8000390 <__aeabi_uldivmod>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4610      	mov	r0, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	020b      	lsls	r3, r1, #8
 8006808:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800680c:	0202      	lsls	r2, r0, #8
 800680e:	6979      	ldr	r1, [r7, #20]
 8006810:	6849      	ldr	r1, [r1, #4]
 8006812:	0849      	lsrs	r1, r1, #1
 8006814:	2000      	movs	r0, #0
 8006816:	460c      	mov	r4, r1
 8006818:	4605      	mov	r5, r0
 800681a:	eb12 0804 	adds.w	r8, r2, r4
 800681e:	eb43 0905 	adc.w	r9, r3, r5
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	469a      	mov	sl, r3
 800682a:	4693      	mov	fp, r2
 800682c:	4652      	mov	r2, sl
 800682e:	465b      	mov	r3, fp
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	f7f9 fdac 	bl	8000390 <__aeabi_uldivmod>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4613      	mov	r3, r2
 800683e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006846:	d308      	bcc.n	800685a <UART_SetConfig+0x79a>
 8006848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800684e:	d204      	bcs.n	800685a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006856:	60da      	str	r2, [r3, #12]
 8006858:	e17c      	b.n	8006b54 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006860:	e178      	b.n	8006b54 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800686a:	f040 80c5 	bne.w	80069f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800686e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006872:	2b20      	cmp	r3, #32
 8006874:	dc48      	bgt.n	8006908 <UART_SetConfig+0x848>
 8006876:	2b00      	cmp	r3, #0
 8006878:	db7b      	blt.n	8006972 <UART_SetConfig+0x8b2>
 800687a:	2b20      	cmp	r3, #32
 800687c:	d879      	bhi.n	8006972 <UART_SetConfig+0x8b2>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <UART_SetConfig+0x7c4>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	0800690f 	.word	0x0800690f
 8006888:	08006917 	.word	0x08006917
 800688c:	08006973 	.word	0x08006973
 8006890:	08006973 	.word	0x08006973
 8006894:	0800691f 	.word	0x0800691f
 8006898:	08006973 	.word	0x08006973
 800689c:	08006973 	.word	0x08006973
 80068a0:	08006973 	.word	0x08006973
 80068a4:	0800692f 	.word	0x0800692f
 80068a8:	08006973 	.word	0x08006973
 80068ac:	08006973 	.word	0x08006973
 80068b0:	08006973 	.word	0x08006973
 80068b4:	08006973 	.word	0x08006973
 80068b8:	08006973 	.word	0x08006973
 80068bc:	08006973 	.word	0x08006973
 80068c0:	08006973 	.word	0x08006973
 80068c4:	0800693f 	.word	0x0800693f
 80068c8:	08006973 	.word	0x08006973
 80068cc:	08006973 	.word	0x08006973
 80068d0:	08006973 	.word	0x08006973
 80068d4:	08006973 	.word	0x08006973
 80068d8:	08006973 	.word	0x08006973
 80068dc:	08006973 	.word	0x08006973
 80068e0:	08006973 	.word	0x08006973
 80068e4:	08006973 	.word	0x08006973
 80068e8:	08006973 	.word	0x08006973
 80068ec:	08006973 	.word	0x08006973
 80068f0:	08006973 	.word	0x08006973
 80068f4:	08006973 	.word	0x08006973
 80068f8:	08006973 	.word	0x08006973
 80068fc:	08006973 	.word	0x08006973
 8006900:	08006973 	.word	0x08006973
 8006904:	08006965 	.word	0x08006965
 8006908:	2b40      	cmp	r3, #64	; 0x40
 800690a:	d02e      	beq.n	800696a <UART_SetConfig+0x8aa>
 800690c:	e031      	b.n	8006972 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800690e:	f7fd fad9 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 8006912:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006914:	e033      	b.n	800697e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006916:	f7fd faeb 	bl	8003ef0 <HAL_RCC_GetPCLK2Freq>
 800691a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800691c:	e02f      	b.n	800697e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800691e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe fa56 	bl	8004dd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800692c:	e027      	b.n	800697e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800692e:	f107 0318 	add.w	r3, r7, #24
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fba2 	bl	800507c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800693c:	e01f      	b.n	800697e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800693e:	4b2d      	ldr	r3, [pc, #180]	; (80069f4 <UART_SetConfig+0x934>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800694a:	4b2a      	ldr	r3, [pc, #168]	; (80069f4 <UART_SetConfig+0x934>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	08db      	lsrs	r3, r3, #3
 8006950:	f003 0303 	and.w	r3, r3, #3
 8006954:	4a24      	ldr	r2, [pc, #144]	; (80069e8 <UART_SetConfig+0x928>)
 8006956:	fa22 f303 	lsr.w	r3, r2, r3
 800695a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800695c:	e00f      	b.n	800697e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800695e:	4b22      	ldr	r3, [pc, #136]	; (80069e8 <UART_SetConfig+0x928>)
 8006960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006962:	e00c      	b.n	800697e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006964:	4b21      	ldr	r3, [pc, #132]	; (80069ec <UART_SetConfig+0x92c>)
 8006966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006968:	e009      	b.n	800697e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006970:	e005      	b.n	800697e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800697c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800697e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 80e7 	beq.w	8006b54 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	4a19      	ldr	r2, [pc, #100]	; (80069f0 <UART_SetConfig+0x930>)
 800698c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006990:	461a      	mov	r2, r3
 8006992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006994:	fbb3 f3f2 	udiv	r3, r3, r2
 8006998:	005a      	lsls	r2, r3, #1
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	085b      	lsrs	r3, r3, #1
 80069a0:	441a      	add	r2, r3
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	2b0f      	cmp	r3, #15
 80069b0:	d916      	bls.n	80069e0 <UART_SetConfig+0x920>
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b8:	d212      	bcs.n	80069e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f023 030f 	bic.w	r3, r3, #15
 80069c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	085b      	lsrs	r3, r3, #1
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069d2:	4313      	orrs	r3, r2
 80069d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80069dc:	60da      	str	r2, [r3, #12]
 80069de:	e0b9      	b.n	8006b54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80069e6:	e0b5      	b.n	8006b54 <UART_SetConfig+0xa94>
 80069e8:	03d09000 	.word	0x03d09000
 80069ec:	003d0900 	.word	0x003d0900
 80069f0:	0800a4c4 	.word	0x0800a4c4
 80069f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80069f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	dc49      	bgt.n	8006a94 <UART_SetConfig+0x9d4>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	db7c      	blt.n	8006afe <UART_SetConfig+0xa3e>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d87a      	bhi.n	8006afe <UART_SetConfig+0xa3e>
 8006a08:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <UART_SetConfig+0x950>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a9b 	.word	0x08006a9b
 8006a14:	08006aa3 	.word	0x08006aa3
 8006a18:	08006aff 	.word	0x08006aff
 8006a1c:	08006aff 	.word	0x08006aff
 8006a20:	08006aab 	.word	0x08006aab
 8006a24:	08006aff 	.word	0x08006aff
 8006a28:	08006aff 	.word	0x08006aff
 8006a2c:	08006aff 	.word	0x08006aff
 8006a30:	08006abb 	.word	0x08006abb
 8006a34:	08006aff 	.word	0x08006aff
 8006a38:	08006aff 	.word	0x08006aff
 8006a3c:	08006aff 	.word	0x08006aff
 8006a40:	08006aff 	.word	0x08006aff
 8006a44:	08006aff 	.word	0x08006aff
 8006a48:	08006aff 	.word	0x08006aff
 8006a4c:	08006aff 	.word	0x08006aff
 8006a50:	08006acb 	.word	0x08006acb
 8006a54:	08006aff 	.word	0x08006aff
 8006a58:	08006aff 	.word	0x08006aff
 8006a5c:	08006aff 	.word	0x08006aff
 8006a60:	08006aff 	.word	0x08006aff
 8006a64:	08006aff 	.word	0x08006aff
 8006a68:	08006aff 	.word	0x08006aff
 8006a6c:	08006aff 	.word	0x08006aff
 8006a70:	08006aff 	.word	0x08006aff
 8006a74:	08006aff 	.word	0x08006aff
 8006a78:	08006aff 	.word	0x08006aff
 8006a7c:	08006aff 	.word	0x08006aff
 8006a80:	08006aff 	.word	0x08006aff
 8006a84:	08006aff 	.word	0x08006aff
 8006a88:	08006aff 	.word	0x08006aff
 8006a8c:	08006aff 	.word	0x08006aff
 8006a90:	08006af1 	.word	0x08006af1
 8006a94:	2b40      	cmp	r3, #64	; 0x40
 8006a96:	d02e      	beq.n	8006af6 <UART_SetConfig+0xa36>
 8006a98:	e031      	b.n	8006afe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a9a:	f7fd fa13 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 8006a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006aa0:	e033      	b.n	8006b0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa2:	f7fd fa25 	bl	8003ef0 <HAL_RCC_GetPCLK2Freq>
 8006aa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006aa8:	e02f      	b.n	8006b0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fe f990 	bl	8004dd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab8:	e027      	b.n	8006b0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aba:	f107 0318 	add.w	r3, r7, #24
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fadc 	bl	800507c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ac8:	e01f      	b.n	8006b0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aca:	4b2d      	ldr	r3, [pc, #180]	; (8006b80 <UART_SetConfig+0xac0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d009      	beq.n	8006aea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ad6:	4b2a      	ldr	r3, [pc, #168]	; (8006b80 <UART_SetConfig+0xac0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	08db      	lsrs	r3, r3, #3
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	4a28      	ldr	r2, [pc, #160]	; (8006b84 <UART_SetConfig+0xac4>)
 8006ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ae8:	e00f      	b.n	8006b0a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006aea:	4b26      	ldr	r3, [pc, #152]	; (8006b84 <UART_SetConfig+0xac4>)
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aee:	e00c      	b.n	8006b0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006af0:	4b25      	ldr	r3, [pc, #148]	; (8006b88 <UART_SetConfig+0xac8>)
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af4:	e009      	b.n	8006b0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006afc:	e005      	b.n	8006b0a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b08:	bf00      	nop
    }

    if (pclk != 0U)
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d021      	beq.n	8006b54 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	4a1d      	ldr	r2, [pc, #116]	; (8006b8c <UART_SetConfig+0xacc>)
 8006b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	085b      	lsrs	r3, r3, #1
 8006b28:	441a      	add	r2, r3
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b36:	2b0f      	cmp	r3, #15
 8006b38:	d909      	bls.n	8006b4e <UART_SetConfig+0xa8e>
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b40:	d205      	bcs.n	8006b4e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60da      	str	r2, [r3, #12]
 8006b4c:	e002      	b.n	8006b54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2200      	movs	r2, #0
 8006b68:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006b70:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3748      	adds	r7, #72	; 0x48
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b7e:	bf00      	nop
 8006b80:	58024400 	.word	0x58024400
 8006b84:	03d09000 	.word	0x03d09000
 8006b88:	003d0900 	.word	0x003d0900
 8006b8c:	0800a4c4 	.word	0x0800a4c4

08006b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00a      	beq.n	8006bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	f003 0308 	and.w	r3, r3, #8
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01a      	beq.n	8006ca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c8e:	d10a      	bne.n	8006ca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	605a      	str	r2, [r3, #4]
  }
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ce4:	f7fa fd66 	bl	80017b4 <HAL_GetTick>
 8006ce8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d10e      	bne.n	8006d16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f82f 	bl	8006d6a <UART_WaitOnFlagUntilTimeout>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e025      	b.n	8006d62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d10e      	bne.n	8006d42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f819 	bl	8006d6a <UART_WaitOnFlagUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e00f      	b.n	8006d62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b09c      	sub	sp, #112	; 0x70
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4613      	mov	r3, r2
 8006d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d7a:	e0a9      	b.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d82:	f000 80a5 	beq.w	8006ed0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d86:	f7fa fd15 	bl	80017b4 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d302      	bcc.n	8006d9c <UART_WaitOnFlagUntilTimeout+0x32>
 8006d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d140      	bne.n	8006e1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006db0:	667b      	str	r3, [r7, #100]	; 0x64
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dbc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e6      	bne.n	8006d9c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	f023 0301 	bic.w	r3, r3, #1
 8006de4:	663b      	str	r3, [r7, #96]	; 0x60
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3308      	adds	r3, #8
 8006dec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dee:	64ba      	str	r2, [r7, #72]	; 0x48
 8006df0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e5      	bne.n	8006dce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e069      	b.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d051      	beq.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e3a:	d149      	bne.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e64:	637b      	str	r3, [r7, #52]	; 0x34
 8006e66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e6      	bne.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	613b      	str	r3, [r7, #16]
   return(result);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f023 0301 	bic.w	r3, r3, #1
 8006e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3308      	adds	r3, #8
 8006e96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e98:	623a      	str	r2, [r7, #32]
 8006e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	69f9      	ldr	r1, [r7, #28]
 8006e9e:	6a3a      	ldr	r2, [r7, #32]
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e5      	bne.n	8006e78 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e010      	b.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69da      	ldr	r2, [r3, #28]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	bf0c      	ite	eq
 8006ee0:	2301      	moveq	r3, #1
 8006ee2:	2300      	movne	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	f43f af46 	beq.w	8006d7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3770      	adds	r7, #112	; 0x70
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b085      	sub	sp, #20
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e027      	b.n	8006f60 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2224      	movs	r2, #36	; 0x24
 8006f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0201 	bic.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e02d      	b.n	8006fe0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2224      	movs	r2, #36	; 0x24
 8006f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f84f 	bl	8007064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e02d      	b.n	800705c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2224      	movs	r2, #36	; 0x24
 800700c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0201 	bic.w	r2, r2, #1
 8007026:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f811 	bl	8007064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007070:	2b00      	cmp	r3, #0
 8007072:	d108      	bne.n	8007086 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007084:	e031      	b.n	80070ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007086:	2310      	movs	r3, #16
 8007088:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800708a:	2310      	movs	r3, #16
 800708c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	0e5b      	lsrs	r3, r3, #25
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	0f5b      	lsrs	r3, r3, #29
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	7b3a      	ldrb	r2, [r7, #12]
 80070b2:	4911      	ldr	r1, [pc, #68]	; (80070f8 <UARTEx_SetNbDataToProcess+0x94>)
 80070b4:	5c8a      	ldrb	r2, [r1, r2]
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070ba:	7b3a      	ldrb	r2, [r7, #12]
 80070bc:	490f      	ldr	r1, [pc, #60]	; (80070fc <UARTEx_SetNbDataToProcess+0x98>)
 80070be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	7b7a      	ldrb	r2, [r7, #13]
 80070d0:	4909      	ldr	r1, [pc, #36]	; (80070f8 <UARTEx_SetNbDataToProcess+0x94>)
 80070d2:	5c8a      	ldrb	r2, [r1, r2]
 80070d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070d8:	7b7a      	ldrb	r2, [r7, #13]
 80070da:	4908      	ldr	r1, [pc, #32]	; (80070fc <UARTEx_SetNbDataToProcess+0x98>)
 80070dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070de:	fb93 f3f2 	sdiv	r3, r3, r2
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	0800a4dc 	.word	0x0800a4dc
 80070fc:	0800a4e4 	.word	0x0800a4e4

08007100 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007100:	b084      	sub	sp, #16
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	f107 001c 	add.w	r0, r7, #28
 800710e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	2b01      	cmp	r3, #1
 8007116:	d120      	bne.n	800715a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	4b2a      	ldr	r3, [pc, #168]	; (80071d4 <USB_CoreInit+0xd4>)
 800712a:	4013      	ands	r3, r2
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800713c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800713e:	2b01      	cmp	r3, #1
 8007140:	d105      	bne.n	800714e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 faac 	bl	80076ac <USB_CoreReset>
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]
 8007158:	e01a      	b.n	8007190 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 faa0 	bl	80076ac <USB_CoreReset>
 800716c:	4603      	mov	r3, r0
 800716e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	639a      	str	r2, [r3, #56]	; 0x38
 8007182:	e005      	b.n	8007190 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	2b01      	cmp	r3, #1
 8007194:	d116      	bne.n	80071c4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719a:	b29a      	uxth	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071a4:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <USB_CoreInit+0xd8>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f043 0206 	orr.w	r2, r3, #6
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f043 0220 	orr.w	r2, r3, #32
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071d0:	b004      	add	sp, #16
 80071d2:	4770      	bx	lr
 80071d4:	ffbdffbf 	.word	0xffbdffbf
 80071d8:	03ee0000 	.word	0x03ee0000

080071dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f023 0201 	bic.w	r2, r3, #1
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d115      	bne.n	800724c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800722c:	2001      	movs	r0, #1
 800722e:	f7fa facd 	bl	80017cc <HAL_Delay>
      ms++;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3301      	adds	r3, #1
 8007236:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fa29 	bl	8007690 <USB_GetMode>
 800723e:	4603      	mov	r3, r0
 8007240:	2b01      	cmp	r3, #1
 8007242:	d01e      	beq.n	8007282 <USB_SetCurrentMode+0x84>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b31      	cmp	r3, #49	; 0x31
 8007248:	d9f0      	bls.n	800722c <USB_SetCurrentMode+0x2e>
 800724a:	e01a      	b.n	8007282 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800724c:	78fb      	ldrb	r3, [r7, #3]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d115      	bne.n	800727e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800725e:	2001      	movs	r0, #1
 8007260:	f7fa fab4 	bl	80017cc <HAL_Delay>
      ms++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3301      	adds	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa10 	bl	8007690 <USB_GetMode>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <USB_SetCurrentMode+0x84>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b31      	cmp	r3, #49	; 0x31
 800727a:	d9f0      	bls.n	800725e <USB_SetCurrentMode+0x60>
 800727c:	e001      	b.n	8007282 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e005      	b.n	800728e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b32      	cmp	r3, #50	; 0x32
 8007286:	d101      	bne.n	800728c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e000      	b.n	800728e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007298:	b084      	sub	sp, #16
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]
 80072b6:	e009      	b.n	80072cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	3340      	adds	r3, #64	; 0x40
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	2200      	movs	r2, #0
 80072c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	3301      	adds	r3, #1
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b0e      	cmp	r3, #14
 80072d0:	d9f2      	bls.n	80072b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d11c      	bne.n	8007312 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072e6:	f043 0302 	orr.w	r3, r3, #2
 80072ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e005      	b.n	800731e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007324:	461a      	mov	r2, r3
 8007326:	2300      	movs	r3, #0
 8007328:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007330:	4619      	mov	r1, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007338:	461a      	mov	r2, r3
 800733a:	680b      	ldr	r3, [r1, #0]
 800733c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007340:	2b01      	cmp	r3, #1
 8007342:	d10c      	bne.n	800735e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800734a:	2100      	movs	r1, #0
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f965 	bl	800761c <USB_SetDevSpeed>
 8007352:	e008      	b.n	8007366 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007354:	2101      	movs	r1, #1
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f960 	bl	800761c <USB_SetDevSpeed>
 800735c:	e003      	b.n	8007366 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800735e:	2103      	movs	r1, #3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f95b 	bl	800761c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007366:	2110      	movs	r1, #16
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f8f3 	bl	8007554 <USB_FlushTxFifo>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f91f 	bl	80075bc <USB_FlushRxFifo>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738e:	461a      	mov	r2, r3
 8007390:	2300      	movs	r3, #0
 8007392:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739a:	461a      	mov	r2, r3
 800739c:	2300      	movs	r3, #0
 800739e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	461a      	mov	r2, r3
 80073a8:	2300      	movs	r3, #0
 80073aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073ac:	2300      	movs	r3, #0
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	e043      	b.n	800743a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c8:	d118      	bne.n	80073fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	461a      	mov	r2, r3
 80073de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	e013      	b.n	800740e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f2:	461a      	mov	r2, r3
 80073f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	e008      	b.n	800740e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007408:	461a      	mov	r2, r3
 800740a:	2300      	movs	r3, #0
 800740c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741a:	461a      	mov	r2, r3
 800741c:	2300      	movs	r3, #0
 800741e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	461a      	mov	r2, r3
 800742e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007432:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	3301      	adds	r3, #1
 8007438:	613b      	str	r3, [r7, #16]
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	429a      	cmp	r2, r3
 8007440:	d3b7      	bcc.n	80073b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	e043      	b.n	80074d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800745a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800745e:	d118      	bne.n	8007492 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007472:	461a      	mov	r2, r3
 8007474:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	e013      	b.n	80074a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007488:	461a      	mov	r2, r3
 800748a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	e008      	b.n	80074a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749e:	461a      	mov	r2, r3
 80074a0:	2300      	movs	r3, #0
 80074a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b0:	461a      	mov	r2, r3
 80074b2:	2300      	movs	r3, #0
 80074b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c2:	461a      	mov	r2, r3
 80074c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	3301      	adds	r3, #1
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d3b7      	bcc.n	8007448 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80074f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f043 0210 	orr.w	r2, r3, #16
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699a      	ldr	r2, [r3, #24]
 8007510:	4b0e      	ldr	r3, [pc, #56]	; (800754c <USB_DevInit+0x2b4>)
 8007512:	4313      	orrs	r3, r2
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f043 0208 	orr.w	r2, r3, #8
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800752a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752c:	2b01      	cmp	r3, #1
 800752e:	d105      	bne.n	800753c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	699a      	ldr	r2, [r3, #24]
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <USB_DevInit+0x2b8>)
 8007536:	4313      	orrs	r3, r2
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007548:	b004      	add	sp, #16
 800754a:	4770      	bx	lr
 800754c:	803c3800 	.word	0x803c3800
 8007550:	40000004 	.word	0x40000004

08007554 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3301      	adds	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4a13      	ldr	r2, [pc, #76]	; (80075b8 <USB_FlushTxFifo+0x64>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d901      	bls.n	8007574 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e01b      	b.n	80075ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	2b00      	cmp	r3, #0
 800757a:	daf2      	bge.n	8007562 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	019b      	lsls	r3, r3, #6
 8007584:	f043 0220 	orr.w	r2, r3, #32
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3301      	adds	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4a08      	ldr	r2, [pc, #32]	; (80075b8 <USB_FlushTxFifo+0x64>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d901      	bls.n	800759e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e006      	b.n	80075ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d0f0      	beq.n	800758c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	00030d40 	.word	0x00030d40

080075bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4a11      	ldr	r2, [pc, #68]	; (8007618 <USB_FlushRxFifo+0x5c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d901      	bls.n	80075da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e018      	b.n	800760c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	daf2      	bge.n	80075c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2210      	movs	r2, #16
 80075ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3301      	adds	r3, #1
 80075f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4a08      	ldr	r2, [pc, #32]	; (8007618 <USB_FlushRxFifo+0x5c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d901      	bls.n	80075fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e006      	b.n	800760c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f003 0310 	and.w	r3, r3, #16
 8007606:	2b10      	cmp	r3, #16
 8007608:	d0f0      	beq.n	80075ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	00030d40 	.word	0x00030d40

0800761c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	68f9      	ldr	r1, [r7, #12]
 8007638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800763c:	4313      	orrs	r3, r2
 800763e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800764e:	b480      	push	{r7}
 8007650:	b085      	sub	sp, #20
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007668:	f023 0303 	bic.w	r3, r3, #3
 800766c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800767c:	f043 0302 	orr.w	r3, r3, #2
 8007680:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	f003 0301 	and.w	r3, r3, #1
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4a13      	ldr	r2, [pc, #76]	; (8007710 <USB_CoreReset+0x64>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d901      	bls.n	80076ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e01b      	b.n	8007702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	daf2      	bge.n	80076b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f043 0201 	orr.w	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3301      	adds	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4a09      	ldr	r2, [pc, #36]	; (8007710 <USB_CoreReset+0x64>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d901      	bls.n	80076f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e006      	b.n	8007702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d0f0      	beq.n	80076e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	00030d40 	.word	0x00030d40

08007714 <__errno>:
 8007714:	4b01      	ldr	r3, [pc, #4]	; (800771c <__errno+0x8>)
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	24000010 	.word	0x24000010

08007720 <__libc_init_array>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	4d0d      	ldr	r5, [pc, #52]	; (8007758 <__libc_init_array+0x38>)
 8007724:	4c0d      	ldr	r4, [pc, #52]	; (800775c <__libc_init_array+0x3c>)
 8007726:	1b64      	subs	r4, r4, r5
 8007728:	10a4      	asrs	r4, r4, #2
 800772a:	2600      	movs	r6, #0
 800772c:	42a6      	cmp	r6, r4
 800772e:	d109      	bne.n	8007744 <__libc_init_array+0x24>
 8007730:	4d0b      	ldr	r5, [pc, #44]	; (8007760 <__libc_init_array+0x40>)
 8007732:	4c0c      	ldr	r4, [pc, #48]	; (8007764 <__libc_init_array+0x44>)
 8007734:	f002 fe5c 	bl	800a3f0 <_init>
 8007738:	1b64      	subs	r4, r4, r5
 800773a:	10a4      	asrs	r4, r4, #2
 800773c:	2600      	movs	r6, #0
 800773e:	42a6      	cmp	r6, r4
 8007740:	d105      	bne.n	800774e <__libc_init_array+0x2e>
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	f855 3b04 	ldr.w	r3, [r5], #4
 8007748:	4798      	blx	r3
 800774a:	3601      	adds	r6, #1
 800774c:	e7ee      	b.n	800772c <__libc_init_array+0xc>
 800774e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007752:	4798      	blx	r3
 8007754:	3601      	adds	r6, #1
 8007756:	e7f2      	b.n	800773e <__libc_init_array+0x1e>
 8007758:	0800a8cc 	.word	0x0800a8cc
 800775c:	0800a8cc 	.word	0x0800a8cc
 8007760:	0800a8cc 	.word	0x0800a8cc
 8007764:	0800a8d0 	.word	0x0800a8d0

08007768 <memset>:
 8007768:	4402      	add	r2, r0
 800776a:	4603      	mov	r3, r0
 800776c:	4293      	cmp	r3, r2
 800776e:	d100      	bne.n	8007772 <memset+0xa>
 8007770:	4770      	bx	lr
 8007772:	f803 1b01 	strb.w	r1, [r3], #1
 8007776:	e7f9      	b.n	800776c <memset+0x4>

08007778 <__cvt>:
 8007778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800777a:	ed2d 8b02 	vpush	{d8}
 800777e:	eeb0 8b40 	vmov.f64	d8, d0
 8007782:	b085      	sub	sp, #20
 8007784:	4617      	mov	r7, r2
 8007786:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007788:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800778a:	ee18 2a90 	vmov	r2, s17
 800778e:	f025 0520 	bic.w	r5, r5, #32
 8007792:	2a00      	cmp	r2, #0
 8007794:	bfb6      	itet	lt
 8007796:	222d      	movlt	r2, #45	; 0x2d
 8007798:	2200      	movge	r2, #0
 800779a:	eeb1 8b40 	vneglt.f64	d8, d0
 800779e:	2d46      	cmp	r5, #70	; 0x46
 80077a0:	460c      	mov	r4, r1
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	d004      	beq.n	80077b0 <__cvt+0x38>
 80077a6:	2d45      	cmp	r5, #69	; 0x45
 80077a8:	d100      	bne.n	80077ac <__cvt+0x34>
 80077aa:	3401      	adds	r4, #1
 80077ac:	2102      	movs	r1, #2
 80077ae:	e000      	b.n	80077b2 <__cvt+0x3a>
 80077b0:	2103      	movs	r1, #3
 80077b2:	ab03      	add	r3, sp, #12
 80077b4:	9301      	str	r3, [sp, #4]
 80077b6:	ab02      	add	r3, sp, #8
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	4622      	mov	r2, r4
 80077bc:	4633      	mov	r3, r6
 80077be:	eeb0 0b48 	vmov.f64	d0, d8
 80077c2:	f000 fcc9 	bl	8008158 <_dtoa_r>
 80077c6:	2d47      	cmp	r5, #71	; 0x47
 80077c8:	d101      	bne.n	80077ce <__cvt+0x56>
 80077ca:	07fb      	lsls	r3, r7, #31
 80077cc:	d51a      	bpl.n	8007804 <__cvt+0x8c>
 80077ce:	2d46      	cmp	r5, #70	; 0x46
 80077d0:	eb00 0204 	add.w	r2, r0, r4
 80077d4:	d10c      	bne.n	80077f0 <__cvt+0x78>
 80077d6:	7803      	ldrb	r3, [r0, #0]
 80077d8:	2b30      	cmp	r3, #48	; 0x30
 80077da:	d107      	bne.n	80077ec <__cvt+0x74>
 80077dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80077e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e4:	bf1c      	itt	ne
 80077e6:	f1c4 0401 	rsbne	r4, r4, #1
 80077ea:	6034      	strne	r4, [r6, #0]
 80077ec:	6833      	ldr	r3, [r6, #0]
 80077ee:	441a      	add	r2, r3
 80077f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80077f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f8:	bf08      	it	eq
 80077fa:	9203      	streq	r2, [sp, #12]
 80077fc:	2130      	movs	r1, #48	; 0x30
 80077fe:	9b03      	ldr	r3, [sp, #12]
 8007800:	4293      	cmp	r3, r2
 8007802:	d307      	bcc.n	8007814 <__cvt+0x9c>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007808:	1a1b      	subs	r3, r3, r0
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	b005      	add	sp, #20
 800780e:	ecbd 8b02 	vpop	{d8}
 8007812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007814:	1c5c      	adds	r4, r3, #1
 8007816:	9403      	str	r4, [sp, #12]
 8007818:	7019      	strb	r1, [r3, #0]
 800781a:	e7f0      	b.n	80077fe <__cvt+0x86>

0800781c <__exponent>:
 800781c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800781e:	4603      	mov	r3, r0
 8007820:	2900      	cmp	r1, #0
 8007822:	bfb8      	it	lt
 8007824:	4249      	neglt	r1, r1
 8007826:	f803 2b02 	strb.w	r2, [r3], #2
 800782a:	bfb4      	ite	lt
 800782c:	222d      	movlt	r2, #45	; 0x2d
 800782e:	222b      	movge	r2, #43	; 0x2b
 8007830:	2909      	cmp	r1, #9
 8007832:	7042      	strb	r2, [r0, #1]
 8007834:	dd2a      	ble.n	800788c <__exponent+0x70>
 8007836:	f10d 0407 	add.w	r4, sp, #7
 800783a:	46a4      	mov	ip, r4
 800783c:	270a      	movs	r7, #10
 800783e:	46a6      	mov	lr, r4
 8007840:	460a      	mov	r2, r1
 8007842:	fb91 f6f7 	sdiv	r6, r1, r7
 8007846:	fb07 1516 	mls	r5, r7, r6, r1
 800784a:	3530      	adds	r5, #48	; 0x30
 800784c:	2a63      	cmp	r2, #99	; 0x63
 800784e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007852:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007856:	4631      	mov	r1, r6
 8007858:	dcf1      	bgt.n	800783e <__exponent+0x22>
 800785a:	3130      	adds	r1, #48	; 0x30
 800785c:	f1ae 0502 	sub.w	r5, lr, #2
 8007860:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007864:	1c44      	adds	r4, r0, #1
 8007866:	4629      	mov	r1, r5
 8007868:	4561      	cmp	r1, ip
 800786a:	d30a      	bcc.n	8007882 <__exponent+0x66>
 800786c:	f10d 0209 	add.w	r2, sp, #9
 8007870:	eba2 020e 	sub.w	r2, r2, lr
 8007874:	4565      	cmp	r5, ip
 8007876:	bf88      	it	hi
 8007878:	2200      	movhi	r2, #0
 800787a:	4413      	add	r3, r2
 800787c:	1a18      	subs	r0, r3, r0
 800787e:	b003      	add	sp, #12
 8007880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007886:	f804 2f01 	strb.w	r2, [r4, #1]!
 800788a:	e7ed      	b.n	8007868 <__exponent+0x4c>
 800788c:	2330      	movs	r3, #48	; 0x30
 800788e:	3130      	adds	r1, #48	; 0x30
 8007890:	7083      	strb	r3, [r0, #2]
 8007892:	70c1      	strb	r1, [r0, #3]
 8007894:	1d03      	adds	r3, r0, #4
 8007896:	e7f1      	b.n	800787c <__exponent+0x60>

08007898 <_printf_float>:
 8007898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	b08b      	sub	sp, #44	; 0x2c
 800789e:	460c      	mov	r4, r1
 80078a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80078a4:	4616      	mov	r6, r2
 80078a6:	461f      	mov	r7, r3
 80078a8:	4605      	mov	r5, r0
 80078aa:	f001 f9c3 	bl	8008c34 <_localeconv_r>
 80078ae:	f8d0 b000 	ldr.w	fp, [r0]
 80078b2:	4658      	mov	r0, fp
 80078b4:	f7f8 fd14 	bl	80002e0 <strlen>
 80078b8:	2300      	movs	r3, #0
 80078ba:	9308      	str	r3, [sp, #32]
 80078bc:	f8d8 3000 	ldr.w	r3, [r8]
 80078c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80078c4:	6822      	ldr	r2, [r4, #0]
 80078c6:	3307      	adds	r3, #7
 80078c8:	f023 0307 	bic.w	r3, r3, #7
 80078cc:	f103 0108 	add.w	r1, r3, #8
 80078d0:	f8c8 1000 	str.w	r1, [r8]
 80078d4:	4682      	mov	sl, r0
 80078d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078da:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80078de:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007b40 <_printf_float+0x2a8>
 80078e2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80078e6:	eeb0 6bc0 	vabs.f64	d6, d0
 80078ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80078ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f2:	dd24      	ble.n	800793e <_printf_float+0xa6>
 80078f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80078f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fc:	d502      	bpl.n	8007904 <_printf_float+0x6c>
 80078fe:	232d      	movs	r3, #45	; 0x2d
 8007900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007904:	4b90      	ldr	r3, [pc, #576]	; (8007b48 <_printf_float+0x2b0>)
 8007906:	4891      	ldr	r0, [pc, #580]	; (8007b4c <_printf_float+0x2b4>)
 8007908:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800790c:	bf94      	ite	ls
 800790e:	4698      	movls	r8, r3
 8007910:	4680      	movhi	r8, r0
 8007912:	2303      	movs	r3, #3
 8007914:	6123      	str	r3, [r4, #16]
 8007916:	f022 0204 	bic.w	r2, r2, #4
 800791a:	2300      	movs	r3, #0
 800791c:	6022      	str	r2, [r4, #0]
 800791e:	9304      	str	r3, [sp, #16]
 8007920:	9700      	str	r7, [sp, #0]
 8007922:	4633      	mov	r3, r6
 8007924:	aa09      	add	r2, sp, #36	; 0x24
 8007926:	4621      	mov	r1, r4
 8007928:	4628      	mov	r0, r5
 800792a:	f000 f9d3 	bl	8007cd4 <_printf_common>
 800792e:	3001      	adds	r0, #1
 8007930:	f040 808a 	bne.w	8007a48 <_printf_float+0x1b0>
 8007934:	f04f 30ff 	mov.w	r0, #4294967295
 8007938:	b00b      	add	sp, #44	; 0x2c
 800793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007946:	d709      	bvc.n	800795c <_printf_float+0xc4>
 8007948:	ee10 3a90 	vmov	r3, s1
 800794c:	2b00      	cmp	r3, #0
 800794e:	bfbc      	itt	lt
 8007950:	232d      	movlt	r3, #45	; 0x2d
 8007952:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007956:	487e      	ldr	r0, [pc, #504]	; (8007b50 <_printf_float+0x2b8>)
 8007958:	4b7e      	ldr	r3, [pc, #504]	; (8007b54 <_printf_float+0x2bc>)
 800795a:	e7d5      	b.n	8007908 <_printf_float+0x70>
 800795c:	6863      	ldr	r3, [r4, #4]
 800795e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007962:	9104      	str	r1, [sp, #16]
 8007964:	1c59      	adds	r1, r3, #1
 8007966:	d13c      	bne.n	80079e2 <_printf_float+0x14a>
 8007968:	2306      	movs	r3, #6
 800796a:	6063      	str	r3, [r4, #4]
 800796c:	2300      	movs	r3, #0
 800796e:	9303      	str	r3, [sp, #12]
 8007970:	ab08      	add	r3, sp, #32
 8007972:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800797a:	ab07      	add	r3, sp, #28
 800797c:	6861      	ldr	r1, [r4, #4]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	6022      	str	r2, [r4, #0]
 8007982:	f10d 031b 	add.w	r3, sp, #27
 8007986:	4628      	mov	r0, r5
 8007988:	f7ff fef6 	bl	8007778 <__cvt>
 800798c:	9b04      	ldr	r3, [sp, #16]
 800798e:	9907      	ldr	r1, [sp, #28]
 8007990:	2b47      	cmp	r3, #71	; 0x47
 8007992:	4680      	mov	r8, r0
 8007994:	d108      	bne.n	80079a8 <_printf_float+0x110>
 8007996:	1cc8      	adds	r0, r1, #3
 8007998:	db02      	blt.n	80079a0 <_printf_float+0x108>
 800799a:	6863      	ldr	r3, [r4, #4]
 800799c:	4299      	cmp	r1, r3
 800799e:	dd41      	ble.n	8007a24 <_printf_float+0x18c>
 80079a0:	f1a9 0902 	sub.w	r9, r9, #2
 80079a4:	fa5f f989 	uxtb.w	r9, r9
 80079a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80079ac:	d820      	bhi.n	80079f0 <_printf_float+0x158>
 80079ae:	3901      	subs	r1, #1
 80079b0:	464a      	mov	r2, r9
 80079b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079b6:	9107      	str	r1, [sp, #28]
 80079b8:	f7ff ff30 	bl	800781c <__exponent>
 80079bc:	9a08      	ldr	r2, [sp, #32]
 80079be:	9004      	str	r0, [sp, #16]
 80079c0:	1813      	adds	r3, r2, r0
 80079c2:	2a01      	cmp	r2, #1
 80079c4:	6123      	str	r3, [r4, #16]
 80079c6:	dc02      	bgt.n	80079ce <_printf_float+0x136>
 80079c8:	6822      	ldr	r2, [r4, #0]
 80079ca:	07d2      	lsls	r2, r2, #31
 80079cc:	d501      	bpl.n	80079d2 <_printf_float+0x13a>
 80079ce:	3301      	adds	r3, #1
 80079d0:	6123      	str	r3, [r4, #16]
 80079d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0a2      	beq.n	8007920 <_printf_float+0x88>
 80079da:	232d      	movs	r3, #45	; 0x2d
 80079dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e0:	e79e      	b.n	8007920 <_printf_float+0x88>
 80079e2:	9904      	ldr	r1, [sp, #16]
 80079e4:	2947      	cmp	r1, #71	; 0x47
 80079e6:	d1c1      	bne.n	800796c <_printf_float+0xd4>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1bf      	bne.n	800796c <_printf_float+0xd4>
 80079ec:	2301      	movs	r3, #1
 80079ee:	e7bc      	b.n	800796a <_printf_float+0xd2>
 80079f0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80079f4:	d118      	bne.n	8007a28 <_printf_float+0x190>
 80079f6:	2900      	cmp	r1, #0
 80079f8:	6863      	ldr	r3, [r4, #4]
 80079fa:	dd0b      	ble.n	8007a14 <_printf_float+0x17c>
 80079fc:	6121      	str	r1, [r4, #16]
 80079fe:	b913      	cbnz	r3, 8007a06 <_printf_float+0x16e>
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	07d0      	lsls	r0, r2, #31
 8007a04:	d502      	bpl.n	8007a0c <_printf_float+0x174>
 8007a06:	3301      	adds	r3, #1
 8007a08:	440b      	add	r3, r1
 8007a0a:	6123      	str	r3, [r4, #16]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a10:	9304      	str	r3, [sp, #16]
 8007a12:	e7de      	b.n	80079d2 <_printf_float+0x13a>
 8007a14:	b913      	cbnz	r3, 8007a1c <_printf_float+0x184>
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	07d2      	lsls	r2, r2, #31
 8007a1a:	d501      	bpl.n	8007a20 <_printf_float+0x188>
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	e7f4      	b.n	8007a0a <_printf_float+0x172>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e7f2      	b.n	8007a0a <_printf_float+0x172>
 8007a24:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007a28:	9b08      	ldr	r3, [sp, #32]
 8007a2a:	4299      	cmp	r1, r3
 8007a2c:	db05      	blt.n	8007a3a <_printf_float+0x1a2>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	6121      	str	r1, [r4, #16]
 8007a32:	07d8      	lsls	r0, r3, #31
 8007a34:	d5ea      	bpl.n	8007a0c <_printf_float+0x174>
 8007a36:	1c4b      	adds	r3, r1, #1
 8007a38:	e7e7      	b.n	8007a0a <_printf_float+0x172>
 8007a3a:	2900      	cmp	r1, #0
 8007a3c:	bfd4      	ite	le
 8007a3e:	f1c1 0202 	rsble	r2, r1, #2
 8007a42:	2201      	movgt	r2, #1
 8007a44:	4413      	add	r3, r2
 8007a46:	e7e0      	b.n	8007a0a <_printf_float+0x172>
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	055a      	lsls	r2, r3, #21
 8007a4c:	d407      	bmi.n	8007a5e <_printf_float+0x1c6>
 8007a4e:	6923      	ldr	r3, [r4, #16]
 8007a50:	4642      	mov	r2, r8
 8007a52:	4631      	mov	r1, r6
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b8      	blx	r7
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d12a      	bne.n	8007ab2 <_printf_float+0x21a>
 8007a5c:	e76a      	b.n	8007934 <_printf_float+0x9c>
 8007a5e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007a62:	f240 80e2 	bls.w	8007c2a <_printf_float+0x392>
 8007a66:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007a6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a72:	d133      	bne.n	8007adc <_printf_float+0x244>
 8007a74:	4a38      	ldr	r2, [pc, #224]	; (8007b58 <_printf_float+0x2c0>)
 8007a76:	2301      	movs	r3, #1
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f43f af58 	beq.w	8007934 <_printf_float+0x9c>
 8007a84:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	db02      	blt.n	8007a92 <_printf_float+0x1fa>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	07d8      	lsls	r0, r3, #31
 8007a90:	d50f      	bpl.n	8007ab2 <_printf_float+0x21a>
 8007a92:	4653      	mov	r3, sl
 8007a94:	465a      	mov	r2, fp
 8007a96:	4631      	mov	r1, r6
 8007a98:	4628      	mov	r0, r5
 8007a9a:	47b8      	blx	r7
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	f43f af49 	beq.w	8007934 <_printf_float+0x9c>
 8007aa2:	f04f 0800 	mov.w	r8, #0
 8007aa6:	f104 091a 	add.w	r9, r4, #26
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	4543      	cmp	r3, r8
 8007ab0:	dc09      	bgt.n	8007ac6 <_printf_float+0x22e>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	079b      	lsls	r3, r3, #30
 8007ab6:	f100 8108 	bmi.w	8007cca <_printf_float+0x432>
 8007aba:	68e0      	ldr	r0, [r4, #12]
 8007abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007abe:	4298      	cmp	r0, r3
 8007ac0:	bfb8      	it	lt
 8007ac2:	4618      	movlt	r0, r3
 8007ac4:	e738      	b.n	8007938 <_printf_float+0xa0>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	464a      	mov	r2, r9
 8007aca:	4631      	mov	r1, r6
 8007acc:	4628      	mov	r0, r5
 8007ace:	47b8      	blx	r7
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	f43f af2f 	beq.w	8007934 <_printf_float+0x9c>
 8007ad6:	f108 0801 	add.w	r8, r8, #1
 8007ada:	e7e6      	b.n	8007aaa <_printf_float+0x212>
 8007adc:	9b07      	ldr	r3, [sp, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	dc3c      	bgt.n	8007b5c <_printf_float+0x2c4>
 8007ae2:	4a1d      	ldr	r2, [pc, #116]	; (8007b58 <_printf_float+0x2c0>)
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b8      	blx	r7
 8007aec:	3001      	adds	r0, #1
 8007aee:	f43f af21 	beq.w	8007934 <_printf_float+0x9c>
 8007af2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	d102      	bne.n	8007b00 <_printf_float+0x268>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	07d9      	lsls	r1, r3, #31
 8007afe:	d5d8      	bpl.n	8007ab2 <_printf_float+0x21a>
 8007b00:	4653      	mov	r3, sl
 8007b02:	465a      	mov	r2, fp
 8007b04:	4631      	mov	r1, r6
 8007b06:	4628      	mov	r0, r5
 8007b08:	47b8      	blx	r7
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	f43f af12 	beq.w	8007934 <_printf_float+0x9c>
 8007b10:	f04f 0900 	mov.w	r9, #0
 8007b14:	f104 0a1a 	add.w	sl, r4, #26
 8007b18:	9b07      	ldr	r3, [sp, #28]
 8007b1a:	425b      	negs	r3, r3
 8007b1c:	454b      	cmp	r3, r9
 8007b1e:	dc01      	bgt.n	8007b24 <_printf_float+0x28c>
 8007b20:	9b08      	ldr	r3, [sp, #32]
 8007b22:	e795      	b.n	8007a50 <_printf_float+0x1b8>
 8007b24:	2301      	movs	r3, #1
 8007b26:	4652      	mov	r2, sl
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b8      	blx	r7
 8007b2e:	3001      	adds	r0, #1
 8007b30:	f43f af00 	beq.w	8007934 <_printf_float+0x9c>
 8007b34:	f109 0901 	add.w	r9, r9, #1
 8007b38:	e7ee      	b.n	8007b18 <_printf_float+0x280>
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w
 8007b40:	ffffffff 	.word	0xffffffff
 8007b44:	7fefffff 	.word	0x7fefffff
 8007b48:	0800a4f0 	.word	0x0800a4f0
 8007b4c:	0800a4f4 	.word	0x0800a4f4
 8007b50:	0800a4fc 	.word	0x0800a4fc
 8007b54:	0800a4f8 	.word	0x0800a4f8
 8007b58:	0800a500 	.word	0x0800a500
 8007b5c:	9a08      	ldr	r2, [sp, #32]
 8007b5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b60:	429a      	cmp	r2, r3
 8007b62:	bfa8      	it	ge
 8007b64:	461a      	movge	r2, r3
 8007b66:	2a00      	cmp	r2, #0
 8007b68:	4691      	mov	r9, r2
 8007b6a:	dc38      	bgt.n	8007bde <_printf_float+0x346>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9305      	str	r3, [sp, #20]
 8007b70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b74:	f104 021a 	add.w	r2, r4, #26
 8007b78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b7a:	9905      	ldr	r1, [sp, #20]
 8007b7c:	9304      	str	r3, [sp, #16]
 8007b7e:	eba3 0309 	sub.w	r3, r3, r9
 8007b82:	428b      	cmp	r3, r1
 8007b84:	dc33      	bgt.n	8007bee <_printf_float+0x356>
 8007b86:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	db3c      	blt.n	8007c08 <_printf_float+0x370>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	07da      	lsls	r2, r3, #31
 8007b92:	d439      	bmi.n	8007c08 <_printf_float+0x370>
 8007b94:	9b08      	ldr	r3, [sp, #32]
 8007b96:	9a04      	ldr	r2, [sp, #16]
 8007b98:	9907      	ldr	r1, [sp, #28]
 8007b9a:	1a9a      	subs	r2, r3, r2
 8007b9c:	eba3 0901 	sub.w	r9, r3, r1
 8007ba0:	4591      	cmp	r9, r2
 8007ba2:	bfa8      	it	ge
 8007ba4:	4691      	movge	r9, r2
 8007ba6:	f1b9 0f00 	cmp.w	r9, #0
 8007baa:	dc35      	bgt.n	8007c18 <_printf_float+0x380>
 8007bac:	f04f 0800 	mov.w	r8, #0
 8007bb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bb4:	f104 0a1a 	add.w	sl, r4, #26
 8007bb8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007bbc:	1a9b      	subs	r3, r3, r2
 8007bbe:	eba3 0309 	sub.w	r3, r3, r9
 8007bc2:	4543      	cmp	r3, r8
 8007bc4:	f77f af75 	ble.w	8007ab2 <_printf_float+0x21a>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4652      	mov	r2, sl
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4628      	mov	r0, r5
 8007bd0:	47b8      	blx	r7
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	f43f aeae 	beq.w	8007934 <_printf_float+0x9c>
 8007bd8:	f108 0801 	add.w	r8, r8, #1
 8007bdc:	e7ec      	b.n	8007bb8 <_printf_float+0x320>
 8007bde:	4613      	mov	r3, r2
 8007be0:	4631      	mov	r1, r6
 8007be2:	4642      	mov	r2, r8
 8007be4:	4628      	mov	r0, r5
 8007be6:	47b8      	blx	r7
 8007be8:	3001      	adds	r0, #1
 8007bea:	d1bf      	bne.n	8007b6c <_printf_float+0x2d4>
 8007bec:	e6a2      	b.n	8007934 <_printf_float+0x9c>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4631      	mov	r1, r6
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	9204      	str	r2, [sp, #16]
 8007bf6:	47b8      	blx	r7
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	f43f ae9b 	beq.w	8007934 <_printf_float+0x9c>
 8007bfe:	9b05      	ldr	r3, [sp, #20]
 8007c00:	9a04      	ldr	r2, [sp, #16]
 8007c02:	3301      	adds	r3, #1
 8007c04:	9305      	str	r3, [sp, #20]
 8007c06:	e7b7      	b.n	8007b78 <_printf_float+0x2e0>
 8007c08:	4653      	mov	r3, sl
 8007c0a:	465a      	mov	r2, fp
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4628      	mov	r0, r5
 8007c10:	47b8      	blx	r7
 8007c12:	3001      	adds	r0, #1
 8007c14:	d1be      	bne.n	8007b94 <_printf_float+0x2fc>
 8007c16:	e68d      	b.n	8007934 <_printf_float+0x9c>
 8007c18:	9a04      	ldr	r2, [sp, #16]
 8007c1a:	464b      	mov	r3, r9
 8007c1c:	4442      	add	r2, r8
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4628      	mov	r0, r5
 8007c22:	47b8      	blx	r7
 8007c24:	3001      	adds	r0, #1
 8007c26:	d1c1      	bne.n	8007bac <_printf_float+0x314>
 8007c28:	e684      	b.n	8007934 <_printf_float+0x9c>
 8007c2a:	9a08      	ldr	r2, [sp, #32]
 8007c2c:	2a01      	cmp	r2, #1
 8007c2e:	dc01      	bgt.n	8007c34 <_printf_float+0x39c>
 8007c30:	07db      	lsls	r3, r3, #31
 8007c32:	d537      	bpl.n	8007ca4 <_printf_float+0x40c>
 8007c34:	2301      	movs	r3, #1
 8007c36:	4642      	mov	r2, r8
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	47b8      	blx	r7
 8007c3e:	3001      	adds	r0, #1
 8007c40:	f43f ae78 	beq.w	8007934 <_printf_float+0x9c>
 8007c44:	4653      	mov	r3, sl
 8007c46:	465a      	mov	r2, fp
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	47b8      	blx	r7
 8007c4e:	3001      	adds	r0, #1
 8007c50:	f43f ae70 	beq.w	8007934 <_printf_float+0x9c>
 8007c54:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007c58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c60:	d01b      	beq.n	8007c9a <_printf_float+0x402>
 8007c62:	9b08      	ldr	r3, [sp, #32]
 8007c64:	f108 0201 	add.w	r2, r8, #1
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b8      	blx	r7
 8007c70:	3001      	adds	r0, #1
 8007c72:	d10e      	bne.n	8007c92 <_printf_float+0x3fa>
 8007c74:	e65e      	b.n	8007934 <_printf_float+0x9c>
 8007c76:	2301      	movs	r3, #1
 8007c78:	464a      	mov	r2, r9
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	f43f ae57 	beq.w	8007934 <_printf_float+0x9c>
 8007c86:	f108 0801 	add.w	r8, r8, #1
 8007c8a:	9b08      	ldr	r3, [sp, #32]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	4543      	cmp	r3, r8
 8007c90:	dcf1      	bgt.n	8007c76 <_printf_float+0x3de>
 8007c92:	9b04      	ldr	r3, [sp, #16]
 8007c94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c98:	e6db      	b.n	8007a52 <_printf_float+0x1ba>
 8007c9a:	f04f 0800 	mov.w	r8, #0
 8007c9e:	f104 091a 	add.w	r9, r4, #26
 8007ca2:	e7f2      	b.n	8007c8a <_printf_float+0x3f2>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	4642      	mov	r2, r8
 8007ca8:	e7df      	b.n	8007c6a <_printf_float+0x3d2>
 8007caa:	2301      	movs	r3, #1
 8007cac:	464a      	mov	r2, r9
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b8      	blx	r7
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	f43f ae3d 	beq.w	8007934 <_printf_float+0x9c>
 8007cba:	f108 0801 	add.w	r8, r8, #1
 8007cbe:	68e3      	ldr	r3, [r4, #12]
 8007cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cc2:	1a5b      	subs	r3, r3, r1
 8007cc4:	4543      	cmp	r3, r8
 8007cc6:	dcf0      	bgt.n	8007caa <_printf_float+0x412>
 8007cc8:	e6f7      	b.n	8007aba <_printf_float+0x222>
 8007cca:	f04f 0800 	mov.w	r8, #0
 8007cce:	f104 0919 	add.w	r9, r4, #25
 8007cd2:	e7f4      	b.n	8007cbe <_printf_float+0x426>

08007cd4 <_printf_common>:
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	4616      	mov	r6, r2
 8007cda:	4699      	mov	r9, r3
 8007cdc:	688a      	ldr	r2, [r1, #8]
 8007cde:	690b      	ldr	r3, [r1, #16]
 8007ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	bfb8      	it	lt
 8007ce8:	4613      	movlt	r3, r2
 8007cea:	6033      	str	r3, [r6, #0]
 8007cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	b10a      	cbz	r2, 8007cfa <_printf_common+0x26>
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	0699      	lsls	r1, r3, #26
 8007cfe:	bf42      	ittt	mi
 8007d00:	6833      	ldrmi	r3, [r6, #0]
 8007d02:	3302      	addmi	r3, #2
 8007d04:	6033      	strmi	r3, [r6, #0]
 8007d06:	6825      	ldr	r5, [r4, #0]
 8007d08:	f015 0506 	ands.w	r5, r5, #6
 8007d0c:	d106      	bne.n	8007d1c <_printf_common+0x48>
 8007d0e:	f104 0a19 	add.w	sl, r4, #25
 8007d12:	68e3      	ldr	r3, [r4, #12]
 8007d14:	6832      	ldr	r2, [r6, #0]
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dc26      	bgt.n	8007d6a <_printf_common+0x96>
 8007d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d20:	1e13      	subs	r3, r2, #0
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	bf18      	it	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	0692      	lsls	r2, r2, #26
 8007d2a:	d42b      	bmi.n	8007d84 <_printf_common+0xb0>
 8007d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d30:	4649      	mov	r1, r9
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d01e      	beq.n	8007d78 <_printf_common+0xa4>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	68e5      	ldr	r5, [r4, #12]
 8007d3e:	6832      	ldr	r2, [r6, #0]
 8007d40:	f003 0306 	and.w	r3, r3, #6
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	bf08      	it	eq
 8007d48:	1aad      	subeq	r5, r5, r2
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	6922      	ldr	r2, [r4, #16]
 8007d4e:	bf0c      	ite	eq
 8007d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d54:	2500      	movne	r5, #0
 8007d56:	4293      	cmp	r3, r2
 8007d58:	bfc4      	itt	gt
 8007d5a:	1a9b      	subgt	r3, r3, r2
 8007d5c:	18ed      	addgt	r5, r5, r3
 8007d5e:	2600      	movs	r6, #0
 8007d60:	341a      	adds	r4, #26
 8007d62:	42b5      	cmp	r5, r6
 8007d64:	d11a      	bne.n	8007d9c <_printf_common+0xc8>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e008      	b.n	8007d7c <_printf_common+0xa8>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4638      	mov	r0, r7
 8007d72:	47c0      	blx	r8
 8007d74:	3001      	adds	r0, #1
 8007d76:	d103      	bne.n	8007d80 <_printf_common+0xac>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	3501      	adds	r5, #1
 8007d82:	e7c6      	b.n	8007d12 <_printf_common+0x3e>
 8007d84:	18e1      	adds	r1, r4, r3
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	2030      	movs	r0, #48	; 0x30
 8007d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d8e:	4422      	add	r2, r4
 8007d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d98:	3302      	adds	r3, #2
 8007d9a:	e7c7      	b.n	8007d2c <_printf_common+0x58>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4649      	mov	r1, r9
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c0      	blx	r8
 8007da6:	3001      	adds	r0, #1
 8007da8:	d0e6      	beq.n	8007d78 <_printf_common+0xa4>
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7d9      	b.n	8007d62 <_printf_common+0x8e>
	...

08007db0 <_printf_i>:
 8007db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	7e0f      	ldrb	r7, [r1, #24]
 8007db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007db8:	2f78      	cmp	r7, #120	; 0x78
 8007dba:	4691      	mov	r9, r2
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dc6:	d807      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dc8:	2f62      	cmp	r7, #98	; 0x62
 8007dca:	d80a      	bhi.n	8007de2 <_printf_i+0x32>
 8007dcc:	2f00      	cmp	r7, #0
 8007dce:	f000 80d8 	beq.w	8007f82 <_printf_i+0x1d2>
 8007dd2:	2f58      	cmp	r7, #88	; 0x58
 8007dd4:	f000 80a3 	beq.w	8007f1e <_printf_i+0x16e>
 8007dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007de0:	e03a      	b.n	8007e58 <_printf_i+0xa8>
 8007de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007de6:	2b15      	cmp	r3, #21
 8007de8:	d8f6      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dea:	a101      	add	r1, pc, #4	; (adr r1, 8007df0 <_printf_i+0x40>)
 8007dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007df0:	08007e49 	.word	0x08007e49
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007dd9 	.word	0x08007dd9
 8007dfc:	08007dd9 	.word	0x08007dd9
 8007e00:	08007dd9 	.word	0x08007dd9
 8007e04:	08007dd9 	.word	0x08007dd9
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007dd9 	.word	0x08007dd9
 8007e10:	08007dd9 	.word	0x08007dd9
 8007e14:	08007dd9 	.word	0x08007dd9
 8007e18:	08007dd9 	.word	0x08007dd9
 8007e1c:	08007f69 	.word	0x08007f69
 8007e20:	08007e8d 	.word	0x08007e8d
 8007e24:	08007f4b 	.word	0x08007f4b
 8007e28:	08007dd9 	.word	0x08007dd9
 8007e2c:	08007dd9 	.word	0x08007dd9
 8007e30:	08007f8b 	.word	0x08007f8b
 8007e34:	08007dd9 	.word	0x08007dd9
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007dd9 	.word	0x08007dd9
 8007e40:	08007dd9 	.word	0x08007dd9
 8007e44:	08007f53 	.word	0x08007f53
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	1d1a      	adds	r2, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	602a      	str	r2, [r5, #0]
 8007e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0a3      	b.n	8007fa4 <_printf_i+0x1f4>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	6829      	ldr	r1, [r5, #0]
 8007e60:	0606      	lsls	r6, r0, #24
 8007e62:	f101 0304 	add.w	r3, r1, #4
 8007e66:	d50a      	bpl.n	8007e7e <_printf_i+0xce>
 8007e68:	680e      	ldr	r6, [r1, #0]
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	da03      	bge.n	8007e78 <_printf_i+0xc8>
 8007e70:	232d      	movs	r3, #45	; 0x2d
 8007e72:	4276      	negs	r6, r6
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e78:	485e      	ldr	r0, [pc, #376]	; (8007ff4 <_printf_i+0x244>)
 8007e7a:	230a      	movs	r3, #10
 8007e7c:	e019      	b.n	8007eb2 <_printf_i+0x102>
 8007e7e:	680e      	ldr	r6, [r1, #0]
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e86:	bf18      	it	ne
 8007e88:	b236      	sxthne	r6, r6
 8007e8a:	e7ef      	b.n	8007e6c <_printf_i+0xbc>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	6820      	ldr	r0, [r4, #0]
 8007e90:	1d19      	adds	r1, r3, #4
 8007e92:	6029      	str	r1, [r5, #0]
 8007e94:	0601      	lsls	r1, r0, #24
 8007e96:	d501      	bpl.n	8007e9c <_printf_i+0xec>
 8007e98:	681e      	ldr	r6, [r3, #0]
 8007e9a:	e002      	b.n	8007ea2 <_printf_i+0xf2>
 8007e9c:	0646      	lsls	r6, r0, #25
 8007e9e:	d5fb      	bpl.n	8007e98 <_printf_i+0xe8>
 8007ea0:	881e      	ldrh	r6, [r3, #0]
 8007ea2:	4854      	ldr	r0, [pc, #336]	; (8007ff4 <_printf_i+0x244>)
 8007ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2308      	moveq	r3, #8
 8007eaa:	230a      	movne	r3, #10
 8007eac:	2100      	movs	r1, #0
 8007eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eb2:	6865      	ldr	r5, [r4, #4]
 8007eb4:	60a5      	str	r5, [r4, #8]
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	bfa2      	ittt	ge
 8007eba:	6821      	ldrge	r1, [r4, #0]
 8007ebc:	f021 0104 	bicge.w	r1, r1, #4
 8007ec0:	6021      	strge	r1, [r4, #0]
 8007ec2:	b90e      	cbnz	r6, 8007ec8 <_printf_i+0x118>
 8007ec4:	2d00      	cmp	r5, #0
 8007ec6:	d04d      	beq.n	8007f64 <_printf_i+0x1b4>
 8007ec8:	4615      	mov	r5, r2
 8007eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ece:	fb03 6711 	mls	r7, r3, r1, r6
 8007ed2:	5dc7      	ldrb	r7, [r0, r7]
 8007ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ed8:	4637      	mov	r7, r6
 8007eda:	42bb      	cmp	r3, r7
 8007edc:	460e      	mov	r6, r1
 8007ede:	d9f4      	bls.n	8007eca <_printf_i+0x11a>
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d10b      	bne.n	8007efc <_printf_i+0x14c>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	07de      	lsls	r6, r3, #31
 8007ee8:	d508      	bpl.n	8007efc <_printf_i+0x14c>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	6861      	ldr	r1, [r4, #4]
 8007eee:	4299      	cmp	r1, r3
 8007ef0:	bfde      	ittt	le
 8007ef2:	2330      	movle	r3, #48	; 0x30
 8007ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007efc:	1b52      	subs	r2, r2, r5
 8007efe:	6122      	str	r2, [r4, #16]
 8007f00:	f8cd a000 	str.w	sl, [sp]
 8007f04:	464b      	mov	r3, r9
 8007f06:	aa03      	add	r2, sp, #12
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff fee2 	bl	8007cd4 <_printf_common>
 8007f10:	3001      	adds	r0, #1
 8007f12:	d14c      	bne.n	8007fae <_printf_i+0x1fe>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	b004      	add	sp, #16
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1e:	4835      	ldr	r0, [pc, #212]	; (8007ff4 <_printf_i+0x244>)
 8007f20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f24:	6829      	ldr	r1, [r5, #0]
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f2c:	6029      	str	r1, [r5, #0]
 8007f2e:	061d      	lsls	r5, r3, #24
 8007f30:	d514      	bpl.n	8007f5c <_printf_i+0x1ac>
 8007f32:	07df      	lsls	r7, r3, #31
 8007f34:	bf44      	itt	mi
 8007f36:	f043 0320 	orrmi.w	r3, r3, #32
 8007f3a:	6023      	strmi	r3, [r4, #0]
 8007f3c:	b91e      	cbnz	r6, 8007f46 <_printf_i+0x196>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	f023 0320 	bic.w	r3, r3, #32
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	2310      	movs	r3, #16
 8007f48:	e7b0      	b.n	8007eac <_printf_i+0xfc>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f043 0320 	orr.w	r3, r3, #32
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	2378      	movs	r3, #120	; 0x78
 8007f54:	4828      	ldr	r0, [pc, #160]	; (8007ff8 <_printf_i+0x248>)
 8007f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f5a:	e7e3      	b.n	8007f24 <_printf_i+0x174>
 8007f5c:	0659      	lsls	r1, r3, #25
 8007f5e:	bf48      	it	mi
 8007f60:	b2b6      	uxthmi	r6, r6
 8007f62:	e7e6      	b.n	8007f32 <_printf_i+0x182>
 8007f64:	4615      	mov	r5, r2
 8007f66:	e7bb      	b.n	8007ee0 <_printf_i+0x130>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	6826      	ldr	r6, [r4, #0]
 8007f6c:	6961      	ldr	r1, [r4, #20]
 8007f6e:	1d18      	adds	r0, r3, #4
 8007f70:	6028      	str	r0, [r5, #0]
 8007f72:	0635      	lsls	r5, r6, #24
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	d501      	bpl.n	8007f7c <_printf_i+0x1cc>
 8007f78:	6019      	str	r1, [r3, #0]
 8007f7a:	e002      	b.n	8007f82 <_printf_i+0x1d2>
 8007f7c:	0670      	lsls	r0, r6, #25
 8007f7e:	d5fb      	bpl.n	8007f78 <_printf_i+0x1c8>
 8007f80:	8019      	strh	r1, [r3, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	4615      	mov	r5, r2
 8007f88:	e7ba      	b.n	8007f00 <_printf_i+0x150>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	1d1a      	adds	r2, r3, #4
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	6862      	ldr	r2, [r4, #4]
 8007f94:	2100      	movs	r1, #0
 8007f96:	4628      	mov	r0, r5
 8007f98:	f7f8 f9aa 	bl	80002f0 <memchr>
 8007f9c:	b108      	cbz	r0, 8007fa2 <_printf_i+0x1f2>
 8007f9e:	1b40      	subs	r0, r0, r5
 8007fa0:	6060      	str	r0, [r4, #4]
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fac:	e7a8      	b.n	8007f00 <_printf_i+0x150>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	47d0      	blx	sl
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d0ab      	beq.n	8007f14 <_printf_i+0x164>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	079b      	lsls	r3, r3, #30
 8007fc0:	d413      	bmi.n	8007fea <_printf_i+0x23a>
 8007fc2:	68e0      	ldr	r0, [r4, #12]
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	bfb8      	it	lt
 8007fca:	4618      	movlt	r0, r3
 8007fcc:	e7a4      	b.n	8007f18 <_printf_i+0x168>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d09b      	beq.n	8007f14 <_printf_i+0x164>
 8007fdc:	3501      	adds	r5, #1
 8007fde:	68e3      	ldr	r3, [r4, #12]
 8007fe0:	9903      	ldr	r1, [sp, #12]
 8007fe2:	1a5b      	subs	r3, r3, r1
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	dcf2      	bgt.n	8007fce <_printf_i+0x21e>
 8007fe8:	e7eb      	b.n	8007fc2 <_printf_i+0x212>
 8007fea:	2500      	movs	r5, #0
 8007fec:	f104 0619 	add.w	r6, r4, #25
 8007ff0:	e7f5      	b.n	8007fde <_printf_i+0x22e>
 8007ff2:	bf00      	nop
 8007ff4:	0800a502 	.word	0x0800a502
 8007ff8:	0800a513 	.word	0x0800a513

08007ffc <siprintf>:
 8007ffc:	b40e      	push	{r1, r2, r3}
 8007ffe:	b500      	push	{lr}
 8008000:	b09c      	sub	sp, #112	; 0x70
 8008002:	ab1d      	add	r3, sp, #116	; 0x74
 8008004:	9002      	str	r0, [sp, #8]
 8008006:	9006      	str	r0, [sp, #24]
 8008008:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800800c:	4809      	ldr	r0, [pc, #36]	; (8008034 <siprintf+0x38>)
 800800e:	9107      	str	r1, [sp, #28]
 8008010:	9104      	str	r1, [sp, #16]
 8008012:	4909      	ldr	r1, [pc, #36]	; (8008038 <siprintf+0x3c>)
 8008014:	f853 2b04 	ldr.w	r2, [r3], #4
 8008018:	9105      	str	r1, [sp, #20]
 800801a:	6800      	ldr	r0, [r0, #0]
 800801c:	9301      	str	r3, [sp, #4]
 800801e:	a902      	add	r1, sp, #8
 8008020:	f001 faf8 	bl	8009614 <_svfiprintf_r>
 8008024:	9b02      	ldr	r3, [sp, #8]
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]
 800802a:	b01c      	add	sp, #112	; 0x70
 800802c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008030:	b003      	add	sp, #12
 8008032:	4770      	bx	lr
 8008034:	24000010 	.word	0x24000010
 8008038:	ffff0208 	.word	0xffff0208

0800803c <quorem>:
 800803c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	6903      	ldr	r3, [r0, #16]
 8008042:	690c      	ldr	r4, [r1, #16]
 8008044:	42a3      	cmp	r3, r4
 8008046:	4607      	mov	r7, r0
 8008048:	f2c0 8081 	blt.w	800814e <quorem+0x112>
 800804c:	3c01      	subs	r4, #1
 800804e:	f101 0814 	add.w	r8, r1, #20
 8008052:	f100 0514 	add.w	r5, r0, #20
 8008056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008060:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008064:	3301      	adds	r3, #1
 8008066:	429a      	cmp	r2, r3
 8008068:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800806c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008070:	fbb2 f6f3 	udiv	r6, r2, r3
 8008074:	d331      	bcc.n	80080da <quorem+0x9e>
 8008076:	f04f 0e00 	mov.w	lr, #0
 800807a:	4640      	mov	r0, r8
 800807c:	46ac      	mov	ip, r5
 800807e:	46f2      	mov	sl, lr
 8008080:	f850 2b04 	ldr.w	r2, [r0], #4
 8008084:	b293      	uxth	r3, r2
 8008086:	fb06 e303 	mla	r3, r6, r3, lr
 800808a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800808e:	b29b      	uxth	r3, r3
 8008090:	ebaa 0303 	sub.w	r3, sl, r3
 8008094:	f8dc a000 	ldr.w	sl, [ip]
 8008098:	0c12      	lsrs	r2, r2, #16
 800809a:	fa13 f38a 	uxtah	r3, r3, sl
 800809e:	fb06 e202 	mla	r2, r6, r2, lr
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	9b00      	ldr	r3, [sp, #0]
 80080a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080aa:	b292      	uxth	r2, r2
 80080ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80080b8:	4581      	cmp	r9, r0
 80080ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080be:	f84c 3b04 	str.w	r3, [ip], #4
 80080c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080c6:	d2db      	bcs.n	8008080 <quorem+0x44>
 80080c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80080cc:	b92b      	cbnz	r3, 80080da <quorem+0x9e>
 80080ce:	9b01      	ldr	r3, [sp, #4]
 80080d0:	3b04      	subs	r3, #4
 80080d2:	429d      	cmp	r5, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	d32e      	bcc.n	8008136 <quorem+0xfa>
 80080d8:	613c      	str	r4, [r7, #16]
 80080da:	4638      	mov	r0, r7
 80080dc:	f001 f846 	bl	800916c <__mcmp>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	db24      	blt.n	800812e <quorem+0xf2>
 80080e4:	3601      	adds	r6, #1
 80080e6:	4628      	mov	r0, r5
 80080e8:	f04f 0c00 	mov.w	ip, #0
 80080ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80080f0:	f8d0 e000 	ldr.w	lr, [r0]
 80080f4:	b293      	uxth	r3, r2
 80080f6:	ebac 0303 	sub.w	r3, ip, r3
 80080fa:	0c12      	lsrs	r2, r2, #16
 80080fc:	fa13 f38e 	uxtah	r3, r3, lr
 8008100:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008104:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008108:	b29b      	uxth	r3, r3
 800810a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800810e:	45c1      	cmp	r9, r8
 8008110:	f840 3b04 	str.w	r3, [r0], #4
 8008114:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008118:	d2e8      	bcs.n	80080ec <quorem+0xb0>
 800811a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800811e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008122:	b922      	cbnz	r2, 800812e <quorem+0xf2>
 8008124:	3b04      	subs	r3, #4
 8008126:	429d      	cmp	r5, r3
 8008128:	461a      	mov	r2, r3
 800812a:	d30a      	bcc.n	8008142 <quorem+0x106>
 800812c:	613c      	str	r4, [r7, #16]
 800812e:	4630      	mov	r0, r6
 8008130:	b003      	add	sp, #12
 8008132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008136:	6812      	ldr	r2, [r2, #0]
 8008138:	3b04      	subs	r3, #4
 800813a:	2a00      	cmp	r2, #0
 800813c:	d1cc      	bne.n	80080d8 <quorem+0x9c>
 800813e:	3c01      	subs	r4, #1
 8008140:	e7c7      	b.n	80080d2 <quorem+0x96>
 8008142:	6812      	ldr	r2, [r2, #0]
 8008144:	3b04      	subs	r3, #4
 8008146:	2a00      	cmp	r2, #0
 8008148:	d1f0      	bne.n	800812c <quorem+0xf0>
 800814a:	3c01      	subs	r4, #1
 800814c:	e7eb      	b.n	8008126 <quorem+0xea>
 800814e:	2000      	movs	r0, #0
 8008150:	e7ee      	b.n	8008130 <quorem+0xf4>
 8008152:	0000      	movs	r0, r0
 8008154:	0000      	movs	r0, r0
	...

08008158 <_dtoa_r>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	ed2d 8b02 	vpush	{d8}
 8008160:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008162:	b091      	sub	sp, #68	; 0x44
 8008164:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008168:	ec59 8b10 	vmov	r8, r9, d0
 800816c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800816e:	9106      	str	r1, [sp, #24]
 8008170:	4606      	mov	r6, r0
 8008172:	9208      	str	r2, [sp, #32]
 8008174:	930c      	str	r3, [sp, #48]	; 0x30
 8008176:	b975      	cbnz	r5, 8008196 <_dtoa_r+0x3e>
 8008178:	2010      	movs	r0, #16
 800817a:	f000 fd5f 	bl	8008c3c <malloc>
 800817e:	4602      	mov	r2, r0
 8008180:	6270      	str	r0, [r6, #36]	; 0x24
 8008182:	b920      	cbnz	r0, 800818e <_dtoa_r+0x36>
 8008184:	4baa      	ldr	r3, [pc, #680]	; (8008430 <_dtoa_r+0x2d8>)
 8008186:	21ea      	movs	r1, #234	; 0xea
 8008188:	48aa      	ldr	r0, [pc, #680]	; (8008434 <_dtoa_r+0x2dc>)
 800818a:	f001 fb53 	bl	8009834 <__assert_func>
 800818e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008192:	6005      	str	r5, [r0, #0]
 8008194:	60c5      	str	r5, [r0, #12]
 8008196:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008198:	6819      	ldr	r1, [r3, #0]
 800819a:	b151      	cbz	r1, 80081b2 <_dtoa_r+0x5a>
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	604a      	str	r2, [r1, #4]
 80081a0:	2301      	movs	r3, #1
 80081a2:	4093      	lsls	r3, r2
 80081a4:	608b      	str	r3, [r1, #8]
 80081a6:	4630      	mov	r0, r6
 80081a8:	f000 fd9e 	bl	8008ce8 <_Bfree>
 80081ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	f1b9 0300 	subs.w	r3, r9, #0
 80081b6:	bfbb      	ittet	lt
 80081b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081bc:	9303      	strlt	r3, [sp, #12]
 80081be:	2300      	movge	r3, #0
 80081c0:	2201      	movlt	r2, #1
 80081c2:	bfac      	ite	ge
 80081c4:	6023      	strge	r3, [r4, #0]
 80081c6:	6022      	strlt	r2, [r4, #0]
 80081c8:	4b9b      	ldr	r3, [pc, #620]	; (8008438 <_dtoa_r+0x2e0>)
 80081ca:	9c03      	ldr	r4, [sp, #12]
 80081cc:	43a3      	bics	r3, r4
 80081ce:	d11c      	bne.n	800820a <_dtoa_r+0xb2>
 80081d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80081dc:	ea53 0308 	orrs.w	r3, r3, r8
 80081e0:	f000 84fd 	beq.w	8008bde <_dtoa_r+0xa86>
 80081e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081e6:	b963      	cbnz	r3, 8008202 <_dtoa_r+0xaa>
 80081e8:	4b94      	ldr	r3, [pc, #592]	; (800843c <_dtoa_r+0x2e4>)
 80081ea:	e01f      	b.n	800822c <_dtoa_r+0xd4>
 80081ec:	4b94      	ldr	r3, [pc, #592]	; (8008440 <_dtoa_r+0x2e8>)
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	3308      	adds	r3, #8
 80081f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	9801      	ldr	r0, [sp, #4]
 80081f8:	b011      	add	sp, #68	; 0x44
 80081fa:	ecbd 8b02 	vpop	{d8}
 80081fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008202:	4b8e      	ldr	r3, [pc, #568]	; (800843c <_dtoa_r+0x2e4>)
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	3303      	adds	r3, #3
 8008208:	e7f3      	b.n	80081f2 <_dtoa_r+0x9a>
 800820a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800820e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008216:	d10b      	bne.n	8008230 <_dtoa_r+0xd8>
 8008218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800821a:	2301      	movs	r3, #1
 800821c:	6013      	str	r3, [r2, #0]
 800821e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 84d9 	beq.w	8008bd8 <_dtoa_r+0xa80>
 8008226:	4887      	ldr	r0, [pc, #540]	; (8008444 <_dtoa_r+0x2ec>)
 8008228:	6018      	str	r0, [r3, #0]
 800822a:	1e43      	subs	r3, r0, #1
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	e7e2      	b.n	80081f6 <_dtoa_r+0x9e>
 8008230:	a90f      	add	r1, sp, #60	; 0x3c
 8008232:	aa0e      	add	r2, sp, #56	; 0x38
 8008234:	4630      	mov	r0, r6
 8008236:	eeb0 0b48 	vmov.f64	d0, d8
 800823a:	f001 f83d 	bl	80092b8 <__d2b>
 800823e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008242:	4605      	mov	r5, r0
 8008244:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008246:	2900      	cmp	r1, #0
 8008248:	d046      	beq.n	80082d8 <_dtoa_r+0x180>
 800824a:	ee18 4a90 	vmov	r4, s17
 800824e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008252:	ec53 2b18 	vmov	r2, r3, d8
 8008256:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800825a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800825e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008262:	2400      	movs	r4, #0
 8008264:	ec43 2b16 	vmov	d6, r2, r3
 8008268:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800826c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008418 <_dtoa_r+0x2c0>
 8008270:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008274:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008420 <_dtoa_r+0x2c8>
 8008278:	eea7 6b05 	vfma.f64	d6, d7, d5
 800827c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008428 <_dtoa_r+0x2d0>
 8008280:	ee07 1a90 	vmov	s15, r1
 8008284:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008288:	eeb0 7b46 	vmov.f64	d7, d6
 800828c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008290:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008294:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829c:	ee16 ba90 	vmov	fp, s13
 80082a0:	940a      	str	r4, [sp, #40]	; 0x28
 80082a2:	d508      	bpl.n	80082b6 <_dtoa_r+0x15e>
 80082a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80082a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80082ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b0:	bf18      	it	ne
 80082b2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80082b6:	f1bb 0f16 	cmp.w	fp, #22
 80082ba:	d82f      	bhi.n	800831c <_dtoa_r+0x1c4>
 80082bc:	4b62      	ldr	r3, [pc, #392]	; (8008448 <_dtoa_r+0x2f0>)
 80082be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082c2:	ed93 7b00 	vldr	d7, [r3]
 80082c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80082ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ce:	d501      	bpl.n	80082d4 <_dtoa_r+0x17c>
 80082d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082d4:	2300      	movs	r3, #0
 80082d6:	e022      	b.n	800831e <_dtoa_r+0x1c6>
 80082d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80082da:	4401      	add	r1, r0
 80082dc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80082e0:	2b20      	cmp	r3, #32
 80082e2:	bfc1      	itttt	gt
 80082e4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082e8:	fa04 f303 	lslgt.w	r3, r4, r3
 80082ec:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80082f0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80082f4:	bfd6      	itet	le
 80082f6:	f1c3 0320 	rsble	r3, r3, #32
 80082fa:	ea43 0808 	orrgt.w	r8, r3, r8
 80082fe:	fa08 f803 	lslle.w	r8, r8, r3
 8008302:	ee07 8a90 	vmov	s15, r8
 8008306:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800830a:	3901      	subs	r1, #1
 800830c:	ee17 4a90 	vmov	r4, s15
 8008310:	ec53 2b17 	vmov	r2, r3, d7
 8008314:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008318:	2401      	movs	r4, #1
 800831a:	e7a3      	b.n	8008264 <_dtoa_r+0x10c>
 800831c:	2301      	movs	r3, #1
 800831e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008320:	1a43      	subs	r3, r0, r1
 8008322:	1e5a      	subs	r2, r3, #1
 8008324:	bf45      	ittet	mi
 8008326:	f1c3 0301 	rsbmi	r3, r3, #1
 800832a:	9304      	strmi	r3, [sp, #16]
 800832c:	2300      	movpl	r3, #0
 800832e:	2300      	movmi	r3, #0
 8008330:	9205      	str	r2, [sp, #20]
 8008332:	bf54      	ite	pl
 8008334:	9304      	strpl	r3, [sp, #16]
 8008336:	9305      	strmi	r3, [sp, #20]
 8008338:	f1bb 0f00 	cmp.w	fp, #0
 800833c:	db18      	blt.n	8008370 <_dtoa_r+0x218>
 800833e:	9b05      	ldr	r3, [sp, #20]
 8008340:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008344:	445b      	add	r3, fp
 8008346:	9305      	str	r3, [sp, #20]
 8008348:	2300      	movs	r3, #0
 800834a:	9a06      	ldr	r2, [sp, #24]
 800834c:	2a09      	cmp	r2, #9
 800834e:	d849      	bhi.n	80083e4 <_dtoa_r+0x28c>
 8008350:	2a05      	cmp	r2, #5
 8008352:	bfc4      	itt	gt
 8008354:	3a04      	subgt	r2, #4
 8008356:	9206      	strgt	r2, [sp, #24]
 8008358:	9a06      	ldr	r2, [sp, #24]
 800835a:	f1a2 0202 	sub.w	r2, r2, #2
 800835e:	bfcc      	ite	gt
 8008360:	2400      	movgt	r4, #0
 8008362:	2401      	movle	r4, #1
 8008364:	2a03      	cmp	r2, #3
 8008366:	d848      	bhi.n	80083fa <_dtoa_r+0x2a2>
 8008368:	e8df f002 	tbb	[pc, r2]
 800836c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008370:	9b04      	ldr	r3, [sp, #16]
 8008372:	2200      	movs	r2, #0
 8008374:	eba3 030b 	sub.w	r3, r3, fp
 8008378:	9304      	str	r3, [sp, #16]
 800837a:	9209      	str	r2, [sp, #36]	; 0x24
 800837c:	f1cb 0300 	rsb	r3, fp, #0
 8008380:	e7e3      	b.n	800834a <_dtoa_r+0x1f2>
 8008382:	2200      	movs	r2, #0
 8008384:	9207      	str	r2, [sp, #28]
 8008386:	9a08      	ldr	r2, [sp, #32]
 8008388:	2a00      	cmp	r2, #0
 800838a:	dc39      	bgt.n	8008400 <_dtoa_r+0x2a8>
 800838c:	f04f 0a01 	mov.w	sl, #1
 8008390:	46d1      	mov	r9, sl
 8008392:	4652      	mov	r2, sl
 8008394:	f8cd a020 	str.w	sl, [sp, #32]
 8008398:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800839a:	2100      	movs	r1, #0
 800839c:	6079      	str	r1, [r7, #4]
 800839e:	2004      	movs	r0, #4
 80083a0:	f100 0c14 	add.w	ip, r0, #20
 80083a4:	4594      	cmp	ip, r2
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	d92f      	bls.n	800840a <_dtoa_r+0x2b2>
 80083aa:	4630      	mov	r0, r6
 80083ac:	930d      	str	r3, [sp, #52]	; 0x34
 80083ae:	f000 fc5b 	bl	8008c68 <_Balloc>
 80083b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083b4:	9001      	str	r0, [sp, #4]
 80083b6:	4602      	mov	r2, r0
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d149      	bne.n	8008450 <_dtoa_r+0x2f8>
 80083bc:	4b23      	ldr	r3, [pc, #140]	; (800844c <_dtoa_r+0x2f4>)
 80083be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083c2:	e6e1      	b.n	8008188 <_dtoa_r+0x30>
 80083c4:	2201      	movs	r2, #1
 80083c6:	e7dd      	b.n	8008384 <_dtoa_r+0x22c>
 80083c8:	2200      	movs	r2, #0
 80083ca:	9207      	str	r2, [sp, #28]
 80083cc:	9a08      	ldr	r2, [sp, #32]
 80083ce:	eb0b 0a02 	add.w	sl, fp, r2
 80083d2:	f10a 0901 	add.w	r9, sl, #1
 80083d6:	464a      	mov	r2, r9
 80083d8:	2a01      	cmp	r2, #1
 80083da:	bfb8      	it	lt
 80083dc:	2201      	movlt	r2, #1
 80083de:	e7db      	b.n	8008398 <_dtoa_r+0x240>
 80083e0:	2201      	movs	r2, #1
 80083e2:	e7f2      	b.n	80083ca <_dtoa_r+0x272>
 80083e4:	2401      	movs	r4, #1
 80083e6:	2200      	movs	r2, #0
 80083e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80083ec:	f04f 3aff 	mov.w	sl, #4294967295
 80083f0:	2100      	movs	r1, #0
 80083f2:	46d1      	mov	r9, sl
 80083f4:	2212      	movs	r2, #18
 80083f6:	9108      	str	r1, [sp, #32]
 80083f8:	e7ce      	b.n	8008398 <_dtoa_r+0x240>
 80083fa:	2201      	movs	r2, #1
 80083fc:	9207      	str	r2, [sp, #28]
 80083fe:	e7f5      	b.n	80083ec <_dtoa_r+0x294>
 8008400:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008404:	46d1      	mov	r9, sl
 8008406:	4652      	mov	r2, sl
 8008408:	e7c6      	b.n	8008398 <_dtoa_r+0x240>
 800840a:	3101      	adds	r1, #1
 800840c:	6079      	str	r1, [r7, #4]
 800840e:	0040      	lsls	r0, r0, #1
 8008410:	e7c6      	b.n	80083a0 <_dtoa_r+0x248>
 8008412:	bf00      	nop
 8008414:	f3af 8000 	nop.w
 8008418:	636f4361 	.word	0x636f4361
 800841c:	3fd287a7 	.word	0x3fd287a7
 8008420:	8b60c8b3 	.word	0x8b60c8b3
 8008424:	3fc68a28 	.word	0x3fc68a28
 8008428:	509f79fb 	.word	0x509f79fb
 800842c:	3fd34413 	.word	0x3fd34413
 8008430:	0800a531 	.word	0x0800a531
 8008434:	0800a548 	.word	0x0800a548
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	0800a52d 	.word	0x0800a52d
 8008440:	0800a524 	.word	0x0800a524
 8008444:	0800a501 	.word	0x0800a501
 8008448:	0800a638 	.word	0x0800a638
 800844c:	0800a5a3 	.word	0x0800a5a3
 8008450:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008452:	9901      	ldr	r1, [sp, #4]
 8008454:	6011      	str	r1, [r2, #0]
 8008456:	f1b9 0f0e 	cmp.w	r9, #14
 800845a:	d86c      	bhi.n	8008536 <_dtoa_r+0x3de>
 800845c:	2c00      	cmp	r4, #0
 800845e:	d06a      	beq.n	8008536 <_dtoa_r+0x3de>
 8008460:	f1bb 0f00 	cmp.w	fp, #0
 8008464:	f340 80a0 	ble.w	80085a8 <_dtoa_r+0x450>
 8008468:	49c1      	ldr	r1, [pc, #772]	; (8008770 <_dtoa_r+0x618>)
 800846a:	f00b 020f 	and.w	r2, fp, #15
 800846e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008472:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008476:	ed92 7b00 	vldr	d7, [r2]
 800847a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800847e:	f000 8087 	beq.w	8008590 <_dtoa_r+0x438>
 8008482:	4abc      	ldr	r2, [pc, #752]	; (8008774 <_dtoa_r+0x61c>)
 8008484:	ed92 6b08 	vldr	d6, [r2, #32]
 8008488:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800848c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008490:	f001 010f 	and.w	r1, r1, #15
 8008494:	2203      	movs	r2, #3
 8008496:	48b7      	ldr	r0, [pc, #732]	; (8008774 <_dtoa_r+0x61c>)
 8008498:	2900      	cmp	r1, #0
 800849a:	d17b      	bne.n	8008594 <_dtoa_r+0x43c>
 800849c:	ed9d 6b02 	vldr	d6, [sp, #8]
 80084a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80084a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084aa:	2900      	cmp	r1, #0
 80084ac:	f000 80a2 	beq.w	80085f4 <_dtoa_r+0x49c>
 80084b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80084b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80084bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c0:	f140 8098 	bpl.w	80085f4 <_dtoa_r+0x49c>
 80084c4:	f1b9 0f00 	cmp.w	r9, #0
 80084c8:	f000 8094 	beq.w	80085f4 <_dtoa_r+0x49c>
 80084cc:	f1ba 0f00 	cmp.w	sl, #0
 80084d0:	dd2f      	ble.n	8008532 <_dtoa_r+0x3da>
 80084d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80084d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80084da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084de:	f10b 37ff 	add.w	r7, fp, #4294967295
 80084e2:	3201      	adds	r2, #1
 80084e4:	4650      	mov	r0, sl
 80084e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80084ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80084ee:	ee07 2a90 	vmov	s15, r2
 80084f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80084f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80084fa:	ee15 4a90 	vmov	r4, s11
 80084fe:	ec52 1b15 	vmov	r1, r2, d5
 8008502:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008506:	2800      	cmp	r0, #0
 8008508:	d177      	bne.n	80085fa <_dtoa_r+0x4a2>
 800850a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800850e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008512:	ec42 1b17 	vmov	d7, r1, r2
 8008516:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800851a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851e:	f300 8263 	bgt.w	80089e8 <_dtoa_r+0x890>
 8008522:	eeb1 7b47 	vneg.f64	d7, d7
 8008526:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800852a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852e:	f100 8258 	bmi.w	80089e2 <_dtoa_r+0x88a>
 8008532:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008536:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008538:	2a00      	cmp	r2, #0
 800853a:	f2c0 811d 	blt.w	8008778 <_dtoa_r+0x620>
 800853e:	f1bb 0f0e 	cmp.w	fp, #14
 8008542:	f300 8119 	bgt.w	8008778 <_dtoa_r+0x620>
 8008546:	4b8a      	ldr	r3, [pc, #552]	; (8008770 <_dtoa_r+0x618>)
 8008548:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800854c:	ed93 6b00 	vldr	d6, [r3]
 8008550:	9b08      	ldr	r3, [sp, #32]
 8008552:	2b00      	cmp	r3, #0
 8008554:	f280 80b7 	bge.w	80086c6 <_dtoa_r+0x56e>
 8008558:	f1b9 0f00 	cmp.w	r9, #0
 800855c:	f300 80b3 	bgt.w	80086c6 <_dtoa_r+0x56e>
 8008560:	f040 823f 	bne.w	80089e2 <_dtoa_r+0x88a>
 8008564:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008568:	ee26 6b07 	vmul.f64	d6, d6, d7
 800856c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008570:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008578:	464c      	mov	r4, r9
 800857a:	464f      	mov	r7, r9
 800857c:	f280 8215 	bge.w	80089aa <_dtoa_r+0x852>
 8008580:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008584:	2331      	movs	r3, #49	; 0x31
 8008586:	f808 3b01 	strb.w	r3, [r8], #1
 800858a:	f10b 0b01 	add.w	fp, fp, #1
 800858e:	e211      	b.n	80089b4 <_dtoa_r+0x85c>
 8008590:	2202      	movs	r2, #2
 8008592:	e780      	b.n	8008496 <_dtoa_r+0x33e>
 8008594:	07cc      	lsls	r4, r1, #31
 8008596:	d504      	bpl.n	80085a2 <_dtoa_r+0x44a>
 8008598:	ed90 6b00 	vldr	d6, [r0]
 800859c:	3201      	adds	r2, #1
 800859e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085a2:	1049      	asrs	r1, r1, #1
 80085a4:	3008      	adds	r0, #8
 80085a6:	e777      	b.n	8008498 <_dtoa_r+0x340>
 80085a8:	d022      	beq.n	80085f0 <_dtoa_r+0x498>
 80085aa:	f1cb 0100 	rsb	r1, fp, #0
 80085ae:	4a70      	ldr	r2, [pc, #448]	; (8008770 <_dtoa_r+0x618>)
 80085b0:	f001 000f 	and.w	r0, r1, #15
 80085b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80085b8:	ed92 7b00 	vldr	d7, [r2]
 80085bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80085c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085c4:	486b      	ldr	r0, [pc, #428]	; (8008774 <_dtoa_r+0x61c>)
 80085c6:	1109      	asrs	r1, r1, #4
 80085c8:	2400      	movs	r4, #0
 80085ca:	2202      	movs	r2, #2
 80085cc:	b929      	cbnz	r1, 80085da <_dtoa_r+0x482>
 80085ce:	2c00      	cmp	r4, #0
 80085d0:	f43f af6a 	beq.w	80084a8 <_dtoa_r+0x350>
 80085d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085d8:	e766      	b.n	80084a8 <_dtoa_r+0x350>
 80085da:	07cf      	lsls	r7, r1, #31
 80085dc:	d505      	bpl.n	80085ea <_dtoa_r+0x492>
 80085de:	ed90 6b00 	vldr	d6, [r0]
 80085e2:	3201      	adds	r2, #1
 80085e4:	2401      	movs	r4, #1
 80085e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085ea:	1049      	asrs	r1, r1, #1
 80085ec:	3008      	adds	r0, #8
 80085ee:	e7ed      	b.n	80085cc <_dtoa_r+0x474>
 80085f0:	2202      	movs	r2, #2
 80085f2:	e759      	b.n	80084a8 <_dtoa_r+0x350>
 80085f4:	465f      	mov	r7, fp
 80085f6:	4648      	mov	r0, r9
 80085f8:	e775      	b.n	80084e6 <_dtoa_r+0x38e>
 80085fa:	ec42 1b17 	vmov	d7, r1, r2
 80085fe:	4a5c      	ldr	r2, [pc, #368]	; (8008770 <_dtoa_r+0x618>)
 8008600:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008604:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008608:	9a01      	ldr	r2, [sp, #4]
 800860a:	1814      	adds	r4, r2, r0
 800860c:	9a07      	ldr	r2, [sp, #28]
 800860e:	b352      	cbz	r2, 8008666 <_dtoa_r+0x50e>
 8008610:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008614:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008618:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800861c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008620:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008624:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008628:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800862c:	ee14 2a90 	vmov	r2, s9
 8008630:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008634:	3230      	adds	r2, #48	; 0x30
 8008636:	ee36 6b45 	vsub.f64	d6, d6, d5
 800863a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800863e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008642:	f808 2b01 	strb.w	r2, [r8], #1
 8008646:	d439      	bmi.n	80086bc <_dtoa_r+0x564>
 8008648:	ee32 5b46 	vsub.f64	d5, d2, d6
 800864c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008654:	d472      	bmi.n	800873c <_dtoa_r+0x5e4>
 8008656:	45a0      	cmp	r8, r4
 8008658:	f43f af6b 	beq.w	8008532 <_dtoa_r+0x3da>
 800865c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008660:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008664:	e7e0      	b.n	8008628 <_dtoa_r+0x4d0>
 8008666:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800866a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800866e:	4621      	mov	r1, r4
 8008670:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008674:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008678:	ee14 2a90 	vmov	r2, s9
 800867c:	3230      	adds	r2, #48	; 0x30
 800867e:	f808 2b01 	strb.w	r2, [r8], #1
 8008682:	45a0      	cmp	r8, r4
 8008684:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008688:	ee36 6b45 	vsub.f64	d6, d6, d5
 800868c:	d118      	bne.n	80086c0 <_dtoa_r+0x568>
 800868e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008692:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008696:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800869a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800869e:	dc4d      	bgt.n	800873c <_dtoa_r+0x5e4>
 80086a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80086a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80086a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ac:	f57f af41 	bpl.w	8008532 <_dtoa_r+0x3da>
 80086b0:	4688      	mov	r8, r1
 80086b2:	3901      	subs	r1, #1
 80086b4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80086b8:	2b30      	cmp	r3, #48	; 0x30
 80086ba:	d0f9      	beq.n	80086b0 <_dtoa_r+0x558>
 80086bc:	46bb      	mov	fp, r7
 80086be:	e02a      	b.n	8008716 <_dtoa_r+0x5be>
 80086c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80086c4:	e7d6      	b.n	8008674 <_dtoa_r+0x51c>
 80086c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80086ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80086d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80086d6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80086da:	ee15 3a10 	vmov	r3, s10
 80086de:	3330      	adds	r3, #48	; 0x30
 80086e0:	f808 3b01 	strb.w	r3, [r8], #1
 80086e4:	9b01      	ldr	r3, [sp, #4]
 80086e6:	eba8 0303 	sub.w	r3, r8, r3
 80086ea:	4599      	cmp	r9, r3
 80086ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80086f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80086f4:	d133      	bne.n	800875e <_dtoa_r+0x606>
 80086f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80086fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80086fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008702:	dc1a      	bgt.n	800873a <_dtoa_r+0x5e2>
 8008704:	eeb4 7b46 	vcmp.f64	d7, d6
 8008708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800870c:	d103      	bne.n	8008716 <_dtoa_r+0x5be>
 800870e:	ee15 3a10 	vmov	r3, s10
 8008712:	07d9      	lsls	r1, r3, #31
 8008714:	d411      	bmi.n	800873a <_dtoa_r+0x5e2>
 8008716:	4629      	mov	r1, r5
 8008718:	4630      	mov	r0, r6
 800871a:	f000 fae5 	bl	8008ce8 <_Bfree>
 800871e:	2300      	movs	r3, #0
 8008720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008722:	f888 3000 	strb.w	r3, [r8]
 8008726:	f10b 0301 	add.w	r3, fp, #1
 800872a:	6013      	str	r3, [r2, #0]
 800872c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800872e:	2b00      	cmp	r3, #0
 8008730:	f43f ad61 	beq.w	80081f6 <_dtoa_r+0x9e>
 8008734:	f8c3 8000 	str.w	r8, [r3]
 8008738:	e55d      	b.n	80081f6 <_dtoa_r+0x9e>
 800873a:	465f      	mov	r7, fp
 800873c:	4643      	mov	r3, r8
 800873e:	4698      	mov	r8, r3
 8008740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008744:	2a39      	cmp	r2, #57	; 0x39
 8008746:	d106      	bne.n	8008756 <_dtoa_r+0x5fe>
 8008748:	9a01      	ldr	r2, [sp, #4]
 800874a:	429a      	cmp	r2, r3
 800874c:	d1f7      	bne.n	800873e <_dtoa_r+0x5e6>
 800874e:	9901      	ldr	r1, [sp, #4]
 8008750:	2230      	movs	r2, #48	; 0x30
 8008752:	3701      	adds	r7, #1
 8008754:	700a      	strb	r2, [r1, #0]
 8008756:	781a      	ldrb	r2, [r3, #0]
 8008758:	3201      	adds	r2, #1
 800875a:	701a      	strb	r2, [r3, #0]
 800875c:	e7ae      	b.n	80086bc <_dtoa_r+0x564>
 800875e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008762:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800876a:	d1b2      	bne.n	80086d2 <_dtoa_r+0x57a>
 800876c:	e7d3      	b.n	8008716 <_dtoa_r+0x5be>
 800876e:	bf00      	nop
 8008770:	0800a638 	.word	0x0800a638
 8008774:	0800a610 	.word	0x0800a610
 8008778:	9907      	ldr	r1, [sp, #28]
 800877a:	2900      	cmp	r1, #0
 800877c:	f000 80d0 	beq.w	8008920 <_dtoa_r+0x7c8>
 8008780:	9906      	ldr	r1, [sp, #24]
 8008782:	2901      	cmp	r1, #1
 8008784:	f300 80b4 	bgt.w	80088f0 <_dtoa_r+0x798>
 8008788:	990a      	ldr	r1, [sp, #40]	; 0x28
 800878a:	2900      	cmp	r1, #0
 800878c:	f000 80ac 	beq.w	80088e8 <_dtoa_r+0x790>
 8008790:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008794:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008798:	461c      	mov	r4, r3
 800879a:	930a      	str	r3, [sp, #40]	; 0x28
 800879c:	9b04      	ldr	r3, [sp, #16]
 800879e:	4413      	add	r3, r2
 80087a0:	9304      	str	r3, [sp, #16]
 80087a2:	9b05      	ldr	r3, [sp, #20]
 80087a4:	2101      	movs	r1, #1
 80087a6:	4413      	add	r3, r2
 80087a8:	4630      	mov	r0, r6
 80087aa:	9305      	str	r3, [sp, #20]
 80087ac:	f000 fb54 	bl	8008e58 <__i2b>
 80087b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b2:	4607      	mov	r7, r0
 80087b4:	f1b8 0f00 	cmp.w	r8, #0
 80087b8:	dd0d      	ble.n	80087d6 <_dtoa_r+0x67e>
 80087ba:	9a05      	ldr	r2, [sp, #20]
 80087bc:	2a00      	cmp	r2, #0
 80087be:	dd0a      	ble.n	80087d6 <_dtoa_r+0x67e>
 80087c0:	4542      	cmp	r2, r8
 80087c2:	9904      	ldr	r1, [sp, #16]
 80087c4:	bfa8      	it	ge
 80087c6:	4642      	movge	r2, r8
 80087c8:	1a89      	subs	r1, r1, r2
 80087ca:	9104      	str	r1, [sp, #16]
 80087cc:	9905      	ldr	r1, [sp, #20]
 80087ce:	eba8 0802 	sub.w	r8, r8, r2
 80087d2:	1a8a      	subs	r2, r1, r2
 80087d4:	9205      	str	r2, [sp, #20]
 80087d6:	b303      	cbz	r3, 800881a <_dtoa_r+0x6c2>
 80087d8:	9a07      	ldr	r2, [sp, #28]
 80087da:	2a00      	cmp	r2, #0
 80087dc:	f000 80a5 	beq.w	800892a <_dtoa_r+0x7d2>
 80087e0:	2c00      	cmp	r4, #0
 80087e2:	dd13      	ble.n	800880c <_dtoa_r+0x6b4>
 80087e4:	4639      	mov	r1, r7
 80087e6:	4622      	mov	r2, r4
 80087e8:	4630      	mov	r0, r6
 80087ea:	930d      	str	r3, [sp, #52]	; 0x34
 80087ec:	f000 fbf4 	bl	8008fd8 <__pow5mult>
 80087f0:	462a      	mov	r2, r5
 80087f2:	4601      	mov	r1, r0
 80087f4:	4607      	mov	r7, r0
 80087f6:	4630      	mov	r0, r6
 80087f8:	f000 fb44 	bl	8008e84 <__multiply>
 80087fc:	4629      	mov	r1, r5
 80087fe:	900a      	str	r0, [sp, #40]	; 0x28
 8008800:	4630      	mov	r0, r6
 8008802:	f000 fa71 	bl	8008ce8 <_Bfree>
 8008806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800880a:	4615      	mov	r5, r2
 800880c:	1b1a      	subs	r2, r3, r4
 800880e:	d004      	beq.n	800881a <_dtoa_r+0x6c2>
 8008810:	4629      	mov	r1, r5
 8008812:	4630      	mov	r0, r6
 8008814:	f000 fbe0 	bl	8008fd8 <__pow5mult>
 8008818:	4605      	mov	r5, r0
 800881a:	2101      	movs	r1, #1
 800881c:	4630      	mov	r0, r6
 800881e:	f000 fb1b 	bl	8008e58 <__i2b>
 8008822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	4604      	mov	r4, r0
 8008828:	f340 8081 	ble.w	800892e <_dtoa_r+0x7d6>
 800882c:	461a      	mov	r2, r3
 800882e:	4601      	mov	r1, r0
 8008830:	4630      	mov	r0, r6
 8008832:	f000 fbd1 	bl	8008fd8 <__pow5mult>
 8008836:	9b06      	ldr	r3, [sp, #24]
 8008838:	2b01      	cmp	r3, #1
 800883a:	4604      	mov	r4, r0
 800883c:	dd7a      	ble.n	8008934 <_dtoa_r+0x7dc>
 800883e:	2300      	movs	r3, #0
 8008840:	930a      	str	r3, [sp, #40]	; 0x28
 8008842:	6922      	ldr	r2, [r4, #16]
 8008844:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008848:	6910      	ldr	r0, [r2, #16]
 800884a:	f000 fab5 	bl	8008db8 <__hi0bits>
 800884e:	f1c0 0020 	rsb	r0, r0, #32
 8008852:	9b05      	ldr	r3, [sp, #20]
 8008854:	4418      	add	r0, r3
 8008856:	f010 001f 	ands.w	r0, r0, #31
 800885a:	f000 808c 	beq.w	8008976 <_dtoa_r+0x81e>
 800885e:	f1c0 0220 	rsb	r2, r0, #32
 8008862:	2a04      	cmp	r2, #4
 8008864:	f340 8085 	ble.w	8008972 <_dtoa_r+0x81a>
 8008868:	f1c0 001c 	rsb	r0, r0, #28
 800886c:	9b04      	ldr	r3, [sp, #16]
 800886e:	4403      	add	r3, r0
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	9b05      	ldr	r3, [sp, #20]
 8008874:	4403      	add	r3, r0
 8008876:	4480      	add	r8, r0
 8008878:	9305      	str	r3, [sp, #20]
 800887a:	9b04      	ldr	r3, [sp, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	dd05      	ble.n	800888c <_dtoa_r+0x734>
 8008880:	4629      	mov	r1, r5
 8008882:	461a      	mov	r2, r3
 8008884:	4630      	mov	r0, r6
 8008886:	f000 fc01 	bl	800908c <__lshift>
 800888a:	4605      	mov	r5, r0
 800888c:	9b05      	ldr	r3, [sp, #20]
 800888e:	2b00      	cmp	r3, #0
 8008890:	dd05      	ble.n	800889e <_dtoa_r+0x746>
 8008892:	4621      	mov	r1, r4
 8008894:	461a      	mov	r2, r3
 8008896:	4630      	mov	r0, r6
 8008898:	f000 fbf8 	bl	800908c <__lshift>
 800889c:	4604      	mov	r4, r0
 800889e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d06a      	beq.n	800897a <_dtoa_r+0x822>
 80088a4:	4621      	mov	r1, r4
 80088a6:	4628      	mov	r0, r5
 80088a8:	f000 fc60 	bl	800916c <__mcmp>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	da64      	bge.n	800897a <_dtoa_r+0x822>
 80088b0:	2300      	movs	r3, #0
 80088b2:	4629      	mov	r1, r5
 80088b4:	220a      	movs	r2, #10
 80088b6:	4630      	mov	r0, r6
 80088b8:	f000 fa38 	bl	8008d2c <__multadd>
 80088bc:	9b07      	ldr	r3, [sp, #28]
 80088be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088c2:	4605      	mov	r5, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 8191 	beq.w	8008bec <_dtoa_r+0xa94>
 80088ca:	4639      	mov	r1, r7
 80088cc:	2300      	movs	r3, #0
 80088ce:	220a      	movs	r2, #10
 80088d0:	4630      	mov	r0, r6
 80088d2:	f000 fa2b 	bl	8008d2c <__multadd>
 80088d6:	f1ba 0f00 	cmp.w	sl, #0
 80088da:	4607      	mov	r7, r0
 80088dc:	f300 808d 	bgt.w	80089fa <_dtoa_r+0x8a2>
 80088e0:	9b06      	ldr	r3, [sp, #24]
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	dc50      	bgt.n	8008988 <_dtoa_r+0x830>
 80088e6:	e088      	b.n	80089fa <_dtoa_r+0x8a2>
 80088e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80088ee:	e751      	b.n	8008794 <_dtoa_r+0x63c>
 80088f0:	f109 34ff 	add.w	r4, r9, #4294967295
 80088f4:	42a3      	cmp	r3, r4
 80088f6:	bfbf      	itttt	lt
 80088f8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80088fa:	1ae3      	sublt	r3, r4, r3
 80088fc:	18d2      	addlt	r2, r2, r3
 80088fe:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008900:	bfb6      	itet	lt
 8008902:	4623      	movlt	r3, r4
 8008904:	1b1c      	subge	r4, r3, r4
 8008906:	2400      	movlt	r4, #0
 8008908:	f1b9 0f00 	cmp.w	r9, #0
 800890c:	bfb5      	itete	lt
 800890e:	9a04      	ldrlt	r2, [sp, #16]
 8008910:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008914:	eba2 0809 	sublt.w	r8, r2, r9
 8008918:	464a      	movge	r2, r9
 800891a:	bfb8      	it	lt
 800891c:	2200      	movlt	r2, #0
 800891e:	e73c      	b.n	800879a <_dtoa_r+0x642>
 8008920:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008924:	9f07      	ldr	r7, [sp, #28]
 8008926:	461c      	mov	r4, r3
 8008928:	e744      	b.n	80087b4 <_dtoa_r+0x65c>
 800892a:	461a      	mov	r2, r3
 800892c:	e770      	b.n	8008810 <_dtoa_r+0x6b8>
 800892e:	9b06      	ldr	r3, [sp, #24]
 8008930:	2b01      	cmp	r3, #1
 8008932:	dc18      	bgt.n	8008966 <_dtoa_r+0x80e>
 8008934:	9b02      	ldr	r3, [sp, #8]
 8008936:	b9b3      	cbnz	r3, 8008966 <_dtoa_r+0x80e>
 8008938:	9b03      	ldr	r3, [sp, #12]
 800893a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800893e:	b9a2      	cbnz	r2, 800896a <_dtoa_r+0x812>
 8008940:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008944:	0d12      	lsrs	r2, r2, #20
 8008946:	0512      	lsls	r2, r2, #20
 8008948:	b18a      	cbz	r2, 800896e <_dtoa_r+0x816>
 800894a:	9b04      	ldr	r3, [sp, #16]
 800894c:	3301      	adds	r3, #1
 800894e:	9304      	str	r3, [sp, #16]
 8008950:	9b05      	ldr	r3, [sp, #20]
 8008952:	3301      	adds	r3, #1
 8008954:	9305      	str	r3, [sp, #20]
 8008956:	2301      	movs	r3, #1
 8008958:	930a      	str	r3, [sp, #40]	; 0x28
 800895a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	f47f af70 	bne.w	8008842 <_dtoa_r+0x6ea>
 8008962:	2001      	movs	r0, #1
 8008964:	e775      	b.n	8008852 <_dtoa_r+0x6fa>
 8008966:	2300      	movs	r3, #0
 8008968:	e7f6      	b.n	8008958 <_dtoa_r+0x800>
 800896a:	9b02      	ldr	r3, [sp, #8]
 800896c:	e7f4      	b.n	8008958 <_dtoa_r+0x800>
 800896e:	920a      	str	r2, [sp, #40]	; 0x28
 8008970:	e7f3      	b.n	800895a <_dtoa_r+0x802>
 8008972:	d082      	beq.n	800887a <_dtoa_r+0x722>
 8008974:	4610      	mov	r0, r2
 8008976:	301c      	adds	r0, #28
 8008978:	e778      	b.n	800886c <_dtoa_r+0x714>
 800897a:	f1b9 0f00 	cmp.w	r9, #0
 800897e:	dc37      	bgt.n	80089f0 <_dtoa_r+0x898>
 8008980:	9b06      	ldr	r3, [sp, #24]
 8008982:	2b02      	cmp	r3, #2
 8008984:	dd34      	ble.n	80089f0 <_dtoa_r+0x898>
 8008986:	46ca      	mov	sl, r9
 8008988:	f1ba 0f00 	cmp.w	sl, #0
 800898c:	d10d      	bne.n	80089aa <_dtoa_r+0x852>
 800898e:	4621      	mov	r1, r4
 8008990:	4653      	mov	r3, sl
 8008992:	2205      	movs	r2, #5
 8008994:	4630      	mov	r0, r6
 8008996:	f000 f9c9 	bl	8008d2c <__multadd>
 800899a:	4601      	mov	r1, r0
 800899c:	4604      	mov	r4, r0
 800899e:	4628      	mov	r0, r5
 80089a0:	f000 fbe4 	bl	800916c <__mcmp>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f73f adeb 	bgt.w	8008580 <_dtoa_r+0x428>
 80089aa:	9b08      	ldr	r3, [sp, #32]
 80089ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80089b0:	ea6f 0b03 	mvn.w	fp, r3
 80089b4:	f04f 0900 	mov.w	r9, #0
 80089b8:	4621      	mov	r1, r4
 80089ba:	4630      	mov	r0, r6
 80089bc:	f000 f994 	bl	8008ce8 <_Bfree>
 80089c0:	2f00      	cmp	r7, #0
 80089c2:	f43f aea8 	beq.w	8008716 <_dtoa_r+0x5be>
 80089c6:	f1b9 0f00 	cmp.w	r9, #0
 80089ca:	d005      	beq.n	80089d8 <_dtoa_r+0x880>
 80089cc:	45b9      	cmp	r9, r7
 80089ce:	d003      	beq.n	80089d8 <_dtoa_r+0x880>
 80089d0:	4649      	mov	r1, r9
 80089d2:	4630      	mov	r0, r6
 80089d4:	f000 f988 	bl	8008ce8 <_Bfree>
 80089d8:	4639      	mov	r1, r7
 80089da:	4630      	mov	r0, r6
 80089dc:	f000 f984 	bl	8008ce8 <_Bfree>
 80089e0:	e699      	b.n	8008716 <_dtoa_r+0x5be>
 80089e2:	2400      	movs	r4, #0
 80089e4:	4627      	mov	r7, r4
 80089e6:	e7e0      	b.n	80089aa <_dtoa_r+0x852>
 80089e8:	46bb      	mov	fp, r7
 80089ea:	4604      	mov	r4, r0
 80089ec:	4607      	mov	r7, r0
 80089ee:	e5c7      	b.n	8008580 <_dtoa_r+0x428>
 80089f0:	9b07      	ldr	r3, [sp, #28]
 80089f2:	46ca      	mov	sl, r9
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 8100 	beq.w	8008bfa <_dtoa_r+0xaa2>
 80089fa:	f1b8 0f00 	cmp.w	r8, #0
 80089fe:	dd05      	ble.n	8008a0c <_dtoa_r+0x8b4>
 8008a00:	4639      	mov	r1, r7
 8008a02:	4642      	mov	r2, r8
 8008a04:	4630      	mov	r0, r6
 8008a06:	f000 fb41 	bl	800908c <__lshift>
 8008a0a:	4607      	mov	r7, r0
 8008a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d05d      	beq.n	8008ace <_dtoa_r+0x976>
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	4630      	mov	r0, r6
 8008a16:	f000 f927 	bl	8008c68 <_Balloc>
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	b928      	cbnz	r0, 8008a2a <_dtoa_r+0x8d2>
 8008a1e:	4b82      	ldr	r3, [pc, #520]	; (8008c28 <_dtoa_r+0xad0>)
 8008a20:	4602      	mov	r2, r0
 8008a22:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a26:	f7ff bbaf 	b.w	8008188 <_dtoa_r+0x30>
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	3202      	adds	r2, #2
 8008a2e:	0092      	lsls	r2, r2, #2
 8008a30:	f107 010c 	add.w	r1, r7, #12
 8008a34:	300c      	adds	r0, #12
 8008a36:	f000 f909 	bl	8008c4c <memcpy>
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	4641      	mov	r1, r8
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f000 fb24 	bl	800908c <__lshift>
 8008a44:	9b01      	ldr	r3, [sp, #4]
 8008a46:	3301      	adds	r3, #1
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	9b01      	ldr	r3, [sp, #4]
 8008a4c:	4453      	add	r3, sl
 8008a4e:	9308      	str	r3, [sp, #32]
 8008a50:	9b02      	ldr	r3, [sp, #8]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	46b9      	mov	r9, r7
 8008a58:	9307      	str	r3, [sp, #28]
 8008a5a:	4607      	mov	r7, r0
 8008a5c:	9b04      	ldr	r3, [sp, #16]
 8008a5e:	4621      	mov	r1, r4
 8008a60:	3b01      	subs	r3, #1
 8008a62:	4628      	mov	r0, r5
 8008a64:	9302      	str	r3, [sp, #8]
 8008a66:	f7ff fae9 	bl	800803c <quorem>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	3330      	adds	r3, #48	; 0x30
 8008a6e:	9005      	str	r0, [sp, #20]
 8008a70:	4649      	mov	r1, r9
 8008a72:	4628      	mov	r0, r5
 8008a74:	9309      	str	r3, [sp, #36]	; 0x24
 8008a76:	f000 fb79 	bl	800916c <__mcmp>
 8008a7a:	463a      	mov	r2, r7
 8008a7c:	4682      	mov	sl, r0
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4630      	mov	r0, r6
 8008a82:	f000 fb8f 	bl	80091a4 <__mdiff>
 8008a86:	68c2      	ldr	r2, [r0, #12]
 8008a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a8a:	4680      	mov	r8, r0
 8008a8c:	bb0a      	cbnz	r2, 8008ad2 <_dtoa_r+0x97a>
 8008a8e:	4601      	mov	r1, r0
 8008a90:	4628      	mov	r0, r5
 8008a92:	f000 fb6b 	bl	800916c <__mcmp>
 8008a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a98:	4602      	mov	r2, r0
 8008a9a:	4641      	mov	r1, r8
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008aa2:	f000 f921 	bl	8008ce8 <_Bfree>
 8008aa6:	9b06      	ldr	r3, [sp, #24]
 8008aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aaa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008aae:	ea43 0102 	orr.w	r1, r3, r2
 8008ab2:	9b07      	ldr	r3, [sp, #28]
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab8:	d10d      	bne.n	8008ad6 <_dtoa_r+0x97e>
 8008aba:	2b39      	cmp	r3, #57	; 0x39
 8008abc:	d029      	beq.n	8008b12 <_dtoa_r+0x9ba>
 8008abe:	f1ba 0f00 	cmp.w	sl, #0
 8008ac2:	dd01      	ble.n	8008ac8 <_dtoa_r+0x970>
 8008ac4:	9b05      	ldr	r3, [sp, #20]
 8008ac6:	3331      	adds	r3, #49	; 0x31
 8008ac8:	9a02      	ldr	r2, [sp, #8]
 8008aca:	7013      	strb	r3, [r2, #0]
 8008acc:	e774      	b.n	80089b8 <_dtoa_r+0x860>
 8008ace:	4638      	mov	r0, r7
 8008ad0:	e7b8      	b.n	8008a44 <_dtoa_r+0x8ec>
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	e7e1      	b.n	8008a9a <_dtoa_r+0x942>
 8008ad6:	f1ba 0f00 	cmp.w	sl, #0
 8008ada:	db06      	blt.n	8008aea <_dtoa_r+0x992>
 8008adc:	9906      	ldr	r1, [sp, #24]
 8008ade:	ea41 0a0a 	orr.w	sl, r1, sl
 8008ae2:	9907      	ldr	r1, [sp, #28]
 8008ae4:	ea5a 0101 	orrs.w	r1, sl, r1
 8008ae8:	d120      	bne.n	8008b2c <_dtoa_r+0x9d4>
 8008aea:	2a00      	cmp	r2, #0
 8008aec:	ddec      	ble.n	8008ac8 <_dtoa_r+0x970>
 8008aee:	4629      	mov	r1, r5
 8008af0:	2201      	movs	r2, #1
 8008af2:	4630      	mov	r0, r6
 8008af4:	9304      	str	r3, [sp, #16]
 8008af6:	f000 fac9 	bl	800908c <__lshift>
 8008afa:	4621      	mov	r1, r4
 8008afc:	4605      	mov	r5, r0
 8008afe:	f000 fb35 	bl	800916c <__mcmp>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	9b04      	ldr	r3, [sp, #16]
 8008b06:	dc02      	bgt.n	8008b0e <_dtoa_r+0x9b6>
 8008b08:	d1de      	bne.n	8008ac8 <_dtoa_r+0x970>
 8008b0a:	07da      	lsls	r2, r3, #31
 8008b0c:	d5dc      	bpl.n	8008ac8 <_dtoa_r+0x970>
 8008b0e:	2b39      	cmp	r3, #57	; 0x39
 8008b10:	d1d8      	bne.n	8008ac4 <_dtoa_r+0x96c>
 8008b12:	9a02      	ldr	r2, [sp, #8]
 8008b14:	2339      	movs	r3, #57	; 0x39
 8008b16:	7013      	strb	r3, [r2, #0]
 8008b18:	4643      	mov	r3, r8
 8008b1a:	4698      	mov	r8, r3
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008b22:	2a39      	cmp	r2, #57	; 0x39
 8008b24:	d051      	beq.n	8008bca <_dtoa_r+0xa72>
 8008b26:	3201      	adds	r2, #1
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	e745      	b.n	80089b8 <_dtoa_r+0x860>
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	dd03      	ble.n	8008b38 <_dtoa_r+0x9e0>
 8008b30:	2b39      	cmp	r3, #57	; 0x39
 8008b32:	d0ee      	beq.n	8008b12 <_dtoa_r+0x9ba>
 8008b34:	3301      	adds	r3, #1
 8008b36:	e7c7      	b.n	8008ac8 <_dtoa_r+0x970>
 8008b38:	9a04      	ldr	r2, [sp, #16]
 8008b3a:	9908      	ldr	r1, [sp, #32]
 8008b3c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b40:	428a      	cmp	r2, r1
 8008b42:	d02b      	beq.n	8008b9c <_dtoa_r+0xa44>
 8008b44:	4629      	mov	r1, r5
 8008b46:	2300      	movs	r3, #0
 8008b48:	220a      	movs	r2, #10
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f000 f8ee 	bl	8008d2c <__multadd>
 8008b50:	45b9      	cmp	r9, r7
 8008b52:	4605      	mov	r5, r0
 8008b54:	f04f 0300 	mov.w	r3, #0
 8008b58:	f04f 020a 	mov.w	r2, #10
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	4630      	mov	r0, r6
 8008b60:	d107      	bne.n	8008b72 <_dtoa_r+0xa1a>
 8008b62:	f000 f8e3 	bl	8008d2c <__multadd>
 8008b66:	4681      	mov	r9, r0
 8008b68:	4607      	mov	r7, r0
 8008b6a:	9b04      	ldr	r3, [sp, #16]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	e774      	b.n	8008a5c <_dtoa_r+0x904>
 8008b72:	f000 f8db 	bl	8008d2c <__multadd>
 8008b76:	4639      	mov	r1, r7
 8008b78:	4681      	mov	r9, r0
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	220a      	movs	r2, #10
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f000 f8d4 	bl	8008d2c <__multadd>
 8008b84:	4607      	mov	r7, r0
 8008b86:	e7f0      	b.n	8008b6a <_dtoa_r+0xa12>
 8008b88:	f1ba 0f00 	cmp.w	sl, #0
 8008b8c:	9a01      	ldr	r2, [sp, #4]
 8008b8e:	bfcc      	ite	gt
 8008b90:	46d0      	movgt	r8, sl
 8008b92:	f04f 0801 	movle.w	r8, #1
 8008b96:	4490      	add	r8, r2
 8008b98:	f04f 0900 	mov.w	r9, #0
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	9302      	str	r3, [sp, #8]
 8008ba4:	f000 fa72 	bl	800908c <__lshift>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	4605      	mov	r5, r0
 8008bac:	f000 fade 	bl	800916c <__mcmp>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	dcb1      	bgt.n	8008b18 <_dtoa_r+0x9c0>
 8008bb4:	d102      	bne.n	8008bbc <_dtoa_r+0xa64>
 8008bb6:	9b02      	ldr	r3, [sp, #8]
 8008bb8:	07db      	lsls	r3, r3, #31
 8008bba:	d4ad      	bmi.n	8008b18 <_dtoa_r+0x9c0>
 8008bbc:	4643      	mov	r3, r8
 8008bbe:	4698      	mov	r8, r3
 8008bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bc4:	2a30      	cmp	r2, #48	; 0x30
 8008bc6:	d0fa      	beq.n	8008bbe <_dtoa_r+0xa66>
 8008bc8:	e6f6      	b.n	80089b8 <_dtoa_r+0x860>
 8008bca:	9a01      	ldr	r2, [sp, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d1a4      	bne.n	8008b1a <_dtoa_r+0x9c2>
 8008bd0:	f10b 0b01 	add.w	fp, fp, #1
 8008bd4:	2331      	movs	r3, #49	; 0x31
 8008bd6:	e778      	b.n	8008aca <_dtoa_r+0x972>
 8008bd8:	4b14      	ldr	r3, [pc, #80]	; (8008c2c <_dtoa_r+0xad4>)
 8008bda:	f7ff bb27 	b.w	800822c <_dtoa_r+0xd4>
 8008bde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f47f ab03 	bne.w	80081ec <_dtoa_r+0x94>
 8008be6:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <_dtoa_r+0xad8>)
 8008be8:	f7ff bb20 	b.w	800822c <_dtoa_r+0xd4>
 8008bec:	f1ba 0f00 	cmp.w	sl, #0
 8008bf0:	dc03      	bgt.n	8008bfa <_dtoa_r+0xaa2>
 8008bf2:	9b06      	ldr	r3, [sp, #24]
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	f73f aec7 	bgt.w	8008988 <_dtoa_r+0x830>
 8008bfa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4628      	mov	r0, r5
 8008c02:	f7ff fa1b 	bl	800803c <quorem>
 8008c06:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008c0a:	f808 3b01 	strb.w	r3, [r8], #1
 8008c0e:	9a01      	ldr	r2, [sp, #4]
 8008c10:	eba8 0202 	sub.w	r2, r8, r2
 8008c14:	4592      	cmp	sl, r2
 8008c16:	ddb7      	ble.n	8008b88 <_dtoa_r+0xa30>
 8008c18:	4629      	mov	r1, r5
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	220a      	movs	r2, #10
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f000 f884 	bl	8008d2c <__multadd>
 8008c24:	4605      	mov	r5, r0
 8008c26:	e7ea      	b.n	8008bfe <_dtoa_r+0xaa6>
 8008c28:	0800a5a3 	.word	0x0800a5a3
 8008c2c:	0800a500 	.word	0x0800a500
 8008c30:	0800a524 	.word	0x0800a524

08008c34 <_localeconv_r>:
 8008c34:	4800      	ldr	r0, [pc, #0]	; (8008c38 <_localeconv_r+0x4>)
 8008c36:	4770      	bx	lr
 8008c38:	24000164 	.word	0x24000164

08008c3c <malloc>:
 8008c3c:	4b02      	ldr	r3, [pc, #8]	; (8008c48 <malloc+0xc>)
 8008c3e:	4601      	mov	r1, r0
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	f000 bc17 	b.w	8009474 <_malloc_r>
 8008c46:	bf00      	nop
 8008c48:	24000010 	.word	0x24000010

08008c4c <memcpy>:
 8008c4c:	440a      	add	r2, r1
 8008c4e:	4291      	cmp	r1, r2
 8008c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c54:	d100      	bne.n	8008c58 <memcpy+0xc>
 8008c56:	4770      	bx	lr
 8008c58:	b510      	push	{r4, lr}
 8008c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c62:	4291      	cmp	r1, r2
 8008c64:	d1f9      	bne.n	8008c5a <memcpy+0xe>
 8008c66:	bd10      	pop	{r4, pc}

08008c68 <_Balloc>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	460d      	mov	r5, r1
 8008c70:	b976      	cbnz	r6, 8008c90 <_Balloc+0x28>
 8008c72:	2010      	movs	r0, #16
 8008c74:	f7ff ffe2 	bl	8008c3c <malloc>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	6260      	str	r0, [r4, #36]	; 0x24
 8008c7c:	b920      	cbnz	r0, 8008c88 <_Balloc+0x20>
 8008c7e:	4b18      	ldr	r3, [pc, #96]	; (8008ce0 <_Balloc+0x78>)
 8008c80:	4818      	ldr	r0, [pc, #96]	; (8008ce4 <_Balloc+0x7c>)
 8008c82:	2166      	movs	r1, #102	; 0x66
 8008c84:	f000 fdd6 	bl	8009834 <__assert_func>
 8008c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c8c:	6006      	str	r6, [r0, #0]
 8008c8e:	60c6      	str	r6, [r0, #12]
 8008c90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c92:	68f3      	ldr	r3, [r6, #12]
 8008c94:	b183      	cbz	r3, 8008cb8 <_Balloc+0x50>
 8008c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c9e:	b9b8      	cbnz	r0, 8008cd0 <_Balloc+0x68>
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	fa01 f605 	lsl.w	r6, r1, r5
 8008ca6:	1d72      	adds	r2, r6, #5
 8008ca8:	0092      	lsls	r2, r2, #2
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 fb60 	bl	8009370 <_calloc_r>
 8008cb0:	b160      	cbz	r0, 8008ccc <_Balloc+0x64>
 8008cb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cb6:	e00e      	b.n	8008cd6 <_Balloc+0x6e>
 8008cb8:	2221      	movs	r2, #33	; 0x21
 8008cba:	2104      	movs	r1, #4
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f000 fb57 	bl	8009370 <_calloc_r>
 8008cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cc4:	60f0      	str	r0, [r6, #12]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e4      	bne.n	8008c96 <_Balloc+0x2e>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	bd70      	pop	{r4, r5, r6, pc}
 8008cd0:	6802      	ldr	r2, [r0, #0]
 8008cd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cdc:	e7f7      	b.n	8008cce <_Balloc+0x66>
 8008cde:	bf00      	nop
 8008ce0:	0800a531 	.word	0x0800a531
 8008ce4:	0800a5b4 	.word	0x0800a5b4

08008ce8 <_Bfree>:
 8008ce8:	b570      	push	{r4, r5, r6, lr}
 8008cea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008cec:	4605      	mov	r5, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	b976      	cbnz	r6, 8008d10 <_Bfree+0x28>
 8008cf2:	2010      	movs	r0, #16
 8008cf4:	f7ff ffa2 	bl	8008c3c <malloc>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	6268      	str	r0, [r5, #36]	; 0x24
 8008cfc:	b920      	cbnz	r0, 8008d08 <_Bfree+0x20>
 8008cfe:	4b09      	ldr	r3, [pc, #36]	; (8008d24 <_Bfree+0x3c>)
 8008d00:	4809      	ldr	r0, [pc, #36]	; (8008d28 <_Bfree+0x40>)
 8008d02:	218a      	movs	r1, #138	; 0x8a
 8008d04:	f000 fd96 	bl	8009834 <__assert_func>
 8008d08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d0c:	6006      	str	r6, [r0, #0]
 8008d0e:	60c6      	str	r6, [r0, #12]
 8008d10:	b13c      	cbz	r4, 8008d22 <_Bfree+0x3a>
 8008d12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d14:	6862      	ldr	r2, [r4, #4]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d1c:	6021      	str	r1, [r4, #0]
 8008d1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d22:	bd70      	pop	{r4, r5, r6, pc}
 8008d24:	0800a531 	.word	0x0800a531
 8008d28:	0800a5b4 	.word	0x0800a5b4

08008d2c <__multadd>:
 8008d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d30:	690d      	ldr	r5, [r1, #16]
 8008d32:	4607      	mov	r7, r0
 8008d34:	460c      	mov	r4, r1
 8008d36:	461e      	mov	r6, r3
 8008d38:	f101 0c14 	add.w	ip, r1, #20
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	f8dc 3000 	ldr.w	r3, [ip]
 8008d42:	b299      	uxth	r1, r3
 8008d44:	fb02 6101 	mla	r1, r2, r1, r6
 8008d48:	0c1e      	lsrs	r6, r3, #16
 8008d4a:	0c0b      	lsrs	r3, r1, #16
 8008d4c:	fb02 3306 	mla	r3, r2, r6, r3
 8008d50:	b289      	uxth	r1, r1
 8008d52:	3001      	adds	r0, #1
 8008d54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d58:	4285      	cmp	r5, r0
 8008d5a:	f84c 1b04 	str.w	r1, [ip], #4
 8008d5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d62:	dcec      	bgt.n	8008d3e <__multadd+0x12>
 8008d64:	b30e      	cbz	r6, 8008daa <__multadd+0x7e>
 8008d66:	68a3      	ldr	r3, [r4, #8]
 8008d68:	42ab      	cmp	r3, r5
 8008d6a:	dc19      	bgt.n	8008da0 <__multadd+0x74>
 8008d6c:	6861      	ldr	r1, [r4, #4]
 8008d6e:	4638      	mov	r0, r7
 8008d70:	3101      	adds	r1, #1
 8008d72:	f7ff ff79 	bl	8008c68 <_Balloc>
 8008d76:	4680      	mov	r8, r0
 8008d78:	b928      	cbnz	r0, 8008d86 <__multadd+0x5a>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	4b0c      	ldr	r3, [pc, #48]	; (8008db0 <__multadd+0x84>)
 8008d7e:	480d      	ldr	r0, [pc, #52]	; (8008db4 <__multadd+0x88>)
 8008d80:	21b5      	movs	r1, #181	; 0xb5
 8008d82:	f000 fd57 	bl	8009834 <__assert_func>
 8008d86:	6922      	ldr	r2, [r4, #16]
 8008d88:	3202      	adds	r2, #2
 8008d8a:	f104 010c 	add.w	r1, r4, #12
 8008d8e:	0092      	lsls	r2, r2, #2
 8008d90:	300c      	adds	r0, #12
 8008d92:	f7ff ff5b 	bl	8008c4c <memcpy>
 8008d96:	4621      	mov	r1, r4
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f7ff ffa5 	bl	8008ce8 <_Bfree>
 8008d9e:	4644      	mov	r4, r8
 8008da0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008da4:	3501      	adds	r5, #1
 8008da6:	615e      	str	r6, [r3, #20]
 8008da8:	6125      	str	r5, [r4, #16]
 8008daa:	4620      	mov	r0, r4
 8008dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db0:	0800a5a3 	.word	0x0800a5a3
 8008db4:	0800a5b4 	.word	0x0800a5b4

08008db8 <__hi0bits>:
 8008db8:	0c03      	lsrs	r3, r0, #16
 8008dba:	041b      	lsls	r3, r3, #16
 8008dbc:	b9d3      	cbnz	r3, 8008df4 <__hi0bits+0x3c>
 8008dbe:	0400      	lsls	r0, r0, #16
 8008dc0:	2310      	movs	r3, #16
 8008dc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008dc6:	bf04      	itt	eq
 8008dc8:	0200      	lsleq	r0, r0, #8
 8008dca:	3308      	addeq	r3, #8
 8008dcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008dd0:	bf04      	itt	eq
 8008dd2:	0100      	lsleq	r0, r0, #4
 8008dd4:	3304      	addeq	r3, #4
 8008dd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008dda:	bf04      	itt	eq
 8008ddc:	0080      	lsleq	r0, r0, #2
 8008dde:	3302      	addeq	r3, #2
 8008de0:	2800      	cmp	r0, #0
 8008de2:	db05      	blt.n	8008df0 <__hi0bits+0x38>
 8008de4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008de8:	f103 0301 	add.w	r3, r3, #1
 8008dec:	bf08      	it	eq
 8008dee:	2320      	moveq	r3, #32
 8008df0:	4618      	mov	r0, r3
 8008df2:	4770      	bx	lr
 8008df4:	2300      	movs	r3, #0
 8008df6:	e7e4      	b.n	8008dc2 <__hi0bits+0xa>

08008df8 <__lo0bits>:
 8008df8:	6803      	ldr	r3, [r0, #0]
 8008dfa:	f013 0207 	ands.w	r2, r3, #7
 8008dfe:	4601      	mov	r1, r0
 8008e00:	d00b      	beq.n	8008e1a <__lo0bits+0x22>
 8008e02:	07da      	lsls	r2, r3, #31
 8008e04:	d423      	bmi.n	8008e4e <__lo0bits+0x56>
 8008e06:	0798      	lsls	r0, r3, #30
 8008e08:	bf49      	itett	mi
 8008e0a:	085b      	lsrmi	r3, r3, #1
 8008e0c:	089b      	lsrpl	r3, r3, #2
 8008e0e:	2001      	movmi	r0, #1
 8008e10:	600b      	strmi	r3, [r1, #0]
 8008e12:	bf5c      	itt	pl
 8008e14:	600b      	strpl	r3, [r1, #0]
 8008e16:	2002      	movpl	r0, #2
 8008e18:	4770      	bx	lr
 8008e1a:	b298      	uxth	r0, r3
 8008e1c:	b9a8      	cbnz	r0, 8008e4a <__lo0bits+0x52>
 8008e1e:	0c1b      	lsrs	r3, r3, #16
 8008e20:	2010      	movs	r0, #16
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	b90a      	cbnz	r2, 8008e2a <__lo0bits+0x32>
 8008e26:	3008      	adds	r0, #8
 8008e28:	0a1b      	lsrs	r3, r3, #8
 8008e2a:	071a      	lsls	r2, r3, #28
 8008e2c:	bf04      	itt	eq
 8008e2e:	091b      	lsreq	r3, r3, #4
 8008e30:	3004      	addeq	r0, #4
 8008e32:	079a      	lsls	r2, r3, #30
 8008e34:	bf04      	itt	eq
 8008e36:	089b      	lsreq	r3, r3, #2
 8008e38:	3002      	addeq	r0, #2
 8008e3a:	07da      	lsls	r2, r3, #31
 8008e3c:	d403      	bmi.n	8008e46 <__lo0bits+0x4e>
 8008e3e:	085b      	lsrs	r3, r3, #1
 8008e40:	f100 0001 	add.w	r0, r0, #1
 8008e44:	d005      	beq.n	8008e52 <__lo0bits+0x5a>
 8008e46:	600b      	str	r3, [r1, #0]
 8008e48:	4770      	bx	lr
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	e7e9      	b.n	8008e22 <__lo0bits+0x2a>
 8008e4e:	2000      	movs	r0, #0
 8008e50:	4770      	bx	lr
 8008e52:	2020      	movs	r0, #32
 8008e54:	4770      	bx	lr
	...

08008e58 <__i2b>:
 8008e58:	b510      	push	{r4, lr}
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	f7ff ff03 	bl	8008c68 <_Balloc>
 8008e62:	4602      	mov	r2, r0
 8008e64:	b928      	cbnz	r0, 8008e72 <__i2b+0x1a>
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <__i2b+0x24>)
 8008e68:	4805      	ldr	r0, [pc, #20]	; (8008e80 <__i2b+0x28>)
 8008e6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e6e:	f000 fce1 	bl	8009834 <__assert_func>
 8008e72:	2301      	movs	r3, #1
 8008e74:	6144      	str	r4, [r0, #20]
 8008e76:	6103      	str	r3, [r0, #16]
 8008e78:	bd10      	pop	{r4, pc}
 8008e7a:	bf00      	nop
 8008e7c:	0800a5a3 	.word	0x0800a5a3
 8008e80:	0800a5b4 	.word	0x0800a5b4

08008e84 <__multiply>:
 8008e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e88:	4691      	mov	r9, r2
 8008e8a:	690a      	ldr	r2, [r1, #16]
 8008e8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	bfb8      	it	lt
 8008e94:	460b      	movlt	r3, r1
 8008e96:	460c      	mov	r4, r1
 8008e98:	bfbc      	itt	lt
 8008e9a:	464c      	movlt	r4, r9
 8008e9c:	4699      	movlt	r9, r3
 8008e9e:	6927      	ldr	r7, [r4, #16]
 8008ea0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ea4:	68a3      	ldr	r3, [r4, #8]
 8008ea6:	6861      	ldr	r1, [r4, #4]
 8008ea8:	eb07 060a 	add.w	r6, r7, sl
 8008eac:	42b3      	cmp	r3, r6
 8008eae:	b085      	sub	sp, #20
 8008eb0:	bfb8      	it	lt
 8008eb2:	3101      	addlt	r1, #1
 8008eb4:	f7ff fed8 	bl	8008c68 <_Balloc>
 8008eb8:	b930      	cbnz	r0, 8008ec8 <__multiply+0x44>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	4b44      	ldr	r3, [pc, #272]	; (8008fd0 <__multiply+0x14c>)
 8008ebe:	4845      	ldr	r0, [pc, #276]	; (8008fd4 <__multiply+0x150>)
 8008ec0:	f240 115d 	movw	r1, #349	; 0x15d
 8008ec4:	f000 fcb6 	bl	8009834 <__assert_func>
 8008ec8:	f100 0514 	add.w	r5, r0, #20
 8008ecc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ed0:	462b      	mov	r3, r5
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	4543      	cmp	r3, r8
 8008ed6:	d321      	bcc.n	8008f1c <__multiply+0x98>
 8008ed8:	f104 0314 	add.w	r3, r4, #20
 8008edc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ee0:	f109 0314 	add.w	r3, r9, #20
 8008ee4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ee8:	9202      	str	r2, [sp, #8]
 8008eea:	1b3a      	subs	r2, r7, r4
 8008eec:	3a15      	subs	r2, #21
 8008eee:	f022 0203 	bic.w	r2, r2, #3
 8008ef2:	3204      	adds	r2, #4
 8008ef4:	f104 0115 	add.w	r1, r4, #21
 8008ef8:	428f      	cmp	r7, r1
 8008efa:	bf38      	it	cc
 8008efc:	2204      	movcc	r2, #4
 8008efe:	9201      	str	r2, [sp, #4]
 8008f00:	9a02      	ldr	r2, [sp, #8]
 8008f02:	9303      	str	r3, [sp, #12]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d80c      	bhi.n	8008f22 <__multiply+0x9e>
 8008f08:	2e00      	cmp	r6, #0
 8008f0a:	dd03      	ble.n	8008f14 <__multiply+0x90>
 8008f0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d05a      	beq.n	8008fca <__multiply+0x146>
 8008f14:	6106      	str	r6, [r0, #16]
 8008f16:	b005      	add	sp, #20
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	f843 2b04 	str.w	r2, [r3], #4
 8008f20:	e7d8      	b.n	8008ed4 <__multiply+0x50>
 8008f22:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f26:	f1ba 0f00 	cmp.w	sl, #0
 8008f2a:	d024      	beq.n	8008f76 <__multiply+0xf2>
 8008f2c:	f104 0e14 	add.w	lr, r4, #20
 8008f30:	46a9      	mov	r9, r5
 8008f32:	f04f 0c00 	mov.w	ip, #0
 8008f36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f3a:	f8d9 1000 	ldr.w	r1, [r9]
 8008f3e:	fa1f fb82 	uxth.w	fp, r2
 8008f42:	b289      	uxth	r1, r1
 8008f44:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f4c:	f8d9 2000 	ldr.w	r2, [r9]
 8008f50:	4461      	add	r1, ip
 8008f52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f56:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f5e:	b289      	uxth	r1, r1
 8008f60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f64:	4577      	cmp	r7, lr
 8008f66:	f849 1b04 	str.w	r1, [r9], #4
 8008f6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f6e:	d8e2      	bhi.n	8008f36 <__multiply+0xb2>
 8008f70:	9a01      	ldr	r2, [sp, #4]
 8008f72:	f845 c002 	str.w	ip, [r5, r2]
 8008f76:	9a03      	ldr	r2, [sp, #12]
 8008f78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	f1b9 0f00 	cmp.w	r9, #0
 8008f82:	d020      	beq.n	8008fc6 <__multiply+0x142>
 8008f84:	6829      	ldr	r1, [r5, #0]
 8008f86:	f104 0c14 	add.w	ip, r4, #20
 8008f8a:	46ae      	mov	lr, r5
 8008f8c:	f04f 0a00 	mov.w	sl, #0
 8008f90:	f8bc b000 	ldrh.w	fp, [ip]
 8008f94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f98:	fb09 220b 	mla	r2, r9, fp, r2
 8008f9c:	4492      	add	sl, r2
 8008f9e:	b289      	uxth	r1, r1
 8008fa0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008fa4:	f84e 1b04 	str.w	r1, [lr], #4
 8008fa8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008fac:	f8be 1000 	ldrh.w	r1, [lr]
 8008fb0:	0c12      	lsrs	r2, r2, #16
 8008fb2:	fb09 1102 	mla	r1, r9, r2, r1
 8008fb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008fba:	4567      	cmp	r7, ip
 8008fbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fc0:	d8e6      	bhi.n	8008f90 <__multiply+0x10c>
 8008fc2:	9a01      	ldr	r2, [sp, #4]
 8008fc4:	50a9      	str	r1, [r5, r2]
 8008fc6:	3504      	adds	r5, #4
 8008fc8:	e79a      	b.n	8008f00 <__multiply+0x7c>
 8008fca:	3e01      	subs	r6, #1
 8008fcc:	e79c      	b.n	8008f08 <__multiply+0x84>
 8008fce:	bf00      	nop
 8008fd0:	0800a5a3 	.word	0x0800a5a3
 8008fd4:	0800a5b4 	.word	0x0800a5b4

08008fd8 <__pow5mult>:
 8008fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fdc:	4615      	mov	r5, r2
 8008fde:	f012 0203 	ands.w	r2, r2, #3
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460f      	mov	r7, r1
 8008fe6:	d007      	beq.n	8008ff8 <__pow5mult+0x20>
 8008fe8:	4c25      	ldr	r4, [pc, #148]	; (8009080 <__pow5mult+0xa8>)
 8008fea:	3a01      	subs	r2, #1
 8008fec:	2300      	movs	r3, #0
 8008fee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ff2:	f7ff fe9b 	bl	8008d2c <__multadd>
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	10ad      	asrs	r5, r5, #2
 8008ffa:	d03d      	beq.n	8009078 <__pow5mult+0xa0>
 8008ffc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ffe:	b97c      	cbnz	r4, 8009020 <__pow5mult+0x48>
 8009000:	2010      	movs	r0, #16
 8009002:	f7ff fe1b 	bl	8008c3c <malloc>
 8009006:	4602      	mov	r2, r0
 8009008:	6270      	str	r0, [r6, #36]	; 0x24
 800900a:	b928      	cbnz	r0, 8009018 <__pow5mult+0x40>
 800900c:	4b1d      	ldr	r3, [pc, #116]	; (8009084 <__pow5mult+0xac>)
 800900e:	481e      	ldr	r0, [pc, #120]	; (8009088 <__pow5mult+0xb0>)
 8009010:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009014:	f000 fc0e 	bl	8009834 <__assert_func>
 8009018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800901c:	6004      	str	r4, [r0, #0]
 800901e:	60c4      	str	r4, [r0, #12]
 8009020:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009024:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009028:	b94c      	cbnz	r4, 800903e <__pow5mult+0x66>
 800902a:	f240 2171 	movw	r1, #625	; 0x271
 800902e:	4630      	mov	r0, r6
 8009030:	f7ff ff12 	bl	8008e58 <__i2b>
 8009034:	2300      	movs	r3, #0
 8009036:	f8c8 0008 	str.w	r0, [r8, #8]
 800903a:	4604      	mov	r4, r0
 800903c:	6003      	str	r3, [r0, #0]
 800903e:	f04f 0900 	mov.w	r9, #0
 8009042:	07eb      	lsls	r3, r5, #31
 8009044:	d50a      	bpl.n	800905c <__pow5mult+0x84>
 8009046:	4639      	mov	r1, r7
 8009048:	4622      	mov	r2, r4
 800904a:	4630      	mov	r0, r6
 800904c:	f7ff ff1a 	bl	8008e84 <__multiply>
 8009050:	4639      	mov	r1, r7
 8009052:	4680      	mov	r8, r0
 8009054:	4630      	mov	r0, r6
 8009056:	f7ff fe47 	bl	8008ce8 <_Bfree>
 800905a:	4647      	mov	r7, r8
 800905c:	106d      	asrs	r5, r5, #1
 800905e:	d00b      	beq.n	8009078 <__pow5mult+0xa0>
 8009060:	6820      	ldr	r0, [r4, #0]
 8009062:	b938      	cbnz	r0, 8009074 <__pow5mult+0x9c>
 8009064:	4622      	mov	r2, r4
 8009066:	4621      	mov	r1, r4
 8009068:	4630      	mov	r0, r6
 800906a:	f7ff ff0b 	bl	8008e84 <__multiply>
 800906e:	6020      	str	r0, [r4, #0]
 8009070:	f8c0 9000 	str.w	r9, [r0]
 8009074:	4604      	mov	r4, r0
 8009076:	e7e4      	b.n	8009042 <__pow5mult+0x6a>
 8009078:	4638      	mov	r0, r7
 800907a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800907e:	bf00      	nop
 8009080:	0800a700 	.word	0x0800a700
 8009084:	0800a531 	.word	0x0800a531
 8009088:	0800a5b4 	.word	0x0800a5b4

0800908c <__lshift>:
 800908c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009090:	460c      	mov	r4, r1
 8009092:	6849      	ldr	r1, [r1, #4]
 8009094:	6923      	ldr	r3, [r4, #16]
 8009096:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800909a:	68a3      	ldr	r3, [r4, #8]
 800909c:	4607      	mov	r7, r0
 800909e:	4691      	mov	r9, r2
 80090a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090a4:	f108 0601 	add.w	r6, r8, #1
 80090a8:	42b3      	cmp	r3, r6
 80090aa:	db0b      	blt.n	80090c4 <__lshift+0x38>
 80090ac:	4638      	mov	r0, r7
 80090ae:	f7ff fddb 	bl	8008c68 <_Balloc>
 80090b2:	4605      	mov	r5, r0
 80090b4:	b948      	cbnz	r0, 80090ca <__lshift+0x3e>
 80090b6:	4602      	mov	r2, r0
 80090b8:	4b2a      	ldr	r3, [pc, #168]	; (8009164 <__lshift+0xd8>)
 80090ba:	482b      	ldr	r0, [pc, #172]	; (8009168 <__lshift+0xdc>)
 80090bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090c0:	f000 fbb8 	bl	8009834 <__assert_func>
 80090c4:	3101      	adds	r1, #1
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	e7ee      	b.n	80090a8 <__lshift+0x1c>
 80090ca:	2300      	movs	r3, #0
 80090cc:	f100 0114 	add.w	r1, r0, #20
 80090d0:	f100 0210 	add.w	r2, r0, #16
 80090d4:	4618      	mov	r0, r3
 80090d6:	4553      	cmp	r3, sl
 80090d8:	db37      	blt.n	800914a <__lshift+0xbe>
 80090da:	6920      	ldr	r0, [r4, #16]
 80090dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090e0:	f104 0314 	add.w	r3, r4, #20
 80090e4:	f019 091f 	ands.w	r9, r9, #31
 80090e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80090f0:	d02f      	beq.n	8009152 <__lshift+0xc6>
 80090f2:	f1c9 0e20 	rsb	lr, r9, #32
 80090f6:	468a      	mov	sl, r1
 80090f8:	f04f 0c00 	mov.w	ip, #0
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	fa02 f209 	lsl.w	r2, r2, r9
 8009102:	ea42 020c 	orr.w	r2, r2, ip
 8009106:	f84a 2b04 	str.w	r2, [sl], #4
 800910a:	f853 2b04 	ldr.w	r2, [r3], #4
 800910e:	4298      	cmp	r0, r3
 8009110:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009114:	d8f2      	bhi.n	80090fc <__lshift+0x70>
 8009116:	1b03      	subs	r3, r0, r4
 8009118:	3b15      	subs	r3, #21
 800911a:	f023 0303 	bic.w	r3, r3, #3
 800911e:	3304      	adds	r3, #4
 8009120:	f104 0215 	add.w	r2, r4, #21
 8009124:	4290      	cmp	r0, r2
 8009126:	bf38      	it	cc
 8009128:	2304      	movcc	r3, #4
 800912a:	f841 c003 	str.w	ip, [r1, r3]
 800912e:	f1bc 0f00 	cmp.w	ip, #0
 8009132:	d001      	beq.n	8009138 <__lshift+0xac>
 8009134:	f108 0602 	add.w	r6, r8, #2
 8009138:	3e01      	subs	r6, #1
 800913a:	4638      	mov	r0, r7
 800913c:	612e      	str	r6, [r5, #16]
 800913e:	4621      	mov	r1, r4
 8009140:	f7ff fdd2 	bl	8008ce8 <_Bfree>
 8009144:	4628      	mov	r0, r5
 8009146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800914a:	f842 0f04 	str.w	r0, [r2, #4]!
 800914e:	3301      	adds	r3, #1
 8009150:	e7c1      	b.n	80090d6 <__lshift+0x4a>
 8009152:	3904      	subs	r1, #4
 8009154:	f853 2b04 	ldr.w	r2, [r3], #4
 8009158:	f841 2f04 	str.w	r2, [r1, #4]!
 800915c:	4298      	cmp	r0, r3
 800915e:	d8f9      	bhi.n	8009154 <__lshift+0xc8>
 8009160:	e7ea      	b.n	8009138 <__lshift+0xac>
 8009162:	bf00      	nop
 8009164:	0800a5a3 	.word	0x0800a5a3
 8009168:	0800a5b4 	.word	0x0800a5b4

0800916c <__mcmp>:
 800916c:	b530      	push	{r4, r5, lr}
 800916e:	6902      	ldr	r2, [r0, #16]
 8009170:	690c      	ldr	r4, [r1, #16]
 8009172:	1b12      	subs	r2, r2, r4
 8009174:	d10e      	bne.n	8009194 <__mcmp+0x28>
 8009176:	f100 0314 	add.w	r3, r0, #20
 800917a:	3114      	adds	r1, #20
 800917c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009180:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009184:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009188:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800918c:	42a5      	cmp	r5, r4
 800918e:	d003      	beq.n	8009198 <__mcmp+0x2c>
 8009190:	d305      	bcc.n	800919e <__mcmp+0x32>
 8009192:	2201      	movs	r2, #1
 8009194:	4610      	mov	r0, r2
 8009196:	bd30      	pop	{r4, r5, pc}
 8009198:	4283      	cmp	r3, r0
 800919a:	d3f3      	bcc.n	8009184 <__mcmp+0x18>
 800919c:	e7fa      	b.n	8009194 <__mcmp+0x28>
 800919e:	f04f 32ff 	mov.w	r2, #4294967295
 80091a2:	e7f7      	b.n	8009194 <__mcmp+0x28>

080091a4 <__mdiff>:
 80091a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a8:	460c      	mov	r4, r1
 80091aa:	4606      	mov	r6, r0
 80091ac:	4611      	mov	r1, r2
 80091ae:	4620      	mov	r0, r4
 80091b0:	4690      	mov	r8, r2
 80091b2:	f7ff ffdb 	bl	800916c <__mcmp>
 80091b6:	1e05      	subs	r5, r0, #0
 80091b8:	d110      	bne.n	80091dc <__mdiff+0x38>
 80091ba:	4629      	mov	r1, r5
 80091bc:	4630      	mov	r0, r6
 80091be:	f7ff fd53 	bl	8008c68 <_Balloc>
 80091c2:	b930      	cbnz	r0, 80091d2 <__mdiff+0x2e>
 80091c4:	4b3a      	ldr	r3, [pc, #232]	; (80092b0 <__mdiff+0x10c>)
 80091c6:	4602      	mov	r2, r0
 80091c8:	f240 2132 	movw	r1, #562	; 0x232
 80091cc:	4839      	ldr	r0, [pc, #228]	; (80092b4 <__mdiff+0x110>)
 80091ce:	f000 fb31 	bl	8009834 <__assert_func>
 80091d2:	2301      	movs	r3, #1
 80091d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091dc:	bfa4      	itt	ge
 80091de:	4643      	movge	r3, r8
 80091e0:	46a0      	movge	r8, r4
 80091e2:	4630      	mov	r0, r6
 80091e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091e8:	bfa6      	itte	ge
 80091ea:	461c      	movge	r4, r3
 80091ec:	2500      	movge	r5, #0
 80091ee:	2501      	movlt	r5, #1
 80091f0:	f7ff fd3a 	bl	8008c68 <_Balloc>
 80091f4:	b920      	cbnz	r0, 8009200 <__mdiff+0x5c>
 80091f6:	4b2e      	ldr	r3, [pc, #184]	; (80092b0 <__mdiff+0x10c>)
 80091f8:	4602      	mov	r2, r0
 80091fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091fe:	e7e5      	b.n	80091cc <__mdiff+0x28>
 8009200:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009204:	6926      	ldr	r6, [r4, #16]
 8009206:	60c5      	str	r5, [r0, #12]
 8009208:	f104 0914 	add.w	r9, r4, #20
 800920c:	f108 0514 	add.w	r5, r8, #20
 8009210:	f100 0e14 	add.w	lr, r0, #20
 8009214:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009218:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800921c:	f108 0210 	add.w	r2, r8, #16
 8009220:	46f2      	mov	sl, lr
 8009222:	2100      	movs	r1, #0
 8009224:	f859 3b04 	ldr.w	r3, [r9], #4
 8009228:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800922c:	fa1f f883 	uxth.w	r8, r3
 8009230:	fa11 f18b 	uxtah	r1, r1, fp
 8009234:	0c1b      	lsrs	r3, r3, #16
 8009236:	eba1 0808 	sub.w	r8, r1, r8
 800923a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800923e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009242:	fa1f f888 	uxth.w	r8, r8
 8009246:	1419      	asrs	r1, r3, #16
 8009248:	454e      	cmp	r6, r9
 800924a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800924e:	f84a 3b04 	str.w	r3, [sl], #4
 8009252:	d8e7      	bhi.n	8009224 <__mdiff+0x80>
 8009254:	1b33      	subs	r3, r6, r4
 8009256:	3b15      	subs	r3, #21
 8009258:	f023 0303 	bic.w	r3, r3, #3
 800925c:	3304      	adds	r3, #4
 800925e:	3415      	adds	r4, #21
 8009260:	42a6      	cmp	r6, r4
 8009262:	bf38      	it	cc
 8009264:	2304      	movcc	r3, #4
 8009266:	441d      	add	r5, r3
 8009268:	4473      	add	r3, lr
 800926a:	469e      	mov	lr, r3
 800926c:	462e      	mov	r6, r5
 800926e:	4566      	cmp	r6, ip
 8009270:	d30e      	bcc.n	8009290 <__mdiff+0xec>
 8009272:	f10c 0203 	add.w	r2, ip, #3
 8009276:	1b52      	subs	r2, r2, r5
 8009278:	f022 0203 	bic.w	r2, r2, #3
 800927c:	3d03      	subs	r5, #3
 800927e:	45ac      	cmp	ip, r5
 8009280:	bf38      	it	cc
 8009282:	2200      	movcc	r2, #0
 8009284:	441a      	add	r2, r3
 8009286:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800928a:	b17b      	cbz	r3, 80092ac <__mdiff+0x108>
 800928c:	6107      	str	r7, [r0, #16]
 800928e:	e7a3      	b.n	80091d8 <__mdiff+0x34>
 8009290:	f856 8b04 	ldr.w	r8, [r6], #4
 8009294:	fa11 f288 	uxtah	r2, r1, r8
 8009298:	1414      	asrs	r4, r2, #16
 800929a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800929e:	b292      	uxth	r2, r2
 80092a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80092a4:	f84e 2b04 	str.w	r2, [lr], #4
 80092a8:	1421      	asrs	r1, r4, #16
 80092aa:	e7e0      	b.n	800926e <__mdiff+0xca>
 80092ac:	3f01      	subs	r7, #1
 80092ae:	e7ea      	b.n	8009286 <__mdiff+0xe2>
 80092b0:	0800a5a3 	.word	0x0800a5a3
 80092b4:	0800a5b4 	.word	0x0800a5b4

080092b8 <__d2b>:
 80092b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092bc:	4689      	mov	r9, r1
 80092be:	2101      	movs	r1, #1
 80092c0:	ec57 6b10 	vmov	r6, r7, d0
 80092c4:	4690      	mov	r8, r2
 80092c6:	f7ff fccf 	bl	8008c68 <_Balloc>
 80092ca:	4604      	mov	r4, r0
 80092cc:	b930      	cbnz	r0, 80092dc <__d2b+0x24>
 80092ce:	4602      	mov	r2, r0
 80092d0:	4b25      	ldr	r3, [pc, #148]	; (8009368 <__d2b+0xb0>)
 80092d2:	4826      	ldr	r0, [pc, #152]	; (800936c <__d2b+0xb4>)
 80092d4:	f240 310a 	movw	r1, #778	; 0x30a
 80092d8:	f000 faac 	bl	8009834 <__assert_func>
 80092dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80092e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092e4:	bb35      	cbnz	r5, 8009334 <__d2b+0x7c>
 80092e6:	2e00      	cmp	r6, #0
 80092e8:	9301      	str	r3, [sp, #4]
 80092ea:	d028      	beq.n	800933e <__d2b+0x86>
 80092ec:	4668      	mov	r0, sp
 80092ee:	9600      	str	r6, [sp, #0]
 80092f0:	f7ff fd82 	bl	8008df8 <__lo0bits>
 80092f4:	9900      	ldr	r1, [sp, #0]
 80092f6:	b300      	cbz	r0, 800933a <__d2b+0x82>
 80092f8:	9a01      	ldr	r2, [sp, #4]
 80092fa:	f1c0 0320 	rsb	r3, r0, #32
 80092fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009302:	430b      	orrs	r3, r1
 8009304:	40c2      	lsrs	r2, r0
 8009306:	6163      	str	r3, [r4, #20]
 8009308:	9201      	str	r2, [sp, #4]
 800930a:	9b01      	ldr	r3, [sp, #4]
 800930c:	61a3      	str	r3, [r4, #24]
 800930e:	2b00      	cmp	r3, #0
 8009310:	bf14      	ite	ne
 8009312:	2202      	movne	r2, #2
 8009314:	2201      	moveq	r2, #1
 8009316:	6122      	str	r2, [r4, #16]
 8009318:	b1d5      	cbz	r5, 8009350 <__d2b+0x98>
 800931a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800931e:	4405      	add	r5, r0
 8009320:	f8c9 5000 	str.w	r5, [r9]
 8009324:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009328:	f8c8 0000 	str.w	r0, [r8]
 800932c:	4620      	mov	r0, r4
 800932e:	b003      	add	sp, #12
 8009330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009338:	e7d5      	b.n	80092e6 <__d2b+0x2e>
 800933a:	6161      	str	r1, [r4, #20]
 800933c:	e7e5      	b.n	800930a <__d2b+0x52>
 800933e:	a801      	add	r0, sp, #4
 8009340:	f7ff fd5a 	bl	8008df8 <__lo0bits>
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	6163      	str	r3, [r4, #20]
 8009348:	2201      	movs	r2, #1
 800934a:	6122      	str	r2, [r4, #16]
 800934c:	3020      	adds	r0, #32
 800934e:	e7e3      	b.n	8009318 <__d2b+0x60>
 8009350:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009354:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009358:	f8c9 0000 	str.w	r0, [r9]
 800935c:	6918      	ldr	r0, [r3, #16]
 800935e:	f7ff fd2b 	bl	8008db8 <__hi0bits>
 8009362:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009366:	e7df      	b.n	8009328 <__d2b+0x70>
 8009368:	0800a5a3 	.word	0x0800a5a3
 800936c:	0800a5b4 	.word	0x0800a5b4

08009370 <_calloc_r>:
 8009370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009372:	fba1 2402 	umull	r2, r4, r1, r2
 8009376:	b94c      	cbnz	r4, 800938c <_calloc_r+0x1c>
 8009378:	4611      	mov	r1, r2
 800937a:	9201      	str	r2, [sp, #4]
 800937c:	f000 f87a 	bl	8009474 <_malloc_r>
 8009380:	9a01      	ldr	r2, [sp, #4]
 8009382:	4605      	mov	r5, r0
 8009384:	b930      	cbnz	r0, 8009394 <_calloc_r+0x24>
 8009386:	4628      	mov	r0, r5
 8009388:	b003      	add	sp, #12
 800938a:	bd30      	pop	{r4, r5, pc}
 800938c:	220c      	movs	r2, #12
 800938e:	6002      	str	r2, [r0, #0]
 8009390:	2500      	movs	r5, #0
 8009392:	e7f8      	b.n	8009386 <_calloc_r+0x16>
 8009394:	4621      	mov	r1, r4
 8009396:	f7fe f9e7 	bl	8007768 <memset>
 800939a:	e7f4      	b.n	8009386 <_calloc_r+0x16>

0800939c <_free_r>:
 800939c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800939e:	2900      	cmp	r1, #0
 80093a0:	d044      	beq.n	800942c <_free_r+0x90>
 80093a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093a6:	9001      	str	r0, [sp, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f1a1 0404 	sub.w	r4, r1, #4
 80093ae:	bfb8      	it	lt
 80093b0:	18e4      	addlt	r4, r4, r3
 80093b2:	f000 fa9b 	bl	80098ec <__malloc_lock>
 80093b6:	4a1e      	ldr	r2, [pc, #120]	; (8009430 <_free_r+0x94>)
 80093b8:	9801      	ldr	r0, [sp, #4]
 80093ba:	6813      	ldr	r3, [r2, #0]
 80093bc:	b933      	cbnz	r3, 80093cc <_free_r+0x30>
 80093be:	6063      	str	r3, [r4, #4]
 80093c0:	6014      	str	r4, [r2, #0]
 80093c2:	b003      	add	sp, #12
 80093c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093c8:	f000 ba96 	b.w	80098f8 <__malloc_unlock>
 80093cc:	42a3      	cmp	r3, r4
 80093ce:	d908      	bls.n	80093e2 <_free_r+0x46>
 80093d0:	6825      	ldr	r5, [r4, #0]
 80093d2:	1961      	adds	r1, r4, r5
 80093d4:	428b      	cmp	r3, r1
 80093d6:	bf01      	itttt	eq
 80093d8:	6819      	ldreq	r1, [r3, #0]
 80093da:	685b      	ldreq	r3, [r3, #4]
 80093dc:	1949      	addeq	r1, r1, r5
 80093de:	6021      	streq	r1, [r4, #0]
 80093e0:	e7ed      	b.n	80093be <_free_r+0x22>
 80093e2:	461a      	mov	r2, r3
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	b10b      	cbz	r3, 80093ec <_free_r+0x50>
 80093e8:	42a3      	cmp	r3, r4
 80093ea:	d9fa      	bls.n	80093e2 <_free_r+0x46>
 80093ec:	6811      	ldr	r1, [r2, #0]
 80093ee:	1855      	adds	r5, r2, r1
 80093f0:	42a5      	cmp	r5, r4
 80093f2:	d10b      	bne.n	800940c <_free_r+0x70>
 80093f4:	6824      	ldr	r4, [r4, #0]
 80093f6:	4421      	add	r1, r4
 80093f8:	1854      	adds	r4, r2, r1
 80093fa:	42a3      	cmp	r3, r4
 80093fc:	6011      	str	r1, [r2, #0]
 80093fe:	d1e0      	bne.n	80093c2 <_free_r+0x26>
 8009400:	681c      	ldr	r4, [r3, #0]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	6053      	str	r3, [r2, #4]
 8009406:	4421      	add	r1, r4
 8009408:	6011      	str	r1, [r2, #0]
 800940a:	e7da      	b.n	80093c2 <_free_r+0x26>
 800940c:	d902      	bls.n	8009414 <_free_r+0x78>
 800940e:	230c      	movs	r3, #12
 8009410:	6003      	str	r3, [r0, #0]
 8009412:	e7d6      	b.n	80093c2 <_free_r+0x26>
 8009414:	6825      	ldr	r5, [r4, #0]
 8009416:	1961      	adds	r1, r4, r5
 8009418:	428b      	cmp	r3, r1
 800941a:	bf04      	itt	eq
 800941c:	6819      	ldreq	r1, [r3, #0]
 800941e:	685b      	ldreq	r3, [r3, #4]
 8009420:	6063      	str	r3, [r4, #4]
 8009422:	bf04      	itt	eq
 8009424:	1949      	addeq	r1, r1, r5
 8009426:	6021      	streq	r1, [r4, #0]
 8009428:	6054      	str	r4, [r2, #4]
 800942a:	e7ca      	b.n	80093c2 <_free_r+0x26>
 800942c:	b003      	add	sp, #12
 800942e:	bd30      	pop	{r4, r5, pc}
 8009430:	24000898 	.word	0x24000898

08009434 <sbrk_aligned>:
 8009434:	b570      	push	{r4, r5, r6, lr}
 8009436:	4e0e      	ldr	r6, [pc, #56]	; (8009470 <sbrk_aligned+0x3c>)
 8009438:	460c      	mov	r4, r1
 800943a:	6831      	ldr	r1, [r6, #0]
 800943c:	4605      	mov	r5, r0
 800943e:	b911      	cbnz	r1, 8009446 <sbrk_aligned+0x12>
 8009440:	f000 f9e8 	bl	8009814 <_sbrk_r>
 8009444:	6030      	str	r0, [r6, #0]
 8009446:	4621      	mov	r1, r4
 8009448:	4628      	mov	r0, r5
 800944a:	f000 f9e3 	bl	8009814 <_sbrk_r>
 800944e:	1c43      	adds	r3, r0, #1
 8009450:	d00a      	beq.n	8009468 <sbrk_aligned+0x34>
 8009452:	1cc4      	adds	r4, r0, #3
 8009454:	f024 0403 	bic.w	r4, r4, #3
 8009458:	42a0      	cmp	r0, r4
 800945a:	d007      	beq.n	800946c <sbrk_aligned+0x38>
 800945c:	1a21      	subs	r1, r4, r0
 800945e:	4628      	mov	r0, r5
 8009460:	f000 f9d8 	bl	8009814 <_sbrk_r>
 8009464:	3001      	adds	r0, #1
 8009466:	d101      	bne.n	800946c <sbrk_aligned+0x38>
 8009468:	f04f 34ff 	mov.w	r4, #4294967295
 800946c:	4620      	mov	r0, r4
 800946e:	bd70      	pop	{r4, r5, r6, pc}
 8009470:	2400089c 	.word	0x2400089c

08009474 <_malloc_r>:
 8009474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009478:	1ccd      	adds	r5, r1, #3
 800947a:	f025 0503 	bic.w	r5, r5, #3
 800947e:	3508      	adds	r5, #8
 8009480:	2d0c      	cmp	r5, #12
 8009482:	bf38      	it	cc
 8009484:	250c      	movcc	r5, #12
 8009486:	2d00      	cmp	r5, #0
 8009488:	4607      	mov	r7, r0
 800948a:	db01      	blt.n	8009490 <_malloc_r+0x1c>
 800948c:	42a9      	cmp	r1, r5
 800948e:	d905      	bls.n	800949c <_malloc_r+0x28>
 8009490:	230c      	movs	r3, #12
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	2600      	movs	r6, #0
 8009496:	4630      	mov	r0, r6
 8009498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800949c:	4e2e      	ldr	r6, [pc, #184]	; (8009558 <_malloc_r+0xe4>)
 800949e:	f000 fa25 	bl	80098ec <__malloc_lock>
 80094a2:	6833      	ldr	r3, [r6, #0]
 80094a4:	461c      	mov	r4, r3
 80094a6:	bb34      	cbnz	r4, 80094f6 <_malloc_r+0x82>
 80094a8:	4629      	mov	r1, r5
 80094aa:	4638      	mov	r0, r7
 80094ac:	f7ff ffc2 	bl	8009434 <sbrk_aligned>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	4604      	mov	r4, r0
 80094b4:	d14d      	bne.n	8009552 <_malloc_r+0xde>
 80094b6:	6834      	ldr	r4, [r6, #0]
 80094b8:	4626      	mov	r6, r4
 80094ba:	2e00      	cmp	r6, #0
 80094bc:	d140      	bne.n	8009540 <_malloc_r+0xcc>
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	4631      	mov	r1, r6
 80094c2:	4638      	mov	r0, r7
 80094c4:	eb04 0803 	add.w	r8, r4, r3
 80094c8:	f000 f9a4 	bl	8009814 <_sbrk_r>
 80094cc:	4580      	cmp	r8, r0
 80094ce:	d13a      	bne.n	8009546 <_malloc_r+0xd2>
 80094d0:	6821      	ldr	r1, [r4, #0]
 80094d2:	3503      	adds	r5, #3
 80094d4:	1a6d      	subs	r5, r5, r1
 80094d6:	f025 0503 	bic.w	r5, r5, #3
 80094da:	3508      	adds	r5, #8
 80094dc:	2d0c      	cmp	r5, #12
 80094de:	bf38      	it	cc
 80094e0:	250c      	movcc	r5, #12
 80094e2:	4629      	mov	r1, r5
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff ffa5 	bl	8009434 <sbrk_aligned>
 80094ea:	3001      	adds	r0, #1
 80094ec:	d02b      	beq.n	8009546 <_malloc_r+0xd2>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	442b      	add	r3, r5
 80094f2:	6023      	str	r3, [r4, #0]
 80094f4:	e00e      	b.n	8009514 <_malloc_r+0xa0>
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	1b52      	subs	r2, r2, r5
 80094fa:	d41e      	bmi.n	800953a <_malloc_r+0xc6>
 80094fc:	2a0b      	cmp	r2, #11
 80094fe:	d916      	bls.n	800952e <_malloc_r+0xba>
 8009500:	1961      	adds	r1, r4, r5
 8009502:	42a3      	cmp	r3, r4
 8009504:	6025      	str	r5, [r4, #0]
 8009506:	bf18      	it	ne
 8009508:	6059      	strne	r1, [r3, #4]
 800950a:	6863      	ldr	r3, [r4, #4]
 800950c:	bf08      	it	eq
 800950e:	6031      	streq	r1, [r6, #0]
 8009510:	5162      	str	r2, [r4, r5]
 8009512:	604b      	str	r3, [r1, #4]
 8009514:	4638      	mov	r0, r7
 8009516:	f104 060b 	add.w	r6, r4, #11
 800951a:	f000 f9ed 	bl	80098f8 <__malloc_unlock>
 800951e:	f026 0607 	bic.w	r6, r6, #7
 8009522:	1d23      	adds	r3, r4, #4
 8009524:	1af2      	subs	r2, r6, r3
 8009526:	d0b6      	beq.n	8009496 <_malloc_r+0x22>
 8009528:	1b9b      	subs	r3, r3, r6
 800952a:	50a3      	str	r3, [r4, r2]
 800952c:	e7b3      	b.n	8009496 <_malloc_r+0x22>
 800952e:	6862      	ldr	r2, [r4, #4]
 8009530:	42a3      	cmp	r3, r4
 8009532:	bf0c      	ite	eq
 8009534:	6032      	streq	r2, [r6, #0]
 8009536:	605a      	strne	r2, [r3, #4]
 8009538:	e7ec      	b.n	8009514 <_malloc_r+0xa0>
 800953a:	4623      	mov	r3, r4
 800953c:	6864      	ldr	r4, [r4, #4]
 800953e:	e7b2      	b.n	80094a6 <_malloc_r+0x32>
 8009540:	4634      	mov	r4, r6
 8009542:	6876      	ldr	r6, [r6, #4]
 8009544:	e7b9      	b.n	80094ba <_malloc_r+0x46>
 8009546:	230c      	movs	r3, #12
 8009548:	603b      	str	r3, [r7, #0]
 800954a:	4638      	mov	r0, r7
 800954c:	f000 f9d4 	bl	80098f8 <__malloc_unlock>
 8009550:	e7a1      	b.n	8009496 <_malloc_r+0x22>
 8009552:	6025      	str	r5, [r4, #0]
 8009554:	e7de      	b.n	8009514 <_malloc_r+0xa0>
 8009556:	bf00      	nop
 8009558:	24000898 	.word	0x24000898

0800955c <__ssputs_r>:
 800955c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009560:	688e      	ldr	r6, [r1, #8]
 8009562:	429e      	cmp	r6, r3
 8009564:	4682      	mov	sl, r0
 8009566:	460c      	mov	r4, r1
 8009568:	4690      	mov	r8, r2
 800956a:	461f      	mov	r7, r3
 800956c:	d838      	bhi.n	80095e0 <__ssputs_r+0x84>
 800956e:	898a      	ldrh	r2, [r1, #12]
 8009570:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009574:	d032      	beq.n	80095dc <__ssputs_r+0x80>
 8009576:	6825      	ldr	r5, [r4, #0]
 8009578:	6909      	ldr	r1, [r1, #16]
 800957a:	eba5 0901 	sub.w	r9, r5, r1
 800957e:	6965      	ldr	r5, [r4, #20]
 8009580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009584:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009588:	3301      	adds	r3, #1
 800958a:	444b      	add	r3, r9
 800958c:	106d      	asrs	r5, r5, #1
 800958e:	429d      	cmp	r5, r3
 8009590:	bf38      	it	cc
 8009592:	461d      	movcc	r5, r3
 8009594:	0553      	lsls	r3, r2, #21
 8009596:	d531      	bpl.n	80095fc <__ssputs_r+0xa0>
 8009598:	4629      	mov	r1, r5
 800959a:	f7ff ff6b 	bl	8009474 <_malloc_r>
 800959e:	4606      	mov	r6, r0
 80095a0:	b950      	cbnz	r0, 80095b8 <__ssputs_r+0x5c>
 80095a2:	230c      	movs	r3, #12
 80095a4:	f8ca 3000 	str.w	r3, [sl]
 80095a8:	89a3      	ldrh	r3, [r4, #12]
 80095aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	f04f 30ff 	mov.w	r0, #4294967295
 80095b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b8:	6921      	ldr	r1, [r4, #16]
 80095ba:	464a      	mov	r2, r9
 80095bc:	f7ff fb46 	bl	8008c4c <memcpy>
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ca:	81a3      	strh	r3, [r4, #12]
 80095cc:	6126      	str	r6, [r4, #16]
 80095ce:	6165      	str	r5, [r4, #20]
 80095d0:	444e      	add	r6, r9
 80095d2:	eba5 0509 	sub.w	r5, r5, r9
 80095d6:	6026      	str	r6, [r4, #0]
 80095d8:	60a5      	str	r5, [r4, #8]
 80095da:	463e      	mov	r6, r7
 80095dc:	42be      	cmp	r6, r7
 80095de:	d900      	bls.n	80095e2 <__ssputs_r+0x86>
 80095e0:	463e      	mov	r6, r7
 80095e2:	6820      	ldr	r0, [r4, #0]
 80095e4:	4632      	mov	r2, r6
 80095e6:	4641      	mov	r1, r8
 80095e8:	f000 f966 	bl	80098b8 <memmove>
 80095ec:	68a3      	ldr	r3, [r4, #8]
 80095ee:	1b9b      	subs	r3, r3, r6
 80095f0:	60a3      	str	r3, [r4, #8]
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	4433      	add	r3, r6
 80095f6:	6023      	str	r3, [r4, #0]
 80095f8:	2000      	movs	r0, #0
 80095fa:	e7db      	b.n	80095b4 <__ssputs_r+0x58>
 80095fc:	462a      	mov	r2, r5
 80095fe:	f000 f981 	bl	8009904 <_realloc_r>
 8009602:	4606      	mov	r6, r0
 8009604:	2800      	cmp	r0, #0
 8009606:	d1e1      	bne.n	80095cc <__ssputs_r+0x70>
 8009608:	6921      	ldr	r1, [r4, #16]
 800960a:	4650      	mov	r0, sl
 800960c:	f7ff fec6 	bl	800939c <_free_r>
 8009610:	e7c7      	b.n	80095a2 <__ssputs_r+0x46>
	...

08009614 <_svfiprintf_r>:
 8009614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009618:	4698      	mov	r8, r3
 800961a:	898b      	ldrh	r3, [r1, #12]
 800961c:	061b      	lsls	r3, r3, #24
 800961e:	b09d      	sub	sp, #116	; 0x74
 8009620:	4607      	mov	r7, r0
 8009622:	460d      	mov	r5, r1
 8009624:	4614      	mov	r4, r2
 8009626:	d50e      	bpl.n	8009646 <_svfiprintf_r+0x32>
 8009628:	690b      	ldr	r3, [r1, #16]
 800962a:	b963      	cbnz	r3, 8009646 <_svfiprintf_r+0x32>
 800962c:	2140      	movs	r1, #64	; 0x40
 800962e:	f7ff ff21 	bl	8009474 <_malloc_r>
 8009632:	6028      	str	r0, [r5, #0]
 8009634:	6128      	str	r0, [r5, #16]
 8009636:	b920      	cbnz	r0, 8009642 <_svfiprintf_r+0x2e>
 8009638:	230c      	movs	r3, #12
 800963a:	603b      	str	r3, [r7, #0]
 800963c:	f04f 30ff 	mov.w	r0, #4294967295
 8009640:	e0d1      	b.n	80097e6 <_svfiprintf_r+0x1d2>
 8009642:	2340      	movs	r3, #64	; 0x40
 8009644:	616b      	str	r3, [r5, #20]
 8009646:	2300      	movs	r3, #0
 8009648:	9309      	str	r3, [sp, #36]	; 0x24
 800964a:	2320      	movs	r3, #32
 800964c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009650:	f8cd 800c 	str.w	r8, [sp, #12]
 8009654:	2330      	movs	r3, #48	; 0x30
 8009656:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009800 <_svfiprintf_r+0x1ec>
 800965a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800965e:	f04f 0901 	mov.w	r9, #1
 8009662:	4623      	mov	r3, r4
 8009664:	469a      	mov	sl, r3
 8009666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800966a:	b10a      	cbz	r2, 8009670 <_svfiprintf_r+0x5c>
 800966c:	2a25      	cmp	r2, #37	; 0x25
 800966e:	d1f9      	bne.n	8009664 <_svfiprintf_r+0x50>
 8009670:	ebba 0b04 	subs.w	fp, sl, r4
 8009674:	d00b      	beq.n	800968e <_svfiprintf_r+0x7a>
 8009676:	465b      	mov	r3, fp
 8009678:	4622      	mov	r2, r4
 800967a:	4629      	mov	r1, r5
 800967c:	4638      	mov	r0, r7
 800967e:	f7ff ff6d 	bl	800955c <__ssputs_r>
 8009682:	3001      	adds	r0, #1
 8009684:	f000 80aa 	beq.w	80097dc <_svfiprintf_r+0x1c8>
 8009688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800968a:	445a      	add	r2, fp
 800968c:	9209      	str	r2, [sp, #36]	; 0x24
 800968e:	f89a 3000 	ldrb.w	r3, [sl]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 80a2 	beq.w	80097dc <_svfiprintf_r+0x1c8>
 8009698:	2300      	movs	r3, #0
 800969a:	f04f 32ff 	mov.w	r2, #4294967295
 800969e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096a2:	f10a 0a01 	add.w	sl, sl, #1
 80096a6:	9304      	str	r3, [sp, #16]
 80096a8:	9307      	str	r3, [sp, #28]
 80096aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096ae:	931a      	str	r3, [sp, #104]	; 0x68
 80096b0:	4654      	mov	r4, sl
 80096b2:	2205      	movs	r2, #5
 80096b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b8:	4851      	ldr	r0, [pc, #324]	; (8009800 <_svfiprintf_r+0x1ec>)
 80096ba:	f7f6 fe19 	bl	80002f0 <memchr>
 80096be:	9a04      	ldr	r2, [sp, #16]
 80096c0:	b9d8      	cbnz	r0, 80096fa <_svfiprintf_r+0xe6>
 80096c2:	06d0      	lsls	r0, r2, #27
 80096c4:	bf44      	itt	mi
 80096c6:	2320      	movmi	r3, #32
 80096c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096cc:	0711      	lsls	r1, r2, #28
 80096ce:	bf44      	itt	mi
 80096d0:	232b      	movmi	r3, #43	; 0x2b
 80096d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096d6:	f89a 3000 	ldrb.w	r3, [sl]
 80096da:	2b2a      	cmp	r3, #42	; 0x2a
 80096dc:	d015      	beq.n	800970a <_svfiprintf_r+0xf6>
 80096de:	9a07      	ldr	r2, [sp, #28]
 80096e0:	4654      	mov	r4, sl
 80096e2:	2000      	movs	r0, #0
 80096e4:	f04f 0c0a 	mov.w	ip, #10
 80096e8:	4621      	mov	r1, r4
 80096ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096ee:	3b30      	subs	r3, #48	; 0x30
 80096f0:	2b09      	cmp	r3, #9
 80096f2:	d94e      	bls.n	8009792 <_svfiprintf_r+0x17e>
 80096f4:	b1b0      	cbz	r0, 8009724 <_svfiprintf_r+0x110>
 80096f6:	9207      	str	r2, [sp, #28]
 80096f8:	e014      	b.n	8009724 <_svfiprintf_r+0x110>
 80096fa:	eba0 0308 	sub.w	r3, r0, r8
 80096fe:	fa09 f303 	lsl.w	r3, r9, r3
 8009702:	4313      	orrs	r3, r2
 8009704:	9304      	str	r3, [sp, #16]
 8009706:	46a2      	mov	sl, r4
 8009708:	e7d2      	b.n	80096b0 <_svfiprintf_r+0x9c>
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	1d19      	adds	r1, r3, #4
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	9103      	str	r1, [sp, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	bfbb      	ittet	lt
 8009716:	425b      	neglt	r3, r3
 8009718:	f042 0202 	orrlt.w	r2, r2, #2
 800971c:	9307      	strge	r3, [sp, #28]
 800971e:	9307      	strlt	r3, [sp, #28]
 8009720:	bfb8      	it	lt
 8009722:	9204      	strlt	r2, [sp, #16]
 8009724:	7823      	ldrb	r3, [r4, #0]
 8009726:	2b2e      	cmp	r3, #46	; 0x2e
 8009728:	d10c      	bne.n	8009744 <_svfiprintf_r+0x130>
 800972a:	7863      	ldrb	r3, [r4, #1]
 800972c:	2b2a      	cmp	r3, #42	; 0x2a
 800972e:	d135      	bne.n	800979c <_svfiprintf_r+0x188>
 8009730:	9b03      	ldr	r3, [sp, #12]
 8009732:	1d1a      	adds	r2, r3, #4
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	9203      	str	r2, [sp, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	bfb8      	it	lt
 800973c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009740:	3402      	adds	r4, #2
 8009742:	9305      	str	r3, [sp, #20]
 8009744:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009810 <_svfiprintf_r+0x1fc>
 8009748:	7821      	ldrb	r1, [r4, #0]
 800974a:	2203      	movs	r2, #3
 800974c:	4650      	mov	r0, sl
 800974e:	f7f6 fdcf 	bl	80002f0 <memchr>
 8009752:	b140      	cbz	r0, 8009766 <_svfiprintf_r+0x152>
 8009754:	2340      	movs	r3, #64	; 0x40
 8009756:	eba0 000a 	sub.w	r0, r0, sl
 800975a:	fa03 f000 	lsl.w	r0, r3, r0
 800975e:	9b04      	ldr	r3, [sp, #16]
 8009760:	4303      	orrs	r3, r0
 8009762:	3401      	adds	r4, #1
 8009764:	9304      	str	r3, [sp, #16]
 8009766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976a:	4826      	ldr	r0, [pc, #152]	; (8009804 <_svfiprintf_r+0x1f0>)
 800976c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009770:	2206      	movs	r2, #6
 8009772:	f7f6 fdbd 	bl	80002f0 <memchr>
 8009776:	2800      	cmp	r0, #0
 8009778:	d038      	beq.n	80097ec <_svfiprintf_r+0x1d8>
 800977a:	4b23      	ldr	r3, [pc, #140]	; (8009808 <_svfiprintf_r+0x1f4>)
 800977c:	bb1b      	cbnz	r3, 80097c6 <_svfiprintf_r+0x1b2>
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	3307      	adds	r3, #7
 8009782:	f023 0307 	bic.w	r3, r3, #7
 8009786:	3308      	adds	r3, #8
 8009788:	9303      	str	r3, [sp, #12]
 800978a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978c:	4433      	add	r3, r6
 800978e:	9309      	str	r3, [sp, #36]	; 0x24
 8009790:	e767      	b.n	8009662 <_svfiprintf_r+0x4e>
 8009792:	fb0c 3202 	mla	r2, ip, r2, r3
 8009796:	460c      	mov	r4, r1
 8009798:	2001      	movs	r0, #1
 800979a:	e7a5      	b.n	80096e8 <_svfiprintf_r+0xd4>
 800979c:	2300      	movs	r3, #0
 800979e:	3401      	adds	r4, #1
 80097a0:	9305      	str	r3, [sp, #20]
 80097a2:	4619      	mov	r1, r3
 80097a4:	f04f 0c0a 	mov.w	ip, #10
 80097a8:	4620      	mov	r0, r4
 80097aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ae:	3a30      	subs	r2, #48	; 0x30
 80097b0:	2a09      	cmp	r2, #9
 80097b2:	d903      	bls.n	80097bc <_svfiprintf_r+0x1a8>
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d0c5      	beq.n	8009744 <_svfiprintf_r+0x130>
 80097b8:	9105      	str	r1, [sp, #20]
 80097ba:	e7c3      	b.n	8009744 <_svfiprintf_r+0x130>
 80097bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80097c0:	4604      	mov	r4, r0
 80097c2:	2301      	movs	r3, #1
 80097c4:	e7f0      	b.n	80097a8 <_svfiprintf_r+0x194>
 80097c6:	ab03      	add	r3, sp, #12
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	462a      	mov	r2, r5
 80097cc:	4b0f      	ldr	r3, [pc, #60]	; (800980c <_svfiprintf_r+0x1f8>)
 80097ce:	a904      	add	r1, sp, #16
 80097d0:	4638      	mov	r0, r7
 80097d2:	f7fe f861 	bl	8007898 <_printf_float>
 80097d6:	1c42      	adds	r2, r0, #1
 80097d8:	4606      	mov	r6, r0
 80097da:	d1d6      	bne.n	800978a <_svfiprintf_r+0x176>
 80097dc:	89ab      	ldrh	r3, [r5, #12]
 80097de:	065b      	lsls	r3, r3, #25
 80097e0:	f53f af2c 	bmi.w	800963c <_svfiprintf_r+0x28>
 80097e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097e6:	b01d      	add	sp, #116	; 0x74
 80097e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ec:	ab03      	add	r3, sp, #12
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	462a      	mov	r2, r5
 80097f2:	4b06      	ldr	r3, [pc, #24]	; (800980c <_svfiprintf_r+0x1f8>)
 80097f4:	a904      	add	r1, sp, #16
 80097f6:	4638      	mov	r0, r7
 80097f8:	f7fe fada 	bl	8007db0 <_printf_i>
 80097fc:	e7eb      	b.n	80097d6 <_svfiprintf_r+0x1c2>
 80097fe:	bf00      	nop
 8009800:	0800a70c 	.word	0x0800a70c
 8009804:	0800a716 	.word	0x0800a716
 8009808:	08007899 	.word	0x08007899
 800980c:	0800955d 	.word	0x0800955d
 8009810:	0800a712 	.word	0x0800a712

08009814 <_sbrk_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d06      	ldr	r5, [pc, #24]	; (8009830 <_sbrk_r+0x1c>)
 8009818:	2300      	movs	r3, #0
 800981a:	4604      	mov	r4, r0
 800981c:	4608      	mov	r0, r1
 800981e:	602b      	str	r3, [r5, #0]
 8009820:	f7f7 fee2 	bl	80015e8 <_sbrk>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d102      	bne.n	800982e <_sbrk_r+0x1a>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	b103      	cbz	r3, 800982e <_sbrk_r+0x1a>
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	240008a0 	.word	0x240008a0

08009834 <__assert_func>:
 8009834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009836:	4614      	mov	r4, r2
 8009838:	461a      	mov	r2, r3
 800983a:	4b09      	ldr	r3, [pc, #36]	; (8009860 <__assert_func+0x2c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4605      	mov	r5, r0
 8009840:	68d8      	ldr	r0, [r3, #12]
 8009842:	b14c      	cbz	r4, 8009858 <__assert_func+0x24>
 8009844:	4b07      	ldr	r3, [pc, #28]	; (8009864 <__assert_func+0x30>)
 8009846:	9100      	str	r1, [sp, #0]
 8009848:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800984c:	4906      	ldr	r1, [pc, #24]	; (8009868 <__assert_func+0x34>)
 800984e:	462b      	mov	r3, r5
 8009850:	f000 f80e 	bl	8009870 <fiprintf>
 8009854:	f000 faac 	bl	8009db0 <abort>
 8009858:	4b04      	ldr	r3, [pc, #16]	; (800986c <__assert_func+0x38>)
 800985a:	461c      	mov	r4, r3
 800985c:	e7f3      	b.n	8009846 <__assert_func+0x12>
 800985e:	bf00      	nop
 8009860:	24000010 	.word	0x24000010
 8009864:	0800a71d 	.word	0x0800a71d
 8009868:	0800a72a 	.word	0x0800a72a
 800986c:	0800a758 	.word	0x0800a758

08009870 <fiprintf>:
 8009870:	b40e      	push	{r1, r2, r3}
 8009872:	b503      	push	{r0, r1, lr}
 8009874:	4601      	mov	r1, r0
 8009876:	ab03      	add	r3, sp, #12
 8009878:	4805      	ldr	r0, [pc, #20]	; (8009890 <fiprintf+0x20>)
 800987a:	f853 2b04 	ldr.w	r2, [r3], #4
 800987e:	6800      	ldr	r0, [r0, #0]
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	f000 f897 	bl	80099b4 <_vfiprintf_r>
 8009886:	b002      	add	sp, #8
 8009888:	f85d eb04 	ldr.w	lr, [sp], #4
 800988c:	b003      	add	sp, #12
 800988e:	4770      	bx	lr
 8009890:	24000010 	.word	0x24000010

08009894 <__ascii_mbtowc>:
 8009894:	b082      	sub	sp, #8
 8009896:	b901      	cbnz	r1, 800989a <__ascii_mbtowc+0x6>
 8009898:	a901      	add	r1, sp, #4
 800989a:	b142      	cbz	r2, 80098ae <__ascii_mbtowc+0x1a>
 800989c:	b14b      	cbz	r3, 80098b2 <__ascii_mbtowc+0x1e>
 800989e:	7813      	ldrb	r3, [r2, #0]
 80098a0:	600b      	str	r3, [r1, #0]
 80098a2:	7812      	ldrb	r2, [r2, #0]
 80098a4:	1e10      	subs	r0, r2, #0
 80098a6:	bf18      	it	ne
 80098a8:	2001      	movne	r0, #1
 80098aa:	b002      	add	sp, #8
 80098ac:	4770      	bx	lr
 80098ae:	4610      	mov	r0, r2
 80098b0:	e7fb      	b.n	80098aa <__ascii_mbtowc+0x16>
 80098b2:	f06f 0001 	mvn.w	r0, #1
 80098b6:	e7f8      	b.n	80098aa <__ascii_mbtowc+0x16>

080098b8 <memmove>:
 80098b8:	4288      	cmp	r0, r1
 80098ba:	b510      	push	{r4, lr}
 80098bc:	eb01 0402 	add.w	r4, r1, r2
 80098c0:	d902      	bls.n	80098c8 <memmove+0x10>
 80098c2:	4284      	cmp	r4, r0
 80098c4:	4623      	mov	r3, r4
 80098c6:	d807      	bhi.n	80098d8 <memmove+0x20>
 80098c8:	1e43      	subs	r3, r0, #1
 80098ca:	42a1      	cmp	r1, r4
 80098cc:	d008      	beq.n	80098e0 <memmove+0x28>
 80098ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098d6:	e7f8      	b.n	80098ca <memmove+0x12>
 80098d8:	4402      	add	r2, r0
 80098da:	4601      	mov	r1, r0
 80098dc:	428a      	cmp	r2, r1
 80098de:	d100      	bne.n	80098e2 <memmove+0x2a>
 80098e0:	bd10      	pop	{r4, pc}
 80098e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098ea:	e7f7      	b.n	80098dc <memmove+0x24>

080098ec <__malloc_lock>:
 80098ec:	4801      	ldr	r0, [pc, #4]	; (80098f4 <__malloc_lock+0x8>)
 80098ee:	f000 bc1f 	b.w	800a130 <__retarget_lock_acquire_recursive>
 80098f2:	bf00      	nop
 80098f4:	240008a4 	.word	0x240008a4

080098f8 <__malloc_unlock>:
 80098f8:	4801      	ldr	r0, [pc, #4]	; (8009900 <__malloc_unlock+0x8>)
 80098fa:	f000 bc1a 	b.w	800a132 <__retarget_lock_release_recursive>
 80098fe:	bf00      	nop
 8009900:	240008a4 	.word	0x240008a4

08009904 <_realloc_r>:
 8009904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009908:	4680      	mov	r8, r0
 800990a:	4614      	mov	r4, r2
 800990c:	460e      	mov	r6, r1
 800990e:	b921      	cbnz	r1, 800991a <_realloc_r+0x16>
 8009910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	4611      	mov	r1, r2
 8009916:	f7ff bdad 	b.w	8009474 <_malloc_r>
 800991a:	b92a      	cbnz	r2, 8009928 <_realloc_r+0x24>
 800991c:	f7ff fd3e 	bl	800939c <_free_r>
 8009920:	4625      	mov	r5, r4
 8009922:	4628      	mov	r0, r5
 8009924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009928:	f000 fc6a 	bl	800a200 <_malloc_usable_size_r>
 800992c:	4284      	cmp	r4, r0
 800992e:	4607      	mov	r7, r0
 8009930:	d802      	bhi.n	8009938 <_realloc_r+0x34>
 8009932:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009936:	d812      	bhi.n	800995e <_realloc_r+0x5a>
 8009938:	4621      	mov	r1, r4
 800993a:	4640      	mov	r0, r8
 800993c:	f7ff fd9a 	bl	8009474 <_malloc_r>
 8009940:	4605      	mov	r5, r0
 8009942:	2800      	cmp	r0, #0
 8009944:	d0ed      	beq.n	8009922 <_realloc_r+0x1e>
 8009946:	42bc      	cmp	r4, r7
 8009948:	4622      	mov	r2, r4
 800994a:	4631      	mov	r1, r6
 800994c:	bf28      	it	cs
 800994e:	463a      	movcs	r2, r7
 8009950:	f7ff f97c 	bl	8008c4c <memcpy>
 8009954:	4631      	mov	r1, r6
 8009956:	4640      	mov	r0, r8
 8009958:	f7ff fd20 	bl	800939c <_free_r>
 800995c:	e7e1      	b.n	8009922 <_realloc_r+0x1e>
 800995e:	4635      	mov	r5, r6
 8009960:	e7df      	b.n	8009922 <_realloc_r+0x1e>

08009962 <__sfputc_r>:
 8009962:	6893      	ldr	r3, [r2, #8]
 8009964:	3b01      	subs	r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	b410      	push	{r4}
 800996a:	6093      	str	r3, [r2, #8]
 800996c:	da08      	bge.n	8009980 <__sfputc_r+0x1e>
 800996e:	6994      	ldr	r4, [r2, #24]
 8009970:	42a3      	cmp	r3, r4
 8009972:	db01      	blt.n	8009978 <__sfputc_r+0x16>
 8009974:	290a      	cmp	r1, #10
 8009976:	d103      	bne.n	8009980 <__sfputc_r+0x1e>
 8009978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800997c:	f000 b94a 	b.w	8009c14 <__swbuf_r>
 8009980:	6813      	ldr	r3, [r2, #0]
 8009982:	1c58      	adds	r0, r3, #1
 8009984:	6010      	str	r0, [r2, #0]
 8009986:	7019      	strb	r1, [r3, #0]
 8009988:	4608      	mov	r0, r1
 800998a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800998e:	4770      	bx	lr

08009990 <__sfputs_r>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	4606      	mov	r6, r0
 8009994:	460f      	mov	r7, r1
 8009996:	4614      	mov	r4, r2
 8009998:	18d5      	adds	r5, r2, r3
 800999a:	42ac      	cmp	r4, r5
 800999c:	d101      	bne.n	80099a2 <__sfputs_r+0x12>
 800999e:	2000      	movs	r0, #0
 80099a0:	e007      	b.n	80099b2 <__sfputs_r+0x22>
 80099a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a6:	463a      	mov	r2, r7
 80099a8:	4630      	mov	r0, r6
 80099aa:	f7ff ffda 	bl	8009962 <__sfputc_r>
 80099ae:	1c43      	adds	r3, r0, #1
 80099b0:	d1f3      	bne.n	800999a <__sfputs_r+0xa>
 80099b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099b4 <_vfiprintf_r>:
 80099b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b8:	460d      	mov	r5, r1
 80099ba:	b09d      	sub	sp, #116	; 0x74
 80099bc:	4614      	mov	r4, r2
 80099be:	4698      	mov	r8, r3
 80099c0:	4606      	mov	r6, r0
 80099c2:	b118      	cbz	r0, 80099cc <_vfiprintf_r+0x18>
 80099c4:	6983      	ldr	r3, [r0, #24]
 80099c6:	b90b      	cbnz	r3, 80099cc <_vfiprintf_r+0x18>
 80099c8:	f000 fb14 	bl	8009ff4 <__sinit>
 80099cc:	4b89      	ldr	r3, [pc, #548]	; (8009bf4 <_vfiprintf_r+0x240>)
 80099ce:	429d      	cmp	r5, r3
 80099d0:	d11b      	bne.n	8009a0a <_vfiprintf_r+0x56>
 80099d2:	6875      	ldr	r5, [r6, #4]
 80099d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099d6:	07d9      	lsls	r1, r3, #31
 80099d8:	d405      	bmi.n	80099e6 <_vfiprintf_r+0x32>
 80099da:	89ab      	ldrh	r3, [r5, #12]
 80099dc:	059a      	lsls	r2, r3, #22
 80099de:	d402      	bmi.n	80099e6 <_vfiprintf_r+0x32>
 80099e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099e2:	f000 fba5 	bl	800a130 <__retarget_lock_acquire_recursive>
 80099e6:	89ab      	ldrh	r3, [r5, #12]
 80099e8:	071b      	lsls	r3, r3, #28
 80099ea:	d501      	bpl.n	80099f0 <_vfiprintf_r+0x3c>
 80099ec:	692b      	ldr	r3, [r5, #16]
 80099ee:	b9eb      	cbnz	r3, 8009a2c <_vfiprintf_r+0x78>
 80099f0:	4629      	mov	r1, r5
 80099f2:	4630      	mov	r0, r6
 80099f4:	f000 f96e 	bl	8009cd4 <__swsetup_r>
 80099f8:	b1c0      	cbz	r0, 8009a2c <_vfiprintf_r+0x78>
 80099fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099fc:	07dc      	lsls	r4, r3, #31
 80099fe:	d50e      	bpl.n	8009a1e <_vfiprintf_r+0x6a>
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	b01d      	add	sp, #116	; 0x74
 8009a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0a:	4b7b      	ldr	r3, [pc, #492]	; (8009bf8 <_vfiprintf_r+0x244>)
 8009a0c:	429d      	cmp	r5, r3
 8009a0e:	d101      	bne.n	8009a14 <_vfiprintf_r+0x60>
 8009a10:	68b5      	ldr	r5, [r6, #8]
 8009a12:	e7df      	b.n	80099d4 <_vfiprintf_r+0x20>
 8009a14:	4b79      	ldr	r3, [pc, #484]	; (8009bfc <_vfiprintf_r+0x248>)
 8009a16:	429d      	cmp	r5, r3
 8009a18:	bf08      	it	eq
 8009a1a:	68f5      	ldreq	r5, [r6, #12]
 8009a1c:	e7da      	b.n	80099d4 <_vfiprintf_r+0x20>
 8009a1e:	89ab      	ldrh	r3, [r5, #12]
 8009a20:	0598      	lsls	r0, r3, #22
 8009a22:	d4ed      	bmi.n	8009a00 <_vfiprintf_r+0x4c>
 8009a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a26:	f000 fb84 	bl	800a132 <__retarget_lock_release_recursive>
 8009a2a:	e7e9      	b.n	8009a00 <_vfiprintf_r+0x4c>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a30:	2320      	movs	r3, #32
 8009a32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a3a:	2330      	movs	r3, #48	; 0x30
 8009a3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c00 <_vfiprintf_r+0x24c>
 8009a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a44:	f04f 0901 	mov.w	r9, #1
 8009a48:	4623      	mov	r3, r4
 8009a4a:	469a      	mov	sl, r3
 8009a4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a50:	b10a      	cbz	r2, 8009a56 <_vfiprintf_r+0xa2>
 8009a52:	2a25      	cmp	r2, #37	; 0x25
 8009a54:	d1f9      	bne.n	8009a4a <_vfiprintf_r+0x96>
 8009a56:	ebba 0b04 	subs.w	fp, sl, r4
 8009a5a:	d00b      	beq.n	8009a74 <_vfiprintf_r+0xc0>
 8009a5c:	465b      	mov	r3, fp
 8009a5e:	4622      	mov	r2, r4
 8009a60:	4629      	mov	r1, r5
 8009a62:	4630      	mov	r0, r6
 8009a64:	f7ff ff94 	bl	8009990 <__sfputs_r>
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f000 80aa 	beq.w	8009bc2 <_vfiprintf_r+0x20e>
 8009a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a70:	445a      	add	r2, fp
 8009a72:	9209      	str	r2, [sp, #36]	; 0x24
 8009a74:	f89a 3000 	ldrb.w	r3, [sl]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 80a2 	beq.w	8009bc2 <_vfiprintf_r+0x20e>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f04f 32ff 	mov.w	r2, #4294967295
 8009a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a88:	f10a 0a01 	add.w	sl, sl, #1
 8009a8c:	9304      	str	r3, [sp, #16]
 8009a8e:	9307      	str	r3, [sp, #28]
 8009a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a94:	931a      	str	r3, [sp, #104]	; 0x68
 8009a96:	4654      	mov	r4, sl
 8009a98:	2205      	movs	r2, #5
 8009a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a9e:	4858      	ldr	r0, [pc, #352]	; (8009c00 <_vfiprintf_r+0x24c>)
 8009aa0:	f7f6 fc26 	bl	80002f0 <memchr>
 8009aa4:	9a04      	ldr	r2, [sp, #16]
 8009aa6:	b9d8      	cbnz	r0, 8009ae0 <_vfiprintf_r+0x12c>
 8009aa8:	06d1      	lsls	r1, r2, #27
 8009aaa:	bf44      	itt	mi
 8009aac:	2320      	movmi	r3, #32
 8009aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ab2:	0713      	lsls	r3, r2, #28
 8009ab4:	bf44      	itt	mi
 8009ab6:	232b      	movmi	r3, #43	; 0x2b
 8009ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009abc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ac2:	d015      	beq.n	8009af0 <_vfiprintf_r+0x13c>
 8009ac4:	9a07      	ldr	r2, [sp, #28]
 8009ac6:	4654      	mov	r4, sl
 8009ac8:	2000      	movs	r0, #0
 8009aca:	f04f 0c0a 	mov.w	ip, #10
 8009ace:	4621      	mov	r1, r4
 8009ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ad4:	3b30      	subs	r3, #48	; 0x30
 8009ad6:	2b09      	cmp	r3, #9
 8009ad8:	d94e      	bls.n	8009b78 <_vfiprintf_r+0x1c4>
 8009ada:	b1b0      	cbz	r0, 8009b0a <_vfiprintf_r+0x156>
 8009adc:	9207      	str	r2, [sp, #28]
 8009ade:	e014      	b.n	8009b0a <_vfiprintf_r+0x156>
 8009ae0:	eba0 0308 	sub.w	r3, r0, r8
 8009ae4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	9304      	str	r3, [sp, #16]
 8009aec:	46a2      	mov	sl, r4
 8009aee:	e7d2      	b.n	8009a96 <_vfiprintf_r+0xe2>
 8009af0:	9b03      	ldr	r3, [sp, #12]
 8009af2:	1d19      	adds	r1, r3, #4
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	9103      	str	r1, [sp, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	bfbb      	ittet	lt
 8009afc:	425b      	neglt	r3, r3
 8009afe:	f042 0202 	orrlt.w	r2, r2, #2
 8009b02:	9307      	strge	r3, [sp, #28]
 8009b04:	9307      	strlt	r3, [sp, #28]
 8009b06:	bfb8      	it	lt
 8009b08:	9204      	strlt	r2, [sp, #16]
 8009b0a:	7823      	ldrb	r3, [r4, #0]
 8009b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b0e:	d10c      	bne.n	8009b2a <_vfiprintf_r+0x176>
 8009b10:	7863      	ldrb	r3, [r4, #1]
 8009b12:	2b2a      	cmp	r3, #42	; 0x2a
 8009b14:	d135      	bne.n	8009b82 <_vfiprintf_r+0x1ce>
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	1d1a      	adds	r2, r3, #4
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	9203      	str	r2, [sp, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bfb8      	it	lt
 8009b22:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b26:	3402      	adds	r4, #2
 8009b28:	9305      	str	r3, [sp, #20]
 8009b2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c10 <_vfiprintf_r+0x25c>
 8009b2e:	7821      	ldrb	r1, [r4, #0]
 8009b30:	2203      	movs	r2, #3
 8009b32:	4650      	mov	r0, sl
 8009b34:	f7f6 fbdc 	bl	80002f0 <memchr>
 8009b38:	b140      	cbz	r0, 8009b4c <_vfiprintf_r+0x198>
 8009b3a:	2340      	movs	r3, #64	; 0x40
 8009b3c:	eba0 000a 	sub.w	r0, r0, sl
 8009b40:	fa03 f000 	lsl.w	r0, r3, r0
 8009b44:	9b04      	ldr	r3, [sp, #16]
 8009b46:	4303      	orrs	r3, r0
 8009b48:	3401      	adds	r4, #1
 8009b4a:	9304      	str	r3, [sp, #16]
 8009b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b50:	482c      	ldr	r0, [pc, #176]	; (8009c04 <_vfiprintf_r+0x250>)
 8009b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b56:	2206      	movs	r2, #6
 8009b58:	f7f6 fbca 	bl	80002f0 <memchr>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d03f      	beq.n	8009be0 <_vfiprintf_r+0x22c>
 8009b60:	4b29      	ldr	r3, [pc, #164]	; (8009c08 <_vfiprintf_r+0x254>)
 8009b62:	bb1b      	cbnz	r3, 8009bac <_vfiprintf_r+0x1f8>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	3307      	adds	r3, #7
 8009b68:	f023 0307 	bic.w	r3, r3, #7
 8009b6c:	3308      	adds	r3, #8
 8009b6e:	9303      	str	r3, [sp, #12]
 8009b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b72:	443b      	add	r3, r7
 8009b74:	9309      	str	r3, [sp, #36]	; 0x24
 8009b76:	e767      	b.n	8009a48 <_vfiprintf_r+0x94>
 8009b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	2001      	movs	r0, #1
 8009b80:	e7a5      	b.n	8009ace <_vfiprintf_r+0x11a>
 8009b82:	2300      	movs	r3, #0
 8009b84:	3401      	adds	r4, #1
 8009b86:	9305      	str	r3, [sp, #20]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	f04f 0c0a 	mov.w	ip, #10
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b94:	3a30      	subs	r2, #48	; 0x30
 8009b96:	2a09      	cmp	r2, #9
 8009b98:	d903      	bls.n	8009ba2 <_vfiprintf_r+0x1ee>
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0c5      	beq.n	8009b2a <_vfiprintf_r+0x176>
 8009b9e:	9105      	str	r1, [sp, #20]
 8009ba0:	e7c3      	b.n	8009b2a <_vfiprintf_r+0x176>
 8009ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e7f0      	b.n	8009b8e <_vfiprintf_r+0x1da>
 8009bac:	ab03      	add	r3, sp, #12
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	462a      	mov	r2, r5
 8009bb2:	4b16      	ldr	r3, [pc, #88]	; (8009c0c <_vfiprintf_r+0x258>)
 8009bb4:	a904      	add	r1, sp, #16
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f7fd fe6e 	bl	8007898 <_printf_float>
 8009bbc:	4607      	mov	r7, r0
 8009bbe:	1c78      	adds	r0, r7, #1
 8009bc0:	d1d6      	bne.n	8009b70 <_vfiprintf_r+0x1bc>
 8009bc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bc4:	07d9      	lsls	r1, r3, #31
 8009bc6:	d405      	bmi.n	8009bd4 <_vfiprintf_r+0x220>
 8009bc8:	89ab      	ldrh	r3, [r5, #12]
 8009bca:	059a      	lsls	r2, r3, #22
 8009bcc:	d402      	bmi.n	8009bd4 <_vfiprintf_r+0x220>
 8009bce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bd0:	f000 faaf 	bl	800a132 <__retarget_lock_release_recursive>
 8009bd4:	89ab      	ldrh	r3, [r5, #12]
 8009bd6:	065b      	lsls	r3, r3, #25
 8009bd8:	f53f af12 	bmi.w	8009a00 <_vfiprintf_r+0x4c>
 8009bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bde:	e711      	b.n	8009a04 <_vfiprintf_r+0x50>
 8009be0:	ab03      	add	r3, sp, #12
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	462a      	mov	r2, r5
 8009be6:	4b09      	ldr	r3, [pc, #36]	; (8009c0c <_vfiprintf_r+0x258>)
 8009be8:	a904      	add	r1, sp, #16
 8009bea:	4630      	mov	r0, r6
 8009bec:	f7fe f8e0 	bl	8007db0 <_printf_i>
 8009bf0:	e7e4      	b.n	8009bbc <_vfiprintf_r+0x208>
 8009bf2:	bf00      	nop
 8009bf4:	0800a884 	.word	0x0800a884
 8009bf8:	0800a8a4 	.word	0x0800a8a4
 8009bfc:	0800a864 	.word	0x0800a864
 8009c00:	0800a70c 	.word	0x0800a70c
 8009c04:	0800a716 	.word	0x0800a716
 8009c08:	08007899 	.word	0x08007899
 8009c0c:	08009991 	.word	0x08009991
 8009c10:	0800a712 	.word	0x0800a712

08009c14 <__swbuf_r>:
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	460e      	mov	r6, r1
 8009c18:	4614      	mov	r4, r2
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	b118      	cbz	r0, 8009c26 <__swbuf_r+0x12>
 8009c1e:	6983      	ldr	r3, [r0, #24]
 8009c20:	b90b      	cbnz	r3, 8009c26 <__swbuf_r+0x12>
 8009c22:	f000 f9e7 	bl	8009ff4 <__sinit>
 8009c26:	4b21      	ldr	r3, [pc, #132]	; (8009cac <__swbuf_r+0x98>)
 8009c28:	429c      	cmp	r4, r3
 8009c2a:	d12b      	bne.n	8009c84 <__swbuf_r+0x70>
 8009c2c:	686c      	ldr	r4, [r5, #4]
 8009c2e:	69a3      	ldr	r3, [r4, #24]
 8009c30:	60a3      	str	r3, [r4, #8]
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	071a      	lsls	r2, r3, #28
 8009c36:	d52f      	bpl.n	8009c98 <__swbuf_r+0x84>
 8009c38:	6923      	ldr	r3, [r4, #16]
 8009c3a:	b36b      	cbz	r3, 8009c98 <__swbuf_r+0x84>
 8009c3c:	6923      	ldr	r3, [r4, #16]
 8009c3e:	6820      	ldr	r0, [r4, #0]
 8009c40:	1ac0      	subs	r0, r0, r3
 8009c42:	6963      	ldr	r3, [r4, #20]
 8009c44:	b2f6      	uxtb	r6, r6
 8009c46:	4283      	cmp	r3, r0
 8009c48:	4637      	mov	r7, r6
 8009c4a:	dc04      	bgt.n	8009c56 <__swbuf_r+0x42>
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f000 f93c 	bl	8009ecc <_fflush_r>
 8009c54:	bb30      	cbnz	r0, 8009ca4 <__swbuf_r+0x90>
 8009c56:	68a3      	ldr	r3, [r4, #8]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	60a3      	str	r3, [r4, #8]
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	6022      	str	r2, [r4, #0]
 8009c62:	701e      	strb	r6, [r3, #0]
 8009c64:	6963      	ldr	r3, [r4, #20]
 8009c66:	3001      	adds	r0, #1
 8009c68:	4283      	cmp	r3, r0
 8009c6a:	d004      	beq.n	8009c76 <__swbuf_r+0x62>
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	07db      	lsls	r3, r3, #31
 8009c70:	d506      	bpl.n	8009c80 <__swbuf_r+0x6c>
 8009c72:	2e0a      	cmp	r6, #10
 8009c74:	d104      	bne.n	8009c80 <__swbuf_r+0x6c>
 8009c76:	4621      	mov	r1, r4
 8009c78:	4628      	mov	r0, r5
 8009c7a:	f000 f927 	bl	8009ecc <_fflush_r>
 8009c7e:	b988      	cbnz	r0, 8009ca4 <__swbuf_r+0x90>
 8009c80:	4638      	mov	r0, r7
 8009c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c84:	4b0a      	ldr	r3, [pc, #40]	; (8009cb0 <__swbuf_r+0x9c>)
 8009c86:	429c      	cmp	r4, r3
 8009c88:	d101      	bne.n	8009c8e <__swbuf_r+0x7a>
 8009c8a:	68ac      	ldr	r4, [r5, #8]
 8009c8c:	e7cf      	b.n	8009c2e <__swbuf_r+0x1a>
 8009c8e:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <__swbuf_r+0xa0>)
 8009c90:	429c      	cmp	r4, r3
 8009c92:	bf08      	it	eq
 8009c94:	68ec      	ldreq	r4, [r5, #12]
 8009c96:	e7ca      	b.n	8009c2e <__swbuf_r+0x1a>
 8009c98:	4621      	mov	r1, r4
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f000 f81a 	bl	8009cd4 <__swsetup_r>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d0cb      	beq.n	8009c3c <__swbuf_r+0x28>
 8009ca4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ca8:	e7ea      	b.n	8009c80 <__swbuf_r+0x6c>
 8009caa:	bf00      	nop
 8009cac:	0800a884 	.word	0x0800a884
 8009cb0:	0800a8a4 	.word	0x0800a8a4
 8009cb4:	0800a864 	.word	0x0800a864

08009cb8 <__ascii_wctomb>:
 8009cb8:	b149      	cbz	r1, 8009cce <__ascii_wctomb+0x16>
 8009cba:	2aff      	cmp	r2, #255	; 0xff
 8009cbc:	bf85      	ittet	hi
 8009cbe:	238a      	movhi	r3, #138	; 0x8a
 8009cc0:	6003      	strhi	r3, [r0, #0]
 8009cc2:	700a      	strbls	r2, [r1, #0]
 8009cc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009cc8:	bf98      	it	ls
 8009cca:	2001      	movls	r0, #1
 8009ccc:	4770      	bx	lr
 8009cce:	4608      	mov	r0, r1
 8009cd0:	4770      	bx	lr
	...

08009cd4 <__swsetup_r>:
 8009cd4:	4b32      	ldr	r3, [pc, #200]	; (8009da0 <__swsetup_r+0xcc>)
 8009cd6:	b570      	push	{r4, r5, r6, lr}
 8009cd8:	681d      	ldr	r5, [r3, #0]
 8009cda:	4606      	mov	r6, r0
 8009cdc:	460c      	mov	r4, r1
 8009cde:	b125      	cbz	r5, 8009cea <__swsetup_r+0x16>
 8009ce0:	69ab      	ldr	r3, [r5, #24]
 8009ce2:	b913      	cbnz	r3, 8009cea <__swsetup_r+0x16>
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	f000 f985 	bl	8009ff4 <__sinit>
 8009cea:	4b2e      	ldr	r3, [pc, #184]	; (8009da4 <__swsetup_r+0xd0>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	d10f      	bne.n	8009d10 <__swsetup_r+0x3c>
 8009cf0:	686c      	ldr	r4, [r5, #4]
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cf8:	0719      	lsls	r1, r3, #28
 8009cfa:	d42c      	bmi.n	8009d56 <__swsetup_r+0x82>
 8009cfc:	06dd      	lsls	r5, r3, #27
 8009cfe:	d411      	bmi.n	8009d24 <__swsetup_r+0x50>
 8009d00:	2309      	movs	r3, #9
 8009d02:	6033      	str	r3, [r6, #0]
 8009d04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d08:	81a3      	strh	r3, [r4, #12]
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0e:	e03e      	b.n	8009d8e <__swsetup_r+0xba>
 8009d10:	4b25      	ldr	r3, [pc, #148]	; (8009da8 <__swsetup_r+0xd4>)
 8009d12:	429c      	cmp	r4, r3
 8009d14:	d101      	bne.n	8009d1a <__swsetup_r+0x46>
 8009d16:	68ac      	ldr	r4, [r5, #8]
 8009d18:	e7eb      	b.n	8009cf2 <__swsetup_r+0x1e>
 8009d1a:	4b24      	ldr	r3, [pc, #144]	; (8009dac <__swsetup_r+0xd8>)
 8009d1c:	429c      	cmp	r4, r3
 8009d1e:	bf08      	it	eq
 8009d20:	68ec      	ldreq	r4, [r5, #12]
 8009d22:	e7e6      	b.n	8009cf2 <__swsetup_r+0x1e>
 8009d24:	0758      	lsls	r0, r3, #29
 8009d26:	d512      	bpl.n	8009d4e <__swsetup_r+0x7a>
 8009d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d2a:	b141      	cbz	r1, 8009d3e <__swsetup_r+0x6a>
 8009d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d30:	4299      	cmp	r1, r3
 8009d32:	d002      	beq.n	8009d3a <__swsetup_r+0x66>
 8009d34:	4630      	mov	r0, r6
 8009d36:	f7ff fb31 	bl	800939c <_free_r>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d3e:	89a3      	ldrh	r3, [r4, #12]
 8009d40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d44:	81a3      	strh	r3, [r4, #12]
 8009d46:	2300      	movs	r3, #0
 8009d48:	6063      	str	r3, [r4, #4]
 8009d4a:	6923      	ldr	r3, [r4, #16]
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	f043 0308 	orr.w	r3, r3, #8
 8009d54:	81a3      	strh	r3, [r4, #12]
 8009d56:	6923      	ldr	r3, [r4, #16]
 8009d58:	b94b      	cbnz	r3, 8009d6e <__swsetup_r+0x9a>
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d64:	d003      	beq.n	8009d6e <__swsetup_r+0x9a>
 8009d66:	4621      	mov	r1, r4
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f000 fa09 	bl	800a180 <__smakebuf_r>
 8009d6e:	89a0      	ldrh	r0, [r4, #12]
 8009d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d74:	f010 0301 	ands.w	r3, r0, #1
 8009d78:	d00a      	beq.n	8009d90 <__swsetup_r+0xbc>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60a3      	str	r3, [r4, #8]
 8009d7e:	6963      	ldr	r3, [r4, #20]
 8009d80:	425b      	negs	r3, r3
 8009d82:	61a3      	str	r3, [r4, #24]
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	b943      	cbnz	r3, 8009d9a <__swsetup_r+0xc6>
 8009d88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d8c:	d1ba      	bne.n	8009d04 <__swsetup_r+0x30>
 8009d8e:	bd70      	pop	{r4, r5, r6, pc}
 8009d90:	0781      	lsls	r1, r0, #30
 8009d92:	bf58      	it	pl
 8009d94:	6963      	ldrpl	r3, [r4, #20]
 8009d96:	60a3      	str	r3, [r4, #8]
 8009d98:	e7f4      	b.n	8009d84 <__swsetup_r+0xb0>
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	e7f7      	b.n	8009d8e <__swsetup_r+0xba>
 8009d9e:	bf00      	nop
 8009da0:	24000010 	.word	0x24000010
 8009da4:	0800a884 	.word	0x0800a884
 8009da8:	0800a8a4 	.word	0x0800a8a4
 8009dac:	0800a864 	.word	0x0800a864

08009db0 <abort>:
 8009db0:	b508      	push	{r3, lr}
 8009db2:	2006      	movs	r0, #6
 8009db4:	f000 fa54 	bl	800a260 <raise>
 8009db8:	2001      	movs	r0, #1
 8009dba:	f7f7 fb9d 	bl	80014f8 <_exit>
	...

08009dc0 <__sflush_r>:
 8009dc0:	898a      	ldrh	r2, [r1, #12]
 8009dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	0710      	lsls	r0, r2, #28
 8009dca:	460c      	mov	r4, r1
 8009dcc:	d458      	bmi.n	8009e80 <__sflush_r+0xc0>
 8009dce:	684b      	ldr	r3, [r1, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	dc05      	bgt.n	8009de0 <__sflush_r+0x20>
 8009dd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	dc02      	bgt.n	8009de0 <__sflush_r+0x20>
 8009dda:	2000      	movs	r0, #0
 8009ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009de2:	2e00      	cmp	r6, #0
 8009de4:	d0f9      	beq.n	8009dda <__sflush_r+0x1a>
 8009de6:	2300      	movs	r3, #0
 8009de8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009dec:	682f      	ldr	r7, [r5, #0]
 8009dee:	602b      	str	r3, [r5, #0]
 8009df0:	d032      	beq.n	8009e58 <__sflush_r+0x98>
 8009df2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	075a      	lsls	r2, r3, #29
 8009df8:	d505      	bpl.n	8009e06 <__sflush_r+0x46>
 8009dfa:	6863      	ldr	r3, [r4, #4]
 8009dfc:	1ac0      	subs	r0, r0, r3
 8009dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e00:	b10b      	cbz	r3, 8009e06 <__sflush_r+0x46>
 8009e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e04:	1ac0      	subs	r0, r0, r3
 8009e06:	2300      	movs	r3, #0
 8009e08:	4602      	mov	r2, r0
 8009e0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e0c:	6a21      	ldr	r1, [r4, #32]
 8009e0e:	4628      	mov	r0, r5
 8009e10:	47b0      	blx	r6
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	d106      	bne.n	8009e26 <__sflush_r+0x66>
 8009e18:	6829      	ldr	r1, [r5, #0]
 8009e1a:	291d      	cmp	r1, #29
 8009e1c:	d82c      	bhi.n	8009e78 <__sflush_r+0xb8>
 8009e1e:	4a2a      	ldr	r2, [pc, #168]	; (8009ec8 <__sflush_r+0x108>)
 8009e20:	40ca      	lsrs	r2, r1
 8009e22:	07d6      	lsls	r6, r2, #31
 8009e24:	d528      	bpl.n	8009e78 <__sflush_r+0xb8>
 8009e26:	2200      	movs	r2, #0
 8009e28:	6062      	str	r2, [r4, #4]
 8009e2a:	04d9      	lsls	r1, r3, #19
 8009e2c:	6922      	ldr	r2, [r4, #16]
 8009e2e:	6022      	str	r2, [r4, #0]
 8009e30:	d504      	bpl.n	8009e3c <__sflush_r+0x7c>
 8009e32:	1c42      	adds	r2, r0, #1
 8009e34:	d101      	bne.n	8009e3a <__sflush_r+0x7a>
 8009e36:	682b      	ldr	r3, [r5, #0]
 8009e38:	b903      	cbnz	r3, 8009e3c <__sflush_r+0x7c>
 8009e3a:	6560      	str	r0, [r4, #84]	; 0x54
 8009e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e3e:	602f      	str	r7, [r5, #0]
 8009e40:	2900      	cmp	r1, #0
 8009e42:	d0ca      	beq.n	8009dda <__sflush_r+0x1a>
 8009e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e48:	4299      	cmp	r1, r3
 8009e4a:	d002      	beq.n	8009e52 <__sflush_r+0x92>
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	f7ff faa5 	bl	800939c <_free_r>
 8009e52:	2000      	movs	r0, #0
 8009e54:	6360      	str	r0, [r4, #52]	; 0x34
 8009e56:	e7c1      	b.n	8009ddc <__sflush_r+0x1c>
 8009e58:	6a21      	ldr	r1, [r4, #32]
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	47b0      	blx	r6
 8009e60:	1c41      	adds	r1, r0, #1
 8009e62:	d1c7      	bne.n	8009df4 <__sflush_r+0x34>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0c4      	beq.n	8009df4 <__sflush_r+0x34>
 8009e6a:	2b1d      	cmp	r3, #29
 8009e6c:	d001      	beq.n	8009e72 <__sflush_r+0xb2>
 8009e6e:	2b16      	cmp	r3, #22
 8009e70:	d101      	bne.n	8009e76 <__sflush_r+0xb6>
 8009e72:	602f      	str	r7, [r5, #0]
 8009e74:	e7b1      	b.n	8009dda <__sflush_r+0x1a>
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e7c:	81a3      	strh	r3, [r4, #12]
 8009e7e:	e7ad      	b.n	8009ddc <__sflush_r+0x1c>
 8009e80:	690f      	ldr	r7, [r1, #16]
 8009e82:	2f00      	cmp	r7, #0
 8009e84:	d0a9      	beq.n	8009dda <__sflush_r+0x1a>
 8009e86:	0793      	lsls	r3, r2, #30
 8009e88:	680e      	ldr	r6, [r1, #0]
 8009e8a:	bf08      	it	eq
 8009e8c:	694b      	ldreq	r3, [r1, #20]
 8009e8e:	600f      	str	r7, [r1, #0]
 8009e90:	bf18      	it	ne
 8009e92:	2300      	movne	r3, #0
 8009e94:	eba6 0807 	sub.w	r8, r6, r7
 8009e98:	608b      	str	r3, [r1, #8]
 8009e9a:	f1b8 0f00 	cmp.w	r8, #0
 8009e9e:	dd9c      	ble.n	8009dda <__sflush_r+0x1a>
 8009ea0:	6a21      	ldr	r1, [r4, #32]
 8009ea2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ea4:	4643      	mov	r3, r8
 8009ea6:	463a      	mov	r2, r7
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	47b0      	blx	r6
 8009eac:	2800      	cmp	r0, #0
 8009eae:	dc06      	bgt.n	8009ebe <__sflush_r+0xfe>
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb6:	81a3      	strh	r3, [r4, #12]
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebc:	e78e      	b.n	8009ddc <__sflush_r+0x1c>
 8009ebe:	4407      	add	r7, r0
 8009ec0:	eba8 0800 	sub.w	r8, r8, r0
 8009ec4:	e7e9      	b.n	8009e9a <__sflush_r+0xda>
 8009ec6:	bf00      	nop
 8009ec8:	20400001 	.word	0x20400001

08009ecc <_fflush_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	690b      	ldr	r3, [r1, #16]
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	b913      	cbnz	r3, 8009edc <_fflush_r+0x10>
 8009ed6:	2500      	movs	r5, #0
 8009ed8:	4628      	mov	r0, r5
 8009eda:	bd38      	pop	{r3, r4, r5, pc}
 8009edc:	b118      	cbz	r0, 8009ee6 <_fflush_r+0x1a>
 8009ede:	6983      	ldr	r3, [r0, #24]
 8009ee0:	b90b      	cbnz	r3, 8009ee6 <_fflush_r+0x1a>
 8009ee2:	f000 f887 	bl	8009ff4 <__sinit>
 8009ee6:	4b14      	ldr	r3, [pc, #80]	; (8009f38 <_fflush_r+0x6c>)
 8009ee8:	429c      	cmp	r4, r3
 8009eea:	d11b      	bne.n	8009f24 <_fflush_r+0x58>
 8009eec:	686c      	ldr	r4, [r5, #4]
 8009eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0ef      	beq.n	8009ed6 <_fflush_r+0xa>
 8009ef6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ef8:	07d0      	lsls	r0, r2, #31
 8009efa:	d404      	bmi.n	8009f06 <_fflush_r+0x3a>
 8009efc:	0599      	lsls	r1, r3, #22
 8009efe:	d402      	bmi.n	8009f06 <_fflush_r+0x3a>
 8009f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f02:	f000 f915 	bl	800a130 <__retarget_lock_acquire_recursive>
 8009f06:	4628      	mov	r0, r5
 8009f08:	4621      	mov	r1, r4
 8009f0a:	f7ff ff59 	bl	8009dc0 <__sflush_r>
 8009f0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f10:	07da      	lsls	r2, r3, #31
 8009f12:	4605      	mov	r5, r0
 8009f14:	d4e0      	bmi.n	8009ed8 <_fflush_r+0xc>
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	059b      	lsls	r3, r3, #22
 8009f1a:	d4dd      	bmi.n	8009ed8 <_fflush_r+0xc>
 8009f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f1e:	f000 f908 	bl	800a132 <__retarget_lock_release_recursive>
 8009f22:	e7d9      	b.n	8009ed8 <_fflush_r+0xc>
 8009f24:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <_fflush_r+0x70>)
 8009f26:	429c      	cmp	r4, r3
 8009f28:	d101      	bne.n	8009f2e <_fflush_r+0x62>
 8009f2a:	68ac      	ldr	r4, [r5, #8]
 8009f2c:	e7df      	b.n	8009eee <_fflush_r+0x22>
 8009f2e:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <_fflush_r+0x74>)
 8009f30:	429c      	cmp	r4, r3
 8009f32:	bf08      	it	eq
 8009f34:	68ec      	ldreq	r4, [r5, #12]
 8009f36:	e7da      	b.n	8009eee <_fflush_r+0x22>
 8009f38:	0800a884 	.word	0x0800a884
 8009f3c:	0800a8a4 	.word	0x0800a8a4
 8009f40:	0800a864 	.word	0x0800a864

08009f44 <std>:
 8009f44:	2300      	movs	r3, #0
 8009f46:	b510      	push	{r4, lr}
 8009f48:	4604      	mov	r4, r0
 8009f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8009f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f52:	6083      	str	r3, [r0, #8]
 8009f54:	8181      	strh	r1, [r0, #12]
 8009f56:	6643      	str	r3, [r0, #100]	; 0x64
 8009f58:	81c2      	strh	r2, [r0, #14]
 8009f5a:	6183      	str	r3, [r0, #24]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	2208      	movs	r2, #8
 8009f60:	305c      	adds	r0, #92	; 0x5c
 8009f62:	f7fd fc01 	bl	8007768 <memset>
 8009f66:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <std+0x38>)
 8009f68:	6263      	str	r3, [r4, #36]	; 0x24
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <std+0x3c>)
 8009f6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f6e:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <std+0x40>)
 8009f70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f72:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <std+0x44>)
 8009f74:	6224      	str	r4, [r4, #32]
 8009f76:	6323      	str	r3, [r4, #48]	; 0x30
 8009f78:	bd10      	pop	{r4, pc}
 8009f7a:	bf00      	nop
 8009f7c:	0800a299 	.word	0x0800a299
 8009f80:	0800a2bb 	.word	0x0800a2bb
 8009f84:	0800a2f3 	.word	0x0800a2f3
 8009f88:	0800a317 	.word	0x0800a317

08009f8c <_cleanup_r>:
 8009f8c:	4901      	ldr	r1, [pc, #4]	; (8009f94 <_cleanup_r+0x8>)
 8009f8e:	f000 b8af 	b.w	800a0f0 <_fwalk_reent>
 8009f92:	bf00      	nop
 8009f94:	08009ecd 	.word	0x08009ecd

08009f98 <__sfmoreglue>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	2268      	movs	r2, #104	; 0x68
 8009f9c:	1e4d      	subs	r5, r1, #1
 8009f9e:	4355      	muls	r5, r2
 8009fa0:	460e      	mov	r6, r1
 8009fa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fa6:	f7ff fa65 	bl	8009474 <_malloc_r>
 8009faa:	4604      	mov	r4, r0
 8009fac:	b140      	cbz	r0, 8009fc0 <__sfmoreglue+0x28>
 8009fae:	2100      	movs	r1, #0
 8009fb0:	e9c0 1600 	strd	r1, r6, [r0]
 8009fb4:	300c      	adds	r0, #12
 8009fb6:	60a0      	str	r0, [r4, #8]
 8009fb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fbc:	f7fd fbd4 	bl	8007768 <memset>
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}

08009fc4 <__sfp_lock_acquire>:
 8009fc4:	4801      	ldr	r0, [pc, #4]	; (8009fcc <__sfp_lock_acquire+0x8>)
 8009fc6:	f000 b8b3 	b.w	800a130 <__retarget_lock_acquire_recursive>
 8009fca:	bf00      	nop
 8009fcc:	240008a5 	.word	0x240008a5

08009fd0 <__sfp_lock_release>:
 8009fd0:	4801      	ldr	r0, [pc, #4]	; (8009fd8 <__sfp_lock_release+0x8>)
 8009fd2:	f000 b8ae 	b.w	800a132 <__retarget_lock_release_recursive>
 8009fd6:	bf00      	nop
 8009fd8:	240008a5 	.word	0x240008a5

08009fdc <__sinit_lock_acquire>:
 8009fdc:	4801      	ldr	r0, [pc, #4]	; (8009fe4 <__sinit_lock_acquire+0x8>)
 8009fde:	f000 b8a7 	b.w	800a130 <__retarget_lock_acquire_recursive>
 8009fe2:	bf00      	nop
 8009fe4:	240008a6 	.word	0x240008a6

08009fe8 <__sinit_lock_release>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <__sinit_lock_release+0x8>)
 8009fea:	f000 b8a2 	b.w	800a132 <__retarget_lock_release_recursive>
 8009fee:	bf00      	nop
 8009ff0:	240008a6 	.word	0x240008a6

08009ff4 <__sinit>:
 8009ff4:	b510      	push	{r4, lr}
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	f7ff fff0 	bl	8009fdc <__sinit_lock_acquire>
 8009ffc:	69a3      	ldr	r3, [r4, #24]
 8009ffe:	b11b      	cbz	r3, 800a008 <__sinit+0x14>
 800a000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a004:	f7ff bff0 	b.w	8009fe8 <__sinit_lock_release>
 800a008:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a00c:	6523      	str	r3, [r4, #80]	; 0x50
 800a00e:	4b13      	ldr	r3, [pc, #76]	; (800a05c <__sinit+0x68>)
 800a010:	4a13      	ldr	r2, [pc, #76]	; (800a060 <__sinit+0x6c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	62a2      	str	r2, [r4, #40]	; 0x28
 800a016:	42a3      	cmp	r3, r4
 800a018:	bf04      	itt	eq
 800a01a:	2301      	moveq	r3, #1
 800a01c:	61a3      	streq	r3, [r4, #24]
 800a01e:	4620      	mov	r0, r4
 800a020:	f000 f820 	bl	800a064 <__sfp>
 800a024:	6060      	str	r0, [r4, #4]
 800a026:	4620      	mov	r0, r4
 800a028:	f000 f81c 	bl	800a064 <__sfp>
 800a02c:	60a0      	str	r0, [r4, #8]
 800a02e:	4620      	mov	r0, r4
 800a030:	f000 f818 	bl	800a064 <__sfp>
 800a034:	2200      	movs	r2, #0
 800a036:	60e0      	str	r0, [r4, #12]
 800a038:	2104      	movs	r1, #4
 800a03a:	6860      	ldr	r0, [r4, #4]
 800a03c:	f7ff ff82 	bl	8009f44 <std>
 800a040:	68a0      	ldr	r0, [r4, #8]
 800a042:	2201      	movs	r2, #1
 800a044:	2109      	movs	r1, #9
 800a046:	f7ff ff7d 	bl	8009f44 <std>
 800a04a:	68e0      	ldr	r0, [r4, #12]
 800a04c:	2202      	movs	r2, #2
 800a04e:	2112      	movs	r1, #18
 800a050:	f7ff ff78 	bl	8009f44 <std>
 800a054:	2301      	movs	r3, #1
 800a056:	61a3      	str	r3, [r4, #24]
 800a058:	e7d2      	b.n	800a000 <__sinit+0xc>
 800a05a:	bf00      	nop
 800a05c:	0800a4ec 	.word	0x0800a4ec
 800a060:	08009f8d 	.word	0x08009f8d

0800a064 <__sfp>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	4607      	mov	r7, r0
 800a068:	f7ff ffac 	bl	8009fc4 <__sfp_lock_acquire>
 800a06c:	4b1e      	ldr	r3, [pc, #120]	; (800a0e8 <__sfp+0x84>)
 800a06e:	681e      	ldr	r6, [r3, #0]
 800a070:	69b3      	ldr	r3, [r6, #24]
 800a072:	b913      	cbnz	r3, 800a07a <__sfp+0x16>
 800a074:	4630      	mov	r0, r6
 800a076:	f7ff ffbd 	bl	8009ff4 <__sinit>
 800a07a:	3648      	adds	r6, #72	; 0x48
 800a07c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a080:	3b01      	subs	r3, #1
 800a082:	d503      	bpl.n	800a08c <__sfp+0x28>
 800a084:	6833      	ldr	r3, [r6, #0]
 800a086:	b30b      	cbz	r3, 800a0cc <__sfp+0x68>
 800a088:	6836      	ldr	r6, [r6, #0]
 800a08a:	e7f7      	b.n	800a07c <__sfp+0x18>
 800a08c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a090:	b9d5      	cbnz	r5, 800a0c8 <__sfp+0x64>
 800a092:	4b16      	ldr	r3, [pc, #88]	; (800a0ec <__sfp+0x88>)
 800a094:	60e3      	str	r3, [r4, #12]
 800a096:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a09a:	6665      	str	r5, [r4, #100]	; 0x64
 800a09c:	f000 f847 	bl	800a12e <__retarget_lock_init_recursive>
 800a0a0:	f7ff ff96 	bl	8009fd0 <__sfp_lock_release>
 800a0a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0ac:	6025      	str	r5, [r4, #0]
 800a0ae:	61a5      	str	r5, [r4, #24]
 800a0b0:	2208      	movs	r2, #8
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0b8:	f7fd fb56 	bl	8007768 <memset>
 800a0bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0c8:	3468      	adds	r4, #104	; 0x68
 800a0ca:	e7d9      	b.n	800a080 <__sfp+0x1c>
 800a0cc:	2104      	movs	r1, #4
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	f7ff ff62 	bl	8009f98 <__sfmoreglue>
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	6030      	str	r0, [r6, #0]
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d1d5      	bne.n	800a088 <__sfp+0x24>
 800a0dc:	f7ff ff78 	bl	8009fd0 <__sfp_lock_release>
 800a0e0:	230c      	movs	r3, #12
 800a0e2:	603b      	str	r3, [r7, #0]
 800a0e4:	e7ee      	b.n	800a0c4 <__sfp+0x60>
 800a0e6:	bf00      	nop
 800a0e8:	0800a4ec 	.word	0x0800a4ec
 800a0ec:	ffff0001 	.word	0xffff0001

0800a0f0 <_fwalk_reent>:
 800a0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	4688      	mov	r8, r1
 800a0f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0fc:	2700      	movs	r7, #0
 800a0fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a102:	f1b9 0901 	subs.w	r9, r9, #1
 800a106:	d505      	bpl.n	800a114 <_fwalk_reent+0x24>
 800a108:	6824      	ldr	r4, [r4, #0]
 800a10a:	2c00      	cmp	r4, #0
 800a10c:	d1f7      	bne.n	800a0fe <_fwalk_reent+0xe>
 800a10e:	4638      	mov	r0, r7
 800a110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a114:	89ab      	ldrh	r3, [r5, #12]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d907      	bls.n	800a12a <_fwalk_reent+0x3a>
 800a11a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a11e:	3301      	adds	r3, #1
 800a120:	d003      	beq.n	800a12a <_fwalk_reent+0x3a>
 800a122:	4629      	mov	r1, r5
 800a124:	4630      	mov	r0, r6
 800a126:	47c0      	blx	r8
 800a128:	4307      	orrs	r7, r0
 800a12a:	3568      	adds	r5, #104	; 0x68
 800a12c:	e7e9      	b.n	800a102 <_fwalk_reent+0x12>

0800a12e <__retarget_lock_init_recursive>:
 800a12e:	4770      	bx	lr

0800a130 <__retarget_lock_acquire_recursive>:
 800a130:	4770      	bx	lr

0800a132 <__retarget_lock_release_recursive>:
 800a132:	4770      	bx	lr

0800a134 <__swhatbuf_r>:
 800a134:	b570      	push	{r4, r5, r6, lr}
 800a136:	460e      	mov	r6, r1
 800a138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a13c:	2900      	cmp	r1, #0
 800a13e:	b096      	sub	sp, #88	; 0x58
 800a140:	4614      	mov	r4, r2
 800a142:	461d      	mov	r5, r3
 800a144:	da08      	bge.n	800a158 <__swhatbuf_r+0x24>
 800a146:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	602a      	str	r2, [r5, #0]
 800a14e:	061a      	lsls	r2, r3, #24
 800a150:	d410      	bmi.n	800a174 <__swhatbuf_r+0x40>
 800a152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a156:	e00e      	b.n	800a176 <__swhatbuf_r+0x42>
 800a158:	466a      	mov	r2, sp
 800a15a:	f000 f903 	bl	800a364 <_fstat_r>
 800a15e:	2800      	cmp	r0, #0
 800a160:	dbf1      	blt.n	800a146 <__swhatbuf_r+0x12>
 800a162:	9a01      	ldr	r2, [sp, #4]
 800a164:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a168:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a16c:	425a      	negs	r2, r3
 800a16e:	415a      	adcs	r2, r3
 800a170:	602a      	str	r2, [r5, #0]
 800a172:	e7ee      	b.n	800a152 <__swhatbuf_r+0x1e>
 800a174:	2340      	movs	r3, #64	; 0x40
 800a176:	2000      	movs	r0, #0
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	b016      	add	sp, #88	; 0x58
 800a17c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a180 <__smakebuf_r>:
 800a180:	898b      	ldrh	r3, [r1, #12]
 800a182:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a184:	079d      	lsls	r5, r3, #30
 800a186:	4606      	mov	r6, r0
 800a188:	460c      	mov	r4, r1
 800a18a:	d507      	bpl.n	800a19c <__smakebuf_r+0x1c>
 800a18c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	6123      	str	r3, [r4, #16]
 800a194:	2301      	movs	r3, #1
 800a196:	6163      	str	r3, [r4, #20]
 800a198:	b002      	add	sp, #8
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
 800a19c:	ab01      	add	r3, sp, #4
 800a19e:	466a      	mov	r2, sp
 800a1a0:	f7ff ffc8 	bl	800a134 <__swhatbuf_r>
 800a1a4:	9900      	ldr	r1, [sp, #0]
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f7ff f963 	bl	8009474 <_malloc_r>
 800a1ae:	b948      	cbnz	r0, 800a1c4 <__smakebuf_r+0x44>
 800a1b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1b4:	059a      	lsls	r2, r3, #22
 800a1b6:	d4ef      	bmi.n	800a198 <__smakebuf_r+0x18>
 800a1b8:	f023 0303 	bic.w	r3, r3, #3
 800a1bc:	f043 0302 	orr.w	r3, r3, #2
 800a1c0:	81a3      	strh	r3, [r4, #12]
 800a1c2:	e7e3      	b.n	800a18c <__smakebuf_r+0xc>
 800a1c4:	4b0d      	ldr	r3, [pc, #52]	; (800a1fc <__smakebuf_r+0x7c>)
 800a1c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	6020      	str	r0, [r4, #0]
 800a1cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d0:	81a3      	strh	r3, [r4, #12]
 800a1d2:	9b00      	ldr	r3, [sp, #0]
 800a1d4:	6163      	str	r3, [r4, #20]
 800a1d6:	9b01      	ldr	r3, [sp, #4]
 800a1d8:	6120      	str	r0, [r4, #16]
 800a1da:	b15b      	cbz	r3, 800a1f4 <__smakebuf_r+0x74>
 800a1dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 f8d1 	bl	800a388 <_isatty_r>
 800a1e6:	b128      	cbz	r0, 800a1f4 <__smakebuf_r+0x74>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	f023 0303 	bic.w	r3, r3, #3
 800a1ee:	f043 0301 	orr.w	r3, r3, #1
 800a1f2:	81a3      	strh	r3, [r4, #12]
 800a1f4:	89a0      	ldrh	r0, [r4, #12]
 800a1f6:	4305      	orrs	r5, r0
 800a1f8:	81a5      	strh	r5, [r4, #12]
 800a1fa:	e7cd      	b.n	800a198 <__smakebuf_r+0x18>
 800a1fc:	08009f8d 	.word	0x08009f8d

0800a200 <_malloc_usable_size_r>:
 800a200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a204:	1f18      	subs	r0, r3, #4
 800a206:	2b00      	cmp	r3, #0
 800a208:	bfbc      	itt	lt
 800a20a:	580b      	ldrlt	r3, [r1, r0]
 800a20c:	18c0      	addlt	r0, r0, r3
 800a20e:	4770      	bx	lr

0800a210 <_raise_r>:
 800a210:	291f      	cmp	r1, #31
 800a212:	b538      	push	{r3, r4, r5, lr}
 800a214:	4604      	mov	r4, r0
 800a216:	460d      	mov	r5, r1
 800a218:	d904      	bls.n	800a224 <_raise_r+0x14>
 800a21a:	2316      	movs	r3, #22
 800a21c:	6003      	str	r3, [r0, #0]
 800a21e:	f04f 30ff 	mov.w	r0, #4294967295
 800a222:	bd38      	pop	{r3, r4, r5, pc}
 800a224:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a226:	b112      	cbz	r2, 800a22e <_raise_r+0x1e>
 800a228:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a22c:	b94b      	cbnz	r3, 800a242 <_raise_r+0x32>
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 f830 	bl	800a294 <_getpid_r>
 800a234:	462a      	mov	r2, r5
 800a236:	4601      	mov	r1, r0
 800a238:	4620      	mov	r0, r4
 800a23a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a23e:	f000 b817 	b.w	800a270 <_kill_r>
 800a242:	2b01      	cmp	r3, #1
 800a244:	d00a      	beq.n	800a25c <_raise_r+0x4c>
 800a246:	1c59      	adds	r1, r3, #1
 800a248:	d103      	bne.n	800a252 <_raise_r+0x42>
 800a24a:	2316      	movs	r3, #22
 800a24c:	6003      	str	r3, [r0, #0]
 800a24e:	2001      	movs	r0, #1
 800a250:	e7e7      	b.n	800a222 <_raise_r+0x12>
 800a252:	2400      	movs	r4, #0
 800a254:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a258:	4628      	mov	r0, r5
 800a25a:	4798      	blx	r3
 800a25c:	2000      	movs	r0, #0
 800a25e:	e7e0      	b.n	800a222 <_raise_r+0x12>

0800a260 <raise>:
 800a260:	4b02      	ldr	r3, [pc, #8]	; (800a26c <raise+0xc>)
 800a262:	4601      	mov	r1, r0
 800a264:	6818      	ldr	r0, [r3, #0]
 800a266:	f7ff bfd3 	b.w	800a210 <_raise_r>
 800a26a:	bf00      	nop
 800a26c:	24000010 	.word	0x24000010

0800a270 <_kill_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	4d07      	ldr	r5, [pc, #28]	; (800a290 <_kill_r+0x20>)
 800a274:	2300      	movs	r3, #0
 800a276:	4604      	mov	r4, r0
 800a278:	4608      	mov	r0, r1
 800a27a:	4611      	mov	r1, r2
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	f7f7 f92b 	bl	80014d8 <_kill>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	d102      	bne.n	800a28c <_kill_r+0x1c>
 800a286:	682b      	ldr	r3, [r5, #0]
 800a288:	b103      	cbz	r3, 800a28c <_kill_r+0x1c>
 800a28a:	6023      	str	r3, [r4, #0]
 800a28c:	bd38      	pop	{r3, r4, r5, pc}
 800a28e:	bf00      	nop
 800a290:	240008a0 	.word	0x240008a0

0800a294 <_getpid_r>:
 800a294:	f7f7 b918 	b.w	80014c8 <_getpid>

0800a298 <__sread>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	460c      	mov	r4, r1
 800a29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a0:	f000 f894 	bl	800a3cc <_read_r>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	bfab      	itete	ge
 800a2a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a2ac:	181b      	addge	r3, r3, r0
 800a2ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2b2:	bfac      	ite	ge
 800a2b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2b6:	81a3      	strhlt	r3, [r4, #12]
 800a2b8:	bd10      	pop	{r4, pc}

0800a2ba <__swrite>:
 800a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2be:	461f      	mov	r7, r3
 800a2c0:	898b      	ldrh	r3, [r1, #12]
 800a2c2:	05db      	lsls	r3, r3, #23
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	4616      	mov	r6, r2
 800a2ca:	d505      	bpl.n	800a2d8 <__swrite+0x1e>
 800a2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f000 f868 	bl	800a3a8 <_lseek_r>
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2e2:	81a3      	strh	r3, [r4, #12]
 800a2e4:	4632      	mov	r2, r6
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ee:	f000 b817 	b.w	800a320 <_write_r>

0800a2f2 <__sseek>:
 800a2f2:	b510      	push	{r4, lr}
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fa:	f000 f855 	bl	800a3a8 <_lseek_r>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	bf15      	itete	ne
 800a304:	6560      	strne	r0, [r4, #84]	; 0x54
 800a306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a30a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a30e:	81a3      	strheq	r3, [r4, #12]
 800a310:	bf18      	it	ne
 800a312:	81a3      	strhne	r3, [r4, #12]
 800a314:	bd10      	pop	{r4, pc}

0800a316 <__sclose>:
 800a316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31a:	f000 b813 	b.w	800a344 <_close_r>
	...

0800a320 <_write_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	4d07      	ldr	r5, [pc, #28]	; (800a340 <_write_r+0x20>)
 800a324:	4604      	mov	r4, r0
 800a326:	4608      	mov	r0, r1
 800a328:	4611      	mov	r1, r2
 800a32a:	2200      	movs	r2, #0
 800a32c:	602a      	str	r2, [r5, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	f7f7 f909 	bl	8001546 <_write>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	d102      	bne.n	800a33e <_write_r+0x1e>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	b103      	cbz	r3, 800a33e <_write_r+0x1e>
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	240008a0 	.word	0x240008a0

0800a344 <_close_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	4d06      	ldr	r5, [pc, #24]	; (800a360 <_close_r+0x1c>)
 800a348:	2300      	movs	r3, #0
 800a34a:	4604      	mov	r4, r0
 800a34c:	4608      	mov	r0, r1
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	f7f7 f915 	bl	800157e <_close>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d102      	bne.n	800a35e <_close_r+0x1a>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	b103      	cbz	r3, 800a35e <_close_r+0x1a>
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	240008a0 	.word	0x240008a0

0800a364 <_fstat_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4d07      	ldr	r5, [pc, #28]	; (800a384 <_fstat_r+0x20>)
 800a368:	2300      	movs	r3, #0
 800a36a:	4604      	mov	r4, r0
 800a36c:	4608      	mov	r0, r1
 800a36e:	4611      	mov	r1, r2
 800a370:	602b      	str	r3, [r5, #0]
 800a372:	f7f7 f910 	bl	8001596 <_fstat>
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	d102      	bne.n	800a380 <_fstat_r+0x1c>
 800a37a:	682b      	ldr	r3, [r5, #0]
 800a37c:	b103      	cbz	r3, 800a380 <_fstat_r+0x1c>
 800a37e:	6023      	str	r3, [r4, #0]
 800a380:	bd38      	pop	{r3, r4, r5, pc}
 800a382:	bf00      	nop
 800a384:	240008a0 	.word	0x240008a0

0800a388 <_isatty_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4d06      	ldr	r5, [pc, #24]	; (800a3a4 <_isatty_r+0x1c>)
 800a38c:	2300      	movs	r3, #0
 800a38e:	4604      	mov	r4, r0
 800a390:	4608      	mov	r0, r1
 800a392:	602b      	str	r3, [r5, #0]
 800a394:	f7f7 f90f 	bl	80015b6 <_isatty>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_isatty_r+0x1a>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_isatty_r+0x1a>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	240008a0 	.word	0x240008a0

0800a3a8 <_lseek_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4d07      	ldr	r5, [pc, #28]	; (800a3c8 <_lseek_r+0x20>)
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	4608      	mov	r0, r1
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	602a      	str	r2, [r5, #0]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f7f7 f908 	bl	80015cc <_lseek>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_lseek_r+0x1e>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_lseek_r+0x1e>
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	240008a0 	.word	0x240008a0

0800a3cc <_read_r>:
 800a3cc:	b538      	push	{r3, r4, r5, lr}
 800a3ce:	4d07      	ldr	r5, [pc, #28]	; (800a3ec <_read_r+0x20>)
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	4608      	mov	r0, r1
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	602a      	str	r2, [r5, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f7f7 f896 	bl	800150c <_read>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	d102      	bne.n	800a3ea <_read_r+0x1e>
 800a3e4:	682b      	ldr	r3, [r5, #0]
 800a3e6:	b103      	cbz	r3, 800a3ea <_read_r+0x1e>
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	240008a0 	.word	0x240008a0

0800a3f0 <_init>:
 800a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f2:	bf00      	nop
 800a3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3f6:	bc08      	pop	{r3}
 800a3f8:	469e      	mov	lr, r3
 800a3fa:	4770      	bx	lr

0800a3fc <_fini>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	bf00      	nop
 800a400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a402:	bc08      	pop	{r3}
 800a404:	469e      	mov	lr, r3
 800a406:	4770      	bx	lr
