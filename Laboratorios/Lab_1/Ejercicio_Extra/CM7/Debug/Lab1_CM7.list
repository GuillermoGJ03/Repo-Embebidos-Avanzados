
Lab1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056ac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005988  08005988  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005990  08005990  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005990  08005990  00015990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005994  08005994  00015994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  08005998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  24000014  080059ac  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240005d4  080059ac  000205d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bce  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002614  00000000  00000000  00034c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00037228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00038078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039217  00000000  00000000  00038df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012755  00000000  00000000  00072007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179071  00000000  00000000  0008475c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001fd7cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be0  00000000  00000000  001fd820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800592c 	.word	0x0800592c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	0800592c 	.word	0x0800592c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b91      	ldr	r3, [pc, #580]	; (800095c <main+0x254>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 fb19 	bl	8000d68 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fc81 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f91d 	bl	8000978 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b87      	ldr	r3, [pc, #540]	; (800095c <main+0x254>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a85      	ldr	r2, [pc, #532]	; (800095c <main+0x254>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b83      	ldr	r3, [pc, #524]	; (800095c <main+0x254>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f001 f83d 	bl	80017dc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f001 f853 	bl	8001810 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b7a      	ldr	r3, [pc, #488]	; (800095c <main+0x254>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 faeb 	bl	8000d68 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f9f3 	bl	8000b7c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f973 	bl	8000a80 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079a:	f000 f9bd 	bl	8000b18 <MX_USB_OTG_FS_PCD_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if (state == 1){
 800079e:	4b70      	ldr	r3, [pc, #448]	; (8000960 <main+0x258>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d110      	bne.n	80007c8 <main+0xc0>
		  j = 1;
 80007a6:	4b6f      	ldr	r3, [pc, #444]	; (8000964 <main+0x25c>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
		  i++;
 80007ac:	4b6e      	ldr	r3, [pc, #440]	; (8000968 <main+0x260>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b6c      	ldr	r3, [pc, #432]	; (8000968 <main+0x260>)
 80007b6:	701a      	strb	r2, [r3, #0]
		  if (i > 2) i = 0;
 80007b8:	4b6b      	ldr	r3, [pc, #428]	; (8000968 <main+0x260>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d92c      	bls.n	800081a <main+0x112>
 80007c0:	4b69      	ldr	r3, [pc, #420]	; (8000968 <main+0x260>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e028      	b.n	800081a <main+0x112>
	  } else if (state == 2){
 80007c8:	4b65      	ldr	r3, [pc, #404]	; (8000960 <main+0x258>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d110      	bne.n	80007f2 <main+0xea>
		  if (i > 2) i = 3;
 80007d0:	4b65      	ldr	r3, [pc, #404]	; (8000968 <main+0x260>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d902      	bls.n	80007de <main+0xd6>
 80007d8:	4b63      	ldr	r3, [pc, #396]	; (8000968 <main+0x260>)
 80007da:	2203      	movs	r2, #3
 80007dc:	701a      	strb	r2, [r3, #0]
		  j = 1;
 80007de:	4b61      	ldr	r3, [pc, #388]	; (8000964 <main+0x25c>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
		  i--;
 80007e4:	4b60      	ldr	r3, [pc, #384]	; (8000968 <main+0x260>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3b01      	subs	r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b5e      	ldr	r3, [pc, #376]	; (8000968 <main+0x260>)
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	e013      	b.n	800081a <main+0x112>
	  } else if (state == 3){
 80007f2:	4b5b      	ldr	r3, [pc, #364]	; (8000960 <main+0x258>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d10f      	bne.n	800081a <main+0x112>
		  j = 2;
 80007fa:	4b5a      	ldr	r3, [pc, #360]	; (8000964 <main+0x25c>)
 80007fc:	2202      	movs	r2, #2
 80007fe:	701a      	strb	r2, [r3, #0]
		  i++;
 8000800:	4b59      	ldr	r3, [pc, #356]	; (8000968 <main+0x260>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b57      	ldr	r3, [pc, #348]	; (8000968 <main+0x260>)
 800080a:	701a      	strb	r2, [r3, #0]
		  if (i > 2) i = 0;
 800080c:	4b56      	ldr	r3, [pc, #344]	; (8000968 <main+0x260>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d902      	bls.n	800081a <main+0x112>
 8000814:	4b54      	ldr	r3, [pc, #336]	; (8000968 <main+0x260>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
	  }

	  if (leds[j][i] == 'a'){
 800081a:	4b52      	ldr	r3, [pc, #328]	; (8000964 <main+0x25c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	4b51      	ldr	r3, [pc, #324]	; (8000968 <main+0x260>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	4a51      	ldr	r2, [pc, #324]	; (800096c <main+0x264>)
 8000828:	460b      	mov	r3, r1
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	440b      	add	r3, r1
 800082e:	4413      	add	r3, r2
 8000830:	4403      	add	r3, r0
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b61      	cmp	r3, #97	; 0x61
 8000836:	d104      	bne.n	8000842 <main+0x13a>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000838:	2101      	movs	r1, #1
 800083a:	484d      	ldr	r0, [pc, #308]	; (8000970 <main+0x268>)
 800083c:	f000 ff99 	bl	8001772 <HAL_GPIO_TogglePin>
 8000840:	e087      	b.n	8000952 <main+0x24a>
	  } else if(leds[j][i] == 'b'){
 8000842:	4b48      	ldr	r3, [pc, #288]	; (8000964 <main+0x25c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4619      	mov	r1, r3
 8000848:	4b47      	ldr	r3, [pc, #284]	; (8000968 <main+0x260>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	4a47      	ldr	r2, [pc, #284]	; (800096c <main+0x264>)
 8000850:	460b      	mov	r3, r1
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	440b      	add	r3, r1
 8000856:	4413      	add	r3, r2
 8000858:	4403      	add	r3, r0
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b62      	cmp	r3, #98	; 0x62
 800085e:	d104      	bne.n	800086a <main+0x162>
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000860:	2102      	movs	r1, #2
 8000862:	4844      	ldr	r0, [pc, #272]	; (8000974 <main+0x26c>)
 8000864:	f000 ff85 	bl	8001772 <HAL_GPIO_TogglePin>
 8000868:	e073      	b.n	8000952 <main+0x24a>
	  } else if(leds[j][i] == 'c'){
 800086a:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <main+0x25c>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <main+0x260>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	4a3d      	ldr	r2, [pc, #244]	; (800096c <main+0x264>)
 8000878:	460b      	mov	r3, r1
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	440b      	add	r3, r1
 800087e:	4413      	add	r3, r2
 8000880:	4403      	add	r3, r0
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b63      	cmp	r3, #99	; 0x63
 8000886:	d105      	bne.n	8000894 <main+0x18c>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000888:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800088c:	4838      	ldr	r0, [pc, #224]	; (8000970 <main+0x268>)
 800088e:	f000 ff70 	bl	8001772 <HAL_GPIO_TogglePin>
 8000892:	e05e      	b.n	8000952 <main+0x24a>
	  } else if(leds[j][i] == 'd'){
 8000894:	4b33      	ldr	r3, [pc, #204]	; (8000964 <main+0x25c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	4b33      	ldr	r3, [pc, #204]	; (8000968 <main+0x260>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	4a32      	ldr	r2, [pc, #200]	; (800096c <main+0x264>)
 80008a2:	460b      	mov	r3, r1
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	440b      	add	r3, r1
 80008a8:	4413      	add	r3, r2
 80008aa:	4403      	add	r3, r0
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b64      	cmp	r3, #100	; 0x64
 80008b0:	d110      	bne.n	80008d4 <main+0x1cc>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2101      	movs	r1, #1
 80008b6:	482e      	ldr	r0, [pc, #184]	; (8000970 <main+0x268>)
 80008b8:	f000 ff42 	bl	8001740 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2102      	movs	r1, #2
 80008c0:	482c      	ldr	r0, [pc, #176]	; (8000974 <main+0x26c>)
 80008c2:	f000 ff3d 	bl	8001740 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008cc:	4828      	ldr	r0, [pc, #160]	; (8000970 <main+0x268>)
 80008ce:	f000 ff37 	bl	8001740 <HAL_GPIO_WritePin>
 80008d2:	e03e      	b.n	8000952 <main+0x24a>
	  }else if(leds[j][i] == 'e'){
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <main+0x25c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <main+0x260>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	4a22      	ldr	r2, [pc, #136]	; (800096c <main+0x264>)
 80008e2:	460b      	mov	r3, r1
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	440b      	add	r3, r1
 80008e8:	4413      	add	r3, r2
 80008ea:	4403      	add	r3, r0
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b65      	cmp	r3, #101	; 0x65
 80008f0:	d110      	bne.n	8000914 <main+0x20c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2101      	movs	r1, #1
 80008f6:	481e      	ldr	r0, [pc, #120]	; (8000970 <main+0x268>)
 80008f8:	f000 ff22 	bl	8001740 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2102      	movs	r1, #2
 8000900:	481c      	ldr	r0, [pc, #112]	; (8000974 <main+0x26c>)
 8000902:	f000 ff1d 	bl	8001740 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800090c:	4818      	ldr	r0, [pc, #96]	; (8000970 <main+0x268>)
 800090e:	f000 ff17 	bl	8001740 <HAL_GPIO_WritePin>
 8000912:	e01e      	b.n	8000952 <main+0x24a>
	  }else if(leds[j][i] == 'f'){
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <main+0x25c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <main+0x260>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	4a12      	ldr	r2, [pc, #72]	; (800096c <main+0x264>)
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	4413      	add	r3, r2
 800092a:	4403      	add	r3, r0
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b66      	cmp	r3, #102	; 0x66
 8000930:	d10f      	bne.n	8000952 <main+0x24a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	2101      	movs	r1, #1
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <main+0x268>)
 8000938:	f000 ff02 	bl	8001740 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2102      	movs	r1, #2
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <main+0x26c>)
 8000942:	f000 fefd 	bl	8001740 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <main+0x268>)
 800094e:	f000 fef7 	bl	8001740 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(250);
 8000952:	20fa      	movs	r0, #250	; 0xfa
 8000954:	f000 fc04 	bl	8001160 <HAL_Delay>
	  if (state == 1){
 8000958:	e721      	b.n	800079e <main+0x96>
 800095a:	bf00      	nop
 800095c:	58024400 	.word	0x58024400
 8000960:	240005cc 	.word	0x240005cc
 8000964:	240005cd 	.word	0x240005cd
 8000968:	24000008 	.word	0x24000008
 800096c:	08005954 	.word	0x08005954
 8000970:	58020400 	.word	0x58020400
 8000974:	58021000 	.word	0x58021000

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b09c      	sub	sp, #112	; 0x70
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	224c      	movs	r2, #76	; 0x4c
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f004 ffc8 	bl	800591c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2220      	movs	r2, #32
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f004 ffc2 	bl	800591c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000998:	2004      	movs	r0, #4
 800099a:	f001 f895 	bl	8001ac8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <SystemClock_Config+0xfc>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	4a33      	ldr	r2, [pc, #204]	; (8000a74 <SystemClock_Config+0xfc>)
 80009a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ac:	6193      	str	r3, [r2, #24]
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <SystemClock_Config+0xfc>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <SystemClock_Config+0x100>)
 80009ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009bc:	4a2e      	ldr	r2, [pc, #184]	; (8000a78 <SystemClock_Config+0x100>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <SystemClock_Config+0x100>)
 80009c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d0:	bf00      	nop
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <SystemClock_Config+0xfc>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009de:	d1f8      	bne.n	80009d2 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <SystemClock_Config+0x104>)
 80009e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e4:	f023 0303 	bic.w	r3, r3, #3
 80009e8:	4a24      	ldr	r2, [pc, #144]	; (8000a7c <SystemClock_Config+0x104>)
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f0:	2301      	movs	r3, #1
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fa:	2302      	movs	r3, #2
 80009fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fe:	2302      	movs	r3, #2
 8000a00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a06:	2378      	movs	r3, #120	; 0x78
 8000a08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a16:	230c      	movs	r3, #12
 8000a18:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 f8b8 	bl	8001b9c <HAL_RCC_OscConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a32:	f000 f999 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a36:	233f      	movs	r3, #63	; 0x3f
 8000a38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a42:	2308      	movs	r3, #8
 8000a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a46:	2340      	movs	r3, #64	; 0x40
 8000a48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a4a:	2340      	movs	r3, #64	; 0x40
 8000a4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a54:	2340      	movs	r3, #64	; 0x40
 8000a56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 fccb 	bl	80023f8 <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000a68:	f000 f97e 	bl	8000d68 <Error_Handler>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3770      	adds	r7, #112	; 0x70
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	58024800 	.word	0x58024800
 8000a78:	58000400 	.word	0x58000400
 8000a7c:	58024400 	.word	0x58024400

08000a80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <MX_USART3_UART_Init+0x94>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aca:	f003 fb89 	bl	80041e0 <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 f948 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000adc:	f004 fb26 	bl	800512c <HAL_UARTEx_SetTxFifoThreshold>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae6:	f000 f93f 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aee:	f004 fb5b 	bl	80051a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000af8:	f000 f936 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000afe:	f004 fadc 	bl	80050ba <HAL_UARTEx_DisableFifoMode>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b08:	f000 f92e 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	24000030 	.word	0x24000030
 8000b14:	40004800 	.word	0x40004800

08000b18 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1e:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b20:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b24:	2209      	movs	r2, #9
 8000b26:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b36:	2202      	movs	r2, #2
 8000b38:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b60:	f000 fe6a 	bl	8001838 <HAL_PCD_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b6a:	f000 f8fd 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	240000c0 	.word	0x240000c0
 8000b78:	40080000 	.word	0x40080000

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	; 0x30
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b54      	ldr	r3, [pc, #336]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	4a52      	ldr	r2, [pc, #328]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba2:	4b50      	ldr	r3, [pc, #320]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb0:	4b4c      	ldr	r3, [pc, #304]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	4a4b      	ldr	r2, [pc, #300]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc0:	4b48      	ldr	r3, [pc, #288]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	4a43      	ldr	r2, [pc, #268]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bde:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bec:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a3c      	ldr	r2, [pc, #240]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b39      	ldr	r3, [pc, #228]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a34      	ldr	r2, [pc, #208]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c28:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a2d      	ldr	r2, [pc, #180]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 0310 	and.w	r3, r3, #16
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c4c:	4826      	ldr	r0, [pc, #152]	; (8000ce8 <MX_GPIO_Init+0x16c>)
 8000c4e:	f000 fd77 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2102      	movs	r1, #2
 8000c56:	4825      	ldr	r0, [pc, #148]	; (8000cec <MX_GPIO_Init+0x170>)
 8000c58:	f000 fd72 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c66:	2302      	movs	r3, #2
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481f      	ldr	r0, [pc, #124]	; (8000cf0 <MX_GPIO_Init+0x174>)
 8000c72:	f000 fbb5 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c76:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4816      	ldr	r0, [pc, #88]	; (8000ce8 <MX_GPIO_Init+0x16c>)
 8000c90:	f000 fba6 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI_Pin */
  GPIO_InitStruct.Pin = EXTI_Pin;
 8000c94:	2340      	movs	r3, #64	; 0x40
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c98:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXTI_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_GPIO_Init+0x174>)
 8000caa:	f000 fb99 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <MX_GPIO_Init+0x170>)
 8000cc6:	f000 fb8b 	bl	80013e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2017      	movs	r0, #23
 8000cd0:	f000 fb51 	bl	8001376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cd4:	2017      	movs	r0, #23
 8000cd6:	f000 fb68 	bl	80013aa <HAL_NVIC_EnableIRQ>

}
 8000cda:	bf00      	nop
 8000cdc:	3730      	adds	r7, #48	; 0x30
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	58020400 	.word	0x58020400
 8000cec:	58021000 	.word	0x58021000
 8000cf0:	58020800 	.word	0x58020800

08000cf4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t EXTI9_5_IRQn){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80fb      	strh	r3, [r7, #6]
	state++;
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x60>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x60>)
 8000d08:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4812      	ldr	r0, [pc, #72]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x64>)
 8000d10:	f000 fd16 	bl	8001740 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2102      	movs	r1, #2
 8000d18:	4810      	ldr	r0, [pc, #64]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x68>)
 8000d1a:	f000 fd11 	bl	8001740 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x64>)
 8000d26:	f000 fd0b 	bl	8001740 <HAL_GPIO_WritePin>
	i = -1;
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000d2c:	22ff      	movs	r2, #255	; 0xff
 8000d2e:	701a      	strb	r2, [r3, #0]

	if (state == 0 || state == 4){
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x60>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_EXTI_Callback+0x4c>
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x60>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	d105      	bne.n	8000d4c <HAL_GPIO_EXTI_Callback+0x58>
		j = 0;
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
		state = 0;
 8000d46:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x60>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	240005cc 	.word	0x240005cc
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	58021000 	.word	0x58021000
 8000d60:	24000008 	.word	0x24000008
 8000d64:	240005cd 	.word	0x240005cd

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <Error_Handler+0x8>
	...

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_MspInit+0x30>)
 8000d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d80:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_MspInit+0x30>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_MspInit+0x30>)
 8000d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	58024400 	.word	0x58024400

08000da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0b8      	sub	sp, #224	; 0xe0
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	22bc      	movs	r2, #188	; 0xbc
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f004 fda7 	bl	800591c <memset>
  if(huart->Instance==USART3)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a25      	ldr	r2, [pc, #148]	; (8000e68 <HAL_UART_MspInit+0xc0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d142      	bne.n	8000e5e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 fe92 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000df2:	f7ff ffb9 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_UART_MspInit+0xc4>)
 8000df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <HAL_UART_MspInit+0xc4>)
 8000dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0xc4>)
 8000e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_UART_MspInit+0xc4>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0xc4>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_UART_MspInit+0xc4>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_UART_MspInit+0xc8>)
 8000e5a:	f000 fac1 	bl	80013e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	37e0      	adds	r7, #224	; 0xe0
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40004800 	.word	0x40004800
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58020c00 	.word	0x58020c00

08000e74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0b8      	sub	sp, #224	; 0xe0
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	22bc      	movs	r2, #188	; 0xbc
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 fd41 	bl	800591c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a36      	ldr	r2, [pc, #216]	; (8000f78 <HAL_PCD_MspInit+0x104>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d165      	bne.n	8000f70 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ea4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ea8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000eae:	2318      	movs	r3, #24
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000ebe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ec2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ec8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fe1b 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000ee0:	f7ff ff42 	bl	8000d68 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000ee4:	f000 fe4a 	bl	8001b7c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <HAL_PCD_MspInit+0x108>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	4a23      	ldr	r2, [pc, #140]	; (8000f7c <HAL_PCD_MspInit+0x108>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef8:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <HAL_PCD_MspInit+0x108>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f06:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f20:	230a      	movs	r3, #10
 8000f22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4814      	ldr	r0, [pc, #80]	; (8000f80 <HAL_PCD_MspInit+0x10c>)
 8000f2e:	f000 fa57 	bl	80013e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <HAL_PCD_MspInit+0x10c>)
 8000f4e:	f000 fa47 	bl	80013e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_PCD_MspInit+0x108>)
 8000f54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f58:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_PCD_MspInit+0x108>)
 8000f5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_PCD_MspInit+0x108>)
 8000f64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f70:	bf00      	nop
 8000f72:	37e0      	adds	r7, #224	; 0xe0
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40080000 	.word	0x40080000
 8000f7c:	58024400 	.word	0x58024400
 8000f80:	58020000 	.word	0x58020000

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f8a6 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_Pin);
 8000fdc:	2040      	movs	r0, #64	; 0x40
 8000fde:	f000 fbe2 	bl	80017a6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fec:	f7ff faf6 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	; (8001028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	; (8001034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001016:	f004 fc5d 	bl	80058d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fb75 	bl	8000708 <main>
  bx  lr
 800101e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001020:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001024:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001028:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800102c:	08005998 	.word	0x08005998
  ldr r2, =_sbss
 8001030:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001034:	240005d4 	.word	0x240005d4

08001038 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC3_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001042:	2003      	movs	r0, #3
 8001044:	f000 f98c 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001048:	f001 fb8c 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 800104c:	4602      	mov	r2, r0
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_Init+0x68>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	4913      	ldr	r1, [pc, #76]	; (80010a8 <HAL_Init+0x6c>)
 800105a:	5ccb      	ldrb	r3, [r1, r3]
 800105c:	f003 031f 	and.w	r3, r3, #31
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_Init+0x68>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_Init+0x6c>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_Init+0x70>)
 800107e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <HAL_Init+0x74>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f814 	bl	80010b4 <HAL_InitTick>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e002      	b.n	800109c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001096:	f7ff fe6d 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	58024400 	.word	0x58024400
 80010a8:	08005944 	.word	0x08005944
 80010ac:	24000004 	.word	0x24000004
 80010b0:	24000000 	.word	0x24000000

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_InitTick+0x60>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e021      	b.n	800110c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_InitTick+0x64>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_InitTick+0x60>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f971 	bl	80013c6 <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f93b 	bl	8001376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x68>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	24000010 	.word	0x24000010
 8001118:	24000000 	.word	0x24000000
 800111c:	2400000c 	.word	0x2400000c

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	24000010 	.word	0x24000010
 8001144:	240005d0 	.word	0x240005d0

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	240005d0 	.word	0x240005d0

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24000010 	.word	0x24000010

080011a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetREVID+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0c1b      	lsrs	r3, r3, #16
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	5c001000 	.word	0x5c001000

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	05fa0000 	.word	0x05fa0000

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <__NVIC_EnableIRQ+0x38>)
 800123e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800132c:	d301      	bcc.n	8001332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132e:	2301      	movs	r3, #1
 8001330:	e00f      	b.n	8001352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <SysTick_Config+0x40>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133a:	210f      	movs	r1, #15
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f7ff ff8e 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <SysTick_Config+0x40>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <SysTick_Config+0x40>)
 800134c:	2207      	movs	r2, #7
 800134e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff29 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001384:	f7ff ff40 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001388:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff ff90 	bl	80012b4 <NVIC_EncodePriority>
 8001394:	4602      	mov	r2, r0
 8001396:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5f 	bl	8001260 <__NVIC_SetPriority>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff33 	bl	8001224 <__NVIC_EnableIRQ>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffa4 	bl	800131c <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013ee:	4b89      	ldr	r3, [pc, #548]	; (8001614 <HAL_GPIO_Init+0x234>)
 80013f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013f2:	e194      	b.n	800171e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2101      	movs	r1, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 8186 	beq.w	8001718 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d005      	beq.n	8001424 <HAL_GPIO_Init+0x44>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d130      	bne.n	8001486 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145a:	2201      	movs	r2, #1
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 0201 	and.w	r2, r3, #1
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b03      	cmp	r3, #3
 8001490:	d017      	beq.n	80014c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d123      	bne.n	8001516 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691a      	ldr	r2, [r3, #16]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	69b9      	ldr	r1, [r7, #24]
 8001512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0203 	and.w	r2, r3, #3
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 80e0 	beq.w	8001718 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001558:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <HAL_GPIO_Init+0x238>)
 800155a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800155e:	4a2e      	ldr	r2, [pc, #184]	; (8001618 <HAL_GPIO_Init+0x238>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_GPIO_Init+0x238>)
 800156a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001576:	4a29      	ldr	r2, [pc, #164]	; (800161c <HAL_GPIO_Init+0x23c>)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a20      	ldr	r2, [pc, #128]	; (8001620 <HAL_GPIO_Init+0x240>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d052      	beq.n	8001648 <HAL_GPIO_Init+0x268>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <HAL_GPIO_Init+0x244>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d031      	beq.n	800160e <HAL_GPIO_Init+0x22e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <HAL_GPIO_Init+0x248>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d02b      	beq.n	800160a <HAL_GPIO_Init+0x22a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a1d      	ldr	r2, [pc, #116]	; (800162c <HAL_GPIO_Init+0x24c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d025      	beq.n	8001606 <HAL_GPIO_Init+0x226>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_GPIO_Init+0x250>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d01f      	beq.n	8001602 <HAL_GPIO_Init+0x222>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <HAL_GPIO_Init+0x254>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d019      	beq.n	80015fe <HAL_GPIO_Init+0x21e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a1a      	ldr	r2, [pc, #104]	; (8001638 <HAL_GPIO_Init+0x258>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x21a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_GPIO_Init+0x25c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x216>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a18      	ldr	r2, [pc, #96]	; (8001640 <HAL_GPIO_Init+0x260>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x212>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a17      	ldr	r2, [pc, #92]	; (8001644 <HAL_GPIO_Init+0x264>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x20e>
 80015ea:	2309      	movs	r3, #9
 80015ec:	e02d      	b.n	800164a <HAL_GPIO_Init+0x26a>
 80015ee:	230a      	movs	r3, #10
 80015f0:	e02b      	b.n	800164a <HAL_GPIO_Init+0x26a>
 80015f2:	2308      	movs	r3, #8
 80015f4:	e029      	b.n	800164a <HAL_GPIO_Init+0x26a>
 80015f6:	2307      	movs	r3, #7
 80015f8:	e027      	b.n	800164a <HAL_GPIO_Init+0x26a>
 80015fa:	2306      	movs	r3, #6
 80015fc:	e025      	b.n	800164a <HAL_GPIO_Init+0x26a>
 80015fe:	2305      	movs	r3, #5
 8001600:	e023      	b.n	800164a <HAL_GPIO_Init+0x26a>
 8001602:	2304      	movs	r3, #4
 8001604:	e021      	b.n	800164a <HAL_GPIO_Init+0x26a>
 8001606:	2303      	movs	r3, #3
 8001608:	e01f      	b.n	800164a <HAL_GPIO_Init+0x26a>
 800160a:	2302      	movs	r3, #2
 800160c:	e01d      	b.n	800164a <HAL_GPIO_Init+0x26a>
 800160e:	2301      	movs	r3, #1
 8001610:	e01b      	b.n	800164a <HAL_GPIO_Init+0x26a>
 8001612:	bf00      	nop
 8001614:	58000080 	.word	0x58000080
 8001618:	58024400 	.word	0x58024400
 800161c:	58000400 	.word	0x58000400
 8001620:	58020000 	.word	0x58020000
 8001624:	58020400 	.word	0x58020400
 8001628:	58020800 	.word	0x58020800
 800162c:	58020c00 	.word	0x58020c00
 8001630:	58021000 	.word	0x58021000
 8001634:	58021400 	.word	0x58021400
 8001638:	58021800 	.word	0x58021800
 800163c:	58021c00 	.word	0x58021c00
 8001640:	58022000 	.word	0x58022000
 8001644:	58022400 	.word	0x58022400
 8001648:	2300      	movs	r3, #0
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	f002 0203 	and.w	r2, r2, #3
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	4093      	lsls	r3, r2
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165a:	4938      	ldr	r1, [pc, #224]	; (800173c <HAL_GPIO_Init+0x35c>)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800168e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	3301      	adds	r3, #1
 800171c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	f47f ae63 	bne.w	80013f4 <HAL_GPIO_Init+0x14>
  }
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	3724      	adds	r7, #36	; 0x24
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	58000400 	.word	0x58000400

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800175c:	e003      	b.n	8001766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	041a      	lsls	r2, r3, #16
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	619a      	str	r2, [r3, #24]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001772:	b480      	push	{r7}
 8001774:	b085      	sub	sp, #20
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001784:	887a      	ldrh	r2, [r7, #2]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4013      	ands	r3, r2
 800178a:	041a      	lsls	r2, r3, #16
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	43d9      	mvns	r1, r3
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	400b      	ands	r3, r1
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	619a      	str	r2, [r3, #24]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fa91 	bl	8000cf4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80017e4:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_HSEM_FastTake+0x2c>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3320      	adds	r3, #32
 80017ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_HSEM_FastTake+0x30>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	58026400 	.word	0x58026400
 800180c:	80000300 	.word	0x80000300

08001810 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800181a:	4906      	ldr	r1, [pc, #24]	; (8001834 <HAL_HSEM_Release+0x24>)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	58026400 	.word	0x58026400

08001838 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183a:	b08f      	sub	sp, #60	; 0x3c
 800183c:	af0a      	add	r7, sp, #40	; 0x28
 800183e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e116      	b.n	8001a78 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d106      	bne.n	800186a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fb05 	bl	8000e74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2203      	movs	r2, #3
 800186e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fd87 	bl	800539c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	687e      	ldr	r6, [r7, #4]
 8001896:	466d      	mov	r5, sp
 8001898:	f106 0410 	add.w	r4, r6, #16
 800189c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800189e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80018ac:	1d33      	adds	r3, r6, #4
 80018ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b0:	6838      	ldr	r0, [r7, #0]
 80018b2:	f003 fd05 	bl	80052c0 <USB_CoreInit>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0d7      	b.n	8001a78 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 fd75 	bl	80053be <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	e04a      	b.n	8001970 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	333d      	adds	r3, #61	; 0x3d
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	333c      	adds	r3, #60	; 0x3c
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	b298      	uxth	r0, r3
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	3344      	adds	r3, #68	; 0x44
 8001916:	4602      	mov	r2, r0
 8001918:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3340      	adds	r3, #64	; 0x40
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3348      	adds	r3, #72	; 0x48
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	334c      	adds	r3, #76	; 0x4c
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	3354      	adds	r3, #84	; 0x54
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	3301      	adds	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	d3af      	bcc.n	80018da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	e044      	b.n	8001a0a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	3301      	adds	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d3b5      	bcc.n	8001980 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	687e      	ldr	r6, [r7, #4]
 8001a1c:	466d      	mov	r5, sp
 8001a1e:	f106 0410 	add.w	r4, r6, #16
 8001a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a32:	1d33      	adds	r3, r6, #4
 8001a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a36:	6838      	ldr	r0, [r7, #0]
 8001a38:	f003 fd0e 	bl	8005458 <USB_DevInit>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2202      	movs	r2, #2
 8001a46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e014      	b.n	8001a78 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d102      	bne.n	8001a6c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f80a 	bl	8001a80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 fecc 	bl	800580e <USB_DevDisconnect>

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	10000003 	.word	0x10000003

08001ac8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001ad0:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	2b06      	cmp	r3, #6
 8001ada:	d00a      	beq.n	8001af2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001adc:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d001      	beq.n	8001aee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e040      	b.n	8001b70 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e03e      	b.n	8001b70 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001afa:	491f      	ldr	r1, [pc, #124]	; (8001b78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b02:	f7ff fb21 	bl	8001148 <HAL_GetTick>
 8001b06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b08:	e009      	b.n	8001b1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b0a:	f7ff fb1d 	bl	8001148 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b18:	d901      	bls.n	8001b1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e028      	b.n	8001b70 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b2a:	d1ee      	bne.n	8001b0a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b1e      	cmp	r3, #30
 8001b30:	d008      	beq.n	8001b44 <HAL_PWREx_ConfigSupply+0x7c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b2e      	cmp	r3, #46	; 0x2e
 8001b36:	d005      	beq.n	8001b44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b1d      	cmp	r3, #29
 8001b3c:	d002      	beq.n	8001b44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b2d      	cmp	r3, #45	; 0x2d
 8001b42:	d114      	bne.n	8001b6e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001b44:	f7ff fb00 	bl	8001148 <HAL_GetTick>
 8001b48:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b4a:	e009      	b.n	8001b60 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b4c:	f7ff fafc 	bl	8001148 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b5a:	d901      	bls.n	8001b60 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e007      	b.n	8001b70 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6c:	d1ee      	bne.n	8001b4c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	58024800 	.word	0x58024800

08001b7c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b8a:	60d3      	str	r3, [r2, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	58024800 	.word	0x58024800

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d102      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f000 bc1d 	b.w	80023ea <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8087 	beq.w	8001ccc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bbe:	4b99      	ldr	r3, [pc, #612]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bc8:	4b96      	ldr	r3, [pc, #600]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	2b10      	cmp	r3, #16
 8001bd2:	d007      	beq.n	8001be4 <HAL_RCC_OscConfig+0x48>
 8001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd6:	2b18      	cmp	r3, #24
 8001bd8:	d110      	bne.n	8001bfc <HAL_RCC_OscConfig+0x60>
 8001bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d10b      	bne.n	8001bfc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	4b8f      	ldr	r3, [pc, #572]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d06c      	beq.n	8001cca <HAL_RCC_OscConfig+0x12e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d168      	bne.n	8001cca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e3f6      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c04:	d106      	bne.n	8001c14 <HAL_RCC_OscConfig+0x78>
 8001c06:	4b87      	ldr	r3, [pc, #540]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a86      	ldr	r2, [pc, #536]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e02e      	b.n	8001c72 <HAL_RCC_OscConfig+0xd6>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10c      	bne.n	8001c36 <HAL_RCC_OscConfig+0x9a>
 8001c1c:	4b81      	ldr	r3, [pc, #516]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a80      	ldr	r2, [pc, #512]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b7e      	ldr	r3, [pc, #504]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a7d      	ldr	r2, [pc, #500]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	e01d      	b.n	8001c72 <HAL_RCC_OscConfig+0xd6>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3e:	d10c      	bne.n	8001c5a <HAL_RCC_OscConfig+0xbe>
 8001c40:	4b78      	ldr	r3, [pc, #480]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a77      	ldr	r2, [pc, #476]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b75      	ldr	r3, [pc, #468]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a74      	ldr	r2, [pc, #464]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e00b      	b.n	8001c72 <HAL_RCC_OscConfig+0xd6>
 8001c5a:	4b72      	ldr	r3, [pc, #456]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a71      	ldr	r2, [pc, #452]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d013      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fa65 	bl	8001148 <HAL_GetTick>
 8001c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c82:	f7ff fa61 	bl	8001148 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b64      	cmp	r3, #100	; 0x64
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e3aa      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c94:	4b63      	ldr	r3, [pc, #396]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0xe6>
 8001ca0:	e014      	b.n	8001ccc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fa51 	bl	8001148 <HAL_GetTick>
 8001ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001caa:	f7ff fa4d 	bl	8001148 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b64      	cmp	r3, #100	; 0x64
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e396      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cbc:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x10e>
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80cb 	beq.w	8001e70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cda:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ce2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ce4:	4b4f      	ldr	r3, [pc, #316]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_RCC_OscConfig+0x164>
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	2b18      	cmp	r3, #24
 8001cf4:	d156      	bne.n	8001da4 <HAL_RCC_OscConfig+0x208>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d151      	bne.n	8001da4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d00:	4b48      	ldr	r3, [pc, #288]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_OscConfig+0x17c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e368      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d18:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 0219 	bic.w	r2, r3, #25
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	493f      	ldr	r1, [pc, #252]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d2a:	f7ff fa0d 	bl	8001148 <HAL_GetTick>
 8001d2e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d32:	f7ff fa09 	bl	8001148 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e352      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d44:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	f7ff fa2a 	bl	80011a8 <HAL_GetREVID>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d817      	bhi.n	8001d8e <HAL_RCC_OscConfig+0x1f2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	2b40      	cmp	r3, #64	; 0x40
 8001d64:	d108      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1dc>
 8001d66:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d6e:	4a2d      	ldr	r2, [pc, #180]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d76:	e07b      	b.n	8001e70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	031b      	lsls	r3, r3, #12
 8001d86:	4927      	ldr	r1, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d8c:	e070      	b.n	8001e70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	061b      	lsls	r3, r3, #24
 8001d9c:	4921      	ldr	r1, [pc, #132]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da2:	e065      	b.n	8001e70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d048      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 0219 	bic.w	r2, r3, #25
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	491a      	ldr	r1, [pc, #104]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff f9c3 	bl	8001148 <HAL_GetTick>
 8001dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff f9bf 	bl	8001148 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e308      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	f7ff f9e0 	bl	80011a8 <HAL_GetREVID>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d81a      	bhi.n	8001e28 <HAL_RCC_OscConfig+0x28c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d108      	bne.n	8001e0c <HAL_RCC_OscConfig+0x270>
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e08:	6053      	str	r3, [r2, #4]
 8001e0a:	e031      	b.n	8001e70 <HAL_RCC_OscConfig+0x2d4>
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	031b      	lsls	r3, r3, #12
 8001e1a:	4902      	ldr	r1, [pc, #8]	; (8001e24 <HAL_RCC_OscConfig+0x288>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
 8001e20:	e026      	b.n	8001e70 <HAL_RCC_OscConfig+0x2d4>
 8001e22:	bf00      	nop
 8001e24:	58024400 	.word	0x58024400
 8001e28:	4b9a      	ldr	r3, [pc, #616]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	061b      	lsls	r3, r3, #24
 8001e36:	4997      	ldr	r1, [pc, #604]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
 8001e3c:	e018      	b.n	8001e70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3e:	4b95      	ldr	r3, [pc, #596]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a94      	ldr	r2, [pc, #592]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f97d 	bl	8001148 <HAL_GetTick>
 8001e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e52:	f7ff f979 	bl	8001148 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e2c2      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e64:	4b8b      	ldr	r3, [pc, #556]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80a9 	beq.w	8001fd0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7e:	4b85      	ldr	r3, [pc, #532]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e88:	4b82      	ldr	r3, [pc, #520]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d007      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x308>
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b18      	cmp	r3, #24
 8001e98:	d13a      	bne.n	8001f10 <HAL_RCC_OscConfig+0x374>
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d135      	bne.n	8001f10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ea4:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_OscConfig+0x320>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2b80      	cmp	r3, #128	; 0x80
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e296      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ebc:	f7ff f974 	bl	80011a8 <HAL_GetREVID>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d817      	bhi.n	8001efa <HAL_RCC_OscConfig+0x35e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d108      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x348>
 8001ed2:	4b70      	ldr	r3, [pc, #448]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001eda:	4a6e      	ldr	r2, [pc, #440]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ee0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ee2:	e075      	b.n	8001fd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ee4:	4b6b      	ldr	r3, [pc, #428]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	069b      	lsls	r3, r3, #26
 8001ef2:	4968      	ldr	r1, [pc, #416]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ef8:	e06a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001efa:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	061b      	lsls	r3, r3, #24
 8001f08:	4962      	ldr	r1, [pc, #392]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f0e:	e05f      	b.n	8001fd0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d042      	beq.n	8001f9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f18:	4b5e      	ldr	r3, [pc, #376]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff f910 	bl	8001148 <HAL_GetTick>
 8001f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f2c:	f7ff f90c 	bl	8001148 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e255      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f3e:	4b55      	ldr	r3, [pc, #340]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f4a:	f7ff f92d 	bl	80011a8 <HAL_GetREVID>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d817      	bhi.n	8001f88 <HAL_RCC_OscConfig+0x3ec>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d108      	bne.n	8001f72 <HAL_RCC_OscConfig+0x3d6>
 8001f60:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f68:	4a4a      	ldr	r2, [pc, #296]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f6e:	6053      	str	r3, [r2, #4]
 8001f70:	e02e      	b.n	8001fd0 <HAL_RCC_OscConfig+0x434>
 8001f72:	4b48      	ldr	r3, [pc, #288]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	069b      	lsls	r3, r3, #26
 8001f80:	4944      	ldr	r1, [pc, #272]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
 8001f86:	e023      	b.n	8001fd0 <HAL_RCC_OscConfig+0x434>
 8001f88:	4b42      	ldr	r3, [pc, #264]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	493f      	ldr	r1, [pc, #252]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60cb      	str	r3, [r1, #12]
 8001f9c:	e018      	b.n	8001fd0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a3c      	ldr	r2, [pc, #240]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7ff f8cd 	bl	8001148 <HAL_GetTick>
 8001fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001fb2:	f7ff f8c9 	bl	8001148 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e212      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fc4:	4b33      	ldr	r3, [pc, #204]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d036      	beq.n	800204a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d019      	beq.n	8002018 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe8:	4a2a      	ldr	r2, [pc, #168]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff f8aa 	bl	8001148 <HAL_GetTick>
 8001ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7ff f8a6 	bl	8001148 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e1ef      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 800200c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x45c>
 8002016:	e018      	b.n	800204a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 800201a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201c:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff f890 	bl	8001148 <HAL_GetTick>
 8002028:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202c:	f7ff f88c 	bl	8001148 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1d5      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8002040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d039      	beq.n	80020ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d01c      	beq.n	8002098 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8002064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002068:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800206a:	f7ff f86d 	bl	8001148 <HAL_GetTick>
 800206e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002072:	f7ff f869 	bl	8001148 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e1b2      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x4d6>
 8002090:	e01b      	b.n	80020ca <HAL_RCC_OscConfig+0x52e>
 8002092:	bf00      	nop
 8002094:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002098:	4b9b      	ldr	r3, [pc, #620]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a9a      	ldr	r2, [pc, #616]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 800209e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020a4:	f7ff f850 	bl	8001148 <HAL_GetTick>
 80020a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80020ac:	f7ff f84c 	bl	8001148 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e195      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020be:	4b92      	ldr	r3, [pc, #584]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8081 	beq.w	80021da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020d8:	4b8c      	ldr	r3, [pc, #560]	; (800230c <HAL_RCC_OscConfig+0x770>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a8b      	ldr	r2, [pc, #556]	; (800230c <HAL_RCC_OscConfig+0x770>)
 80020de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020e4:	f7ff f830 	bl	8001148 <HAL_GetTick>
 80020e8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80020ec:	f7ff f82c 	bl	8001148 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e175      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020fe:	4b83      	ldr	r3, [pc, #524]	; (800230c <HAL_RCC_OscConfig+0x770>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d106      	bne.n	8002120 <HAL_RCC_OscConfig+0x584>
 8002112:	4b7d      	ldr	r3, [pc, #500]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	4a7c      	ldr	r2, [pc, #496]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6713      	str	r3, [r2, #112]	; 0x70
 800211e:	e02d      	b.n	800217c <HAL_RCC_OscConfig+0x5e0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10c      	bne.n	8002142 <HAL_RCC_OscConfig+0x5a6>
 8002128:	4b77      	ldr	r3, [pc, #476]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a76      	ldr	r2, [pc, #472]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
 8002134:	4b74      	ldr	r3, [pc, #464]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	4a73      	ldr	r2, [pc, #460]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 800213a:	f023 0304 	bic.w	r3, r3, #4
 800213e:	6713      	str	r3, [r2, #112]	; 0x70
 8002140:	e01c      	b.n	800217c <HAL_RCC_OscConfig+0x5e0>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b05      	cmp	r3, #5
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x5c8>
 800214a:	4b6f      	ldr	r3, [pc, #444]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a6e      	ldr	r2, [pc, #440]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
 8002156:	4b6c      	ldr	r3, [pc, #432]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a6b      	ldr	r2, [pc, #428]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0x5e0>
 8002164:	4b68      	ldr	r3, [pc, #416]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4a67      	ldr	r2, [pc, #412]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	; 0x70
 8002170:	4b65      	ldr	r3, [pc, #404]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a64      	ldr	r2, [pc, #400]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002176:	f023 0304 	bic.w	r3, r3, #4
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d015      	beq.n	80021b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7fe ffe0 	bl	8001148 <HAL_GetTick>
 8002188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218c:	f7fe ffdc 	bl	8001148 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e123      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021a2:	4b59      	ldr	r3, [pc, #356]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ee      	beq.n	800218c <HAL_RCC_OscConfig+0x5f0>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7fe ffca 	bl	8001148 <HAL_GetTick>
 80021b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7fe ffc6 	bl	8001148 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e10d      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021ce:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1ee      	bne.n	80021b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8102 	beq.w	80023e8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80021e4:	4b48      	ldr	r3, [pc, #288]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ec:	2b18      	cmp	r3, #24
 80021ee:	f000 80bd 	beq.w	800236c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	f040 809e 	bne.w	8002338 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fc:	4b42      	ldr	r3, [pc, #264]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a41      	ldr	r2, [pc, #260]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe ff9e 	bl	8001148 <HAL_GetTick>
 800220c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002210:	f7fe ff9a 	bl	8001148 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0e3      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002222:	4b39      	ldr	r3, [pc, #228]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800222e:	4b36      	ldr	r3, [pc, #216]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_RCC_OscConfig+0x774>)
 8002234:	4013      	ands	r3, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	430a      	orrs	r2, r1
 8002242:	4931      	ldr	r1, [pc, #196]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002244:	4313      	orrs	r3, r2
 8002246:	628b      	str	r3, [r1, #40]	; 0x28
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	3b01      	subs	r3, #1
 800224e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	3b01      	subs	r3, #1
 8002258:	025b      	lsls	r3, r3, #9
 800225a:	b29b      	uxth	r3, r3
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	3b01      	subs	r3, #1
 8002264:	041b      	lsls	r3, r3, #16
 8002266:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	3b01      	subs	r3, #1
 8002272:	061b      	lsls	r3, r3, #24
 8002274:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002278:	4923      	ldr	r1, [pc, #140]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 800227a:	4313      	orrs	r3, r2
 800227c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 800228c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_RCC_OscConfig+0x778>)
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002296:	00d2      	lsls	r2, r2, #3
 8002298:	491b      	ldr	r1, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 800229a:	4313      	orrs	r3, r2
 800229c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	f023 020c 	bic.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4917      	ldr	r1, [pc, #92]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	f023 0202 	bic.w	r2, r3, #2
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	4912      	ldr	r1, [pc, #72]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	4a07      	ldr	r2, [pc, #28]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_RCC_OscConfig+0x76c>)
 80022f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7fe ff23 	bl	8001148 <HAL_GetTick>
 8002302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002304:	e011      	b.n	800232a <HAL_RCC_OscConfig+0x78e>
 8002306:	bf00      	nop
 8002308:	58024400 	.word	0x58024400
 800230c:	58024800 	.word	0x58024800
 8002310:	fffffc0c 	.word	0xfffffc0c
 8002314:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe ff16 	bl	8001148 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e05f      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800232a:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <HAL_RCC_OscConfig+0x858>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x77c>
 8002336:	e057      	b.n	80023e8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	4b2e      	ldr	r3, [pc, #184]	; (80023f4 <HAL_RCC_OscConfig+0x858>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a2d      	ldr	r2, [pc, #180]	; (80023f4 <HAL_RCC_OscConfig+0x858>)
 800233e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe ff00 	bl	8001148 <HAL_GetTick>
 8002348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fefc 	bl	8001148 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e045      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_RCC_OscConfig+0x858>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x7b0>
 800236a:	e03d      	b.n	80023e8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_RCC_OscConfig+0x858>)
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_RCC_OscConfig+0x858>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2b01      	cmp	r3, #1
 800237e:	d031      	beq.n	80023e4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f003 0203 	and.w	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d12a      	bne.n	80023e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d122      	bne.n	80023e4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d11a      	bne.n	80023e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0a5b      	lsrs	r3, r3, #9
 80023b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d111      	bne.n	80023e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	0c1b      	lsrs	r3, r3, #16
 80023c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d108      	bne.n	80023e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	0e1b      	lsrs	r3, r3, #24
 80023d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3730      	adds	r7, #48	; 0x30
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	58024400 	.word	0x58024400

080023f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e19c      	b.n	8002746 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b8a      	ldr	r3, [pc, #552]	; (8002638 <HAL_RCC_ClockConfig+0x240>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d910      	bls.n	800243c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b87      	ldr	r3, [pc, #540]	; (8002638 <HAL_RCC_ClockConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 020f 	bic.w	r2, r3, #15
 8002422:	4985      	ldr	r1, [pc, #532]	; (8002638 <HAL_RCC_ClockConfig+0x240>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b83      	ldr	r3, [pc, #524]	; (8002638 <HAL_RCC_ClockConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e184      	b.n	8002746 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d010      	beq.n	800246a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	4b7b      	ldr	r3, [pc, #492]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002454:	429a      	cmp	r2, r3
 8002456:	d908      	bls.n	800246a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002458:	4b78      	ldr	r3, [pc, #480]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	4975      	ldr	r1, [pc, #468]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 8002466:	4313      	orrs	r3, r2
 8002468:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d010      	beq.n	8002498 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	4b70      	ldr	r3, [pc, #448]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002482:	429a      	cmp	r2, r3
 8002484:	d908      	bls.n	8002498 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002486:	4b6d      	ldr	r3, [pc, #436]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	496a      	ldr	r1, [pc, #424]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 8002494:	4313      	orrs	r3, r2
 8002496:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d010      	beq.n	80024c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699a      	ldr	r2, [r3, #24]
 80024a8:	4b64      	ldr	r3, [pc, #400]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d908      	bls.n	80024c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024b4:	4b61      	ldr	r3, [pc, #388]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	495e      	ldr	r1, [pc, #376]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d010      	beq.n	80024f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024de:	429a      	cmp	r2, r3
 80024e0:	d908      	bls.n	80024f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80024e2:	4b56      	ldr	r3, [pc, #344]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4953      	ldr	r1, [pc, #332]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d010      	beq.n	8002522 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	4b4d      	ldr	r3, [pc, #308]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	429a      	cmp	r2, r3
 800250e:	d908      	bls.n	8002522 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002510:	4b4a      	ldr	r3, [pc, #296]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f023 020f 	bic.w	r2, r3, #15
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4947      	ldr	r1, [pc, #284]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 800251e:	4313      	orrs	r3, r2
 8002520:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d055      	beq.n	80025da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800252e:	4b43      	ldr	r3, [pc, #268]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4940      	ldr	r1, [pc, #256]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 800253c:	4313      	orrs	r3, r2
 800253e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d107      	bne.n	8002558 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002548:	4b3c      	ldr	r3, [pc, #240]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d121      	bne.n	8002598 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0f6      	b.n	8002746 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d107      	bne.n	8002570 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002560:	4b36      	ldr	r3, [pc, #216]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d115      	bne.n	8002598 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0ea      	b.n	8002746 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d107      	bne.n	8002588 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002578:	4b30      	ldr	r3, [pc, #192]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0de      	b.n	8002746 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002588:	4b2c      	ldr	r3, [pc, #176]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0d6      	b.n	8002746 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002598:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f023 0207 	bic.w	r2, r3, #7
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4925      	ldr	r1, [pc, #148]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7fe fdcd 	bl	8001148 <HAL_GetTick>
 80025ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b2:	f7fe fdc9 	bl	8001148 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0be      	b.n	8002746 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c8:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d1eb      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	4b14      	ldr	r3, [pc, #80]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d208      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f023 020f 	bic.w	r2, r3, #15
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_RCC_ClockConfig+0x244>)
 8002604:	4313      	orrs	r3, r2
 8002606:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_ClockConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d214      	bcs.n	8002640 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <HAL_RCC_ClockConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 020f 	bic.w	r2, r3, #15
 800261e:	4906      	ldr	r1, [pc, #24]	; (8002638 <HAL_RCC_ClockConfig+0x240>)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <HAL_RCC_ClockConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e086      	b.n	8002746 <HAL_RCC_ClockConfig+0x34e>
 8002638:	52002000 	.word	0x52002000
 800263c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002658:	429a      	cmp	r2, r3
 800265a:	d208      	bcs.n	800266e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800265c:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	4939      	ldr	r1, [pc, #228]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 800266a:	4313      	orrs	r3, r2
 800266c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d010      	beq.n	800269c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	4b34      	ldr	r3, [pc, #208]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002686:	429a      	cmp	r2, r3
 8002688:	d208      	bcs.n	800269c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	492e      	ldr	r1, [pc, #184]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 8002698:	4313      	orrs	r3, r2
 800269a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d010      	beq.n	80026ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	4b28      	ldr	r3, [pc, #160]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d208      	bcs.n	80026ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4922      	ldr	r1, [pc, #136]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d010      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d208      	bcs.n	80026f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4917      	ldr	r1, [pc, #92]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026f8:	f000 f834 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	4912      	ldr	r1, [pc, #72]	; (8002754 <HAL_RCC_ClockConfig+0x35c>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_RCC_ClockConfig+0x358>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <HAL_RCC_ClockConfig+0x35c>)
 8002720:	5cd3      	ldrb	r3, [r2, r3]
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <HAL_RCC_ClockConfig+0x360>)
 800272e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x364>)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCC_ClockConfig+0x368>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fcba 	bl	80010b4 <HAL_InitTick>
 8002740:	4603      	mov	r3, r0
 8002742:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	58024400 	.word	0x58024400
 8002754:	08005944 	.word	0x08005944
 8002758:	24000004 	.word	0x24000004
 800275c:	24000000 	.word	0x24000000
 8002760:	2400000c 	.word	0x2400000c

08002764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	; 0x24
 8002768:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800276a:	4bb3      	ldr	r3, [pc, #716]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002772:	2b18      	cmp	r3, #24
 8002774:	f200 8155 	bhi.w	8002a22 <HAL_RCC_GetSysClockFreq+0x2be>
 8002778:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <HAL_RCC_GetSysClockFreq+0x1c>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	080027e5 	.word	0x080027e5
 8002784:	08002a23 	.word	0x08002a23
 8002788:	08002a23 	.word	0x08002a23
 800278c:	08002a23 	.word	0x08002a23
 8002790:	08002a23 	.word	0x08002a23
 8002794:	08002a23 	.word	0x08002a23
 8002798:	08002a23 	.word	0x08002a23
 800279c:	08002a23 	.word	0x08002a23
 80027a0:	0800280b 	.word	0x0800280b
 80027a4:	08002a23 	.word	0x08002a23
 80027a8:	08002a23 	.word	0x08002a23
 80027ac:	08002a23 	.word	0x08002a23
 80027b0:	08002a23 	.word	0x08002a23
 80027b4:	08002a23 	.word	0x08002a23
 80027b8:	08002a23 	.word	0x08002a23
 80027bc:	08002a23 	.word	0x08002a23
 80027c0:	08002811 	.word	0x08002811
 80027c4:	08002a23 	.word	0x08002a23
 80027c8:	08002a23 	.word	0x08002a23
 80027cc:	08002a23 	.word	0x08002a23
 80027d0:	08002a23 	.word	0x08002a23
 80027d4:	08002a23 	.word	0x08002a23
 80027d8:	08002a23 	.word	0x08002a23
 80027dc:	08002a23 	.word	0x08002a23
 80027e0:	08002817 	.word	0x08002817
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027e4:	4b94      	ldr	r3, [pc, #592]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027f0:	4b91      	ldr	r3, [pc, #580]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	4a90      	ldr	r2, [pc, #576]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002802:	e111      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002804:	4b8d      	ldr	r3, [pc, #564]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002806:	61bb      	str	r3, [r7, #24]
    break;
 8002808:	e10e      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800280a:	4b8d      	ldr	r3, [pc, #564]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800280c:	61bb      	str	r3, [r7, #24]
    break;
 800280e:	e10b      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002810:	4b8c      	ldr	r3, [pc, #560]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002812:	61bb      	str	r3, [r7, #24]
    break;
 8002814:	e108      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002816:	4b88      	ldr	r3, [pc, #544]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002820:	4b85      	ldr	r3, [pc, #532]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800282a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800282c:	4b82      	ldr	r3, [pc, #520]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002836:	4b80      	ldr	r3, [pc, #512]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	08db      	lsrs	r3, r3, #3
 800283c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	fb02 f303 	mul.w	r3, r2, r3
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80e1 	beq.w	8002a1c <HAL_RCC_GetSysClockFreq+0x2b8>
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b02      	cmp	r3, #2
 800285e:	f000 8083 	beq.w	8002968 <HAL_RCC_GetSysClockFreq+0x204>
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b02      	cmp	r3, #2
 8002866:	f200 80a1 	bhi.w	80029ac <HAL_RCC_GetSysClockFreq+0x248>
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x114>
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d056      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002876:	e099      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002878:	4b6f      	ldr	r3, [pc, #444]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d02d      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002884:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	08db      	lsrs	r3, r3, #3
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	4a6b      	ldr	r2, [pc, #428]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
 8002894:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b6:	ee07 3a90 	vmov	s15, r3
 80028ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028be:	ed97 6a02 	vldr	s12, [r7, #8]
 80028c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80028de:	e087      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	ee07 3a90 	vmov	s15, r3
 80028e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002a4c <HAL_RCC_GetSysClockFreq+0x2e8>
 80028ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028f2:	4b51      	ldr	r3, [pc, #324]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028fa:	ee07 3a90 	vmov	s15, r3
 80028fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002902:	ed97 6a02 	vldr	s12, [r7, #8]
 8002906:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 800290a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800290e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800291a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002922:	e065      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800292e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002a50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002936:	4b40      	ldr	r3, [pc, #256]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800293e:	ee07 3a90 	vmov	s15, r3
 8002942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002946:	ed97 6a02 	vldr	s12, [r7, #8]
 800294a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 800294e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800295a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800295e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002966:	e043      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002972:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002a54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800297a:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800298a:	ed97 6a02 	vldr	s12, [r7, #8]
 800298e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800299a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800299e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029aa:	e021      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002a50 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029be:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80029d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029ee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	0a5b      	lsrs	r3, r3, #9
 80029f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029fa:	3301      	adds	r3, #1
 80029fc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a08:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a14:	ee17 3a90 	vmov	r3, s15
 8002a18:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002a1a:	e005      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
    break;
 8002a20:	e002      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002a22:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a24:	61bb      	str	r3, [r7, #24]
    break;
 8002a26:	bf00      	nop
  }

  return sysclockfreq;
 8002a28:	69bb      	ldr	r3, [r7, #24]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	58024400 	.word	0x58024400
 8002a3c:	03d09000 	.word	0x03d09000
 8002a40:	003d0900 	.word	0x003d0900
 8002a44:	007a1200 	.word	0x007a1200
 8002a48:	46000000 	.word	0x46000000
 8002a4c:	4c742400 	.word	0x4c742400
 8002a50:	4a742400 	.word	0x4a742400
 8002a54:	4af42400 	.word	0x4af42400

08002a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a5e:	f7ff fe81 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8002a62:	4602      	mov	r2, r0
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	490f      	ldr	r1, [pc, #60]	; (8002aac <HAL_RCC_GetHCLKFreq+0x54>)
 8002a70:	5ccb      	ldrb	r3, [r1, r3]
 8002a72:	f003 031f 	and.w	r3, r3, #31
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_RCC_GetHCLKFreq+0x54>)
 8002a86:	5cd3      	ldrb	r3, [r2, r3]
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a92:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a96:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	08005944 	.word	0x08005944
 8002ab0:	24000004 	.word	0x24000004
 8002ab4:	24000000 	.word	0x24000000

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002abc:	f7ff ffcc 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	08005944 	.word	0x08005944

08002ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002ae8:	f7ff ffb6 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4904      	ldr	r1, [pc, #16]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	58024400 	.word	0x58024400
 8002b0c:	08005944 	.word	0x08005944

08002b10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b18:	2300      	movs	r3, #0
 8002b1a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d03f      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b34:	d02a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b3a:	d824      	bhi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b40:	d018      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b46:	d81e      	bhi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b50:	d007      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b52:	e018      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b54:	4ba3      	ldr	r3, [pc, #652]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	4aa2      	ldr	r2, [pc, #648]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b60:	e015      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2102      	movs	r1, #2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 f9d5 	bl	8003f18 <RCCEx_PLL2_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b72:	e00c      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3324      	adds	r3, #36	; 0x24
 8002b78:	2102      	movs	r1, #2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 fa7e 	bl	800407c <RCCEx_PLL3_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b84:	e003      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	75fb      	strb	r3, [r7, #23]
      break;
 8002b8a:	e000      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b94:	4b93      	ldr	r3, [pc, #588]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba0:	4990      	ldr	r1, [pc, #576]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	650b      	str	r3, [r1, #80]	; 0x50
 8002ba6:	e001      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
 8002baa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d03d      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d826      	bhi.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002bc0:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc6:	bf00      	nop
 8002bc8:	08002bdd 	.word	0x08002bdd
 8002bcc:	08002beb 	.word	0x08002beb
 8002bd0:	08002bfd 	.word	0x08002bfd
 8002bd4:	08002c15 	.word	0x08002c15
 8002bd8:	08002c15 	.word	0x08002c15
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bdc:	4b81      	ldr	r3, [pc, #516]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	4a80      	ldr	r2, [pc, #512]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002be8:	e015      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 f991 	bl	8003f18 <RCCEx_PLL2_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bfa:	e00c      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3324      	adds	r3, #36	; 0x24
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f001 fa3a 	bl	800407c <RCCEx_PLL3_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c0c:	e003      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	75fb      	strb	r3, [r7, #23]
      break;
 8002c12:	e000      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d109      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c1c:	4b71      	ldr	r3, [pc, #452]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c20:	f023 0207 	bic.w	r2, r3, #7
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	496e      	ldr	r1, [pc, #440]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	650b      	str	r3, [r1, #80]	; 0x50
 8002c2e:	e001      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d042      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c48:	d02b      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4e:	d825      	bhi.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c50:	2bc0      	cmp	r3, #192	; 0xc0
 8002c52:	d028      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002c54:	2bc0      	cmp	r3, #192	; 0xc0
 8002c56:	d821      	bhi.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d016      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002c5c:	2b80      	cmp	r3, #128	; 0x80
 8002c5e:	d81d      	bhi.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	d007      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002c68:	e018      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c6a:	4b5e      	ldr	r3, [pc, #376]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	4a5d      	ldr	r2, [pc, #372]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c76:	e017      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 f94a 	bl	8003f18 <RCCEx_PLL2_Config>
 8002c84:	4603      	mov	r3, r0
 8002c86:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c88:	e00e      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3324      	adds	r3, #36	; 0x24
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f001 f9f3 	bl	800407c <RCCEx_PLL3_Config>
 8002c96:	4603      	mov	r3, r0
 8002c98:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c9a:	e005      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002ca0:	e002      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002cae:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	494a      	ldr	r1, [pc, #296]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	650b      	str	r3, [r1, #80]	; 0x50
 8002cc0:	e001      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d049      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002cd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cdc:	d030      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002cde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ce2:	d82a      	bhi.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ce4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ce8:	d02c      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002cea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002cee:	d824      	bhi.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf4:	d018      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cfa:	d81e      	bhi.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002d00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d04:	d007      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002d06:	e018      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d08:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	4a35      	ldr	r2, [pc, #212]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d14:	e017      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f001 f8fb 	bl	8003f18 <RCCEx_PLL2_Config>
 8002d22:	4603      	mov	r3, r0
 8002d24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002d26:	e00e      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3324      	adds	r3, #36	; 0x24
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 f9a4 	bl	800407c <RCCEx_PLL3_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d38:	e005      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002d40:	bf00      	nop
 8002d42:	e000      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d4c:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d5a:	4922      	ldr	r1, [pc, #136]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	658b      	str	r3, [r1, #88]	; 0x58
 8002d60:	e001      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d04b      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d7c:	d030      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002d7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d82:	d82a      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d88:	d02e      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002d8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d8e:	d824      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d94:	d018      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d9a:	d81e      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da4:	d007      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002da6:	e018      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da8:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002db4:	e019      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 f8ab 	bl	8003f18 <RCCEx_PLL2_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002dc6:	e010      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3324      	adds	r3, #36	; 0x24
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f001 f954 	bl	800407c <RCCEx_PLL3_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dd8:	e007      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8002dde:	e004      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002de0:	bf00      	nop
 8002de2:	e002      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002de4:	58024400 	.word	0x58024400
      break;
 8002de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10a      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002df0:	4b99      	ldr	r3, [pc, #612]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002dfe:	4996      	ldr	r1, [pc, #600]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	658b      	str	r3, [r1, #88]	; 0x58
 8002e04:	e001      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
 8002e08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d032      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1a:	2b30      	cmp	r3, #48	; 0x30
 8002e1c:	d01c      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002e1e:	2b30      	cmp	r3, #48	; 0x30
 8002e20:	d817      	bhi.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d00c      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d813      	bhi.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d10f      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e32:	4b89      	ldr	r3, [pc, #548]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	4a88      	ldr	r2, [pc, #544]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e3e:	e00e      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	2102      	movs	r1, #2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f001 f866 	bl	8003f18 <RCCEx_PLL2_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e50:	e005      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
      break;
 8002e56:	e002      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002e58:	bf00      	nop
 8002e5a:	e000      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e64:	4b7c      	ldr	r3, [pc, #496]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e70:	4979      	ldr	r1, [pc, #484]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e76:	e001      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d047      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e90:	d030      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e96:	d82a      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e9c:	d02c      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002e9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ea2:	d824      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea8:	d018      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eae:	d81e      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb8:	d007      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002eba:	e018      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ebc:	4b66      	ldr	r3, [pc, #408]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	4a65      	ldr	r2, [pc, #404]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ec8:	e017      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 f821 	bl	8003f18 <RCCEx_PLL2_Config>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002eda:	e00e      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3324      	adds	r3, #36	; 0x24
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 f8ca 	bl	800407c <RCCEx_PLL3_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002eec:	e005      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef2:	e002      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002ef4:	bf00      	nop
 8002ef6:	e000      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002f00:	4b55      	ldr	r3, [pc, #340]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f04:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	4952      	ldr	r1, [pc, #328]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	650b      	str	r3, [r1, #80]	; 0x50
 8002f12:	e001      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d049      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f2c:	d02e      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f32:	d828      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f38:	d02a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002f3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f3e:	d822      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f44:	d026      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002f46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f4a:	d81c      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f50:	d010      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f56:	d816      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01d      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f60:	d111      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 ffd5 	bl	8003f18 <RCCEx_PLL2_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f72:	e012      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3324      	adds	r3, #36	; 0x24
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 f87e 	bl	800407c <RCCEx_PLL3_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f84:	e009      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
      break;
 8002f8a:	e006      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f8c:	bf00      	nop
 8002f8e:	e004      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f90:	bf00      	nop
 8002f92:	e002      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f94:	bf00      	nop
 8002f96:	e000      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fac:	492a      	ldr	r1, [pc, #168]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	650b      	str	r3, [r1, #80]	; 0x50
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d04d      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fce:	d02e      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd4:	d828      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fda:	d02a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe0:	d822      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fe2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fe6:	d026      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002fe8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fec:	d81c      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff2:	d010      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff8:	d816      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01d      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003002:	d111      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	2101      	movs	r1, #1
 800300a:	4618      	mov	r0, r3
 800300c:	f000 ff84 	bl	8003f18 <RCCEx_PLL2_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003014:	e012      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3324      	adds	r3, #36	; 0x24
 800301a:	2101      	movs	r1, #1
 800301c:	4618      	mov	r0, r3
 800301e:	f001 f82d 	bl	800407c <RCCEx_PLL3_Config>
 8003022:	4603      	mov	r3, r0
 8003024:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003026:	e009      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	75fb      	strb	r3, [r7, #23]
      break;
 800302c:	e006      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800302e:	bf00      	nop
 8003030:	e004      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800303a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10c      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003050:	4901      	ldr	r1, [pc, #4]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003052:	4313      	orrs	r3, r2
 8003054:	658b      	str	r3, [r1, #88]	; 0x58
 8003056:	e003      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003058:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d02f      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003074:	d00e      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800307a:	d814      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d015      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003084:	d10f      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003086:	4baf      	ldr	r3, [pc, #700]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	4aae      	ldr	r2, [pc, #696]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800308c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003090:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003092:	e00c      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	2101      	movs	r1, #1
 800309a:	4618      	mov	r0, r3
 800309c:	f000 ff3c 	bl	8003f18 <RCCEx_PLL2_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80030a4:	e003      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
      break;
 80030aa:	e000      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80030ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030b4:	4ba3      	ldr	r3, [pc, #652]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c0:	49a0      	ldr	r1, [pc, #640]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	650b      	str	r3, [r1, #80]	; 0x50
 80030c6:	e001      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d032      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d81b      	bhi.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80030e0:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	0800311f 	.word	0x0800311f
 80030ec:	080030f9 	.word	0x080030f9
 80030f0:	08003107 	.word	0x08003107
 80030f4:	0800311f 	.word	0x0800311f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030f8:	4b92      	ldr	r3, [pc, #584]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	4a91      	ldr	r2, [pc, #580]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003102:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003104:	e00c      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3304      	adds	r3, #4
 800310a:	2102      	movs	r1, #2
 800310c:	4618      	mov	r0, r3
 800310e:	f000 ff03 	bl	8003f18 <RCCEx_PLL2_Config>
 8003112:	4603      	mov	r3, r0
 8003114:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003116:	e003      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	75fb      	strb	r3, [r7, #23]
      break;
 800311c:	e000      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800311e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003126:	4b87      	ldr	r3, [pc, #540]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312a:	f023 0203 	bic.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	4984      	ldr	r1, [pc, #528]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003134:	4313      	orrs	r3, r2
 8003136:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003138:	e001      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313a:	7dfb      	ldrb	r3, [r7, #23]
 800313c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8086 	beq.w	8003258 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800314c:	4b7e      	ldr	r3, [pc, #504]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a7d      	ldr	r2, [pc, #500]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003158:	f7fd fff6 	bl	8001148 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800315e:	e009      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003160:	f7fd fff2 	bl	8001148 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d902      	bls.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	75fb      	strb	r3, [r7, #23]
        break;
 8003172:	e005      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003174:	4b74      	ldr	r3, [pc, #464]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ef      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d166      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003186:	4b6f      	ldr	r3, [pc, #444]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003188:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003190:	4053      	eors	r3, r2
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	2b00      	cmp	r3, #0
 8003198:	d013      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800319a:	4b6a      	ldr	r3, [pc, #424]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031a4:	4b67      	ldr	r3, [pc, #412]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	4a66      	ldr	r2, [pc, #408]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031b0:	4b64      	ldr	r3, [pc, #400]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	4a63      	ldr	r2, [pc, #396]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80031bc:	4a61      	ldr	r2, [pc, #388]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031cc:	d115      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fd ffbb 	bl	8001148 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031d4:	e00b      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fd ffb7 	bl	8001148 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d902      	bls.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	75fb      	strb	r3, [r7, #23]
            break;
 80031ec:	e005      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031ee:	4b55      	ldr	r3, [pc, #340]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0ed      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d126      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800320e:	d10d      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003210:	4b4c      	ldr	r3, [pc, #304]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800321e:	0919      	lsrs	r1, r3, #4
 8003220:	4b4a      	ldr	r3, [pc, #296]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003222:	400b      	ands	r3, r1
 8003224:	4947      	ldr	r1, [pc, #284]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003226:	4313      	orrs	r3, r2
 8003228:	610b      	str	r3, [r1, #16]
 800322a:	e005      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800322c:	4b45      	ldr	r3, [pc, #276]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	4a44      	ldr	r2, [pc, #272]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003232:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003236:	6113      	str	r3, [r2, #16]
 8003238:	4b42      	ldr	r3, [pc, #264]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800323a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003246:	493f      	ldr	r1, [pc, #252]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003248:	4313      	orrs	r3, r2
 800324a:	670b      	str	r3, [r1, #112]	; 0x70
 800324c:	e004      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	75bb      	strb	r3, [r7, #22]
 8003252:	e001      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 8085 	beq.w	8003370 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800326a:	2b28      	cmp	r3, #40	; 0x28
 800326c:	d866      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	08003351 	.word	0x08003351
 8003278:	0800333d 	.word	0x0800333d
 800327c:	0800333d 	.word	0x0800333d
 8003280:	0800333d 	.word	0x0800333d
 8003284:	0800333d 	.word	0x0800333d
 8003288:	0800333d 	.word	0x0800333d
 800328c:	0800333d 	.word	0x0800333d
 8003290:	0800333d 	.word	0x0800333d
 8003294:	08003319 	.word	0x08003319
 8003298:	0800333d 	.word	0x0800333d
 800329c:	0800333d 	.word	0x0800333d
 80032a0:	0800333d 	.word	0x0800333d
 80032a4:	0800333d 	.word	0x0800333d
 80032a8:	0800333d 	.word	0x0800333d
 80032ac:	0800333d 	.word	0x0800333d
 80032b0:	0800333d 	.word	0x0800333d
 80032b4:	0800332b 	.word	0x0800332b
 80032b8:	0800333d 	.word	0x0800333d
 80032bc:	0800333d 	.word	0x0800333d
 80032c0:	0800333d 	.word	0x0800333d
 80032c4:	0800333d 	.word	0x0800333d
 80032c8:	0800333d 	.word	0x0800333d
 80032cc:	0800333d 	.word	0x0800333d
 80032d0:	0800333d 	.word	0x0800333d
 80032d4:	08003351 	.word	0x08003351
 80032d8:	0800333d 	.word	0x0800333d
 80032dc:	0800333d 	.word	0x0800333d
 80032e0:	0800333d 	.word	0x0800333d
 80032e4:	0800333d 	.word	0x0800333d
 80032e8:	0800333d 	.word	0x0800333d
 80032ec:	0800333d 	.word	0x0800333d
 80032f0:	0800333d 	.word	0x0800333d
 80032f4:	08003351 	.word	0x08003351
 80032f8:	0800333d 	.word	0x0800333d
 80032fc:	0800333d 	.word	0x0800333d
 8003300:	0800333d 	.word	0x0800333d
 8003304:	0800333d 	.word	0x0800333d
 8003308:	0800333d 	.word	0x0800333d
 800330c:	0800333d 	.word	0x0800333d
 8003310:	0800333d 	.word	0x0800333d
 8003314:	08003351 	.word	0x08003351
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	2101      	movs	r1, #1
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fdfa 	bl	8003f18 <RCCEx_PLL2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003328:	e013      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3324      	adds	r3, #36	; 0x24
 800332e:	2101      	movs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fea3 	bl	800407c <RCCEx_PLL3_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800333a:	e00a      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	75fb      	strb	r3, [r7, #23]
      break;
 8003340:	e007      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003342:	bf00      	nop
 8003344:	58024400 	.word	0x58024400
 8003348:	58024800 	.word	0x58024800
 800334c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003358:	4b96      	ldr	r3, [pc, #600]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003364:	4993      	ldr	r1, [pc, #588]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	654b      	str	r3, [r1, #84]	; 0x54
 800336a:	e001      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d038      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003380:	2b05      	cmp	r3, #5
 8003382:	d821      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003384:	a201      	add	r2, pc, #4	; (adr r2, 800338c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	080033cf 	.word	0x080033cf
 8003390:	080033a5 	.word	0x080033a5
 8003394:	080033b7 	.word	0x080033b7
 8003398:	080033cf 	.word	0x080033cf
 800339c:	080033cf 	.word	0x080033cf
 80033a0:	080033cf 	.word	0x080033cf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3304      	adds	r3, #4
 80033a8:	2101      	movs	r1, #1
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fdb4 	bl	8003f18 <RCCEx_PLL2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80033b4:	e00c      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3324      	adds	r3, #36	; 0x24
 80033ba:	2101      	movs	r1, #1
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fe5d 	bl	800407c <RCCEx_PLL3_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80033c6:	e003      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	75fb      	strb	r3, [r7, #23]
      break;
 80033cc:	e000      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80033ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80033d6:	4b77      	ldr	r3, [pc, #476]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e2:	4974      	ldr	r1, [pc, #464]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	654b      	str	r3, [r1, #84]	; 0x54
 80033e8:	e001      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d03a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	2b05      	cmp	r3, #5
 8003402:	d821      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003404:	a201      	add	r2, pc, #4	; (adr r2, 800340c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	0800344f 	.word	0x0800344f
 8003410:	08003425 	.word	0x08003425
 8003414:	08003437 	.word	0x08003437
 8003418:	0800344f 	.word	0x0800344f
 800341c:	0800344f 	.word	0x0800344f
 8003420:	0800344f 	.word	0x0800344f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3304      	adds	r3, #4
 8003428:	2101      	movs	r1, #1
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fd74 	bl	8003f18 <RCCEx_PLL2_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003434:	e00c      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3324      	adds	r3, #36	; 0x24
 800343a:	2101      	movs	r1, #1
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fe1d 	bl	800407c <RCCEx_PLL3_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003446:	e003      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	75fb      	strb	r3, [r7, #23]
      break;
 800344c:	e000      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800344e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003456:	4b57      	ldr	r3, [pc, #348]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	f023 0207 	bic.w	r2, r3, #7
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003464:	4953      	ldr	r1, [pc, #332]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003466:	4313      	orrs	r3, r2
 8003468:	658b      	str	r3, [r1, #88]	; 0x58
 800346a:	e001      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d04b      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003486:	d02e      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800348c:	d828      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003492:	d02a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003498:	d822      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800349a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800349e:	d026      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80034a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034a4:	d81c      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80034a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034aa:	d010      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80034ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b0:	d816      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d01d      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80034b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ba:	d111      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fd28 	bl	8003f18 <RCCEx_PLL2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034cc:	e012      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3324      	adds	r3, #36	; 0x24
 80034d2:	2102      	movs	r1, #2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fdd1 	bl	800407c <RCCEx_PLL3_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034de:	e009      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	75fb      	strb	r3, [r7, #23]
      break;
 80034e4:	e006      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034e6:	bf00      	nop
 80034e8:	e004      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10a      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034fa:	4b2e      	ldr	r3, [pc, #184]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003508:	492a      	ldr	r1, [pc, #168]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800350a:	4313      	orrs	r3, r2
 800350c:	654b      	str	r3, [r1, #84]	; 0x54
 800350e:	e001      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d04d      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003526:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800352a:	d02e      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800352c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003530:	d828      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003536:	d02a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353c:	d822      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800353e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003542:	d026      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003548:	d81c      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800354a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354e:	d010      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003554:	d816      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01d      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800355a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355e:	d111      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fcd6 	bl	8003f18 <RCCEx_PLL2_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003570:	e012      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3324      	adds	r3, #36	; 0x24
 8003576:	2102      	movs	r1, #2
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fd7f 	bl	800407c <RCCEx_PLL3_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003582:	e009      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	75fb      	strb	r3, [r7, #23]
      break;
 8003588:	e006      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800358a:	bf00      	nop
 800358c:	e004      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ac:	4901      	ldr	r1, [pc, #4]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	658b      	str	r3, [r1, #88]	; 0x58
 80035b2:	e003      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80035b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d04b      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035d2:	d02e      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80035d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035d8:	d828      	bhi.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035de:	d02a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80035e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e4:	d822      	bhi.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035ea:	d026      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80035ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035f0:	d81c      	bhi.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035f6:	d010      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80035f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035fc:	d816      	bhi.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01d      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003606:	d111      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fc82 	bl	8003f18 <RCCEx_PLL2_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003618:	e012      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3324      	adds	r3, #36	; 0x24
 800361e:	2102      	movs	r1, #2
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fd2b 	bl	800407c <RCCEx_PLL3_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800362a:	e009      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	75fb      	strb	r3, [r7, #23]
      break;
 8003630:	e006      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003632:	bf00      	nop
 8003634:	e004      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003636:	bf00      	nop
 8003638:	e002      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800363e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003646:	4b9d      	ldr	r3, [pc, #628]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003654:	4999      	ldr	r1, [pc, #612]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003656:	4313      	orrs	r3, r2
 8003658:	658b      	str	r3, [r1, #88]	; 0x58
 800365a:	e001      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003676:	d10a      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3324      	adds	r3, #36	; 0x24
 800367c:	2102      	movs	r1, #2
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fcfc 	bl	800407c <RCCEx_PLL3_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800368e:	4b8b      	ldr	r3, [pc, #556]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800369c:	4987      	ldr	r1, [pc, #540]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b8:	d10a      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3324      	adds	r3, #36	; 0x24
 80036be:	2102      	movs	r1, #2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fcdb 	bl	800407c <RCCEx_PLL3_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036d0:	4b7a      	ldr	r3, [pc, #488]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036de:	4977      	ldr	r1, [pc, #476]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d034      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036fa:	d01d      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80036fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003700:	d817      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370a:	d009      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800370c:	e011      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fbff 	bl	8003f18 <RCCEx_PLL2_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800371e:	e00c      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3324      	adds	r3, #36	; 0x24
 8003724:	2102      	movs	r1, #2
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fca8 	bl	800407c <RCCEx_PLL3_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003730:	e003      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	75fb      	strb	r3, [r7, #23]
      break;
 8003736:	e000      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003740:	4b5e      	ldr	r3, [pc, #376]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800374e:	495b      	ldr	r1, [pc, #364]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003750:	4313      	orrs	r3, r2
 8003752:	658b      	str	r3, [r1, #88]	; 0x58
 8003754:	e001      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d033      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003770:	d01c      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003772:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003776:	d816      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800377c:	d003      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800377e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003782:	d007      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003784:	e00f      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003786:	4b4d      	ldr	r3, [pc, #308]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	4a4c      	ldr	r2, [pc, #304]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800378c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003790:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003792:	e00c      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3324      	adds	r3, #36	; 0x24
 8003798:	2101      	movs	r1, #1
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fc6e 	bl	800407c <RCCEx_PLL3_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80037a4:	e003      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
      break;
 80037aa:	e000      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80037ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037b4:	4b41      	ldr	r3, [pc, #260]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c2:	493e      	ldr	r1, [pc, #248]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	654b      	str	r3, [r1, #84]	; 0x54
 80037c8:	e001      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d029      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80037e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e6:	d007      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80037e8:	e00f      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ea:	4b34      	ldr	r3, [pc, #208]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	4a33      	ldr	r2, [pc, #204]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80037f6:	e00b      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3304      	adds	r3, #4
 80037fc:	2102      	movs	r1, #2
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fb8a 	bl	8003f18 <RCCEx_PLL2_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003808:	e002      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
      break;
 800380e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003816:	4b29      	ldr	r3, [pc, #164]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	4926      	ldr	r1, [pc, #152]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003824:	4313      	orrs	r3, r2
 8003826:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003828:	e001      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3324      	adds	r3, #36	; 0x24
 800383e:	2102      	movs	r1, #2
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fc1b 	bl	800407c <RCCEx_PLL3_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d033      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003864:	d017      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800386a:	d811      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800386c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003870:	d013      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003876:	d80b      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d010      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800387c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003880:	d106      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	4a0d      	ldr	r2, [pc, #52]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800388e:	e007      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	75fb      	strb	r3, [r7, #23]
      break;
 8003894:	e004      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800389e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10c      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038b2:	4902      	ldr	r1, [pc, #8]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	654b      	str	r3, [r1, #84]	; 0x54
 80038b8:	e004      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80038ba:	bf00      	nop
 80038bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038d0:	4b31      	ldr	r3, [pc, #196]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	492e      	ldr	r1, [pc, #184]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038ee:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038fc:	4926      	ldr	r1, [pc, #152]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800390e:	4b22      	ldr	r3, [pc, #136]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003912:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800391a:	491f      	ldr	r1, [pc, #124]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800391c:	4313      	orrs	r3, r2
 800391e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00d      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800392c:	4b1a      	ldr	r3, [pc, #104]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	4a19      	ldr	r2, [pc, #100]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003932:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003936:	6113      	str	r3, [r2, #16]
 8003938:	4b17      	ldr	r3, [pc, #92]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003942:	4915      	ldr	r1, [pc, #84]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003944:	4313      	orrs	r3, r2
 8003946:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	da08      	bge.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003954:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395c:	490e      	ldr	r1, [pc, #56]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800395e:	4313      	orrs	r3, r2
 8003960:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	4906      	ldr	r1, [pc, #24]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800397e:	4313      	orrs	r3, r2
 8003980:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003982:	7dbb      	ldrb	r3, [r7, #22]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	58024400 	.word	0x58024400

0800399c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80039a0:	f7ff f85a 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4904      	ldr	r1, [pc, #16]	; (80039c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	58024400 	.word	0x58024400
 80039c4:	08005944 	.word	0x08005944

080039c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039d0:	4ba1      	ldr	r3, [pc, #644]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80039da:	4b9f      	ldr	r3, [pc, #636]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	0b1b      	lsrs	r3, r3, #12
 80039e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039e6:	4b9c      	ldr	r3, [pc, #624]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80039f2:	4b99      	ldr	r3, [pc, #612]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	08db      	lsrs	r3, r3, #3
 80039f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	fb02 f303 	mul.w	r3, r2, r3
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8111 	beq.w	8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	f000 8083 	beq.w	8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	f200 80a1 	bhi.w	8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d056      	beq.n	8003ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a32:	e099      	b.n	8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a34:	4b88      	ldr	r3, [pc, #544]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d02d      	beq.n	8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a40:	4b85      	ldr	r3, [pc, #532]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	08db      	lsrs	r3, r3, #3
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	4a84      	ldr	r2, [pc, #528]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a6a:	4b7b      	ldr	r3, [pc, #492]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003a9a:	e087      	b.n	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aae:	4b6a      	ldr	r3, [pc, #424]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ac2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ada:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ade:	e065      	b.n	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af2:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b22:	e043      	b.n	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b36:	4b48      	ldr	r3, [pc, #288]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b66:	e021      	b.n	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003baa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003bac:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	0a5b      	lsrs	r3, r3, #9
 8003bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd2:	ee17 2a90 	vmov	r2, s15
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003bda:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	0c1b      	lsrs	r3, r3, #16
 8003be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c00:	ee17 2a90 	vmov	r2, s15
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003c08:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	0e1b      	lsrs	r3, r3, #24
 8003c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c2e:	ee17 2a90 	vmov	r2, s15
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c36:	e008      	b.n	8003c4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
}
 8003c4a:	bf00      	nop
 8003c4c:	3724      	adds	r7, #36	; 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	03d09000 	.word	0x03d09000
 8003c60:	46000000 	.word	0x46000000
 8003c64:	4c742400 	.word	0x4c742400
 8003c68:	4a742400 	.word	0x4a742400
 8003c6c:	4af42400 	.word	0x4af42400

08003c70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b089      	sub	sp, #36	; 0x24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c78:	4ba1      	ldr	r3, [pc, #644]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003c82:	4b9f      	ldr	r3, [pc, #636]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	0d1b      	lsrs	r3, r3, #20
 8003c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c8e:	4b9c      	ldr	r3, [pc, #624]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	0a1b      	lsrs	r3, r3, #8
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003c9a:	4b99      	ldr	r3, [pc, #612]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	08db      	lsrs	r3, r3, #3
 8003ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8111 	beq.w	8003ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	f000 8083 	beq.w	8003dcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	f200 80a1 	bhi.w	8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d056      	beq.n	8003d88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003cda:	e099      	b.n	8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cdc:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02d      	beq.n	8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ce8:	4b85      	ldr	r3, [pc, #532]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	08db      	lsrs	r3, r3, #3
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	4a84      	ldr	r2, [pc, #528]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	ee07 3a90 	vmov	s15, r3
 8003d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d12:	4b7b      	ldr	r3, [pc, #492]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003d42:	e087      	b.n	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003f0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d56:	4b6a      	ldr	r3, [pc, #424]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d86:	e065      	b.n	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9a:	4b59      	ldr	r3, [pc, #356]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dca:	e043      	b.n	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dde:	4b48      	ldr	r3, [pc, #288]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003df2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e0e:	e021      	b.n	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e22:	4b37      	ldr	r3, [pc, #220]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	0a5b      	lsrs	r3, r3, #9
 8003e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e7a:	ee17 2a90 	vmov	r2, s15
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003e82:	4b1f      	ldr	r3, [pc, #124]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ea8:	ee17 2a90 	vmov	r2, s15
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	0e1b      	lsrs	r3, r3, #24
 8003eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ed6:	ee17 2a90 	vmov	r2, s15
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ede:	e008      	b.n	8003ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
}
 8003ef2:	bf00      	nop
 8003ef4:	3724      	adds	r7, #36	; 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	58024400 	.word	0x58024400
 8003f04:	03d09000 	.word	0x03d09000
 8003f08:	46000000 	.word	0x46000000
 8003f0c:	4c742400 	.word	0x4c742400
 8003f10:	4a742400 	.word	0x4a742400
 8003f14:	4af42400 	.word	0x4af42400

08003f18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f26:	4b53      	ldr	r3, [pc, #332]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d101      	bne.n	8003f36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e099      	b.n	800406a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f36:	4b4f      	ldr	r3, [pc, #316]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a4e      	ldr	r2, [pc, #312]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f42:	f7fd f901 	bl	8001148 <HAL_GetTick>
 8003f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003f4a:	f7fd f8fd 	bl	8001148 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e086      	b.n	800406a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f5c:	4b45      	ldr	r3, [pc, #276]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f68:	4b42      	ldr	r3, [pc, #264]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	031b      	lsls	r3, r3, #12
 8003f76:	493f      	ldr	r1, [pc, #252]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	025b      	lsls	r3, r3, #9
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fac:	4931      	ldr	r1, [pc, #196]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003fb2:	4b30      	ldr	r3, [pc, #192]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	492d      	ldr	r1, [pc, #180]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	f023 0220 	bic.w	r2, r3, #32
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	4928      	ldr	r1, [pc, #160]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fd6:	4b27      	ldr	r3, [pc, #156]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	4a26      	ldr	r2, [pc, #152]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fdc:	f023 0310 	bic.w	r3, r3, #16
 8003fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe6:	4b24      	ldr	r3, [pc, #144]	; (8004078 <RCCEx_PLL2_Config+0x160>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	69d2      	ldr	r2, [r2, #28]
 8003fee:	00d2      	lsls	r2, r2, #3
 8003ff0:	4920      	ldr	r1, [pc, #128]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ff6:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003ffc:	f043 0310 	orr.w	r3, r3, #16
 8004000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 800400e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004012:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004014:	e00f      	b.n	8004036 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d106      	bne.n	800402a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800401c:	4b15      	ldr	r3, [pc, #84]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4a14      	ldr	r2, [pc, #80]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8004022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004026:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004028:	e005      	b.n	8004036 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	4a11      	ldr	r2, [pc, #68]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8004030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004034:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 800403c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004042:	f7fd f881 	bl	8001148 <HAL_GetTick>
 8004046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004048:	e008      	b.n	800405c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800404a:	f7fd f87d 	bl	8001148 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e006      	b.n	800406a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	58024400 	.word	0x58024400
 8004078:	ffff0007 	.word	0xffff0007

0800407c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800408a:	4b53      	ldr	r3, [pc, #332]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b03      	cmp	r3, #3
 8004094:	d101      	bne.n	800409a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e099      	b.n	80041ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800409a:	4b4f      	ldr	r3, [pc, #316]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a4e      	ldr	r2, [pc, #312]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a6:	f7fd f84f 	bl	8001148 <HAL_GetTick>
 80040aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040ac:	e008      	b.n	80040c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80040ae:	f7fd f84b 	bl	8001148 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e086      	b.n	80041ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040c0:	4b45      	ldr	r3, [pc, #276]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f0      	bne.n	80040ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040cc:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	051b      	lsls	r3, r3, #20
 80040da:	493f      	ldr	r1, [pc, #252]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	628b      	str	r3, [r1, #40]	; 0x28
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	025b      	lsls	r3, r3, #9
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	3b01      	subs	r3, #1
 800410a:	061b      	lsls	r3, r3, #24
 800410c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004110:	4931      	ldr	r1, [pc, #196]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004112:	4313      	orrs	r3, r2
 8004114:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004116:	4b30      	ldr	r3, [pc, #192]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	492d      	ldr	r1, [pc, #180]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004128:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	4928      	ldr	r1, [pc, #160]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004144:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004146:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <RCCEx_PLL3_Config+0x160>)
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	69d2      	ldr	r2, [r2, #28]
 8004152:	00d2      	lsls	r2, r2, #3
 8004154:	4920      	ldr	r1, [pc, #128]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004156:	4313      	orrs	r3, r2
 8004158:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800415a:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	4a1e      	ldr	r2, [pc, #120]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004164:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800416c:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	4a19      	ldr	r2, [pc, #100]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004172:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004176:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004178:	e00f      	b.n	800419a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d106      	bne.n	800418e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004180:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4a14      	ldr	r2, [pc, #80]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004186:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800418a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800418c:	e005      	b.n	800419a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800418e:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	4a11      	ldr	r2, [pc, #68]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004198:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800419a:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a0e      	ldr	r2, [pc, #56]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80041a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a6:	f7fc ffcf 	bl	8001148 <HAL_GetTick>
 80041aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041ac:	e008      	b.n	80041c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80041ae:	f7fc ffcb 	bl	8001148 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e006      	b.n	80041ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	58024400 	.word	0x58024400
 80041dc:	ffff0007 	.word	0xffff0007

080041e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e042      	b.n	8004278 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fc fdcf 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2224      	movs	r2, #36	; 0x24
 800420e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f82c 	bl	8004280 <UART_SetConfig>
 8004228:	4603      	mov	r3, r0
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e022      	b.n	8004278 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fd88 	bl	8004d50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800424e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800425e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fe0f 	bl	8004e94 <UART_CheckIdleState>
 8004276:	4603      	mov	r3, r0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004284:	b092      	sub	sp, #72	; 0x48
 8004286:	af00      	add	r7, sp, #0
 8004288:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	431a      	orrs	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	431a      	orrs	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4bbe      	ldr	r3, [pc, #760]	; (80045a8 <UART_SetConfig+0x328>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4ab3      	ldr	r2, [pc, #716]	; (80045ac <UART_SetConfig+0x32c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d004      	beq.n	80042ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042e8:	4313      	orrs	r3, r2
 80042ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	4baf      	ldr	r3, [pc, #700]	; (80045b0 <UART_SetConfig+0x330>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	f023 010f 	bic.w	r1, r3, #15
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4aa6      	ldr	r2, [pc, #664]	; (80045b4 <UART_SetConfig+0x334>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d177      	bne.n	8004410 <UART_SetConfig+0x190>
 8004320:	4ba5      	ldr	r3, [pc, #660]	; (80045b8 <UART_SetConfig+0x338>)
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004328:	2b28      	cmp	r3, #40	; 0x28
 800432a:	d86d      	bhi.n	8004408 <UART_SetConfig+0x188>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <UART_SetConfig+0xb4>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	080043d9 	.word	0x080043d9
 8004338:	08004409 	.word	0x08004409
 800433c:	08004409 	.word	0x08004409
 8004340:	08004409 	.word	0x08004409
 8004344:	08004409 	.word	0x08004409
 8004348:	08004409 	.word	0x08004409
 800434c:	08004409 	.word	0x08004409
 8004350:	08004409 	.word	0x08004409
 8004354:	080043e1 	.word	0x080043e1
 8004358:	08004409 	.word	0x08004409
 800435c:	08004409 	.word	0x08004409
 8004360:	08004409 	.word	0x08004409
 8004364:	08004409 	.word	0x08004409
 8004368:	08004409 	.word	0x08004409
 800436c:	08004409 	.word	0x08004409
 8004370:	08004409 	.word	0x08004409
 8004374:	080043e9 	.word	0x080043e9
 8004378:	08004409 	.word	0x08004409
 800437c:	08004409 	.word	0x08004409
 8004380:	08004409 	.word	0x08004409
 8004384:	08004409 	.word	0x08004409
 8004388:	08004409 	.word	0x08004409
 800438c:	08004409 	.word	0x08004409
 8004390:	08004409 	.word	0x08004409
 8004394:	080043f1 	.word	0x080043f1
 8004398:	08004409 	.word	0x08004409
 800439c:	08004409 	.word	0x08004409
 80043a0:	08004409 	.word	0x08004409
 80043a4:	08004409 	.word	0x08004409
 80043a8:	08004409 	.word	0x08004409
 80043ac:	08004409 	.word	0x08004409
 80043b0:	08004409 	.word	0x08004409
 80043b4:	080043f9 	.word	0x080043f9
 80043b8:	08004409 	.word	0x08004409
 80043bc:	08004409 	.word	0x08004409
 80043c0:	08004409 	.word	0x08004409
 80043c4:	08004409 	.word	0x08004409
 80043c8:	08004409 	.word	0x08004409
 80043cc:	08004409 	.word	0x08004409
 80043d0:	08004409 	.word	0x08004409
 80043d4:	08004401 	.word	0x08004401
 80043d8:	2301      	movs	r3, #1
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043de:	e222      	b.n	8004826 <UART_SetConfig+0x5a6>
 80043e0:	2304      	movs	r3, #4
 80043e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e6:	e21e      	b.n	8004826 <UART_SetConfig+0x5a6>
 80043e8:	2308      	movs	r3, #8
 80043ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ee:	e21a      	b.n	8004826 <UART_SetConfig+0x5a6>
 80043f0:	2310      	movs	r3, #16
 80043f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043f6:	e216      	b.n	8004826 <UART_SetConfig+0x5a6>
 80043f8:	2320      	movs	r3, #32
 80043fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043fe:	e212      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004400:	2340      	movs	r3, #64	; 0x40
 8004402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004406:	e20e      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800440e:	e20a      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a69      	ldr	r2, [pc, #420]	; (80045bc <UART_SetConfig+0x33c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d130      	bne.n	800447c <UART_SetConfig+0x1fc>
 800441a:	4b67      	ldr	r3, [pc, #412]	; (80045b8 <UART_SetConfig+0x338>)
 800441c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	2b05      	cmp	r3, #5
 8004424:	d826      	bhi.n	8004474 <UART_SetConfig+0x1f4>
 8004426:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x1ac>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	08004445 	.word	0x08004445
 8004430:	0800444d 	.word	0x0800444d
 8004434:	08004455 	.word	0x08004455
 8004438:	0800445d 	.word	0x0800445d
 800443c:	08004465 	.word	0x08004465
 8004440:	0800446d 	.word	0x0800446d
 8004444:	2300      	movs	r3, #0
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444a:	e1ec      	b.n	8004826 <UART_SetConfig+0x5a6>
 800444c:	2304      	movs	r3, #4
 800444e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004452:	e1e8      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004454:	2308      	movs	r3, #8
 8004456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800445a:	e1e4      	b.n	8004826 <UART_SetConfig+0x5a6>
 800445c:	2310      	movs	r3, #16
 800445e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004462:	e1e0      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004464:	2320      	movs	r3, #32
 8004466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800446a:	e1dc      	b.n	8004826 <UART_SetConfig+0x5a6>
 800446c:	2340      	movs	r3, #64	; 0x40
 800446e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004472:	e1d8      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800447a:	e1d4      	b.n	8004826 <UART_SetConfig+0x5a6>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a4f      	ldr	r2, [pc, #316]	; (80045c0 <UART_SetConfig+0x340>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d130      	bne.n	80044e8 <UART_SetConfig+0x268>
 8004486:	4b4c      	ldr	r3, [pc, #304]	; (80045b8 <UART_SetConfig+0x338>)
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	2b05      	cmp	r3, #5
 8004490:	d826      	bhi.n	80044e0 <UART_SetConfig+0x260>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <UART_SetConfig+0x218>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044b1 	.word	0x080044b1
 800449c:	080044b9 	.word	0x080044b9
 80044a0:	080044c1 	.word	0x080044c1
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044d1 	.word	0x080044d1
 80044ac:	080044d9 	.word	0x080044d9
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b6:	e1b6      	b.n	8004826 <UART_SetConfig+0x5a6>
 80044b8:	2304      	movs	r3, #4
 80044ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044be:	e1b2      	b.n	8004826 <UART_SetConfig+0x5a6>
 80044c0:	2308      	movs	r3, #8
 80044c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044c6:	e1ae      	b.n	8004826 <UART_SetConfig+0x5a6>
 80044c8:	2310      	movs	r3, #16
 80044ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ce:	e1aa      	b.n	8004826 <UART_SetConfig+0x5a6>
 80044d0:	2320      	movs	r3, #32
 80044d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044d6:	e1a6      	b.n	8004826 <UART_SetConfig+0x5a6>
 80044d8:	2340      	movs	r3, #64	; 0x40
 80044da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044de:	e1a2      	b.n	8004826 <UART_SetConfig+0x5a6>
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e6:	e19e      	b.n	8004826 <UART_SetConfig+0x5a6>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a35      	ldr	r2, [pc, #212]	; (80045c4 <UART_SetConfig+0x344>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d130      	bne.n	8004554 <UART_SetConfig+0x2d4>
 80044f2:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <UART_SetConfig+0x338>)
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d826      	bhi.n	800454c <UART_SetConfig+0x2cc>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <UART_SetConfig+0x284>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	0800451d 	.word	0x0800451d
 8004508:	08004525 	.word	0x08004525
 800450c:	0800452d 	.word	0x0800452d
 8004510:	08004535 	.word	0x08004535
 8004514:	0800453d 	.word	0x0800453d
 8004518:	08004545 	.word	0x08004545
 800451c:	2300      	movs	r3, #0
 800451e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004522:	e180      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004524:	2304      	movs	r3, #4
 8004526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800452a:	e17c      	b.n	8004826 <UART_SetConfig+0x5a6>
 800452c:	2308      	movs	r3, #8
 800452e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004532:	e178      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004534:	2310      	movs	r3, #16
 8004536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800453a:	e174      	b.n	8004826 <UART_SetConfig+0x5a6>
 800453c:	2320      	movs	r3, #32
 800453e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004542:	e170      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004544:	2340      	movs	r3, #64	; 0x40
 8004546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800454a:	e16c      	b.n	8004826 <UART_SetConfig+0x5a6>
 800454c:	2380      	movs	r3, #128	; 0x80
 800454e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004552:	e168      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1b      	ldr	r2, [pc, #108]	; (80045c8 <UART_SetConfig+0x348>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d142      	bne.n	80045e4 <UART_SetConfig+0x364>
 800455e:	4b16      	ldr	r3, [pc, #88]	; (80045b8 <UART_SetConfig+0x338>)
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	2b05      	cmp	r3, #5
 8004568:	d838      	bhi.n	80045dc <UART_SetConfig+0x35c>
 800456a:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <UART_SetConfig+0x2f0>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004589 	.word	0x08004589
 8004574:	08004591 	.word	0x08004591
 8004578:	08004599 	.word	0x08004599
 800457c:	080045a1 	.word	0x080045a1
 8004580:	080045cd 	.word	0x080045cd
 8004584:	080045d5 	.word	0x080045d5
 8004588:	2300      	movs	r3, #0
 800458a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800458e:	e14a      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004590:	2304      	movs	r3, #4
 8004592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004596:	e146      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004598:	2308      	movs	r3, #8
 800459a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800459e:	e142      	b.n	8004826 <UART_SetConfig+0x5a6>
 80045a0:	2310      	movs	r3, #16
 80045a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045a6:	e13e      	b.n	8004826 <UART_SetConfig+0x5a6>
 80045a8:	cfff69f3 	.word	0xcfff69f3
 80045ac:	58000c00 	.word	0x58000c00
 80045b0:	11fff4ff 	.word	0x11fff4ff
 80045b4:	40011000 	.word	0x40011000
 80045b8:	58024400 	.word	0x58024400
 80045bc:	40004400 	.word	0x40004400
 80045c0:	40004800 	.word	0x40004800
 80045c4:	40004c00 	.word	0x40004c00
 80045c8:	40005000 	.word	0x40005000
 80045cc:	2320      	movs	r3, #32
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d2:	e128      	b.n	8004826 <UART_SetConfig+0x5a6>
 80045d4:	2340      	movs	r3, #64	; 0x40
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045da:	e124      	b.n	8004826 <UART_SetConfig+0x5a6>
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045e2:	e120      	b.n	8004826 <UART_SetConfig+0x5a6>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4acb      	ldr	r2, [pc, #812]	; (8004918 <UART_SetConfig+0x698>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d176      	bne.n	80046dc <UART_SetConfig+0x45c>
 80045ee:	4bcb      	ldr	r3, [pc, #812]	; (800491c <UART_SetConfig+0x69c>)
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045f6:	2b28      	cmp	r3, #40	; 0x28
 80045f8:	d86c      	bhi.n	80046d4 <UART_SetConfig+0x454>
 80045fa:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <UART_SetConfig+0x380>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	080046a5 	.word	0x080046a5
 8004604:	080046d5 	.word	0x080046d5
 8004608:	080046d5 	.word	0x080046d5
 800460c:	080046d5 	.word	0x080046d5
 8004610:	080046d5 	.word	0x080046d5
 8004614:	080046d5 	.word	0x080046d5
 8004618:	080046d5 	.word	0x080046d5
 800461c:	080046d5 	.word	0x080046d5
 8004620:	080046ad 	.word	0x080046ad
 8004624:	080046d5 	.word	0x080046d5
 8004628:	080046d5 	.word	0x080046d5
 800462c:	080046d5 	.word	0x080046d5
 8004630:	080046d5 	.word	0x080046d5
 8004634:	080046d5 	.word	0x080046d5
 8004638:	080046d5 	.word	0x080046d5
 800463c:	080046d5 	.word	0x080046d5
 8004640:	080046b5 	.word	0x080046b5
 8004644:	080046d5 	.word	0x080046d5
 8004648:	080046d5 	.word	0x080046d5
 800464c:	080046d5 	.word	0x080046d5
 8004650:	080046d5 	.word	0x080046d5
 8004654:	080046d5 	.word	0x080046d5
 8004658:	080046d5 	.word	0x080046d5
 800465c:	080046d5 	.word	0x080046d5
 8004660:	080046bd 	.word	0x080046bd
 8004664:	080046d5 	.word	0x080046d5
 8004668:	080046d5 	.word	0x080046d5
 800466c:	080046d5 	.word	0x080046d5
 8004670:	080046d5 	.word	0x080046d5
 8004674:	080046d5 	.word	0x080046d5
 8004678:	080046d5 	.word	0x080046d5
 800467c:	080046d5 	.word	0x080046d5
 8004680:	080046c5 	.word	0x080046c5
 8004684:	080046d5 	.word	0x080046d5
 8004688:	080046d5 	.word	0x080046d5
 800468c:	080046d5 	.word	0x080046d5
 8004690:	080046d5 	.word	0x080046d5
 8004694:	080046d5 	.word	0x080046d5
 8004698:	080046d5 	.word	0x080046d5
 800469c:	080046d5 	.word	0x080046d5
 80046a0:	080046cd 	.word	0x080046cd
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046aa:	e0bc      	b.n	8004826 <UART_SetConfig+0x5a6>
 80046ac:	2304      	movs	r3, #4
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b2:	e0b8      	b.n	8004826 <UART_SetConfig+0x5a6>
 80046b4:	2308      	movs	r3, #8
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ba:	e0b4      	b.n	8004826 <UART_SetConfig+0x5a6>
 80046bc:	2310      	movs	r3, #16
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c2:	e0b0      	b.n	8004826 <UART_SetConfig+0x5a6>
 80046c4:	2320      	movs	r3, #32
 80046c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ca:	e0ac      	b.n	8004826 <UART_SetConfig+0x5a6>
 80046cc:	2340      	movs	r3, #64	; 0x40
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046d2:	e0a8      	b.n	8004826 <UART_SetConfig+0x5a6>
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046da:	e0a4      	b.n	8004826 <UART_SetConfig+0x5a6>
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a8f      	ldr	r2, [pc, #572]	; (8004920 <UART_SetConfig+0x6a0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d130      	bne.n	8004748 <UART_SetConfig+0x4c8>
 80046e6:	4b8d      	ldr	r3, [pc, #564]	; (800491c <UART_SetConfig+0x69c>)
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d826      	bhi.n	8004740 <UART_SetConfig+0x4c0>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <UART_SetConfig+0x478>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	08004711 	.word	0x08004711
 80046fc:	08004719 	.word	0x08004719
 8004700:	08004721 	.word	0x08004721
 8004704:	08004729 	.word	0x08004729
 8004708:	08004731 	.word	0x08004731
 800470c:	08004739 	.word	0x08004739
 8004710:	2300      	movs	r3, #0
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004716:	e086      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004718:	2304      	movs	r3, #4
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471e:	e082      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004720:	2308      	movs	r3, #8
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004726:	e07e      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004728:	2310      	movs	r3, #16
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472e:	e07a      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004730:	2320      	movs	r3, #32
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004736:	e076      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004738:	2340      	movs	r3, #64	; 0x40
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800473e:	e072      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004746:	e06e      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a75      	ldr	r2, [pc, #468]	; (8004924 <UART_SetConfig+0x6a4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d130      	bne.n	80047b4 <UART_SetConfig+0x534>
 8004752:	4b72      	ldr	r3, [pc, #456]	; (800491c <UART_SetConfig+0x69c>)
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	2b05      	cmp	r3, #5
 800475c:	d826      	bhi.n	80047ac <UART_SetConfig+0x52c>
 800475e:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <UART_SetConfig+0x4e4>)
 8004760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004764:	0800477d 	.word	0x0800477d
 8004768:	08004785 	.word	0x08004785
 800476c:	0800478d 	.word	0x0800478d
 8004770:	08004795 	.word	0x08004795
 8004774:	0800479d 	.word	0x0800479d
 8004778:	080047a5 	.word	0x080047a5
 800477c:	2300      	movs	r3, #0
 800477e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004782:	e050      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004784:	2304      	movs	r3, #4
 8004786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800478a:	e04c      	b.n	8004826 <UART_SetConfig+0x5a6>
 800478c:	2308      	movs	r3, #8
 800478e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004792:	e048      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004794:	2310      	movs	r3, #16
 8004796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800479a:	e044      	b.n	8004826 <UART_SetConfig+0x5a6>
 800479c:	2320      	movs	r3, #32
 800479e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047a2:	e040      	b.n	8004826 <UART_SetConfig+0x5a6>
 80047a4:	2340      	movs	r3, #64	; 0x40
 80047a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047aa:	e03c      	b.n	8004826 <UART_SetConfig+0x5a6>
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b2:	e038      	b.n	8004826 <UART_SetConfig+0x5a6>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5b      	ldr	r2, [pc, #364]	; (8004928 <UART_SetConfig+0x6a8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d130      	bne.n	8004820 <UART_SetConfig+0x5a0>
 80047be:	4b57      	ldr	r3, [pc, #348]	; (800491c <UART_SetConfig+0x69c>)
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	d826      	bhi.n	8004818 <UART_SetConfig+0x598>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x550>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047e9 	.word	0x080047e9
 80047d4:	080047f1 	.word	0x080047f1
 80047d8:	080047f9 	.word	0x080047f9
 80047dc:	08004801 	.word	0x08004801
 80047e0:	08004809 	.word	0x08004809
 80047e4:	08004811 	.word	0x08004811
 80047e8:	2302      	movs	r3, #2
 80047ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ee:	e01a      	b.n	8004826 <UART_SetConfig+0x5a6>
 80047f0:	2304      	movs	r3, #4
 80047f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047f6:	e016      	b.n	8004826 <UART_SetConfig+0x5a6>
 80047f8:	2308      	movs	r3, #8
 80047fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047fe:	e012      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004800:	2310      	movs	r3, #16
 8004802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004806:	e00e      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004808:	2320      	movs	r3, #32
 800480a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800480e:	e00a      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004810:	2340      	movs	r3, #64	; 0x40
 8004812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004816:	e006      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004818:	2380      	movs	r3, #128	; 0x80
 800481a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800481e:	e002      	b.n	8004826 <UART_SetConfig+0x5a6>
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3f      	ldr	r2, [pc, #252]	; (8004928 <UART_SetConfig+0x6a8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	f040 80f8 	bne.w	8004a22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004832:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004836:	2b20      	cmp	r3, #32
 8004838:	dc46      	bgt.n	80048c8 <UART_SetConfig+0x648>
 800483a:	2b02      	cmp	r3, #2
 800483c:	f2c0 8082 	blt.w	8004944 <UART_SetConfig+0x6c4>
 8004840:	3b02      	subs	r3, #2
 8004842:	2b1e      	cmp	r3, #30
 8004844:	d87e      	bhi.n	8004944 <UART_SetConfig+0x6c4>
 8004846:	a201      	add	r2, pc, #4	; (adr r2, 800484c <UART_SetConfig+0x5cc>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	080048cf 	.word	0x080048cf
 8004850:	08004945 	.word	0x08004945
 8004854:	080048d7 	.word	0x080048d7
 8004858:	08004945 	.word	0x08004945
 800485c:	08004945 	.word	0x08004945
 8004860:	08004945 	.word	0x08004945
 8004864:	080048e7 	.word	0x080048e7
 8004868:	08004945 	.word	0x08004945
 800486c:	08004945 	.word	0x08004945
 8004870:	08004945 	.word	0x08004945
 8004874:	08004945 	.word	0x08004945
 8004878:	08004945 	.word	0x08004945
 800487c:	08004945 	.word	0x08004945
 8004880:	08004945 	.word	0x08004945
 8004884:	080048f7 	.word	0x080048f7
 8004888:	08004945 	.word	0x08004945
 800488c:	08004945 	.word	0x08004945
 8004890:	08004945 	.word	0x08004945
 8004894:	08004945 	.word	0x08004945
 8004898:	08004945 	.word	0x08004945
 800489c:	08004945 	.word	0x08004945
 80048a0:	08004945 	.word	0x08004945
 80048a4:	08004945 	.word	0x08004945
 80048a8:	08004945 	.word	0x08004945
 80048ac:	08004945 	.word	0x08004945
 80048b0:	08004945 	.word	0x08004945
 80048b4:	08004945 	.word	0x08004945
 80048b8:	08004945 	.word	0x08004945
 80048bc:	08004945 	.word	0x08004945
 80048c0:	08004945 	.word	0x08004945
 80048c4:	08004937 	.word	0x08004937
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d037      	beq.n	800493c <UART_SetConfig+0x6bc>
 80048cc:	e03a      	b.n	8004944 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80048ce:	f7ff f865 	bl	800399c <HAL_RCCEx_GetD3PCLK1Freq>
 80048d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80048d4:	e03c      	b.n	8004950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff f874 	bl	80039c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048e4:	e034      	b.n	8004950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048e6:	f107 0318 	add.w	r3, r7, #24
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff f9c0 	bl	8003c70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048f4:	e02c      	b.n	8004950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <UART_SetConfig+0x69c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d016      	beq.n	8004930 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004902:	4b06      	ldr	r3, [pc, #24]	; (800491c <UART_SetConfig+0x69c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	08db      	lsrs	r3, r3, #3
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	4a07      	ldr	r2, [pc, #28]	; (800492c <UART_SetConfig+0x6ac>)
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004914:	e01c      	b.n	8004950 <UART_SetConfig+0x6d0>
 8004916:	bf00      	nop
 8004918:	40011400 	.word	0x40011400
 800491c:	58024400 	.word	0x58024400
 8004920:	40007800 	.word	0x40007800
 8004924:	40007c00 	.word	0x40007c00
 8004928:	58000c00 	.word	0x58000c00
 800492c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004930:	4b9d      	ldr	r3, [pc, #628]	; (8004ba8 <UART_SetConfig+0x928>)
 8004932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004934:	e00c      	b.n	8004950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004936:	4b9d      	ldr	r3, [pc, #628]	; (8004bac <UART_SetConfig+0x92c>)
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800493a:	e009      	b.n	8004950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004942:	e005      	b.n	8004950 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800494e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 81de 	beq.w	8004d14 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	4a94      	ldr	r2, [pc, #592]	; (8004bb0 <UART_SetConfig+0x930>)
 800495e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004962:	461a      	mov	r2, r3
 8004964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004966:	fbb3 f3f2 	udiv	r3, r3, r2
 800496a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4413      	add	r3, r2
 8004976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004978:	429a      	cmp	r2, r3
 800497a:	d305      	bcc.n	8004988 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004984:	429a      	cmp	r2, r3
 8004986:	d903      	bls.n	8004990 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800498e:	e1c1      	b.n	8004d14 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004992:	2200      	movs	r2, #0
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	60fa      	str	r2, [r7, #12]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	4a84      	ldr	r2, [pc, #528]	; (8004bb0 <UART_SetConfig+0x930>)
 800499e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2200      	movs	r2, #0
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049b2:	f7fb fc91 	bl	80002d8 <__aeabi_uldivmod>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	020b      	lsls	r3, r1, #8
 80049c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049cc:	0202      	lsls	r2, r0, #8
 80049ce:	6979      	ldr	r1, [r7, #20]
 80049d0:	6849      	ldr	r1, [r1, #4]
 80049d2:	0849      	lsrs	r1, r1, #1
 80049d4:	2000      	movs	r0, #0
 80049d6:	460c      	mov	r4, r1
 80049d8:	4605      	mov	r5, r0
 80049da:	eb12 0804 	adds.w	r8, r2, r4
 80049de:	eb43 0905 	adc.w	r9, r3, r5
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	469a      	mov	sl, r3
 80049ea:	4693      	mov	fp, r2
 80049ec:	4652      	mov	r2, sl
 80049ee:	465b      	mov	r3, fp
 80049f0:	4640      	mov	r0, r8
 80049f2:	4649      	mov	r1, r9
 80049f4:	f7fb fc70 	bl	80002d8 <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4613      	mov	r3, r2
 80049fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a06:	d308      	bcc.n	8004a1a <UART_SetConfig+0x79a>
 8004a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a0e:	d204      	bcs.n	8004a1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a16:	60da      	str	r2, [r3, #12]
 8004a18:	e17c      	b.n	8004d14 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004a20:	e178      	b.n	8004d14 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a2a:	f040 80c5 	bne.w	8004bb8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004a2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	dc48      	bgt.n	8004ac8 <UART_SetConfig+0x848>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	db7b      	blt.n	8004b32 <UART_SetConfig+0x8b2>
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d879      	bhi.n	8004b32 <UART_SetConfig+0x8b2>
 8004a3e:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <UART_SetConfig+0x7c4>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004acf 	.word	0x08004acf
 8004a48:	08004ad7 	.word	0x08004ad7
 8004a4c:	08004b33 	.word	0x08004b33
 8004a50:	08004b33 	.word	0x08004b33
 8004a54:	08004adf 	.word	0x08004adf
 8004a58:	08004b33 	.word	0x08004b33
 8004a5c:	08004b33 	.word	0x08004b33
 8004a60:	08004b33 	.word	0x08004b33
 8004a64:	08004aef 	.word	0x08004aef
 8004a68:	08004b33 	.word	0x08004b33
 8004a6c:	08004b33 	.word	0x08004b33
 8004a70:	08004b33 	.word	0x08004b33
 8004a74:	08004b33 	.word	0x08004b33
 8004a78:	08004b33 	.word	0x08004b33
 8004a7c:	08004b33 	.word	0x08004b33
 8004a80:	08004b33 	.word	0x08004b33
 8004a84:	08004aff 	.word	0x08004aff
 8004a88:	08004b33 	.word	0x08004b33
 8004a8c:	08004b33 	.word	0x08004b33
 8004a90:	08004b33 	.word	0x08004b33
 8004a94:	08004b33 	.word	0x08004b33
 8004a98:	08004b33 	.word	0x08004b33
 8004a9c:	08004b33 	.word	0x08004b33
 8004aa0:	08004b33 	.word	0x08004b33
 8004aa4:	08004b33 	.word	0x08004b33
 8004aa8:	08004b33 	.word	0x08004b33
 8004aac:	08004b33 	.word	0x08004b33
 8004ab0:	08004b33 	.word	0x08004b33
 8004ab4:	08004b33 	.word	0x08004b33
 8004ab8:	08004b33 	.word	0x08004b33
 8004abc:	08004b33 	.word	0x08004b33
 8004ac0:	08004b33 	.word	0x08004b33
 8004ac4:	08004b25 	.word	0x08004b25
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d02e      	beq.n	8004b2a <UART_SetConfig+0x8aa>
 8004acc:	e031      	b.n	8004b32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ace:	f7fd fff3 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8004ad2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ad4:	e033      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ad6:	f7fe f805 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8004ada:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004adc:	e02f      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe ff70 	bl	80039c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aec:	e027      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004aee:	f107 0318 	add.w	r3, r7, #24
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff f8bc 	bl	8003c70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004afc:	e01f      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004afe:	4b2d      	ldr	r3, [pc, #180]	; (8004bb4 <UART_SetConfig+0x934>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <UART_SetConfig+0x934>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	08db      	lsrs	r3, r3, #3
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	4a24      	ldr	r2, [pc, #144]	; (8004ba8 <UART_SetConfig+0x928>)
 8004b16:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b1c:	e00f      	b.n	8004b3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004b1e:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <UART_SetConfig+0x928>)
 8004b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b22:	e00c      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b24:	4b21      	ldr	r3, [pc, #132]	; (8004bac <UART_SetConfig+0x92c>)
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b28:	e009      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b30:	e005      	b.n	8004b3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004b3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80e7 	beq.w	8004d14 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <UART_SetConfig+0x930>)
 8004b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b50:	461a      	mov	r2, r3
 8004b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b58:	005a      	lsls	r2, r3, #1
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	441a      	add	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	2b0f      	cmp	r3, #15
 8004b70:	d916      	bls.n	8004ba0 <UART_SetConfig+0x920>
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d212      	bcs.n	8004ba0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f023 030f 	bic.w	r3, r3, #15
 8004b82:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b92:	4313      	orrs	r3, r2
 8004b94:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	e0b9      	b.n	8004d14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ba6:	e0b5      	b.n	8004d14 <UART_SetConfig+0xa94>
 8004ba8:	03d09000 	.word	0x03d09000
 8004bac:	003d0900 	.word	0x003d0900
 8004bb0:	08005960 	.word	0x08005960
 8004bb4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	dc49      	bgt.n	8004c54 <UART_SetConfig+0x9d4>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	db7c      	blt.n	8004cbe <UART_SetConfig+0xa3e>
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d87a      	bhi.n	8004cbe <UART_SetConfig+0xa3e>
 8004bc8:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <UART_SetConfig+0x950>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004c5b 	.word	0x08004c5b
 8004bd4:	08004c63 	.word	0x08004c63
 8004bd8:	08004cbf 	.word	0x08004cbf
 8004bdc:	08004cbf 	.word	0x08004cbf
 8004be0:	08004c6b 	.word	0x08004c6b
 8004be4:	08004cbf 	.word	0x08004cbf
 8004be8:	08004cbf 	.word	0x08004cbf
 8004bec:	08004cbf 	.word	0x08004cbf
 8004bf0:	08004c7b 	.word	0x08004c7b
 8004bf4:	08004cbf 	.word	0x08004cbf
 8004bf8:	08004cbf 	.word	0x08004cbf
 8004bfc:	08004cbf 	.word	0x08004cbf
 8004c00:	08004cbf 	.word	0x08004cbf
 8004c04:	08004cbf 	.word	0x08004cbf
 8004c08:	08004cbf 	.word	0x08004cbf
 8004c0c:	08004cbf 	.word	0x08004cbf
 8004c10:	08004c8b 	.word	0x08004c8b
 8004c14:	08004cbf 	.word	0x08004cbf
 8004c18:	08004cbf 	.word	0x08004cbf
 8004c1c:	08004cbf 	.word	0x08004cbf
 8004c20:	08004cbf 	.word	0x08004cbf
 8004c24:	08004cbf 	.word	0x08004cbf
 8004c28:	08004cbf 	.word	0x08004cbf
 8004c2c:	08004cbf 	.word	0x08004cbf
 8004c30:	08004cbf 	.word	0x08004cbf
 8004c34:	08004cbf 	.word	0x08004cbf
 8004c38:	08004cbf 	.word	0x08004cbf
 8004c3c:	08004cbf 	.word	0x08004cbf
 8004c40:	08004cbf 	.word	0x08004cbf
 8004c44:	08004cbf 	.word	0x08004cbf
 8004c48:	08004cbf 	.word	0x08004cbf
 8004c4c:	08004cbf 	.word	0x08004cbf
 8004c50:	08004cb1 	.word	0x08004cb1
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	d02e      	beq.n	8004cb6 <UART_SetConfig+0xa36>
 8004c58:	e031      	b.n	8004cbe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c5a:	f7fd ff2d 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8004c5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c60:	e033      	b.n	8004cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c62:	f7fd ff3f 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8004c66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c68:	e02f      	b.n	8004cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe feaa 	bl	80039c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c78:	e027      	b.n	8004cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c7a:	f107 0318 	add.w	r3, r7, #24
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe fff6 	bl	8003c70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c88:	e01f      	b.n	8004cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c8a:	4b2d      	ldr	r3, [pc, #180]	; (8004d40 <UART_SetConfig+0xac0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c96:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <UART_SetConfig+0xac0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	08db      	lsrs	r3, r3, #3
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	4a28      	ldr	r2, [pc, #160]	; (8004d44 <UART_SetConfig+0xac4>)
 8004ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ca8:	e00f      	b.n	8004cca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004caa:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <UART_SetConfig+0xac4>)
 8004cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cae:	e00c      	b.n	8004cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <UART_SetConfig+0xac8>)
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cb4:	e009      	b.n	8004cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cbc:	e005      	b.n	8004cca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004cc8:	bf00      	nop
    }

    if (pclk != 0U)
 8004cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d021      	beq.n	8004d14 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	4a1d      	ldr	r2, [pc, #116]	; (8004d4c <UART_SetConfig+0xacc>)
 8004cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cde:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	441a      	add	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	2b0f      	cmp	r3, #15
 8004cf8:	d909      	bls.n	8004d0e <UART_SetConfig+0xa8e>
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d00:	d205      	bcs.n	8004d0e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60da      	str	r2, [r3, #12]
 8004d0c:	e002      	b.n	8004d14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2200      	movs	r2, #0
 8004d28:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d30:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3748      	adds	r7, #72	; 0x48
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3e:	bf00      	nop
 8004d40:	58024400 	.word	0x58024400
 8004d44:	03d09000 	.word	0x03d09000
 8004d48:	003d0900 	.word	0x003d0900
 8004d4c:	08005960 	.word	0x08005960

08004d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01a      	beq.n	8004e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4e:	d10a      	bne.n	8004e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	605a      	str	r2, [r3, #4]
  }
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ea4:	f7fc f950 	bl	8001148 <HAL_GetTick>
 8004ea8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d10e      	bne.n	8004ed6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f82f 	bl	8004f2a <UART_WaitOnFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e025      	b.n	8004f22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d10e      	bne.n	8004f02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f819 	bl	8004f2a <UART_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e00f      	b.n	8004f22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b09c      	sub	sp, #112	; 0x70
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	4613      	mov	r3, r2
 8004f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3a:	e0a9      	b.n	8005090 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f42:	f000 80a5 	beq.w	8005090 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f46:	f7fc f8ff 	bl	8001148 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d302      	bcc.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d140      	bne.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f70:	667b      	str	r3, [r7, #100]	; 0x64
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e6      	bne.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3308      	adds	r3, #8
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fae:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e5      	bne.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e069      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d051      	beq.n	8005090 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffa:	d149      	bne.n	8005090 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005004:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800501a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005024:	637b      	str	r3, [r7, #52]	; 0x34
 8005026:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800502a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e6      	bne.n	8005006 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3308      	adds	r3, #8
 800503e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	613b      	str	r3, [r7, #16]
   return(result);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3308      	adds	r3, #8
 8005056:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005058:	623a      	str	r2, [r7, #32]
 800505a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	69f9      	ldr	r1, [r7, #28]
 800505e:	6a3a      	ldr	r2, [r7, #32]
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	61bb      	str	r3, [r7, #24]
   return(result);
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e5      	bne.n	8005038 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e010      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69da      	ldr	r2, [r3, #28]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4013      	ands	r3, r2
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	429a      	cmp	r2, r3
 800509e:	bf0c      	ite	eq
 80050a0:	2301      	moveq	r3, #1
 80050a2:	2300      	movne	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	f43f af46 	beq.w	8004f3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3770      	adds	r7, #112	; 0x70
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b085      	sub	sp, #20
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e027      	b.n	8005120 <HAL_UARTEx_DisableFifoMode+0x66>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2224      	movs	r2, #36	; 0x24
 80050dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005140:	2302      	movs	r3, #2
 8005142:	e02d      	b.n	80051a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2224      	movs	r2, #36	; 0x24
 8005150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f84f 	bl	8005224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051bc:	2302      	movs	r3, #2
 80051be:	e02d      	b.n	800521c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2224      	movs	r2, #36	; 0x24
 80051cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0201 	bic.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f811 	bl	8005224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005230:	2b00      	cmp	r3, #0
 8005232:	d108      	bne.n	8005246 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005244:	e031      	b.n	80052aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005246:	2310      	movs	r3, #16
 8005248:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800524a:	2310      	movs	r3, #16
 800524c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	0e5b      	lsrs	r3, r3, #25
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	0f5b      	lsrs	r3, r3, #29
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800526e:	7bbb      	ldrb	r3, [r7, #14]
 8005270:	7b3a      	ldrb	r2, [r7, #12]
 8005272:	4911      	ldr	r1, [pc, #68]	; (80052b8 <UARTEx_SetNbDataToProcess+0x94>)
 8005274:	5c8a      	ldrb	r2, [r1, r2]
 8005276:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800527a:	7b3a      	ldrb	r2, [r7, #12]
 800527c:	490f      	ldr	r1, [pc, #60]	; (80052bc <UARTEx_SetNbDataToProcess+0x98>)
 800527e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005280:	fb93 f3f2 	sdiv	r3, r3, r2
 8005284:	b29a      	uxth	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	7b7a      	ldrb	r2, [r7, #13]
 8005290:	4909      	ldr	r1, [pc, #36]	; (80052b8 <UARTEx_SetNbDataToProcess+0x94>)
 8005292:	5c8a      	ldrb	r2, [r1, r2]
 8005294:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005298:	7b7a      	ldrb	r2, [r7, #13]
 800529a:	4908      	ldr	r1, [pc, #32]	; (80052bc <UARTEx_SetNbDataToProcess+0x98>)
 800529c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800529e:	fb93 f3f2 	sdiv	r3, r3, r2
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	08005978 	.word	0x08005978
 80052bc:	08005980 	.word	0x08005980

080052c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052c0:	b084      	sub	sp, #16
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	f107 001c 	add.w	r0, r7, #28
 80052ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d120      	bne.n	800531a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	4b2a      	ldr	r3, [pc, #168]	; (8005394 <USB_CoreInit+0xd4>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d105      	bne.n	800530e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 faac 	bl	800586c <USB_CoreReset>
 8005314:	4603      	mov	r3, r0
 8005316:	73fb      	strb	r3, [r7, #15]
 8005318:	e01a      	b.n	8005350 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 faa0 	bl	800586c <USB_CoreReset>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	639a      	str	r2, [r3, #56]	; 0x38
 8005342:	e005      	b.n	8005350 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	2b01      	cmp	r3, #1
 8005354:	d116      	bne.n	8005384 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535a:	b29a      	uxth	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <USB_CoreInit+0xd8>)
 8005366:	4313      	orrs	r3, r2
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f043 0206 	orr.w	r2, r3, #6
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005384:	7bfb      	ldrb	r3, [r7, #15]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005390:	b004      	add	sp, #16
 8005392:	4770      	bx	lr
 8005394:	ffbdffbf 	.word	0xffbdffbf
 8005398:	03ee0000 	.word	0x03ee0000

0800539c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f023 0201 	bic.w	r2, r3, #1
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	460b      	mov	r3, r1
 80053c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d115      	bne.n	800540c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053ec:	2001      	movs	r0, #1
 80053ee:	f7fb feb7 	bl	8001160 <HAL_Delay>
      ms++;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3301      	adds	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fa29 	bl	8005850 <USB_GetMode>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b01      	cmp	r3, #1
 8005402:	d01e      	beq.n	8005442 <USB_SetCurrentMode+0x84>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b31      	cmp	r3, #49	; 0x31
 8005408:	d9f0      	bls.n	80053ec <USB_SetCurrentMode+0x2e>
 800540a:	e01a      	b.n	8005442 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d115      	bne.n	800543e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800541e:	2001      	movs	r0, #1
 8005420:	f7fb fe9e 	bl	8001160 <HAL_Delay>
      ms++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3301      	adds	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fa10 	bl	8005850 <USB_GetMode>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <USB_SetCurrentMode+0x84>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b31      	cmp	r3, #49	; 0x31
 800543a:	d9f0      	bls.n	800541e <USB_SetCurrentMode+0x60>
 800543c:	e001      	b.n	8005442 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e005      	b.n	800544e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b32      	cmp	r3, #50	; 0x32
 8005446:	d101      	bne.n	800544c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005458:	b084      	sub	sp, #16
 800545a:	b580      	push	{r7, lr}
 800545c:	b086      	sub	sp, #24
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	e009      	b.n	800548c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	3340      	adds	r3, #64	; 0x40
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	2200      	movs	r2, #0
 8005484:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	3301      	adds	r3, #1
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b0e      	cmp	r3, #14
 8005490:	d9f2      	bls.n	8005478 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d11c      	bne.n	80054d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a6:	f043 0302 	orr.w	r3, r3, #2
 80054aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e005      	b.n	80054de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054e4:	461a      	mov	r2, r3
 80054e6:	2300      	movs	r3, #0
 80054e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f0:	4619      	mov	r1, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f8:	461a      	mov	r2, r3
 80054fa:	680b      	ldr	r3, [r1, #0]
 80054fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	2b01      	cmp	r3, #1
 8005502:	d10c      	bne.n	800551e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800550a:	2100      	movs	r1, #0
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f965 	bl	80057dc <USB_SetDevSpeed>
 8005512:	e008      	b.n	8005526 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005514:	2101      	movs	r1, #1
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f960 	bl	80057dc <USB_SetDevSpeed>
 800551c:	e003      	b.n	8005526 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800551e:	2103      	movs	r1, #3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f95b 	bl	80057dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005526:	2110      	movs	r1, #16
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f8f3 	bl	8005714 <USB_FlushTxFifo>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f91f 	bl	800577c <USB_FlushRxFifo>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554e:	461a      	mov	r2, r3
 8005550:	2300      	movs	r3, #0
 8005552:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	461a      	mov	r2, r3
 800555c:	2300      	movs	r3, #0
 800555e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	461a      	mov	r2, r3
 8005568:	2300      	movs	r3, #0
 800556a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800556c:	2300      	movs	r3, #0
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	e043      	b.n	80055fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005588:	d118      	bne.n	80055bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	461a      	mov	r2, r3
 800559e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e013      	b.n	80055ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	461a      	mov	r2, r3
 80055b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e008      	b.n	80055ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	461a      	mov	r2, r3
 80055ca:	2300      	movs	r3, #0
 80055cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	461a      	mov	r2, r3
 80055dc:	2300      	movs	r3, #0
 80055de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	461a      	mov	r2, r3
 80055ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	3301      	adds	r3, #1
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d3b7      	bcc.n	8005572 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005602:	2300      	movs	r3, #0
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	e043      	b.n	8005690 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800561a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561e:	d118      	bne.n	8005652 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	461a      	mov	r2, r3
 8005634:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e013      	b.n	8005664 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	461a      	mov	r2, r3
 800564a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e008      	b.n	8005664 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	461a      	mov	r2, r3
 8005660:	2300      	movs	r3, #0
 8005662:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	461a      	mov	r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	461a      	mov	r2, r3
 8005684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005688:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3301      	adds	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	429a      	cmp	r2, r3
 8005696:	d3b7      	bcc.n	8005608 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	f043 0210 	orr.w	r2, r3, #16
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	4b0e      	ldr	r3, [pc, #56]	; (800570c <USB_DevInit+0x2b4>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f043 0208 	orr.w	r2, r3, #8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d105      	bne.n	80056fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699a      	ldr	r2, [r3, #24]
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <USB_DevInit+0x2b8>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005708:	b004      	add	sp, #16
 800570a:	4770      	bx	lr
 800570c:	803c3800 	.word	0x803c3800
 8005710:	40000004 	.word	0x40000004

08005714 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3301      	adds	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4a13      	ldr	r2, [pc, #76]	; (8005778 <USB_FlushTxFifo+0x64>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d901      	bls.n	8005734 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e01b      	b.n	800576c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	daf2      	bge.n	8005722 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	019b      	lsls	r3, r3, #6
 8005744:	f043 0220 	orr.w	r2, r3, #32
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4a08      	ldr	r2, [pc, #32]	; (8005778 <USB_FlushTxFifo+0x64>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e006      	b.n	800576c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b20      	cmp	r3, #32
 8005768:	d0f0      	beq.n	800574c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	00030d40 	.word	0x00030d40

0800577c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a11      	ldr	r2, [pc, #68]	; (80057d8 <USB_FlushRxFifo+0x5c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e018      	b.n	80057cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	daf2      	bge.n	8005788 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2210      	movs	r2, #16
 80057aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3301      	adds	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4a08      	ldr	r2, [pc, #32]	; (80057d8 <USB_FlushRxFifo+0x5c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e006      	b.n	80057cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0310 	and.w	r3, r3, #16
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d0f0      	beq.n	80057ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	00030d40 	.word	0x00030d40

080057dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057fc:	4313      	orrs	r3, r2
 80057fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800580e:	b480      	push	{r7}
 8005810:	b085      	sub	sp, #20
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005828:	f023 0303 	bic.w	r3, r3, #3
 800582c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800583c:	f043 0302 	orr.w	r3, r3, #2
 8005840:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f003 0301 	and.w	r3, r3, #1
}
 8005860:	4618      	mov	r0, r3
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3301      	adds	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a13      	ldr	r2, [pc, #76]	; (80058d0 <USB_CoreReset+0x64>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e01b      	b.n	80058c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	daf2      	bge.n	8005878 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f043 0201 	orr.w	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3301      	adds	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <USB_CoreReset+0x64>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d901      	bls.n	80058b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e006      	b.n	80058c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d0f0      	beq.n	80058a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	00030d40 	.word	0x00030d40

080058d4 <__libc_init_array>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	4d0d      	ldr	r5, [pc, #52]	; (800590c <__libc_init_array+0x38>)
 80058d8:	4c0d      	ldr	r4, [pc, #52]	; (8005910 <__libc_init_array+0x3c>)
 80058da:	1b64      	subs	r4, r4, r5
 80058dc:	10a4      	asrs	r4, r4, #2
 80058de:	2600      	movs	r6, #0
 80058e0:	42a6      	cmp	r6, r4
 80058e2:	d109      	bne.n	80058f8 <__libc_init_array+0x24>
 80058e4:	4d0b      	ldr	r5, [pc, #44]	; (8005914 <__libc_init_array+0x40>)
 80058e6:	4c0c      	ldr	r4, [pc, #48]	; (8005918 <__libc_init_array+0x44>)
 80058e8:	f000 f820 	bl	800592c <_init>
 80058ec:	1b64      	subs	r4, r4, r5
 80058ee:	10a4      	asrs	r4, r4, #2
 80058f0:	2600      	movs	r6, #0
 80058f2:	42a6      	cmp	r6, r4
 80058f4:	d105      	bne.n	8005902 <__libc_init_array+0x2e>
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fc:	4798      	blx	r3
 80058fe:	3601      	adds	r6, #1
 8005900:	e7ee      	b.n	80058e0 <__libc_init_array+0xc>
 8005902:	f855 3b04 	ldr.w	r3, [r5], #4
 8005906:	4798      	blx	r3
 8005908:	3601      	adds	r6, #1
 800590a:	e7f2      	b.n	80058f2 <__libc_init_array+0x1e>
 800590c:	08005990 	.word	0x08005990
 8005910:	08005990 	.word	0x08005990
 8005914:	08005990 	.word	0x08005990
 8005918:	08005994 	.word	0x08005994

0800591c <memset>:
 800591c:	4402      	add	r2, r0
 800591e:	4603      	mov	r3, r0
 8005920:	4293      	cmp	r3, r2
 8005922:	d100      	bne.n	8005926 <memset+0xa>
 8005924:	4770      	bx	lr
 8005926:	f803 1b01 	strb.w	r1, [r3], #1
 800592a:	e7f9      	b.n	8005920 <memset+0x4>

0800592c <_init>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	bf00      	nop
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr

08005938 <_fini>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	bf00      	nop
 800593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593e:	bc08      	pop	{r3}
 8005940:	469e      	mov	lr, r3
 8005942:	4770      	bx	lr
