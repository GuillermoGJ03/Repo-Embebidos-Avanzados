
Multi_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd8  08006cd8  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ce0  08006ce0  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce4  08006ce4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000074  08006d5c  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d4  08006dbc  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006f4  24000134  08006e1c  00020134  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000828  08006e1c  00020828  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 14 .debug_info   000195c6  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a01  00000000  00000000  00039728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001058  00000000  00000000  0003c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f60  00000000  00000000  0003d188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a61a  00000000  00000000  0003e0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014c08  00000000  00000000  00078702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001805ee  00000000  00000000  0008d30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0020d8f8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004908  00000000  00000000  0020d948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006c48 	.word	0x08006c48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	08006c48 	.word	0x08006c48

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b32      	ldr	r3, [pc, #200]	; (8000888 <main+0xd8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 fa5b 	bl	8000c94 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fcbf 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f859 	bl	8000898 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <main+0xd8>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a26      	ldr	r2, [pc, #152]	; (8000888 <main+0xd8>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b24      	ldr	r3, [pc, #144]	; (8000888 <main+0xd8>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f001 fc6d 	bl	80020e4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f001 fc83 	bl	8002118 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <main+0xd8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 fa2d 	bl	8000c94 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f97b 	bl	8000b34 <MX_GPIO_Init>
  MX_ETH_Init();
 800083e:	f000 f8af 	bl	80009a0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000842:	f000 f8f9 	bl	8000a38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000846:	f000 f943 	bl	8000ad0 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_HSEM_FastTake(HSEM_ID_0);
 800084a:	2000      	movs	r0, #0
 800084c:	f001 fc4a 	bl	80020e4 <HAL_HSEM_FastTake>

	  for(int i = 0; i < 5; i++){
 8000850:	2300      	movs	r3, #0
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
 8000854:	e010      	b.n	8000878 <main+0xc8>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000856:	2101      	movs	r1, #1
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <main+0xdc>)
 800085a:	f001 fc28 	bl	80020ae <HAL_GPIO_TogglePin>
		  print_int("Data %u\r\n", xfr_ptr ->M4toM7, 64);
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <main+0xe0>)
 8000860:	3301      	adds	r3, #1
 8000862:	2240      	movs	r2, #64	; 0x40
 8000864:	4619      	mov	r1, r3
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <main+0xe4>)
 8000868:	f000 f9e4 	bl	8000c34 <print_int>
		  HAL_Delay(200);
 800086c:	20c8      	movs	r0, #200	; 0xc8
 800086e:	f000 fd09 	bl	8001284 <HAL_Delay>
	  for(int i = 0; i < 5; i++){
 8000872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000874:	3301      	adds	r3, #1
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
 8000878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800087a:	2b04      	cmp	r3, #4
 800087c:	ddeb      	ble.n	8000856 <main+0xa6>
	  }

	  HAL_HSEM_Release(HSEM_ID_0,0);
 800087e:	2100      	movs	r1, #0
 8000880:	2000      	movs	r0, #0
 8000882:	f001 fc49 	bl	8002118 <HAL_HSEM_Release>
	  HAL_HSEM_FastTake(HSEM_ID_0);
 8000886:	e7e0      	b.n	800084a <main+0x9a>
 8000888:	58024400 	.word	0x58024400
 800088c:	58020400 	.word	0x58020400
 8000890:	38001000 	.word	0x38001000
 8000894:	08006c60 	.word	0x08006c60

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09c      	sub	sp, #112	; 0x70
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	224c      	movs	r2, #76	; 0x4c
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f005 fd58 	bl	800635c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2220      	movs	r2, #32
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 fd52 	bl	800635c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008b8:	2004      	movs	r0, #4
 80008ba:	f001 fd89 	bl	80023d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b34      	ldr	r3, [pc, #208]	; (8000994 <SystemClock_Config+0xfc>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	4a33      	ldr	r2, [pc, #204]	; (8000994 <SystemClock_Config+0xfc>)
 80008c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008cc:	6193      	str	r3, [r2, #24]
 80008ce:	4b31      	ldr	r3, [pc, #196]	; (8000994 <SystemClock_Config+0xfc>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <SystemClock_Config+0x100>)
 80008da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008dc:	4a2e      	ldr	r2, [pc, #184]	; (8000998 <SystemClock_Config+0x100>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <SystemClock_Config+0x100>)
 80008e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f0:	bf00      	nop
 80008f2:	4b28      	ldr	r3, [pc, #160]	; (8000994 <SystemClock_Config+0xfc>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008fe:	d1f8      	bne.n	80008f2 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <SystemClock_Config+0x104>)
 8000902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000904:	f023 0303 	bic.w	r3, r3, #3
 8000908:	4a24      	ldr	r2, [pc, #144]	; (800099c <SystemClock_Config+0x104>)
 800090a:	f043 0302 	orr.w	r3, r3, #2
 800090e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000914:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091e:	2302      	movs	r3, #2
 8000920:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000926:	2378      	movs	r3, #120	; 0x78
 8000928:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000936:	230c      	movs	r3, #12
 8000938:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800093a:	2300      	movs	r3, #0
 800093c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fdac 	bl	80024a4 <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000952:	f000 f99f 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	233f      	movs	r3, #63	; 0x3f
 8000958:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2303      	movs	r3, #3
 800095c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000962:	2308      	movs	r3, #8
 8000964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000966:	2340      	movs	r3, #64	; 0x40
 8000968:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000972:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000974:	2340      	movs	r3, #64	; 0x40
 8000976:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2104      	movs	r1, #4
 800097c:	4618      	mov	r0, r3
 800097e:	f002 f9bf 	bl	8002d00 <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000988:	f000 f984 	bl	8000c94 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3770      	adds	r7, #112	; 0x70
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	58024800 	.word	0x58024800
 8000998:	58000400 	.word	0x58000400
 800099c:	58024400 	.word	0x58024400

080009a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_ETH_Init+0x80>)
 80009a6:	4a1f      	ldr	r2, [pc, #124]	; (8000a24 <MX_ETH_Init+0x84>)
 80009a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_ETH_Init+0x88>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_ETH_Init+0x88>)
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_ETH_Init+0x88>)
 80009b8:	22e1      	movs	r2, #225	; 0xe1
 80009ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_ETH_Init+0x88>)
 80009be:	2200      	movs	r2, #0
 80009c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_ETH_Init+0x88>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_ETH_Init+0x88>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_ETH_Init+0x80>)
 80009d0:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <MX_ETH_Init+0x88>)
 80009d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_ETH_Init+0x80>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_ETH_Init+0x80>)
 80009dc:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <MX_ETH_Init+0x8c>)
 80009de:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_ETH_Init+0x80>)
 80009e2:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_ETH_Init+0x90>)
 80009e4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_ETH_Init+0x80>)
 80009e8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009ec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009ee:	480c      	ldr	r0, [pc, #48]	; (8000a20 <MX_ETH_Init+0x80>)
 80009f0:	f000 fd70 	bl	80014d4 <HAL_ETH_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009fa:	f000 f94b 	bl	8000c94 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009fe:	2238      	movs	r2, #56	; 0x38
 8000a00:	2100      	movs	r1, #0
 8000a02:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_ETH_Init+0x94>)
 8000a04:	f005 fcaa 	bl	800635c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_ETH_Init+0x94>)
 8000a0a:	2221      	movs	r2, #33	; 0x21
 8000a0c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_ETH_Init+0x94>)
 8000a10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a14:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_ETH_Init+0x94>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	24000188 	.word	0x24000188
 8000a24:	40028000 	.word	0x40028000
 8000a28:	24000808 	.word	0x24000808
 8000a2c:	240000d4 	.word	0x240000d4
 8000a30:	24000074 	.word	0x24000074
 8000a34:	24000150 	.word	0x24000150

08000a38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a3e:	4a23      	ldr	r2, [pc, #140]	; (8000acc <MX_USART3_UART_Init+0x94>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a80:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a82:	f004 f831 	bl	8004ae8 <HAL_UART_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a8c:	f000 f902 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a94:	f005 f864 	bl	8005b60 <HAL_UARTEx_SetTxFifoThreshold>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a9e:	f000 f8f9 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000aa6:	f005 f899 	bl	8005bdc <HAL_UARTEx_SetRxFifoThreshold>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ab0:	f000 f8f0 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000ab6:	f005 f81a 	bl	8005aee <HAL_UARTEx_DisableFifoMode>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ac0:	f000 f8e8 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24000238 	.word	0x24000238
 8000acc:	40004800 	.word	0x40004800

08000ad0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad6:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000adc:	2209      	movs	r2, #9
 8000ade:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b18:	f001 fb12 	bl	8002140 <HAL_PCD_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b22:	f000 f8b7 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	240002c8 	.word	0x240002c8
 8000b30:	40080000 	.word	0x40080000

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	4b38      	ldr	r3, [pc, #224]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a36      	ldr	r2, [pc, #216]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b68:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6e:	4a2f      	ldr	r2, [pc, #188]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b78:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a27      	ldr	r2, [pc, #156]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	4a20      	ldr	r2, [pc, #128]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000bca:	f043 0308 	orr.w	r3, r3, #8
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2101      	movs	r1, #1
 8000c02:	480b      	ldr	r0, [pc, #44]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000c04:	f001 fa3a 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000c20:	f001 f87c 	bl	8001d1c <HAL_GPIO_Init>

}
 8000c24:	bf00      	nop
 8000c26:	3730      	adds	r7, #48	; 0x30
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	58020400 	.word	0x58020400

08000c34 <print_int>:

/* USER CODE BEGIN 4 */
static void print_int(char *string, uint8_t *arr, uint8_t size){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < size; i++){
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	e016      	b.n	8000c76 <print_int+0x42>
		uart_buf_len = sprintf(uart_buf, string, arr[i]);
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	68f9      	ldr	r1, [r7, #12]
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <print_int+0x54>)
 8000c56:	f005 fb89 	bl	800636c <siprintf>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <print_int+0x58>)
 8000c60:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <print_int+0x58>)
 8000c64:	881a      	ldrh	r2, [r3, #0]
 8000c66:	2364      	movs	r3, #100	; 0x64
 8000c68:	4907      	ldr	r1, [pc, #28]	; (8000c88 <print_int+0x54>)
 8000c6a:	4809      	ldr	r0, [pc, #36]	; (8000c90 <print_int+0x5c>)
 8000c6c:	f003 ff8c 	bl	8004b88 <HAL_UART_Transmit>
	for(int i = 0; i < size; i++){
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	3301      	adds	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	dbe4      	blt.n	8000c48 <print_int+0x14>
	}
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	240007d4 	.word	0x240007d4
 8000c8c:	24000806 	.word	0x24000806
 8000c90:	24000238 	.word	0x24000238

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <Error_Handler+0x8>
	...

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_MspInit+0x30>)
 8000ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cac:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_MspInit+0x30>)
 8000cae:	f043 0302 	orr.w	r3, r3, #2
 8000cb2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_MspInit+0x30>)
 8000cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	58024400 	.word	0x58024400

08000cd4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08e      	sub	sp, #56	; 0x38
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a59      	ldr	r2, [pc, #356]	; (8000e58 <HAL_ETH_MspInit+0x184>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	f040 80ab 	bne.w	8000e4e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cf8:	4b58      	ldr	r3, [pc, #352]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000cfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cfe:	4a57      	ldr	r2, [pc, #348]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d08:	4b54      	ldr	r3, [pc, #336]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d12:	623b      	str	r3, [r7, #32]
 8000d14:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d16:	4b51      	ldr	r3, [pc, #324]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d1c:	4a4f      	ldr	r2, [pc, #316]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d26:	4b4d      	ldr	r3, [pc, #308]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d34:	4b49      	ldr	r3, [pc, #292]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d3a:	4a48      	ldr	r2, [pc, #288]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d44:	4b45      	ldr	r3, [pc, #276]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	4b42      	ldr	r3, [pc, #264]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	4a40      	ldr	r2, [pc, #256]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d62:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b3a      	ldr	r3, [pc, #232]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	4a39      	ldr	r2, [pc, #228]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d80:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	4a31      	ldr	r2, [pc, #196]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dac:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	4a2a      	ldr	r2, [pc, #168]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <HAL_ETH_MspInit+0x188>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dca:	2332      	movs	r3, #50	; 0x32
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dda:	230b      	movs	r3, #11
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	481e      	ldr	r0, [pc, #120]	; (8000e60 <HAL_ETH_MspInit+0x18c>)
 8000de6:	f000 ff99 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dea:	2386      	movs	r3, #134	; 0x86
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfa:	230b      	movs	r3, #11
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4817      	ldr	r0, [pc, #92]	; (8000e64 <HAL_ETH_MspInit+0x190>)
 8000e06:	f000 ff89 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1c:	230b      	movs	r3, #11
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4810      	ldr	r0, [pc, #64]	; (8000e68 <HAL_ETH_MspInit+0x194>)
 8000e28:	f000 ff78 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3e:	230b      	movs	r3, #11
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	4808      	ldr	r0, [pc, #32]	; (8000e6c <HAL_ETH_MspInit+0x198>)
 8000e4a:	f000 ff67 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3738      	adds	r7, #56	; 0x38
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40028000 	.word	0x40028000
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58020800 	.word	0x58020800
 8000e64:	58020000 	.word	0x58020000
 8000e68:	58020400 	.word	0x58020400
 8000e6c:	58021800 	.word	0x58021800

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0b8      	sub	sp, #224	; 0xe0
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	22bc      	movs	r2, #188	; 0xbc
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f005 fa63 	bl	800635c <memset>
  if(huart->Instance==USART3)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <HAL_UART_MspInit+0xc0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d142      	bne.n	8000f26 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 fab2 	bl	8003418 <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eba:	f7ff feeb 	bl	8000c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <HAL_UART_MspInit+0xc4>)
 8000ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <HAL_UART_MspInit+0xc4>)
 8000ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_UART_MspInit+0xc4>)
 8000ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_UART_MspInit+0xc4>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <HAL_UART_MspInit+0xc4>)
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_UART_MspInit+0xc4>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000efa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000efe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f14:	2307      	movs	r3, #7
 8000f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_UART_MspInit+0xc8>)
 8000f22:	f000 fefb 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	37e0      	adds	r7, #224	; 0xe0
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40004800 	.word	0x40004800
 8000f34:	58024400 	.word	0x58024400
 8000f38:	58020c00 	.word	0x58020c00

08000f3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0b8      	sub	sp, #224	; 0xe0
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	22bc      	movs	r2, #188	; 0xbc
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f005 f9fd 	bl	800635c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a36      	ldr	r2, [pc, #216]	; (8001040 <HAL_PCD_MspInit+0x104>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d165      	bne.n	8001038 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000f76:	2318      	movs	r3, #24
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000f86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f8a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fa3b 	bl	8003418 <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000fa8:	f7ff fe74 	bl	8000c94 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000fac:	f001 fa6a 	bl	8002484 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <HAL_PCD_MspInit+0x108>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	4a23      	ldr	r2, [pc, #140]	; (8001044 <HAL_PCD_MspInit+0x108>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc0:	4b20      	ldr	r3, [pc, #128]	; (8001044 <HAL_PCD_MspInit+0x108>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fce:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fe8:	230a      	movs	r3, #10
 8000fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <HAL_PCD_MspInit+0x10c>)
 8000ff6:	f000 fe91 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <HAL_PCD_MspInit+0x10c>)
 8001016:	f000 fe81 	bl	8001d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_PCD_MspInit+0x108>)
 800101c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_PCD_MspInit+0x108>)
 8001022:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001026:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_PCD_MspInit+0x108>)
 800102c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	37e0      	adds	r7, #224	; 0xe0
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40080000 	.word	0x40080000
 8001044:	58024400 	.word	0x58024400
 8001048:	58020000 	.word	0x58020000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <NMI_Handler+0x4>

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <MemManage_Handler+0x4>

0800105e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler+0x4>

0800106a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001098:	f000 f8d4 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f005 f91a 	bl	8006308 <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	24080000 	.word	0x24080000
 8001100:	00000400 	.word	0x00000400
 8001104:	24000810 	.word	0x24000810
 8001108:	24000828 	.word	0x24000828

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001110:	f7ff fab8 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800112c:	4c0a      	ldr	r4, [pc, #40]	; (8001158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113a:	f005 f8eb 	bl	8006314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fb37 	bl	80007b0 <main>
  bx  lr
 8001142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001144:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001148:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800114c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001150:	08006ce8 	.word	0x08006ce8
  ldr r2, =_sbss
 8001154:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8001158:	24000828 	.word	0x24000828

0800115c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC3_IRQHandler>
	...

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001166:	2003      	movs	r0, #3
 8001168:	f000 f982 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800116c:	f001 ff7e 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8001170:	4602      	mov	r2, r0
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_Init+0x68>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	4913      	ldr	r1, [pc, #76]	; (80011cc <HAL_Init+0x6c>)
 800117e:	5ccb      	ldrb	r3, [r1, r3]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	fa22 f303 	lsr.w	r3, r2, r3
 8001188:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_Init+0x68>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_Init+0x6c>)
 8001194:	5cd3      	ldrb	r3, [r2, r3]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <HAL_Init+0x70>)
 80011a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_Init+0x74>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011aa:	2000      	movs	r0, #0
 80011ac:	f000 f814 	bl	80011d8 <HAL_InitTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e002      	b.n	80011c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ba:	f7ff fd71 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	58024400 	.word	0x58024400
 80011cc:	08006c6c 	.word	0x08006c6c
 80011d0:	24000004 	.word	0x24000004
 80011d4:	24000000 	.word	0x24000000

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_InitTick+0x60>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e021      	b.n	8001230 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_InitTick+0x64>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_InitTick+0x60>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f959 	bl	80014ba <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f931 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <HAL_InitTick+0x68>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2400000c 	.word	0x2400000c
 800123c:	24000000 	.word	0x24000000
 8001240:	24000008 	.word	0x24000008

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	2400000c 	.word	0x2400000c
 8001268:	24000814 	.word	0x24000814

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	24000814 	.word	0x24000814

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffde 	bl	800126c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2400000c 	.word	0x2400000c

080012cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetREVID+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0c1b      	lsrs	r3, r3, #16
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	5c001000 	.word	0x5c001000

080012e4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80012f4:	4904      	ldr	r1, [pc, #16]	; (8001308 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	58000400 	.word	0x58000400

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <__NVIC_SetPriorityGrouping+0x40>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	4313      	orrs	r3, r2
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <__NVIC_SetPriorityGrouping+0x40>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00
 8001350:	05fa0000 	.word	0x05fa0000

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff47 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff5e 	bl	8001354 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff90 	bl	80013c4 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5f 	bl	8001370 <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffb2 	bl	800142c <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0cf      	b.n	8001686 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d106      	bne.n	80014fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2223      	movs	r2, #35	; 0x23
 80014f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fbeb 	bl	8000cd4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	4b64      	ldr	r3, [pc, #400]	; (8001690 <HAL_ETH_Init+0x1bc>)
 8001500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001504:	4a62      	ldr	r2, [pc, #392]	; (8001690 <HAL_ETH_Init+0x1bc>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800150e:	4b60      	ldr	r3, [pc, #384]	; (8001690 <HAL_ETH_Init+0x1bc>)
 8001510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7a1b      	ldrb	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d103      	bne.n	800152c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff fedd 	bl	80012e4 <HAL_SYSCFG_ETHInterfaceSelect>
 800152a:	e003      	b.n	8001534 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800152c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001530:	f7ff fed8 	bl	80012e4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001534:	4b57      	ldr	r3, [pc, #348]	; (8001694 <HAL_ETH_Init+0x1c0>)
 8001536:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001550:	f7ff fe8c 	bl	800126c <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001556:	e011      	b.n	800157c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001558:	f7ff fe88 	bl	800126c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001566:	d909      	bls.n	800157c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2204      	movs	r2, #4
 800156c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	22e0      	movs	r2, #224	; 0xe0
 8001574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e084      	b.n	8001686 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1e4      	bne.n	8001558 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f886 	bl	80016a0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001594:	f001 fee4 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 8001598:	4603      	mov	r3, r0
 800159a:	4a3f      	ldr	r2, [pc, #252]	; (8001698 <HAL_ETH_Init+0x1c4>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	0c9a      	lsrs	r2, r3, #18
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3a01      	subs	r2, #1
 80015a8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 fa71 	bl	8001a94 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80015be:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ce:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	22e0      	movs	r2, #224	; 0xe0
 80015ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e049      	b.n	8001686 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <HAL_ETH_Init+0x1c8>)
 8001600:	4013      	ands	r3, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6952      	ldr	r2, [r2, #20]
 8001606:	0051      	lsls	r1, r2, #1
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	430b      	orrs	r3, r1
 800160e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001612:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fad9 	bl	8001bce <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fb1f 	bl	8001c60 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	3305      	adds	r3, #5
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	021a      	lsls	r2, r3, #8
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	3303      	adds	r3, #3
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	061a      	lsls	r2, r3, #24
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	3302      	adds	r3, #2
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	041b      	lsls	r3, r3, #16
 8001654:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	3301      	adds	r3, #1
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001660:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800166e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001670:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2210      	movs	r2, #16
 8001680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	58024400 	.word	0x58024400
 8001694:	58000400 	.word	0x58000400
 8001698:	431bde83 	.word	0x431bde83
 800169c:	ffff8001 	.word	0xffff8001

080016a0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016ba:	f001 fe51 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 80016be:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d908      	bls.n	80016da <HAL_ETH_SetMDIOClockRange+0x3a>
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d804      	bhi.n	80016da <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	e027      	b.n	800172a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	4a18      	ldr	r2, [pc, #96]	; (8001740 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d908      	bls.n	80016f4 <HAL_ETH_SetMDIOClockRange+0x54>
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	4a17      	ldr	r2, [pc, #92]	; (8001744 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d204      	bcs.n	80016f4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e01a      	b.n	800172a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4a13      	ldr	r2, [pc, #76]	; (8001744 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d303      	bcc.n	8001704 <HAL_ETH_SetMDIOClockRange+0x64>
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d911      	bls.n	8001728 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d908      	bls.n	800171e <HAL_ETH_SetMDIOClockRange+0x7e>
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <HAL_ETH_SetMDIOClockRange+0xac>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d804      	bhi.n	800171e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	e005      	b.n	800172a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e000      	b.n	800172a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001728:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	01312cff 	.word	0x01312cff
 8001740:	02160ebf 	.word	0x02160ebf
 8001744:	03938700 	.word	0x03938700
 8001748:	05f5e0ff 	.word	0x05f5e0ff
 800174c:	08f0d17f 	.word	0x08f0d17f

08001750 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001762:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	791b      	ldrb	r3, [r3, #4]
 8001768:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800176a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	7b1b      	ldrb	r3, [r3, #12]
 8001770:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001772:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	7b5b      	ldrb	r3, [r3, #13]
 8001778:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800177a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	7b9b      	ldrb	r3, [r3, #14]
 8001780:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001782:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	7bdb      	ldrb	r3, [r3, #15]
 8001788:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800178a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	7c12      	ldrb	r2, [r2, #16]
 8001790:	2a00      	cmp	r2, #0
 8001792:	d102      	bne.n	800179a <ETH_SetMACConfig+0x4a>
 8001794:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001798:	e000      	b.n	800179c <ETH_SetMACConfig+0x4c>
 800179a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800179c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	7c52      	ldrb	r2, [r2, #17]
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	d102      	bne.n	80017ac <ETH_SetMACConfig+0x5c>
 80017a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017aa:	e000      	b.n	80017ae <ETH_SetMACConfig+0x5e>
 80017ac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	7c9b      	ldrb	r3, [r3, #18]
 80017b4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017b6:	431a      	orrs	r2, r3
               macconf->Speed |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80017bc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80017c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	7f1b      	ldrb	r3, [r3, #28]
 80017c8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80017ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	7f5b      	ldrb	r3, [r3, #29]
 80017d0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	7f92      	ldrb	r2, [r2, #30]
 80017d8:	2a00      	cmp	r2, #0
 80017da:	d102      	bne.n	80017e2 <ETH_SetMACConfig+0x92>
 80017dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e0:	e000      	b.n	80017e4 <ETH_SetMACConfig+0x94>
 80017e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	7fdb      	ldrb	r3, [r3, #31]
 80017ea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017f4:	2a00      	cmp	r2, #0
 80017f6:	d102      	bne.n	80017fe <ETH_SetMACConfig+0xae>
 80017f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017fc:	e000      	b.n	8001800 <ETH_SetMACConfig+0xb0>
 80017fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001800:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001806:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800180e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001810:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b56      	ldr	r3, [pc, #344]	; (800197c <ETH_SetMACConfig+0x22c>)
 8001822:	4013      	ands	r3, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	68f9      	ldr	r1, [r7, #12]
 800182a:	430b      	orrs	r3, r1
 800182c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001832:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800183a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800183c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001844:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001846:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800184e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001850:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001858:	2a00      	cmp	r2, #0
 800185a:	d102      	bne.n	8001862 <ETH_SetMACConfig+0x112>
 800185c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001860:	e000      	b.n	8001864 <ETH_SetMACConfig+0x114>
 8001862:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001864:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4b42      	ldr	r3, [pc, #264]	; (8001980 <ETH_SetMACConfig+0x230>)
 8001876:	4013      	ands	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	68f9      	ldr	r1, [r7, #12]
 800187e:	430b      	orrs	r3, r1
 8001880:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001888:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800188e:	4313      	orrs	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <ETH_SetMACConfig+0x234>)
 800189a:	4013      	ands	r3, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	430b      	orrs	r3, r1
 80018a4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018ac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80018ba:	2a00      	cmp	r2, #0
 80018bc:	d101      	bne.n	80018c2 <ETH_SetMACConfig+0x172>
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	e000      	b.n	80018c4 <ETH_SetMACConfig+0x174>
 80018c2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80018c4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018d6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80018da:	4013      	ands	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	430b      	orrs	r3, r1
 80018e4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80018ec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80018f4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018f6:	4313      	orrs	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001902:	f023 0103 	bic.w	r1, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	430a      	orrs	r2, r1
 800190e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800191a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001936:	2a00      	cmp	r2, #0
 8001938:	d101      	bne.n	800193e <ETH_SetMACConfig+0x1ee>
 800193a:	2240      	movs	r2, #64	; 0x40
 800193c:	e000      	b.n	8001940 <ETH_SetMACConfig+0x1f0>
 800193e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001940:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001948:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800194a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001952:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001954:	4313      	orrs	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001960:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	430a      	orrs	r2, r1
 800196c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	00048083 	.word	0x00048083
 8001980:	c0f88000 	.word	0xc0f88000
 8001984:	fffffef0 	.word	0xfffffef0

08001988 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <ETH_SetDMAConfig+0xf8>)
 800199e:	4013      	ands	r3, r2
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	6811      	ldr	r1, [r2, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	430b      	orrs	r3, r1
 80019aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ae:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019ba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	7b1b      	ldrb	r3, [r3, #12]
 80019c0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <ETH_SetDMAConfig+0xfc>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	430b      	orrs	r3, r1
 80019dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019e0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	7b5b      	ldrb	r3, [r3, #13]
 80019e6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <ETH_SetDMAConfig+0x100>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	430b      	orrs	r3, r1
 8001a08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a0c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	7d1b      	ldrb	r3, [r3, #20]
 8001a18:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a1a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	7f5b      	ldrb	r3, [r3, #29]
 8001a20:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <ETH_SetDMAConfig+0x104>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a42:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	7f1b      	ldrb	r3, [r3, #28]
 8001a4a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a50:	4313      	orrs	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <ETH_SetDMAConfig+0x108>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a70:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	ffff87fd 	.word	0xffff87fd
 8001a84:	ffff2ffe 	.word	0xffff2ffe
 8001a88:	fffec000 	.word	0xfffec000
 8001a8c:	ffc0efef 	.word	0xffc0efef
 8001a90:	7fc0ffff 	.word	0x7fc0ffff

08001a94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0a4      	sub	sp, #144	; 0x90
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001aec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001af0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001b16:	2300      	movs	r3, #0
 8001b18:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b3e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b48:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b50:	2302      	movs	r3, #2
 8001b52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fde6 	bl	8001750 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ba2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ba8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001bb4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fee1 	bl	8001988 <ETH_SetDMAConfig>
}
 8001bc6:	bf00      	nop
 8001bc8:	3790      	adds	r7, #144	; 0x90
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	e01d      	b.n	8001c18 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68d9      	ldr	r1, [r3, #12]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	3206      	adds	r2, #6
 8001c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	3301      	adds	r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d9de      	bls.n	8001bdc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2303      	movs	r3, #3
 8001c30:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c50:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e023      	b.n	8001cb6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6919      	ldr	r1, [r3, #16]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2200      	movs	r2, #0
 8001c96:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	3212      	adds	r2, #18
 8001cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d9d8      	bls.n	8001c6e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d2a:	4b89      	ldr	r3, [pc, #548]	; (8001f50 <HAL_GPIO_Init+0x234>)
 8001d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d2e:	e194      	b.n	800205a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8186 	beq.w	8002054 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d005      	beq.n	8001d60 <HAL_GPIO_Init+0x44>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d130      	bne.n	8001dc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d96:	2201      	movs	r2, #1
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 0201 	and.w	r2, r3, #1
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d017      	beq.n	8001dfe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80e0 	beq.w	8002054 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <HAL_GPIO_Init+0x238>)
 8001e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e9a:	4a2e      	ldr	r2, [pc, #184]	; (8001f54 <HAL_GPIO_Init+0x238>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <HAL_GPIO_Init+0x238>)
 8001ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb2:	4a29      	ldr	r2, [pc, #164]	; (8001f58 <HAL_GPIO_Init+0x23c>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <HAL_GPIO_Init+0x240>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d052      	beq.n	8001f84 <HAL_GPIO_Init+0x268>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <HAL_GPIO_Init+0x244>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d031      	beq.n	8001f4a <HAL_GPIO_Init+0x22e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <HAL_GPIO_Init+0x248>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d02b      	beq.n	8001f46 <HAL_GPIO_Init+0x22a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <HAL_GPIO_Init+0x24c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d025      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <HAL_GPIO_Init+0x250>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <HAL_GPIO_Init+0x222>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <HAL_GPIO_Init+0x254>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x21e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1a      	ldr	r2, [pc, #104]	; (8001f74 <HAL_GPIO_Init+0x258>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x21a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_GPIO_Init+0x25c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x216>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a18      	ldr	r2, [pc, #96]	; (8001f7c <HAL_GPIO_Init+0x260>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x212>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <HAL_GPIO_Init+0x264>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x20e>
 8001f26:	2309      	movs	r3, #9
 8001f28:	e02d      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	e02b      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f2e:	2308      	movs	r3, #8
 8001f30:	e029      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f32:	2307      	movs	r3, #7
 8001f34:	e027      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f36:	2306      	movs	r3, #6
 8001f38:	e025      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e023      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	e021      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e01f      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e01d      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e01b      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f4e:	bf00      	nop
 8001f50:	58000080 	.word	0x58000080
 8001f54:	58024400 	.word	0x58024400
 8001f58:	58000400 	.word	0x58000400
 8001f5c:	58020000 	.word	0x58020000
 8001f60:	58020400 	.word	0x58020400
 8001f64:	58020800 	.word	0x58020800
 8001f68:	58020c00 	.word	0x58020c00
 8001f6c:	58021000 	.word	0x58021000
 8001f70:	58021400 	.word	0x58021400
 8001f74:	58021800 	.word	0x58021800
 8001f78:	58021c00 	.word	0x58021c00
 8001f7c:	58022000 	.word	0x58022000
 8001f80:	58022400 	.word	0x58022400
 8001f84:	2300      	movs	r3, #0
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	f002 0203 	and.w	r2, r2, #3
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	4093      	lsls	r3, r2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f96:	4938      	ldr	r1, [pc, #224]	; (8002078 <HAL_GPIO_Init+0x35c>)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	f47f ae63 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	3724      	adds	r7, #36	; 0x24
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	58000400 	.word	0x58000400

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002098:	e003      	b.n	80020a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800209a:	887b      	ldrh	r3, [r7, #2]
 800209c:	041a      	lsls	r2, r3, #16
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	619a      	str	r2, [r3, #24]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020c0:	887a      	ldrh	r2, [r7, #2]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	041a      	lsls	r2, r3, #16
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	400b      	ands	r3, r1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	619a      	str	r2, [r3, #24]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80020ec:	4a08      	ldr	r2, [pc, #32]	; (8002110 <HAL_HSEM_FastTake+0x2c>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3320      	adds	r3, #32
 80020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f6:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_HSEM_FastTake+0x30>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d101      	bne.n	8002100 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e000      	b.n	8002102 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	58026400 	.word	0x58026400
 8002114:	80000300 	.word	0x80000300

08002118 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002122:	4906      	ldr	r1, [pc, #24]	; (800213c <HAL_HSEM_Release+0x24>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	58026400 	.word	0x58026400

08002140 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	b08f      	sub	sp, #60	; 0x3c
 8002144:	af0a      	add	r7, sp, #40	; 0x28
 8002146:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e116      	b.n	8002380 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d106      	bne.n	8002172 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7fe fee5 	bl	8000f3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2203      	movs	r2, #3
 8002176:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f003 fe1d 	bl	8005dd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	687e      	ldr	r6, [r7, #4]
 800219e:	466d      	mov	r5, sp
 80021a0:	f106 0410 	add.w	r4, r6, #16
 80021a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80021b4:	1d33      	adds	r3, r6, #4
 80021b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b8:	6838      	ldr	r0, [r7, #0]
 80021ba:	f003 fd9b 	bl	8005cf4 <USB_CoreInit>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0d7      	b.n	8002380 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 fe0b 	bl	8005df2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e04a      	b.n	8002278 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	333d      	adds	r3, #61	; 0x3d
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	333c      	adds	r3, #60	; 0x3c
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	b298      	uxth	r0, r3
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	3344      	adds	r3, #68	; 0x44
 800221e:	4602      	mov	r2, r0
 8002220:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	3340      	adds	r3, #64	; 0x40
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	3348      	adds	r3, #72	; 0x48
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	334c      	adds	r3, #76	; 0x4c
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	3354      	adds	r3, #84	; 0x54
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	3301      	adds	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	429a      	cmp	r2, r3
 8002280:	d3af      	bcc.n	80021e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	e044      	b.n	8002312 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	3301      	adds	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	d3b5      	bcc.n	8002288 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	687e      	ldr	r6, [r7, #4]
 8002324:	466d      	mov	r5, sp
 8002326:	f106 0410 	add.w	r4, r6, #16
 800232a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800232c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800232e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002332:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002336:	e885 0003 	stmia.w	r5, {r0, r1}
 800233a:	1d33      	adds	r3, r6, #4
 800233c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800233e:	6838      	ldr	r0, [r7, #0]
 8002340:	f003 fda4 	bl	8005e8c <USB_DevInit>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e014      	b.n	8002380 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	2b01      	cmp	r3, #1
 800236c:	d102      	bne.n	8002374 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f80a 	bl	8002388 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f003 ff62 	bl	8006242 <USB_DevDisconnect>

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002388 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_PCDEx_ActivateLPM+0x44>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	10000003 	.word	0x10000003

080023d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_PWREx_ConfigSupply+0xb0>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	2b06      	cmp	r3, #6
 80023e2:	d00a      	beq.n	80023fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023e4:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_PWREx_ConfigSupply+0xb0>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d001      	beq.n	80023f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e040      	b.n	8002478 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e03e      	b.n	8002478 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <HAL_PWREx_ConfigSupply+0xb0>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002402:	491f      	ldr	r1, [pc, #124]	; (8002480 <HAL_PWREx_ConfigSupply+0xb0>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4313      	orrs	r3, r2
 8002408:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800240a:	f7fe ff2f 	bl	800126c <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002412:	f7fe ff2b 	bl	800126c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002420:	d901      	bls.n	8002426 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e028      	b.n	8002478 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <HAL_PWREx_ConfigSupply+0xb0>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002432:	d1ee      	bne.n	8002412 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b1e      	cmp	r3, #30
 8002438:	d008      	beq.n	800244c <HAL_PWREx_ConfigSupply+0x7c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b2e      	cmp	r3, #46	; 0x2e
 800243e:	d005      	beq.n	800244c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b1d      	cmp	r3, #29
 8002444:	d002      	beq.n	800244c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b2d      	cmp	r3, #45	; 0x2d
 800244a:	d114      	bne.n	8002476 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800244c:	f7fe ff0e 	bl	800126c <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002452:	e009      	b.n	8002468 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002454:	f7fe ff0a 	bl	800126c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002462:	d901      	bls.n	8002468 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e007      	b.n	8002478 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_PWREx_ConfigSupply+0xb0>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d1ee      	bne.n	8002454 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	58024800 	.word	0x58024800

08002484 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800248e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002492:	60d3      	str	r3, [r2, #12]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	58024800 	.word	0x58024800

080024a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	; 0x30
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f000 bc1d 	b.w	8002cf2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8087 	beq.w	80025d4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c6:	4b99      	ldr	r3, [pc, #612]	; (800272c <HAL_RCC_OscConfig+0x288>)
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d0:	4b96      	ldr	r3, [pc, #600]	; (800272c <HAL_RCC_OscConfig+0x288>)
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d007      	beq.n	80024ec <HAL_RCC_OscConfig+0x48>
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	2b18      	cmp	r3, #24
 80024e0:	d110      	bne.n	8002504 <HAL_RCC_OscConfig+0x60>
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d10b      	bne.n	8002504 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	4b8f      	ldr	r3, [pc, #572]	; (800272c <HAL_RCC_OscConfig+0x288>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d06c      	beq.n	80025d2 <HAL_RCC_OscConfig+0x12e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d168      	bne.n	80025d2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e3f6      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x78>
 800250e:	4b87      	ldr	r3, [pc, #540]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a86      	ldr	r2, [pc, #536]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e02e      	b.n	800257a <HAL_RCC_OscConfig+0xd6>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0x9a>
 8002524:	4b81      	ldr	r3, [pc, #516]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a80      	ldr	r2, [pc, #512]	; (800272c <HAL_RCC_OscConfig+0x288>)
 800252a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b7e      	ldr	r3, [pc, #504]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a7d      	ldr	r2, [pc, #500]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	e01d      	b.n	800257a <HAL_RCC_OscConfig+0xd6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002546:	d10c      	bne.n	8002562 <HAL_RCC_OscConfig+0xbe>
 8002548:	4b78      	ldr	r3, [pc, #480]	; (800272c <HAL_RCC_OscConfig+0x288>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a77      	ldr	r2, [pc, #476]	; (800272c <HAL_RCC_OscConfig+0x288>)
 800254e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b75      	ldr	r3, [pc, #468]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a74      	ldr	r2, [pc, #464]	; (800272c <HAL_RCC_OscConfig+0x288>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	e00b      	b.n	800257a <HAL_RCC_OscConfig+0xd6>
 8002562:	4b72      	ldr	r3, [pc, #456]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a71      	ldr	r2, [pc, #452]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b6f      	ldr	r3, [pc, #444]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a6e      	ldr	r2, [pc, #440]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002578:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d013      	beq.n	80025aa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe fe73 	bl	800126c <HAL_GetTick>
 8002586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258a:	f7fe fe6f 	bl	800126c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b64      	cmp	r3, #100	; 0x64
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e3aa      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800259c:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_OscConfig+0x288>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0xe6>
 80025a8:	e014      	b.n	80025d4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe fe5f 	bl	800126c <HAL_GetTick>
 80025ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b2:	f7fe fe5b 	bl	800126c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b64      	cmp	r3, #100	; 0x64
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e396      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025c4:	4b59      	ldr	r3, [pc, #356]	; (800272c <HAL_RCC_OscConfig+0x288>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f0      	bne.n	80025b2 <HAL_RCC_OscConfig+0x10e>
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80cb 	beq.w	8002778 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e2:	4b52      	ldr	r3, [pc, #328]	; (800272c <HAL_RCC_OscConfig+0x288>)
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025ec:	4b4f      	ldr	r3, [pc, #316]	; (800272c <HAL_RCC_OscConfig+0x288>)
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_RCC_OscConfig+0x164>
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	2b18      	cmp	r3, #24
 80025fc:	d156      	bne.n	80026ac <HAL_RCC_OscConfig+0x208>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d151      	bne.n	80026ac <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002608:	4b48      	ldr	r3, [pc, #288]	; (800272c <HAL_RCC_OscConfig+0x288>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_OscConfig+0x17c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e368      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002620:	4b42      	ldr	r3, [pc, #264]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 0219 	bic.w	r2, r3, #25
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	493f      	ldr	r1, [pc, #252]	; (800272c <HAL_RCC_OscConfig+0x288>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002632:	f7fe fe1b 	bl	800126c <HAL_GetTick>
 8002636:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263a:	f7fe fe17 	bl	800126c <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e352      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264c:	4b37      	ldr	r3, [pc, #220]	; (800272c <HAL_RCC_OscConfig+0x288>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	f7fe fe38 	bl	80012cc <HAL_GetREVID>
 800265c:	4603      	mov	r3, r0
 800265e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002662:	4293      	cmp	r3, r2
 8002664:	d817      	bhi.n	8002696 <HAL_RCC_OscConfig+0x1f2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d108      	bne.n	8002680 <HAL_RCC_OscConfig+0x1dc>
 800266e:	4b2f      	ldr	r3, [pc, #188]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002676:	4a2d      	ldr	r2, [pc, #180]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267e:	e07b      	b.n	8002778 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b2a      	ldr	r3, [pc, #168]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	031b      	lsls	r3, r3, #12
 800268e:	4927      	ldr	r1, [pc, #156]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002694:	e070      	b.n	8002778 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	061b      	lsls	r3, r3, #24
 80026a4:	4921      	ldr	r1, [pc, #132]	; (800272c <HAL_RCC_OscConfig+0x288>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026aa:	e065      	b.n	8002778 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d048      	beq.n	8002746 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_RCC_OscConfig+0x288>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 0219 	bic.w	r2, r3, #25
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	491a      	ldr	r1, [pc, #104]	; (800272c <HAL_RCC_OscConfig+0x288>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7fe fdd1 	bl	800126c <HAL_GetTick>
 80026ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ce:	f7fe fdcd 	bl	800126c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e308      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCC_OscConfig+0x288>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	f7fe fdee 	bl	80012cc <HAL_GetREVID>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d81a      	bhi.n	8002730 <HAL_RCC_OscConfig+0x28c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d108      	bne.n	8002714 <HAL_RCC_OscConfig+0x270>
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800270a:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_RCC_OscConfig+0x288>)
 800270c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002710:	6053      	str	r3, [r2, #4]
 8002712:	e031      	b.n	8002778 <HAL_RCC_OscConfig+0x2d4>
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	031b      	lsls	r3, r3, #12
 8002722:	4902      	ldr	r1, [pc, #8]	; (800272c <HAL_RCC_OscConfig+0x288>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
 8002728:	e026      	b.n	8002778 <HAL_RCC_OscConfig+0x2d4>
 800272a:	bf00      	nop
 800272c:	58024400 	.word	0x58024400
 8002730:	4b9a      	ldr	r3, [pc, #616]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	4997      	ldr	r1, [pc, #604]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
 8002744:	e018      	b.n	8002778 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002746:	4b95      	ldr	r3, [pc, #596]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a94      	ldr	r2, [pc, #592]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fd8b 	bl	800126c <HAL_GetTick>
 8002756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275a:	f7fe fd87 	bl	800126c <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e2c2      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800276c:	4b8b      	ldr	r3, [pc, #556]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80a9 	beq.w	80028d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002786:	4b85      	ldr	r3, [pc, #532]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800278e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002790:	4b82      	ldr	r3, [pc, #520]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d007      	beq.n	80027ac <HAL_RCC_OscConfig+0x308>
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b18      	cmp	r3, #24
 80027a0:	d13a      	bne.n	8002818 <HAL_RCC_OscConfig+0x374>
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d135      	bne.n	8002818 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ac:	4b7b      	ldr	r3, [pc, #492]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_OscConfig+0x320>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b80      	cmp	r3, #128	; 0x80
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e296      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027c4:	f7fe fd82 	bl	80012cc <HAL_GetREVID>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d817      	bhi.n	8002802 <HAL_RCC_OscConfig+0x35e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d108      	bne.n	80027ec <HAL_RCC_OscConfig+0x348>
 80027da:	4b70      	ldr	r3, [pc, #448]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027e2:	4a6e      	ldr	r2, [pc, #440]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ea:	e075      	b.n	80028d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027ec:	4b6b      	ldr	r3, [pc, #428]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	069b      	lsls	r3, r3, #26
 80027fa:	4968      	ldr	r1, [pc, #416]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002800:	e06a      	b.n	80028d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002802:	4b66      	ldr	r3, [pc, #408]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	061b      	lsls	r3, r3, #24
 8002810:	4962      	ldr	r1, [pc, #392]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002816:	e05f      	b.n	80028d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d042      	beq.n	80028a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002820:	4b5e      	ldr	r3, [pc, #376]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a5d      	ldr	r2, [pc, #372]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fd1e 	bl	800126c <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002834:	f7fe fd1a 	bl	800126c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e255      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002846:	4b55      	ldr	r3, [pc, #340]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002852:	f7fe fd3b 	bl	80012cc <HAL_GetREVID>
 8002856:	4603      	mov	r3, r0
 8002858:	f241 0203 	movw	r2, #4099	; 0x1003
 800285c:	4293      	cmp	r3, r2
 800285e:	d817      	bhi.n	8002890 <HAL_RCC_OscConfig+0x3ec>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	2b20      	cmp	r3, #32
 8002866:	d108      	bne.n	800287a <HAL_RCC_OscConfig+0x3d6>
 8002868:	4b4c      	ldr	r3, [pc, #304]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002870:	4a4a      	ldr	r2, [pc, #296]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002872:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002876:	6053      	str	r3, [r2, #4]
 8002878:	e02e      	b.n	80028d8 <HAL_RCC_OscConfig+0x434>
 800287a:	4b48      	ldr	r3, [pc, #288]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	069b      	lsls	r3, r3, #26
 8002888:	4944      	ldr	r1, [pc, #272]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
 800288e:	e023      	b.n	80028d8 <HAL_RCC_OscConfig+0x434>
 8002890:	4b42      	ldr	r3, [pc, #264]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	493f      	ldr	r1, [pc, #252]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60cb      	str	r3, [r1, #12]
 80028a4:	e018      	b.n	80028d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028a6:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a3c      	ldr	r2, [pc, #240]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 80028ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7fe fcdb 	bl	800126c <HAL_GetTick>
 80028b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028ba:	f7fe fcd7 	bl	800126c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e212      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028cc:	4b33      	ldr	r3, [pc, #204]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f0      	bne.n	80028ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d036      	beq.n	8002952 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d019      	beq.n	8002920 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ec:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 80028ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f0:	4a2a      	ldr	r2, [pc, #168]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe fcb8 	bl	800126c <HAL_GetTick>
 80028fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002900:	f7fe fcb4 	bl	800126c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e1ef      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x45c>
 800291e:	e018      	b.n	8002952 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002920:	4b1e      	ldr	r3, [pc, #120]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002924:	4a1d      	ldr	r2, [pc, #116]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe fc9e 	bl	800126c <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe fc9a 	bl	800126c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1d5      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d039      	beq.n	80029d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d01c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a0c      	ldr	r2, [pc, #48]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 800296c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002970:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002972:	f7fe fc7b 	bl	800126c <HAL_GetTick>
 8002976:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800297a:	f7fe fc77 	bl	800126c <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e1b2      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCC_OscConfig+0x4f8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x4d6>
 8002998:	e01b      	b.n	80029d2 <HAL_RCC_OscConfig+0x52e>
 800299a:	bf00      	nop
 800299c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029a0:	4b9b      	ldr	r3, [pc, #620]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a9a      	ldr	r2, [pc, #616]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 80029a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029ac:	f7fe fc5e 	bl	800126c <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029b4:	f7fe fc5a 	bl	800126c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e195      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029c6:	4b92      	ldr	r3, [pc, #584]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8081 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029e0:	4b8c      	ldr	r3, [pc, #560]	; (8002c14 <HAL_RCC_OscConfig+0x770>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a8b      	ldr	r2, [pc, #556]	; (8002c14 <HAL_RCC_OscConfig+0x770>)
 80029e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ec:	f7fe fc3e 	bl	800126c <HAL_GetTick>
 80029f0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029f4:	f7fe fc3a 	bl	800126c <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e175      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a06:	4b83      	ldr	r3, [pc, #524]	; (8002c14 <HAL_RCC_OscConfig+0x770>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d106      	bne.n	8002a28 <HAL_RCC_OscConfig+0x584>
 8002a1a:	4b7d      	ldr	r3, [pc, #500]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	4a7c      	ldr	r2, [pc, #496]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6713      	str	r3, [r2, #112]	; 0x70
 8002a26:	e02d      	b.n	8002a84 <HAL_RCC_OscConfig+0x5e0>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10c      	bne.n	8002a4a <HAL_RCC_OscConfig+0x5a6>
 8002a30:	4b77      	ldr	r3, [pc, #476]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	4a76      	ldr	r2, [pc, #472]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3c:	4b74      	ldr	r3, [pc, #464]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	4a73      	ldr	r2, [pc, #460]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a42:	f023 0304 	bic.w	r3, r3, #4
 8002a46:	6713      	str	r3, [r2, #112]	; 0x70
 8002a48:	e01c      	b.n	8002a84 <HAL_RCC_OscConfig+0x5e0>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5c8>
 8002a52:	4b6f      	ldr	r3, [pc, #444]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a6e      	ldr	r2, [pc, #440]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5e:	4b6c      	ldr	r3, [pc, #432]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4a6b      	ldr	r2, [pc, #428]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0x5e0>
 8002a6c:	4b68      	ldr	r3, [pc, #416]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a70:	4a67      	ldr	r2, [pc, #412]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6713      	str	r3, [r2, #112]	; 0x70
 8002a78:	4b65      	ldr	r3, [pc, #404]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	4a64      	ldr	r2, [pc, #400]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	f023 0304 	bic.w	r3, r3, #4
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fbee 	bl	800126c <HAL_GetTick>
 8002a90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe fbea 	bl	800126c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e123      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aaa:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0ee      	beq.n	8002a94 <HAL_RCC_OscConfig+0x5f0>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fbd8 	bl	800126c <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fbd4 	bl	800126c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e10d      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ad6:	4b4e      	ldr	r3, [pc, #312]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ee      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8102 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002aec:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002af4:	2b18      	cmp	r3, #24
 8002af6:	f000 80bd 	beq.w	8002c74 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	f040 809e 	bne.w	8002c40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b04:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a41      	ldr	r2, [pc, #260]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fbac 	bl	800126c <HAL_GetTick>
 8002b14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe fba8 	bl	800126c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0e3      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b2a:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b36:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3a:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <HAL_RCC_OscConfig+0x774>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	4931      	ldr	r1, [pc, #196]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	628b      	str	r3, [r1, #40]	; 0x28
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	3b01      	subs	r3, #1
 8002b56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	025b      	lsls	r3, r3, #9
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	061b      	lsls	r3, r3, #24
 8002b7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b80:	4923      	ldr	r1, [pc, #140]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b86:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b92:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b96:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_RCC_OscConfig+0x778>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b9e:	00d2      	lsls	r2, r2, #3
 8002ba0:	491b      	ldr	r1, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	f023 020c 	bic.w	r2, r3, #12
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4917      	ldr	r1, [pc, #92]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	f023 0202 	bic.w	r2, r3, #2
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	4912      	ldr	r1, [pc, #72]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	4a10      	ldr	r2, [pc, #64]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7fe fb31 	bl	800126c <HAL_GetTick>
 8002c0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c0c:	e011      	b.n	8002c32 <HAL_RCC_OscConfig+0x78e>
 8002c0e:	bf00      	nop
 8002c10:	58024400 	.word	0x58024400
 8002c14:	58024800 	.word	0x58024800
 8002c18:	fffffc0c 	.word	0xfffffc0c
 8002c1c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe fb24 	bl	800126c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e05f      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c32:	4b32      	ldr	r3, [pc, #200]	; (8002cfc <HAL_RCC_OscConfig+0x858>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x77c>
 8002c3e:	e057      	b.n	8002cf0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c40:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_RCC_OscConfig+0x858>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <HAL_RCC_OscConfig+0x858>)
 8002c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fb0e 	bl	800126c <HAL_GetTick>
 8002c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe fb0a 	bl	800126c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e045      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c66:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_RCC_OscConfig+0x858>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x7b0>
 8002c72:	e03d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <HAL_RCC_OscConfig+0x858>)
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c7a:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_RCC_OscConfig+0x858>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d031      	beq.n	8002cec <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f003 0203 	and.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d12a      	bne.n	8002cec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d122      	bne.n	8002cec <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d11a      	bne.n	8002cec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	0a5b      	lsrs	r3, r3, #9
 8002cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d111      	bne.n	8002cec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	0c1b      	lsrs	r3, r3, #16
 8002ccc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d108      	bne.n	8002cec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	0e1b      	lsrs	r3, r3, #24
 8002cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3730      	adds	r7, #48	; 0x30
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	58024400 	.word	0x58024400

08002d00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e19c      	b.n	800304e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d14:	4b8a      	ldr	r3, [pc, #552]	; (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d910      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b87      	ldr	r3, [pc, #540]	; (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 020f 	bic.w	r2, r3, #15
 8002d2a:	4985      	ldr	r1, [pc, #532]	; (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b83      	ldr	r3, [pc, #524]	; (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e184      	b.n	800304e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d010      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	4b7b      	ldr	r3, [pc, #492]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d908      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d60:	4b78      	ldr	r3, [pc, #480]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	4975      	ldr	r1, [pc, #468]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	4b70      	ldr	r3, [pc, #448]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d908      	bls.n	8002da0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d8e:	4b6d      	ldr	r3, [pc, #436]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	496a      	ldr	r1, [pc, #424]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d010      	beq.n	8002dce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699a      	ldr	r2, [r3, #24]
 8002db0:	4b64      	ldr	r3, [pc, #400]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d908      	bls.n	8002dce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dbc:	4b61      	ldr	r3, [pc, #388]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	495e      	ldr	r1, [pc, #376]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d908      	bls.n	8002dfc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dea:	4b56      	ldr	r3, [pc, #344]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4953      	ldr	r1, [pc, #332]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	4b4d      	ldr	r3, [pc, #308]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d908      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f023 020f 	bic.w	r2, r3, #15
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4947      	ldr	r1, [pc, #284]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d055      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e36:	4b43      	ldr	r3, [pc, #268]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	4940      	ldr	r1, [pc, #256]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e50:	4b3c      	ldr	r3, [pc, #240]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d121      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0f6      	b.n	800304e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e68:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d115      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0ea      	b.n	800304e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e80:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0de      	b.n	800304e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e90:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0d6      	b.n	800304e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea0:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f023 0207 	bic.w	r2, r3, #7
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4925      	ldr	r1, [pc, #148]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fe f9db 	bl	800126c <HAL_GetTick>
 8002eb6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eba:	f7fe f9d7 	bl	800126c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0be      	b.n	800304e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed0:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d1eb      	bne.n	8002eba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d010      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d208      	bcs.n	8002f10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f023 020f 	bic.w	r2, r3, #15
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	490e      	ldr	r1, [pc, #56]	; (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d214      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 020f 	bic.w	r2, r3, #15
 8002f26:	4906      	ldr	r1, [pc, #24]	; (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e086      	b.n	800304e <HAL_RCC_ClockConfig+0x34e>
 8002f40:	52002000 	.word	0x52002000
 8002f44:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	4b3f      	ldr	r3, [pc, #252]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d208      	bcs.n	8002f76 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f64:	4b3c      	ldr	r3, [pc, #240]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	4939      	ldr	r1, [pc, #228]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	4b34      	ldr	r3, [pc, #208]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d208      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f92:	4b31      	ldr	r3, [pc, #196]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	492e      	ldr	r1, [pc, #184]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699a      	ldr	r2, [r3, #24]
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d208      	bcs.n	8002fd2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fc0:	4b25      	ldr	r3, [pc, #148]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	4922      	ldr	r1, [pc, #136]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d010      	beq.n	8003000 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d208      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	4917      	ldr	r1, [pc, #92]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003000:	f000 f834 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8003004:	4602      	mov	r2, r0
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	4912      	ldr	r1, [pc, #72]	; (800305c <HAL_RCC_ClockConfig+0x35c>)
 8003012:	5ccb      	ldrb	r3, [r1, r3]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
 800301c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <HAL_RCC_ClockConfig+0x358>)
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	4a0d      	ldr	r2, [pc, #52]	; (800305c <HAL_RCC_ClockConfig+0x35c>)
 8003028:	5cd3      	ldrb	r3, [r2, r3]
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <HAL_RCC_ClockConfig+0x360>)
 8003036:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003038:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <HAL_RCC_ClockConfig+0x364>)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_RCC_ClockConfig+0x368>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe f8c8 	bl	80011d8 <HAL_InitTick>
 8003048:	4603      	mov	r3, r0
 800304a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	58024400 	.word	0x58024400
 800305c:	08006c6c 	.word	0x08006c6c
 8003060:	24000004 	.word	0x24000004
 8003064:	24000000 	.word	0x24000000
 8003068:	24000008 	.word	0x24000008

0800306c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003072:	4bb3      	ldr	r3, [pc, #716]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800307a:	2b18      	cmp	r3, #24
 800307c:	f200 8155 	bhi.w	800332a <HAL_RCC_GetSysClockFreq+0x2be>
 8003080:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	080030ed 	.word	0x080030ed
 800308c:	0800332b 	.word	0x0800332b
 8003090:	0800332b 	.word	0x0800332b
 8003094:	0800332b 	.word	0x0800332b
 8003098:	0800332b 	.word	0x0800332b
 800309c:	0800332b 	.word	0x0800332b
 80030a0:	0800332b 	.word	0x0800332b
 80030a4:	0800332b 	.word	0x0800332b
 80030a8:	08003113 	.word	0x08003113
 80030ac:	0800332b 	.word	0x0800332b
 80030b0:	0800332b 	.word	0x0800332b
 80030b4:	0800332b 	.word	0x0800332b
 80030b8:	0800332b 	.word	0x0800332b
 80030bc:	0800332b 	.word	0x0800332b
 80030c0:	0800332b 	.word	0x0800332b
 80030c4:	0800332b 	.word	0x0800332b
 80030c8:	08003119 	.word	0x08003119
 80030cc:	0800332b 	.word	0x0800332b
 80030d0:	0800332b 	.word	0x0800332b
 80030d4:	0800332b 	.word	0x0800332b
 80030d8:	0800332b 	.word	0x0800332b
 80030dc:	0800332b 	.word	0x0800332b
 80030e0:	0800332b 	.word	0x0800332b
 80030e4:	0800332b 	.word	0x0800332b
 80030e8:	0800311f 	.word	0x0800311f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030ec:	4b94      	ldr	r3, [pc, #592]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d009      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030f8:	4b91      	ldr	r3, [pc, #580]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	08db      	lsrs	r3, r3, #3
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	4a90      	ldr	r2, [pc, #576]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
 8003108:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800310a:	e111      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800310c:	4b8d      	ldr	r3, [pc, #564]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800310e:	61bb      	str	r3, [r7, #24]
    break;
 8003110:	e10e      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003112:	4b8d      	ldr	r3, [pc, #564]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003114:	61bb      	str	r3, [r7, #24]
    break;
 8003116:	e10b      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003118:	4b8c      	ldr	r3, [pc, #560]	; (800334c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800311a:	61bb      	str	r3, [r7, #24]
    break;
 800311c:	e108      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800311e:	4b88      	ldr	r3, [pc, #544]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003128:	4b85      	ldr	r3, [pc, #532]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003132:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003134:	4b82      	ldr	r3, [pc, #520]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800313e:	4b80      	ldr	r3, [pc, #512]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003142:	08db      	lsrs	r3, r3, #3
 8003144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003156:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80e1 	beq.w	8003324 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b02      	cmp	r3, #2
 8003166:	f000 8083 	beq.w	8003270 <HAL_RCC_GetSysClockFreq+0x204>
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b02      	cmp	r3, #2
 800316e:	f200 80a1 	bhi.w	80032b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x114>
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d056      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x1c0>
 800317e:	e099      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003180:	4b6f      	ldr	r3, [pc, #444]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d02d      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800318c:	4b6c      	ldr	r3, [pc, #432]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	08db      	lsrs	r3, r3, #3
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	4a6b      	ldr	r2, [pc, #428]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031b6:	4b62      	ldr	r3, [pc, #392]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003350 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80031e6:	e087      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003354 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031fa:	4b51      	ldr	r3, [pc, #324]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800320a:	ed97 6a02 	vldr	s12, [r7, #8]
 800320e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003350 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800321a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800321e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800322a:	e065      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003236:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003358 <HAL_RCC_GetSysClockFreq+0x2ec>
 800323a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800323e:	4b40      	ldr	r3, [pc, #256]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800324e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003252:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003350 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800325a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800325e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800326e:	e043      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800335c <HAL_RCC_GetSysClockFreq+0x2f0>
 800327e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003282:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328a:	ee07 3a90 	vmov	s15, r3
 800328e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003292:	ed97 6a02 	vldr	s12, [r7, #8]
 8003296:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003350 <HAL_RCC_GetSysClockFreq+0x2e4>
 800329a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032b2:	e021      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003358 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c6:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003350 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	0a5b      	lsrs	r3, r3, #9
 80032fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003302:	3301      	adds	r3, #1
 8003304:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003310:	edd7 6a07 	vldr	s13, [r7, #28]
 8003314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800331c:	ee17 3a90 	vmov	r3, s15
 8003320:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003322:	e005      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	61bb      	str	r3, [r7, #24]
    break;
 8003328:	e002      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800332c:	61bb      	str	r3, [r7, #24]
    break;
 800332e:	bf00      	nop
  }

  return sysclockfreq;
 8003330:	69bb      	ldr	r3, [r7, #24]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3724      	adds	r7, #36	; 0x24
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	58024400 	.word	0x58024400
 8003344:	03d09000 	.word	0x03d09000
 8003348:	003d0900 	.word	0x003d0900
 800334c:	007a1200 	.word	0x007a1200
 8003350:	46000000 	.word	0x46000000
 8003354:	4c742400 	.word	0x4c742400
 8003358:	4a742400 	.word	0x4a742400
 800335c:	4af42400 	.word	0x4af42400

08003360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003366:	f7ff fe81 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490f      	ldr	r1, [pc, #60]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	fa22 f303 	lsr.w	r3, r2, r3
 8003382:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	4a09      	ldr	r2, [pc, #36]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800338e:	5cd3      	ldrb	r3, [r2, r3]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	fa22 f303 	lsr.w	r3, r2, r3
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800339c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800339e:	4a07      	ldr	r2, [pc, #28]	; (80033bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	58024400 	.word	0x58024400
 80033b4:	08006c6c 	.word	0x08006c6c
 80033b8:	24000004 	.word	0x24000004
 80033bc:	24000000 	.word	0x24000000

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033c4:	f7ff ffcc 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4904      	ldr	r1, [pc, #16]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	58024400 	.word	0x58024400
 80033e8:	08006c6c 	.word	0x08006c6c

080033ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033f0:	f7ff ffb6 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4904      	ldr	r1, [pc, #16]	; (8003414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}
 8003410:	58024400 	.word	0x58024400
 8003414:	08006c6c 	.word	0x08006c6c

08003418 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003420:	2300      	movs	r3, #0
 8003422:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003424:	2300      	movs	r3, #0
 8003426:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d03f      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003438:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800343c:	d02a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800343e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003442:	d824      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003448:	d018      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800344a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800344e:	d81e      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003458:	d007      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800345a:	e018      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345c:	4ba3      	ldr	r3, [pc, #652]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4aa2      	ldr	r2, [pc, #648]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003466:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003468:	e015      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	2102      	movs	r1, #2
 8003470:	4618      	mov	r0, r3
 8003472:	f001 f9d5 	bl	8004820 <RCCEx_PLL2_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800347a:	e00c      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3324      	adds	r3, #36	; 0x24
 8003480:	2102      	movs	r1, #2
 8003482:	4618      	mov	r0, r3
 8003484:	f001 fa7e 	bl	8004984 <RCCEx_PLL3_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800348c:	e003      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
      break;
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003496:	7dfb      	ldrb	r3, [r7, #23]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800349c:	4b93      	ldr	r3, [pc, #588]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800349e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a8:	4990      	ldr	r1, [pc, #576]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	650b      	str	r3, [r1, #80]	; 0x50
 80034ae:	e001      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d03d      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d826      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034e5 	.word	0x080034e5
 80034d4:	080034f3 	.word	0x080034f3
 80034d8:	08003505 	.word	0x08003505
 80034dc:	0800351d 	.word	0x0800351d
 80034e0:	0800351d 	.word	0x0800351d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e4:	4b81      	ldr	r3, [pc, #516]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	4a80      	ldr	r2, [pc, #512]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034f0:	e015      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 f991 	bl	8004820 <RCCEx_PLL2_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003502:	e00c      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3324      	adds	r3, #36	; 0x24
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fa3a 	bl	8004984 <RCCEx_PLL3_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003514:	e003      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	75fb      	strb	r3, [r7, #23]
      break;
 800351a:	e000      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800351c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003524:	4b71      	ldr	r3, [pc, #452]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003528:	f023 0207 	bic.w	r2, r3, #7
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003530:	496e      	ldr	r1, [pc, #440]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	650b      	str	r3, [r1, #80]	; 0x50
 8003536:	e001      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	7dfb      	ldrb	r3, [r7, #23]
 800353a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003544:	2b00      	cmp	r3, #0
 8003546:	d042      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003550:	d02b      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003556:	d825      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003558:	2bc0      	cmp	r3, #192	; 0xc0
 800355a:	d028      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 800355c:	2bc0      	cmp	r3, #192	; 0xc0
 800355e:	d821      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003560:	2b80      	cmp	r3, #128	; 0x80
 8003562:	d016      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003564:	2b80      	cmp	r3, #128	; 0x80
 8003566:	d81d      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d007      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003570:	e018      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003572:	4b5e      	ldr	r3, [pc, #376]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	4a5d      	ldr	r2, [pc, #372]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800357c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800357e:	e017      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f001 f94a 	bl	8004820 <RCCEx_PLL2_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003590:	e00e      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3324      	adds	r3, #36	; 0x24
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f001 f9f3 	bl	8004984 <RCCEx_PLL3_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035a2:	e005      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	75fb      	strb	r3, [r7, #23]
      break;
 80035a8:	e002      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80035aa:	bf00      	nop
 80035ac:	e000      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80035ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035b6:	4b4d      	ldr	r3, [pc, #308]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	494a      	ldr	r1, [pc, #296]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	650b      	str	r3, [r1, #80]	; 0x50
 80035c8:	e001      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d049      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035e4:	d030      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80035e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ea:	d82a      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035f0:	d02c      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80035f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035f6:	d824      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035fc:	d018      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80035fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003602:	d81e      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800360c:	d007      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800360e:	e018      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003610:	4b36      	ldr	r3, [pc, #216]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	4a35      	ldr	r2, [pc, #212]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800361c:	e017      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3304      	adds	r3, #4
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f001 f8fb 	bl	8004820 <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800362e:	e00e      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3324      	adds	r3, #36	; 0x24
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f001 f9a4 	bl	8004984 <RCCEx_PLL3_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003640:	e005      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
      break;
 8003646:	e002      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003648:	bf00      	nop
 800364a:	e000      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800364c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364e:	7dfb      	ldrb	r3, [r7, #23]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003658:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003662:	4922      	ldr	r1, [pc, #136]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	658b      	str	r3, [r1, #88]	; 0x58
 8003668:	e001      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003676:	2b00      	cmp	r3, #0
 8003678:	d04b      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003680:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003684:	d030      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003686:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800368a:	d82a      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800368c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003690:	d02e      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003692:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003696:	d824      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800369c:	d018      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800369e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036a2:	d81e      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80036a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ac:	d007      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80036ae:	e018      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036bc:	e019      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 f8ab 	bl	8004820 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036ce:	e010      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3324      	adds	r3, #36	; 0x24
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 f954 	bl	8004984 <RCCEx_PLL3_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e0:	e007      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
      break;
 80036e6:	e004      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80036e8:	bf00      	nop
 80036ea:	e002      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80036ec:	58024400 	.word	0x58024400
      break;
 80036f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036f8:	4b99      	ldr	r3, [pc, #612]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003706:	4996      	ldr	r1, [pc, #600]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003708:	4313      	orrs	r3, r2
 800370a:	658b      	str	r3, [r1, #88]	; 0x58
 800370c:	e001      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d032      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003722:	2b30      	cmp	r3, #48	; 0x30
 8003724:	d01c      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003726:	2b30      	cmp	r3, #48	; 0x30
 8003728:	d817      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800372a:	2b20      	cmp	r3, #32
 800372c:	d00c      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800372e:	2b20      	cmp	r3, #32
 8003730:	d813      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003736:	2b10      	cmp	r3, #16
 8003738:	d10f      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373a:	4b89      	ldr	r3, [pc, #548]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	4a88      	ldr	r2, [pc, #544]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003744:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003746:	e00e      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	2102      	movs	r1, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f001 f866 	bl	8004820 <RCCEx_PLL2_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003758:	e005      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
      break;
 800375e:	e002      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d109      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800376c:	4b7c      	ldr	r3, [pc, #496]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800376e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003770:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003778:	4979      	ldr	r1, [pc, #484]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800377a:	4313      	orrs	r3, r2
 800377c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800377e:	e001      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d047      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003798:	d030      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800379a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800379e:	d82a      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80037a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037a4:	d02c      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80037a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037aa:	d824      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80037ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b0:	d018      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80037b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b6:	d81e      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80037bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c0:	d007      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80037c2:	e018      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c4:	4b66      	ldr	r3, [pc, #408]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	4a65      	ldr	r2, [pc, #404]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037d0:	e017      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f821 	bl	8004820 <RCCEx_PLL2_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037e2:	e00e      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3324      	adds	r3, #36	; 0x24
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 f8ca 	bl	8004984 <RCCEx_PLL3_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037f4:	e005      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]
      break;
 80037fa:	e002      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80037fc:	bf00      	nop
 80037fe:	e000      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003808:	4b55      	ldr	r3, [pc, #340]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800380a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	4952      	ldr	r1, [pc, #328]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003816:	4313      	orrs	r3, r2
 8003818:	650b      	str	r3, [r1, #80]	; 0x50
 800381a:	e001      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d049      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003834:	d02e      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383a:	d828      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800383c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003840:	d02a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003842:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003846:	d822      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003848:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800384c:	d026      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800384e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003852:	d81c      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003858:	d010      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800385a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800385e:	d816      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01d      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003868:	d111      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3304      	adds	r3, #4
 800386e:	2101      	movs	r1, #1
 8003870:	4618      	mov	r0, r3
 8003872:	f000 ffd5 	bl	8004820 <RCCEx_PLL2_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800387a:	e012      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3324      	adds	r3, #36	; 0x24
 8003880:	2101      	movs	r1, #1
 8003882:	4618      	mov	r0, r3
 8003884:	f001 f87e 	bl	8004984 <RCCEx_PLL3_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800388c:	e009      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
      break;
 8003892:	e006      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003894:	bf00      	nop
 8003896:	e004      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003898:	bf00      	nop
 800389a:	e002      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800389c:	bf00      	nop
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80038a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	492a      	ldr	r1, [pc, #168]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	650b      	str	r3, [r1, #80]	; 0x50
 80038ba:	e001      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d04d      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d6:	d02e      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80038d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038dc:	d828      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e2:	d02a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d822      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038ee:	d026      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80038f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038f4:	d81c      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038fa:	d010      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80038fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003900:	d816      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01d      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800390a:	d111      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f000 ff84 	bl	8004820 <RCCEx_PLL2_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800391c:	e012      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3324      	adds	r3, #36	; 0x24
 8003922:	2101      	movs	r1, #1
 8003924:	4618      	mov	r0, r3
 8003926:	f001 f82d 	bl	8004984 <RCCEx_PLL3_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800392e:	e009      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	75fb      	strb	r3, [r7, #23]
      break;
 8003934:	e006      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003936:	bf00      	nop
 8003938:	e004      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800393a:	bf00      	nop
 800393c:	e002      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800393e:	bf00      	nop
 8003940:	e000      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003944:	7dfb      	ldrb	r3, [r7, #23]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10c      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003958:	4901      	ldr	r1, [pc, #4]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800395a:	4313      	orrs	r3, r2
 800395c:	658b      	str	r3, [r1, #88]	; 0x58
 800395e:	e003      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
 8003966:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d02f      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800397c:	d00e      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800397e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003982:	d814      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d015      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800398c:	d10f      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800398e:	4baf      	ldr	r3, [pc, #700]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	4aae      	ldr	r2, [pc, #696]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003998:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800399a:	e00c      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	2101      	movs	r1, #1
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 ff3c 	bl	8004820 <RCCEx_PLL2_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80039ac:	e003      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
      break;
 80039b2:	e000      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80039b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039bc:	4ba3      	ldr	r3, [pc, #652]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c8:	49a0      	ldr	r1, [pc, #640]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	650b      	str	r3, [r1, #80]	; 0x50
 80039ce:	e001      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d032      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d81b      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80039e8:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a27 	.word	0x08003a27
 80039f4:	08003a01 	.word	0x08003a01
 80039f8:	08003a0f 	.word	0x08003a0f
 80039fc:	08003a27 	.word	0x08003a27
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a00:	4b92      	ldr	r3, [pc, #584]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	4a91      	ldr	r2, [pc, #580]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a0c:	e00c      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3304      	adds	r3, #4
 8003a12:	2102      	movs	r1, #2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 ff03 	bl	8004820 <RCCEx_PLL2_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a1e:	e003      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75fb      	strb	r3, [r7, #23]
      break;
 8003a24:	e000      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a2e:	4b87      	ldr	r3, [pc, #540]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	f023 0203 	bic.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	4984      	ldr	r1, [pc, #528]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a40:	e001      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 8086 	beq.w	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a54:	4b7e      	ldr	r3, [pc, #504]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a7d      	ldr	r2, [pc, #500]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a60:	f7fd fc04 	bl	800126c <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a66:	e009      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a68:	f7fd fc00 	bl	800126c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d902      	bls.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	75fb      	strb	r3, [r7, #23]
        break;
 8003a7a:	e005      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a7c:	4b74      	ldr	r3, [pc, #464]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ef      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d166      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a8e:	4b6f      	ldr	r3, [pc, #444]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a98:	4053      	eors	r3, r2
 8003a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d013      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aa2:	4b6a      	ldr	r3, [pc, #424]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aaa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aac:	4b67      	ldr	r3, [pc, #412]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a66      	ldr	r2, [pc, #408]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab8:	4b64      	ldr	r3, [pc, #400]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	4a63      	ldr	r2, [pc, #396]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ac4:	4a61      	ldr	r2, [pc, #388]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad4:	d115      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fd fbc9 	bl	800126c <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003adc:	e00b      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fd fbc5 	bl	800126c <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d902      	bls.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	75fb      	strb	r3, [r7, #23]
            break;
 8003af4:	e005      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003af6:	4b55      	ldr	r3, [pc, #340]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0ed      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d126      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b16:	d10d      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003b18:	4b4c      	ldr	r3, [pc, #304]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b26:	0919      	lsrs	r1, r3, #4
 8003b28:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003b2a:	400b      	ands	r3, r1
 8003b2c:	4947      	ldr	r1, [pc, #284]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	610b      	str	r3, [r1, #16]
 8003b32:	e005      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003b34:	4b45      	ldr	r3, [pc, #276]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	4a44      	ldr	r2, [pc, #272]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b3e:	6113      	str	r3, [r2, #16]
 8003b40:	4b42      	ldr	r3, [pc, #264]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4e:	493f      	ldr	r1, [pc, #252]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	670b      	str	r3, [r1, #112]	; 0x70
 8003b54:	e004      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
 8003b58:	75bb      	strb	r3, [r7, #22]
 8003b5a:	e001      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8085 	beq.w	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b72:	2b28      	cmp	r3, #40	; 0x28
 8003b74:	d866      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003c59 	.word	0x08003c59
 8003b80:	08003c45 	.word	0x08003c45
 8003b84:	08003c45 	.word	0x08003c45
 8003b88:	08003c45 	.word	0x08003c45
 8003b8c:	08003c45 	.word	0x08003c45
 8003b90:	08003c45 	.word	0x08003c45
 8003b94:	08003c45 	.word	0x08003c45
 8003b98:	08003c45 	.word	0x08003c45
 8003b9c:	08003c21 	.word	0x08003c21
 8003ba0:	08003c45 	.word	0x08003c45
 8003ba4:	08003c45 	.word	0x08003c45
 8003ba8:	08003c45 	.word	0x08003c45
 8003bac:	08003c45 	.word	0x08003c45
 8003bb0:	08003c45 	.word	0x08003c45
 8003bb4:	08003c45 	.word	0x08003c45
 8003bb8:	08003c45 	.word	0x08003c45
 8003bbc:	08003c33 	.word	0x08003c33
 8003bc0:	08003c45 	.word	0x08003c45
 8003bc4:	08003c45 	.word	0x08003c45
 8003bc8:	08003c45 	.word	0x08003c45
 8003bcc:	08003c45 	.word	0x08003c45
 8003bd0:	08003c45 	.word	0x08003c45
 8003bd4:	08003c45 	.word	0x08003c45
 8003bd8:	08003c45 	.word	0x08003c45
 8003bdc:	08003c59 	.word	0x08003c59
 8003be0:	08003c45 	.word	0x08003c45
 8003be4:	08003c45 	.word	0x08003c45
 8003be8:	08003c45 	.word	0x08003c45
 8003bec:	08003c45 	.word	0x08003c45
 8003bf0:	08003c45 	.word	0x08003c45
 8003bf4:	08003c45 	.word	0x08003c45
 8003bf8:	08003c45 	.word	0x08003c45
 8003bfc:	08003c59 	.word	0x08003c59
 8003c00:	08003c45 	.word	0x08003c45
 8003c04:	08003c45 	.word	0x08003c45
 8003c08:	08003c45 	.word	0x08003c45
 8003c0c:	08003c45 	.word	0x08003c45
 8003c10:	08003c45 	.word	0x08003c45
 8003c14:	08003c45 	.word	0x08003c45
 8003c18:	08003c45 	.word	0x08003c45
 8003c1c:	08003c59 	.word	0x08003c59
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	2101      	movs	r1, #1
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fdfa 	bl	8004820 <RCCEx_PLL2_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c30:	e013      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3324      	adds	r3, #36	; 0x24
 8003c36:	2101      	movs	r1, #1
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fea3 	bl	8004984 <RCCEx_PLL3_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c42:	e00a      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	75fb      	strb	r3, [r7, #23]
      break;
 8003c48:	e007      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c4a:	bf00      	nop
 8003c4c:	58024400 	.word	0x58024400
 8003c50:	58024800 	.word	0x58024800
 8003c54:	00ffffcf 	.word	0x00ffffcf
      break;
 8003c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c60:	4b96      	ldr	r3, [pc, #600]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c64:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c6c:	4993      	ldr	r1, [pc, #588]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	654b      	str	r3, [r1, #84]	; 0x54
 8003c72:	e001      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d038      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d821      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003c8c:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003cd7 	.word	0x08003cd7
 8003c98:	08003cad 	.word	0x08003cad
 8003c9c:	08003cbf 	.word	0x08003cbf
 8003ca0:	08003cd7 	.word	0x08003cd7
 8003ca4:	08003cd7 	.word	0x08003cd7
 8003ca8:	08003cd7 	.word	0x08003cd7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fdb4 	bl	8004820 <RCCEx_PLL2_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cbc:	e00c      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3324      	adds	r3, #36	; 0x24
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fe5d 	bl	8004984 <RCCEx_PLL3_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cce:	e003      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd4:	e000      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cde:	4b77      	ldr	r3, [pc, #476]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	f023 0207 	bic.w	r2, r3, #7
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cea:	4974      	ldr	r1, [pc, #464]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	654b      	str	r3, [r1, #84]	; 0x54
 8003cf0:	e001      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d03a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d821      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003d0c:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d12:	bf00      	nop
 8003d14:	08003d57 	.word	0x08003d57
 8003d18:	08003d2d 	.word	0x08003d2d
 8003d1c:	08003d3f 	.word	0x08003d3f
 8003d20:	08003d57 	.word	0x08003d57
 8003d24:	08003d57 	.word	0x08003d57
 8003d28:	08003d57 	.word	0x08003d57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	2101      	movs	r1, #1
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fd74 	bl	8004820 <RCCEx_PLL2_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d3c:	e00c      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3324      	adds	r3, #36	; 0x24
 8003d42:	2101      	movs	r1, #1
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fe1d 	bl	8004984 <RCCEx_PLL3_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d4e:	e003      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	75fb      	strb	r3, [r7, #23]
      break;
 8003d54:	e000      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d5e:	4b57      	ldr	r3, [pc, #348]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	f023 0207 	bic.w	r2, r3, #7
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6c:	4953      	ldr	r1, [pc, #332]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	658b      	str	r3, [r1, #88]	; 0x58
 8003d72:	e001      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d04b      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d8e:	d02e      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d94:	d828      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9a:	d02a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d822      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003da2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003da6:	d026      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003da8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dac:	d81c      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db2:	d010      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db8:	d816      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d01d      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dc2:	d111      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fd28 	bl	8004820 <RCCEx_PLL2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003dd4:	e012      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3324      	adds	r3, #36	; 0x24
 8003dda:	2102      	movs	r1, #2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fdd1 	bl	8004984 <RCCEx_PLL3_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003de6:	e009      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	75fb      	strb	r3, [r7, #23]
      break;
 8003dec:	e006      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003dee:	bf00      	nop
 8003df0:	e004      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003df2:	bf00      	nop
 8003df4:	e002      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003df6:	bf00      	nop
 8003df8:	e000      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10a      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e02:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e10:	492a      	ldr	r1, [pc, #168]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	654b      	str	r3, [r1, #84]	; 0x54
 8003e16:	e001      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d04d      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e32:	d02e      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003e34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e38:	d828      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3e:	d02a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e44:	d822      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e4a:	d026      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003e4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e50:	d81c      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e56:	d010      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5c:	d816      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01d      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e66:	d111      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fcd6 	bl	8004820 <RCCEx_PLL2_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e78:	e012      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3324      	adds	r3, #36	; 0x24
 8003e7e:	2102      	movs	r1, #2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fd7f 	bl	8004984 <RCCEx_PLL3_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e8a:	e009      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e90:	e006      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e92:	bf00      	nop
 8003e94:	e004      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e96:	bf00      	nop
 8003e98:	e002      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eb4:	4901      	ldr	r1, [pc, #4]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	658b      	str	r3, [r1, #88]	; 0x58
 8003eba:	e003      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003ebc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d04b      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ed6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003eda:	d02e      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003edc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ee0:	d828      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee6:	d02a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eec:	d822      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003eee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ef2:	d026      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003ef4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ef8:	d81c      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003efe:	d010      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f04:	d816      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01d      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0e:	d111      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fc82 	bl	8004820 <RCCEx_PLL2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f20:	e012      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	2102      	movs	r1, #2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fd2b 	bl	8004984 <RCCEx_PLL3_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f32:	e009      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
      break;
 8003f38:	e006      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e004      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f4e:	4b9d      	ldr	r3, [pc, #628]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f5c:	4999      	ldr	r1, [pc, #612]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	658b      	str	r3, [r1, #88]	; 0x58
 8003f62:	e001      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7e:	d10a      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3324      	adds	r3, #36	; 0x24
 8003f84:	2102      	movs	r1, #2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fcfc 	bl	8004984 <RCCEx_PLL3_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f96:	4b8b      	ldr	r3, [pc, #556]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fa4:	4987      	ldr	r1, [pc, #540]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3324      	adds	r3, #36	; 0x24
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fcdb 	bl	8004984 <RCCEx_PLL3_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fd8:	4b7a      	ldr	r3, [pc, #488]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe6:	4977      	ldr	r1, [pc, #476]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d034      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004002:	d01d      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004008:	d817      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800400e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004012:	d009      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004014:	e011      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3304      	adds	r3, #4
 800401a:	2100      	movs	r1, #0
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fbff 	bl	8004820 <RCCEx_PLL2_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004026:	e00c      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3324      	adds	r3, #36	; 0x24
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fca8 	bl	8004984 <RCCEx_PLL3_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004038:	e003      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	75fb      	strb	r3, [r7, #23]
      break;
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004048:	4b5e      	ldr	r3, [pc, #376]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004056:	495b      	ldr	r1, [pc, #364]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004058:	4313      	orrs	r3, r2
 800405a:	658b      	str	r3, [r1, #88]	; 0x58
 800405c:	e001      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d033      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004074:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004078:	d01c      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800407a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800407e:	d816      	bhi.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004084:	d003      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800408a:	d007      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800408c:	e00f      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800408e:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	4a4c      	ldr	r2, [pc, #304]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004098:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800409a:	e00c      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3324      	adds	r3, #36	; 0x24
 80040a0:	2101      	movs	r1, #1
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fc6e 	bl	8004984 <RCCEx_PLL3_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80040ac:	e003      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	75fb      	strb	r3, [r7, #23]
      break;
 80040b2:	e000      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80040b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040bc:	4b41      	ldr	r3, [pc, #260]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ca:	493e      	ldr	r1, [pc, #248]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	654b      	str	r3, [r1, #84]	; 0x54
 80040d0:	e001      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d029      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ee:	d007      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80040f0:	e00f      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f2:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	4a33      	ldr	r2, [pc, #204]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040fe:	e00b      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	2102      	movs	r1, #2
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fb8a 	bl	8004820 <RCCEx_PLL2_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004110:	e002      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
      break;
 8004116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800411e:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004122:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412a:	4926      	ldr	r1, [pc, #152]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800412c:	4313      	orrs	r3, r2
 800412e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004130:	e001      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3324      	adds	r3, #36	; 0x24
 8004146:	2102      	movs	r1, #2
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fc1b 	bl	8004984 <RCCEx_PLL3_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d033      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004168:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800416c:	d017      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800416e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004172:	d811      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004178:	d013      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800417a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800417e:	d80b      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d010      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004188:	d106      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418a:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	4a0d      	ldr	r2, [pc, #52]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004194:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004196:	e007      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
      break;
 800419c:	e004      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800419e:	bf00      	nop
 80041a0:	e002      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80041a2:	bf00      	nop
 80041a4:	e000      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80041a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041ae:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ba:	4902      	ldr	r1, [pc, #8]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	654b      	str	r3, [r1, #84]	; 0x54
 80041c0:	e004      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80041c2:	bf00      	nop
 80041c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041d8:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	492e      	ldr	r1, [pc, #184]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041f6:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004204:	4926      	ldr	r1, [pc, #152]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004206:	4313      	orrs	r3, r2
 8004208:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004222:	491f      	ldr	r1, [pc, #124]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004224:	4313      	orrs	r3, r2
 8004226:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00d      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004234:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	4a19      	ldr	r2, [pc, #100]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800423a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800423e:	6113      	str	r3, [r2, #16]
 8004240:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800424a:	4915      	ldr	r1, [pc, #84]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800424c:	4313      	orrs	r3, r2
 800424e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	da08      	bge.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800425a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004264:	490e      	ldr	r1, [pc, #56]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004266:	4313      	orrs	r3, r2
 8004268:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004284:	4906      	ldr	r1, [pc, #24]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004286:	4313      	orrs	r3, r2
 8004288:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800428a:	7dbb      	ldrb	r3, [r7, #22]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	58024400 	.word	0x58024400

080042a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80042a8:	f7ff f85a 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4904      	ldr	r1, [pc, #16]	; (80042cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	58024400 	.word	0x58024400
 80042cc:	08006c6c 	.word	0x08006c6c

080042d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	; 0x24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042d8:	4ba1      	ldr	r3, [pc, #644]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80042e2:	4b9f      	ldr	r3, [pc, #636]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	0b1b      	lsrs	r3, r3, #12
 80042e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042ee:	4b9c      	ldr	r3, [pc, #624]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	091b      	lsrs	r3, r3, #4
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80042fa:	4b99      	ldr	r3, [pc, #612]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	08db      	lsrs	r3, r3, #3
 8004300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8111 	beq.w	8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b02      	cmp	r3, #2
 8004322:	f000 8083 	beq.w	800442c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b02      	cmp	r3, #2
 800432a:	f200 80a1 	bhi.w	8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d056      	beq.n	80043e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800433a:	e099      	b.n	8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800433c:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d02d      	beq.n	80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004348:	4b85      	ldr	r3, [pc, #532]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	08db      	lsrs	r3, r3, #3
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	4a84      	ldr	r2, [pc, #528]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
 8004358:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	ee07 3a90 	vmov	s15, r3
 8004360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004372:	4b7b      	ldr	r3, [pc, #492]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004382:	ed97 6a03 	vldr	s12, [r7, #12]
 8004386:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800438a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80043a2:	e087      	b.n	80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800456c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80043b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b6:	4b6a      	ldr	r3, [pc, #424]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043e6:	e065      	b.n	80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fa:	4b59      	ldr	r3, [pc, #356]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440a:	ed97 6a03 	vldr	s12, [r7, #12]
 800440e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800441e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004426:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800442a:	e043      	b.n	80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004436:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800443a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443e:	4b48      	ldr	r3, [pc, #288]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004452:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800446e:	e021      	b.n	80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800447e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004482:	4b37      	ldr	r3, [pc, #220]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004492:	ed97 6a03 	vldr	s12, [r7, #12]
 8004496:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800449a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800449e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80044b4:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	0a5b      	lsrs	r3, r3, #9
 80044ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80044d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044da:	ee17 2a90 	vmov	r2, s15
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80044e2:	4b1f      	ldr	r3, [pc, #124]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	0c1b      	lsrs	r3, r3, #16
 80044e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ec:	ee07 3a90 	vmov	s15, r3
 80044f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004508:	ee17 2a90 	vmov	r2, s15
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004510:	4b13      	ldr	r3, [pc, #76]	; (8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	0e1b      	lsrs	r3, r3, #24
 8004516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800452a:	edd7 6a07 	vldr	s13, [r7, #28]
 800452e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004536:	ee17 2a90 	vmov	r2, s15
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800453e:	e008      	b.n	8004552 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	609a      	str	r2, [r3, #8]
}
 8004552:	bf00      	nop
 8004554:	3724      	adds	r7, #36	; 0x24
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	58024400 	.word	0x58024400
 8004564:	03d09000 	.word	0x03d09000
 8004568:	46000000 	.word	0x46000000
 800456c:	4c742400 	.word	0x4c742400
 8004570:	4a742400 	.word	0x4a742400
 8004574:	4af42400 	.word	0x4af42400

08004578 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	; 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004580:	4ba1      	ldr	r3, [pc, #644]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800458a:	4b9f      	ldr	r3, [pc, #636]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	0d1b      	lsrs	r3, r3, #20
 8004590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004594:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004596:	4b9c      	ldr	r3, [pc, #624]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	0a1b      	lsrs	r3, r3, #8
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80045a2:	4b99      	ldr	r3, [pc, #612]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	08db      	lsrs	r3, r3, #3
 80045a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8111 	beq.w	80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	f000 8083 	beq.w	80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	f200 80a1 	bhi.w	8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d056      	beq.n	8004690 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80045e2:	e099      	b.n	8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045e4:	4b88      	ldr	r3, [pc, #544]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d02d      	beq.n	800464c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045f0:	4b85      	ldr	r3, [pc, #532]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	08db      	lsrs	r3, r3, #3
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	4a84      	ldr	r2, [pc, #528]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004600:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	ee07 3a90 	vmov	s15, r3
 8004608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b7b      	ldr	r3, [pc, #492]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	ed97 6a03 	vldr	s12, [r7, #12]
 800462e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800464a:	e087      	b.n	800475c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465e:	4b6a      	ldr	r3, [pc, #424]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004672:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800468e:	e065      	b.n	800475c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a2:	4b59      	ldr	r3, [pc, #356]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046d2:	e043      	b.n	800475c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800481c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80046e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e6:	4b48      	ldr	r3, [pc, #288]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800470a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004712:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004716:	e021      	b.n	800475c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472a:	4b37      	ldr	r3, [pc, #220]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473a:	ed97 6a03 	vldr	s12, [r7, #12]
 800473e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800474e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004756:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800475a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800475c:	4b2a      	ldr	r3, [pc, #168]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	0a5b      	lsrs	r3, r3, #9
 8004762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004772:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004776:	edd7 6a07 	vldr	s13, [r7, #28]
 800477a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800477e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004782:	ee17 2a90 	vmov	r2, s15
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800478a:	4b1f      	ldr	r3, [pc, #124]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	0c1b      	lsrs	r3, r3, #16
 8004790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004794:	ee07 3a90 	vmov	s15, r3
 8004798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b0:	ee17 2a90 	vmov	r2, s15
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80047b8:	4b13      	ldr	r3, [pc, #76]	; (8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	0e1b      	lsrs	r3, r3, #24
 80047be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047de:	ee17 2a90 	vmov	r2, s15
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80047e6:	e008      	b.n	80047fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	609a      	str	r2, [r3, #8]
}
 80047fa:	bf00      	nop
 80047fc:	3724      	adds	r7, #36	; 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	58024400 	.word	0x58024400
 800480c:	03d09000 	.word	0x03d09000
 8004810:	46000000 	.word	0x46000000
 8004814:	4c742400 	.word	0x4c742400
 8004818:	4a742400 	.word	0x4a742400
 800481c:	4af42400 	.word	0x4af42400

08004820 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800482e:	4b53      	ldr	r3, [pc, #332]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b03      	cmp	r3, #3
 8004838:	d101      	bne.n	800483e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e099      	b.n	8004972 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800483e:	4b4f      	ldr	r3, [pc, #316]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a4e      	ldr	r2, [pc, #312]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004844:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800484a:	f7fc fd0f 	bl	800126c <HAL_GetTick>
 800484e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004850:	e008      	b.n	8004864 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004852:	f7fc fd0b 	bl	800126c <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e086      	b.n	8004972 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004864:	4b45      	ldr	r3, [pc, #276]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f0      	bne.n	8004852 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004870:	4b42      	ldr	r3, [pc, #264]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	031b      	lsls	r3, r3, #12
 800487e:	493f      	ldr	r1, [pc, #252]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004880:	4313      	orrs	r3, r2
 8004882:	628b      	str	r3, [r1, #40]	; 0x28
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	3b01      	subs	r3, #1
 800488a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	3b01      	subs	r3, #1
 8004894:	025b      	lsls	r3, r3, #9
 8004896:	b29b      	uxth	r3, r3
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	3b01      	subs	r3, #1
 80048a0:	041b      	lsls	r3, r3, #16
 80048a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	061b      	lsls	r3, r3, #24
 80048b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048b4:	4931      	ldr	r1, [pc, #196]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80048ba:	4b30      	ldr	r3, [pc, #192]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	492d      	ldr	r1, [pc, #180]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048cc:	4b2b      	ldr	r3, [pc, #172]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	f023 0220 	bic.w	r2, r3, #32
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	4928      	ldr	r1, [pc, #160]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048de:	4b27      	ldr	r3, [pc, #156]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	4a26      	ldr	r2, [pc, #152]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 80048e4:	f023 0310 	bic.w	r3, r3, #16
 80048e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048ea:	4b24      	ldr	r3, [pc, #144]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 80048ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <RCCEx_PLL2_Config+0x160>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	69d2      	ldr	r2, [r2, #28]
 80048f6:	00d2      	lsls	r2, r2, #3
 80048f8:	4920      	ldr	r1, [pc, #128]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80048fe:	4b1f      	ldr	r3, [pc, #124]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	4a1e      	ldr	r2, [pc, #120]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004904:	f043 0310 	orr.w	r3, r3, #16
 8004908:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004910:	4b1a      	ldr	r3, [pc, #104]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	4a19      	ldr	r2, [pc, #100]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004916:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800491a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800491c:	e00f      	b.n	800493e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d106      	bne.n	8004932 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004924:	4b15      	ldr	r3, [pc, #84]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	4a14      	ldr	r2, [pc, #80]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 800492a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800492e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004930:	e005      	b.n	800493e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	4a11      	ldr	r2, [pc, #68]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800493c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a0e      	ldr	r2, [pc, #56]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004944:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494a:	f7fc fc8f 	bl	800126c <HAL_GetTick>
 800494e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004950:	e008      	b.n	8004964 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004952:	f7fc fc8b 	bl	800126c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e006      	b.n	8004972 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <RCCEx_PLL2_Config+0x15c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004970:	7bfb      	ldrb	r3, [r7, #15]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	58024400 	.word	0x58024400
 8004980:	ffff0007 	.word	0xffff0007

08004984 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004992:	4b53      	ldr	r3, [pc, #332]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b03      	cmp	r3, #3
 800499c:	d101      	bne.n	80049a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e099      	b.n	8004ad6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049a2:	4b4f      	ldr	r3, [pc, #316]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a4e      	ldr	r2, [pc, #312]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 80049a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ae:	f7fc fc5d 	bl	800126c <HAL_GetTick>
 80049b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049b4:	e008      	b.n	80049c8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049b6:	f7fc fc59 	bl	800126c <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e086      	b.n	8004ad6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049c8:	4b45      	ldr	r3, [pc, #276]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049d4:	4b42      	ldr	r3, [pc, #264]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	051b      	lsls	r3, r3, #20
 80049e2:	493f      	ldr	r1, [pc, #252]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	628b      	str	r3, [r1, #40]	; 0x28
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	025b      	lsls	r3, r3, #9
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	041b      	lsls	r3, r3, #16
 8004a06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	061b      	lsls	r3, r3, #24
 8004a14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a18:	4931      	ldr	r1, [pc, #196]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a1e:	4b30      	ldr	r3, [pc, #192]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	492d      	ldr	r1, [pc, #180]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a30:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	4928      	ldr	r1, [pc, #160]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a42:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	4a26      	ldr	r2, [pc, #152]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a4e:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a52:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <RCCEx_PLL3_Config+0x160>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	69d2      	ldr	r2, [r2, #28]
 8004a5a:	00d2      	lsls	r2, r2, #3
 8004a5c:	4920      	ldr	r1, [pc, #128]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a62:	4b1f      	ldr	r3, [pc, #124]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a74:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a80:	e00f      	b.n	8004aa2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d106      	bne.n	8004a96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a88:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	4a14      	ldr	r2, [pc, #80]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a94:	e005      	b.n	8004aa2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a96:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	4a11      	ldr	r2, [pc, #68]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a0e      	ldr	r2, [pc, #56]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aae:	f7fc fbdd 	bl	800126c <HAL_GetTick>
 8004ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ab4:	e008      	b.n	8004ac8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004ab6:	f7fc fbd9 	bl	800126c <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e006      	b.n	8004ad6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <RCCEx_PLL3_Config+0x15c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	58024400 	.word	0x58024400
 8004ae4:	ffff0007 	.word	0xffff0007

08004ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e042      	b.n	8004b80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d106      	bne.n	8004b12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7fc f9af 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2224      	movs	r2, #36	; 0x24
 8004b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f8c2 	bl	8004cb4 <UART_SetConfig>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e022      	b.n	8004b80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fe1e 	bl	8005784 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fea5 	bl	80058c8 <UART_CheckIdleState>
 8004b7e:	4603      	mov	r3, r0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	f040 8083 	bne.w	8004caa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_UART_Transmit+0x28>
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e07b      	b.n	8004cac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UART_Transmit+0x3a>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e074      	b.n	8004cac <HAL_UART_Transmit+0x124>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2221      	movs	r2, #33	; 0x21
 8004bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bda:	f7fc fb47 	bl	800126c <HAL_GetTick>
 8004bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	88fa      	ldrh	r2, [r7, #6]
 8004be4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf8:	d108      	bne.n	8004c0c <HAL_UART_Transmit+0x84>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d104      	bne.n	8004c0c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	e003      	b.n	8004c14 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004c1c:	e02c      	b.n	8004c78 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2200      	movs	r2, #0
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fe98 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e039      	b.n	8004cac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	3302      	adds	r3, #2
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	e007      	b.n	8004c66 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	781a      	ldrb	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	3301      	adds	r3, #1
 8004c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1cc      	bne.n	8004c1e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2140      	movs	r1, #64	; 0x40
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fe65 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e006      	b.n	8004cac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e000      	b.n	8004cac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004caa:	2302      	movs	r3, #2
  }
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3720      	adds	r7, #32
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb8:	b092      	sub	sp, #72	; 0x48
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4bbe      	ldr	r3, [pc, #760]	; (8004fdc <UART_SetConfig+0x328>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cec:	430b      	orrs	r3, r1
 8004cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4ab3      	ldr	r2, [pc, #716]	; (8004fe0 <UART_SetConfig+0x32c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d004      	beq.n	8004d20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	4baf      	ldr	r3, [pc, #700]	; (8004fe4 <UART_SetConfig+0x330>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	f023 010f 	bic.w	r1, r3, #15
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4aa6      	ldr	r2, [pc, #664]	; (8004fe8 <UART_SetConfig+0x334>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d177      	bne.n	8004e44 <UART_SetConfig+0x190>
 8004d54:	4ba5      	ldr	r3, [pc, #660]	; (8004fec <UART_SetConfig+0x338>)
 8004d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d5c:	2b28      	cmp	r3, #40	; 0x28
 8004d5e:	d86d      	bhi.n	8004e3c <UART_SetConfig+0x188>
 8004d60:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <UART_SetConfig+0xb4>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004e0d 	.word	0x08004e0d
 8004d6c:	08004e3d 	.word	0x08004e3d
 8004d70:	08004e3d 	.word	0x08004e3d
 8004d74:	08004e3d 	.word	0x08004e3d
 8004d78:	08004e3d 	.word	0x08004e3d
 8004d7c:	08004e3d 	.word	0x08004e3d
 8004d80:	08004e3d 	.word	0x08004e3d
 8004d84:	08004e3d 	.word	0x08004e3d
 8004d88:	08004e15 	.word	0x08004e15
 8004d8c:	08004e3d 	.word	0x08004e3d
 8004d90:	08004e3d 	.word	0x08004e3d
 8004d94:	08004e3d 	.word	0x08004e3d
 8004d98:	08004e3d 	.word	0x08004e3d
 8004d9c:	08004e3d 	.word	0x08004e3d
 8004da0:	08004e3d 	.word	0x08004e3d
 8004da4:	08004e3d 	.word	0x08004e3d
 8004da8:	08004e1d 	.word	0x08004e1d
 8004dac:	08004e3d 	.word	0x08004e3d
 8004db0:	08004e3d 	.word	0x08004e3d
 8004db4:	08004e3d 	.word	0x08004e3d
 8004db8:	08004e3d 	.word	0x08004e3d
 8004dbc:	08004e3d 	.word	0x08004e3d
 8004dc0:	08004e3d 	.word	0x08004e3d
 8004dc4:	08004e3d 	.word	0x08004e3d
 8004dc8:	08004e25 	.word	0x08004e25
 8004dcc:	08004e3d 	.word	0x08004e3d
 8004dd0:	08004e3d 	.word	0x08004e3d
 8004dd4:	08004e3d 	.word	0x08004e3d
 8004dd8:	08004e3d 	.word	0x08004e3d
 8004ddc:	08004e3d 	.word	0x08004e3d
 8004de0:	08004e3d 	.word	0x08004e3d
 8004de4:	08004e3d 	.word	0x08004e3d
 8004de8:	08004e2d 	.word	0x08004e2d
 8004dec:	08004e3d 	.word	0x08004e3d
 8004df0:	08004e3d 	.word	0x08004e3d
 8004df4:	08004e3d 	.word	0x08004e3d
 8004df8:	08004e3d 	.word	0x08004e3d
 8004dfc:	08004e3d 	.word	0x08004e3d
 8004e00:	08004e3d 	.word	0x08004e3d
 8004e04:	08004e3d 	.word	0x08004e3d
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e12:	e222      	b.n	800525a <UART_SetConfig+0x5a6>
 8004e14:	2304      	movs	r3, #4
 8004e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1a:	e21e      	b.n	800525a <UART_SetConfig+0x5a6>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e22:	e21a      	b.n	800525a <UART_SetConfig+0x5a6>
 8004e24:	2310      	movs	r3, #16
 8004e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2a:	e216      	b.n	800525a <UART_SetConfig+0x5a6>
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e32:	e212      	b.n	800525a <UART_SetConfig+0x5a6>
 8004e34:	2340      	movs	r3, #64	; 0x40
 8004e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3a:	e20e      	b.n	800525a <UART_SetConfig+0x5a6>
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e42:	e20a      	b.n	800525a <UART_SetConfig+0x5a6>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a69      	ldr	r2, [pc, #420]	; (8004ff0 <UART_SetConfig+0x33c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d130      	bne.n	8004eb0 <UART_SetConfig+0x1fc>
 8004e4e:	4b67      	ldr	r3, [pc, #412]	; (8004fec <UART_SetConfig+0x338>)
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	2b05      	cmp	r3, #5
 8004e58:	d826      	bhi.n	8004ea8 <UART_SetConfig+0x1f4>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0x1ac>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e79 	.word	0x08004e79
 8004e64:	08004e81 	.word	0x08004e81
 8004e68:	08004e89 	.word	0x08004e89
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004e99 	.word	0x08004e99
 8004e74:	08004ea1 	.word	0x08004ea1
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e7e:	e1ec      	b.n	800525a <UART_SetConfig+0x5a6>
 8004e80:	2304      	movs	r3, #4
 8004e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e86:	e1e8      	b.n	800525a <UART_SetConfig+0x5a6>
 8004e88:	2308      	movs	r3, #8
 8004e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e8e:	e1e4      	b.n	800525a <UART_SetConfig+0x5a6>
 8004e90:	2310      	movs	r3, #16
 8004e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e96:	e1e0      	b.n	800525a <UART_SetConfig+0x5a6>
 8004e98:	2320      	movs	r3, #32
 8004e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e9e:	e1dc      	b.n	800525a <UART_SetConfig+0x5a6>
 8004ea0:	2340      	movs	r3, #64	; 0x40
 8004ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ea6:	e1d8      	b.n	800525a <UART_SetConfig+0x5a6>
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eae:	e1d4      	b.n	800525a <UART_SetConfig+0x5a6>
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a4f      	ldr	r2, [pc, #316]	; (8004ff4 <UART_SetConfig+0x340>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d130      	bne.n	8004f1c <UART_SetConfig+0x268>
 8004eba:	4b4c      	ldr	r3, [pc, #304]	; (8004fec <UART_SetConfig+0x338>)
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	2b05      	cmp	r3, #5
 8004ec4:	d826      	bhi.n	8004f14 <UART_SetConfig+0x260>
 8004ec6:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <UART_SetConfig+0x218>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004ee5 	.word	0x08004ee5
 8004ed0:	08004eed 	.word	0x08004eed
 8004ed4:	08004ef5 	.word	0x08004ef5
 8004ed8:	08004efd 	.word	0x08004efd
 8004edc:	08004f05 	.word	0x08004f05
 8004ee0:	08004f0d 	.word	0x08004f0d
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eea:	e1b6      	b.n	800525a <UART_SetConfig+0x5a6>
 8004eec:	2304      	movs	r3, #4
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef2:	e1b2      	b.n	800525a <UART_SetConfig+0x5a6>
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efa:	e1ae      	b.n	800525a <UART_SetConfig+0x5a6>
 8004efc:	2310      	movs	r3, #16
 8004efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f02:	e1aa      	b.n	800525a <UART_SetConfig+0x5a6>
 8004f04:	2320      	movs	r3, #32
 8004f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f0a:	e1a6      	b.n	800525a <UART_SetConfig+0x5a6>
 8004f0c:	2340      	movs	r3, #64	; 0x40
 8004f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f12:	e1a2      	b.n	800525a <UART_SetConfig+0x5a6>
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f1a:	e19e      	b.n	800525a <UART_SetConfig+0x5a6>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a35      	ldr	r2, [pc, #212]	; (8004ff8 <UART_SetConfig+0x344>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d130      	bne.n	8004f88 <UART_SetConfig+0x2d4>
 8004f26:	4b31      	ldr	r3, [pc, #196]	; (8004fec <UART_SetConfig+0x338>)
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	2b05      	cmp	r3, #5
 8004f30:	d826      	bhi.n	8004f80 <UART_SetConfig+0x2cc>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <UART_SetConfig+0x284>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f51 	.word	0x08004f51
 8004f3c:	08004f59 	.word	0x08004f59
 8004f40:	08004f61 	.word	0x08004f61
 8004f44:	08004f69 	.word	0x08004f69
 8004f48:	08004f71 	.word	0x08004f71
 8004f4c:	08004f79 	.word	0x08004f79
 8004f50:	2300      	movs	r3, #0
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e180      	b.n	800525a <UART_SetConfig+0x5a6>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5e:	e17c      	b.n	800525a <UART_SetConfig+0x5a6>
 8004f60:	2308      	movs	r3, #8
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f66:	e178      	b.n	800525a <UART_SetConfig+0x5a6>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6e:	e174      	b.n	800525a <UART_SetConfig+0x5a6>
 8004f70:	2320      	movs	r3, #32
 8004f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f76:	e170      	b.n	800525a <UART_SetConfig+0x5a6>
 8004f78:	2340      	movs	r3, #64	; 0x40
 8004f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7e:	e16c      	b.n	800525a <UART_SetConfig+0x5a6>
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f86:	e168      	b.n	800525a <UART_SetConfig+0x5a6>
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <UART_SetConfig+0x348>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d142      	bne.n	8005018 <UART_SetConfig+0x364>
 8004f92:	4b16      	ldr	r3, [pc, #88]	; (8004fec <UART_SetConfig+0x338>)
 8004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	2b05      	cmp	r3, #5
 8004f9c:	d838      	bhi.n	8005010 <UART_SetConfig+0x35c>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <UART_SetConfig+0x2f0>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004fbd 	.word	0x08004fbd
 8004fa8:	08004fc5 	.word	0x08004fc5
 8004fac:	08004fcd 	.word	0x08004fcd
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08005001 	.word	0x08005001
 8004fb8:	08005009 	.word	0x08005009
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e14a      	b.n	800525a <UART_SetConfig+0x5a6>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e146      	b.n	800525a <UART_SetConfig+0x5a6>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd2:	e142      	b.n	800525a <UART_SetConfig+0x5a6>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fda:	e13e      	b.n	800525a <UART_SetConfig+0x5a6>
 8004fdc:	cfff69f3 	.word	0xcfff69f3
 8004fe0:	58000c00 	.word	0x58000c00
 8004fe4:	11fff4ff 	.word	0x11fff4ff
 8004fe8:	40011000 	.word	0x40011000
 8004fec:	58024400 	.word	0x58024400
 8004ff0:	40004400 	.word	0x40004400
 8004ff4:	40004800 	.word	0x40004800
 8004ff8:	40004c00 	.word	0x40004c00
 8004ffc:	40005000 	.word	0x40005000
 8005000:	2320      	movs	r3, #32
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e128      	b.n	800525a <UART_SetConfig+0x5a6>
 8005008:	2340      	movs	r3, #64	; 0x40
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e124      	b.n	800525a <UART_SetConfig+0x5a6>
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e120      	b.n	800525a <UART_SetConfig+0x5a6>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4acb      	ldr	r2, [pc, #812]	; (800534c <UART_SetConfig+0x698>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d176      	bne.n	8005110 <UART_SetConfig+0x45c>
 8005022:	4bcb      	ldr	r3, [pc, #812]	; (8005350 <UART_SetConfig+0x69c>)
 8005024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800502a:	2b28      	cmp	r3, #40	; 0x28
 800502c:	d86c      	bhi.n	8005108 <UART_SetConfig+0x454>
 800502e:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <UART_SetConfig+0x380>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	080050d9 	.word	0x080050d9
 8005038:	08005109 	.word	0x08005109
 800503c:	08005109 	.word	0x08005109
 8005040:	08005109 	.word	0x08005109
 8005044:	08005109 	.word	0x08005109
 8005048:	08005109 	.word	0x08005109
 800504c:	08005109 	.word	0x08005109
 8005050:	08005109 	.word	0x08005109
 8005054:	080050e1 	.word	0x080050e1
 8005058:	08005109 	.word	0x08005109
 800505c:	08005109 	.word	0x08005109
 8005060:	08005109 	.word	0x08005109
 8005064:	08005109 	.word	0x08005109
 8005068:	08005109 	.word	0x08005109
 800506c:	08005109 	.word	0x08005109
 8005070:	08005109 	.word	0x08005109
 8005074:	080050e9 	.word	0x080050e9
 8005078:	08005109 	.word	0x08005109
 800507c:	08005109 	.word	0x08005109
 8005080:	08005109 	.word	0x08005109
 8005084:	08005109 	.word	0x08005109
 8005088:	08005109 	.word	0x08005109
 800508c:	08005109 	.word	0x08005109
 8005090:	08005109 	.word	0x08005109
 8005094:	080050f1 	.word	0x080050f1
 8005098:	08005109 	.word	0x08005109
 800509c:	08005109 	.word	0x08005109
 80050a0:	08005109 	.word	0x08005109
 80050a4:	08005109 	.word	0x08005109
 80050a8:	08005109 	.word	0x08005109
 80050ac:	08005109 	.word	0x08005109
 80050b0:	08005109 	.word	0x08005109
 80050b4:	080050f9 	.word	0x080050f9
 80050b8:	08005109 	.word	0x08005109
 80050bc:	08005109 	.word	0x08005109
 80050c0:	08005109 	.word	0x08005109
 80050c4:	08005109 	.word	0x08005109
 80050c8:	08005109 	.word	0x08005109
 80050cc:	08005109 	.word	0x08005109
 80050d0:	08005109 	.word	0x08005109
 80050d4:	08005101 	.word	0x08005101
 80050d8:	2301      	movs	r3, #1
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050de:	e0bc      	b.n	800525a <UART_SetConfig+0x5a6>
 80050e0:	2304      	movs	r3, #4
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e6:	e0b8      	b.n	800525a <UART_SetConfig+0x5a6>
 80050e8:	2308      	movs	r3, #8
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ee:	e0b4      	b.n	800525a <UART_SetConfig+0x5a6>
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f6:	e0b0      	b.n	800525a <UART_SetConfig+0x5a6>
 80050f8:	2320      	movs	r3, #32
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fe:	e0ac      	b.n	800525a <UART_SetConfig+0x5a6>
 8005100:	2340      	movs	r3, #64	; 0x40
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005106:	e0a8      	b.n	800525a <UART_SetConfig+0x5a6>
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510e:	e0a4      	b.n	800525a <UART_SetConfig+0x5a6>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a8f      	ldr	r2, [pc, #572]	; (8005354 <UART_SetConfig+0x6a0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d130      	bne.n	800517c <UART_SetConfig+0x4c8>
 800511a:	4b8d      	ldr	r3, [pc, #564]	; (8005350 <UART_SetConfig+0x69c>)
 800511c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	2b05      	cmp	r3, #5
 8005124:	d826      	bhi.n	8005174 <UART_SetConfig+0x4c0>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <UART_SetConfig+0x478>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	08005145 	.word	0x08005145
 8005130:	0800514d 	.word	0x0800514d
 8005134:	08005155 	.word	0x08005155
 8005138:	0800515d 	.word	0x0800515d
 800513c:	08005165 	.word	0x08005165
 8005140:	0800516d 	.word	0x0800516d
 8005144:	2300      	movs	r3, #0
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514a:	e086      	b.n	800525a <UART_SetConfig+0x5a6>
 800514c:	2304      	movs	r3, #4
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005152:	e082      	b.n	800525a <UART_SetConfig+0x5a6>
 8005154:	2308      	movs	r3, #8
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515a:	e07e      	b.n	800525a <UART_SetConfig+0x5a6>
 800515c:	2310      	movs	r3, #16
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005162:	e07a      	b.n	800525a <UART_SetConfig+0x5a6>
 8005164:	2320      	movs	r3, #32
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516a:	e076      	b.n	800525a <UART_SetConfig+0x5a6>
 800516c:	2340      	movs	r3, #64	; 0x40
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005172:	e072      	b.n	800525a <UART_SetConfig+0x5a6>
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517a:	e06e      	b.n	800525a <UART_SetConfig+0x5a6>
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a75      	ldr	r2, [pc, #468]	; (8005358 <UART_SetConfig+0x6a4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d130      	bne.n	80051e8 <UART_SetConfig+0x534>
 8005186:	4b72      	ldr	r3, [pc, #456]	; (8005350 <UART_SetConfig+0x69c>)
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	2b05      	cmp	r3, #5
 8005190:	d826      	bhi.n	80051e0 <UART_SetConfig+0x52c>
 8005192:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <UART_SetConfig+0x4e4>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	080051b1 	.word	0x080051b1
 800519c:	080051b9 	.word	0x080051b9
 80051a0:	080051c1 	.word	0x080051c1
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051d1 	.word	0x080051d1
 80051ac:	080051d9 	.word	0x080051d9
 80051b0:	2300      	movs	r3, #0
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b6:	e050      	b.n	800525a <UART_SetConfig+0x5a6>
 80051b8:	2304      	movs	r3, #4
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051be:	e04c      	b.n	800525a <UART_SetConfig+0x5a6>
 80051c0:	2308      	movs	r3, #8
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c6:	e048      	b.n	800525a <UART_SetConfig+0x5a6>
 80051c8:	2310      	movs	r3, #16
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ce:	e044      	b.n	800525a <UART_SetConfig+0x5a6>
 80051d0:	2320      	movs	r3, #32
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d6:	e040      	b.n	800525a <UART_SetConfig+0x5a6>
 80051d8:	2340      	movs	r3, #64	; 0x40
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051de:	e03c      	b.n	800525a <UART_SetConfig+0x5a6>
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e6:	e038      	b.n	800525a <UART_SetConfig+0x5a6>
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a5b      	ldr	r2, [pc, #364]	; (800535c <UART_SetConfig+0x6a8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d130      	bne.n	8005254 <UART_SetConfig+0x5a0>
 80051f2:	4b57      	ldr	r3, [pc, #348]	; (8005350 <UART_SetConfig+0x69c>)
 80051f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	2b05      	cmp	r3, #5
 80051fc:	d826      	bhi.n	800524c <UART_SetConfig+0x598>
 80051fe:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <UART_SetConfig+0x550>)
 8005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005204:	0800521d 	.word	0x0800521d
 8005208:	08005225 	.word	0x08005225
 800520c:	0800522d 	.word	0x0800522d
 8005210:	08005235 	.word	0x08005235
 8005214:	0800523d 	.word	0x0800523d
 8005218:	08005245 	.word	0x08005245
 800521c:	2302      	movs	r3, #2
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e01a      	b.n	800525a <UART_SetConfig+0x5a6>
 8005224:	2304      	movs	r3, #4
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522a:	e016      	b.n	800525a <UART_SetConfig+0x5a6>
 800522c:	2308      	movs	r3, #8
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005232:	e012      	b.n	800525a <UART_SetConfig+0x5a6>
 8005234:	2310      	movs	r3, #16
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523a:	e00e      	b.n	800525a <UART_SetConfig+0x5a6>
 800523c:	2320      	movs	r3, #32
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005242:	e00a      	b.n	800525a <UART_SetConfig+0x5a6>
 8005244:	2340      	movs	r3, #64	; 0x40
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524a:	e006      	b.n	800525a <UART_SetConfig+0x5a6>
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005252:	e002      	b.n	800525a <UART_SetConfig+0x5a6>
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a3f      	ldr	r2, [pc, #252]	; (800535c <UART_SetConfig+0x6a8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	f040 80f8 	bne.w	8005456 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005266:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800526a:	2b20      	cmp	r3, #32
 800526c:	dc46      	bgt.n	80052fc <UART_SetConfig+0x648>
 800526e:	2b02      	cmp	r3, #2
 8005270:	f2c0 8082 	blt.w	8005378 <UART_SetConfig+0x6c4>
 8005274:	3b02      	subs	r3, #2
 8005276:	2b1e      	cmp	r3, #30
 8005278:	d87e      	bhi.n	8005378 <UART_SetConfig+0x6c4>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0x5cc>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	08005303 	.word	0x08005303
 8005284:	08005379 	.word	0x08005379
 8005288:	0800530b 	.word	0x0800530b
 800528c:	08005379 	.word	0x08005379
 8005290:	08005379 	.word	0x08005379
 8005294:	08005379 	.word	0x08005379
 8005298:	0800531b 	.word	0x0800531b
 800529c:	08005379 	.word	0x08005379
 80052a0:	08005379 	.word	0x08005379
 80052a4:	08005379 	.word	0x08005379
 80052a8:	08005379 	.word	0x08005379
 80052ac:	08005379 	.word	0x08005379
 80052b0:	08005379 	.word	0x08005379
 80052b4:	08005379 	.word	0x08005379
 80052b8:	0800532b 	.word	0x0800532b
 80052bc:	08005379 	.word	0x08005379
 80052c0:	08005379 	.word	0x08005379
 80052c4:	08005379 	.word	0x08005379
 80052c8:	08005379 	.word	0x08005379
 80052cc:	08005379 	.word	0x08005379
 80052d0:	08005379 	.word	0x08005379
 80052d4:	08005379 	.word	0x08005379
 80052d8:	08005379 	.word	0x08005379
 80052dc:	08005379 	.word	0x08005379
 80052e0:	08005379 	.word	0x08005379
 80052e4:	08005379 	.word	0x08005379
 80052e8:	08005379 	.word	0x08005379
 80052ec:	08005379 	.word	0x08005379
 80052f0:	08005379 	.word	0x08005379
 80052f4:	08005379 	.word	0x08005379
 80052f8:	0800536b 	.word	0x0800536b
 80052fc:	2b40      	cmp	r3, #64	; 0x40
 80052fe:	d037      	beq.n	8005370 <UART_SetConfig+0x6bc>
 8005300:	e03a      	b.n	8005378 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005302:	f7fe ffcf 	bl	80042a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005306:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005308:	e03c      	b.n	8005384 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800530a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800530e:	4618      	mov	r0, r3
 8005310:	f7fe ffde 	bl	80042d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005318:	e034      	b.n	8005384 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800531a:	f107 0318 	add.w	r3, r7, #24
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff f92a 	bl	8004578 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005328:	e02c      	b.n	8005384 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <UART_SetConfig+0x69c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005336:	4b06      	ldr	r3, [pc, #24]	; (8005350 <UART_SetConfig+0x69c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	08db      	lsrs	r3, r3, #3
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	4a07      	ldr	r2, [pc, #28]	; (8005360 <UART_SetConfig+0x6ac>)
 8005342:	fa22 f303 	lsr.w	r3, r2, r3
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005348:	e01c      	b.n	8005384 <UART_SetConfig+0x6d0>
 800534a:	bf00      	nop
 800534c:	40011400 	.word	0x40011400
 8005350:	58024400 	.word	0x58024400
 8005354:	40007800 	.word	0x40007800
 8005358:	40007c00 	.word	0x40007c00
 800535c:	58000c00 	.word	0x58000c00
 8005360:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005364:	4b9d      	ldr	r3, [pc, #628]	; (80055dc <UART_SetConfig+0x928>)
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005368:	e00c      	b.n	8005384 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800536a:	4b9d      	ldr	r3, [pc, #628]	; (80055e0 <UART_SetConfig+0x92c>)
 800536c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800536e:	e009      	b.n	8005384 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005376:	e005      	b.n	8005384 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005382:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 81de 	beq.w	8005748 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	4a94      	ldr	r2, [pc, #592]	; (80055e4 <UART_SetConfig+0x930>)
 8005392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005396:	461a      	mov	r2, r3
 8005398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539a:	fbb3 f3f2 	udiv	r3, r3, r2
 800539e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	4413      	add	r3, r2
 80053aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d305      	bcc.n	80053bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d903      	bls.n	80053c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80053c2:	e1c1      	b.n	8005748 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c6:	2200      	movs	r2, #0
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	60fa      	str	r2, [r7, #12]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	4a84      	ldr	r2, [pc, #528]	; (80055e4 <UART_SetConfig+0x930>)
 80053d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	2200      	movs	r2, #0
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053e6:	f7fa ffcb 	bl	8000380 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4610      	mov	r0, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	020b      	lsls	r3, r1, #8
 80053fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005400:	0202      	lsls	r2, r0, #8
 8005402:	6979      	ldr	r1, [r7, #20]
 8005404:	6849      	ldr	r1, [r1, #4]
 8005406:	0849      	lsrs	r1, r1, #1
 8005408:	2000      	movs	r0, #0
 800540a:	460c      	mov	r4, r1
 800540c:	4605      	mov	r5, r0
 800540e:	eb12 0804 	adds.w	r8, r2, r4
 8005412:	eb43 0905 	adc.w	r9, r3, r5
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	469a      	mov	sl, r3
 800541e:	4693      	mov	fp, r2
 8005420:	4652      	mov	r2, sl
 8005422:	465b      	mov	r3, fp
 8005424:	4640      	mov	r0, r8
 8005426:	4649      	mov	r1, r9
 8005428:	f7fa ffaa 	bl	8000380 <__aeabi_uldivmod>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4613      	mov	r3, r2
 8005432:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800543a:	d308      	bcc.n	800544e <UART_SetConfig+0x79a>
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005442:	d204      	bcs.n	800544e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800544a:	60da      	str	r2, [r3, #12]
 800544c:	e17c      	b.n	8005748 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005454:	e178      	b.n	8005748 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800545e:	f040 80c5 	bne.w	80055ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005462:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005466:	2b20      	cmp	r3, #32
 8005468:	dc48      	bgt.n	80054fc <UART_SetConfig+0x848>
 800546a:	2b00      	cmp	r3, #0
 800546c:	db7b      	blt.n	8005566 <UART_SetConfig+0x8b2>
 800546e:	2b20      	cmp	r3, #32
 8005470:	d879      	bhi.n	8005566 <UART_SetConfig+0x8b2>
 8005472:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <UART_SetConfig+0x7c4>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	08005503 	.word	0x08005503
 800547c:	0800550b 	.word	0x0800550b
 8005480:	08005567 	.word	0x08005567
 8005484:	08005567 	.word	0x08005567
 8005488:	08005513 	.word	0x08005513
 800548c:	08005567 	.word	0x08005567
 8005490:	08005567 	.word	0x08005567
 8005494:	08005567 	.word	0x08005567
 8005498:	08005523 	.word	0x08005523
 800549c:	08005567 	.word	0x08005567
 80054a0:	08005567 	.word	0x08005567
 80054a4:	08005567 	.word	0x08005567
 80054a8:	08005567 	.word	0x08005567
 80054ac:	08005567 	.word	0x08005567
 80054b0:	08005567 	.word	0x08005567
 80054b4:	08005567 	.word	0x08005567
 80054b8:	08005533 	.word	0x08005533
 80054bc:	08005567 	.word	0x08005567
 80054c0:	08005567 	.word	0x08005567
 80054c4:	08005567 	.word	0x08005567
 80054c8:	08005567 	.word	0x08005567
 80054cc:	08005567 	.word	0x08005567
 80054d0:	08005567 	.word	0x08005567
 80054d4:	08005567 	.word	0x08005567
 80054d8:	08005567 	.word	0x08005567
 80054dc:	08005567 	.word	0x08005567
 80054e0:	08005567 	.word	0x08005567
 80054e4:	08005567 	.word	0x08005567
 80054e8:	08005567 	.word	0x08005567
 80054ec:	08005567 	.word	0x08005567
 80054f0:	08005567 	.word	0x08005567
 80054f4:	08005567 	.word	0x08005567
 80054f8:	08005559 	.word	0x08005559
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d02e      	beq.n	800555e <UART_SetConfig+0x8aa>
 8005500:	e031      	b.n	8005566 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005502:	f7fd ff5d 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8005506:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005508:	e033      	b.n	8005572 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800550a:	f7fd ff6f 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 800550e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005510:	e02f      	b.n	8005572 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe feda 	bl	80042d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005520:	e027      	b.n	8005572 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005522:	f107 0318 	add.w	r3, r7, #24
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff f826 	bl	8004578 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005530:	e01f      	b.n	8005572 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005532:	4b2d      	ldr	r3, [pc, #180]	; (80055e8 <UART_SetConfig+0x934>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800553e:	4b2a      	ldr	r3, [pc, #168]	; (80055e8 <UART_SetConfig+0x934>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	08db      	lsrs	r3, r3, #3
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	4a24      	ldr	r2, [pc, #144]	; (80055dc <UART_SetConfig+0x928>)
 800554a:	fa22 f303 	lsr.w	r3, r2, r3
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005550:	e00f      	b.n	8005572 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005552:	4b22      	ldr	r3, [pc, #136]	; (80055dc <UART_SetConfig+0x928>)
 8005554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005556:	e00c      	b.n	8005572 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005558:	4b21      	ldr	r3, [pc, #132]	; (80055e0 <UART_SetConfig+0x92c>)
 800555a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800555c:	e009      	b.n	8005572 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800555e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005564:	e005      	b.n	8005572 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005570:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80e7 	beq.w	8005748 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <UART_SetConfig+0x930>)
 8005580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005584:	461a      	mov	r2, r3
 8005586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005588:	fbb3 f3f2 	udiv	r3, r3, r2
 800558c:	005a      	lsls	r2, r3, #1
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	441a      	add	r2, r3
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	2b0f      	cmp	r3, #15
 80055a4:	d916      	bls.n	80055d4 <UART_SetConfig+0x920>
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ac:	d212      	bcs.n	80055d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f023 030f 	bic.w	r3, r3, #15
 80055b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	085b      	lsrs	r3, r3, #1
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055c6:	4313      	orrs	r3, r2
 80055c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80055d0:	60da      	str	r2, [r3, #12]
 80055d2:	e0b9      	b.n	8005748 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055da:	e0b5      	b.n	8005748 <UART_SetConfig+0xa94>
 80055dc:	03d09000 	.word	0x03d09000
 80055e0:	003d0900 	.word	0x003d0900
 80055e4:	08006c7c 	.word	0x08006c7c
 80055e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80055ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	dc49      	bgt.n	8005688 <UART_SetConfig+0x9d4>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	db7c      	blt.n	80056f2 <UART_SetConfig+0xa3e>
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d87a      	bhi.n	80056f2 <UART_SetConfig+0xa3e>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <UART_SetConfig+0x950>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	0800568f 	.word	0x0800568f
 8005608:	08005697 	.word	0x08005697
 800560c:	080056f3 	.word	0x080056f3
 8005610:	080056f3 	.word	0x080056f3
 8005614:	0800569f 	.word	0x0800569f
 8005618:	080056f3 	.word	0x080056f3
 800561c:	080056f3 	.word	0x080056f3
 8005620:	080056f3 	.word	0x080056f3
 8005624:	080056af 	.word	0x080056af
 8005628:	080056f3 	.word	0x080056f3
 800562c:	080056f3 	.word	0x080056f3
 8005630:	080056f3 	.word	0x080056f3
 8005634:	080056f3 	.word	0x080056f3
 8005638:	080056f3 	.word	0x080056f3
 800563c:	080056f3 	.word	0x080056f3
 8005640:	080056f3 	.word	0x080056f3
 8005644:	080056bf 	.word	0x080056bf
 8005648:	080056f3 	.word	0x080056f3
 800564c:	080056f3 	.word	0x080056f3
 8005650:	080056f3 	.word	0x080056f3
 8005654:	080056f3 	.word	0x080056f3
 8005658:	080056f3 	.word	0x080056f3
 800565c:	080056f3 	.word	0x080056f3
 8005660:	080056f3 	.word	0x080056f3
 8005664:	080056f3 	.word	0x080056f3
 8005668:	080056f3 	.word	0x080056f3
 800566c:	080056f3 	.word	0x080056f3
 8005670:	080056f3 	.word	0x080056f3
 8005674:	080056f3 	.word	0x080056f3
 8005678:	080056f3 	.word	0x080056f3
 800567c:	080056f3 	.word	0x080056f3
 8005680:	080056f3 	.word	0x080056f3
 8005684:	080056e5 	.word	0x080056e5
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d02e      	beq.n	80056ea <UART_SetConfig+0xa36>
 800568c:	e031      	b.n	80056f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800568e:	f7fd fe97 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8005692:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005694:	e033      	b.n	80056fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005696:	f7fd fea9 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 800569a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800569c:	e02f      	b.n	80056fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800569e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe fe14 	bl	80042d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ac:	e027      	b.n	80056fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ae:	f107 0318 	add.w	r3, r7, #24
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fe ff60 	bl	8004578 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056bc:	e01f      	b.n	80056fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056be:	4b2d      	ldr	r3, [pc, #180]	; (8005774 <UART_SetConfig+0xac0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056ca:	4b2a      	ldr	r3, [pc, #168]	; (8005774 <UART_SetConfig+0xac0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	08db      	lsrs	r3, r3, #3
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	4a28      	ldr	r2, [pc, #160]	; (8005778 <UART_SetConfig+0xac4>)
 80056d6:	fa22 f303 	lsr.w	r3, r2, r3
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056dc:	e00f      	b.n	80056fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80056de:	4b26      	ldr	r3, [pc, #152]	; (8005778 <UART_SetConfig+0xac4>)
 80056e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056e2:	e00c      	b.n	80056fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056e4:	4b25      	ldr	r3, [pc, #148]	; (800577c <UART_SetConfig+0xac8>)
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056e8:	e009      	b.n	80056fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056f0:	e005      	b.n	80056fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80056fc:	bf00      	nop
    }

    if (pclk != 0U)
 80056fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005700:	2b00      	cmp	r3, #0
 8005702:	d021      	beq.n	8005748 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <UART_SetConfig+0xacc>)
 800570a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800570e:	461a      	mov	r2, r3
 8005710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005712:	fbb3 f2f2 	udiv	r2, r3, r2
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	085b      	lsrs	r3, r3, #1
 800571c:	441a      	add	r2, r3
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	fbb2 f3f3 	udiv	r3, r2, r3
 8005726:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572a:	2b0f      	cmp	r3, #15
 800572c:	d909      	bls.n	8005742 <UART_SetConfig+0xa8e>
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005734:	d205      	bcs.n	8005742 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	b29a      	uxth	r2, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60da      	str	r2, [r3, #12]
 8005740:	e002      	b.n	8005748 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2201      	movs	r2, #1
 800574c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2201      	movs	r2, #1
 8005754:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2200      	movs	r2, #0
 800575c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2200      	movs	r2, #0
 8005762:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005764:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005768:	4618      	mov	r0, r3
 800576a:	3748      	adds	r7, #72	; 0x48
 800576c:	46bd      	mov	sp, r7
 800576e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005772:	bf00      	nop
 8005774:	58024400 	.word	0x58024400
 8005778:	03d09000 	.word	0x03d09000
 800577c:	003d0900 	.word	0x003d0900
 8005780:	08006c7c 	.word	0x08006c7c

08005784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01a      	beq.n	800589a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005882:	d10a      	bne.n	800589a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  }
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058d8:	f7fb fcc8 	bl	800126c <HAL_GetTick>
 80058dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d10e      	bne.n	800590a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f82f 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e025      	b.n	8005956 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b04      	cmp	r3, #4
 8005916:	d10e      	bne.n	8005936 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f819 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e00f      	b.n	8005956 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b09c      	sub	sp, #112	; 0x70
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596e:	e0a9      	b.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	f000 80a5 	beq.w	8005ac4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fb fc77 	bl	800126c <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <UART_WaitOnFlagUntilTimeout+0x32>
 800598a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800598c:	2b00      	cmp	r3, #0
 800598e:	d140      	bne.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059a4:	667b      	str	r3, [r7, #100]	; 0x64
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e6      	bne.n	8005990 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3308      	adds	r3, #8
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	663b      	str	r3, [r7, #96]	; 0x60
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80059e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e5      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e069      	b.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d051      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a2e:	d149      	bne.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e6      	bne.n	8005a3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3308      	adds	r3, #8
 8005a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f023 0301 	bic.w	r3, r3, #1
 8005a82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a8c:	623a      	str	r2, [r7, #32]
 8005a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	69f9      	ldr	r1, [r7, #28]
 8005a92:	6a3a      	ldr	r2, [r7, #32]
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e5      	bne.n	8005a6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e010      	b.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	bf0c      	ite	eq
 8005ad4:	2301      	moveq	r3, #1
 8005ad6:	2300      	movne	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	f43f af46 	beq.w	8005970 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3770      	adds	r7, #112	; 0x70
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e027      	b.n	8005b54 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2224      	movs	r2, #36	; 0x24
 8005b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0201 	bic.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e02d      	b.n	8005bd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2224      	movs	r2, #36	; 0x24
 8005b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f84f 	bl	8005c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e02d      	b.n	8005c50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2224      	movs	r2, #36	; 0x24
 8005c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0201 	bic.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f811 	bl	8005c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d108      	bne.n	8005c7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c78:	e031      	b.n	8005cde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c7a:	2310      	movs	r3, #16
 8005c7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c7e:	2310      	movs	r3, #16
 8005c80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	0e5b      	lsrs	r3, r3, #25
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	0f5b      	lsrs	r3, r3, #29
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ca2:	7bbb      	ldrb	r3, [r7, #14]
 8005ca4:	7b3a      	ldrb	r2, [r7, #12]
 8005ca6:	4911      	ldr	r1, [pc, #68]	; (8005cec <UARTEx_SetNbDataToProcess+0x94>)
 8005ca8:	5c8a      	ldrb	r2, [r1, r2]
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cae:	7b3a      	ldrb	r2, [r7, #12]
 8005cb0:	490f      	ldr	r1, [pc, #60]	; (8005cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8005cb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	7b7a      	ldrb	r2, [r7, #13]
 8005cc4:	4909      	ldr	r1, [pc, #36]	; (8005cec <UARTEx_SetNbDataToProcess+0x94>)
 8005cc6:	5c8a      	ldrb	r2, [r1, r2]
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ccc:	7b7a      	ldrb	r2, [r7, #13]
 8005cce:	4908      	ldr	r1, [pc, #32]	; (8005cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8005cd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	08006c94 	.word	0x08006c94
 8005cf0:	08006c9c 	.word	0x08006c9c

08005cf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	f107 001c 	add.w	r0, r7, #28
 8005d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d120      	bne.n	8005d4e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	4b2a      	ldr	r3, [pc, #168]	; (8005dc8 <USB_CoreInit+0xd4>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d105      	bne.n	8005d42 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 faac 	bl	80062a0 <USB_CoreReset>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]
 8005d4c:	e01a      	b.n	8005d84 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 faa0 	bl	80062a0 <USB_CoreReset>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38
 8005d76:	e005      	b.n	8005d84 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d116      	bne.n	8005db8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <USB_CoreInit+0xd8>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f043 0206 	orr.w	r2, r3, #6
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f043 0220 	orr.w	r2, r3, #32
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dc4:	b004      	add	sp, #16
 8005dc6:	4770      	bx	lr
 8005dc8:	ffbdffbf 	.word	0xffbdffbf
 8005dcc:	03ee0000 	.word	0x03ee0000

08005dd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f023 0201 	bic.w	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d115      	bne.n	8005e40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e20:	2001      	movs	r0, #1
 8005e22:	f7fb fa2f 	bl	8001284 <HAL_Delay>
      ms++;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fa29 	bl	8006284 <USB_GetMode>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d01e      	beq.n	8005e76 <USB_SetCurrentMode+0x84>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b31      	cmp	r3, #49	; 0x31
 8005e3c:	d9f0      	bls.n	8005e20 <USB_SetCurrentMode+0x2e>
 8005e3e:	e01a      	b.n	8005e76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d115      	bne.n	8005e72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e52:	2001      	movs	r0, #1
 8005e54:	f7fb fa16 	bl	8001284 <HAL_Delay>
      ms++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa10 	bl	8006284 <USB_GetMode>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <USB_SetCurrentMode+0x84>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b31      	cmp	r3, #49	; 0x31
 8005e6e:	d9f0      	bls.n	8005e52 <USB_SetCurrentMode+0x60>
 8005e70:	e001      	b.n	8005e76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e005      	b.n	8005e82 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b32      	cmp	r3, #50	; 0x32
 8005e7a:	d101      	bne.n	8005e80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b086      	sub	sp, #24
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	e009      	b.n	8005ec0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	3340      	adds	r3, #64	; 0x40
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2b0e      	cmp	r3, #14
 8005ec4:	d9f2      	bls.n	8005eac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d11c      	bne.n	8005f06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eda:	f043 0302 	orr.w	r3, r3, #2
 8005ede:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	e005      	b.n	8005f12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f24:	4619      	mov	r1, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	680b      	ldr	r3, [r1, #0]
 8005f30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d10c      	bne.n	8005f52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d104      	bne.n	8005f48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f3e:	2100      	movs	r1, #0
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f965 	bl	8006210 <USB_SetDevSpeed>
 8005f46:	e008      	b.n	8005f5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f48:	2101      	movs	r1, #1
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f960 	bl	8006210 <USB_SetDevSpeed>
 8005f50:	e003      	b.n	8005f5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f52:	2103      	movs	r1, #3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f95b 	bl	8006210 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f5a:	2110      	movs	r1, #16
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f8f3 	bl	8006148 <USB_FlushTxFifo>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f91f 	bl	80061b0 <USB_FlushRxFifo>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	461a      	mov	r2, r3
 8005f84:	2300      	movs	r3, #0
 8005f86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	461a      	mov	r2, r3
 8005f90:	2300      	movs	r3, #0
 8005f92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	e043      	b.n	800602e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fbc:	d118      	bne.n	8005ff0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	e013      	b.n	8006002 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	e008      	b.n	8006002 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	2300      	movs	r3, #0
 8006000:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600e:	461a      	mov	r2, r3
 8006010:	2300      	movs	r3, #0
 8006012:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006020:	461a      	mov	r2, r3
 8006022:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006026:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	3301      	adds	r3, #1
 800602c:	613b      	str	r3, [r7, #16]
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	429a      	cmp	r2, r3
 8006034:	d3b7      	bcc.n	8005fa6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006036:	2300      	movs	r3, #0
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	e043      	b.n	80060c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800604e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006052:	d118      	bne.n	8006086 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10a      	bne.n	8006070 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006066:	461a      	mov	r2, r3
 8006068:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	e013      	b.n	8006098 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	461a      	mov	r2, r3
 800607e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	e008      	b.n	8006098 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006092:	461a      	mov	r2, r3
 8006094:	2300      	movs	r3, #0
 8006096:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	461a      	mov	r2, r3
 80060a6:	2300      	movs	r3, #0
 80060a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b6:	461a      	mov	r2, r3
 80060b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	3301      	adds	r3, #1
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d3b7      	bcc.n	800603c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d105      	bne.n	8006100 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	f043 0210 	orr.w	r2, r3, #16
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699a      	ldr	r2, [r3, #24]
 8006104:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <USB_DevInit+0x2b4>)
 8006106:	4313      	orrs	r3, r2
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800610c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f043 0208 	orr.w	r2, r3, #8
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800611e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d105      	bne.n	8006130 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699a      	ldr	r2, [r3, #24]
 8006128:	4b06      	ldr	r3, [pc, #24]	; (8006144 <USB_DevInit+0x2b8>)
 800612a:	4313      	orrs	r3, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006130:	7dfb      	ldrb	r3, [r7, #23]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800613c:	b004      	add	sp, #16
 800613e:	4770      	bx	lr
 8006140:	803c3800 	.word	0x803c3800
 8006144:	40000004 	.word	0x40000004

08006148 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3301      	adds	r3, #1
 800615a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4a13      	ldr	r2, [pc, #76]	; (80061ac <USB_FlushTxFifo+0x64>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d901      	bls.n	8006168 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e01b      	b.n	80061a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	daf2      	bge.n	8006156 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	019b      	lsls	r3, r3, #6
 8006178:	f043 0220 	orr.w	r2, r3, #32
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4a08      	ldr	r2, [pc, #32]	; (80061ac <USB_FlushTxFifo+0x64>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d901      	bls.n	8006192 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e006      	b.n	80061a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b20      	cmp	r3, #32
 800619c:	d0f0      	beq.n	8006180 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	00030d40 	.word	0x00030d40

080061b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a11      	ldr	r2, [pc, #68]	; (800620c <USB_FlushRxFifo+0x5c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d901      	bls.n	80061ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e018      	b.n	8006200 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	daf2      	bge.n	80061bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2210      	movs	r2, #16
 80061de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a08      	ldr	r2, [pc, #32]	; (800620c <USB_FlushRxFifo+0x5c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d901      	bls.n	80061f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e006      	b.n	8006200 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	2b10      	cmp	r3, #16
 80061fc:	d0f0      	beq.n	80061e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	00030d40 	.word	0x00030d40

08006210 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	68f9      	ldr	r1, [r7, #12]
 800622c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006230:	4313      	orrs	r3, r2
 8006232:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006242:	b480      	push	{r7}
 8006244:	b085      	sub	sp, #20
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800625c:	f023 0303 	bic.w	r3, r3, #3
 8006260:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006270:	f043 0302 	orr.w	r3, r3, #2
 8006274:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	f003 0301 	and.w	r3, r3, #1
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4a13      	ldr	r2, [pc, #76]	; (8006304 <USB_CoreReset+0x64>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e01b      	b.n	80062f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	daf2      	bge.n	80062ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f043 0201 	orr.w	r2, r3, #1
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3301      	adds	r3, #1
 80062da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4a09      	ldr	r2, [pc, #36]	; (8006304 <USB_CoreReset+0x64>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d901      	bls.n	80062e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e006      	b.n	80062f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d0f0      	beq.n	80062d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	00030d40 	.word	0x00030d40

08006308 <__errno>:
 8006308:	4b01      	ldr	r3, [pc, #4]	; (8006310 <__errno+0x8>)
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	24000010 	.word	0x24000010

08006314 <__libc_init_array>:
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	4d0d      	ldr	r5, [pc, #52]	; (800634c <__libc_init_array+0x38>)
 8006318:	4c0d      	ldr	r4, [pc, #52]	; (8006350 <__libc_init_array+0x3c>)
 800631a:	1b64      	subs	r4, r4, r5
 800631c:	10a4      	asrs	r4, r4, #2
 800631e:	2600      	movs	r6, #0
 8006320:	42a6      	cmp	r6, r4
 8006322:	d109      	bne.n	8006338 <__libc_init_array+0x24>
 8006324:	4d0b      	ldr	r5, [pc, #44]	; (8006354 <__libc_init_array+0x40>)
 8006326:	4c0c      	ldr	r4, [pc, #48]	; (8006358 <__libc_init_array+0x44>)
 8006328:	f000 fc8e 	bl	8006c48 <_init>
 800632c:	1b64      	subs	r4, r4, r5
 800632e:	10a4      	asrs	r4, r4, #2
 8006330:	2600      	movs	r6, #0
 8006332:	42a6      	cmp	r6, r4
 8006334:	d105      	bne.n	8006342 <__libc_init_array+0x2e>
 8006336:	bd70      	pop	{r4, r5, r6, pc}
 8006338:	f855 3b04 	ldr.w	r3, [r5], #4
 800633c:	4798      	blx	r3
 800633e:	3601      	adds	r6, #1
 8006340:	e7ee      	b.n	8006320 <__libc_init_array+0xc>
 8006342:	f855 3b04 	ldr.w	r3, [r5], #4
 8006346:	4798      	blx	r3
 8006348:	3601      	adds	r6, #1
 800634a:	e7f2      	b.n	8006332 <__libc_init_array+0x1e>
 800634c:	08006ce0 	.word	0x08006ce0
 8006350:	08006ce0 	.word	0x08006ce0
 8006354:	08006ce0 	.word	0x08006ce0
 8006358:	08006ce4 	.word	0x08006ce4

0800635c <memset>:
 800635c:	4402      	add	r2, r0
 800635e:	4603      	mov	r3, r0
 8006360:	4293      	cmp	r3, r2
 8006362:	d100      	bne.n	8006366 <memset+0xa>
 8006364:	4770      	bx	lr
 8006366:	f803 1b01 	strb.w	r1, [r3], #1
 800636a:	e7f9      	b.n	8006360 <memset+0x4>

0800636c <siprintf>:
 800636c:	b40e      	push	{r1, r2, r3}
 800636e:	b500      	push	{lr}
 8006370:	b09c      	sub	sp, #112	; 0x70
 8006372:	ab1d      	add	r3, sp, #116	; 0x74
 8006374:	9002      	str	r0, [sp, #8]
 8006376:	9006      	str	r0, [sp, #24]
 8006378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800637c:	4809      	ldr	r0, [pc, #36]	; (80063a4 <siprintf+0x38>)
 800637e:	9107      	str	r1, [sp, #28]
 8006380:	9104      	str	r1, [sp, #16]
 8006382:	4909      	ldr	r1, [pc, #36]	; (80063a8 <siprintf+0x3c>)
 8006384:	f853 2b04 	ldr.w	r2, [r3], #4
 8006388:	9105      	str	r1, [sp, #20]
 800638a:	6800      	ldr	r0, [r0, #0]
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	a902      	add	r1, sp, #8
 8006390:	f000 f868 	bl	8006464 <_svfiprintf_r>
 8006394:	9b02      	ldr	r3, [sp, #8]
 8006396:	2200      	movs	r2, #0
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	b01c      	add	sp, #112	; 0x70
 800639c:	f85d eb04 	ldr.w	lr, [sp], #4
 80063a0:	b003      	add	sp, #12
 80063a2:	4770      	bx	lr
 80063a4:	24000010 	.word	0x24000010
 80063a8:	ffff0208 	.word	0xffff0208

080063ac <__ssputs_r>:
 80063ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	688e      	ldr	r6, [r1, #8]
 80063b2:	429e      	cmp	r6, r3
 80063b4:	4682      	mov	sl, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	4690      	mov	r8, r2
 80063ba:	461f      	mov	r7, r3
 80063bc:	d838      	bhi.n	8006430 <__ssputs_r+0x84>
 80063be:	898a      	ldrh	r2, [r1, #12]
 80063c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063c4:	d032      	beq.n	800642c <__ssputs_r+0x80>
 80063c6:	6825      	ldr	r5, [r4, #0]
 80063c8:	6909      	ldr	r1, [r1, #16]
 80063ca:	eba5 0901 	sub.w	r9, r5, r1
 80063ce:	6965      	ldr	r5, [r4, #20]
 80063d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063d8:	3301      	adds	r3, #1
 80063da:	444b      	add	r3, r9
 80063dc:	106d      	asrs	r5, r5, #1
 80063de:	429d      	cmp	r5, r3
 80063e0:	bf38      	it	cc
 80063e2:	461d      	movcc	r5, r3
 80063e4:	0553      	lsls	r3, r2, #21
 80063e6:	d531      	bpl.n	800644c <__ssputs_r+0xa0>
 80063e8:	4629      	mov	r1, r5
 80063ea:	f000 fb63 	bl	8006ab4 <_malloc_r>
 80063ee:	4606      	mov	r6, r0
 80063f0:	b950      	cbnz	r0, 8006408 <__ssputs_r+0x5c>
 80063f2:	230c      	movs	r3, #12
 80063f4:	f8ca 3000 	str.w	r3, [sl]
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063fe:	81a3      	strh	r3, [r4, #12]
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006408:	6921      	ldr	r1, [r4, #16]
 800640a:	464a      	mov	r2, r9
 800640c:	f000 fabe 	bl	800698c <memcpy>
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	6126      	str	r6, [r4, #16]
 800641e:	6165      	str	r5, [r4, #20]
 8006420:	444e      	add	r6, r9
 8006422:	eba5 0509 	sub.w	r5, r5, r9
 8006426:	6026      	str	r6, [r4, #0]
 8006428:	60a5      	str	r5, [r4, #8]
 800642a:	463e      	mov	r6, r7
 800642c:	42be      	cmp	r6, r7
 800642e:	d900      	bls.n	8006432 <__ssputs_r+0x86>
 8006430:	463e      	mov	r6, r7
 8006432:	6820      	ldr	r0, [r4, #0]
 8006434:	4632      	mov	r2, r6
 8006436:	4641      	mov	r1, r8
 8006438:	f000 fab6 	bl	80069a8 <memmove>
 800643c:	68a3      	ldr	r3, [r4, #8]
 800643e:	1b9b      	subs	r3, r3, r6
 8006440:	60a3      	str	r3, [r4, #8]
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	4433      	add	r3, r6
 8006446:	6023      	str	r3, [r4, #0]
 8006448:	2000      	movs	r0, #0
 800644a:	e7db      	b.n	8006404 <__ssputs_r+0x58>
 800644c:	462a      	mov	r2, r5
 800644e:	f000 fba5 	bl	8006b9c <_realloc_r>
 8006452:	4606      	mov	r6, r0
 8006454:	2800      	cmp	r0, #0
 8006456:	d1e1      	bne.n	800641c <__ssputs_r+0x70>
 8006458:	6921      	ldr	r1, [r4, #16]
 800645a:	4650      	mov	r0, sl
 800645c:	f000 fabe 	bl	80069dc <_free_r>
 8006460:	e7c7      	b.n	80063f2 <__ssputs_r+0x46>
	...

08006464 <_svfiprintf_r>:
 8006464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006468:	4698      	mov	r8, r3
 800646a:	898b      	ldrh	r3, [r1, #12]
 800646c:	061b      	lsls	r3, r3, #24
 800646e:	b09d      	sub	sp, #116	; 0x74
 8006470:	4607      	mov	r7, r0
 8006472:	460d      	mov	r5, r1
 8006474:	4614      	mov	r4, r2
 8006476:	d50e      	bpl.n	8006496 <_svfiprintf_r+0x32>
 8006478:	690b      	ldr	r3, [r1, #16]
 800647a:	b963      	cbnz	r3, 8006496 <_svfiprintf_r+0x32>
 800647c:	2140      	movs	r1, #64	; 0x40
 800647e:	f000 fb19 	bl	8006ab4 <_malloc_r>
 8006482:	6028      	str	r0, [r5, #0]
 8006484:	6128      	str	r0, [r5, #16]
 8006486:	b920      	cbnz	r0, 8006492 <_svfiprintf_r+0x2e>
 8006488:	230c      	movs	r3, #12
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	e0d1      	b.n	8006636 <_svfiprintf_r+0x1d2>
 8006492:	2340      	movs	r3, #64	; 0x40
 8006494:	616b      	str	r3, [r5, #20]
 8006496:	2300      	movs	r3, #0
 8006498:	9309      	str	r3, [sp, #36]	; 0x24
 800649a:	2320      	movs	r3, #32
 800649c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064a4:	2330      	movs	r3, #48	; 0x30
 80064a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006650 <_svfiprintf_r+0x1ec>
 80064aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ae:	f04f 0901 	mov.w	r9, #1
 80064b2:	4623      	mov	r3, r4
 80064b4:	469a      	mov	sl, r3
 80064b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064ba:	b10a      	cbz	r2, 80064c0 <_svfiprintf_r+0x5c>
 80064bc:	2a25      	cmp	r2, #37	; 0x25
 80064be:	d1f9      	bne.n	80064b4 <_svfiprintf_r+0x50>
 80064c0:	ebba 0b04 	subs.w	fp, sl, r4
 80064c4:	d00b      	beq.n	80064de <_svfiprintf_r+0x7a>
 80064c6:	465b      	mov	r3, fp
 80064c8:	4622      	mov	r2, r4
 80064ca:	4629      	mov	r1, r5
 80064cc:	4638      	mov	r0, r7
 80064ce:	f7ff ff6d 	bl	80063ac <__ssputs_r>
 80064d2:	3001      	adds	r0, #1
 80064d4:	f000 80aa 	beq.w	800662c <_svfiprintf_r+0x1c8>
 80064d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064da:	445a      	add	r2, fp
 80064dc:	9209      	str	r2, [sp, #36]	; 0x24
 80064de:	f89a 3000 	ldrb.w	r3, [sl]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 80a2 	beq.w	800662c <_svfiprintf_r+0x1c8>
 80064e8:	2300      	movs	r3, #0
 80064ea:	f04f 32ff 	mov.w	r2, #4294967295
 80064ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064f2:	f10a 0a01 	add.w	sl, sl, #1
 80064f6:	9304      	str	r3, [sp, #16]
 80064f8:	9307      	str	r3, [sp, #28]
 80064fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064fe:	931a      	str	r3, [sp, #104]	; 0x68
 8006500:	4654      	mov	r4, sl
 8006502:	2205      	movs	r2, #5
 8006504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006508:	4851      	ldr	r0, [pc, #324]	; (8006650 <_svfiprintf_r+0x1ec>)
 800650a:	f7f9 fee9 	bl	80002e0 <memchr>
 800650e:	9a04      	ldr	r2, [sp, #16]
 8006510:	b9d8      	cbnz	r0, 800654a <_svfiprintf_r+0xe6>
 8006512:	06d0      	lsls	r0, r2, #27
 8006514:	bf44      	itt	mi
 8006516:	2320      	movmi	r3, #32
 8006518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800651c:	0711      	lsls	r1, r2, #28
 800651e:	bf44      	itt	mi
 8006520:	232b      	movmi	r3, #43	; 0x2b
 8006522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006526:	f89a 3000 	ldrb.w	r3, [sl]
 800652a:	2b2a      	cmp	r3, #42	; 0x2a
 800652c:	d015      	beq.n	800655a <_svfiprintf_r+0xf6>
 800652e:	9a07      	ldr	r2, [sp, #28]
 8006530:	4654      	mov	r4, sl
 8006532:	2000      	movs	r0, #0
 8006534:	f04f 0c0a 	mov.w	ip, #10
 8006538:	4621      	mov	r1, r4
 800653a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800653e:	3b30      	subs	r3, #48	; 0x30
 8006540:	2b09      	cmp	r3, #9
 8006542:	d94e      	bls.n	80065e2 <_svfiprintf_r+0x17e>
 8006544:	b1b0      	cbz	r0, 8006574 <_svfiprintf_r+0x110>
 8006546:	9207      	str	r2, [sp, #28]
 8006548:	e014      	b.n	8006574 <_svfiprintf_r+0x110>
 800654a:	eba0 0308 	sub.w	r3, r0, r8
 800654e:	fa09 f303 	lsl.w	r3, r9, r3
 8006552:	4313      	orrs	r3, r2
 8006554:	9304      	str	r3, [sp, #16]
 8006556:	46a2      	mov	sl, r4
 8006558:	e7d2      	b.n	8006500 <_svfiprintf_r+0x9c>
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	1d19      	adds	r1, r3, #4
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	9103      	str	r1, [sp, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	bfbb      	ittet	lt
 8006566:	425b      	neglt	r3, r3
 8006568:	f042 0202 	orrlt.w	r2, r2, #2
 800656c:	9307      	strge	r3, [sp, #28]
 800656e:	9307      	strlt	r3, [sp, #28]
 8006570:	bfb8      	it	lt
 8006572:	9204      	strlt	r2, [sp, #16]
 8006574:	7823      	ldrb	r3, [r4, #0]
 8006576:	2b2e      	cmp	r3, #46	; 0x2e
 8006578:	d10c      	bne.n	8006594 <_svfiprintf_r+0x130>
 800657a:	7863      	ldrb	r3, [r4, #1]
 800657c:	2b2a      	cmp	r3, #42	; 0x2a
 800657e:	d135      	bne.n	80065ec <_svfiprintf_r+0x188>
 8006580:	9b03      	ldr	r3, [sp, #12]
 8006582:	1d1a      	adds	r2, r3, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	9203      	str	r2, [sp, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	bfb8      	it	lt
 800658c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006590:	3402      	adds	r4, #2
 8006592:	9305      	str	r3, [sp, #20]
 8006594:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006660 <_svfiprintf_r+0x1fc>
 8006598:	7821      	ldrb	r1, [r4, #0]
 800659a:	2203      	movs	r2, #3
 800659c:	4650      	mov	r0, sl
 800659e:	f7f9 fe9f 	bl	80002e0 <memchr>
 80065a2:	b140      	cbz	r0, 80065b6 <_svfiprintf_r+0x152>
 80065a4:	2340      	movs	r3, #64	; 0x40
 80065a6:	eba0 000a 	sub.w	r0, r0, sl
 80065aa:	fa03 f000 	lsl.w	r0, r3, r0
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	4303      	orrs	r3, r0
 80065b2:	3401      	adds	r4, #1
 80065b4:	9304      	str	r3, [sp, #16]
 80065b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ba:	4826      	ldr	r0, [pc, #152]	; (8006654 <_svfiprintf_r+0x1f0>)
 80065bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065c0:	2206      	movs	r2, #6
 80065c2:	f7f9 fe8d 	bl	80002e0 <memchr>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d038      	beq.n	800663c <_svfiprintf_r+0x1d8>
 80065ca:	4b23      	ldr	r3, [pc, #140]	; (8006658 <_svfiprintf_r+0x1f4>)
 80065cc:	bb1b      	cbnz	r3, 8006616 <_svfiprintf_r+0x1b2>
 80065ce:	9b03      	ldr	r3, [sp, #12]
 80065d0:	3307      	adds	r3, #7
 80065d2:	f023 0307 	bic.w	r3, r3, #7
 80065d6:	3308      	adds	r3, #8
 80065d8:	9303      	str	r3, [sp, #12]
 80065da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065dc:	4433      	add	r3, r6
 80065de:	9309      	str	r3, [sp, #36]	; 0x24
 80065e0:	e767      	b.n	80064b2 <_svfiprintf_r+0x4e>
 80065e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e6:	460c      	mov	r4, r1
 80065e8:	2001      	movs	r0, #1
 80065ea:	e7a5      	b.n	8006538 <_svfiprintf_r+0xd4>
 80065ec:	2300      	movs	r3, #0
 80065ee:	3401      	adds	r4, #1
 80065f0:	9305      	str	r3, [sp, #20]
 80065f2:	4619      	mov	r1, r3
 80065f4:	f04f 0c0a 	mov.w	ip, #10
 80065f8:	4620      	mov	r0, r4
 80065fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065fe:	3a30      	subs	r2, #48	; 0x30
 8006600:	2a09      	cmp	r2, #9
 8006602:	d903      	bls.n	800660c <_svfiprintf_r+0x1a8>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0c5      	beq.n	8006594 <_svfiprintf_r+0x130>
 8006608:	9105      	str	r1, [sp, #20]
 800660a:	e7c3      	b.n	8006594 <_svfiprintf_r+0x130>
 800660c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006610:	4604      	mov	r4, r0
 8006612:	2301      	movs	r3, #1
 8006614:	e7f0      	b.n	80065f8 <_svfiprintf_r+0x194>
 8006616:	ab03      	add	r3, sp, #12
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	462a      	mov	r2, r5
 800661c:	4b0f      	ldr	r3, [pc, #60]	; (800665c <_svfiprintf_r+0x1f8>)
 800661e:	a904      	add	r1, sp, #16
 8006620:	4638      	mov	r0, r7
 8006622:	f3af 8000 	nop.w
 8006626:	1c42      	adds	r2, r0, #1
 8006628:	4606      	mov	r6, r0
 800662a:	d1d6      	bne.n	80065da <_svfiprintf_r+0x176>
 800662c:	89ab      	ldrh	r3, [r5, #12]
 800662e:	065b      	lsls	r3, r3, #25
 8006630:	f53f af2c 	bmi.w	800648c <_svfiprintf_r+0x28>
 8006634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006636:	b01d      	add	sp, #116	; 0x74
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	ab03      	add	r3, sp, #12
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	462a      	mov	r2, r5
 8006642:	4b06      	ldr	r3, [pc, #24]	; (800665c <_svfiprintf_r+0x1f8>)
 8006644:	a904      	add	r1, sp, #16
 8006646:	4638      	mov	r0, r7
 8006648:	f000 f87a 	bl	8006740 <_printf_i>
 800664c:	e7eb      	b.n	8006626 <_svfiprintf_r+0x1c2>
 800664e:	bf00      	nop
 8006650:	08006ca4 	.word	0x08006ca4
 8006654:	08006cae 	.word	0x08006cae
 8006658:	00000000 	.word	0x00000000
 800665c:	080063ad 	.word	0x080063ad
 8006660:	08006caa 	.word	0x08006caa

08006664 <_printf_common>:
 8006664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006668:	4616      	mov	r6, r2
 800666a:	4699      	mov	r9, r3
 800666c:	688a      	ldr	r2, [r1, #8]
 800666e:	690b      	ldr	r3, [r1, #16]
 8006670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006674:	4293      	cmp	r3, r2
 8006676:	bfb8      	it	lt
 8006678:	4613      	movlt	r3, r2
 800667a:	6033      	str	r3, [r6, #0]
 800667c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006680:	4607      	mov	r7, r0
 8006682:	460c      	mov	r4, r1
 8006684:	b10a      	cbz	r2, 800668a <_printf_common+0x26>
 8006686:	3301      	adds	r3, #1
 8006688:	6033      	str	r3, [r6, #0]
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	0699      	lsls	r1, r3, #26
 800668e:	bf42      	ittt	mi
 8006690:	6833      	ldrmi	r3, [r6, #0]
 8006692:	3302      	addmi	r3, #2
 8006694:	6033      	strmi	r3, [r6, #0]
 8006696:	6825      	ldr	r5, [r4, #0]
 8006698:	f015 0506 	ands.w	r5, r5, #6
 800669c:	d106      	bne.n	80066ac <_printf_common+0x48>
 800669e:	f104 0a19 	add.w	sl, r4, #25
 80066a2:	68e3      	ldr	r3, [r4, #12]
 80066a4:	6832      	ldr	r2, [r6, #0]
 80066a6:	1a9b      	subs	r3, r3, r2
 80066a8:	42ab      	cmp	r3, r5
 80066aa:	dc26      	bgt.n	80066fa <_printf_common+0x96>
 80066ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066b0:	1e13      	subs	r3, r2, #0
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	bf18      	it	ne
 80066b6:	2301      	movne	r3, #1
 80066b8:	0692      	lsls	r2, r2, #26
 80066ba:	d42b      	bmi.n	8006714 <_printf_common+0xb0>
 80066bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066c0:	4649      	mov	r1, r9
 80066c2:	4638      	mov	r0, r7
 80066c4:	47c0      	blx	r8
 80066c6:	3001      	adds	r0, #1
 80066c8:	d01e      	beq.n	8006708 <_printf_common+0xa4>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	68e5      	ldr	r5, [r4, #12]
 80066ce:	6832      	ldr	r2, [r6, #0]
 80066d0:	f003 0306 	and.w	r3, r3, #6
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	bf08      	it	eq
 80066d8:	1aad      	subeq	r5, r5, r2
 80066da:	68a3      	ldr	r3, [r4, #8]
 80066dc:	6922      	ldr	r2, [r4, #16]
 80066de:	bf0c      	ite	eq
 80066e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066e4:	2500      	movne	r5, #0
 80066e6:	4293      	cmp	r3, r2
 80066e8:	bfc4      	itt	gt
 80066ea:	1a9b      	subgt	r3, r3, r2
 80066ec:	18ed      	addgt	r5, r5, r3
 80066ee:	2600      	movs	r6, #0
 80066f0:	341a      	adds	r4, #26
 80066f2:	42b5      	cmp	r5, r6
 80066f4:	d11a      	bne.n	800672c <_printf_common+0xc8>
 80066f6:	2000      	movs	r0, #0
 80066f8:	e008      	b.n	800670c <_printf_common+0xa8>
 80066fa:	2301      	movs	r3, #1
 80066fc:	4652      	mov	r2, sl
 80066fe:	4649      	mov	r1, r9
 8006700:	4638      	mov	r0, r7
 8006702:	47c0      	blx	r8
 8006704:	3001      	adds	r0, #1
 8006706:	d103      	bne.n	8006710 <_printf_common+0xac>
 8006708:	f04f 30ff 	mov.w	r0, #4294967295
 800670c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006710:	3501      	adds	r5, #1
 8006712:	e7c6      	b.n	80066a2 <_printf_common+0x3e>
 8006714:	18e1      	adds	r1, r4, r3
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	2030      	movs	r0, #48	; 0x30
 800671a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800671e:	4422      	add	r2, r4
 8006720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006728:	3302      	adds	r3, #2
 800672a:	e7c7      	b.n	80066bc <_printf_common+0x58>
 800672c:	2301      	movs	r3, #1
 800672e:	4622      	mov	r2, r4
 8006730:	4649      	mov	r1, r9
 8006732:	4638      	mov	r0, r7
 8006734:	47c0      	blx	r8
 8006736:	3001      	adds	r0, #1
 8006738:	d0e6      	beq.n	8006708 <_printf_common+0xa4>
 800673a:	3601      	adds	r6, #1
 800673c:	e7d9      	b.n	80066f2 <_printf_common+0x8e>
	...

08006740 <_printf_i>:
 8006740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006744:	7e0f      	ldrb	r7, [r1, #24]
 8006746:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006748:	2f78      	cmp	r7, #120	; 0x78
 800674a:	4691      	mov	r9, r2
 800674c:	4680      	mov	r8, r0
 800674e:	460c      	mov	r4, r1
 8006750:	469a      	mov	sl, r3
 8006752:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006756:	d807      	bhi.n	8006768 <_printf_i+0x28>
 8006758:	2f62      	cmp	r7, #98	; 0x62
 800675a:	d80a      	bhi.n	8006772 <_printf_i+0x32>
 800675c:	2f00      	cmp	r7, #0
 800675e:	f000 80d8 	beq.w	8006912 <_printf_i+0x1d2>
 8006762:	2f58      	cmp	r7, #88	; 0x58
 8006764:	f000 80a3 	beq.w	80068ae <_printf_i+0x16e>
 8006768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800676c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006770:	e03a      	b.n	80067e8 <_printf_i+0xa8>
 8006772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006776:	2b15      	cmp	r3, #21
 8006778:	d8f6      	bhi.n	8006768 <_printf_i+0x28>
 800677a:	a101      	add	r1, pc, #4	; (adr r1, 8006780 <_printf_i+0x40>)
 800677c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006780:	080067d9 	.word	0x080067d9
 8006784:	080067ed 	.word	0x080067ed
 8006788:	08006769 	.word	0x08006769
 800678c:	08006769 	.word	0x08006769
 8006790:	08006769 	.word	0x08006769
 8006794:	08006769 	.word	0x08006769
 8006798:	080067ed 	.word	0x080067ed
 800679c:	08006769 	.word	0x08006769
 80067a0:	08006769 	.word	0x08006769
 80067a4:	08006769 	.word	0x08006769
 80067a8:	08006769 	.word	0x08006769
 80067ac:	080068f9 	.word	0x080068f9
 80067b0:	0800681d 	.word	0x0800681d
 80067b4:	080068db 	.word	0x080068db
 80067b8:	08006769 	.word	0x08006769
 80067bc:	08006769 	.word	0x08006769
 80067c0:	0800691b 	.word	0x0800691b
 80067c4:	08006769 	.word	0x08006769
 80067c8:	0800681d 	.word	0x0800681d
 80067cc:	08006769 	.word	0x08006769
 80067d0:	08006769 	.word	0x08006769
 80067d4:	080068e3 	.word	0x080068e3
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	1d1a      	adds	r2, r3, #4
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	602a      	str	r2, [r5, #0]
 80067e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067e8:	2301      	movs	r3, #1
 80067ea:	e0a3      	b.n	8006934 <_printf_i+0x1f4>
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	6829      	ldr	r1, [r5, #0]
 80067f0:	0606      	lsls	r6, r0, #24
 80067f2:	f101 0304 	add.w	r3, r1, #4
 80067f6:	d50a      	bpl.n	800680e <_printf_i+0xce>
 80067f8:	680e      	ldr	r6, [r1, #0]
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	2e00      	cmp	r6, #0
 80067fe:	da03      	bge.n	8006808 <_printf_i+0xc8>
 8006800:	232d      	movs	r3, #45	; 0x2d
 8006802:	4276      	negs	r6, r6
 8006804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006808:	485e      	ldr	r0, [pc, #376]	; (8006984 <_printf_i+0x244>)
 800680a:	230a      	movs	r3, #10
 800680c:	e019      	b.n	8006842 <_printf_i+0x102>
 800680e:	680e      	ldr	r6, [r1, #0]
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006816:	bf18      	it	ne
 8006818:	b236      	sxthne	r6, r6
 800681a:	e7ef      	b.n	80067fc <_printf_i+0xbc>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	6820      	ldr	r0, [r4, #0]
 8006820:	1d19      	adds	r1, r3, #4
 8006822:	6029      	str	r1, [r5, #0]
 8006824:	0601      	lsls	r1, r0, #24
 8006826:	d501      	bpl.n	800682c <_printf_i+0xec>
 8006828:	681e      	ldr	r6, [r3, #0]
 800682a:	e002      	b.n	8006832 <_printf_i+0xf2>
 800682c:	0646      	lsls	r6, r0, #25
 800682e:	d5fb      	bpl.n	8006828 <_printf_i+0xe8>
 8006830:	881e      	ldrh	r6, [r3, #0]
 8006832:	4854      	ldr	r0, [pc, #336]	; (8006984 <_printf_i+0x244>)
 8006834:	2f6f      	cmp	r7, #111	; 0x6f
 8006836:	bf0c      	ite	eq
 8006838:	2308      	moveq	r3, #8
 800683a:	230a      	movne	r3, #10
 800683c:	2100      	movs	r1, #0
 800683e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006842:	6865      	ldr	r5, [r4, #4]
 8006844:	60a5      	str	r5, [r4, #8]
 8006846:	2d00      	cmp	r5, #0
 8006848:	bfa2      	ittt	ge
 800684a:	6821      	ldrge	r1, [r4, #0]
 800684c:	f021 0104 	bicge.w	r1, r1, #4
 8006850:	6021      	strge	r1, [r4, #0]
 8006852:	b90e      	cbnz	r6, 8006858 <_printf_i+0x118>
 8006854:	2d00      	cmp	r5, #0
 8006856:	d04d      	beq.n	80068f4 <_printf_i+0x1b4>
 8006858:	4615      	mov	r5, r2
 800685a:	fbb6 f1f3 	udiv	r1, r6, r3
 800685e:	fb03 6711 	mls	r7, r3, r1, r6
 8006862:	5dc7      	ldrb	r7, [r0, r7]
 8006864:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006868:	4637      	mov	r7, r6
 800686a:	42bb      	cmp	r3, r7
 800686c:	460e      	mov	r6, r1
 800686e:	d9f4      	bls.n	800685a <_printf_i+0x11a>
 8006870:	2b08      	cmp	r3, #8
 8006872:	d10b      	bne.n	800688c <_printf_i+0x14c>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	07de      	lsls	r6, r3, #31
 8006878:	d508      	bpl.n	800688c <_printf_i+0x14c>
 800687a:	6923      	ldr	r3, [r4, #16]
 800687c:	6861      	ldr	r1, [r4, #4]
 800687e:	4299      	cmp	r1, r3
 8006880:	bfde      	ittt	le
 8006882:	2330      	movle	r3, #48	; 0x30
 8006884:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006888:	f105 35ff 	addle.w	r5, r5, #4294967295
 800688c:	1b52      	subs	r2, r2, r5
 800688e:	6122      	str	r2, [r4, #16]
 8006890:	f8cd a000 	str.w	sl, [sp]
 8006894:	464b      	mov	r3, r9
 8006896:	aa03      	add	r2, sp, #12
 8006898:	4621      	mov	r1, r4
 800689a:	4640      	mov	r0, r8
 800689c:	f7ff fee2 	bl	8006664 <_printf_common>
 80068a0:	3001      	adds	r0, #1
 80068a2:	d14c      	bne.n	800693e <_printf_i+0x1fe>
 80068a4:	f04f 30ff 	mov.w	r0, #4294967295
 80068a8:	b004      	add	sp, #16
 80068aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ae:	4835      	ldr	r0, [pc, #212]	; (8006984 <_printf_i+0x244>)
 80068b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068b4:	6829      	ldr	r1, [r5, #0]
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80068bc:	6029      	str	r1, [r5, #0]
 80068be:	061d      	lsls	r5, r3, #24
 80068c0:	d514      	bpl.n	80068ec <_printf_i+0x1ac>
 80068c2:	07df      	lsls	r7, r3, #31
 80068c4:	bf44      	itt	mi
 80068c6:	f043 0320 	orrmi.w	r3, r3, #32
 80068ca:	6023      	strmi	r3, [r4, #0]
 80068cc:	b91e      	cbnz	r6, 80068d6 <_printf_i+0x196>
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	f023 0320 	bic.w	r3, r3, #32
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	2310      	movs	r3, #16
 80068d8:	e7b0      	b.n	800683c <_printf_i+0xfc>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	f043 0320 	orr.w	r3, r3, #32
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	2378      	movs	r3, #120	; 0x78
 80068e4:	4828      	ldr	r0, [pc, #160]	; (8006988 <_printf_i+0x248>)
 80068e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068ea:	e7e3      	b.n	80068b4 <_printf_i+0x174>
 80068ec:	0659      	lsls	r1, r3, #25
 80068ee:	bf48      	it	mi
 80068f0:	b2b6      	uxthmi	r6, r6
 80068f2:	e7e6      	b.n	80068c2 <_printf_i+0x182>
 80068f4:	4615      	mov	r5, r2
 80068f6:	e7bb      	b.n	8006870 <_printf_i+0x130>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	6826      	ldr	r6, [r4, #0]
 80068fc:	6961      	ldr	r1, [r4, #20]
 80068fe:	1d18      	adds	r0, r3, #4
 8006900:	6028      	str	r0, [r5, #0]
 8006902:	0635      	lsls	r5, r6, #24
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	d501      	bpl.n	800690c <_printf_i+0x1cc>
 8006908:	6019      	str	r1, [r3, #0]
 800690a:	e002      	b.n	8006912 <_printf_i+0x1d2>
 800690c:	0670      	lsls	r0, r6, #25
 800690e:	d5fb      	bpl.n	8006908 <_printf_i+0x1c8>
 8006910:	8019      	strh	r1, [r3, #0]
 8006912:	2300      	movs	r3, #0
 8006914:	6123      	str	r3, [r4, #16]
 8006916:	4615      	mov	r5, r2
 8006918:	e7ba      	b.n	8006890 <_printf_i+0x150>
 800691a:	682b      	ldr	r3, [r5, #0]
 800691c:	1d1a      	adds	r2, r3, #4
 800691e:	602a      	str	r2, [r5, #0]
 8006920:	681d      	ldr	r5, [r3, #0]
 8006922:	6862      	ldr	r2, [r4, #4]
 8006924:	2100      	movs	r1, #0
 8006926:	4628      	mov	r0, r5
 8006928:	f7f9 fcda 	bl	80002e0 <memchr>
 800692c:	b108      	cbz	r0, 8006932 <_printf_i+0x1f2>
 800692e:	1b40      	subs	r0, r0, r5
 8006930:	6060      	str	r0, [r4, #4]
 8006932:	6863      	ldr	r3, [r4, #4]
 8006934:	6123      	str	r3, [r4, #16]
 8006936:	2300      	movs	r3, #0
 8006938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800693c:	e7a8      	b.n	8006890 <_printf_i+0x150>
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	462a      	mov	r2, r5
 8006942:	4649      	mov	r1, r9
 8006944:	4640      	mov	r0, r8
 8006946:	47d0      	blx	sl
 8006948:	3001      	adds	r0, #1
 800694a:	d0ab      	beq.n	80068a4 <_printf_i+0x164>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	079b      	lsls	r3, r3, #30
 8006950:	d413      	bmi.n	800697a <_printf_i+0x23a>
 8006952:	68e0      	ldr	r0, [r4, #12]
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	4298      	cmp	r0, r3
 8006958:	bfb8      	it	lt
 800695a:	4618      	movlt	r0, r3
 800695c:	e7a4      	b.n	80068a8 <_printf_i+0x168>
 800695e:	2301      	movs	r3, #1
 8006960:	4632      	mov	r2, r6
 8006962:	4649      	mov	r1, r9
 8006964:	4640      	mov	r0, r8
 8006966:	47d0      	blx	sl
 8006968:	3001      	adds	r0, #1
 800696a:	d09b      	beq.n	80068a4 <_printf_i+0x164>
 800696c:	3501      	adds	r5, #1
 800696e:	68e3      	ldr	r3, [r4, #12]
 8006970:	9903      	ldr	r1, [sp, #12]
 8006972:	1a5b      	subs	r3, r3, r1
 8006974:	42ab      	cmp	r3, r5
 8006976:	dcf2      	bgt.n	800695e <_printf_i+0x21e>
 8006978:	e7eb      	b.n	8006952 <_printf_i+0x212>
 800697a:	2500      	movs	r5, #0
 800697c:	f104 0619 	add.w	r6, r4, #25
 8006980:	e7f5      	b.n	800696e <_printf_i+0x22e>
 8006982:	bf00      	nop
 8006984:	08006cb5 	.word	0x08006cb5
 8006988:	08006cc6 	.word	0x08006cc6

0800698c <memcpy>:
 800698c:	440a      	add	r2, r1
 800698e:	4291      	cmp	r1, r2
 8006990:	f100 33ff 	add.w	r3, r0, #4294967295
 8006994:	d100      	bne.n	8006998 <memcpy+0xc>
 8006996:	4770      	bx	lr
 8006998:	b510      	push	{r4, lr}
 800699a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800699e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069a2:	4291      	cmp	r1, r2
 80069a4:	d1f9      	bne.n	800699a <memcpy+0xe>
 80069a6:	bd10      	pop	{r4, pc}

080069a8 <memmove>:
 80069a8:	4288      	cmp	r0, r1
 80069aa:	b510      	push	{r4, lr}
 80069ac:	eb01 0402 	add.w	r4, r1, r2
 80069b0:	d902      	bls.n	80069b8 <memmove+0x10>
 80069b2:	4284      	cmp	r4, r0
 80069b4:	4623      	mov	r3, r4
 80069b6:	d807      	bhi.n	80069c8 <memmove+0x20>
 80069b8:	1e43      	subs	r3, r0, #1
 80069ba:	42a1      	cmp	r1, r4
 80069bc:	d008      	beq.n	80069d0 <memmove+0x28>
 80069be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069c6:	e7f8      	b.n	80069ba <memmove+0x12>
 80069c8:	4402      	add	r2, r0
 80069ca:	4601      	mov	r1, r0
 80069cc:	428a      	cmp	r2, r1
 80069ce:	d100      	bne.n	80069d2 <memmove+0x2a>
 80069d0:	bd10      	pop	{r4, pc}
 80069d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069da:	e7f7      	b.n	80069cc <memmove+0x24>

080069dc <_free_r>:
 80069dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069de:	2900      	cmp	r1, #0
 80069e0:	d044      	beq.n	8006a6c <_free_r+0x90>
 80069e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069e6:	9001      	str	r0, [sp, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f1a1 0404 	sub.w	r4, r1, #4
 80069ee:	bfb8      	it	lt
 80069f0:	18e4      	addlt	r4, r4, r3
 80069f2:	f000 f913 	bl	8006c1c <__malloc_lock>
 80069f6:	4a1e      	ldr	r2, [pc, #120]	; (8006a70 <_free_r+0x94>)
 80069f8:	9801      	ldr	r0, [sp, #4]
 80069fa:	6813      	ldr	r3, [r2, #0]
 80069fc:	b933      	cbnz	r3, 8006a0c <_free_r+0x30>
 80069fe:	6063      	str	r3, [r4, #4]
 8006a00:	6014      	str	r4, [r2, #0]
 8006a02:	b003      	add	sp, #12
 8006a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a08:	f000 b90e 	b.w	8006c28 <__malloc_unlock>
 8006a0c:	42a3      	cmp	r3, r4
 8006a0e:	d908      	bls.n	8006a22 <_free_r+0x46>
 8006a10:	6825      	ldr	r5, [r4, #0]
 8006a12:	1961      	adds	r1, r4, r5
 8006a14:	428b      	cmp	r3, r1
 8006a16:	bf01      	itttt	eq
 8006a18:	6819      	ldreq	r1, [r3, #0]
 8006a1a:	685b      	ldreq	r3, [r3, #4]
 8006a1c:	1949      	addeq	r1, r1, r5
 8006a1e:	6021      	streq	r1, [r4, #0]
 8006a20:	e7ed      	b.n	80069fe <_free_r+0x22>
 8006a22:	461a      	mov	r2, r3
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	b10b      	cbz	r3, 8006a2c <_free_r+0x50>
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	d9fa      	bls.n	8006a22 <_free_r+0x46>
 8006a2c:	6811      	ldr	r1, [r2, #0]
 8006a2e:	1855      	adds	r5, r2, r1
 8006a30:	42a5      	cmp	r5, r4
 8006a32:	d10b      	bne.n	8006a4c <_free_r+0x70>
 8006a34:	6824      	ldr	r4, [r4, #0]
 8006a36:	4421      	add	r1, r4
 8006a38:	1854      	adds	r4, r2, r1
 8006a3a:	42a3      	cmp	r3, r4
 8006a3c:	6011      	str	r1, [r2, #0]
 8006a3e:	d1e0      	bne.n	8006a02 <_free_r+0x26>
 8006a40:	681c      	ldr	r4, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	6053      	str	r3, [r2, #4]
 8006a46:	4421      	add	r1, r4
 8006a48:	6011      	str	r1, [r2, #0]
 8006a4a:	e7da      	b.n	8006a02 <_free_r+0x26>
 8006a4c:	d902      	bls.n	8006a54 <_free_r+0x78>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	6003      	str	r3, [r0, #0]
 8006a52:	e7d6      	b.n	8006a02 <_free_r+0x26>
 8006a54:	6825      	ldr	r5, [r4, #0]
 8006a56:	1961      	adds	r1, r4, r5
 8006a58:	428b      	cmp	r3, r1
 8006a5a:	bf04      	itt	eq
 8006a5c:	6819      	ldreq	r1, [r3, #0]
 8006a5e:	685b      	ldreq	r3, [r3, #4]
 8006a60:	6063      	str	r3, [r4, #4]
 8006a62:	bf04      	itt	eq
 8006a64:	1949      	addeq	r1, r1, r5
 8006a66:	6021      	streq	r1, [r4, #0]
 8006a68:	6054      	str	r4, [r2, #4]
 8006a6a:	e7ca      	b.n	8006a02 <_free_r+0x26>
 8006a6c:	b003      	add	sp, #12
 8006a6e:	bd30      	pop	{r4, r5, pc}
 8006a70:	24000818 	.word	0x24000818

08006a74 <sbrk_aligned>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	4e0e      	ldr	r6, [pc, #56]	; (8006ab0 <sbrk_aligned+0x3c>)
 8006a78:	460c      	mov	r4, r1
 8006a7a:	6831      	ldr	r1, [r6, #0]
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	b911      	cbnz	r1, 8006a86 <sbrk_aligned+0x12>
 8006a80:	f000 f8bc 	bl	8006bfc <_sbrk_r>
 8006a84:	6030      	str	r0, [r6, #0]
 8006a86:	4621      	mov	r1, r4
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f000 f8b7 	bl	8006bfc <_sbrk_r>
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	d00a      	beq.n	8006aa8 <sbrk_aligned+0x34>
 8006a92:	1cc4      	adds	r4, r0, #3
 8006a94:	f024 0403 	bic.w	r4, r4, #3
 8006a98:	42a0      	cmp	r0, r4
 8006a9a:	d007      	beq.n	8006aac <sbrk_aligned+0x38>
 8006a9c:	1a21      	subs	r1, r4, r0
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 f8ac 	bl	8006bfc <_sbrk_r>
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d101      	bne.n	8006aac <sbrk_aligned+0x38>
 8006aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8006aac:	4620      	mov	r0, r4
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	2400081c 	.word	0x2400081c

08006ab4 <_malloc_r>:
 8006ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab8:	1ccd      	adds	r5, r1, #3
 8006aba:	f025 0503 	bic.w	r5, r5, #3
 8006abe:	3508      	adds	r5, #8
 8006ac0:	2d0c      	cmp	r5, #12
 8006ac2:	bf38      	it	cc
 8006ac4:	250c      	movcc	r5, #12
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	4607      	mov	r7, r0
 8006aca:	db01      	blt.n	8006ad0 <_malloc_r+0x1c>
 8006acc:	42a9      	cmp	r1, r5
 8006ace:	d905      	bls.n	8006adc <_malloc_r+0x28>
 8006ad0:	230c      	movs	r3, #12
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	2600      	movs	r6, #0
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006adc:	4e2e      	ldr	r6, [pc, #184]	; (8006b98 <_malloc_r+0xe4>)
 8006ade:	f000 f89d 	bl	8006c1c <__malloc_lock>
 8006ae2:	6833      	ldr	r3, [r6, #0]
 8006ae4:	461c      	mov	r4, r3
 8006ae6:	bb34      	cbnz	r4, 8006b36 <_malloc_r+0x82>
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4638      	mov	r0, r7
 8006aec:	f7ff ffc2 	bl	8006a74 <sbrk_aligned>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	4604      	mov	r4, r0
 8006af4:	d14d      	bne.n	8006b92 <_malloc_r+0xde>
 8006af6:	6834      	ldr	r4, [r6, #0]
 8006af8:	4626      	mov	r6, r4
 8006afa:	2e00      	cmp	r6, #0
 8006afc:	d140      	bne.n	8006b80 <_malloc_r+0xcc>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	4631      	mov	r1, r6
 8006b02:	4638      	mov	r0, r7
 8006b04:	eb04 0803 	add.w	r8, r4, r3
 8006b08:	f000 f878 	bl	8006bfc <_sbrk_r>
 8006b0c:	4580      	cmp	r8, r0
 8006b0e:	d13a      	bne.n	8006b86 <_malloc_r+0xd2>
 8006b10:	6821      	ldr	r1, [r4, #0]
 8006b12:	3503      	adds	r5, #3
 8006b14:	1a6d      	subs	r5, r5, r1
 8006b16:	f025 0503 	bic.w	r5, r5, #3
 8006b1a:	3508      	adds	r5, #8
 8006b1c:	2d0c      	cmp	r5, #12
 8006b1e:	bf38      	it	cc
 8006b20:	250c      	movcc	r5, #12
 8006b22:	4629      	mov	r1, r5
 8006b24:	4638      	mov	r0, r7
 8006b26:	f7ff ffa5 	bl	8006a74 <sbrk_aligned>
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d02b      	beq.n	8006b86 <_malloc_r+0xd2>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	442b      	add	r3, r5
 8006b32:	6023      	str	r3, [r4, #0]
 8006b34:	e00e      	b.n	8006b54 <_malloc_r+0xa0>
 8006b36:	6822      	ldr	r2, [r4, #0]
 8006b38:	1b52      	subs	r2, r2, r5
 8006b3a:	d41e      	bmi.n	8006b7a <_malloc_r+0xc6>
 8006b3c:	2a0b      	cmp	r2, #11
 8006b3e:	d916      	bls.n	8006b6e <_malloc_r+0xba>
 8006b40:	1961      	adds	r1, r4, r5
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	6025      	str	r5, [r4, #0]
 8006b46:	bf18      	it	ne
 8006b48:	6059      	strne	r1, [r3, #4]
 8006b4a:	6863      	ldr	r3, [r4, #4]
 8006b4c:	bf08      	it	eq
 8006b4e:	6031      	streq	r1, [r6, #0]
 8006b50:	5162      	str	r2, [r4, r5]
 8006b52:	604b      	str	r3, [r1, #4]
 8006b54:	4638      	mov	r0, r7
 8006b56:	f104 060b 	add.w	r6, r4, #11
 8006b5a:	f000 f865 	bl	8006c28 <__malloc_unlock>
 8006b5e:	f026 0607 	bic.w	r6, r6, #7
 8006b62:	1d23      	adds	r3, r4, #4
 8006b64:	1af2      	subs	r2, r6, r3
 8006b66:	d0b6      	beq.n	8006ad6 <_malloc_r+0x22>
 8006b68:	1b9b      	subs	r3, r3, r6
 8006b6a:	50a3      	str	r3, [r4, r2]
 8006b6c:	e7b3      	b.n	8006ad6 <_malloc_r+0x22>
 8006b6e:	6862      	ldr	r2, [r4, #4]
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	bf0c      	ite	eq
 8006b74:	6032      	streq	r2, [r6, #0]
 8006b76:	605a      	strne	r2, [r3, #4]
 8006b78:	e7ec      	b.n	8006b54 <_malloc_r+0xa0>
 8006b7a:	4623      	mov	r3, r4
 8006b7c:	6864      	ldr	r4, [r4, #4]
 8006b7e:	e7b2      	b.n	8006ae6 <_malloc_r+0x32>
 8006b80:	4634      	mov	r4, r6
 8006b82:	6876      	ldr	r6, [r6, #4]
 8006b84:	e7b9      	b.n	8006afa <_malloc_r+0x46>
 8006b86:	230c      	movs	r3, #12
 8006b88:	603b      	str	r3, [r7, #0]
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	f000 f84c 	bl	8006c28 <__malloc_unlock>
 8006b90:	e7a1      	b.n	8006ad6 <_malloc_r+0x22>
 8006b92:	6025      	str	r5, [r4, #0]
 8006b94:	e7de      	b.n	8006b54 <_malloc_r+0xa0>
 8006b96:	bf00      	nop
 8006b98:	24000818 	.word	0x24000818

08006b9c <_realloc_r>:
 8006b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	4614      	mov	r4, r2
 8006ba4:	460e      	mov	r6, r1
 8006ba6:	b921      	cbnz	r1, 8006bb2 <_realloc_r+0x16>
 8006ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bac:	4611      	mov	r1, r2
 8006bae:	f7ff bf81 	b.w	8006ab4 <_malloc_r>
 8006bb2:	b92a      	cbnz	r2, 8006bc0 <_realloc_r+0x24>
 8006bb4:	f7ff ff12 	bl	80069dc <_free_r>
 8006bb8:	4625      	mov	r5, r4
 8006bba:	4628      	mov	r0, r5
 8006bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc0:	f000 f838 	bl	8006c34 <_malloc_usable_size_r>
 8006bc4:	4284      	cmp	r4, r0
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	d802      	bhi.n	8006bd0 <_realloc_r+0x34>
 8006bca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006bce:	d812      	bhi.n	8006bf6 <_realloc_r+0x5a>
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4640      	mov	r0, r8
 8006bd4:	f7ff ff6e 	bl	8006ab4 <_malloc_r>
 8006bd8:	4605      	mov	r5, r0
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d0ed      	beq.n	8006bba <_realloc_r+0x1e>
 8006bde:	42bc      	cmp	r4, r7
 8006be0:	4622      	mov	r2, r4
 8006be2:	4631      	mov	r1, r6
 8006be4:	bf28      	it	cs
 8006be6:	463a      	movcs	r2, r7
 8006be8:	f7ff fed0 	bl	800698c <memcpy>
 8006bec:	4631      	mov	r1, r6
 8006bee:	4640      	mov	r0, r8
 8006bf0:	f7ff fef4 	bl	80069dc <_free_r>
 8006bf4:	e7e1      	b.n	8006bba <_realloc_r+0x1e>
 8006bf6:	4635      	mov	r5, r6
 8006bf8:	e7df      	b.n	8006bba <_realloc_r+0x1e>
	...

08006bfc <_sbrk_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4d06      	ldr	r5, [pc, #24]	; (8006c18 <_sbrk_r+0x1c>)
 8006c00:	2300      	movs	r3, #0
 8006c02:	4604      	mov	r4, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	602b      	str	r3, [r5, #0]
 8006c08:	f7fa fa4a 	bl	80010a0 <_sbrk>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_sbrk_r+0x1a>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_sbrk_r+0x1a>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	24000820 	.word	0x24000820

08006c1c <__malloc_lock>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	; (8006c24 <__malloc_lock+0x8>)
 8006c1e:	f000 b811 	b.w	8006c44 <__retarget_lock_acquire_recursive>
 8006c22:	bf00      	nop
 8006c24:	24000824 	.word	0x24000824

08006c28 <__malloc_unlock>:
 8006c28:	4801      	ldr	r0, [pc, #4]	; (8006c30 <__malloc_unlock+0x8>)
 8006c2a:	f000 b80c 	b.w	8006c46 <__retarget_lock_release_recursive>
 8006c2e:	bf00      	nop
 8006c30:	24000824 	.word	0x24000824

08006c34 <_malloc_usable_size_r>:
 8006c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c38:	1f18      	subs	r0, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bfbc      	itt	lt
 8006c3e:	580b      	ldrlt	r3, [r1, r0]
 8006c40:	18c0      	addlt	r0, r0, r3
 8006c42:	4770      	bx	lr

08006c44 <__retarget_lock_acquire_recursive>:
 8006c44:	4770      	bx	lr

08006c46 <__retarget_lock_release_recursive>:
 8006c46:	4770      	bx	lr

08006c48 <_init>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr

08006c54 <_fini>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	bf00      	nop
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr
