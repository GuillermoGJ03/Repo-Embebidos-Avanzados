
Planta_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca80  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800cd20  0800cd20  0001cd20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d21c  0800d21c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d21c  0800d21c  0001d21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d224  0800d224  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d224  0800d224  0001d224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d228  0800d228  0001d228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  24000000  0800d22c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  240001f0  0800d41c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000474  0800d41c  00020474  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0d7  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303b  00000000  00000000  0003c2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003f330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  00040848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bb2c  00000000  00000000  00041c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5f9  00000000  00000000  0007d754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186be7  00000000  00000000  00098d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021f934  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d3c  00000000  00000000  0021f984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cd08 	.word	0x0800cd08

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	0800cd08 	.word	0x0800cd08

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemInit+0xfc>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <SystemInit+0xfc>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0xfc>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <SystemInit+0xfc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0x100>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d807      	bhi.n	8000ab8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x100>)
 8000ab2:	f043 0307 	orr.w	r3, r3, #7
 8000ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemInit+0x104>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x104>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	492c      	ldr	r1, [pc, #176]	; (8000b80 <SystemInit+0x104>)
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemInit+0x108>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemInit+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemInit+0x100>)
 8000aec:	f043 0307 	orr.w	r3, r3, #7
 8000af0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x104>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemInit+0x10c>)
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x104>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <SystemInit+0x110>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x104>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemInit+0x114>)
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x104>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0x114>)
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x104>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SystemInit+0x114>)
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0x104>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0x104>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x118>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x118>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SystemInit+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x120>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d202      	bcs.n	8000b66 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x124>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x128>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	580000c0 	.word	0x580000c0
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bb4:	bf00      	nop
 8000bb6:	4b3f      	ldr	r3, [pc, #252]	; (8000cb4 <main+0x10c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <main+0x24>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dcf4      	bgt.n	8000bb6 <main+0xe>
  if ( timeout < 0 )
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da01      	bge.n	8000bd6 <main+0x2e>
  {
  Error_Handler();
 8000bd2:	f000 fbf7 	bl	80013c4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f000 ffe7 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f87f 	bl	8000cdc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bde:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <main+0x10c>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a33      	ldr	r2, [pc, #204]	; (8000cb4 <main+0x10c>)
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <main+0x10c>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f001 fb6f 	bl	80022e0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f001 fb85 	bl	8002314 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c10:	bf00      	nop
 8000c12:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <main+0x10c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d104      	bne.n	8000c28 <main+0x80>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dcf4      	bgt.n	8000c12 <main+0x6a>
if ( timeout < 0 )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da01      	bge.n	8000c32 <main+0x8a>
{
Error_Handler();
 8000c2e:	f000 fbc9 	bl	80013c4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c32:	f000 faef 	bl	8001214 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c36:	f000 faa1 	bl	800117c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000c3a:	f000 f9b5 	bl	8000fa8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000c3e:	f000 fa4f 	bl	80010e0 <MX_TIM5_Init>
  MX_I2C4_Init();
 8000c42:	f000 f8c5 	bl	8000dd0 <MX_I2C4_Init>
  MX_TIM1_Init();
 8000c46:	f000 f903 	bl	8000e50 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c4a:	f000 f9fb 	bl	8001044 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  print_int(&huart3, "PROYECTO FINAL ROBOGOD\r\n", 0);	// Prueba de comunicación UART
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4919      	ldr	r1, [pc, #100]	; (8000cb8 <main+0x110>)
 8000c52:	481a      	ldr	r0, [pc, #104]	; (8000cbc <main+0x114>)
 8000c54:	f000 ff4e 	bl	8001af4 <print_int>

  MPRLS_status(&hi2c4);									// Revisión de conexión del MPRLS
 8000c58:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <main+0x118>)
 8000c5a:	f000 fbb9 	bl	80013d0 <MPRLS_status>
  MPRLS_init(&hi2c4);									// Inicialización del MPRLS
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <main+0x118>)
 8000c60:	f000 fbd2 	bl	8001408 <MPRLS_init>

  MPU6050_status(&hi2c4); 								// Revisión de conexión del MPU6050
 8000c64:	4816      	ldr	r0, [pc, #88]	; (8000cc0 <main+0x118>)
 8000c66:	f000 fc3f 	bl	80014e8 <MPU6050_status>
  MPU6050_init(&hi2c4);									// Inicialización del MPU6050
 8000c6a:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <main+0x118>)
 8000c6c:	f000 fc58 	bl	8001520 <MPU6050_init>

  HAL_TIM_Base_Start(&htim5); 							// Inicialización del timer 5 (cronómetro)
 8000c70:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <main+0x11c>)
 8000c72:	f005 f89f 	bl	8005db4 <HAL_TIM_Base_Start>

  HAL_Delay(2000);										// Delay 2s
 8000c76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c7a:	f001 f827 	bl	8001ccc <HAL_Delay>

  HAL_TIM_PWM_Init(&htim1);								// Inicialización del timer 1 (PWM)
 8000c7e:	4812      	ldr	r0, [pc, #72]	; (8000cc8 <main+0x120>)
 8000c80:	f005 f980 	bl	8005f84 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);				// Encendido del PWM
 8000c84:	2100      	movs	r1, #0
 8000c86:	4810      	ldr	r0, [pc, #64]	; (8000cc8 <main+0x120>)
 8000c88:	f005 f9de 	bl	8006048 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 100;										// Duty Cycle del 100%
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <main+0x124>)
 8000c8e:	2264      	movs	r2, #100	; 0x64
 8000c90:	635a      	str	r2, [r3, #52]	; 0x34

  // Cambiar las dos líneas anteriores, no enceder el PWM hasta que el control lo requiera, y apagarlo después
  // Entradas de polaridad del L298N
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);			// In 1
 8000c92:	2201      	movs	r2, #1
 8000c94:	2101      	movs	r1, #1
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <main+0x128>)
 8000c98:	f001 fb08 	bl	80022ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);			// In 2
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <main+0x128>)
 8000ca2:	f001 fb03 	bl	80022ac <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);						// Inicialización del timer 2 (interrupción 128 Hz)
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <main+0x12c>)
 8000ca8:	f005 f8f4 	bl	8005e94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);						// Inicialización del timer 3 (interrupción 100 Hz)
 8000cac:	480a      	ldr	r0, [pc, #40]	; (8000cd8 <main+0x130>)
 8000cae:	f005 f8f1 	bl	8005e94 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <main+0x10a>
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	0800cd20 	.word	0x0800cd20
 8000cbc:	24000388 	.word	0x24000388
 8000cc0:	2400020c 	.word	0x2400020c
 8000cc4:	2400033c 	.word	0x2400033c
 8000cc8:	24000258 	.word	0x24000258
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	58020c00 	.word	0x58020c00
 8000cd4:	240002a4 	.word	0x240002a4
 8000cd8:	240002f0 	.word	0x240002f0

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09c      	sub	sp, #112	; 0x70
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	224c      	movs	r2, #76	; 0x4c
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f007 fc9c 	bl	8008628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f007 fc96 	bl	8008628 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cfc:	2004      	movs	r0, #4
 8000cfe:	f002 fc85 	bl	800360c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <SystemClock_Config+0xec>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <SystemClock_Config+0xec>)
 8000d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <SystemClock_Config+0xec>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <SystemClock_Config+0xf0>)
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <SystemClock_Config+0xf0>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <SystemClock_Config+0xf0>)
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d34:	bf00      	nop
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <SystemClock_Config+0xec>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d42:	d1f8      	bne.n	8000d36 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d44:	2301      	movs	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d48:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d52:	2302      	movs	r3, #2
 8000d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000d5a:	2378      	movs	r3, #120	; 0x78
 8000d5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 fca0 	bl	80036c0 <HAL_RCC_OscConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d86:	f000 fb1d 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	233f      	movs	r3, #63	; 0x3f
 8000d8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d96:	2308      	movs	r3, #8
 8000d98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d9a:	2340      	movs	r3, #64	; 0x40
 8000d9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d9e:	2340      	movs	r3, #64	; 0x40
 8000da0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000da8:	2340      	movs	r3, #64	; 0x40
 8000daa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2104      	movs	r1, #4
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 f8b3 	bl	8003f1c <HAL_RCC_ClockConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000dbc:	f000 fb02 	bl	80013c4 <Error_Handler>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3770      	adds	r7, #112	; 0x70
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	58024800 	.word	0x58024800
 8000dcc:	58000400 	.word	0x58000400

08000dd0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <MX_I2C4_Init+0x78>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <MX_I2C4_Init+0x7c>)
 8000dde:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e0a:	480e      	ldr	r0, [pc, #56]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000e0c:	f001 fa96 	bl	800233c <HAL_I2C_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e16:	f000 fad5 	bl	80013c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000e1e:	f002 fb5d 	bl	80034dc <HAL_I2CEx_ConfigAnalogFilter>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e28:	f000 facc 	bl	80013c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000e30:	f002 fb9f 	bl	8003572 <HAL_I2CEx_ConfigDigitalFilter>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e3a:	f000 fac3 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2400020c 	.word	0x2400020c
 8000e48:	58001c00 	.word	0x58001c00
 8000e4c:	307075b1 	.word	0x307075b1

08000e50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b09a      	sub	sp, #104	; 0x68
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	222c      	movs	r2, #44	; 0x2c
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f007 fbcc 	bl	8008628 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e90:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000e92:	4a44      	ldr	r2, [pc, #272]	; (8000fa4 <MX_TIM1_Init+0x154>)
 8000e94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240 - 1;
 8000e96:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000e98:	22ef      	movs	r2, #239	; 0xef
 8000e9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000ea4:	2264      	movs	r2, #100	; 0x64
 8000ea6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eae:	4b3c      	ldr	r3, [pc, #240]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb4:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eba:	4839      	ldr	r0, [pc, #228]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000ebc:	f004 ff22 	bl	8005d04 <HAL_TIM_Base_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ec6:	f000 fa7d 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ece:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ed0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4832      	ldr	r0, [pc, #200]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000ed8:	f005 fbf8 	bl	80066cc <HAL_TIM_ConfigClockSource>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ee2:	f000 fa6f 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ee6:	482e      	ldr	r0, [pc, #184]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000ee8:	f005 f84c 	bl	8005f84 <HAL_TIM_PWM_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ef2:	f000 fa67 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f06:	4619      	mov	r1, r3
 8000f08:	4825      	ldr	r0, [pc, #148]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000f0a:	f006 f933 	bl	8007174 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000f14:	f000 fa56 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f18:	2360      	movs	r3, #96	; 0x60
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f20:	2300      	movs	r3, #0
 8000f22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f24:	2300      	movs	r3, #0
 8000f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000f3e:	f005 fab1 	bl	80064a4 <HAL_TIM_PWM_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000f48:	f000 fa3c 	bl	80013c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000f82:	f006 f985 	bl	8007290 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000f8c:	f000 fa1a 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000f92:	f000 fc09 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 8000f96:	bf00      	nop
 8000f98:	3768      	adds	r7, #104	; 0x68
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	24000258 	.word	0x24000258
 8000fa4:	40010000 	.word	0x40010000

08000fa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240 - 1;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fd0:	22ef      	movs	r2, #239	; 0xef
 8000fd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7813 - 1;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fdc:	f641 6284 	movw	r2, #7812	; 0x1e84
 8000fe0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <MX_TIM2_Init+0x98>)
 8000ff0:	f004 fe88 	bl	8005d04 <HAL_TIM_Base_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ffa:	f000 f9e3 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_TIM2_Init+0x98>)
 800100c:	f005 fb5e 	bl	80066cc <HAL_TIM_ConfigClockSource>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001016:	f000 f9d5 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_TIM2_Init+0x98>)
 8001028:	f006 f8a4 	bl	8007174 <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001032:	f000 f9c7 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	240002a4 	.word	0x240002a4

08001044 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_TIM3_Init+0x94>)
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <MX_TIM3_Init+0x98>)
 8001066:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240 - 1;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_TIM3_Init+0x94>)
 800106a:	22ef      	movs	r2, #239	; 0xef
 800106c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_TIM3_Init+0x94>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000 - 1;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_TIM3_Init+0x94>)
 8001076:	f242 720f 	movw	r2, #9999	; 0x270f
 800107a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_TIM3_Init+0x94>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_TIM3_Init+0x94>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001088:	4813      	ldr	r0, [pc, #76]	; (80010d8 <MX_TIM3_Init+0x94>)
 800108a:	f004 fe3b 	bl	8005d04 <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001094:	f000 f996 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4619      	mov	r1, r3
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <MX_TIM3_Init+0x94>)
 80010a6:	f005 fb11 	bl	80066cc <HAL_TIM_ConfigClockSource>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010b0:	f000 f988 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_TIM3_Init+0x94>)
 80010c2:	f006 f857 	bl	8007174 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80010cc:	f000 f97a 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	240002f0 	.word	0x240002f0
 80010dc:	40000400 	.word	0x40000400

080010e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_TIM5_Init+0x94>)
 8001100:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <MX_TIM5_Init+0x98>)
 8001102:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 230;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <MX_TIM5_Init+0x94>)
 8001106:	22e6      	movs	r2, #230	; 0xe6
 8001108:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_TIM5_Init+0x94>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_TIM5_Init+0x94>)
 8001112:	f04f 32ff 	mov.w	r2, #4294967295
 8001116:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_TIM5_Init+0x94>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_TIM5_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001124:	4813      	ldr	r0, [pc, #76]	; (8001174 <MX_TIM5_Init+0x94>)
 8001126:	f004 fded 	bl	8005d04 <HAL_TIM_Base_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001130:	f000 f948 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001138:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <MX_TIM5_Init+0x94>)
 8001142:	f005 fac3 	bl	80066cc <HAL_TIM_ConfigClockSource>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800114c:	f000 f93a 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_TIM5_Init+0x94>)
 800115e:	f006 f809 	bl	8007174 <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001168:	f000 f92c 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2400033c 	.word	0x2400033c
 8001178:	40000c00 	.word	0x40000c00

0800117c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <MX_USART3_UART_Init+0x90>)
 8001182:	4a23      	ldr	r2, [pc, #140]	; (8001210 <MX_USART3_UART_Init+0x94>)
 8001184:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_USART3_UART_Init+0x90>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_USART3_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_USART3_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <MX_USART3_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011c4:	4811      	ldr	r0, [pc, #68]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011c6:	f006 f8ff 	bl	80073c8 <HAL_UART_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011d0:	f000 f8f8 	bl	80013c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d4:	2100      	movs	r1, #0
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011d8:	f007 f932 	bl	8008440 <HAL_UARTEx_SetTxFifoThreshold>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011e2:	f000 f8ef 	bl	80013c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011ea:	f007 f967 	bl	80084bc <HAL_UARTEx_SetRxFifoThreshold>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011f4:	f000 f8e6 	bl	80013c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011fa:	f007 f8e8 	bl	80083ce <HAL_UARTEx_DisableFifoMode>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001204:	f000 f8de 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	24000388 	.word	0x24000388
 8001210:	40004800 	.word	0x40004800

08001214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	4b49      	ldr	r3, [pc, #292]	; (8001350 <MX_GPIO_Init+0x13c>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	4a47      	ldr	r2, [pc, #284]	; (8001350 <MX_GPIO_Init+0x13c>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123a:	4b45      	ldr	r3, [pc, #276]	; (8001350 <MX_GPIO_Init+0x13c>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001248:	4b41      	ldr	r3, [pc, #260]	; (8001350 <MX_GPIO_Init+0x13c>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	4a40      	ldr	r2, [pc, #256]	; (8001350 <MX_GPIO_Init+0x13c>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <MX_GPIO_Init+0x13c>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <MX_GPIO_Init+0x13c>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a38      	ldr	r2, [pc, #224]	; (8001350 <MX_GPIO_Init+0x13c>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <MX_GPIO_Init+0x13c>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001284:	4b32      	ldr	r3, [pc, #200]	; (8001350 <MX_GPIO_Init+0x13c>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	4a31      	ldr	r2, [pc, #196]	; (8001350 <MX_GPIO_Init+0x13c>)
 800128c:	f043 0320 	orr.w	r3, r3, #32
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001294:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <MX_GPIO_Init+0x13c>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <MX_GPIO_Init+0x13c>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	4a29      	ldr	r2, [pc, #164]	; (8001350 <MX_GPIO_Init+0x13c>)
 80012aa:	f043 0310 	orr.w	r3, r3, #16
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <MX_GPIO_Init+0x13c>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <MX_GPIO_Init+0x13c>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	4a22      	ldr	r2, [pc, #136]	; (8001350 <MX_GPIO_Init+0x13c>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_GPIO_Init+0x13c>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f244 0101 	movw	r1, #16385	; 0x4001
 80012e4:	481b      	ldr	r0, [pc, #108]	; (8001354 <MX_GPIO_Init+0x140>)
 80012e6:	f000 ffe1 	bl	80022ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2103      	movs	r1, #3
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <MX_GPIO_Init+0x144>)
 80012f0:	f000 ffdc 	bl	80022ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012fe:	2302      	movs	r3, #2
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4814      	ldr	r0, [pc, #80]	; (800135c <MX_GPIO_Init+0x148>)
 800130a:	f000 fe1f 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800130e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001318:	2302      	movs	r3, #2
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131c:	2302      	movs	r3, #2
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <MX_GPIO_Init+0x140>)
 8001328:	f000 fe10 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 800132c:	2303      	movs	r3, #3
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001334:	2302      	movs	r3, #2
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_GPIO_Init+0x144>)
 8001344:	f000 fe02 	bl	8001f4c <HAL_GPIO_Init>

}
 8001348:	bf00      	nop
 800134a:	3730      	adds	r7, #48	; 0x30
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	58024400 	.word	0x58024400
 8001354:	58020400 	.word	0x58020400
 8001358:	58020c00 	.word	0x58020c00
 800135c:	58020800 	.word	0x58020800

08001360 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Interrupción por timer (TIM2) a 128 Hz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d108      	bne.n	8001382 <HAL_TIM_PeriodElapsedCallback+0x22>
		// Guardado de muestras en los arreglos
		//muestras_x[nm] = gyr[0];
		//muestras_y[nm] = gyr[1];
		//muestras_z[nm] = gyr[2];

		nm++;													// Incremento del contador de muestras
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001376:	b29b      	uxth	r3, r3
 8001378:	3301      	adds	r3, #1
 800137a:	b29b      	uxth	r3, r3
 800137c:	b21a      	sxth	r2, r3
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001380:	801a      	strh	r2, [r3, #0]
		//print_Readings();
	}
	if (htim == &htim3){
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d10c      	bne.n	80013a4 <HAL_TIM_PeriodElapsedCallback+0x44>
		press_raw = MPRLS_data(&hi2c4);
 800138a:	480b      	ldr	r0, [pc, #44]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800138c:	f000 f850 	bl	8001430 <MPRLS_data>
 8001390:	4603      	mov	r3, r0
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001394:	6013      	str	r3, [r2, #0]
		send_data(&huart3, press_raw, 4);
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2204      	movs	r2, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4808      	ldr	r0, [pc, #32]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80013a0:	f000 fbc6 	bl	8001b30 <send_data>
	}
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	240002a4 	.word	0x240002a4
 80013b0:	24000418 	.word	0x24000418
 80013b4:	240002f0 	.word	0x240002f0
 80013b8:	2400020c 	.word	0x2400020c
 80013bc:	2400041c 	.word	0x2400041c
 80013c0:	24000388 	.word	0x24000388

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <MPRLS_status>:
float pmin = 0; // minimum value of pressure range [bar, psi, kPa, etc.
uint8_t cmd[3] = {0xAA, 0x00, 0x00}; // Comando a enviar
uint8_t press_read[4];
float press = 0, press_counts;

void MPRLS_status(I2C_HandleTypeDef *hi2c){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(hi2c, 0x30, 3, 3000);
 80013d8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80013dc:	2203      	movs	r2, #3
 80013de:	2130      	movs	r1, #48	; 0x30
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f001 fc53 	bl	8002c8c <HAL_I2C_IsDeviceReady>
 80013e6:	4603      	mov	r3, r0
 80013e8:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, SET);
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d104      	bne.n	80013fa <MPRLS_status+0x2a>
 80013f0:	2201      	movs	r2, #1
 80013f2:	2102      	movs	r1, #2
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <MPRLS_status+0x34>)
 80013f6:	f000 ff59 	bl	80022ac <HAL_GPIO_WritePin>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	58021000 	.word	0x58021000

08001408 <MPRLS_init>:

void MPRLS_init(I2C_HandleTypeDef *hi2c){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af02      	add	r7, sp, #8
 800140e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, 0x30, cmd, 3, 3000);
 8001410:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2303      	movs	r3, #3
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <MPRLS_init+0x24>)
 800141a:	2130      	movs	r1, #48	; 0x30
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f001 f81d 	bl	800245c <HAL_I2C_Master_Transmit>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	24000010 	.word	0x24000010

08001430 <MPRLS_data>:
	psi /= (float)(outputmax - outputmin);
	psi += pmin;
	return psi;
}

uint8_t *MPRLS_data(I2C_HandleTypeDef *hi2c){
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]
	outputmin = (uint32_t)((float)16777216L * (outputmin / 100.0) + 0.5);
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <MPRLS_data+0xa8>)
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001442:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80014c8 <MPRLS_data+0x98>
 8001446:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800144a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80014d0 <MPRLS_data+0xa0>
 800144e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001452:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001456:	ee37 7b06 	vadd.f64	d7, d7, d6
 800145a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800145e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MPRLS_data+0xa8>)
 8001464:	edc3 7a00 	vstr	s15, [r3]
	outputmax = (uint32_t)((float)16777216L * (outputmax / 100.0) + 0.5);
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MPRLS_data+0xac>)
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001472:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80014c8 <MPRLS_data+0x98>
 8001476:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800147a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80014d0 <MPRLS_data+0xa0>
 800147e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001482:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001486:	ee37 7b06 	vadd.f64	d7, d7, d6
 800148a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800148e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MPRLS_data+0xac>)
 8001494:	edc3 7a00 	vstr	s15, [r3]
	HAL_I2C_Master_Transmit(hi2c, 0x30, cmd, 3, 3000);
 8001498:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2303      	movs	r3, #3
 80014a0:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <MPRLS_data+0xb0>)
 80014a2:	2130      	movs	r1, #48	; 0x30
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 ffd9 	bl	800245c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, 0x31, press_read, 4, 3000);
 80014aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2304      	movs	r3, #4
 80014b2:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <MPRLS_data+0xb4>)
 80014b4:	2131      	movs	r1, #49	; 0x31
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f001 f8c4 	bl	8002644 <HAL_I2C_Master_Receive>
	return press_read;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MPRLS_data+0xb4>)
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	00000000 	.word	0x00000000
 80014cc:	40590000 	.word	0x40590000
 80014d0:	00000000 	.word	0x00000000
 80014d4:	41700000 	.word	0x41700000
 80014d8:	2400000c 	.word	0x2400000c
 80014dc:	24000008 	.word	0x24000008
 80014e0:	24000010 	.word	0x24000010
 80014e4:	24000420 	.word	0x24000420

080014e8 <MPU6050_status>:

// Lectura del MPU6050
uint8_t check, data;
float gyrF[3];

void MPU6050_status(I2C_HandleTypeDef *hi2c){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(hi2c, MPU6050_ADDR, 1, 3000);
 80014f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80014f4:	2201      	movs	r2, #1
 80014f6:	21d0      	movs	r1, #208	; 0xd0
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f001 fbc7 	bl	8002c8c <HAL_I2C_IsDeviceReady>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d104      	bne.n	8001512 <MPU6050_status+0x2a>
 8001508:	2201      	movs	r2, #1
 800150a:	2101      	movs	r1, #1
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <MPU6050_status+0x34>)
 800150e:	f000 fecd 	bl	80022ac <HAL_GPIO_WritePin>
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	58020400 	.word	0x58020400

08001520 <MPU6050_init>:

uint8_t MPU6050_init(I2C_HandleTypeDef *hi2c){
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af04      	add	r7, sp, #16
 8001526:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 3000);
 8001528:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	2301      	movs	r3, #1
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <MPU6050_init+0x98>)
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2301      	movs	r3, #1
 8001538:	2275      	movs	r2, #117	; 0x75
 800153a:	21d0      	movs	r1, #208	; 0xd0
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f001 fa8b 	bl	8002a58 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8001542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001546:	f000 fbc1 	bl	8001ccc <HAL_Delay>

	data = 0x00;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MPU6050_init+0x9c>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 3000);
 8001550:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001554:	9302      	str	r3, [sp, #8]
 8001556:	2301      	movs	r3, #1
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MPU6050_init+0x9c>)
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2301      	movs	r3, #1
 8001560:	226b      	movs	r2, #107	; 0x6b
 8001562:	21d0      	movs	r1, #208	; 0xd0
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f001 f963 	bl	8002830 <HAL_I2C_Mem_Write>
	data = 0b10000011;
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MPU6050_init+0x9c>)
 800156c:	2283      	movs	r2, #131	; 0x83
 800156e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPLRT_DIV, 1, &data, 1, 3000);
 8001570:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	2301      	movs	r3, #1
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MPU6050_init+0x9c>)
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2301      	movs	r3, #1
 8001580:	2219      	movs	r2, #25
 8001582:	21d0      	movs	r1, #208	; 0xd0
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f001 f953 	bl	8002830 <HAL_I2C_Mem_Write>
	data = 0x00;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MPU6050_init+0x9c>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG, 1, &data, 1, 3000);
 8001590:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	2301      	movs	r3, #1
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MPU6050_init+0x9c>)
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2301      	movs	r3, #1
 80015a0:	221b      	movs	r2, #27
 80015a2:	21d0      	movs	r1, #208	; 0xd0
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f001 f943 	bl	8002830 <HAL_I2C_Mem_Write>

	return check;
 80015aa:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <MPU6050_init+0x98>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	24000424 	.word	0x24000424
 80015bc:	24000425 	.word	0x24000425

080015c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_MspInit+0x30>)
 80015c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_MspInit+0x30>)
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_MspInit+0x30>)
 80015d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	58024400 	.word	0x58024400

080015f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0b8      	sub	sp, #224	; 0xe0
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	22bc      	movs	r2, #188	; 0xbc
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f007 f807 	bl	8008628 <memset>
  if(hi2c->Instance==I2C4)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a25      	ldr	r2, [pc, #148]	; (80016b4 <HAL_I2C_MspInit+0xc0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d142      	bne.n	80016aa <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001624:	2310      	movs	r3, #16
 8001626:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	4618      	mov	r0, r3
 8001634:	f002 fffe 	bl	8004634 <HAL_RCCEx_PeriphCLKConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800163e:	f7ff fec1 	bl	80013c4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_I2C_MspInit+0xc4>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <HAL_I2C_MspInit+0xc4>)
 800164a:	f043 0320 	orr.w	r3, r3, #32
 800164e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_I2C_MspInit+0xc4>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001660:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001668:	2312      	movs	r3, #18
 800166a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800167a:	2304      	movs	r3, #4
 800167c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001680:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001684:	4619      	mov	r1, r3
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <HAL_I2C_MspInit+0xc8>)
 8001688:	f000 fc60 	bl	8001f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_I2C_MspInit+0xc4>)
 800168e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <HAL_I2C_MspInit+0xc4>)
 8001694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001698:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_I2C_MspInit+0xc4>)
 800169e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80016aa:	bf00      	nop
 80016ac:	37e0      	adds	r7, #224	; 0xe0
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	58001c00 	.word	0x58001c00
 80016b8:	58024400 	.word	0x58024400
 80016bc:	58021400 	.word	0x58021400

080016c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a32      	ldr	r2, [pc, #200]	; (8001798 <HAL_TIM_Base_MspInit+0xd8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10f      	bne.n	80016f2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016d2:	4b32      	ldr	r3, [pc, #200]	; (800179c <HAL_TIM_Base_MspInit+0xdc>)
 80016d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016d8:	4a30      	ldr	r2, [pc, #192]	; (800179c <HAL_TIM_Base_MspInit+0xdc>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016e2:	4b2e      	ldr	r3, [pc, #184]	; (800179c <HAL_TIM_Base_MspInit+0xdc>)
 80016e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80016f0:	e04d      	b.n	800178e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016fa:	d117      	bne.n	800172c <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_TIM_Base_MspInit+0xdc>)
 80016fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001702:	4a26      	ldr	r2, [pc, #152]	; (800179c <HAL_TIM_Base_MspInit+0xdc>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <HAL_TIM_Base_MspInit+0xdc>)
 800170e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	201c      	movs	r0, #28
 8001720:	f000 fbdf 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001724:	201c      	movs	r0, #28
 8001726:	f000 fbf6 	bl	8001f16 <HAL_NVIC_EnableIRQ>
}
 800172a:	e030      	b.n	800178e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <HAL_TIM_Base_MspInit+0xe0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d117      	bne.n	8001766 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_TIM_Base_MspInit+0xdc>)
 8001738:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800173c:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_TIM_Base_MspInit+0xdc>)
 800173e:	f043 0302 	orr.w	r3, r3, #2
 8001742:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_TIM_Base_MspInit+0xdc>)
 8001748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	201d      	movs	r0, #29
 800175a:	f000 fbc2 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800175e:	201d      	movs	r0, #29
 8001760:	f000 fbd9 	bl	8001f16 <HAL_NVIC_EnableIRQ>
}
 8001764:	e013      	b.n	800178e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_TIM_Base_MspInit+0xe4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d10e      	bne.n	800178e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_TIM_Base_MspInit+0xdc>)
 8001772:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_TIM_Base_MspInit+0xdc>)
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_TIM_Base_MspInit+0xdc>)
 8001782:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40010000 	.word	0x40010000
 800179c:	58024400 	.word	0x58024400
 80017a0:	40000400 	.word	0x40000400
 80017a4:	40000c00 	.word	0x40000c00

080017a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a13      	ldr	r2, [pc, #76]	; (8001814 <HAL_TIM_MspPostInit+0x6c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d11f      	bne.n	800180a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_TIM_MspPostInit+0x70>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d0:	4a11      	ldr	r2, [pc, #68]	; (8001818 <HAL_TIM_MspPostInit+0x70>)
 80017d2:	f043 0310 	orr.w	r3, r3, #16
 80017d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_TIM_MspPostInit+0x70>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <HAL_TIM_MspPostInit+0x74>)
 8001806:	f000 fba1 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40010000 	.word	0x40010000
 8001818:	58024400 	.word	0x58024400
 800181c:	58021000 	.word	0x58021000

08001820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0b8      	sub	sp, #224	; 0xe0
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	22bc      	movs	r2, #188	; 0xbc
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f006 fef1 	bl	8008628 <memset>
  if(huart->Instance==USART3)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a25      	ldr	r2, [pc, #148]	; (80018e0 <HAL_UART_MspInit+0xc0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d142      	bne.n	80018d6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	4618      	mov	r0, r3
 8001860:	f002 fee8 	bl	8004634 <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800186a:	f7ff fdab 	bl	80013c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <HAL_UART_MspInit+0xc4>)
 8001870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001874:	4a1b      	ldr	r2, [pc, #108]	; (80018e4 <HAL_UART_MspInit+0xc4>)
 8001876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800187a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_UART_MspInit+0xc4>)
 8001880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_UART_MspInit+0xc4>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001892:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <HAL_UART_MspInit+0xc4>)
 8001894:	f043 0308 	orr.w	r3, r3, #8
 8001898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_UART_MspInit+0xc4>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018c4:	2307      	movs	r3, #7
 80018c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_UART_MspInit+0xc8>)
 80018d2:	f000 fb3b 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	37e0      	adds	r7, #224	; 0xe0
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40004800 	.word	0x40004800
 80018e4:	58024400 	.word	0x58024400
 80018e8:	58020c00 	.word	0x58020c00

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <NMI_Handler+0x4>

080018f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <MemManage_Handler+0x4>

080018fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler+0x4>

0800190a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001938:	f000 f9a8 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}

08001940 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <TIM2_IRQHandler+0x10>)
 8001946:	f004 fc8d 	bl	8006264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	240002a4 	.word	0x240002a4

08001954 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <TIM3_IRQHandler+0x10>)
 800195a:	f004 fc83 	bl	8006264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	240002f0 	.word	0x240002f0

08001968 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
	return 1;
 800196c:	2301      	movs	r3, #1
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_kill>:

int _kill(int pid, int sig)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001982:	f006 fe27 	bl	80085d4 <__errno>
 8001986:	4603      	mov	r3, r0
 8001988:	2216      	movs	r2, #22
 800198a:	601a      	str	r2, [r3, #0]
	return -1;
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_exit>:

void _exit (int status)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ffe7 	bl	8001978 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019aa:	e7fe      	b.n	80019aa <_exit+0x12>

080019ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e00a      	b.n	80019d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019be:	f3af 8000 	nop.w
 80019c2:	4601      	mov	r1, r0
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	60ba      	str	r2, [r7, #8]
 80019ca:	b2ca      	uxtb	r2, r1
 80019cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	dbf0      	blt.n	80019be <_read+0x12>
	}

return len;
 80019dc:	687b      	ldr	r3, [r7, #4]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e009      	b.n	8001a0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	60ba      	str	r2, [r7, #8]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbf1      	blt.n	80019f8 <_write+0x12>
	}
	return len;
 8001a14:	687b      	ldr	r3, [r7, #4]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_close>:

int _close(int file)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
	return -1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a46:	605a      	str	r2, [r3, #4]
	return 0;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_isatty>:

int _isatty(int file)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
	return 0;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <_sbrk+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <_sbrk+0x60>)
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d207      	bcs.n	8001ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab8:	f006 fd8c 	bl	80085d4 <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	220c      	movs	r2, #12
 8001ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e009      	b.n	8001adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <_sbrk+0x64>)
 8001ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	24080000 	.word	0x24080000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	24000428 	.word	0x24000428
 8001af0:	24000478 	.word	0x24000478

08001af4 <print_int>:

typedef float complex cplx;
char uart_buf[50];
uint16_t uart_buf_len;

void print_int(UART_HandleTypeDef *huart, char *string, int var){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
	uart_buf_len = sprintf(uart_buf, string, var);
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	4808      	ldr	r0, [pc, #32]	; (8001b28 <print_int+0x34>)
 8001b06:	f007 fbe5 	bl	80092d4 <siprintf>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <print_int+0x38>)
 8001b10:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(huart, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <print_int+0x38>)
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	2364      	movs	r3, #100	; 0x64
 8001b18:	4903      	ldr	r1, [pc, #12]	; (8001b28 <print_int+0x34>)
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f005 fca4 	bl	8007468 <HAL_UART_Transmit>
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	2400042c 	.word	0x2400042c
 8001b2c:	2400045e 	.word	0x2400045e

08001b30 <send_data>:
void print_arrayCplx(UART_HandleTypeDef *huart, cplx *arr, uint16_t size){
	for(int i = 0; i < size; i++) print_cplx(huart, "", arr[i]);
	print_int(huart, "\r\n", 0);
}

void send_data(UART_HandleTypeDef *huart, uint8_t *arr, uint8_t size){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(huart, (uint8_t *)arr, size, 100);
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	2364      	movs	r3, #100	; 0x64
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f005 fc8e 	bl	8007468 <HAL_UART_Transmit>
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b58:	f7fe ff90 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b5e:	490d      	ldr	r1, [pc, #52]	; (8001b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b74:	4c0a      	ldr	r4, [pc, #40]	; (8001ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b82:	f006 fd2d 	bl	80085e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff f80f 	bl	8000ba8 <main>
  bx  lr
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b8c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b94:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8001b98:	0800d22c 	.word	0x0800d22c
  ldr r2, =_sbss
 8001b9c:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8001ba0:	24000474 	.word	0x24000474

08001ba4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC3_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bae:	2003      	movs	r0, #3
 8001bb0:	f000 f98c 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bb4:	f002 fb68 	bl	8004288 <HAL_RCC_GetSysClockFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_Init+0x68>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	4913      	ldr	r1, [pc, #76]	; (8001c14 <HAL_Init+0x6c>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <HAL_Init+0x68>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <HAL_Init+0x6c>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
 8001be8:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <HAL_Init+0x70>)
 8001bea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_Init+0x74>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f814 	bl	8001c20 <HAL_InitTick>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e002      	b.n	8001c08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c02:	f7ff fcdd 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	58024400 	.word	0x58024400
 8001c14:	0800cd3c 	.word	0x0800cd3c
 8001c18:	24000004 	.word	0x24000004
 8001c1c:	24000000 	.word	0x24000000

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_InitTick+0x60>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e021      	b.n	8001c78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_InitTick+0x64>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_InitTick+0x60>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f971 	bl	8001f32 <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 f93b 	bl	8001ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_InitTick+0x68>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	24000018 	.word	0x24000018
 8001c84:	24000000 	.word	0x24000000
 8001c88:	24000014 	.word	0x24000014

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	24000018 	.word	0x24000018
 8001cb0:	24000460 	.word	0x24000460

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	24000460 	.word	0x24000460

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff ffee 	bl	8001cb4 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_Delay+0x44>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	24000018 	.word	0x24000018

08001d14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_GetREVID+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0c1b      	lsrs	r3, r3, #16
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	5c001000 	.word	0x5c001000

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <__NVIC_SetPriorityGrouping+0x40>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <__NVIC_SetPriorityGrouping+0x40>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00
 8001d70:	05fa0000 	.word	0x05fa0000

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <__NVIC_EnableIRQ+0x38>)
 8001daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f7ff ff8e 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff29 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef0:	f7ff ff40 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff90 	bl	8001e20 <NVIC_EncodePriority>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff5f 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff33 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffa4 	bl	8001e88 <SysTick_Config>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f5a:	4b89      	ldr	r3, [pc, #548]	; (8002180 <HAL_GPIO_Init+0x234>)
 8001f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f5e:	e194      	b.n	800228a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2101      	movs	r1, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8186 	beq.w	8002284 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d005      	beq.n	8001f90 <HAL_GPIO_Init+0x44>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d130      	bne.n	8001ff2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	f003 0201 	and.w	r2, r3, #1
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d017      	beq.n	800202e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d123      	bne.n	8002082 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	69b9      	ldr	r1, [r7, #24]
 800207e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0203 	and.w	r2, r3, #3
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80e0 	beq.w	8002284 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_GPIO_Init+0x238>)
 80020c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020ca:	4a2e      	ldr	r2, [pc, #184]	; (8002184 <HAL_GPIO_Init+0x238>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_GPIO_Init+0x238>)
 80020d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e2:	4a29      	ldr	r2, [pc, #164]	; (8002188 <HAL_GPIO_Init+0x23c>)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a20      	ldr	r2, [pc, #128]	; (800218c <HAL_GPIO_Init+0x240>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d052      	beq.n	80021b4 <HAL_GPIO_Init+0x268>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <HAL_GPIO_Init+0x244>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d031      	beq.n	800217a <HAL_GPIO_Init+0x22e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <HAL_GPIO_Init+0x248>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02b      	beq.n	8002176 <HAL_GPIO_Init+0x22a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_GPIO_Init+0x24c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d025      	beq.n	8002172 <HAL_GPIO_Init+0x226>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_GPIO_Init+0x250>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <HAL_GPIO_Init+0x222>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_GPIO_Init+0x254>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x21e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_GPIO_Init+0x258>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x21a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <HAL_GPIO_Init+0x25c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x216>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a18      	ldr	r2, [pc, #96]	; (80021ac <HAL_GPIO_Init+0x260>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x212>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <HAL_GPIO_Init+0x264>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x20e>
 8002156:	2309      	movs	r3, #9
 8002158:	e02d      	b.n	80021b6 <HAL_GPIO_Init+0x26a>
 800215a:	230a      	movs	r3, #10
 800215c:	e02b      	b.n	80021b6 <HAL_GPIO_Init+0x26a>
 800215e:	2308      	movs	r3, #8
 8002160:	e029      	b.n	80021b6 <HAL_GPIO_Init+0x26a>
 8002162:	2307      	movs	r3, #7
 8002164:	e027      	b.n	80021b6 <HAL_GPIO_Init+0x26a>
 8002166:	2306      	movs	r3, #6
 8002168:	e025      	b.n	80021b6 <HAL_GPIO_Init+0x26a>
 800216a:	2305      	movs	r3, #5
 800216c:	e023      	b.n	80021b6 <HAL_GPIO_Init+0x26a>
 800216e:	2304      	movs	r3, #4
 8002170:	e021      	b.n	80021b6 <HAL_GPIO_Init+0x26a>
 8002172:	2303      	movs	r3, #3
 8002174:	e01f      	b.n	80021b6 <HAL_GPIO_Init+0x26a>
 8002176:	2302      	movs	r3, #2
 8002178:	e01d      	b.n	80021b6 <HAL_GPIO_Init+0x26a>
 800217a:	2301      	movs	r3, #1
 800217c:	e01b      	b.n	80021b6 <HAL_GPIO_Init+0x26a>
 800217e:	bf00      	nop
 8002180:	58000080 	.word	0x58000080
 8002184:	58024400 	.word	0x58024400
 8002188:	58000400 	.word	0x58000400
 800218c:	58020000 	.word	0x58020000
 8002190:	58020400 	.word	0x58020400
 8002194:	58020800 	.word	0x58020800
 8002198:	58020c00 	.word	0x58020c00
 800219c:	58021000 	.word	0x58021000
 80021a0:	58021400 	.word	0x58021400
 80021a4:	58021800 	.word	0x58021800
 80021a8:	58021c00 	.word	0x58021c00
 80021ac:	58022000 	.word	0x58022000
 80021b0:	58022400 	.word	0x58022400
 80021b4:	2300      	movs	r3, #0
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	f002 0203 	and.w	r2, r2, #3
 80021bc:	0092      	lsls	r2, r2, #2
 80021be:	4093      	lsls	r3, r2
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c6:	4938      	ldr	r1, [pc, #224]	; (80022a8 <HAL_GPIO_Init+0x35c>)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	3301      	adds	r3, #1
 8002288:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	f47f ae63 	bne.w	8001f60 <HAL_GPIO_Init+0x14>
  }
}
 800229a:	bf00      	nop
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	58000400 	.word	0x58000400

080022ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
 80022b8:	4613      	mov	r3, r2
 80022ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022bc:	787b      	ldrb	r3, [r7, #1]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022c8:	e003      	b.n	80022d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022ca:	887b      	ldrh	r3, [r7, #2]
 80022cc:	041a      	lsls	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	619a      	str	r2, [r3, #24]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80022e8:	4a08      	ldr	r2, [pc, #32]	; (800230c <HAL_HSEM_FastTake+0x2c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3320      	adds	r3, #32
 80022ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f2:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_HSEM_FastTake+0x30>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e000      	b.n	80022fe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	58026400 	.word	0x58026400
 8002310:	80000300 	.word	0x80000300

08002314 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800231e:	4906      	ldr	r1, [pc, #24]	; (8002338 <HAL_HSEM_Release+0x24>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	58026400 	.word	0x58026400

0800233c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e07f      	b.n	800244e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff f946 	bl	80015f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2224      	movs	r2, #36	; 0x24
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800238c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800239c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e006      	b.n	80023c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d104      	bne.n	80023d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_I2C_Init+0x11c>)
 80023e2:	430b      	orrs	r3, r1
 80023e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69d9      	ldr	r1, [r3, #28]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1a      	ldr	r2, [r3, #32]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	02008000 	.word	0x02008000

0800245c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	461a      	mov	r2, r3
 8002468:	460b      	mov	r3, r1
 800246a:	817b      	strh	r3, [r7, #10]
 800246c:	4613      	mov	r3, r2
 800246e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b20      	cmp	r3, #32
 800247a:	f040 80da 	bne.w	8002632 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_I2C_Master_Transmit+0x30>
 8002488:	2302      	movs	r3, #2
 800248a:	e0d3      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1d8>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002494:	f7ff fc0e 	bl	8001cb4 <HAL_GetTick>
 8002498:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2319      	movs	r3, #25
 80024a0:	2201      	movs	r2, #1
 80024a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fdc4 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0be      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2221      	movs	r2, #33	; 0x21
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2210      	movs	r2, #16
 80024c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	893a      	ldrh	r2, [r7, #8]
 80024d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2bff      	cmp	r3, #255	; 0xff
 80024e6:	d90e      	bls.n	8002506 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	22ff      	movs	r2, #255	; 0xff
 80024ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	8979      	ldrh	r1, [r7, #10]
 80024f6:	4b51      	ldr	r3, [pc, #324]	; (800263c <HAL_I2C_Master_Transmit+0x1e0>)
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 ffba 	bl	8003478 <I2C_TransferConfig>
 8002504:	e06c      	b.n	80025e0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	b2da      	uxtb	r2, r3
 8002516:	8979      	ldrh	r1, [r7, #10]
 8002518:	4b48      	ldr	r3, [pc, #288]	; (800263c <HAL_I2C_Master_Transmit+0x1e0>)
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 ffa9 	bl	8003478 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002526:	e05b      	b.n	80025e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	6a39      	ldr	r1, [r7, #32]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fdc1 	bl	80030b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e07b      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d034      	beq.n	80025e0 <HAL_I2C_Master_Transmit+0x184>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d130      	bne.n	80025e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	2200      	movs	r2, #0
 8002586:	2180      	movs	r1, #128	; 0x80
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 fd53 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e04d      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	2bff      	cmp	r3, #255	; 0xff
 80025a0:	d90e      	bls.n	80025c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	22ff      	movs	r2, #255	; 0xff
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	8979      	ldrh	r1, [r7, #10]
 80025b0:	2300      	movs	r3, #0
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 ff5d 	bl	8003478 <I2C_TransferConfig>
 80025be:	e00f      	b.n	80025e0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	8979      	ldrh	r1, [r7, #10]
 80025d2:	2300      	movs	r3, #0
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 ff4c 	bl	8003478 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d19e      	bne.n	8002528 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fda0 	bl	8003134 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e01a      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2220      	movs	r2, #32
 8002604:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_I2C_Master_Transmit+0x1e4>)
 8002612:	400b      	ands	r3, r1
 8002614:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e000      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002632:	2302      	movs	r3, #2
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	80002000 	.word	0x80002000
 8002640:	fe00e800 	.word	0xfe00e800

08002644 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	461a      	mov	r2, r3
 8002650:	460b      	mov	r3, r1
 8002652:	817b      	strh	r3, [r7, #10]
 8002654:	4613      	mov	r3, r2
 8002656:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b20      	cmp	r3, #32
 8002662:	f040 80db 	bne.w	800281c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_I2C_Master_Receive+0x30>
 8002670:	2302      	movs	r3, #2
 8002672:	e0d4      	b.n	800281e <HAL_I2C_Master_Receive+0x1da>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800267c:	f7ff fb1a 	bl	8001cb4 <HAL_GetTick>
 8002680:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2319      	movs	r3, #25
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fcd0 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e0bf      	b.n	800281e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2222      	movs	r2, #34	; 0x22
 80026a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2210      	movs	r2, #16
 80026aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	893a      	ldrh	r2, [r7, #8]
 80026be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2bff      	cmp	r3, #255	; 0xff
 80026ce:	d90e      	bls.n	80026ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	22ff      	movs	r2, #255	; 0xff
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	8979      	ldrh	r1, [r7, #10]
 80026de:	4b52      	ldr	r3, [pc, #328]	; (8002828 <HAL_I2C_Master_Receive+0x1e4>)
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fec6 	bl	8003478 <I2C_TransferConfig>
 80026ec:	e06d      	b.n	80027ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	8979      	ldrh	r1, [r7, #10]
 8002700:	4b49      	ldr	r3, [pc, #292]	; (8002828 <HAL_I2C_Master_Receive+0x1e4>)
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 feb5 	bl	8003478 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800270e:	e05c      	b.n	80027ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	6a39      	ldr	r1, [r7, #32]
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fd49 	bl	80031ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e07c      	b.n	800281e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d034      	beq.n	80027ca <HAL_I2C_Master_Receive+0x186>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	2b00      	cmp	r3, #0
 8002766:	d130      	bne.n	80027ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	2200      	movs	r2, #0
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fc5e 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e04d      	b.n	800281e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	2bff      	cmp	r3, #255	; 0xff
 800278a:	d90e      	bls.n	80027aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	22ff      	movs	r2, #255	; 0xff
 8002790:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002796:	b2da      	uxtb	r2, r3
 8002798:	8979      	ldrh	r1, [r7, #10]
 800279a:	2300      	movs	r3, #0
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fe68 	bl	8003478 <I2C_TransferConfig>
 80027a8:	e00f      	b.n	80027ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	8979      	ldrh	r1, [r7, #10]
 80027bc:	2300      	movs	r3, #0
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fe57 	bl	8003478 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d19d      	bne.n	8002710 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	6a39      	ldr	r1, [r7, #32]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fcab 	bl	8003134 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e01a      	b.n	800281e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2220      	movs	r2, #32
 80027ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_I2C_Master_Receive+0x1e8>)
 80027fc:	400b      	ands	r3, r1
 80027fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	e000      	b.n	800281e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800281c:	2302      	movs	r3, #2
  }
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	80002400 	.word	0x80002400
 800282c:	fe00e800 	.word	0xfe00e800

08002830 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	4608      	mov	r0, r1
 800283a:	4611      	mov	r1, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4603      	mov	r3, r0
 8002840:	817b      	strh	r3, [r7, #10]
 8002842:	460b      	mov	r3, r1
 8002844:	813b      	strh	r3, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b20      	cmp	r3, #32
 8002854:	f040 80f9 	bne.w	8002a4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_I2C_Mem_Write+0x34>
 800285e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002860:	2b00      	cmp	r3, #0
 8002862:	d105      	bne.n	8002870 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0ed      	b.n	8002a4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_I2C_Mem_Write+0x4e>
 800287a:	2302      	movs	r3, #2
 800287c:	e0e6      	b.n	8002a4c <HAL_I2C_Mem_Write+0x21c>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002886:	f7ff fa15 	bl	8001cb4 <HAL_GetTick>
 800288a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	2319      	movs	r3, #25
 8002892:	2201      	movs	r2, #1
 8002894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fbcb 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0d1      	b.n	8002a4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2221      	movs	r2, #33	; 0x21
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2240      	movs	r2, #64	; 0x40
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a3a      	ldr	r2, [r7, #32]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028d0:	88f8      	ldrh	r0, [r7, #6]
 80028d2:	893a      	ldrh	r2, [r7, #8]
 80028d4:	8979      	ldrh	r1, [r7, #10]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	4603      	mov	r3, r0
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fadb 	bl	8002e9c <I2C_RequestMemoryWrite>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0a9      	b.n	8002a4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2bff      	cmp	r3, #255	; 0xff
 8002900:	d90e      	bls.n	8002920 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	22ff      	movs	r2, #255	; 0xff
 8002906:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	b2da      	uxtb	r2, r3
 800290e:	8979      	ldrh	r1, [r7, #10]
 8002910:	2300      	movs	r3, #0
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fdad 	bl	8003478 <I2C_TransferConfig>
 800291e:	e00f      	b.n	8002940 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292e:	b2da      	uxtb	r2, r3
 8002930:	8979      	ldrh	r1, [r7, #10]
 8002932:	2300      	movs	r3, #0
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fd9c 	bl	8003478 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fbb5 	bl	80030b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e07b      	b.n	8002a4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d034      	beq.n	80029f8 <HAL_I2C_Mem_Write+0x1c8>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	2b00      	cmp	r3, #0
 8002994:	d130      	bne.n	80029f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	2200      	movs	r2, #0
 800299e:	2180      	movs	r1, #128	; 0x80
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fb47 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e04d      	b.n	8002a4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2bff      	cmp	r3, #255	; 0xff
 80029b8:	d90e      	bls.n	80029d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	22ff      	movs	r2, #255	; 0xff
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	2300      	movs	r3, #0
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fd51 	bl	8003478 <I2C_TransferConfig>
 80029d6:	e00f      	b.n	80029f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	8979      	ldrh	r1, [r7, #10]
 80029ea:	2300      	movs	r3, #0
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fd40 	bl	8003478 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d19e      	bne.n	8002940 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fb94 	bl	8003134 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e01a      	b.n	8002a4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_I2C_Mem_Write+0x224>)
 8002a2a:	400b      	ands	r3, r1
 8002a2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
  }
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	fe00e800 	.word	0xfe00e800

08002a58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	817b      	strh	r3, [r7, #10]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	813b      	strh	r3, [r7, #8]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	f040 80fd 	bne.w	8002c7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_I2C_Mem_Read+0x34>
 8002a86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d105      	bne.n	8002a98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0f1      	b.n	8002c7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_I2C_Mem_Read+0x4e>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0ea      	b.n	8002c7c <HAL_I2C_Mem_Read+0x224>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aae:	f7ff f901 	bl	8001cb4 <HAL_GetTick>
 8002ab2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2319      	movs	r3, #25
 8002aba:	2201      	movs	r2, #1
 8002abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fab7 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0d5      	b.n	8002c7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2222      	movs	r2, #34	; 0x22
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a3a      	ldr	r2, [r7, #32]
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002af8:	88f8      	ldrh	r0, [r7, #6]
 8002afa:	893a      	ldrh	r2, [r7, #8]
 8002afc:	8979      	ldrh	r1, [r7, #10]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	4603      	mov	r3, r0
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fa1b 	bl	8002f44 <I2C_RequestMemoryRead>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0ad      	b.n	8002c7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2bff      	cmp	r3, #255	; 0xff
 8002b28:	d90e      	bls.n	8002b48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	22ff      	movs	r2, #255	; 0xff
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	8979      	ldrh	r1, [r7, #10]
 8002b38:	4b52      	ldr	r3, [pc, #328]	; (8002c84 <HAL_I2C_Mem_Read+0x22c>)
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fc99 	bl	8003478 <I2C_TransferConfig>
 8002b46:	e00f      	b.n	8002b68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	8979      	ldrh	r1, [r7, #10]
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_I2C_Mem_Read+0x22c>)
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 fc88 	bl	8003478 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2104      	movs	r1, #4
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fa5e 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e07c      	b.n	8002c7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d034      	beq.n	8002c28 <HAL_I2C_Mem_Read+0x1d0>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d130      	bne.n	8002c28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fa2f 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e04d      	b.n	8002c7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2bff      	cmp	r3, #255	; 0xff
 8002be8:	d90e      	bls.n	8002c08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	22ff      	movs	r2, #255	; 0xff
 8002bee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	8979      	ldrh	r1, [r7, #10]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fc39 	bl	8003478 <I2C_TransferConfig>
 8002c06:	e00f      	b.n	8002c28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	8979      	ldrh	r1, [r7, #10]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fc28 	bl	8003478 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d19a      	bne.n	8002b68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fa7c 	bl	8003134 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e01a      	b.n	8002c7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_I2C_Mem_Read+0x230>)
 8002c5a:	400b      	ands	r3, r1
 8002c5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	80002400 	.word	0x80002400
 8002c88:	fe00e800 	.word	0xfe00e800

08002c8c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	f040 80ef 	bne.w	8002e8c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0e5      	b.n	8002e8e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_I2C_IsDeviceReady+0x44>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e0de      	b.n	8002e8e <HAL_I2C_IsDeviceReady+0x202>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2224      	movs	r2, #36	; 0x24
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <HAL_I2C_IsDeviceReady+0x6e>
 8002cee:	897b      	ldrh	r3, [r7, #10]
 8002cf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cf4:	4b68      	ldr	r3, [pc, #416]	; (8002e98 <HAL_I2C_IsDeviceReady+0x20c>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	e004      	b.n	8002d04 <HAL_I2C_IsDeviceReady+0x78>
 8002cfa:	897b      	ldrh	r3, [r7, #10]
 8002cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d00:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002d0a:	f7fe ffd3 	bl	8001cb4 <HAL_GetTick>
 8002d0e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d3c:	e034      	b.n	8002da8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d01a      	beq.n	8002d7c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fe ffb5 	bl	8001cb4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <HAL_I2C_IsDeviceReady+0xd0>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10f      	bne.n	8002d7c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e088      	b.n	8002e8e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	bf0c      	ite	eq
 8002d8a:	2301      	moveq	r3, #1
 8002d8c:	2300      	movne	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002da8:	7ffb      	ldrb	r3, [r7, #31]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <HAL_I2C_IsDeviceReady+0x128>
 8002dae:	7fbb      	ldrb	r3, [r7, #30]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0c4      	beq.n	8002d3e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d01a      	beq.n	8002df8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2120      	movs	r1, #32
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f931 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e058      	b.n	8002e8e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2220      	movs	r2, #32
 8002de2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e04a      	b.n	8002e8e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2120      	movs	r1, #32
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f916 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e03d      	b.n	8002e8e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2210      	movs	r2, #16
 8002e18:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d118      	bne.n	8002e5c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e38:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2120      	movs	r1, #32
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f8f5 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e01c      	b.n	8002e8e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	f63f af3d 	bhi.w	8002ce6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
  }
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	02002000 	.word	0x02002000

08002e9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	817b      	strh	r3, [r7, #10]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	813b      	strh	r3, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	8979      	ldrh	r1, [r7, #10]
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <I2C_RequestMemoryWrite+0xa4>)
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fad7 	bl	8003478 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	69b9      	ldr	r1, [r7, #24]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f8f0 	bl	80030b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e02c      	b.n	8002f38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ee4:	893b      	ldrh	r3, [r7, #8]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28
 8002eee:	e015      	b.n	8002f1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ef0:	893b      	ldrh	r3, [r7, #8]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	69b9      	ldr	r1, [r7, #24]
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f8d6 	bl	80030b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e012      	b.n	8002f38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f12:	893b      	ldrh	r3, [r7, #8]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2200      	movs	r2, #0
 8002f24:	2180      	movs	r1, #128	; 0x80
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f884 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	80002000 	.word	0x80002000

08002f44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	817b      	strh	r3, [r7, #10]
 8002f56:	460b      	mov	r3, r1
 8002f58:	813b      	strh	r3, [r7, #8]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	8979      	ldrh	r1, [r7, #10]
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <I2C_RequestMemoryRead+0xa4>)
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fa84 	bl	8003478 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	69b9      	ldr	r1, [r7, #24]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f89d 	bl	80030b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e02c      	b.n	8002fde <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8a:	893b      	ldrh	r3, [r7, #8]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28
 8002f94:	e015      	b.n	8002fc2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f96:	893b      	ldrh	r3, [r7, #8]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	69b9      	ldr	r1, [r7, #24]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f883 	bl	80030b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e012      	b.n	8002fde <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb8:	893b      	ldrh	r3, [r7, #8]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2140      	movs	r1, #64	; 0x40
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f831 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	80002000 	.word	0x80002000

08002fec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d103      	bne.n	800300a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2200      	movs	r2, #0
 8003008:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d007      	beq.n	8003028 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	619a      	str	r2, [r3, #24]
  }
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003044:	e022      	b.n	800308c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d01e      	beq.n	800308c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7fe fe31 	bl	8001cb4 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <I2C_WaitOnFlagUntilTimeout+0x30>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d113      	bne.n	800308c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e00f      	b.n	80030ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4013      	ands	r3, r2
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	429a      	cmp	r2, r3
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d0cd      	beq.n	8003046 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030c0:	e02c      	b.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f8ea 	bl	80032a0 <I2C_IsErrorOccurred>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e02a      	b.n	800312c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d01e      	beq.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7fe fde9 	bl	8001cb4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d113      	bne.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e007      	b.n	800312c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d1cb      	bne.n	80030c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003140:	e028      	b.n	8003194 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f8aa 	bl	80032a0 <I2C_IsErrorOccurred>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e026      	b.n	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7fe fdad 	bl	8001cb4 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d113      	bne.n	8003194 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e007      	b.n	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d1cf      	bne.n	8003142 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031b8:	e064      	b.n	8003284 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f86e 	bl	80032a0 <I2C_IsErrorOccurred>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e062      	b.n	8003294 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d138      	bne.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d105      	bne.n	80031f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e04e      	b.n	8003294 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b10      	cmp	r3, #16
 8003202:	d107      	bne.n	8003214 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2210      	movs	r2, #16
 800320a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2204      	movs	r2, #4
 8003210:	645a      	str	r2, [r3, #68]	; 0x44
 8003212:	e002      	b.n	800321a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2220      	movs	r2, #32
 8003220:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800322e:	400b      	ands	r3, r1
 8003230:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e022      	b.n	8003294 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324e:	f7fe fd31 	bl	8001cb4 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10f      	bne.n	8003284 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e007      	b.n	8003294 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b04      	cmp	r3, #4
 8003290:	d193      	bne.n	80031ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	fe00e800 	.word	0xfe00e800

080032a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d075      	beq.n	80033b8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2210      	movs	r2, #16
 80032d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032d4:	e056      	b.n	8003384 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d052      	beq.n	8003384 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032de:	f7fe fce9 	bl	8001cb4 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d302      	bcc.n	80032f4 <I2C_IsErrorOccurred+0x54>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d147      	bne.n	8003384 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003306:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003316:	d12e      	bne.n	8003376 <I2C_IsErrorOccurred+0xd6>
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800331e:	d02a      	beq.n	8003376 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	2b20      	cmp	r3, #32
 8003324:	d027      	beq.n	8003376 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003334:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003336:	f7fe fcbd 	bl	8001cb4 <HAL_GetTick>
 800333a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800333c:	e01b      	b.n	8003376 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800333e:	f7fe fcb9 	bl	8001cb4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b19      	cmp	r3, #25
 800334a:	d914      	bls.n	8003376 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	f043 0220 	orr.w	r2, r3, #32
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b20      	cmp	r3, #32
 8003382:	d1dc      	bne.n	800333e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b20      	cmp	r3, #32
 8003390:	d003      	beq.n	800339a <I2C_IsErrorOccurred+0xfa>
 8003392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003396:	2b00      	cmp	r3, #0
 8003398:	d09d      	beq.n	80032d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800339a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2220      	movs	r2, #32
 80033a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f043 0304 	orr.w	r3, r3, #4
 80033b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	f043 0308 	orr.w	r3, r3, #8
 80033f2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01c      	beq.n	8003468 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff fddc 	bl	8002fec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <I2C_IsErrorOccurred+0x1d4>)
 8003440:	400b      	ands	r3, r1
 8003442:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	431a      	orrs	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800346c:	4618      	mov	r0, r3
 800346e:	3728      	adds	r7, #40	; 0x28
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	fe00e800 	.word	0xfe00e800

08003478 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	460b      	mov	r3, r1
 8003484:	817b      	strh	r3, [r7, #10]
 8003486:	4613      	mov	r3, r2
 8003488:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003490:	7a7b      	ldrb	r3, [r7, #9]
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003498:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034a6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	0d5b      	lsrs	r3, r3, #21
 80034b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <I2C_TransferConfig+0x60>)
 80034b8:	430b      	orrs	r3, r1
 80034ba:	43db      	mvns	r3, r3
 80034bc:	ea02 0103 	and.w	r1, r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	03ff63ff 	.word	0x03ff63ff

080034dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d138      	bne.n	8003564 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e032      	b.n	8003566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	; 0x24
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800352e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e000      	b.n	8003566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
  }
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003572:	b480      	push	{r7}
 8003574:	b085      	sub	sp, #20
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b20      	cmp	r3, #32
 8003586:	d139      	bne.n	80035fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003592:	2302      	movs	r3, #2
 8003594:	e033      	b.n	80035fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2224      	movs	r2, #36	; 0x24
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	2b06      	cmp	r3, #6
 800361e:	d00a      	beq.n	8003636 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003620:	4b26      	ldr	r3, [pc, #152]	; (80036bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d001      	beq.n	8003632 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e040      	b.n	80036b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e03e      	b.n	80036b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800363e:	491f      	ldr	r1, [pc, #124]	; (80036bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4313      	orrs	r3, r2
 8003644:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003646:	f7fe fb35 	bl	8001cb4 <HAL_GetTick>
 800364a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800364c:	e009      	b.n	8003662 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800364e:	f7fe fb31 	bl	8001cb4 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800365c:	d901      	bls.n	8003662 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e028      	b.n	80036b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800366a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366e:	d1ee      	bne.n	800364e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b1e      	cmp	r3, #30
 8003674:	d008      	beq.n	8003688 <HAL_PWREx_ConfigSupply+0x7c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b2e      	cmp	r3, #46	; 0x2e
 800367a:	d005      	beq.n	8003688 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b1d      	cmp	r3, #29
 8003680:	d002      	beq.n	8003688 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b2d      	cmp	r3, #45	; 0x2d
 8003686:	d114      	bne.n	80036b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003688:	f7fe fb14 	bl	8001cb4 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800368e:	e009      	b.n	80036a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003690:	f7fe fb10 	bl	8001cb4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800369e:	d901      	bls.n	80036a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e007      	b.n	80036b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_PWREx_ConfigSupply+0xb0>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d1ee      	bne.n	8003690 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	58024800 	.word	0x58024800

080036c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	; 0x30
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f000 bc1d 	b.w	8003f0e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8087 	beq.w	80037f0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e2:	4b99      	ldr	r3, [pc, #612]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036ec:	4b96      	ldr	r3, [pc, #600]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	2b10      	cmp	r3, #16
 80036f6:	d007      	beq.n	8003708 <HAL_RCC_OscConfig+0x48>
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	2b18      	cmp	r3, #24
 80036fc:	d110      	bne.n	8003720 <HAL_RCC_OscConfig+0x60>
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d10b      	bne.n	8003720 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	4b8f      	ldr	r3, [pc, #572]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d06c      	beq.n	80037ee <HAL_RCC_OscConfig+0x12e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d168      	bne.n	80037ee <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e3f6      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d106      	bne.n	8003738 <HAL_RCC_OscConfig+0x78>
 800372a:	4b87      	ldr	r3, [pc, #540]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a86      	ldr	r2, [pc, #536]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e02e      	b.n	8003796 <HAL_RCC_OscConfig+0xd6>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10c      	bne.n	800375a <HAL_RCC_OscConfig+0x9a>
 8003740:	4b81      	ldr	r3, [pc, #516]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a80      	ldr	r2, [pc, #512]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b7e      	ldr	r3, [pc, #504]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a7d      	ldr	r2, [pc, #500]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	e01d      	b.n	8003796 <HAL_RCC_OscConfig+0xd6>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003762:	d10c      	bne.n	800377e <HAL_RCC_OscConfig+0xbe>
 8003764:	4b78      	ldr	r3, [pc, #480]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a77      	ldr	r2, [pc, #476]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800376a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b75      	ldr	r3, [pc, #468]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a74      	ldr	r2, [pc, #464]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	e00b      	b.n	8003796 <HAL_RCC_OscConfig+0xd6>
 800377e:	4b72      	ldr	r3, [pc, #456]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a71      	ldr	r2, [pc, #452]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b6f      	ldr	r3, [pc, #444]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6e      	ldr	r2, [pc, #440]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003794:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d013      	beq.n	80037c6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fe fa89 	bl	8001cb4 <HAL_GetTick>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a6:	f7fe fa85 	bl	8001cb4 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b64      	cmp	r3, #100	; 0x64
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e3aa      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037b8:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0xe6>
 80037c4:	e014      	b.n	80037f0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fe fa75 	bl	8001cb4 <HAL_GetTick>
 80037ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ce:	f7fe fa71 	bl	8001cb4 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b64      	cmp	r3, #100	; 0x64
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e396      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037e0:	4b59      	ldr	r3, [pc, #356]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f0      	bne.n	80037ce <HAL_RCC_OscConfig+0x10e>
 80037ec:	e000      	b.n	80037f0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80cb 	beq.w	8003994 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037fe:	4b52      	ldr	r3, [pc, #328]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003806:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003808:	4b4f      	ldr	r3, [pc, #316]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <HAL_RCC_OscConfig+0x164>
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	2b18      	cmp	r3, #24
 8003818:	d156      	bne.n	80038c8 <HAL_RCC_OscConfig+0x208>
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d151      	bne.n	80038c8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003824:	4b48      	ldr	r3, [pc, #288]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_OscConfig+0x17c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e368      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800383c:	4b42      	ldr	r3, [pc, #264]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 0219 	bic.w	r2, r3, #25
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	493f      	ldr	r1, [pc, #252]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800384e:	f7fe fa31 	bl	8001cb4 <HAL_GetTick>
 8003852:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003856:	f7fe fa2d 	bl	8001cb4 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e352      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003868:	4b37      	ldr	r3, [pc, #220]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003874:	f7fe fa4e 	bl	8001d14 <HAL_GetREVID>
 8003878:	4603      	mov	r3, r0
 800387a:	f241 0203 	movw	r2, #4099	; 0x1003
 800387e:	4293      	cmp	r3, r2
 8003880:	d817      	bhi.n	80038b2 <HAL_RCC_OscConfig+0x1f2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d108      	bne.n	800389c <HAL_RCC_OscConfig+0x1dc>
 800388a:	4b2f      	ldr	r3, [pc, #188]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003892:	4a2d      	ldr	r2, [pc, #180]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003898:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800389a:	e07b      	b.n	8003994 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389c:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	031b      	lsls	r3, r3, #12
 80038aa:	4927      	ldr	r1, [pc, #156]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038b0:	e070      	b.n	8003994 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b25      	ldr	r3, [pc, #148]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	061b      	lsls	r3, r3, #24
 80038c0:	4921      	ldr	r1, [pc, #132]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c6:	e065      	b.n	8003994 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d048      	beq.n	8003962 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 0219 	bic.w	r2, r3, #25
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	491a      	ldr	r1, [pc, #104]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fe f9e7 	bl	8001cb4 <HAL_GetTick>
 80038e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ea:	f7fe f9e3 	bl	8001cb4 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e308      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003908:	f7fe fa04 	bl	8001d14 <HAL_GetREVID>
 800390c:	4603      	mov	r3, r0
 800390e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003912:	4293      	cmp	r3, r2
 8003914:	d81a      	bhi.n	800394c <HAL_RCC_OscConfig+0x28c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	d108      	bne.n	8003930 <HAL_RCC_OscConfig+0x270>
 800391e:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003926:	4a08      	ldr	r2, [pc, #32]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392c:	6053      	str	r3, [r2, #4]
 800392e:	e031      	b.n	8003994 <HAL_RCC_OscConfig+0x2d4>
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	031b      	lsls	r3, r3, #12
 800393e:	4902      	ldr	r1, [pc, #8]	; (8003948 <HAL_RCC_OscConfig+0x288>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
 8003944:	e026      	b.n	8003994 <HAL_RCC_OscConfig+0x2d4>
 8003946:	bf00      	nop
 8003948:	58024400 	.word	0x58024400
 800394c:	4b9a      	ldr	r3, [pc, #616]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	4997      	ldr	r1, [pc, #604]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 800395c:	4313      	orrs	r3, r2
 800395e:	604b      	str	r3, [r1, #4]
 8003960:	e018      	b.n	8003994 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003962:	4b95      	ldr	r3, [pc, #596]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a94      	ldr	r2, [pc, #592]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fe f9a1 	bl	8001cb4 <HAL_GetTick>
 8003972:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003976:	f7fe f99d 	bl	8001cb4 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e2c2      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003988:	4b8b      	ldr	r3, [pc, #556]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f0      	bne.n	8003976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80a9 	beq.w	8003af4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a2:	4b85      	ldr	r3, [pc, #532]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039ac:	4b82      	ldr	r3, [pc, #520]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d007      	beq.n	80039c8 <HAL_RCC_OscConfig+0x308>
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b18      	cmp	r3, #24
 80039bc:	d13a      	bne.n	8003a34 <HAL_RCC_OscConfig+0x374>
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d135      	bne.n	8003a34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039c8:	4b7b      	ldr	r3, [pc, #492]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_OscConfig+0x320>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e296      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039e0:	f7fe f998 	bl	8001d14 <HAL_GetREVID>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d817      	bhi.n	8003a1e <HAL_RCC_OscConfig+0x35e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d108      	bne.n	8003a08 <HAL_RCC_OscConfig+0x348>
 80039f6:	4b70      	ldr	r3, [pc, #448]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039fe:	4a6e      	ldr	r2, [pc, #440]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a04:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a06:	e075      	b.n	8003af4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a08:	4b6b      	ldr	r3, [pc, #428]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	069b      	lsls	r3, r3, #26
 8003a16:	4968      	ldr	r1, [pc, #416]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a1c:	e06a      	b.n	8003af4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a1e:	4b66      	ldr	r3, [pc, #408]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	061b      	lsls	r3, r3, #24
 8003a2c:	4962      	ldr	r1, [pc, #392]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a32:	e05f      	b.n	8003af4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d042      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a3c:	4b5e      	ldr	r3, [pc, #376]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a5d      	ldr	r2, [pc, #372]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe f934 	bl	8001cb4 <HAL_GetTick>
 8003a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a50:	f7fe f930 	bl	8001cb4 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e255      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a62:	4b55      	ldr	r3, [pc, #340]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a6e:	f7fe f951 	bl	8001d14 <HAL_GetREVID>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d817      	bhi.n	8003aac <HAL_RCC_OscConfig+0x3ec>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d108      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3d6>
 8003a84:	4b4c      	ldr	r3, [pc, #304]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a8c:	4a4a      	ldr	r2, [pc, #296]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a92:	6053      	str	r3, [r2, #4]
 8003a94:	e02e      	b.n	8003af4 <HAL_RCC_OscConfig+0x434>
 8003a96:	4b48      	ldr	r3, [pc, #288]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	069b      	lsls	r3, r3, #26
 8003aa4:	4944      	ldr	r1, [pc, #272]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
 8003aaa:	e023      	b.n	8003af4 <HAL_RCC_OscConfig+0x434>
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	493f      	ldr	r1, [pc, #252]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60cb      	str	r3, [r1, #12]
 8003ac0:	e018      	b.n	8003af4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ac2:	4b3d      	ldr	r3, [pc, #244]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a3c      	ldr	r2, [pc, #240]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fe f8f1 	bl	8001cb4 <HAL_GetTick>
 8003ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ad6:	f7fe f8ed 	bl	8001cb4 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e212      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ae8:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d036      	beq.n	8003b6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d019      	beq.n	8003b3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b08:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fe f8ce 	bl	8001cb4 <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fe f8ca 	bl	8001cb4 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e1ef      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x45c>
 8003b3a:	e018      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3c:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b40:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fe f8b4 	bl	8001cb4 <HAL_GetTick>
 8003b4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b50:	f7fe f8b0 	bl	8001cb4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e1d5      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d039      	beq.n	8003bee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01c      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a0c      	ldr	r2, [pc, #48]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b8e:	f7fe f891 	bl	8001cb4 <HAL_GetTick>
 8003b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b96:	f7fe f88d 	bl	8001cb4 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e1b2      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <HAL_RCC_OscConfig+0x4f8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x4d6>
 8003bb4:	e01b      	b.n	8003bee <HAL_RCC_OscConfig+0x52e>
 8003bb6:	bf00      	nop
 8003bb8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bbc:	4b9b      	ldr	r3, [pc, #620]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a9a      	ldr	r2, [pc, #616]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bc8:	f7fe f874 	bl	8001cb4 <HAL_GetTick>
 8003bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003bd0:	f7fe f870 	bl	8001cb4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e195      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003be2:	4b92      	ldr	r3, [pc, #584]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8081 	beq.w	8003cfe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bfc:	4b8c      	ldr	r3, [pc, #560]	; (8003e30 <HAL_RCC_OscConfig+0x770>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a8b      	ldr	r2, [pc, #556]	; (8003e30 <HAL_RCC_OscConfig+0x770>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c08:	f7fe f854 	bl	8001cb4 <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c10:	f7fe f850 	bl	8001cb4 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e175      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c22:	4b83      	ldr	r3, [pc, #524]	; (8003e30 <HAL_RCC_OscConfig+0x770>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x584>
 8003c36:	4b7d      	ldr	r3, [pc, #500]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a7c      	ldr	r2, [pc, #496]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
 8003c42:	e02d      	b.n	8003ca0 <HAL_RCC_OscConfig+0x5e0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10c      	bne.n	8003c66 <HAL_RCC_OscConfig+0x5a6>
 8003c4c:	4b77      	ldr	r3, [pc, #476]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a76      	ldr	r2, [pc, #472]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	4b74      	ldr	r3, [pc, #464]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a73      	ldr	r2, [pc, #460]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c5e:	f023 0304 	bic.w	r3, r3, #4
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	e01c      	b.n	8003ca0 <HAL_RCC_OscConfig+0x5e0>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x5c8>
 8003c6e:	4b6f      	ldr	r3, [pc, #444]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a6e      	ldr	r2, [pc, #440]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	4b6c      	ldr	r3, [pc, #432]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a6b      	ldr	r2, [pc, #428]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	e00b      	b.n	8003ca0 <HAL_RCC_OscConfig+0x5e0>
 8003c88:	4b68      	ldr	r3, [pc, #416]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	4a67      	ldr	r2, [pc, #412]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	6713      	str	r3, [r2, #112]	; 0x70
 8003c94:	4b65      	ldr	r3, [pc, #404]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a64      	ldr	r2, [pc, #400]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003c9a:	f023 0304 	bic.w	r3, r3, #4
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d015      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fe f804 	bl	8001cb4 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fe f800 	bl	8001cb4 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e123      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc6:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0ee      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x5f0>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fd ffee 	bl	8001cb4 <HAL_GetTick>
 8003cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cdc:	f7fd ffea 	bl	8001cb4 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e10d      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cf2:	4b4e      	ldr	r3, [pc, #312]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ee      	bne.n	8003cdc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8102 	beq.w	8003f0c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d08:	4b48      	ldr	r3, [pc, #288]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d10:	2b18      	cmp	r3, #24
 8003d12:	f000 80bd 	beq.w	8003e90 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	f040 809e 	bne.w	8003e5c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d20:	4b42      	ldr	r3, [pc, #264]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a41      	ldr	r2, [pc, #260]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd ffc2 	bl	8001cb4 <HAL_GetTick>
 8003d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd ffbe 	bl	8001cb4 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e0e3      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d46:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d52:	4b36      	ldr	r3, [pc, #216]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d56:	4b37      	ldr	r3, [pc, #220]	; (8003e34 <HAL_RCC_OscConfig+0x774>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	430a      	orrs	r2, r1
 8003d66:	4931      	ldr	r1, [pc, #196]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	628b      	str	r3, [r1, #40]	; 0x28
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	3b01      	subs	r3, #1
 8003d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	025b      	lsls	r3, r3, #9
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	3b01      	subs	r3, #1
 8003d88:	041b      	lsls	r3, r3, #16
 8003d8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	3b01      	subs	r3, #1
 8003d96:	061b      	lsls	r3, r3, #24
 8003d98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d9c:	4923      	ldr	r1, [pc, #140]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003da2:	4b22      	ldr	r3, [pc, #136]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	4a21      	ldr	r2, [pc, #132]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dae:	4b1f      	ldr	r3, [pc, #124]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db2:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <HAL_RCC_OscConfig+0x778>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dba:	00d2      	lsls	r2, r2, #3
 8003dbc:	491b      	ldr	r1, [pc, #108]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	f023 020c 	bic.w	r2, r3, #12
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4917      	ldr	r1, [pc, #92]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003dd4:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f023 0202 	bic.w	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	4912      	ldr	r1, [pc, #72]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	4a10      	ldr	r2, [pc, #64]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df2:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <HAL_RCC_OscConfig+0x76c>)
 8003e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e22:	f7fd ff47 	bl	8001cb4 <HAL_GetTick>
 8003e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e28:	e011      	b.n	8003e4e <HAL_RCC_OscConfig+0x78e>
 8003e2a:	bf00      	nop
 8003e2c:	58024400 	.word	0x58024400
 8003e30:	58024800 	.word	0x58024800
 8003e34:	fffffc0c 	.word	0xfffffc0c
 8003e38:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fd ff3a 	bl	8001cb4 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e05f      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e4e:	4b32      	ldr	r3, [pc, #200]	; (8003f18 <HAL_RCC_OscConfig+0x858>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0x77c>
 8003e5a:	e057      	b.n	8003f0c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5c:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <HAL_RCC_OscConfig+0x858>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2d      	ldr	r2, [pc, #180]	; (8003f18 <HAL_RCC_OscConfig+0x858>)
 8003e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fd ff24 	bl	8001cb4 <HAL_GetTick>
 8003e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fd ff20 	bl	8001cb4 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e045      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e82:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <HAL_RCC_OscConfig+0x858>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x7b0>
 8003e8e:	e03d      	b.n	8003f0c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e90:	4b21      	ldr	r3, [pc, #132]	; (8003f18 <HAL_RCC_OscConfig+0x858>)
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <HAL_RCC_OscConfig+0x858>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d031      	beq.n	8003f08 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f003 0203 	and.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d12a      	bne.n	8003f08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d122      	bne.n	8003f08 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d11a      	bne.n	8003f08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	0a5b      	lsrs	r3, r3, #9
 8003ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d111      	bne.n	8003f08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	0c1b      	lsrs	r3, r3, #16
 8003ee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d108      	bne.n	8003f08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	0e1b      	lsrs	r3, r3, #24
 8003efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3730      	adds	r7, #48	; 0x30
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	58024400 	.word	0x58024400

08003f1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e19c      	b.n	800426a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f30:	4b8a      	ldr	r3, [pc, #552]	; (800415c <HAL_RCC_ClockConfig+0x240>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d910      	bls.n	8003f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b87      	ldr	r3, [pc, #540]	; (800415c <HAL_RCC_ClockConfig+0x240>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 020f 	bic.w	r2, r3, #15
 8003f46:	4985      	ldr	r1, [pc, #532]	; (800415c <HAL_RCC_ClockConfig+0x240>)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b83      	ldr	r3, [pc, #524]	; (800415c <HAL_RCC_ClockConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e184      	b.n	800426a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d010      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	4b7b      	ldr	r3, [pc, #492]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d908      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f7c:	4b78      	ldr	r3, [pc, #480]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	4975      	ldr	r1, [pc, #468]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d010      	beq.n	8003fbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	4b70      	ldr	r3, [pc, #448]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d908      	bls.n	8003fbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003faa:	4b6d      	ldr	r3, [pc, #436]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	496a      	ldr	r1, [pc, #424]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d010      	beq.n	8003fea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699a      	ldr	r2, [r3, #24]
 8003fcc:	4b64      	ldr	r3, [pc, #400]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d908      	bls.n	8003fea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fd8:	4b61      	ldr	r3, [pc, #388]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	495e      	ldr	r1, [pc, #376]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d010      	beq.n	8004018 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	4b59      	ldr	r3, [pc, #356]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004002:	429a      	cmp	r2, r3
 8004004:	d908      	bls.n	8004018 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004006:	4b56      	ldr	r3, [pc, #344]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4953      	ldr	r1, [pc, #332]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8004014:	4313      	orrs	r3, r2
 8004016:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d010      	beq.n	8004046 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	4b4d      	ldr	r3, [pc, #308]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	429a      	cmp	r2, r3
 8004032:	d908      	bls.n	8004046 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004034:	4b4a      	ldr	r3, [pc, #296]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f023 020f 	bic.w	r2, r3, #15
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4947      	ldr	r1, [pc, #284]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8004042:	4313      	orrs	r3, r2
 8004044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d055      	beq.n	80040fe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004052:	4b43      	ldr	r3, [pc, #268]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	4940      	ldr	r1, [pc, #256]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8004060:	4313      	orrs	r3, r2
 8004062:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d107      	bne.n	800407c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800406c:	4b3c      	ldr	r3, [pc, #240]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d121      	bne.n	80040bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0f6      	b.n	800426a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d107      	bne.n	8004094 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004084:	4b36      	ldr	r3, [pc, #216]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d115      	bne.n	80040bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0ea      	b.n	800426a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d107      	bne.n	80040ac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800409c:	4b30      	ldr	r3, [pc, #192]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0de      	b.n	800426a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040ac:	4b2c      	ldr	r3, [pc, #176]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0d6      	b.n	800426a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040bc:	4b28      	ldr	r3, [pc, #160]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f023 0207 	bic.w	r2, r3, #7
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4925      	ldr	r1, [pc, #148]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fd fdf1 	bl	8001cb4 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d6:	f7fd fded 	bl	8001cb4 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e0be      	b.n	800426a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ec:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d1eb      	bne.n	80040d6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d010      	beq.n	800412c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	4b14      	ldr	r3, [pc, #80]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	429a      	cmp	r2, r3
 8004118:	d208      	bcs.n	800412c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f023 020f 	bic.w	r2, r3, #15
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	490e      	ldr	r1, [pc, #56]	; (8004160 <HAL_RCC_ClockConfig+0x244>)
 8004128:	4313      	orrs	r3, r2
 800412a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <HAL_RCC_ClockConfig+0x240>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d214      	bcs.n	8004164 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b08      	ldr	r3, [pc, #32]	; (800415c <HAL_RCC_ClockConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 020f 	bic.w	r2, r3, #15
 8004142:	4906      	ldr	r1, [pc, #24]	; (800415c <HAL_RCC_ClockConfig+0x240>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b04      	ldr	r3, [pc, #16]	; (800415c <HAL_RCC_ClockConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d005      	beq.n	8004164 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e086      	b.n	800426a <HAL_RCC_ClockConfig+0x34e>
 800415c:	52002000 	.word	0x52002000
 8004160:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d010      	beq.n	8004192 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800417c:	429a      	cmp	r2, r3
 800417e:	d208      	bcs.n	8004192 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004180:	4b3c      	ldr	r3, [pc, #240]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	4939      	ldr	r1, [pc, #228]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 800418e:	4313      	orrs	r3, r2
 8004190:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d010      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	4b34      	ldr	r3, [pc, #208]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d208      	bcs.n	80041c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041ae:	4b31      	ldr	r3, [pc, #196]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	492e      	ldr	r1, [pc, #184]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d010      	beq.n	80041ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	4b28      	ldr	r3, [pc, #160]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041d8:	429a      	cmp	r2, r3
 80041da:	d208      	bcs.n	80041ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	4922      	ldr	r1, [pc, #136]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d010      	beq.n	800421c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004206:	429a      	cmp	r2, r3
 8004208:	d208      	bcs.n	800421c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800420a:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	4917      	ldr	r1, [pc, #92]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 8004218:	4313      	orrs	r3, r2
 800421a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800421c:	f000 f834 	bl	8004288 <HAL_RCC_GetSysClockFreq>
 8004220:	4602      	mov	r2, r0
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	0a1b      	lsrs	r3, r3, #8
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	4912      	ldr	r1, [pc, #72]	; (8004278 <HAL_RCC_ClockConfig+0x35c>)
 800422e:	5ccb      	ldrb	r3, [r1, r3]
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
 8004238:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800423a:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <HAL_RCC_ClockConfig+0x358>)
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <HAL_RCC_ClockConfig+0x35c>)
 8004244:	5cd3      	ldrb	r3, [r2, r3]
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
 8004250:	4a0a      	ldr	r2, [pc, #40]	; (800427c <HAL_RCC_ClockConfig+0x360>)
 8004252:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004254:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <HAL_RCC_ClockConfig+0x364>)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <HAL_RCC_ClockConfig+0x368>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fd fcde 	bl	8001c20 <HAL_InitTick>
 8004264:	4603      	mov	r3, r0
 8004266:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	58024400 	.word	0x58024400
 8004278:	0800cd3c 	.word	0x0800cd3c
 800427c:	24000004 	.word	0x24000004
 8004280:	24000000 	.word	0x24000000
 8004284:	24000014 	.word	0x24000014

08004288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004288:	b480      	push	{r7}
 800428a:	b089      	sub	sp, #36	; 0x24
 800428c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800428e:	4bb3      	ldr	r3, [pc, #716]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004296:	2b18      	cmp	r3, #24
 8004298:	f200 8155 	bhi.w	8004546 <HAL_RCC_GetSysClockFreq+0x2be>
 800429c:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	08004309 	.word	0x08004309
 80042a8:	08004547 	.word	0x08004547
 80042ac:	08004547 	.word	0x08004547
 80042b0:	08004547 	.word	0x08004547
 80042b4:	08004547 	.word	0x08004547
 80042b8:	08004547 	.word	0x08004547
 80042bc:	08004547 	.word	0x08004547
 80042c0:	08004547 	.word	0x08004547
 80042c4:	0800432f 	.word	0x0800432f
 80042c8:	08004547 	.word	0x08004547
 80042cc:	08004547 	.word	0x08004547
 80042d0:	08004547 	.word	0x08004547
 80042d4:	08004547 	.word	0x08004547
 80042d8:	08004547 	.word	0x08004547
 80042dc:	08004547 	.word	0x08004547
 80042e0:	08004547 	.word	0x08004547
 80042e4:	08004335 	.word	0x08004335
 80042e8:	08004547 	.word	0x08004547
 80042ec:	08004547 	.word	0x08004547
 80042f0:	08004547 	.word	0x08004547
 80042f4:	08004547 	.word	0x08004547
 80042f8:	08004547 	.word	0x08004547
 80042fc:	08004547 	.word	0x08004547
 8004300:	08004547 	.word	0x08004547
 8004304:	0800433b 	.word	0x0800433b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004308:	4b94      	ldr	r3, [pc, #592]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d009      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004314:	4b91      	ldr	r3, [pc, #580]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	08db      	lsrs	r3, r3, #3
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	4a90      	ldr	r2, [pc, #576]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
 8004324:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004326:	e111      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004328:	4b8d      	ldr	r3, [pc, #564]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800432a:	61bb      	str	r3, [r7, #24]
    break;
 800432c:	e10e      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800432e:	4b8d      	ldr	r3, [pc, #564]	; (8004564 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004330:	61bb      	str	r3, [r7, #24]
    break;
 8004332:	e10b      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004334:	4b8c      	ldr	r3, [pc, #560]	; (8004568 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004336:	61bb      	str	r3, [r7, #24]
    break;
 8004338:	e108      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800433a:	4b88      	ldr	r3, [pc, #544]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004344:	4b85      	ldr	r3, [pc, #532]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800434e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004350:	4b82      	ldr	r3, [pc, #520]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800435a:	4b80      	ldr	r3, [pc, #512]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800435c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435e:	08db      	lsrs	r3, r3, #3
 8004360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004372:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80e1 	beq.w	8004540 <HAL_RCC_GetSysClockFreq+0x2b8>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b02      	cmp	r3, #2
 8004382:	f000 8083 	beq.w	800448c <HAL_RCC_GetSysClockFreq+0x204>
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b02      	cmp	r3, #2
 800438a:	f200 80a1 	bhi.w	80044d0 <HAL_RCC_GetSysClockFreq+0x248>
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x114>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d056      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x1c0>
 800439a:	e099      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800439c:	4b6f      	ldr	r3, [pc, #444]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d02d      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043a8:	4b6c      	ldr	r3, [pc, #432]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	08db      	lsrs	r3, r3, #3
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	4a6b      	ldr	r2, [pc, #428]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
 80043b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	ee07 3a90 	vmov	s15, r3
 80043c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d2:	4b62      	ldr	r3, [pc, #392]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800456c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004402:	e087      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004570 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004416:	4b51      	ldr	r3, [pc, #324]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004426:	ed97 6a02 	vldr	s12, [r7, #8]
 800442a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800456c <HAL_RCC_GetSysClockFreq+0x2e4>
 800442e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800443a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004446:	e065      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004452:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004574 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445a:	4b40      	ldr	r3, [pc, #256]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446a:	ed97 6a02 	vldr	s12, [r7, #8]
 800446e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800456c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800447e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800448a:	e043      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004496:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004578 <HAL_RCC_GetSysClockFreq+0x2f0>
 800449a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800449e:	4b2f      	ldr	r3, [pc, #188]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80044b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800456c <HAL_RCC_GetSysClockFreq+0x2e4>
 80044b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044ce:	e021      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004574 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e2:	4b1e      	ldr	r3, [pc, #120]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800456c <HAL_RCC_GetSysClockFreq+0x2e4>
 80044fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800450a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004512:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004514:	4b11      	ldr	r3, [pc, #68]	; (800455c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	0a5b      	lsrs	r3, r3, #9
 800451a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800451e:	3301      	adds	r3, #1
 8004520:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800452c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004538:	ee17 3a90 	vmov	r3, s15
 800453c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800453e:	e005      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]
    break;
 8004544:	e002      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004546:	4b07      	ldr	r3, [pc, #28]	; (8004564 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004548:	61bb      	str	r3, [r7, #24]
    break;
 800454a:	bf00      	nop
  }

  return sysclockfreq;
 800454c:	69bb      	ldr	r3, [r7, #24]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3724      	adds	r7, #36	; 0x24
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	58024400 	.word	0x58024400
 8004560:	03d09000 	.word	0x03d09000
 8004564:	003d0900 	.word	0x003d0900
 8004568:	007a1200 	.word	0x007a1200
 800456c:	46000000 	.word	0x46000000
 8004570:	4c742400 	.word	0x4c742400
 8004574:	4a742400 	.word	0x4a742400
 8004578:	4af42400 	.word	0x4af42400

0800457c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004582:	f7ff fe81 	bl	8004288 <HAL_RCC_GetSysClockFreq>
 8004586:	4602      	mov	r2, r0
 8004588:	4b10      	ldr	r3, [pc, #64]	; (80045cc <HAL_RCC_GetHCLKFreq+0x50>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	0a1b      	lsrs	r3, r3, #8
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	490f      	ldr	r1, [pc, #60]	; (80045d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004594:	5ccb      	ldrb	r3, [r1, r3]
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	fa22 f303 	lsr.w	r3, r2, r3
 800459e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045a0:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <HAL_RCC_GetHCLKFreq+0x50>)
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80045aa:	5cd3      	ldrb	r3, [r2, r3]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	fa22 f303 	lsr.w	r3, r2, r3
 80045b6:	4a07      	ldr	r2, [pc, #28]	; (80045d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80045b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045ba:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80045c2:	681b      	ldr	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	58024400 	.word	0x58024400
 80045d0:	0800cd3c 	.word	0x0800cd3c
 80045d4:	24000004 	.word	0x24000004
 80045d8:	24000000 	.word	0x24000000

080045dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045e0:	f7ff ffcc 	bl	800457c <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4904      	ldr	r1, [pc, #16]	; (8004604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	58024400 	.word	0x58024400
 8004604:	0800cd3c 	.word	0x0800cd3c

08004608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800460c:	f7ff ffb6 	bl	800457c <HAL_RCC_GetHCLKFreq>
 8004610:	4602      	mov	r2, r0
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	0a1b      	lsrs	r3, r3, #8
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	4904      	ldr	r1, [pc, #16]	; (8004630 <HAL_RCC_GetPCLK2Freq+0x28>)
 800461e:	5ccb      	ldrb	r3, [r1, r3]
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004628:	4618      	mov	r0, r3
 800462a:	bd80      	pop	{r7, pc}
 800462c:	58024400 	.word	0x58024400
 8004630:	0800cd3c 	.word	0x0800cd3c

08004634 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800463c:	2300      	movs	r3, #0
 800463e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004640:	2300      	movs	r3, #0
 8004642:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d03f      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004654:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004658:	d02a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800465a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800465e:	d824      	bhi.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004664:	d018      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800466a:	d81e      	bhi.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004674:	d007      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004676:	e018      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004678:	4ba3      	ldr	r3, [pc, #652]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	4aa2      	ldr	r2, [pc, #648]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800467e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004684:	e015      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	2102      	movs	r1, #2
 800468c:	4618      	mov	r0, r3
 800468e:	f001 f9d5 	bl	8005a3c <RCCEx_PLL2_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004696:	e00c      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3324      	adds	r3, #36	; 0x24
 800469c:	2102      	movs	r1, #2
 800469e:	4618      	mov	r0, r3
 80046a0:	f001 fa7e 	bl	8005ba0 <RCCEx_PLL3_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046a8:	e003      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	75fb      	strb	r3, [r7, #23]
      break;
 80046ae:	e000      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046b8:	4b93      	ldr	r3, [pc, #588]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c4:	4990      	ldr	r1, [pc, #576]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	650b      	str	r3, [r1, #80]	; 0x50
 80046ca:	e001      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d03d      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d826      	bhi.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	08004701 	.word	0x08004701
 80046f0:	0800470f 	.word	0x0800470f
 80046f4:	08004721 	.word	0x08004721
 80046f8:	08004739 	.word	0x08004739
 80046fc:	08004739 	.word	0x08004739
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004700:	4b81      	ldr	r3, [pc, #516]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	4a80      	ldr	r2, [pc, #512]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800470a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800470c:	e015      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3304      	adds	r3, #4
 8004712:	2100      	movs	r1, #0
 8004714:	4618      	mov	r0, r3
 8004716:	f001 f991 	bl	8005a3c <RCCEx_PLL2_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800471e:	e00c      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3324      	adds	r3, #36	; 0x24
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f001 fa3a 	bl	8005ba0 <RCCEx_PLL3_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004730:	e003      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
      break;
 8004736:	e000      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800473a:	7dfb      	ldrb	r3, [r7, #23]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004740:	4b71      	ldr	r3, [pc, #452]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004744:	f023 0207 	bic.w	r2, r3, #7
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	496e      	ldr	r1, [pc, #440]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800474e:	4313      	orrs	r3, r2
 8004750:	650b      	str	r3, [r1, #80]	; 0x50
 8004752:	e001      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004760:	2b00      	cmp	r3, #0
 8004762:	d042      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800476c:	d02b      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800476e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004772:	d825      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004774:	2bc0      	cmp	r3, #192	; 0xc0
 8004776:	d028      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004778:	2bc0      	cmp	r3, #192	; 0xc0
 800477a:	d821      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800477c:	2b80      	cmp	r3, #128	; 0x80
 800477e:	d016      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004780:	2b80      	cmp	r3, #128	; 0x80
 8004782:	d81d      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d007      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800478c:	e018      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800478e:	4b5e      	ldr	r3, [pc, #376]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	4a5d      	ldr	r2, [pc, #372]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004798:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800479a:	e017      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f001 f94a 	bl	8005a3c <RCCEx_PLL2_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80047ac:	e00e      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3324      	adds	r3, #36	; 0x24
 80047b2:	2100      	movs	r1, #0
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 f9f3 	bl	8005ba0 <RCCEx_PLL3_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80047be:	e005      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	75fb      	strb	r3, [r7, #23]
      break;
 80047c4:	e002      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80047c6:	bf00      	nop
 80047c8:	e000      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80047ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80047d2:	4b4d      	ldr	r3, [pc, #308]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047de:	494a      	ldr	r1, [pc, #296]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	650b      	str	r3, [r1, #80]	; 0x50
 80047e4:	e001      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d049      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004800:	d030      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004802:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004806:	d82a      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004808:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800480c:	d02c      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800480e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004812:	d824      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004818:	d018      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800481a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800481e:	d81e      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004828:	d007      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800482a:	e018      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800482c:	4b36      	ldr	r3, [pc, #216]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	4a35      	ldr	r2, [pc, #212]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004836:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004838:	e017      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f001 f8fb 	bl	8005a3c <RCCEx_PLL2_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800484a:	e00e      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3324      	adds	r3, #36	; 0x24
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f001 f9a4 	bl	8005ba0 <RCCEx_PLL3_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800485c:	e005      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	75fb      	strb	r3, [r7, #23]
      break;
 8004862:	e002      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004870:	4b25      	ldr	r3, [pc, #148]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004874:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800487e:	4922      	ldr	r1, [pc, #136]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004880:	4313      	orrs	r3, r2
 8004882:	658b      	str	r3, [r1, #88]	; 0x58
 8004884:	e001      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004892:	2b00      	cmp	r3, #0
 8004894:	d04b      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800489c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048a0:	d030      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80048a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048a6:	d82a      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80048a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048ac:	d02e      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80048ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048b2:	d824      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80048b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048b8:	d018      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80048ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048be:	d81e      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80048c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048c8:	d007      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80048ca:	e018      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048cc:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	4a0d      	ldr	r2, [pc, #52]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048d8:	e019      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3304      	adds	r3, #4
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 f8ab 	bl	8005a3c <RCCEx_PLL2_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80048ea:	e010      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3324      	adds	r3, #36	; 0x24
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 f954 	bl	8005ba0 <RCCEx_PLL3_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048fc:	e007      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	75fb      	strb	r3, [r7, #23]
      break;
 8004902:	e004      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004904:	bf00      	nop
 8004906:	e002      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004908:	58024400 	.word	0x58024400
      break;
 800490c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004914:	4b99      	ldr	r3, [pc, #612]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004922:	4996      	ldr	r1, [pc, #600]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004924:	4313      	orrs	r3, r2
 8004926:	658b      	str	r3, [r1, #88]	; 0x58
 8004928:	e001      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492a:	7dfb      	ldrb	r3, [r7, #23]
 800492c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d032      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493e:	2b30      	cmp	r3, #48	; 0x30
 8004940:	d01c      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004942:	2b30      	cmp	r3, #48	; 0x30
 8004944:	d817      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004946:	2b20      	cmp	r3, #32
 8004948:	d00c      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800494a:	2b20      	cmp	r3, #32
 800494c:	d813      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d016      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004952:	2b10      	cmp	r3, #16
 8004954:	d10f      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004956:	4b89      	ldr	r3, [pc, #548]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	4a88      	ldr	r2, [pc, #544]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800495c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004960:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004962:	e00e      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3304      	adds	r3, #4
 8004968:	2102      	movs	r1, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f001 f866 	bl	8005a3c <RCCEx_PLL2_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004974:	e005      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	75fb      	strb	r3, [r7, #23]
      break;
 800497a:	e002      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800497c:	bf00      	nop
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004982:	7dfb      	ldrb	r3, [r7, #23]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d109      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004988:	4b7c      	ldr	r3, [pc, #496]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800498a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004994:	4979      	ldr	r1, [pc, #484]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004996:	4313      	orrs	r3, r2
 8004998:	64cb      	str	r3, [r1, #76]	; 0x4c
 800499a:	e001      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	7dfb      	ldrb	r3, [r7, #23]
 800499e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d047      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b4:	d030      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80049b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ba:	d82a      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80049bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049c0:	d02c      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80049c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049c6:	d824      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80049c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049cc:	d018      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d2:	d81e      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80049d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049dc:	d007      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80049de:	e018      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e0:	4b66      	ldr	r3, [pc, #408]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	4a65      	ldr	r2, [pc, #404]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049ec:	e017      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 f821 	bl	8005a3c <RCCEx_PLL2_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049fe:	e00e      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3324      	adds	r3, #36	; 0x24
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 f8ca 	bl	8005ba0 <RCCEx_PLL3_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a10:	e005      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
      break;
 8004a16:	e002      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004a18:	bf00      	nop
 8004a1a:	e000      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d109      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a24:	4b55      	ldr	r3, [pc, #340]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a28:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a30:	4952      	ldr	r1, [pc, #328]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	650b      	str	r3, [r1, #80]	; 0x50
 8004a36:	e001      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a38:	7dfb      	ldrb	r3, [r7, #23]
 8004a3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d049      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a50:	d02e      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a56:	d828      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a5c:	d02a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004a5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a62:	d822      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a68:	d026      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004a6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a6e:	d81c      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a74:	d010      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a7a:	d816      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01d      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a84:	d111      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 ffd5 	bl	8005a3c <RCCEx_PLL2_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a96:	e012      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3324      	adds	r3, #36	; 0x24
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 f87e 	bl	8005ba0 <RCCEx_PLL3_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004aa8:	e009      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
      break;
 8004aae:	e006      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004ab0:	bf00      	nop
 8004ab2:	e004      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004ab4:	bf00      	nop
 8004ab6:	e002      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004ab8:	bf00      	nop
 8004aba:	e000      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d109      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ac4:	4b2d      	ldr	r3, [pc, #180]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad0:	492a      	ldr	r1, [pc, #168]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	650b      	str	r3, [r1, #80]	; 0x50
 8004ad6:	e001      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
 8004ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d04d      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004af2:	d02e      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004af8:	d828      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afe:	d02a      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d822      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b0a:	d026      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b10:	d81c      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b16:	d010      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b1c:	d816      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01d      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b26:	d111      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 ff84 	bl	8005a3c <RCCEx_PLL2_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b38:	e012      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3324      	adds	r3, #36	; 0x24
 8004b3e:	2101      	movs	r1, #1
 8004b40:	4618      	mov	r0, r3
 8004b42:	f001 f82d 	bl	8005ba0 <RCCEx_PLL3_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b4a:	e009      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b50:	e006      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b52:	bf00      	nop
 8004b54:	e004      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b56:	bf00      	nop
 8004b58:	e002      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e000      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b66:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b74:	4901      	ldr	r1, [pc, #4]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	658b      	str	r3, [r1, #88]	; 0x58
 8004b7a:	e003      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004b7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b80:	7dfb      	ldrb	r3, [r7, #23]
 8004b82:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d02f      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b98:	d00e      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b9e:	d814      	bhi.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d015      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004ba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ba8:	d10f      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004baa:	4baf      	ldr	r3, [pc, #700]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	4aae      	ldr	r2, [pc, #696]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004bb6:	e00c      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 ff3c 	bl	8005a3c <RCCEx_PLL2_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004bc8:	e003      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8004bce:	e000      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bd8:	4ba3      	ldr	r3, [pc, #652]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be4:	49a0      	ldr	r1, [pc, #640]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	650b      	str	r3, [r1, #80]	; 0x50
 8004bea:	e001      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bec:	7dfb      	ldrb	r3, [r7, #23]
 8004bee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d032      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d81b      	bhi.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004c04:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c43 	.word	0x08004c43
 8004c10:	08004c1d 	.word	0x08004c1d
 8004c14:	08004c2b 	.word	0x08004c2b
 8004c18:	08004c43 	.word	0x08004c43
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c1c:	4b92      	ldr	r3, [pc, #584]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	4a91      	ldr	r2, [pc, #580]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c28:	e00c      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	2102      	movs	r1, #2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 ff03 	bl	8005a3c <RCCEx_PLL2_Config>
 8004c36:	4603      	mov	r3, r0
 8004c38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c3a:	e003      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c40:	e000      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c4a:	4b87      	ldr	r3, [pc, #540]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4e:	f023 0203 	bic.w	r2, r3, #3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	4984      	ldr	r1, [pc, #528]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c5c:	e001      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
 8004c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8086 	beq.w	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c70:	4b7e      	ldr	r3, [pc, #504]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a7d      	ldr	r2, [pc, #500]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c7c:	f7fd f81a 	bl	8001cb4 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c82:	e009      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c84:	f7fd f816 	bl	8001cb4 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b64      	cmp	r3, #100	; 0x64
 8004c90:	d902      	bls.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	75fb      	strb	r3, [r7, #23]
        break;
 8004c96:	e005      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c98:	4b74      	ldr	r3, [pc, #464]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0ef      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d166      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004caa:	4b6f      	ldr	r3, [pc, #444]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cb4:	4053      	eors	r3, r2
 8004cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d013      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cbe:	4b6a      	ldr	r3, [pc, #424]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc8:	4b67      	ldr	r3, [pc, #412]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ccc:	4a66      	ldr	r2, [pc, #408]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd4:	4b64      	ldr	r3, [pc, #400]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd8:	4a63      	ldr	r2, [pc, #396]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ce0:	4a61      	ldr	r2, [pc, #388]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf0:	d115      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf2:	f7fc ffdf 	bl	8001cb4 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cf8:	e00b      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfa:	f7fc ffdb 	bl	8001cb4 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d902      	bls.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	75fb      	strb	r3, [r7, #23]
            break;
 8004d10:	e005      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d12:	4b55      	ldr	r3, [pc, #340]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0ed      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d126      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d32:	d10d      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004d34:	4b4c      	ldr	r3, [pc, #304]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d42:	0919      	lsrs	r1, r3, #4
 8004d44:	4b4a      	ldr	r3, [pc, #296]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004d46:	400b      	ands	r3, r1
 8004d48:	4947      	ldr	r1, [pc, #284]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	610b      	str	r3, [r1, #16]
 8004d4e:	e005      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004d50:	4b45      	ldr	r3, [pc, #276]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	4a44      	ldr	r2, [pc, #272]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d5a:	6113      	str	r3, [r2, #16]
 8004d5c:	4b42      	ldr	r3, [pc, #264]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6a:	493f      	ldr	r1, [pc, #252]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	670b      	str	r3, [r1, #112]	; 0x70
 8004d70:	e004      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
 8004d74:	75bb      	strb	r3, [r7, #22]
 8004d76:	e001      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d78:	7dfb      	ldrb	r3, [r7, #23]
 8004d7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 8085 	beq.w	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d8e:	2b28      	cmp	r3, #40	; 0x28
 8004d90:	d866      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004d92:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d98:	08004e75 	.word	0x08004e75
 8004d9c:	08004e61 	.word	0x08004e61
 8004da0:	08004e61 	.word	0x08004e61
 8004da4:	08004e61 	.word	0x08004e61
 8004da8:	08004e61 	.word	0x08004e61
 8004dac:	08004e61 	.word	0x08004e61
 8004db0:	08004e61 	.word	0x08004e61
 8004db4:	08004e61 	.word	0x08004e61
 8004db8:	08004e3d 	.word	0x08004e3d
 8004dbc:	08004e61 	.word	0x08004e61
 8004dc0:	08004e61 	.word	0x08004e61
 8004dc4:	08004e61 	.word	0x08004e61
 8004dc8:	08004e61 	.word	0x08004e61
 8004dcc:	08004e61 	.word	0x08004e61
 8004dd0:	08004e61 	.word	0x08004e61
 8004dd4:	08004e61 	.word	0x08004e61
 8004dd8:	08004e4f 	.word	0x08004e4f
 8004ddc:	08004e61 	.word	0x08004e61
 8004de0:	08004e61 	.word	0x08004e61
 8004de4:	08004e61 	.word	0x08004e61
 8004de8:	08004e61 	.word	0x08004e61
 8004dec:	08004e61 	.word	0x08004e61
 8004df0:	08004e61 	.word	0x08004e61
 8004df4:	08004e61 	.word	0x08004e61
 8004df8:	08004e75 	.word	0x08004e75
 8004dfc:	08004e61 	.word	0x08004e61
 8004e00:	08004e61 	.word	0x08004e61
 8004e04:	08004e61 	.word	0x08004e61
 8004e08:	08004e61 	.word	0x08004e61
 8004e0c:	08004e61 	.word	0x08004e61
 8004e10:	08004e61 	.word	0x08004e61
 8004e14:	08004e61 	.word	0x08004e61
 8004e18:	08004e75 	.word	0x08004e75
 8004e1c:	08004e61 	.word	0x08004e61
 8004e20:	08004e61 	.word	0x08004e61
 8004e24:	08004e61 	.word	0x08004e61
 8004e28:	08004e61 	.word	0x08004e61
 8004e2c:	08004e61 	.word	0x08004e61
 8004e30:	08004e61 	.word	0x08004e61
 8004e34:	08004e61 	.word	0x08004e61
 8004e38:	08004e75 	.word	0x08004e75
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	2101      	movs	r1, #1
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fdfa 	bl	8005a3c <RCCEx_PLL2_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e4c:	e013      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3324      	adds	r3, #36	; 0x24
 8004e52:	2101      	movs	r1, #1
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fea3 	bl	8005ba0 <RCCEx_PLL3_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	75fb      	strb	r3, [r7, #23]
      break;
 8004e64:	e007      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e66:	bf00      	nop
 8004e68:	58024400 	.word	0x58024400
 8004e6c:	58024800 	.word	0x58024800
 8004e70:	00ffffcf 	.word	0x00ffffcf
      break;
 8004e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d109      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e7c:	4b96      	ldr	r3, [pc, #600]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e80:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e88:	4993      	ldr	r1, [pc, #588]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	654b      	str	r3, [r1, #84]	; 0x54
 8004e8e:	e001      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d038      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	d821      	bhi.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ef3 	.word	0x08004ef3
 8004eb4:	08004ec9 	.word	0x08004ec9
 8004eb8:	08004edb 	.word	0x08004edb
 8004ebc:	08004ef3 	.word	0x08004ef3
 8004ec0:	08004ef3 	.word	0x08004ef3
 8004ec4:	08004ef3 	.word	0x08004ef3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	2101      	movs	r1, #1
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fdb4 	bl	8005a3c <RCCEx_PLL2_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ed8:	e00c      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3324      	adds	r3, #36	; 0x24
 8004ede:	2101      	movs	r1, #1
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fe5d 	bl	8005ba0 <RCCEx_PLL3_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004eea:	e003      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef0:	e000      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004efa:	4b77      	ldr	r3, [pc, #476]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	f023 0207 	bic.w	r2, r3, #7
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f06:	4974      	ldr	r1, [pc, #464]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	654b      	str	r3, [r1, #84]	; 0x54
 8004f0c:	e001      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
 8004f10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d03a      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	2b05      	cmp	r3, #5
 8004f26:	d821      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f73 	.word	0x08004f73
 8004f34:	08004f49 	.word	0x08004f49
 8004f38:	08004f5b 	.word	0x08004f5b
 8004f3c:	08004f73 	.word	0x08004f73
 8004f40:	08004f73 	.word	0x08004f73
 8004f44:	08004f73 	.word	0x08004f73
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fd74 	bl	8005a3c <RCCEx_PLL2_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f58:	e00c      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3324      	adds	r3, #36	; 0x24
 8004f5e:	2101      	movs	r1, #1
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fe1d 	bl	8005ba0 <RCCEx_PLL3_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f6a:	e003      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f70:	e000      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f7a:	4b57      	ldr	r3, [pc, #348]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	f023 0207 	bic.w	r2, r3, #7
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	4953      	ldr	r1, [pc, #332]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f8e:	e001      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d04b      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004faa:	d02e      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fb0:	d828      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb6:	d02a      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbc:	d822      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004fbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fc2:	d026      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004fc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fc8:	d81c      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fce:	d010      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd4:	d816      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01d      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fde:	d111      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fd28 	bl	8005a3c <RCCEx_PLL2_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ff0:	e012      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3324      	adds	r3, #36	; 0x24
 8004ff6:	2102      	movs	r1, #2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fdd1 	bl	8005ba0 <RCCEx_PLL3_Config>
 8004ffe:	4603      	mov	r3, r0
 8005000:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005002:	e009      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
      break;
 8005008:	e006      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800500a:	bf00      	nop
 800500c:	e004      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800500e:	bf00      	nop
 8005010:	e002      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005012:	bf00      	nop
 8005014:	e000      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800501e:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005022:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800502c:	492a      	ldr	r1, [pc, #168]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800502e:	4313      	orrs	r3, r2
 8005030:	654b      	str	r3, [r1, #84]	; 0x54
 8005032:	e001      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005034:	7dfb      	ldrb	r3, [r7, #23]
 8005036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005040:	2b00      	cmp	r3, #0
 8005042:	d04d      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800504a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800504e:	d02e      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005050:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005054:	d828      	bhi.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	d02a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800505c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005060:	d822      	bhi.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005062:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005066:	d026      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005068:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800506c:	d81c      	bhi.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800506e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005072:	d010      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005078:	d816      	bhi.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01d      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800507e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005082:	d111      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3304      	adds	r3, #4
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fcd6 	bl	8005a3c <RCCEx_PLL2_Config>
 8005090:	4603      	mov	r3, r0
 8005092:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005094:	e012      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3324      	adds	r3, #36	; 0x24
 800509a:	2102      	movs	r1, #2
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fd7f 	bl	8005ba0 <RCCEx_PLL3_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80050a6:	e009      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]
      break;
 80050ac:	e006      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80050ae:	bf00      	nop
 80050b0:	e004      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80050b2:	bf00      	nop
 80050b4:	e002      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80050b6:	bf00      	nop
 80050b8:	e000      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80050ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10c      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050d0:	4901      	ldr	r1, [pc, #4]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	658b      	str	r3, [r1, #88]	; 0x58
 80050d6:	e003      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80050d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d04b      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050f6:	d02e      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80050f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050fc:	d828      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80050fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005102:	d02a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005108:	d822      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800510a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800510e:	d026      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005110:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005114:	d81c      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800511a:	d010      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800511c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005120:	d816      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01d      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512a:	d111      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fc82 	bl	8005a3c <RCCEx_PLL2_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800513c:	e012      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3324      	adds	r3, #36	; 0x24
 8005142:	2102      	movs	r1, #2
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fd2b 	bl	8005ba0 <RCCEx_PLL3_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800514e:	e009      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
      break;
 8005154:	e006      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005156:	bf00      	nop
 8005158:	e004      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800515a:	bf00      	nop
 800515c:	e002      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800515e:	bf00      	nop
 8005160:	e000      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005164:	7dfb      	ldrb	r3, [r7, #23]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800516a:	4b9d      	ldr	r3, [pc, #628]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005178:	4999      	ldr	r1, [pc, #612]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800517a:	4313      	orrs	r3, r2
 800517c:	658b      	str	r3, [r1, #88]	; 0x58
 800517e:	e001      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519a:	d10a      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3324      	adds	r3, #36	; 0x24
 80051a0:	2102      	movs	r1, #2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fcfc 	bl	8005ba0 <RCCEx_PLL3_Config>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80051b2:	4b8b      	ldr	r3, [pc, #556]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051c0:	4987      	ldr	r1, [pc, #540]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01a      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051dc:	d10a      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3324      	adds	r3, #36	; 0x24
 80051e2:	2102      	movs	r1, #2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fcdb 	bl	8005ba0 <RCCEx_PLL3_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051f4:	4b7a      	ldr	r3, [pc, #488]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005202:	4977      	ldr	r1, [pc, #476]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005204:	4313      	orrs	r3, r2
 8005206:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d034      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800521a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800521e:	d01d      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005224:	d817      	bhi.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800522a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522e:	d009      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005230:	e011      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3304      	adds	r3, #4
 8005236:	2100      	movs	r1, #0
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fbff 	bl	8005a3c <RCCEx_PLL2_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005242:	e00c      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3324      	adds	r3, #36	; 0x24
 8005248:	2102      	movs	r1, #2
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fca8 	bl	8005ba0 <RCCEx_PLL3_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005254:	e003      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	75fb      	strb	r3, [r7, #23]
      break;
 800525a:	e000      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800525c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005264:	4b5e      	ldr	r3, [pc, #376]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005272:	495b      	ldr	r1, [pc, #364]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005274:	4313      	orrs	r3, r2
 8005276:	658b      	str	r3, [r1, #88]	; 0x58
 8005278:	e001      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527a:	7dfb      	ldrb	r3, [r7, #23]
 800527c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d033      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005290:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005294:	d01c      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005296:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800529a:	d816      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800529c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052a0:	d003      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80052a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052a6:	d007      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80052a8:	e00f      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052aa:	4b4d      	ldr	r3, [pc, #308]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	4a4c      	ldr	r2, [pc, #304]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80052b6:	e00c      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3324      	adds	r3, #36	; 0x24
 80052bc:	2101      	movs	r1, #1
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fc6e 	bl	8005ba0 <RCCEx_PLL3_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80052c8:	e003      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	75fb      	strb	r3, [r7, #23]
      break;
 80052ce:	e000      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80052d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052d8:	4b41      	ldr	r3, [pc, #260]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e6:	493e      	ldr	r1, [pc, #248]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	654b      	str	r3, [r1, #84]	; 0x54
 80052ec:	e001      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
 80052f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d029      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530a:	d007      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800530c:	e00f      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800530e:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	4a33      	ldr	r2, [pc, #204]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800531a:	e00b      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	2102      	movs	r1, #2
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fb8a 	bl	8005a3c <RCCEx_PLL2_Config>
 8005328:	4603      	mov	r3, r0
 800532a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800532c:	e002      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
      break;
 8005332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d109      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800533a:	4b29      	ldr	r3, [pc, #164]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800533c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005346:	4926      	ldr	r1, [pc, #152]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005348:	4313      	orrs	r3, r2
 800534a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800534c:	e001      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3324      	adds	r3, #36	; 0x24
 8005362:	2102      	movs	r1, #2
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fc1b 	bl	8005ba0 <RCCEx_PLL3_Config>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d033      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005388:	d017      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800538a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800538e:	d811      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005394:	d013      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800539a:	d80b      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d010      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80053a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a4:	d106      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a6:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	4a0d      	ldr	r2, [pc, #52]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80053b2:	e007      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	75fb      	strb	r3, [r7, #23]
      break;
 80053b8:	e004      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80053ba:	bf00      	nop
 80053bc:	e002      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80053be:	bf00      	nop
 80053c0:	e000      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80053c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10c      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ca:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053d6:	4902      	ldr	r1, [pc, #8]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	654b      	str	r3, [r1, #84]	; 0x54
 80053dc:	e004      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80053de:	bf00      	nop
 80053e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
 80053e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d008      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053f4:	4b31      	ldr	r3, [pc, #196]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	492e      	ldr	r1, [pc, #184]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005402:	4313      	orrs	r3, r2
 8005404:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d009      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005412:	4b2a      	ldr	r3, [pc, #168]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005420:	4926      	ldr	r1, [pc, #152]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005422:	4313      	orrs	r3, r2
 8005424:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d008      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005432:	4b22      	ldr	r3, [pc, #136]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005436:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800543e:	491f      	ldr	r1, [pc, #124]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005440:	4313      	orrs	r3, r2
 8005442:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00d      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005450:	4b1a      	ldr	r3, [pc, #104]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	4a19      	ldr	r2, [pc, #100]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005456:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800545a:	6113      	str	r3, [r2, #16]
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005466:	4915      	ldr	r1, [pc, #84]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005468:	4313      	orrs	r3, r2
 800546a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	da08      	bge.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005474:	4b11      	ldr	r3, [pc, #68]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005478:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005480:	490e      	ldr	r1, [pc, #56]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005482:	4313      	orrs	r3, r2
 8005484:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005492:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	4906      	ldr	r1, [pc, #24]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80054a6:	7dbb      	ldrb	r3, [r7, #22]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	e000      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	58024400 	.word	0x58024400

080054c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80054c4:	f7ff f85a 	bl	800457c <HAL_RCC_GetHCLKFreq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	091b      	lsrs	r3, r3, #4
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4904      	ldr	r1, [pc, #16]	; (80054e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80054d6:	5ccb      	ldrb	r3, [r1, r3]
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	58024400 	.word	0x58024400
 80054e8:	0800cd3c 	.word	0x0800cd3c

080054ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054f4:	4ba1      	ldr	r3, [pc, #644]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80054fe:	4b9f      	ldr	r3, [pc, #636]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	0b1b      	lsrs	r3, r3, #12
 8005504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005508:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800550a:	4b9c      	ldr	r3, [pc, #624]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005516:	4b99      	ldr	r3, [pc, #612]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551a:	08db      	lsrs	r3, r3, #3
 800551c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8111 	beq.w	800575c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2b02      	cmp	r3, #2
 800553e:	f000 8083 	beq.w	8005648 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2b02      	cmp	r3, #2
 8005546:	f200 80a1 	bhi.w	800568c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d056      	beq.n	8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005556:	e099      	b.n	800568c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005558:	4b88      	ldr	r3, [pc, #544]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d02d      	beq.n	80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005564:	4b85      	ldr	r3, [pc, #532]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	08db      	lsrs	r3, r3, #3
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	4a84      	ldr	r2, [pc, #528]	; (8005780 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
 8005574:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	ee07 3a90 	vmov	s15, r3
 800557c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	ee07 3a90 	vmov	s15, r3
 8005586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800558e:	4b7b      	ldr	r3, [pc, #492]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559e:	ed97 6a03 	vldr	s12, [r7, #12]
 80055a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80055be:	e087      	b.n	80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005788 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80055ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d2:	4b6a      	ldr	r3, [pc, #424]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005602:	e065      	b.n	80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800578c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005616:	4b59      	ldr	r3, [pc, #356]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005626:	ed97 6a03 	vldr	s12, [r7, #12]
 800562a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800562e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800563a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005646:	e043      	b.n	80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005652:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005790 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800565a:	4b48      	ldr	r3, [pc, #288]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566a:	ed97 6a03 	vldr	s12, [r7, #12]
 800566e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800567a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800567e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800568a:	e021      	b.n	80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800578c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800569a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569e:	4b37      	ldr	r3, [pc, #220]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80056b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80056d0:	4b2a      	ldr	r3, [pc, #168]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	0a5b      	lsrs	r3, r3, #9
 80056d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80056ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f6:	ee17 2a90 	vmov	r2, s15
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80056fe:	4b1f      	ldr	r3, [pc, #124]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	0c1b      	lsrs	r3, r3, #16
 8005704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005708:	ee07 3a90 	vmov	s15, r3
 800570c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005718:	edd7 6a07 	vldr	s13, [r7, #28]
 800571c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005724:	ee17 2a90 	vmov	r2, s15
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800572c:	4b13      	ldr	r3, [pc, #76]	; (800577c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	0e1b      	lsrs	r3, r3, #24
 8005732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005746:	edd7 6a07 	vldr	s13, [r7, #28]
 800574a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800574e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005752:	ee17 2a90 	vmov	r2, s15
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800575a:	e008      	b.n	800576e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	609a      	str	r2, [r3, #8]
}
 800576e:	bf00      	nop
 8005770:	3724      	adds	r7, #36	; 0x24
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	58024400 	.word	0x58024400
 8005780:	03d09000 	.word	0x03d09000
 8005784:	46000000 	.word	0x46000000
 8005788:	4c742400 	.word	0x4c742400
 800578c:	4a742400 	.word	0x4a742400
 8005790:	4af42400 	.word	0x4af42400

08005794 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005794:	b480      	push	{r7}
 8005796:	b089      	sub	sp, #36	; 0x24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800579c:	4ba1      	ldr	r3, [pc, #644]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80057a6:	4b9f      	ldr	r3, [pc, #636]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	0d1b      	lsrs	r3, r3, #20
 80057ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80057b2:	4b9c      	ldr	r3, [pc, #624]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80057be:	4b99      	ldr	r3, [pc, #612]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c2:	08db      	lsrs	r3, r3, #3
 80057c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8111 	beq.w	8005a04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	f000 8083 	beq.w	80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	f200 80a1 	bhi.w	8005934 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d056      	beq.n	80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80057fe:	e099      	b.n	8005934 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005800:	4b88      	ldr	r3, [pc, #544]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d02d      	beq.n	8005868 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800580c:	4b85      	ldr	r3, [pc, #532]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	08db      	lsrs	r3, r3, #3
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	4a84      	ldr	r2, [pc, #528]	; (8005a28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
 800581c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	ee07 3a90 	vmov	s15, r3
 8005824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005836:	4b7b      	ldr	r3, [pc, #492]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005846:	ed97 6a03 	vldr	s12, [r7, #12]
 800584a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800584e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800585a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005862:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005866:	e087      	b.n	8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005872:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587a:	4b6a      	ldr	r3, [pc, #424]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588a:	ed97 6a03 	vldr	s12, [r7, #12]
 800588e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800589e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058aa:	e065      	b.n	8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058be:	4b59      	ldr	r3, [pc, #356]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80058d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ee:	e043      	b.n	8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80058fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005902:	4b48      	ldr	r3, [pc, #288]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005912:	ed97 6a03 	vldr	s12, [r7, #12]
 8005916:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800591a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800592a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005932:	e021      	b.n	8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005946:	4b37      	ldr	r3, [pc, #220]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005956:	ed97 6a03 	vldr	s12, [r7, #12]
 800595a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800595e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800596a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005976:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005978:	4b2a      	ldr	r3, [pc, #168]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	0a5b      	lsrs	r3, r3, #9
 800597e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800598e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005992:	edd7 6a07 	vldr	s13, [r7, #28]
 8005996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800599a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800599e:	ee17 2a90 	vmov	r2, s15
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80059a6:	4b1f      	ldr	r3, [pc, #124]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	0c1b      	lsrs	r3, r3, #16
 80059ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b0:	ee07 3a90 	vmov	s15, r3
 80059b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80059c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059cc:	ee17 2a90 	vmov	r2, s15
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80059d4:	4b13      	ldr	r3, [pc, #76]	; (8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d8:	0e1b      	lsrs	r3, r3, #24
 80059da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80059f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059fa:	ee17 2a90 	vmov	r2, s15
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005a02:	e008      	b.n	8005a16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]
}
 8005a16:	bf00      	nop
 8005a18:	3724      	adds	r7, #36	; 0x24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	58024400 	.word	0x58024400
 8005a28:	03d09000 	.word	0x03d09000
 8005a2c:	46000000 	.word	0x46000000
 8005a30:	4c742400 	.word	0x4c742400
 8005a34:	4a742400 	.word	0x4a742400
 8005a38:	4af42400 	.word	0x4af42400

08005a3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a4a:	4b53      	ldr	r3, [pc, #332]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d101      	bne.n	8005a5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e099      	b.n	8005b8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a5a:	4b4f      	ldr	r3, [pc, #316]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a4e      	ldr	r2, [pc, #312]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005a60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a66:	f7fc f925 	bl	8001cb4 <HAL_GetTick>
 8005a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a6c:	e008      	b.n	8005a80 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a6e:	f7fc f921 	bl	8001cb4 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e086      	b.n	8005b8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a80:	4b45      	ldr	r3, [pc, #276]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f0      	bne.n	8005a6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a8c:	4b42      	ldr	r3, [pc, #264]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	031b      	lsls	r3, r3, #12
 8005a9a:	493f      	ldr	r1, [pc, #252]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	628b      	str	r3, [r1, #40]	; 0x28
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	025b      	lsls	r3, r3, #9
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	041b      	lsls	r3, r3, #16
 8005abe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	061b      	lsls	r3, r3, #24
 8005acc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ad0:	4931      	ldr	r1, [pc, #196]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005ad6:	4b30      	ldr	r3, [pc, #192]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	492d      	ldr	r1, [pc, #180]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ae8:	4b2b      	ldr	r3, [pc, #172]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	f023 0220 	bic.w	r2, r3, #32
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	4928      	ldr	r1, [pc, #160]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005afa:	4b27      	ldr	r3, [pc, #156]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	4a26      	ldr	r2, [pc, #152]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b00:	f023 0310 	bic.w	r3, r3, #16
 8005b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b06:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b0a:	4b24      	ldr	r3, [pc, #144]	; (8005b9c <RCCEx_PLL2_Config+0x160>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	69d2      	ldr	r2, [r2, #28]
 8005b12:	00d2      	lsls	r2, r2, #3
 8005b14:	4920      	ldr	r1, [pc, #128]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b1a:	4b1f      	ldr	r3, [pc, #124]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b20:	f043 0310 	orr.w	r3, r3, #16
 8005b24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b2c:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	4a19      	ldr	r2, [pc, #100]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b38:	e00f      	b.n	8005b5a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d106      	bne.n	8005b4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b40:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	4a14      	ldr	r2, [pc, #80]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b4c:	e005      	b.n	8005b5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b5a:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a0e      	ldr	r2, [pc, #56]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b66:	f7fc f8a5 	bl	8001cb4 <HAL_GetTick>
 8005b6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b6c:	e008      	b.n	8005b80 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b6e:	f7fc f8a1 	bl	8001cb4 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e006      	b.n	8005b8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <RCCEx_PLL2_Config+0x15c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f0      	beq.n	8005b6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	ffff0007 	.word	0xffff0007

08005ba0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bae:	4b53      	ldr	r3, [pc, #332]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d101      	bne.n	8005bbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e099      	b.n	8005cf2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005bbe:	4b4f      	ldr	r3, [pc, #316]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a4e      	ldr	r2, [pc, #312]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bca:	f7fc f873 	bl	8001cb4 <HAL_GetTick>
 8005bce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bd0:	e008      	b.n	8005be4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005bd2:	f7fc f86f 	bl	8001cb4 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e086      	b.n	8005cf2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005be4:	4b45      	ldr	r3, [pc, #276]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1f0      	bne.n	8005bd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005bf0:	4b42      	ldr	r3, [pc, #264]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	051b      	lsls	r3, r3, #20
 8005bfe:	493f      	ldr	r1, [pc, #252]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	628b      	str	r3, [r1, #40]	; 0x28
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	025b      	lsls	r3, r3, #9
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	041b      	lsls	r3, r3, #16
 8005c22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	061b      	lsls	r3, r3, #24
 8005c30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c34:	4931      	ldr	r1, [pc, #196]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c3a:	4b30      	ldr	r3, [pc, #192]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	492d      	ldr	r1, [pc, #180]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c4c:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	4928      	ldr	r1, [pc, #160]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c5e:	4b27      	ldr	r3, [pc, #156]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c62:	4a26      	ldr	r2, [pc, #152]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c6a:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <RCCEx_PLL3_Config+0x160>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	69d2      	ldr	r2, [r2, #28]
 8005c76:	00d2      	lsls	r2, r2, #3
 8005c78:	4920      	ldr	r1, [pc, #128]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c7e:	4b1f      	ldr	r3, [pc, #124]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	4a1e      	ldr	r2, [pc, #120]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c90:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	4a19      	ldr	r2, [pc, #100]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005c96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c9c:	e00f      	b.n	8005cbe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d106      	bne.n	8005cb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ca4:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	4a14      	ldr	r2, [pc, #80]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005caa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cb0:	e005      	b.n	8005cbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005cb2:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	4a11      	ldr	r2, [pc, #68]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005cbe:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a0e      	ldr	r2, [pc, #56]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cca:	f7fb fff3 	bl	8001cb4 <HAL_GetTick>
 8005cce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cd0:	e008      	b.n	8005ce4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005cd2:	f7fb ffef 	bl	8001cb4 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d901      	bls.n	8005ce4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e006      	b.n	8005cf2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <RCCEx_PLL3_Config+0x15c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0f0      	beq.n	8005cd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	58024400 	.word	0x58024400
 8005d00:	ffff0007 	.word	0xffff0007

08005d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e049      	b.n	8005daa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fb fcc8 	bl	80016c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4619      	mov	r1, r3
 8005d42:	4610      	mov	r0, r2
 8005d44:	f000 fde2 	bl	800690c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d001      	beq.n	8005dcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e04c      	b.n	8005e66 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a26      	ldr	r2, [pc, #152]	; (8005e74 <HAL_TIM_Base_Start+0xc0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d022      	beq.n	8005e24 <HAL_TIM_Base_Start+0x70>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de6:	d01d      	beq.n	8005e24 <HAL_TIM_Base_Start+0x70>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <HAL_TIM_Base_Start+0xc4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d018      	beq.n	8005e24 <HAL_TIM_Base_Start+0x70>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <HAL_TIM_Base_Start+0xc8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d013      	beq.n	8005e24 <HAL_TIM_Base_Start+0x70>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1f      	ldr	r2, [pc, #124]	; (8005e80 <HAL_TIM_Base_Start+0xcc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00e      	beq.n	8005e24 <HAL_TIM_Base_Start+0x70>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1e      	ldr	r2, [pc, #120]	; (8005e84 <HAL_TIM_Base_Start+0xd0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <HAL_TIM_Base_Start+0x70>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1c      	ldr	r2, [pc, #112]	; (8005e88 <HAL_TIM_Base_Start+0xd4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_TIM_Base_Start+0x70>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1b      	ldr	r2, [pc, #108]	; (8005e8c <HAL_TIM_Base_Start+0xd8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d115      	bne.n	8005e50 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	4b19      	ldr	r3, [pc, #100]	; (8005e90 <HAL_TIM_Base_Start+0xdc>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b06      	cmp	r3, #6
 8005e34:	d015      	beq.n	8005e62 <HAL_TIM_Base_Start+0xae>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3c:	d011      	beq.n	8005e62 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0201 	orr.w	r2, r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4e:	e008      	b.n	8005e62 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e000      	b.n	8005e64 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40000c00 	.word	0x40000c00
 8005e84:	40010400 	.word	0x40010400
 8005e88:	40001800 	.word	0x40001800
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	00010007 	.word	0x00010007

08005e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d001      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e054      	b.n	8005f56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a26      	ldr	r2, [pc, #152]	; (8005f64 <HAL_TIM_Base_Start_IT+0xd0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d022      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed6:	d01d      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a22      	ldr	r2, [pc, #136]	; (8005f68 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d018      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a21      	ldr	r2, [pc, #132]	; (8005f6c <HAL_TIM_Base_Start_IT+0xd8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d013      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00e      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1e      	ldr	r2, [pc, #120]	; (8005f74 <HAL_TIM_Base_Start_IT+0xe0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d009      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1c      	ldr	r2, [pc, #112]	; (8005f78 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d004      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1b      	ldr	r2, [pc, #108]	; (8005f7c <HAL_TIM_Base_Start_IT+0xe8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d115      	bne.n	8005f40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689a      	ldr	r2, [r3, #8]
 8005f1a:	4b19      	ldr	r3, [pc, #100]	; (8005f80 <HAL_TIM_Base_Start_IT+0xec>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b06      	cmp	r3, #6
 8005f24:	d015      	beq.n	8005f52 <HAL_TIM_Base_Start_IT+0xbe>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2c:	d011      	beq.n	8005f52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0201 	orr.w	r2, r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3e:	e008      	b.n	8005f52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	e000      	b.n	8005f54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40010000 	.word	0x40010000
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40000800 	.word	0x40000800
 8005f70:	40000c00 	.word	0x40000c00
 8005f74:	40010400 	.word	0x40010400
 8005f78:	40001800 	.word	0x40001800
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	00010007 	.word	0x00010007

08005f84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e049      	b.n	800602a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f841 	bl	8006032 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f000 fca2 	bl	800690c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
	...

08006048 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d109      	bne.n	800606c <HAL_TIM_PWM_Start+0x24>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	bf14      	ite	ne
 8006064:	2301      	movne	r3, #1
 8006066:	2300      	moveq	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	e03c      	b.n	80060e6 <HAL_TIM_PWM_Start+0x9e>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b04      	cmp	r3, #4
 8006070:	d109      	bne.n	8006086 <HAL_TIM_PWM_Start+0x3e>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b01      	cmp	r3, #1
 800607c:	bf14      	ite	ne
 800607e:	2301      	movne	r3, #1
 8006080:	2300      	moveq	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	e02f      	b.n	80060e6 <HAL_TIM_PWM_Start+0x9e>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b08      	cmp	r3, #8
 800608a:	d109      	bne.n	80060a0 <HAL_TIM_PWM_Start+0x58>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	bf14      	ite	ne
 8006098:	2301      	movne	r3, #1
 800609a:	2300      	moveq	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	e022      	b.n	80060e6 <HAL_TIM_PWM_Start+0x9e>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b0c      	cmp	r3, #12
 80060a4:	d109      	bne.n	80060ba <HAL_TIM_PWM_Start+0x72>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	bf14      	ite	ne
 80060b2:	2301      	movne	r3, #1
 80060b4:	2300      	moveq	r3, #0
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	e015      	b.n	80060e6 <HAL_TIM_PWM_Start+0x9e>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d109      	bne.n	80060d4 <HAL_TIM_PWM_Start+0x8c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	bf14      	ite	ne
 80060cc:	2301      	movne	r3, #1
 80060ce:	2300      	moveq	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	e008      	b.n	80060e6 <HAL_TIM_PWM_Start+0x9e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	bf14      	ite	ne
 80060e0:	2301      	movne	r3, #1
 80060e2:	2300      	moveq	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e0a1      	b.n	8006232 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d104      	bne.n	80060fe <HAL_TIM_PWM_Start+0xb6>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060fc:	e023      	b.n	8006146 <HAL_TIM_PWM_Start+0xfe>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b04      	cmp	r3, #4
 8006102:	d104      	bne.n	800610e <HAL_TIM_PWM_Start+0xc6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800610c:	e01b      	b.n	8006146 <HAL_TIM_PWM_Start+0xfe>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b08      	cmp	r3, #8
 8006112:	d104      	bne.n	800611e <HAL_TIM_PWM_Start+0xd6>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800611c:	e013      	b.n	8006146 <HAL_TIM_PWM_Start+0xfe>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b0c      	cmp	r3, #12
 8006122:	d104      	bne.n	800612e <HAL_TIM_PWM_Start+0xe6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800612c:	e00b      	b.n	8006146 <HAL_TIM_PWM_Start+0xfe>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b10      	cmp	r3, #16
 8006132:	d104      	bne.n	800613e <HAL_TIM_PWM_Start+0xf6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800613c:	e003      	b.n	8006146 <HAL_TIM_PWM_Start+0xfe>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2201      	movs	r2, #1
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 ffea 	bl	8007128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a38      	ldr	r2, [pc, #224]	; (800623c <HAL_TIM_PWM_Start+0x1f4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <HAL_TIM_PWM_Start+0x13e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a37      	ldr	r2, [pc, #220]	; (8006240 <HAL_TIM_PWM_Start+0x1f8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00e      	beq.n	8006186 <HAL_TIM_PWM_Start+0x13e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a35      	ldr	r2, [pc, #212]	; (8006244 <HAL_TIM_PWM_Start+0x1fc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d009      	beq.n	8006186 <HAL_TIM_PWM_Start+0x13e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a34      	ldr	r2, [pc, #208]	; (8006248 <HAL_TIM_PWM_Start+0x200>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_TIM_PWM_Start+0x13e>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a32      	ldr	r2, [pc, #200]	; (800624c <HAL_TIM_PWM_Start+0x204>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d101      	bne.n	800618a <HAL_TIM_PWM_Start+0x142>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <HAL_TIM_PWM_Start+0x144>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d007      	beq.n	80061a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800619e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a25      	ldr	r2, [pc, #148]	; (800623c <HAL_TIM_PWM_Start+0x1f4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d022      	beq.n	80061f0 <HAL_TIM_PWM_Start+0x1a8>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b2:	d01d      	beq.n	80061f0 <HAL_TIM_PWM_Start+0x1a8>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a25      	ldr	r2, [pc, #148]	; (8006250 <HAL_TIM_PWM_Start+0x208>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d018      	beq.n	80061f0 <HAL_TIM_PWM_Start+0x1a8>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a24      	ldr	r2, [pc, #144]	; (8006254 <HAL_TIM_PWM_Start+0x20c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d013      	beq.n	80061f0 <HAL_TIM_PWM_Start+0x1a8>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a22      	ldr	r2, [pc, #136]	; (8006258 <HAL_TIM_PWM_Start+0x210>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00e      	beq.n	80061f0 <HAL_TIM_PWM_Start+0x1a8>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a1a      	ldr	r2, [pc, #104]	; (8006240 <HAL_TIM_PWM_Start+0x1f8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d009      	beq.n	80061f0 <HAL_TIM_PWM_Start+0x1a8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1e      	ldr	r2, [pc, #120]	; (800625c <HAL_TIM_PWM_Start+0x214>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d004      	beq.n	80061f0 <HAL_TIM_PWM_Start+0x1a8>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a16      	ldr	r2, [pc, #88]	; (8006244 <HAL_TIM_PWM_Start+0x1fc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d115      	bne.n	800621c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <HAL_TIM_PWM_Start+0x218>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b06      	cmp	r3, #6
 8006200:	d015      	beq.n	800622e <HAL_TIM_PWM_Start+0x1e6>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006208:	d011      	beq.n	800622e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0201 	orr.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800621a:	e008      	b.n	800622e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	e000      	b.n	8006230 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40010000 	.word	0x40010000
 8006240:	40010400 	.word	0x40010400
 8006244:	40014000 	.word	0x40014000
 8006248:	40014400 	.word	0x40014400
 800624c:	40014800 	.word	0x40014800
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40001800 	.word	0x40001800
 8006260:	00010007 	.word	0x00010007

08006264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b02      	cmp	r3, #2
 8006278:	d122      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b02      	cmp	r3, #2
 8006286:	d11b      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0202 	mvn.w	r2, #2
 8006290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fb12 	bl	80068d0 <HAL_TIM_IC_CaptureCallback>
 80062ac:	e005      	b.n	80062ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fb04 	bl	80068bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fb15 	bl	80068e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d122      	bne.n	8006314 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d11b      	bne.n	8006314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0204 	mvn.w	r2, #4
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fae8 	bl	80068d0 <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fada 	bl	80068bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 faeb 	bl	80068e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b08      	cmp	r3, #8
 8006320:	d122      	bne.n	8006368 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b08      	cmp	r3, #8
 800632e:	d11b      	bne.n	8006368 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0208 	mvn.w	r2, #8
 8006338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2204      	movs	r2, #4
 800633e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fabe 	bl	80068d0 <HAL_TIM_IC_CaptureCallback>
 8006354:	e005      	b.n	8006362 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fab0 	bl	80068bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fac1 	bl	80068e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b10      	cmp	r3, #16
 8006374:	d122      	bne.n	80063bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	2b10      	cmp	r3, #16
 8006382:	d11b      	bne.n	80063bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0210 	mvn.w	r2, #16
 800638c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2208      	movs	r2, #8
 8006392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa94 	bl	80068d0 <HAL_TIM_IC_CaptureCallback>
 80063a8:	e005      	b.n	80063b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa86 	bl	80068bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fa97 	bl	80068e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d10e      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d107      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f06f 0201 	mvn.w	r2, #1
 80063e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fa ffbc 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f2:	2b80      	cmp	r3, #128	; 0x80
 80063f4:	d10e      	bne.n	8006414 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006400:	2b80      	cmp	r3, #128	; 0x80
 8006402:	d107      	bne.n	8006414 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800640c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 ffc6 	bl	80073a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006422:	d10e      	bne.n	8006442 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642e:	2b80      	cmp	r3, #128	; 0x80
 8006430:	d107      	bne.n	8006442 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800643a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 ffb9 	bl	80073b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644c:	2b40      	cmp	r3, #64	; 0x40
 800644e:	d10e      	bne.n	800646e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645a:	2b40      	cmp	r3, #64	; 0x40
 800645c:	d107      	bne.n	800646e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fa45 	bl	80068f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b20      	cmp	r3, #32
 800647a:	d10e      	bne.n	800649a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b20      	cmp	r3, #32
 8006488:	d107      	bne.n	800649a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f06f 0220 	mvn.w	r2, #32
 8006492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 ff79 	bl	800738c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064be:	2302      	movs	r3, #2
 80064c0:	e0ff      	b.n	80066c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b14      	cmp	r3, #20
 80064ce:	f200 80f0 	bhi.w	80066b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064d2:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	0800652d 	.word	0x0800652d
 80064dc:	080066b3 	.word	0x080066b3
 80064e0:	080066b3 	.word	0x080066b3
 80064e4:	080066b3 	.word	0x080066b3
 80064e8:	0800656d 	.word	0x0800656d
 80064ec:	080066b3 	.word	0x080066b3
 80064f0:	080066b3 	.word	0x080066b3
 80064f4:	080066b3 	.word	0x080066b3
 80064f8:	080065af 	.word	0x080065af
 80064fc:	080066b3 	.word	0x080066b3
 8006500:	080066b3 	.word	0x080066b3
 8006504:	080066b3 	.word	0x080066b3
 8006508:	080065ef 	.word	0x080065ef
 800650c:	080066b3 	.word	0x080066b3
 8006510:	080066b3 	.word	0x080066b3
 8006514:	080066b3 	.word	0x080066b3
 8006518:	08006631 	.word	0x08006631
 800651c:	080066b3 	.word	0x080066b3
 8006520:	080066b3 	.word	0x080066b3
 8006524:	080066b3 	.word	0x080066b3
 8006528:	08006671 	.word	0x08006671
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68b9      	ldr	r1, [r7, #8]
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fa84 	bl	8006a40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0208 	orr.w	r2, r2, #8
 8006546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0204 	bic.w	r2, r2, #4
 8006556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6999      	ldr	r1, [r3, #24]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	619a      	str	r2, [r3, #24]
      break;
 800656a:	e0a5      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	4618      	mov	r0, r3
 8006574:	f000 faf4 	bl	8006b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699a      	ldr	r2, [r3, #24]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6999      	ldr	r1, [r3, #24]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	021a      	lsls	r2, r3, #8
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	619a      	str	r2, [r3, #24]
      break;
 80065ac:	e084      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fb5d 	bl	8006c74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f042 0208 	orr.w	r2, r2, #8
 80065c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0204 	bic.w	r2, r2, #4
 80065d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69d9      	ldr	r1, [r3, #28]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	61da      	str	r2, [r3, #28]
      break;
 80065ec:	e064      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fbc5 	bl	8006d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69da      	ldr	r2, [r3, #28]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69da      	ldr	r2, [r3, #28]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69d9      	ldr	r1, [r3, #28]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	021a      	lsls	r2, r3, #8
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	61da      	str	r2, [r3, #28]
      break;
 800662e:	e043      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fc0e 	bl	8006e58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0208 	orr.w	r2, r2, #8
 800664a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0204 	bic.w	r2, r2, #4
 800665a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800666e:	e023      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fc52 	bl	8006f20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800668a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800669a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	021a      	lsls	r2, r3, #8
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066b0:	e002      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
      break;
 80066b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop

080066cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <HAL_TIM_ConfigClockSource+0x1c>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e0dc      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x1d6>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	4b6a      	ldr	r3, [pc, #424]	; (80068ac <HAL_TIM_ConfigClockSource+0x1e0>)
 8006704:	4013      	ands	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800670e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a64      	ldr	r2, [pc, #400]	; (80068b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	f000 80a9 	beq.w	8006876 <HAL_TIM_ConfigClockSource+0x1aa>
 8006724:	4a62      	ldr	r2, [pc, #392]	; (80068b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006726:	4293      	cmp	r3, r2
 8006728:	f200 80ae 	bhi.w	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 800672c:	4a61      	ldr	r2, [pc, #388]	; (80068b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	f000 80a1 	beq.w	8006876 <HAL_TIM_ConfigClockSource+0x1aa>
 8006734:	4a5f      	ldr	r2, [pc, #380]	; (80068b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	f200 80a6 	bhi.w	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 800673c:	4a5e      	ldr	r2, [pc, #376]	; (80068b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800673e:	4293      	cmp	r3, r2
 8006740:	f000 8099 	beq.w	8006876 <HAL_TIM_ConfigClockSource+0x1aa>
 8006744:	4a5c      	ldr	r2, [pc, #368]	; (80068b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006746:	4293      	cmp	r3, r2
 8006748:	f200 809e 	bhi.w	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 800674c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006750:	f000 8091 	beq.w	8006876 <HAL_TIM_ConfigClockSource+0x1aa>
 8006754:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006758:	f200 8096 	bhi.w	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 800675c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006760:	f000 8089 	beq.w	8006876 <HAL_TIM_ConfigClockSource+0x1aa>
 8006764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006768:	f200 808e 	bhi.w	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 800676c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006770:	d03e      	beq.n	80067f0 <HAL_TIM_ConfigClockSource+0x124>
 8006772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006776:	f200 8087 	bhi.w	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 800677a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677e:	f000 8086 	beq.w	800688e <HAL_TIM_ConfigClockSource+0x1c2>
 8006782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006786:	d87f      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 8006788:	2b70      	cmp	r3, #112	; 0x70
 800678a:	d01a      	beq.n	80067c2 <HAL_TIM_ConfigClockSource+0xf6>
 800678c:	2b70      	cmp	r3, #112	; 0x70
 800678e:	d87b      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 8006790:	2b60      	cmp	r3, #96	; 0x60
 8006792:	d050      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0x16a>
 8006794:	2b60      	cmp	r3, #96	; 0x60
 8006796:	d877      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 8006798:	2b50      	cmp	r3, #80	; 0x50
 800679a:	d03c      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x14a>
 800679c:	2b50      	cmp	r3, #80	; 0x50
 800679e:	d873      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 80067a0:	2b40      	cmp	r3, #64	; 0x40
 80067a2:	d058      	beq.n	8006856 <HAL_TIM_ConfigClockSource+0x18a>
 80067a4:	2b40      	cmp	r3, #64	; 0x40
 80067a6:	d86f      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 80067a8:	2b30      	cmp	r3, #48	; 0x30
 80067aa:	d064      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0x1aa>
 80067ac:	2b30      	cmp	r3, #48	; 0x30
 80067ae:	d86b      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	d060      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0x1aa>
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d867      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d05c      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0x1aa>
 80067bc:	2b10      	cmp	r3, #16
 80067be:	d05a      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0x1aa>
 80067c0:	e062      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	6899      	ldr	r1, [r3, #8]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f000 fc89 	bl	80070e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	609a      	str	r2, [r3, #8]
      break;
 80067ee:	e04f      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	6899      	ldr	r1, [r3, #8]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f000 fc72 	bl	80070e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006812:	609a      	str	r2, [r3, #8]
      break;
 8006814:	e03c      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6859      	ldr	r1, [r3, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	461a      	mov	r2, r3
 8006824:	f000 fbe2 	bl	8006fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2150      	movs	r1, #80	; 0x50
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fc3c 	bl	80070ac <TIM_ITRx_SetConfig>
      break;
 8006834:	e02c      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6859      	ldr	r1, [r3, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	461a      	mov	r2, r3
 8006844:	f000 fc01 	bl	800704a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2160      	movs	r1, #96	; 0x60
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fc2c 	bl	80070ac <TIM_ITRx_SetConfig>
      break;
 8006854:	e01c      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6818      	ldr	r0, [r3, #0]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	6859      	ldr	r1, [r3, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	461a      	mov	r2, r3
 8006864:	f000 fbc2 	bl	8006fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2140      	movs	r1, #64	; 0x40
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fc1c 	bl	80070ac <TIM_ITRx_SetConfig>
      break;
 8006874:	e00c      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4619      	mov	r1, r3
 8006880:	4610      	mov	r0, r2
 8006882:	f000 fc13 	bl	80070ac <TIM_ITRx_SetConfig>
      break;
 8006886:	e003      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]
      break;
 800688c:	e000      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800688e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	ffceff88 	.word	0xffceff88
 80068b0:	00100040 	.word	0x00100040
 80068b4:	00100030 	.word	0x00100030
 80068b8:	00100020 	.word	0x00100020

080068bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a40      	ldr	r2, [pc, #256]	; (8006a20 <TIM_Base_SetConfig+0x114>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d013      	beq.n	800694c <TIM_Base_SetConfig+0x40>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692a:	d00f      	beq.n	800694c <TIM_Base_SetConfig+0x40>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a3d      	ldr	r2, [pc, #244]	; (8006a24 <TIM_Base_SetConfig+0x118>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00b      	beq.n	800694c <TIM_Base_SetConfig+0x40>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a3c      	ldr	r2, [pc, #240]	; (8006a28 <TIM_Base_SetConfig+0x11c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d007      	beq.n	800694c <TIM_Base_SetConfig+0x40>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a3b      	ldr	r2, [pc, #236]	; (8006a2c <TIM_Base_SetConfig+0x120>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_Base_SetConfig+0x40>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a3a      	ldr	r2, [pc, #232]	; (8006a30 <TIM_Base_SetConfig+0x124>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d108      	bne.n	800695e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2f      	ldr	r2, [pc, #188]	; (8006a20 <TIM_Base_SetConfig+0x114>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01f      	beq.n	80069a6 <TIM_Base_SetConfig+0x9a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696c:	d01b      	beq.n	80069a6 <TIM_Base_SetConfig+0x9a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2c      	ldr	r2, [pc, #176]	; (8006a24 <TIM_Base_SetConfig+0x118>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d017      	beq.n	80069a6 <TIM_Base_SetConfig+0x9a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a2b      	ldr	r2, [pc, #172]	; (8006a28 <TIM_Base_SetConfig+0x11c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <TIM_Base_SetConfig+0x9a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a2a      	ldr	r2, [pc, #168]	; (8006a2c <TIM_Base_SetConfig+0x120>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00f      	beq.n	80069a6 <TIM_Base_SetConfig+0x9a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a29      	ldr	r2, [pc, #164]	; (8006a30 <TIM_Base_SetConfig+0x124>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00b      	beq.n	80069a6 <TIM_Base_SetConfig+0x9a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a28      	ldr	r2, [pc, #160]	; (8006a34 <TIM_Base_SetConfig+0x128>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d007      	beq.n	80069a6 <TIM_Base_SetConfig+0x9a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a27      	ldr	r2, [pc, #156]	; (8006a38 <TIM_Base_SetConfig+0x12c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d003      	beq.n	80069a6 <TIM_Base_SetConfig+0x9a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a26      	ldr	r2, [pc, #152]	; (8006a3c <TIM_Base_SetConfig+0x130>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d108      	bne.n	80069b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a10      	ldr	r2, [pc, #64]	; (8006a20 <TIM_Base_SetConfig+0x114>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00f      	beq.n	8006a04 <TIM_Base_SetConfig+0xf8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a12      	ldr	r2, [pc, #72]	; (8006a30 <TIM_Base_SetConfig+0x124>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_Base_SetConfig+0xf8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a11      	ldr	r2, [pc, #68]	; (8006a34 <TIM_Base_SetConfig+0x128>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_Base_SetConfig+0xf8>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a10      	ldr	r2, [pc, #64]	; (8006a38 <TIM_Base_SetConfig+0x12c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_Base_SetConfig+0xf8>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a0f      	ldr	r2, [pc, #60]	; (8006a3c <TIM_Base_SetConfig+0x130>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d103      	bne.n	8006a0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	691a      	ldr	r2, [r3, #16]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	615a      	str	r2, [r3, #20]
}
 8006a12:	bf00      	nop
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40010000 	.word	0x40010000
 8006a24:	40000400 	.word	0x40000400
 8006a28:	40000800 	.word	0x40000800
 8006a2c:	40000c00 	.word	0x40000c00
 8006a30:	40010400 	.word	0x40010400
 8006a34:	40014000 	.word	0x40014000
 8006a38:	40014400 	.word	0x40014400
 8006a3c:	40014800 	.word	0x40014800

08006a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	f023 0201 	bic.w	r2, r3, #1
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4b37      	ldr	r3, [pc, #220]	; (8006b48 <TIM_OC1_SetConfig+0x108>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f023 0302 	bic.w	r3, r3, #2
 8006a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a2d      	ldr	r2, [pc, #180]	; (8006b4c <TIM_OC1_SetConfig+0x10c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00f      	beq.n	8006abc <TIM_OC1_SetConfig+0x7c>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a2c      	ldr	r2, [pc, #176]	; (8006b50 <TIM_OC1_SetConfig+0x110>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00b      	beq.n	8006abc <TIM_OC1_SetConfig+0x7c>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a2b      	ldr	r2, [pc, #172]	; (8006b54 <TIM_OC1_SetConfig+0x114>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d007      	beq.n	8006abc <TIM_OC1_SetConfig+0x7c>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a2a      	ldr	r2, [pc, #168]	; (8006b58 <TIM_OC1_SetConfig+0x118>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_OC1_SetConfig+0x7c>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a29      	ldr	r2, [pc, #164]	; (8006b5c <TIM_OC1_SetConfig+0x11c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d10c      	bne.n	8006ad6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f023 0308 	bic.w	r3, r3, #8
 8006ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f023 0304 	bic.w	r3, r3, #4
 8006ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a1c      	ldr	r2, [pc, #112]	; (8006b4c <TIM_OC1_SetConfig+0x10c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00f      	beq.n	8006afe <TIM_OC1_SetConfig+0xbe>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a1b      	ldr	r2, [pc, #108]	; (8006b50 <TIM_OC1_SetConfig+0x110>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00b      	beq.n	8006afe <TIM_OC1_SetConfig+0xbe>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a1a      	ldr	r2, [pc, #104]	; (8006b54 <TIM_OC1_SetConfig+0x114>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d007      	beq.n	8006afe <TIM_OC1_SetConfig+0xbe>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a19      	ldr	r2, [pc, #100]	; (8006b58 <TIM_OC1_SetConfig+0x118>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_OC1_SetConfig+0xbe>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <TIM_OC1_SetConfig+0x11c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d111      	bne.n	8006b22 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	621a      	str	r2, [r3, #32]
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	fffeff8f 	.word	0xfffeff8f
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40010400 	.word	0x40010400
 8006b54:	40014000 	.word	0x40014000
 8006b58:	40014400 	.word	0x40014400
 8006b5c:	40014800 	.word	0x40014800

08006b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f023 0210 	bic.w	r2, r3, #16
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4b34      	ldr	r3, [pc, #208]	; (8006c5c <TIM_OC2_SetConfig+0xfc>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	021b      	lsls	r3, r3, #8
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f023 0320 	bic.w	r3, r3, #32
 8006baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a29      	ldr	r2, [pc, #164]	; (8006c60 <TIM_OC2_SetConfig+0x100>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d003      	beq.n	8006bc8 <TIM_OC2_SetConfig+0x68>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a28      	ldr	r2, [pc, #160]	; (8006c64 <TIM_OC2_SetConfig+0x104>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d10d      	bne.n	8006be4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006be2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a1e      	ldr	r2, [pc, #120]	; (8006c60 <TIM_OC2_SetConfig+0x100>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00f      	beq.n	8006c0c <TIM_OC2_SetConfig+0xac>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a1d      	ldr	r2, [pc, #116]	; (8006c64 <TIM_OC2_SetConfig+0x104>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00b      	beq.n	8006c0c <TIM_OC2_SetConfig+0xac>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a1c      	ldr	r2, [pc, #112]	; (8006c68 <TIM_OC2_SetConfig+0x108>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d007      	beq.n	8006c0c <TIM_OC2_SetConfig+0xac>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a1b      	ldr	r2, [pc, #108]	; (8006c6c <TIM_OC2_SetConfig+0x10c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d003      	beq.n	8006c0c <TIM_OC2_SetConfig+0xac>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a1a      	ldr	r2, [pc, #104]	; (8006c70 <TIM_OC2_SetConfig+0x110>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d113      	bne.n	8006c34 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	621a      	str	r2, [r3, #32]
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	feff8fff 	.word	0xfeff8fff
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40010400 	.word	0x40010400
 8006c68:	40014000 	.word	0x40014000
 8006c6c:	40014400 	.word	0x40014400
 8006c70:	40014800 	.word	0x40014800

08006c74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4b33      	ldr	r3, [pc, #204]	; (8006d6c <TIM_OC3_SetConfig+0xf8>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0303 	bic.w	r3, r3, #3
 8006caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a28      	ldr	r2, [pc, #160]	; (8006d70 <TIM_OC3_SetConfig+0xfc>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_OC3_SetConfig+0x66>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a27      	ldr	r2, [pc, #156]	; (8006d74 <TIM_OC3_SetConfig+0x100>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d10d      	bne.n	8006cf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	021b      	lsls	r3, r3, #8
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a1d      	ldr	r2, [pc, #116]	; (8006d70 <TIM_OC3_SetConfig+0xfc>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00f      	beq.n	8006d1e <TIM_OC3_SetConfig+0xaa>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a1c      	ldr	r2, [pc, #112]	; (8006d74 <TIM_OC3_SetConfig+0x100>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00b      	beq.n	8006d1e <TIM_OC3_SetConfig+0xaa>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a1b      	ldr	r2, [pc, #108]	; (8006d78 <TIM_OC3_SetConfig+0x104>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d007      	beq.n	8006d1e <TIM_OC3_SetConfig+0xaa>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a1a      	ldr	r2, [pc, #104]	; (8006d7c <TIM_OC3_SetConfig+0x108>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d003      	beq.n	8006d1e <TIM_OC3_SetConfig+0xaa>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a19      	ldr	r2, [pc, #100]	; (8006d80 <TIM_OC3_SetConfig+0x10c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d113      	bne.n	8006d46 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	621a      	str	r2, [r3, #32]
}
 8006d60:	bf00      	nop
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	fffeff8f 	.word	0xfffeff8f
 8006d70:	40010000 	.word	0x40010000
 8006d74:	40010400 	.word	0x40010400
 8006d78:	40014000 	.word	0x40014000
 8006d7c:	40014400 	.word	0x40014400
 8006d80:	40014800 	.word	0x40014800

08006d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <TIM_OC4_SetConfig+0xbc>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	031b      	lsls	r3, r3, #12
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a19      	ldr	r2, [pc, #100]	; (8006e44 <TIM_OC4_SetConfig+0xc0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00f      	beq.n	8006e04 <TIM_OC4_SetConfig+0x80>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a18      	ldr	r2, [pc, #96]	; (8006e48 <TIM_OC4_SetConfig+0xc4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00b      	beq.n	8006e04 <TIM_OC4_SetConfig+0x80>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a17      	ldr	r2, [pc, #92]	; (8006e4c <TIM_OC4_SetConfig+0xc8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d007      	beq.n	8006e04 <TIM_OC4_SetConfig+0x80>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a16      	ldr	r2, [pc, #88]	; (8006e50 <TIM_OC4_SetConfig+0xcc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC4_SetConfig+0x80>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a15      	ldr	r2, [pc, #84]	; (8006e54 <TIM_OC4_SetConfig+0xd0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d109      	bne.n	8006e18 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	019b      	lsls	r3, r3, #6
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	feff8fff 	.word	0xfeff8fff
 8006e44:	40010000 	.word	0x40010000
 8006e48:	40010400 	.word	0x40010400
 8006e4c:	40014000 	.word	0x40014000
 8006e50:	40014400 	.word	0x40014400
 8006e54:	40014800 	.word	0x40014800

08006e58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4b21      	ldr	r3, [pc, #132]	; (8006f08 <TIM_OC5_SetConfig+0xb0>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	041b      	lsls	r3, r3, #16
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a18      	ldr	r2, [pc, #96]	; (8006f0c <TIM_OC5_SetConfig+0xb4>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d00f      	beq.n	8006ece <TIM_OC5_SetConfig+0x76>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a17      	ldr	r2, [pc, #92]	; (8006f10 <TIM_OC5_SetConfig+0xb8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00b      	beq.n	8006ece <TIM_OC5_SetConfig+0x76>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a16      	ldr	r2, [pc, #88]	; (8006f14 <TIM_OC5_SetConfig+0xbc>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d007      	beq.n	8006ece <TIM_OC5_SetConfig+0x76>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a15      	ldr	r2, [pc, #84]	; (8006f18 <TIM_OC5_SetConfig+0xc0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d003      	beq.n	8006ece <TIM_OC5_SetConfig+0x76>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a14      	ldr	r2, [pc, #80]	; (8006f1c <TIM_OC5_SetConfig+0xc4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d109      	bne.n	8006ee2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	021b      	lsls	r3, r3, #8
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	621a      	str	r2, [r3, #32]
}
 8006efc:	bf00      	nop
 8006efe:	371c      	adds	r7, #28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	fffeff8f 	.word	0xfffeff8f
 8006f0c:	40010000 	.word	0x40010000
 8006f10:	40010400 	.word	0x40010400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014400 	.word	0x40014400
 8006f1c:	40014800 	.word	0x40014800

08006f20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4b22      	ldr	r3, [pc, #136]	; (8006fd4 <TIM_OC6_SetConfig+0xb4>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	051b      	lsls	r3, r3, #20
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a19      	ldr	r2, [pc, #100]	; (8006fd8 <TIM_OC6_SetConfig+0xb8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00f      	beq.n	8006f98 <TIM_OC6_SetConfig+0x78>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a18      	ldr	r2, [pc, #96]	; (8006fdc <TIM_OC6_SetConfig+0xbc>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00b      	beq.n	8006f98 <TIM_OC6_SetConfig+0x78>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a17      	ldr	r2, [pc, #92]	; (8006fe0 <TIM_OC6_SetConfig+0xc0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d007      	beq.n	8006f98 <TIM_OC6_SetConfig+0x78>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a16      	ldr	r2, [pc, #88]	; (8006fe4 <TIM_OC6_SetConfig+0xc4>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d003      	beq.n	8006f98 <TIM_OC6_SetConfig+0x78>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a15      	ldr	r2, [pc, #84]	; (8006fe8 <TIM_OC6_SetConfig+0xc8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d109      	bne.n	8006fac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	029b      	lsls	r3, r3, #10
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	feff8fff 	.word	0xfeff8fff
 8006fd8:	40010000 	.word	0x40010000
 8006fdc:	40010400 	.word	0x40010400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800

08006fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	f023 0201 	bic.w	r2, r3, #1
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f023 030a 	bic.w	r3, r3, #10
 8007028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	621a      	str	r2, [r3, #32]
}
 800703e:	bf00      	nop
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800704a:	b480      	push	{r7}
 800704c:	b087      	sub	sp, #28
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f023 0210 	bic.w	r2, r3, #16
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	031b      	lsls	r3, r3, #12
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <TIM_ITRx_SetConfig+0x38>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f043 0307 	orr.w	r3, r3, #7
 80070ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	609a      	str	r2, [r3, #8]
}
 80070d6:	bf00      	nop
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	ffcfff8f 	.word	0xffcfff8f

080070e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007102:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	021a      	lsls	r2, r3, #8
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	431a      	orrs	r2, r3
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4313      	orrs	r3, r2
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	609a      	str	r2, [r3, #8]
}
 800711c:	bf00      	nop
 800711e:	371c      	adds	r7, #28
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f003 031f 	and.w	r3, r3, #31
 800713a:	2201      	movs	r2, #1
 800713c:	fa02 f303 	lsl.w	r3, r2, r3
 8007140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a1a      	ldr	r2, [r3, #32]
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	43db      	mvns	r3, r3
 800714a:	401a      	ands	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a1a      	ldr	r2, [r3, #32]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f003 031f 	and.w	r3, r3, #31
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	fa01 f303 	lsl.w	r3, r1, r3
 8007160:	431a      	orrs	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
	...

08007174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007184:	2b01      	cmp	r3, #1
 8007186:	d101      	bne.n	800718c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007188:	2302      	movs	r3, #2
 800718a:	e06d      	b.n	8007268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a30      	ldr	r2, [pc, #192]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d004      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a2f      	ldr	r2, [pc, #188]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d108      	bne.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a20      	ldr	r2, [pc, #128]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d022      	beq.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071fe:	d01d      	beq.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1d      	ldr	r2, [pc, #116]	; (800727c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d018      	beq.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1c      	ldr	r2, [pc, #112]	; (8007280 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d013      	beq.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1a      	ldr	r2, [pc, #104]	; (8007284 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d00e      	beq.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a15      	ldr	r2, [pc, #84]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d009      	beq.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a16      	ldr	r2, [pc, #88]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d004      	beq.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a15      	ldr	r2, [pc, #84]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d10c      	bne.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	4313      	orrs	r3, r2
 800724c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	40010000 	.word	0x40010000
 8007278:	40010400 	.word	0x40010400
 800727c:	40000400 	.word	0x40000400
 8007280:	40000800 	.word	0x40000800
 8007284:	40000c00 	.word	0x40000c00
 8007288:	40001800 	.word	0x40001800
 800728c:	40014000 	.word	0x40014000

08007290 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e065      	b.n	8007378 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	4313      	orrs	r3, r2
 80072dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	041b      	lsls	r3, r3, #16
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a16      	ldr	r2, [pc, #88]	; (8007384 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a14      	ldr	r2, [pc, #80]	; (8007388 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d115      	bne.n	8007366 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	051b      	lsls	r3, r3, #20
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	4313      	orrs	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	40010000 	.word	0x40010000
 8007388:	40010400 	.word	0x40010400

0800738c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e042      	b.n	8007460 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d106      	bne.n	80073f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7fa fa17 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2224      	movs	r2, #36	; 0x24
 80073f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0201 	bic.w	r2, r2, #1
 8007408:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f8c2 	bl	8007594 <UART_SetConfig>
 8007410:	4603      	mov	r3, r0
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e022      	b.n	8007460 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fe1e 	bl	8008064 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fea5 	bl	80081a8 <UART_CheckIdleState>
 800745e:	4603      	mov	r3, r0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	; 0x28
 800746c:	af02      	add	r7, sp, #8
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	4613      	mov	r3, r2
 8007476:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800747e:	2b20      	cmp	r3, #32
 8007480:	f040 8083 	bne.w	800758a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <HAL_UART_Transmit+0x28>
 800748a:	88fb      	ldrh	r3, [r7, #6]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e07b      	b.n	800758c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800749a:	2b01      	cmp	r3, #1
 800749c:	d101      	bne.n	80074a2 <HAL_UART_Transmit+0x3a>
 800749e:	2302      	movs	r3, #2
 80074a0:	e074      	b.n	800758c <HAL_UART_Transmit+0x124>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2221      	movs	r2, #33	; 0x21
 80074b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ba:	f7fa fbfb 	bl	8001cb4 <HAL_GetTick>
 80074be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	88fa      	ldrh	r2, [r7, #6]
 80074c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d8:	d108      	bne.n	80074ec <HAL_UART_Transmit+0x84>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	e003      	b.n	80074f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80074fc:	e02c      	b.n	8007558 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2200      	movs	r2, #0
 8007506:	2180      	movs	r1, #128	; 0x80
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 fe98 	bl	800823e <UART_WaitOnFlagUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e039      	b.n	800758c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10b      	bne.n	8007536 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800752c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	3302      	adds	r3, #2
 8007532:	61bb      	str	r3, [r7, #24]
 8007534:	e007      	b.n	8007546 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	3301      	adds	r3, #1
 8007544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800754c:	b29b      	uxth	r3, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1cc      	bne.n	80074fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2200      	movs	r2, #0
 800756c:	2140      	movs	r1, #64	; 0x40
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 fe65 	bl	800823e <UART_WaitOnFlagUntilTimeout>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e006      	b.n	800758c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2220      	movs	r2, #32
 8007582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e000      	b.n	800758c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800758a:	2302      	movs	r3, #2
  }
}
 800758c:	4618      	mov	r0, r3
 800758e:	3720      	adds	r7, #32
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007598:	b092      	sub	sp, #72	; 0x48
 800759a:	af00      	add	r7, sp, #0
 800759c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	431a      	orrs	r2, r3
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	4bbe      	ldr	r3, [pc, #760]	; (80078bc <UART_SetConfig+0x328>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4ab3      	ldr	r2, [pc, #716]	; (80078c0 <UART_SetConfig+0x32c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d004      	beq.n	8007600 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075fc:	4313      	orrs	r3, r2
 80075fe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	4baf      	ldr	r3, [pc, #700]	; (80078c4 <UART_SetConfig+0x330>)
 8007608:	4013      	ands	r3, r2
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	6812      	ldr	r2, [r2, #0]
 800760e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007610:	430b      	orrs	r3, r1
 8007612:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761a:	f023 010f 	bic.w	r1, r3, #15
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4aa6      	ldr	r2, [pc, #664]	; (80078c8 <UART_SetConfig+0x334>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d177      	bne.n	8007724 <UART_SetConfig+0x190>
 8007634:	4ba5      	ldr	r3, [pc, #660]	; (80078cc <UART_SetConfig+0x338>)
 8007636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007638:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800763c:	2b28      	cmp	r3, #40	; 0x28
 800763e:	d86d      	bhi.n	800771c <UART_SetConfig+0x188>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <UART_SetConfig+0xb4>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	080076ed 	.word	0x080076ed
 800764c:	0800771d 	.word	0x0800771d
 8007650:	0800771d 	.word	0x0800771d
 8007654:	0800771d 	.word	0x0800771d
 8007658:	0800771d 	.word	0x0800771d
 800765c:	0800771d 	.word	0x0800771d
 8007660:	0800771d 	.word	0x0800771d
 8007664:	0800771d 	.word	0x0800771d
 8007668:	080076f5 	.word	0x080076f5
 800766c:	0800771d 	.word	0x0800771d
 8007670:	0800771d 	.word	0x0800771d
 8007674:	0800771d 	.word	0x0800771d
 8007678:	0800771d 	.word	0x0800771d
 800767c:	0800771d 	.word	0x0800771d
 8007680:	0800771d 	.word	0x0800771d
 8007684:	0800771d 	.word	0x0800771d
 8007688:	080076fd 	.word	0x080076fd
 800768c:	0800771d 	.word	0x0800771d
 8007690:	0800771d 	.word	0x0800771d
 8007694:	0800771d 	.word	0x0800771d
 8007698:	0800771d 	.word	0x0800771d
 800769c:	0800771d 	.word	0x0800771d
 80076a0:	0800771d 	.word	0x0800771d
 80076a4:	0800771d 	.word	0x0800771d
 80076a8:	08007705 	.word	0x08007705
 80076ac:	0800771d 	.word	0x0800771d
 80076b0:	0800771d 	.word	0x0800771d
 80076b4:	0800771d 	.word	0x0800771d
 80076b8:	0800771d 	.word	0x0800771d
 80076bc:	0800771d 	.word	0x0800771d
 80076c0:	0800771d 	.word	0x0800771d
 80076c4:	0800771d 	.word	0x0800771d
 80076c8:	0800770d 	.word	0x0800770d
 80076cc:	0800771d 	.word	0x0800771d
 80076d0:	0800771d 	.word	0x0800771d
 80076d4:	0800771d 	.word	0x0800771d
 80076d8:	0800771d 	.word	0x0800771d
 80076dc:	0800771d 	.word	0x0800771d
 80076e0:	0800771d 	.word	0x0800771d
 80076e4:	0800771d 	.word	0x0800771d
 80076e8:	08007715 	.word	0x08007715
 80076ec:	2301      	movs	r3, #1
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f2:	e222      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80076f4:	2304      	movs	r3, #4
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fa:	e21e      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80076fc:	2308      	movs	r3, #8
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007702:	e21a      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007704:	2310      	movs	r3, #16
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770a:	e216      	b.n	8007b3a <UART_SetConfig+0x5a6>
 800770c:	2320      	movs	r3, #32
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007712:	e212      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007714:	2340      	movs	r3, #64	; 0x40
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771a:	e20e      	b.n	8007b3a <UART_SetConfig+0x5a6>
 800771c:	2380      	movs	r3, #128	; 0x80
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007722:	e20a      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a69      	ldr	r2, [pc, #420]	; (80078d0 <UART_SetConfig+0x33c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d130      	bne.n	8007790 <UART_SetConfig+0x1fc>
 800772e:	4b67      	ldr	r3, [pc, #412]	; (80078cc <UART_SetConfig+0x338>)
 8007730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	2b05      	cmp	r3, #5
 8007738:	d826      	bhi.n	8007788 <UART_SetConfig+0x1f4>
 800773a:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <UART_SetConfig+0x1ac>)
 800773c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007740:	08007759 	.word	0x08007759
 8007744:	08007761 	.word	0x08007761
 8007748:	08007769 	.word	0x08007769
 800774c:	08007771 	.word	0x08007771
 8007750:	08007779 	.word	0x08007779
 8007754:	08007781 	.word	0x08007781
 8007758:	2300      	movs	r3, #0
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775e:	e1ec      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007760:	2304      	movs	r3, #4
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007766:	e1e8      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007768:	2308      	movs	r3, #8
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776e:	e1e4      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007770:	2310      	movs	r3, #16
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007776:	e1e0      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007778:	2320      	movs	r3, #32
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777e:	e1dc      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007780:	2340      	movs	r3, #64	; 0x40
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007786:	e1d8      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007788:	2380      	movs	r3, #128	; 0x80
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778e:	e1d4      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a4f      	ldr	r2, [pc, #316]	; (80078d4 <UART_SetConfig+0x340>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d130      	bne.n	80077fc <UART_SetConfig+0x268>
 800779a:	4b4c      	ldr	r3, [pc, #304]	; (80078cc <UART_SetConfig+0x338>)
 800779c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	2b05      	cmp	r3, #5
 80077a4:	d826      	bhi.n	80077f4 <UART_SetConfig+0x260>
 80077a6:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <UART_SetConfig+0x218>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	080077c5 	.word	0x080077c5
 80077b0:	080077cd 	.word	0x080077cd
 80077b4:	080077d5 	.word	0x080077d5
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	080077e5 	.word	0x080077e5
 80077c0:	080077ed 	.word	0x080077ed
 80077c4:	2300      	movs	r3, #0
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ca:	e1b6      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80077cc:	2304      	movs	r3, #4
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d2:	e1b2      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80077d4:	2308      	movs	r3, #8
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077da:	e1ae      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80077dc:	2310      	movs	r3, #16
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e1aa      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80077e4:	2320      	movs	r3, #32
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ea:	e1a6      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f2:	e1a2      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80077f4:	2380      	movs	r3, #128	; 0x80
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fa:	e19e      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a35      	ldr	r2, [pc, #212]	; (80078d8 <UART_SetConfig+0x344>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d130      	bne.n	8007868 <UART_SetConfig+0x2d4>
 8007806:	4b31      	ldr	r3, [pc, #196]	; (80078cc <UART_SetConfig+0x338>)
 8007808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780a:	f003 0307 	and.w	r3, r3, #7
 800780e:	2b05      	cmp	r3, #5
 8007810:	d826      	bhi.n	8007860 <UART_SetConfig+0x2cc>
 8007812:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <UART_SetConfig+0x284>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	08007831 	.word	0x08007831
 800781c:	08007839 	.word	0x08007839
 8007820:	08007841 	.word	0x08007841
 8007824:	08007849 	.word	0x08007849
 8007828:	08007851 	.word	0x08007851
 800782c:	08007859 	.word	0x08007859
 8007830:	2300      	movs	r3, #0
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007836:	e180      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007838:	2304      	movs	r3, #4
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783e:	e17c      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007840:	2308      	movs	r3, #8
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007846:	e178      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007848:	2310      	movs	r3, #16
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784e:	e174      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007850:	2320      	movs	r3, #32
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007856:	e170      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007858:	2340      	movs	r3, #64	; 0x40
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785e:	e16c      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007860:	2380      	movs	r3, #128	; 0x80
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007866:	e168      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a1b      	ldr	r2, [pc, #108]	; (80078dc <UART_SetConfig+0x348>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d142      	bne.n	80078f8 <UART_SetConfig+0x364>
 8007872:	4b16      	ldr	r3, [pc, #88]	; (80078cc <UART_SetConfig+0x338>)
 8007874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	2b05      	cmp	r3, #5
 800787c:	d838      	bhi.n	80078f0 <UART_SetConfig+0x35c>
 800787e:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <UART_SetConfig+0x2f0>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	0800789d 	.word	0x0800789d
 8007888:	080078a5 	.word	0x080078a5
 800788c:	080078ad 	.word	0x080078ad
 8007890:	080078b5 	.word	0x080078b5
 8007894:	080078e1 	.word	0x080078e1
 8007898:	080078e9 	.word	0x080078e9
 800789c:	2300      	movs	r3, #0
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a2:	e14a      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80078a4:	2304      	movs	r3, #4
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078aa:	e146      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80078ac:	2308      	movs	r3, #8
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b2:	e142      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80078b4:	2310      	movs	r3, #16
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ba:	e13e      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80078bc:	cfff69f3 	.word	0xcfff69f3
 80078c0:	58000c00 	.word	0x58000c00
 80078c4:	11fff4ff 	.word	0x11fff4ff
 80078c8:	40011000 	.word	0x40011000
 80078cc:	58024400 	.word	0x58024400
 80078d0:	40004400 	.word	0x40004400
 80078d4:	40004800 	.word	0x40004800
 80078d8:	40004c00 	.word	0x40004c00
 80078dc:	40005000 	.word	0x40005000
 80078e0:	2320      	movs	r3, #32
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e6:	e128      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80078e8:	2340      	movs	r3, #64	; 0x40
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ee:	e124      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80078f0:	2380      	movs	r3, #128	; 0x80
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f6:	e120      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4acb      	ldr	r2, [pc, #812]	; (8007c2c <UART_SetConfig+0x698>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d176      	bne.n	80079f0 <UART_SetConfig+0x45c>
 8007902:	4bcb      	ldr	r3, [pc, #812]	; (8007c30 <UART_SetConfig+0x69c>)
 8007904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800790a:	2b28      	cmp	r3, #40	; 0x28
 800790c:	d86c      	bhi.n	80079e8 <UART_SetConfig+0x454>
 800790e:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <UART_SetConfig+0x380>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	080079b9 	.word	0x080079b9
 8007918:	080079e9 	.word	0x080079e9
 800791c:	080079e9 	.word	0x080079e9
 8007920:	080079e9 	.word	0x080079e9
 8007924:	080079e9 	.word	0x080079e9
 8007928:	080079e9 	.word	0x080079e9
 800792c:	080079e9 	.word	0x080079e9
 8007930:	080079e9 	.word	0x080079e9
 8007934:	080079c1 	.word	0x080079c1
 8007938:	080079e9 	.word	0x080079e9
 800793c:	080079e9 	.word	0x080079e9
 8007940:	080079e9 	.word	0x080079e9
 8007944:	080079e9 	.word	0x080079e9
 8007948:	080079e9 	.word	0x080079e9
 800794c:	080079e9 	.word	0x080079e9
 8007950:	080079e9 	.word	0x080079e9
 8007954:	080079c9 	.word	0x080079c9
 8007958:	080079e9 	.word	0x080079e9
 800795c:	080079e9 	.word	0x080079e9
 8007960:	080079e9 	.word	0x080079e9
 8007964:	080079e9 	.word	0x080079e9
 8007968:	080079e9 	.word	0x080079e9
 800796c:	080079e9 	.word	0x080079e9
 8007970:	080079e9 	.word	0x080079e9
 8007974:	080079d1 	.word	0x080079d1
 8007978:	080079e9 	.word	0x080079e9
 800797c:	080079e9 	.word	0x080079e9
 8007980:	080079e9 	.word	0x080079e9
 8007984:	080079e9 	.word	0x080079e9
 8007988:	080079e9 	.word	0x080079e9
 800798c:	080079e9 	.word	0x080079e9
 8007990:	080079e9 	.word	0x080079e9
 8007994:	080079d9 	.word	0x080079d9
 8007998:	080079e9 	.word	0x080079e9
 800799c:	080079e9 	.word	0x080079e9
 80079a0:	080079e9 	.word	0x080079e9
 80079a4:	080079e9 	.word	0x080079e9
 80079a8:	080079e9 	.word	0x080079e9
 80079ac:	080079e9 	.word	0x080079e9
 80079b0:	080079e9 	.word	0x080079e9
 80079b4:	080079e1 	.word	0x080079e1
 80079b8:	2301      	movs	r3, #1
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079be:	e0bc      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80079c0:	2304      	movs	r3, #4
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c6:	e0b8      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80079c8:	2308      	movs	r3, #8
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ce:	e0b4      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80079d0:	2310      	movs	r3, #16
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d6:	e0b0      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80079d8:	2320      	movs	r3, #32
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079de:	e0ac      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80079e0:	2340      	movs	r3, #64	; 0x40
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e6:	e0a8      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80079e8:	2380      	movs	r3, #128	; 0x80
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ee:	e0a4      	b.n	8007b3a <UART_SetConfig+0x5a6>
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a8f      	ldr	r2, [pc, #572]	; (8007c34 <UART_SetConfig+0x6a0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d130      	bne.n	8007a5c <UART_SetConfig+0x4c8>
 80079fa:	4b8d      	ldr	r3, [pc, #564]	; (8007c30 <UART_SetConfig+0x69c>)
 80079fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	2b05      	cmp	r3, #5
 8007a04:	d826      	bhi.n	8007a54 <UART_SetConfig+0x4c0>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <UART_SetConfig+0x478>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a25 	.word	0x08007a25
 8007a10:	08007a2d 	.word	0x08007a2d
 8007a14:	08007a35 	.word	0x08007a35
 8007a18:	08007a3d 	.word	0x08007a3d
 8007a1c:	08007a45 	.word	0x08007a45
 8007a20:	08007a4d 	.word	0x08007a4d
 8007a24:	2300      	movs	r3, #0
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2a:	e086      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007a2c:	2304      	movs	r3, #4
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a32:	e082      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007a34:	2308      	movs	r3, #8
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3a:	e07e      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a42:	e07a      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007a44:	2320      	movs	r3, #32
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4a:	e076      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007a4c:	2340      	movs	r3, #64	; 0x40
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a52:	e072      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007a54:	2380      	movs	r3, #128	; 0x80
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5a:	e06e      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a75      	ldr	r2, [pc, #468]	; (8007c38 <UART_SetConfig+0x6a4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d130      	bne.n	8007ac8 <UART_SetConfig+0x534>
 8007a66:	4b72      	ldr	r3, [pc, #456]	; (8007c30 <UART_SetConfig+0x69c>)
 8007a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	2b05      	cmp	r3, #5
 8007a70:	d826      	bhi.n	8007ac0 <UART_SetConfig+0x52c>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <UART_SetConfig+0x4e4>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a91 	.word	0x08007a91
 8007a7c:	08007a99 	.word	0x08007a99
 8007a80:	08007aa1 	.word	0x08007aa1
 8007a84:	08007aa9 	.word	0x08007aa9
 8007a88:	08007ab1 	.word	0x08007ab1
 8007a8c:	08007ab9 	.word	0x08007ab9
 8007a90:	2300      	movs	r3, #0
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a96:	e050      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007a98:	2304      	movs	r3, #4
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9e:	e04c      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007aa0:	2308      	movs	r3, #8
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa6:	e048      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007aa8:	2310      	movs	r3, #16
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aae:	e044      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007ab0:	2320      	movs	r3, #32
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab6:	e040      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007ab8:	2340      	movs	r3, #64	; 0x40
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007abe:	e03c      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007ac0:	2380      	movs	r3, #128	; 0x80
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac6:	e038      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a5b      	ldr	r2, [pc, #364]	; (8007c3c <UART_SetConfig+0x6a8>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d130      	bne.n	8007b34 <UART_SetConfig+0x5a0>
 8007ad2:	4b57      	ldr	r3, [pc, #348]	; (8007c30 <UART_SetConfig+0x69c>)
 8007ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	2b05      	cmp	r3, #5
 8007adc:	d826      	bhi.n	8007b2c <UART_SetConfig+0x598>
 8007ade:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <UART_SetConfig+0x550>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007afd 	.word	0x08007afd
 8007ae8:	08007b05 	.word	0x08007b05
 8007aec:	08007b0d 	.word	0x08007b0d
 8007af0:	08007b15 	.word	0x08007b15
 8007af4:	08007b1d 	.word	0x08007b1d
 8007af8:	08007b25 	.word	0x08007b25
 8007afc:	2302      	movs	r3, #2
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b02:	e01a      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007b04:	2304      	movs	r3, #4
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0a:	e016      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007b0c:	2308      	movs	r3, #8
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b12:	e012      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007b14:	2310      	movs	r3, #16
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1a:	e00e      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007b1c:	2320      	movs	r3, #32
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b22:	e00a      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007b24:	2340      	movs	r3, #64	; 0x40
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2a:	e006      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007b2c:	2380      	movs	r3, #128	; 0x80
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b32:	e002      	b.n	8007b3a <UART_SetConfig+0x5a6>
 8007b34:	2380      	movs	r3, #128	; 0x80
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a3f      	ldr	r2, [pc, #252]	; (8007c3c <UART_SetConfig+0x6a8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	f040 80f8 	bne.w	8007d36 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	dc46      	bgt.n	8007bdc <UART_SetConfig+0x648>
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	f2c0 8082 	blt.w	8007c58 <UART_SetConfig+0x6c4>
 8007b54:	3b02      	subs	r3, #2
 8007b56:	2b1e      	cmp	r3, #30
 8007b58:	d87e      	bhi.n	8007c58 <UART_SetConfig+0x6c4>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <UART_SetConfig+0x5cc>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007be3 	.word	0x08007be3
 8007b64:	08007c59 	.word	0x08007c59
 8007b68:	08007beb 	.word	0x08007beb
 8007b6c:	08007c59 	.word	0x08007c59
 8007b70:	08007c59 	.word	0x08007c59
 8007b74:	08007c59 	.word	0x08007c59
 8007b78:	08007bfb 	.word	0x08007bfb
 8007b7c:	08007c59 	.word	0x08007c59
 8007b80:	08007c59 	.word	0x08007c59
 8007b84:	08007c59 	.word	0x08007c59
 8007b88:	08007c59 	.word	0x08007c59
 8007b8c:	08007c59 	.word	0x08007c59
 8007b90:	08007c59 	.word	0x08007c59
 8007b94:	08007c59 	.word	0x08007c59
 8007b98:	08007c0b 	.word	0x08007c0b
 8007b9c:	08007c59 	.word	0x08007c59
 8007ba0:	08007c59 	.word	0x08007c59
 8007ba4:	08007c59 	.word	0x08007c59
 8007ba8:	08007c59 	.word	0x08007c59
 8007bac:	08007c59 	.word	0x08007c59
 8007bb0:	08007c59 	.word	0x08007c59
 8007bb4:	08007c59 	.word	0x08007c59
 8007bb8:	08007c59 	.word	0x08007c59
 8007bbc:	08007c59 	.word	0x08007c59
 8007bc0:	08007c59 	.word	0x08007c59
 8007bc4:	08007c59 	.word	0x08007c59
 8007bc8:	08007c59 	.word	0x08007c59
 8007bcc:	08007c59 	.word	0x08007c59
 8007bd0:	08007c59 	.word	0x08007c59
 8007bd4:	08007c59 	.word	0x08007c59
 8007bd8:	08007c4b 	.word	0x08007c4b
 8007bdc:	2b40      	cmp	r3, #64	; 0x40
 8007bde:	d037      	beq.n	8007c50 <UART_SetConfig+0x6bc>
 8007be0:	e03a      	b.n	8007c58 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007be2:	f7fd fc6d 	bl	80054c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007be6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007be8:	e03c      	b.n	8007c64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fd fc7c 	bl	80054ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bf8:	e034      	b.n	8007c64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bfa:	f107 0318 	add.w	r3, r7, #24
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fd fdc8 	bl	8005794 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c08:	e02c      	b.n	8007c64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <UART_SetConfig+0x69c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d016      	beq.n	8007c44 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c16:	4b06      	ldr	r3, [pc, #24]	; (8007c30 <UART_SetConfig+0x69c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	08db      	lsrs	r3, r3, #3
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	4a07      	ldr	r2, [pc, #28]	; (8007c40 <UART_SetConfig+0x6ac>)
 8007c22:	fa22 f303 	lsr.w	r3, r2, r3
 8007c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c28:	e01c      	b.n	8007c64 <UART_SetConfig+0x6d0>
 8007c2a:	bf00      	nop
 8007c2c:	40011400 	.word	0x40011400
 8007c30:	58024400 	.word	0x58024400
 8007c34:	40007800 	.word	0x40007800
 8007c38:	40007c00 	.word	0x40007c00
 8007c3c:	58000c00 	.word	0x58000c00
 8007c40:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007c44:	4b9d      	ldr	r3, [pc, #628]	; (8007ebc <UART_SetConfig+0x928>)
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c48:	e00c      	b.n	8007c64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c4a:	4b9d      	ldr	r3, [pc, #628]	; (8007ec0 <UART_SetConfig+0x92c>)
 8007c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c4e:	e009      	b.n	8007c64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c56:	e005      	b.n	8007c64 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c62:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 81de 	beq.w	8008028 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c70:	4a94      	ldr	r2, [pc, #592]	; (8007ec4 <UART_SetConfig+0x930>)
 8007c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c76:	461a      	mov	r2, r3
 8007c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c7e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	4613      	mov	r3, r2
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	4413      	add	r3, r2
 8007c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d305      	bcc.n	8007c9c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d903      	bls.n	8007ca4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ca2:	e1c1      	b.n	8008028 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	60bb      	str	r3, [r7, #8]
 8007caa:	60fa      	str	r2, [r7, #12]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	4a84      	ldr	r2, [pc, #528]	; (8007ec4 <UART_SetConfig+0x930>)
 8007cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	2200      	movs	r2, #0
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	607a      	str	r2, [r7, #4]
 8007cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cc6:	f7f8 fd1f 	bl	8000708 <__aeabi_uldivmod>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4610      	mov	r0, r2
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	f04f 0200 	mov.w	r2, #0
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	020b      	lsls	r3, r1, #8
 8007cdc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ce0:	0202      	lsls	r2, r0, #8
 8007ce2:	6979      	ldr	r1, [r7, #20]
 8007ce4:	6849      	ldr	r1, [r1, #4]
 8007ce6:	0849      	lsrs	r1, r1, #1
 8007ce8:	2000      	movs	r0, #0
 8007cea:	460c      	mov	r4, r1
 8007cec:	4605      	mov	r5, r0
 8007cee:	eb12 0804 	adds.w	r8, r2, r4
 8007cf2:	eb43 0905 	adc.w	r9, r3, r5
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	469a      	mov	sl, r3
 8007cfe:	4693      	mov	fp, r2
 8007d00:	4652      	mov	r2, sl
 8007d02:	465b      	mov	r3, fp
 8007d04:	4640      	mov	r0, r8
 8007d06:	4649      	mov	r1, r9
 8007d08:	f7f8 fcfe 	bl	8000708 <__aeabi_uldivmod>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4613      	mov	r3, r2
 8007d12:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d1a:	d308      	bcc.n	8007d2e <UART_SetConfig+0x79a>
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d22:	d204      	bcs.n	8007d2e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d2a:	60da      	str	r2, [r3, #12]
 8007d2c:	e17c      	b.n	8008028 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d34:	e178      	b.n	8008028 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d3e:	f040 80c5 	bne.w	8007ecc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007d42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	dc48      	bgt.n	8007ddc <UART_SetConfig+0x848>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	db7b      	blt.n	8007e46 <UART_SetConfig+0x8b2>
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d879      	bhi.n	8007e46 <UART_SetConfig+0x8b2>
 8007d52:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <UART_SetConfig+0x7c4>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007de3 	.word	0x08007de3
 8007d5c:	08007deb 	.word	0x08007deb
 8007d60:	08007e47 	.word	0x08007e47
 8007d64:	08007e47 	.word	0x08007e47
 8007d68:	08007df3 	.word	0x08007df3
 8007d6c:	08007e47 	.word	0x08007e47
 8007d70:	08007e47 	.word	0x08007e47
 8007d74:	08007e47 	.word	0x08007e47
 8007d78:	08007e03 	.word	0x08007e03
 8007d7c:	08007e47 	.word	0x08007e47
 8007d80:	08007e47 	.word	0x08007e47
 8007d84:	08007e47 	.word	0x08007e47
 8007d88:	08007e47 	.word	0x08007e47
 8007d8c:	08007e47 	.word	0x08007e47
 8007d90:	08007e47 	.word	0x08007e47
 8007d94:	08007e47 	.word	0x08007e47
 8007d98:	08007e13 	.word	0x08007e13
 8007d9c:	08007e47 	.word	0x08007e47
 8007da0:	08007e47 	.word	0x08007e47
 8007da4:	08007e47 	.word	0x08007e47
 8007da8:	08007e47 	.word	0x08007e47
 8007dac:	08007e47 	.word	0x08007e47
 8007db0:	08007e47 	.word	0x08007e47
 8007db4:	08007e47 	.word	0x08007e47
 8007db8:	08007e47 	.word	0x08007e47
 8007dbc:	08007e47 	.word	0x08007e47
 8007dc0:	08007e47 	.word	0x08007e47
 8007dc4:	08007e47 	.word	0x08007e47
 8007dc8:	08007e47 	.word	0x08007e47
 8007dcc:	08007e47 	.word	0x08007e47
 8007dd0:	08007e47 	.word	0x08007e47
 8007dd4:	08007e47 	.word	0x08007e47
 8007dd8:	08007e39 	.word	0x08007e39
 8007ddc:	2b40      	cmp	r3, #64	; 0x40
 8007dde:	d02e      	beq.n	8007e3e <UART_SetConfig+0x8aa>
 8007de0:	e031      	b.n	8007e46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007de2:	f7fc fbfb 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8007de6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007de8:	e033      	b.n	8007e52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dea:	f7fc fc0d 	bl	8004608 <HAL_RCC_GetPCLK2Freq>
 8007dee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007df0:	e02f      	b.n	8007e52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fd fb78 	bl	80054ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e00:	e027      	b.n	8007e52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e02:	f107 0318 	add.w	r3, r7, #24
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fd fcc4 	bl	8005794 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e10:	e01f      	b.n	8007e52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e12:	4b2d      	ldr	r3, [pc, #180]	; (8007ec8 <UART_SetConfig+0x934>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d009      	beq.n	8007e32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e1e:	4b2a      	ldr	r3, [pc, #168]	; (8007ec8 <UART_SetConfig+0x934>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	08db      	lsrs	r3, r3, #3
 8007e24:	f003 0303 	and.w	r3, r3, #3
 8007e28:	4a24      	ldr	r2, [pc, #144]	; (8007ebc <UART_SetConfig+0x928>)
 8007e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e30:	e00f      	b.n	8007e52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007e32:	4b22      	ldr	r3, [pc, #136]	; (8007ebc <UART_SetConfig+0x928>)
 8007e34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e36:	e00c      	b.n	8007e52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e38:	4b21      	ldr	r3, [pc, #132]	; (8007ec0 <UART_SetConfig+0x92c>)
 8007e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e3c:	e009      	b.n	8007e52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e44:	e005      	b.n	8007e52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 80e7 	beq.w	8008028 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	4a19      	ldr	r2, [pc, #100]	; (8007ec4 <UART_SetConfig+0x930>)
 8007e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e64:	461a      	mov	r2, r3
 8007e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e6c:	005a      	lsls	r2, r3, #1
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	085b      	lsrs	r3, r3, #1
 8007e74:	441a      	add	r2, r3
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	2b0f      	cmp	r3, #15
 8007e84:	d916      	bls.n	8007eb4 <UART_SetConfig+0x920>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e8c:	d212      	bcs.n	8007eb4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	f023 030f 	bic.w	r3, r3, #15
 8007e96:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	085b      	lsrs	r3, r3, #1
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f003 0307 	and.w	r3, r3, #7
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007eb0:	60da      	str	r2, [r3, #12]
 8007eb2:	e0b9      	b.n	8008028 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007eba:	e0b5      	b.n	8008028 <UART_SetConfig+0xa94>
 8007ebc:	03d09000 	.word	0x03d09000
 8007ec0:	003d0900 	.word	0x003d0900
 8007ec4:	0800cd4c 	.word	0x0800cd4c
 8007ec8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ecc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	dc49      	bgt.n	8007f68 <UART_SetConfig+0x9d4>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	db7c      	blt.n	8007fd2 <UART_SetConfig+0xa3e>
 8007ed8:	2b20      	cmp	r3, #32
 8007eda:	d87a      	bhi.n	8007fd2 <UART_SetConfig+0xa3e>
 8007edc:	a201      	add	r2, pc, #4	; (adr r2, 8007ee4 <UART_SetConfig+0x950>)
 8007ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee2:	bf00      	nop
 8007ee4:	08007f6f 	.word	0x08007f6f
 8007ee8:	08007f77 	.word	0x08007f77
 8007eec:	08007fd3 	.word	0x08007fd3
 8007ef0:	08007fd3 	.word	0x08007fd3
 8007ef4:	08007f7f 	.word	0x08007f7f
 8007ef8:	08007fd3 	.word	0x08007fd3
 8007efc:	08007fd3 	.word	0x08007fd3
 8007f00:	08007fd3 	.word	0x08007fd3
 8007f04:	08007f8f 	.word	0x08007f8f
 8007f08:	08007fd3 	.word	0x08007fd3
 8007f0c:	08007fd3 	.word	0x08007fd3
 8007f10:	08007fd3 	.word	0x08007fd3
 8007f14:	08007fd3 	.word	0x08007fd3
 8007f18:	08007fd3 	.word	0x08007fd3
 8007f1c:	08007fd3 	.word	0x08007fd3
 8007f20:	08007fd3 	.word	0x08007fd3
 8007f24:	08007f9f 	.word	0x08007f9f
 8007f28:	08007fd3 	.word	0x08007fd3
 8007f2c:	08007fd3 	.word	0x08007fd3
 8007f30:	08007fd3 	.word	0x08007fd3
 8007f34:	08007fd3 	.word	0x08007fd3
 8007f38:	08007fd3 	.word	0x08007fd3
 8007f3c:	08007fd3 	.word	0x08007fd3
 8007f40:	08007fd3 	.word	0x08007fd3
 8007f44:	08007fd3 	.word	0x08007fd3
 8007f48:	08007fd3 	.word	0x08007fd3
 8007f4c:	08007fd3 	.word	0x08007fd3
 8007f50:	08007fd3 	.word	0x08007fd3
 8007f54:	08007fd3 	.word	0x08007fd3
 8007f58:	08007fd3 	.word	0x08007fd3
 8007f5c:	08007fd3 	.word	0x08007fd3
 8007f60:	08007fd3 	.word	0x08007fd3
 8007f64:	08007fc5 	.word	0x08007fc5
 8007f68:	2b40      	cmp	r3, #64	; 0x40
 8007f6a:	d02e      	beq.n	8007fca <UART_SetConfig+0xa36>
 8007f6c:	e031      	b.n	8007fd2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f6e:	f7fc fb35 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8007f72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f74:	e033      	b.n	8007fde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f76:	f7fc fb47 	bl	8004608 <HAL_RCC_GetPCLK2Freq>
 8007f7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f7c:	e02f      	b.n	8007fde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fd fab2 	bl	80054ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f8c:	e027      	b.n	8007fde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f8e:	f107 0318 	add.w	r3, r7, #24
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fd fbfe 	bl	8005794 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f9c:	e01f      	b.n	8007fde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f9e:	4b2d      	ldr	r3, [pc, #180]	; (8008054 <UART_SetConfig+0xac0>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d009      	beq.n	8007fbe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007faa:	4b2a      	ldr	r3, [pc, #168]	; (8008054 <UART_SetConfig+0xac0>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	08db      	lsrs	r3, r3, #3
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	4a28      	ldr	r2, [pc, #160]	; (8008058 <UART_SetConfig+0xac4>)
 8007fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fbc:	e00f      	b.n	8007fde <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007fbe:	4b26      	ldr	r3, [pc, #152]	; (8008058 <UART_SetConfig+0xac4>)
 8007fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc2:	e00c      	b.n	8007fde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fc4:	4b25      	ldr	r3, [pc, #148]	; (800805c <UART_SetConfig+0xac8>)
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc8:	e009      	b.n	8007fde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fd0:	e005      	b.n	8007fde <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007fdc:	bf00      	nop
    }

    if (pclk != 0U)
 8007fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d021      	beq.n	8008028 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	4a1d      	ldr	r2, [pc, #116]	; (8008060 <UART_SetConfig+0xacc>)
 8007fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	085b      	lsrs	r3, r3, #1
 8007ffc:	441a      	add	r2, r3
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	fbb2 f3f3 	udiv	r3, r2, r3
 8008006:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	2b0f      	cmp	r3, #15
 800800c:	d909      	bls.n	8008022 <UART_SetConfig+0xa8e>
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008014:	d205      	bcs.n	8008022 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	b29a      	uxth	r2, r3
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	60da      	str	r2, [r3, #12]
 8008020:	e002      	b.n	8008028 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2201      	movs	r2, #1
 800802c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2201      	movs	r2, #1
 8008034:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2200      	movs	r2, #0
 800803c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2200      	movs	r2, #0
 8008042:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008044:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008048:	4618      	mov	r0, r3
 800804a:	3748      	adds	r7, #72	; 0x48
 800804c:	46bd      	mov	sp, r7
 800804e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008052:	bf00      	nop
 8008054:	58024400 	.word	0x58024400
 8008058:	03d09000 	.word	0x03d09000
 800805c:	003d0900 	.word	0x003d0900
 8008060:	0800cd4c 	.word	0x0800cd4c

08008064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	430a      	orrs	r2, r1
 80080d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d6:	f003 0308 	and.w	r3, r3, #8
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f8:	f003 0310 	and.w	r3, r3, #16
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811a:	f003 0320 	and.w	r3, r3, #32
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01a      	beq.n	800817a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008162:	d10a      	bne.n	800817a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	605a      	str	r2, [r3, #4]
  }
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081b8:	f7f9 fd7c 	bl	8001cb4 <HAL_GetTick>
 80081bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0308 	and.w	r3, r3, #8
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	d10e      	bne.n	80081ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f82f 	bl	800823e <UART_WaitOnFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e025      	b.n	8008236 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0304 	and.w	r3, r3, #4
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	d10e      	bne.n	8008216 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f819 	bl	800823e <UART_WaitOnFlagUntilTimeout>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e00f      	b.n	8008236 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2220      	movs	r2, #32
 800821a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b09c      	sub	sp, #112	; 0x70
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	60b9      	str	r1, [r7, #8]
 8008248:	603b      	str	r3, [r7, #0]
 800824a:	4613      	mov	r3, r2
 800824c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800824e:	e0a9      	b.n	80083a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008256:	f000 80a5 	beq.w	80083a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800825a:	f7f9 fd2b 	bl	8001cb4 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008266:	429a      	cmp	r2, r3
 8008268:	d302      	bcc.n	8008270 <UART_WaitOnFlagUntilTimeout+0x32>
 800826a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800826c:	2b00      	cmp	r3, #0
 800826e:	d140      	bne.n	80082f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800827e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008280:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008284:	667b      	str	r3, [r7, #100]	; 0x64
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800828e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008290:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008294:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008296:	e841 2300 	strex	r3, r2, [r1]
 800829a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800829c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1e6      	bne.n	8008270 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3308      	adds	r3, #8
 80082a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ac:	e853 3f00 	ldrex	r3, [r3]
 80082b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b4:	f023 0301 	bic.w	r3, r3, #1
 80082b8:	663b      	str	r3, [r7, #96]	; 0x60
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3308      	adds	r3, #8
 80082c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80082c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e5      	bne.n	80082a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2220      	movs	r2, #32
 80082da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e069      	b.n	80083c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d051      	beq.n	80083a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800830a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800830e:	d149      	bne.n	80083a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008318:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	e853 3f00 	ldrex	r3, [r3]
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800832e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	461a      	mov	r2, r3
 8008336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008338:	637b      	str	r3, [r7, #52]	; 0x34
 800833a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800833e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008340:	e841 2300 	strex	r3, r2, [r1]
 8008344:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e6      	bne.n	800831a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3308      	adds	r3, #8
 8008352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	613b      	str	r3, [r7, #16]
   return(result);
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	f023 0301 	bic.w	r3, r3, #1
 8008362:	66bb      	str	r3, [r7, #104]	; 0x68
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3308      	adds	r3, #8
 800836a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800836c:	623a      	str	r2, [r7, #32]
 800836e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	69f9      	ldr	r1, [r7, #28]
 8008372:	6a3a      	ldr	r2, [r7, #32]
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	61bb      	str	r3, [r7, #24]
   return(result);
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e5      	bne.n	800834c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2220      	movs	r2, #32
 8008384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2220      	movs	r2, #32
 800838c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2220      	movs	r2, #32
 8008394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e010      	b.n	80083c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	69da      	ldr	r2, [r3, #28]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	4013      	ands	r3, r2
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	bf0c      	ite	eq
 80083b4:	2301      	moveq	r3, #1
 80083b6:	2300      	movne	r3, #0
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	461a      	mov	r2, r3
 80083bc:	79fb      	ldrb	r3, [r7, #7]
 80083be:	429a      	cmp	r2, r3
 80083c0:	f43f af46 	beq.w	8008250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3770      	adds	r7, #112	; 0x70
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b085      	sub	sp, #20
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d101      	bne.n	80083e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80083e0:	2302      	movs	r3, #2
 80083e2:	e027      	b.n	8008434 <HAL_UARTEx_DisableFifoMode+0x66>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2224      	movs	r2, #36	; 0x24
 80083f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 0201 	bic.w	r2, r2, #1
 800840a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008412:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2220      	movs	r2, #32
 8008426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008450:	2b01      	cmp	r3, #1
 8008452:	d101      	bne.n	8008458 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008454:	2302      	movs	r3, #2
 8008456:	e02d      	b.n	80084b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2224      	movs	r2, #36	; 0x24
 8008464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0201 	bic.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f84f 	bl	8008538 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d101      	bne.n	80084d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084d0:	2302      	movs	r3, #2
 80084d2:	e02d      	b.n	8008530 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2224      	movs	r2, #36	; 0x24
 80084e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f022 0201 	bic.w	r2, r2, #1
 80084fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f811 	bl	8008538 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008544:	2b00      	cmp	r3, #0
 8008546:	d108      	bne.n	800855a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008558:	e031      	b.n	80085be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800855a:	2310      	movs	r3, #16
 800855c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800855e:	2310      	movs	r3, #16
 8008560:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	0e5b      	lsrs	r3, r3, #25
 800856a:	b2db      	uxtb	r3, r3
 800856c:	f003 0307 	and.w	r3, r3, #7
 8008570:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	0f5b      	lsrs	r3, r3, #29
 800857a:	b2db      	uxtb	r3, r3
 800857c:	f003 0307 	and.w	r3, r3, #7
 8008580:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	7b3a      	ldrb	r2, [r7, #12]
 8008586:	4911      	ldr	r1, [pc, #68]	; (80085cc <UARTEx_SetNbDataToProcess+0x94>)
 8008588:	5c8a      	ldrb	r2, [r1, r2]
 800858a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800858e:	7b3a      	ldrb	r2, [r7, #12]
 8008590:	490f      	ldr	r1, [pc, #60]	; (80085d0 <UARTEx_SetNbDataToProcess+0x98>)
 8008592:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008594:	fb93 f3f2 	sdiv	r3, r3, r2
 8008598:	b29a      	uxth	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	7b7a      	ldrb	r2, [r7, #13]
 80085a4:	4909      	ldr	r1, [pc, #36]	; (80085cc <UARTEx_SetNbDataToProcess+0x94>)
 80085a6:	5c8a      	ldrb	r2, [r1, r2]
 80085a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085ac:	7b7a      	ldrb	r2, [r7, #13]
 80085ae:	4908      	ldr	r1, [pc, #32]	; (80085d0 <UARTEx_SetNbDataToProcess+0x98>)
 80085b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80085be:	bf00      	nop
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	0800cd64 	.word	0x0800cd64
 80085d0:	0800cd6c 	.word	0x0800cd6c

080085d4 <__errno>:
 80085d4:	4b01      	ldr	r3, [pc, #4]	; (80085dc <__errno+0x8>)
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	2400001c 	.word	0x2400001c

080085e0 <__libc_init_array>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	4d0d      	ldr	r5, [pc, #52]	; (8008618 <__libc_init_array+0x38>)
 80085e4:	4c0d      	ldr	r4, [pc, #52]	; (800861c <__libc_init_array+0x3c>)
 80085e6:	1b64      	subs	r4, r4, r5
 80085e8:	10a4      	asrs	r4, r4, #2
 80085ea:	2600      	movs	r6, #0
 80085ec:	42a6      	cmp	r6, r4
 80085ee:	d109      	bne.n	8008604 <__libc_init_array+0x24>
 80085f0:	4d0b      	ldr	r5, [pc, #44]	; (8008620 <__libc_init_array+0x40>)
 80085f2:	4c0c      	ldr	r4, [pc, #48]	; (8008624 <__libc_init_array+0x44>)
 80085f4:	f004 fb88 	bl	800cd08 <_init>
 80085f8:	1b64      	subs	r4, r4, r5
 80085fa:	10a4      	asrs	r4, r4, #2
 80085fc:	2600      	movs	r6, #0
 80085fe:	42a6      	cmp	r6, r4
 8008600:	d105      	bne.n	800860e <__libc_init_array+0x2e>
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f855 3b04 	ldr.w	r3, [r5], #4
 8008608:	4798      	blx	r3
 800860a:	3601      	adds	r6, #1
 800860c:	e7ee      	b.n	80085ec <__libc_init_array+0xc>
 800860e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008612:	4798      	blx	r3
 8008614:	3601      	adds	r6, #1
 8008616:	e7f2      	b.n	80085fe <__libc_init_array+0x1e>
 8008618:	0800d224 	.word	0x0800d224
 800861c:	0800d224 	.word	0x0800d224
 8008620:	0800d224 	.word	0x0800d224
 8008624:	0800d228 	.word	0x0800d228

08008628 <memset>:
 8008628:	4402      	add	r2, r0
 800862a:	4603      	mov	r3, r0
 800862c:	4293      	cmp	r3, r2
 800862e:	d100      	bne.n	8008632 <memset+0xa>
 8008630:	4770      	bx	lr
 8008632:	f803 1b01 	strb.w	r1, [r3], #1
 8008636:	e7f9      	b.n	800862c <memset+0x4>

08008638 <__cvt>:
 8008638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800863a:	ed2d 8b02 	vpush	{d8}
 800863e:	eeb0 8b40 	vmov.f64	d8, d0
 8008642:	b085      	sub	sp, #20
 8008644:	4617      	mov	r7, r2
 8008646:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008648:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800864a:	ee18 2a90 	vmov	r2, s17
 800864e:	f025 0520 	bic.w	r5, r5, #32
 8008652:	2a00      	cmp	r2, #0
 8008654:	bfb6      	itet	lt
 8008656:	222d      	movlt	r2, #45	; 0x2d
 8008658:	2200      	movge	r2, #0
 800865a:	eeb1 8b40 	vneglt.f64	d8, d0
 800865e:	2d46      	cmp	r5, #70	; 0x46
 8008660:	460c      	mov	r4, r1
 8008662:	701a      	strb	r2, [r3, #0]
 8008664:	d004      	beq.n	8008670 <__cvt+0x38>
 8008666:	2d45      	cmp	r5, #69	; 0x45
 8008668:	d100      	bne.n	800866c <__cvt+0x34>
 800866a:	3401      	adds	r4, #1
 800866c:	2102      	movs	r1, #2
 800866e:	e000      	b.n	8008672 <__cvt+0x3a>
 8008670:	2103      	movs	r1, #3
 8008672:	ab03      	add	r3, sp, #12
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	ab02      	add	r3, sp, #8
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	4622      	mov	r2, r4
 800867c:	4633      	mov	r3, r6
 800867e:	eeb0 0b48 	vmov.f64	d0, d8
 8008682:	f001 fd2d 	bl	800a0e0 <_dtoa_r>
 8008686:	2d47      	cmp	r5, #71	; 0x47
 8008688:	d101      	bne.n	800868e <__cvt+0x56>
 800868a:	07fb      	lsls	r3, r7, #31
 800868c:	d51a      	bpl.n	80086c4 <__cvt+0x8c>
 800868e:	2d46      	cmp	r5, #70	; 0x46
 8008690:	eb00 0204 	add.w	r2, r0, r4
 8008694:	d10c      	bne.n	80086b0 <__cvt+0x78>
 8008696:	7803      	ldrb	r3, [r0, #0]
 8008698:	2b30      	cmp	r3, #48	; 0x30
 800869a:	d107      	bne.n	80086ac <__cvt+0x74>
 800869c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80086a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086a4:	bf1c      	itt	ne
 80086a6:	f1c4 0401 	rsbne	r4, r4, #1
 80086aa:	6034      	strne	r4, [r6, #0]
 80086ac:	6833      	ldr	r3, [r6, #0]
 80086ae:	441a      	add	r2, r3
 80086b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80086b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b8:	bf08      	it	eq
 80086ba:	9203      	streq	r2, [sp, #12]
 80086bc:	2130      	movs	r1, #48	; 0x30
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d307      	bcc.n	80086d4 <__cvt+0x9c>
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086c8:	1a1b      	subs	r3, r3, r0
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	b005      	add	sp, #20
 80086ce:	ecbd 8b02 	vpop	{d8}
 80086d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086d4:	1c5c      	adds	r4, r3, #1
 80086d6:	9403      	str	r4, [sp, #12]
 80086d8:	7019      	strb	r1, [r3, #0]
 80086da:	e7f0      	b.n	80086be <__cvt+0x86>

080086dc <__exponent>:
 80086dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086de:	4603      	mov	r3, r0
 80086e0:	2900      	cmp	r1, #0
 80086e2:	bfb8      	it	lt
 80086e4:	4249      	neglt	r1, r1
 80086e6:	f803 2b02 	strb.w	r2, [r3], #2
 80086ea:	bfb4      	ite	lt
 80086ec:	222d      	movlt	r2, #45	; 0x2d
 80086ee:	222b      	movge	r2, #43	; 0x2b
 80086f0:	2909      	cmp	r1, #9
 80086f2:	7042      	strb	r2, [r0, #1]
 80086f4:	dd2a      	ble.n	800874c <__exponent+0x70>
 80086f6:	f10d 0407 	add.w	r4, sp, #7
 80086fa:	46a4      	mov	ip, r4
 80086fc:	270a      	movs	r7, #10
 80086fe:	46a6      	mov	lr, r4
 8008700:	460a      	mov	r2, r1
 8008702:	fb91 f6f7 	sdiv	r6, r1, r7
 8008706:	fb07 1516 	mls	r5, r7, r6, r1
 800870a:	3530      	adds	r5, #48	; 0x30
 800870c:	2a63      	cmp	r2, #99	; 0x63
 800870e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008712:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008716:	4631      	mov	r1, r6
 8008718:	dcf1      	bgt.n	80086fe <__exponent+0x22>
 800871a:	3130      	adds	r1, #48	; 0x30
 800871c:	f1ae 0502 	sub.w	r5, lr, #2
 8008720:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008724:	1c44      	adds	r4, r0, #1
 8008726:	4629      	mov	r1, r5
 8008728:	4561      	cmp	r1, ip
 800872a:	d30a      	bcc.n	8008742 <__exponent+0x66>
 800872c:	f10d 0209 	add.w	r2, sp, #9
 8008730:	eba2 020e 	sub.w	r2, r2, lr
 8008734:	4565      	cmp	r5, ip
 8008736:	bf88      	it	hi
 8008738:	2200      	movhi	r2, #0
 800873a:	4413      	add	r3, r2
 800873c:	1a18      	subs	r0, r3, r0
 800873e:	b003      	add	sp, #12
 8008740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008746:	f804 2f01 	strb.w	r2, [r4, #1]!
 800874a:	e7ed      	b.n	8008728 <__exponent+0x4c>
 800874c:	2330      	movs	r3, #48	; 0x30
 800874e:	3130      	adds	r1, #48	; 0x30
 8008750:	7083      	strb	r3, [r0, #2]
 8008752:	70c1      	strb	r1, [r0, #3]
 8008754:	1d03      	adds	r3, r0, #4
 8008756:	e7f1      	b.n	800873c <__exponent+0x60>

08008758 <_printf_float>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	b08b      	sub	sp, #44	; 0x2c
 800875e:	460c      	mov	r4, r1
 8008760:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008764:	4616      	mov	r6, r2
 8008766:	461f      	mov	r7, r3
 8008768:	4605      	mov	r5, r0
 800876a:	f002 fd97 	bl	800b29c <_localeconv_r>
 800876e:	f8d0 b000 	ldr.w	fp, [r0]
 8008772:	4658      	mov	r0, fp
 8008774:	f7f7 fdb4 	bl	80002e0 <strlen>
 8008778:	2300      	movs	r3, #0
 800877a:	9308      	str	r3, [sp, #32]
 800877c:	f8d8 3000 	ldr.w	r3, [r8]
 8008780:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008784:	6822      	ldr	r2, [r4, #0]
 8008786:	3307      	adds	r3, #7
 8008788:	f023 0307 	bic.w	r3, r3, #7
 800878c:	f103 0108 	add.w	r1, r3, #8
 8008790:	f8c8 1000 	str.w	r1, [r8]
 8008794:	4682      	mov	sl, r0
 8008796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800879a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800879e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008a00 <_printf_float+0x2a8>
 80087a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80087a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80087aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80087ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b2:	dd24      	ble.n	80087fe <_printf_float+0xa6>
 80087b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80087b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087bc:	d502      	bpl.n	80087c4 <_printf_float+0x6c>
 80087be:	232d      	movs	r3, #45	; 0x2d
 80087c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c4:	4b90      	ldr	r3, [pc, #576]	; (8008a08 <_printf_float+0x2b0>)
 80087c6:	4891      	ldr	r0, [pc, #580]	; (8008a0c <_printf_float+0x2b4>)
 80087c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80087cc:	bf94      	ite	ls
 80087ce:	4698      	movls	r8, r3
 80087d0:	4680      	movhi	r8, r0
 80087d2:	2303      	movs	r3, #3
 80087d4:	6123      	str	r3, [r4, #16]
 80087d6:	f022 0204 	bic.w	r2, r2, #4
 80087da:	2300      	movs	r3, #0
 80087dc:	6022      	str	r2, [r4, #0]
 80087de:	9304      	str	r3, [sp, #16]
 80087e0:	9700      	str	r7, [sp, #0]
 80087e2:	4633      	mov	r3, r6
 80087e4:	aa09      	add	r2, sp, #36	; 0x24
 80087e6:	4621      	mov	r1, r4
 80087e8:	4628      	mov	r0, r5
 80087ea:	f000 f9d3 	bl	8008b94 <_printf_common>
 80087ee:	3001      	adds	r0, #1
 80087f0:	f040 808a 	bne.w	8008908 <_printf_float+0x1b0>
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295
 80087f8:	b00b      	add	sp, #44	; 0x2c
 80087fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8008802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008806:	d709      	bvc.n	800881c <_printf_float+0xc4>
 8008808:	ee10 3a90 	vmov	r3, s1
 800880c:	2b00      	cmp	r3, #0
 800880e:	bfbc      	itt	lt
 8008810:	232d      	movlt	r3, #45	; 0x2d
 8008812:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008816:	487e      	ldr	r0, [pc, #504]	; (8008a10 <_printf_float+0x2b8>)
 8008818:	4b7e      	ldr	r3, [pc, #504]	; (8008a14 <_printf_float+0x2bc>)
 800881a:	e7d5      	b.n	80087c8 <_printf_float+0x70>
 800881c:	6863      	ldr	r3, [r4, #4]
 800881e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008822:	9104      	str	r1, [sp, #16]
 8008824:	1c59      	adds	r1, r3, #1
 8008826:	d13c      	bne.n	80088a2 <_printf_float+0x14a>
 8008828:	2306      	movs	r3, #6
 800882a:	6063      	str	r3, [r4, #4]
 800882c:	2300      	movs	r3, #0
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	ab08      	add	r3, sp, #32
 8008832:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008836:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800883a:	ab07      	add	r3, sp, #28
 800883c:	6861      	ldr	r1, [r4, #4]
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	6022      	str	r2, [r4, #0]
 8008842:	f10d 031b 	add.w	r3, sp, #27
 8008846:	4628      	mov	r0, r5
 8008848:	f7ff fef6 	bl	8008638 <__cvt>
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	9907      	ldr	r1, [sp, #28]
 8008850:	2b47      	cmp	r3, #71	; 0x47
 8008852:	4680      	mov	r8, r0
 8008854:	d108      	bne.n	8008868 <_printf_float+0x110>
 8008856:	1cc8      	adds	r0, r1, #3
 8008858:	db02      	blt.n	8008860 <_printf_float+0x108>
 800885a:	6863      	ldr	r3, [r4, #4]
 800885c:	4299      	cmp	r1, r3
 800885e:	dd41      	ble.n	80088e4 <_printf_float+0x18c>
 8008860:	f1a9 0902 	sub.w	r9, r9, #2
 8008864:	fa5f f989 	uxtb.w	r9, r9
 8008868:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800886c:	d820      	bhi.n	80088b0 <_printf_float+0x158>
 800886e:	3901      	subs	r1, #1
 8008870:	464a      	mov	r2, r9
 8008872:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008876:	9107      	str	r1, [sp, #28]
 8008878:	f7ff ff30 	bl	80086dc <__exponent>
 800887c:	9a08      	ldr	r2, [sp, #32]
 800887e:	9004      	str	r0, [sp, #16]
 8008880:	1813      	adds	r3, r2, r0
 8008882:	2a01      	cmp	r2, #1
 8008884:	6123      	str	r3, [r4, #16]
 8008886:	dc02      	bgt.n	800888e <_printf_float+0x136>
 8008888:	6822      	ldr	r2, [r4, #0]
 800888a:	07d2      	lsls	r2, r2, #31
 800888c:	d501      	bpl.n	8008892 <_printf_float+0x13a>
 800888e:	3301      	adds	r3, #1
 8008890:	6123      	str	r3, [r4, #16]
 8008892:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0a2      	beq.n	80087e0 <_printf_float+0x88>
 800889a:	232d      	movs	r3, #45	; 0x2d
 800889c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a0:	e79e      	b.n	80087e0 <_printf_float+0x88>
 80088a2:	9904      	ldr	r1, [sp, #16]
 80088a4:	2947      	cmp	r1, #71	; 0x47
 80088a6:	d1c1      	bne.n	800882c <_printf_float+0xd4>
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1bf      	bne.n	800882c <_printf_float+0xd4>
 80088ac:	2301      	movs	r3, #1
 80088ae:	e7bc      	b.n	800882a <_printf_float+0xd2>
 80088b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80088b4:	d118      	bne.n	80088e8 <_printf_float+0x190>
 80088b6:	2900      	cmp	r1, #0
 80088b8:	6863      	ldr	r3, [r4, #4]
 80088ba:	dd0b      	ble.n	80088d4 <_printf_float+0x17c>
 80088bc:	6121      	str	r1, [r4, #16]
 80088be:	b913      	cbnz	r3, 80088c6 <_printf_float+0x16e>
 80088c0:	6822      	ldr	r2, [r4, #0]
 80088c2:	07d0      	lsls	r0, r2, #31
 80088c4:	d502      	bpl.n	80088cc <_printf_float+0x174>
 80088c6:	3301      	adds	r3, #1
 80088c8:	440b      	add	r3, r1
 80088ca:	6123      	str	r3, [r4, #16]
 80088cc:	2300      	movs	r3, #0
 80088ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80088d0:	9304      	str	r3, [sp, #16]
 80088d2:	e7de      	b.n	8008892 <_printf_float+0x13a>
 80088d4:	b913      	cbnz	r3, 80088dc <_printf_float+0x184>
 80088d6:	6822      	ldr	r2, [r4, #0]
 80088d8:	07d2      	lsls	r2, r2, #31
 80088da:	d501      	bpl.n	80088e0 <_printf_float+0x188>
 80088dc:	3302      	adds	r3, #2
 80088de:	e7f4      	b.n	80088ca <_printf_float+0x172>
 80088e0:	2301      	movs	r3, #1
 80088e2:	e7f2      	b.n	80088ca <_printf_float+0x172>
 80088e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80088e8:	9b08      	ldr	r3, [sp, #32]
 80088ea:	4299      	cmp	r1, r3
 80088ec:	db05      	blt.n	80088fa <_printf_float+0x1a2>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	6121      	str	r1, [r4, #16]
 80088f2:	07d8      	lsls	r0, r3, #31
 80088f4:	d5ea      	bpl.n	80088cc <_printf_float+0x174>
 80088f6:	1c4b      	adds	r3, r1, #1
 80088f8:	e7e7      	b.n	80088ca <_printf_float+0x172>
 80088fa:	2900      	cmp	r1, #0
 80088fc:	bfd4      	ite	le
 80088fe:	f1c1 0202 	rsble	r2, r1, #2
 8008902:	2201      	movgt	r2, #1
 8008904:	4413      	add	r3, r2
 8008906:	e7e0      	b.n	80088ca <_printf_float+0x172>
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	055a      	lsls	r2, r3, #21
 800890c:	d407      	bmi.n	800891e <_printf_float+0x1c6>
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	4642      	mov	r2, r8
 8008912:	4631      	mov	r1, r6
 8008914:	4628      	mov	r0, r5
 8008916:	47b8      	blx	r7
 8008918:	3001      	adds	r0, #1
 800891a:	d12a      	bne.n	8008972 <_printf_float+0x21a>
 800891c:	e76a      	b.n	80087f4 <_printf_float+0x9c>
 800891e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008922:	f240 80e2 	bls.w	8008aea <_printf_float+0x392>
 8008926:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800892a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800892e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008932:	d133      	bne.n	800899c <_printf_float+0x244>
 8008934:	4a38      	ldr	r2, [pc, #224]	; (8008a18 <_printf_float+0x2c0>)
 8008936:	2301      	movs	r3, #1
 8008938:	4631      	mov	r1, r6
 800893a:	4628      	mov	r0, r5
 800893c:	47b8      	blx	r7
 800893e:	3001      	adds	r0, #1
 8008940:	f43f af58 	beq.w	80087f4 <_printf_float+0x9c>
 8008944:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008948:	429a      	cmp	r2, r3
 800894a:	db02      	blt.n	8008952 <_printf_float+0x1fa>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	07d8      	lsls	r0, r3, #31
 8008950:	d50f      	bpl.n	8008972 <_printf_float+0x21a>
 8008952:	4653      	mov	r3, sl
 8008954:	465a      	mov	r2, fp
 8008956:	4631      	mov	r1, r6
 8008958:	4628      	mov	r0, r5
 800895a:	47b8      	blx	r7
 800895c:	3001      	adds	r0, #1
 800895e:	f43f af49 	beq.w	80087f4 <_printf_float+0x9c>
 8008962:	f04f 0800 	mov.w	r8, #0
 8008966:	f104 091a 	add.w	r9, r4, #26
 800896a:	9b08      	ldr	r3, [sp, #32]
 800896c:	3b01      	subs	r3, #1
 800896e:	4543      	cmp	r3, r8
 8008970:	dc09      	bgt.n	8008986 <_printf_float+0x22e>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	079b      	lsls	r3, r3, #30
 8008976:	f100 8108 	bmi.w	8008b8a <_printf_float+0x432>
 800897a:	68e0      	ldr	r0, [r4, #12]
 800897c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897e:	4298      	cmp	r0, r3
 8008980:	bfb8      	it	lt
 8008982:	4618      	movlt	r0, r3
 8008984:	e738      	b.n	80087f8 <_printf_float+0xa0>
 8008986:	2301      	movs	r3, #1
 8008988:	464a      	mov	r2, r9
 800898a:	4631      	mov	r1, r6
 800898c:	4628      	mov	r0, r5
 800898e:	47b8      	blx	r7
 8008990:	3001      	adds	r0, #1
 8008992:	f43f af2f 	beq.w	80087f4 <_printf_float+0x9c>
 8008996:	f108 0801 	add.w	r8, r8, #1
 800899a:	e7e6      	b.n	800896a <_printf_float+0x212>
 800899c:	9b07      	ldr	r3, [sp, #28]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	dc3c      	bgt.n	8008a1c <_printf_float+0x2c4>
 80089a2:	4a1d      	ldr	r2, [pc, #116]	; (8008a18 <_printf_float+0x2c0>)
 80089a4:	2301      	movs	r3, #1
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b8      	blx	r7
 80089ac:	3001      	adds	r0, #1
 80089ae:	f43f af21 	beq.w	80087f4 <_printf_float+0x9c>
 80089b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	d102      	bne.n	80089c0 <_printf_float+0x268>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	07d9      	lsls	r1, r3, #31
 80089be:	d5d8      	bpl.n	8008972 <_printf_float+0x21a>
 80089c0:	4653      	mov	r3, sl
 80089c2:	465a      	mov	r2, fp
 80089c4:	4631      	mov	r1, r6
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	f43f af12 	beq.w	80087f4 <_printf_float+0x9c>
 80089d0:	f04f 0900 	mov.w	r9, #0
 80089d4:	f104 0a1a 	add.w	sl, r4, #26
 80089d8:	9b07      	ldr	r3, [sp, #28]
 80089da:	425b      	negs	r3, r3
 80089dc:	454b      	cmp	r3, r9
 80089de:	dc01      	bgt.n	80089e4 <_printf_float+0x28c>
 80089e0:	9b08      	ldr	r3, [sp, #32]
 80089e2:	e795      	b.n	8008910 <_printf_float+0x1b8>
 80089e4:	2301      	movs	r3, #1
 80089e6:	4652      	mov	r2, sl
 80089e8:	4631      	mov	r1, r6
 80089ea:	4628      	mov	r0, r5
 80089ec:	47b8      	blx	r7
 80089ee:	3001      	adds	r0, #1
 80089f0:	f43f af00 	beq.w	80087f4 <_printf_float+0x9c>
 80089f4:	f109 0901 	add.w	r9, r9, #1
 80089f8:	e7ee      	b.n	80089d8 <_printf_float+0x280>
 80089fa:	bf00      	nop
 80089fc:	f3af 8000 	nop.w
 8008a00:	ffffffff 	.word	0xffffffff
 8008a04:	7fefffff 	.word	0x7fefffff
 8008a08:	0800cd78 	.word	0x0800cd78
 8008a0c:	0800cd7c 	.word	0x0800cd7c
 8008a10:	0800cd84 	.word	0x0800cd84
 8008a14:	0800cd80 	.word	0x0800cd80
 8008a18:	0800cd88 	.word	0x0800cd88
 8008a1c:	9a08      	ldr	r2, [sp, #32]
 8008a1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a20:	429a      	cmp	r2, r3
 8008a22:	bfa8      	it	ge
 8008a24:	461a      	movge	r2, r3
 8008a26:	2a00      	cmp	r2, #0
 8008a28:	4691      	mov	r9, r2
 8008a2a:	dc38      	bgt.n	8008a9e <_printf_float+0x346>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9305      	str	r3, [sp, #20]
 8008a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a34:	f104 021a 	add.w	r2, r4, #26
 8008a38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a3a:	9905      	ldr	r1, [sp, #20]
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	eba3 0309 	sub.w	r3, r3, r9
 8008a42:	428b      	cmp	r3, r1
 8008a44:	dc33      	bgt.n	8008aae <_printf_float+0x356>
 8008a46:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	db3c      	blt.n	8008ac8 <_printf_float+0x370>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	07da      	lsls	r2, r3, #31
 8008a52:	d439      	bmi.n	8008ac8 <_printf_float+0x370>
 8008a54:	9b08      	ldr	r3, [sp, #32]
 8008a56:	9a04      	ldr	r2, [sp, #16]
 8008a58:	9907      	ldr	r1, [sp, #28]
 8008a5a:	1a9a      	subs	r2, r3, r2
 8008a5c:	eba3 0901 	sub.w	r9, r3, r1
 8008a60:	4591      	cmp	r9, r2
 8008a62:	bfa8      	it	ge
 8008a64:	4691      	movge	r9, r2
 8008a66:	f1b9 0f00 	cmp.w	r9, #0
 8008a6a:	dc35      	bgt.n	8008ad8 <_printf_float+0x380>
 8008a6c:	f04f 0800 	mov.w	r8, #0
 8008a70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a74:	f104 0a1a 	add.w	sl, r4, #26
 8008a78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008a7c:	1a9b      	subs	r3, r3, r2
 8008a7e:	eba3 0309 	sub.w	r3, r3, r9
 8008a82:	4543      	cmp	r3, r8
 8008a84:	f77f af75 	ble.w	8008972 <_printf_float+0x21a>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4652      	mov	r2, sl
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4628      	mov	r0, r5
 8008a90:	47b8      	blx	r7
 8008a92:	3001      	adds	r0, #1
 8008a94:	f43f aeae 	beq.w	80087f4 <_printf_float+0x9c>
 8008a98:	f108 0801 	add.w	r8, r8, #1
 8008a9c:	e7ec      	b.n	8008a78 <_printf_float+0x320>
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	4642      	mov	r2, r8
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	47b8      	blx	r7
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d1bf      	bne.n	8008a2c <_printf_float+0x2d4>
 8008aac:	e6a2      	b.n	80087f4 <_printf_float+0x9c>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	9204      	str	r2, [sp, #16]
 8008ab6:	47b8      	blx	r7
 8008ab8:	3001      	adds	r0, #1
 8008aba:	f43f ae9b 	beq.w	80087f4 <_printf_float+0x9c>
 8008abe:	9b05      	ldr	r3, [sp, #20]
 8008ac0:	9a04      	ldr	r2, [sp, #16]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	9305      	str	r3, [sp, #20]
 8008ac6:	e7b7      	b.n	8008a38 <_printf_float+0x2e0>
 8008ac8:	4653      	mov	r3, sl
 8008aca:	465a      	mov	r2, fp
 8008acc:	4631      	mov	r1, r6
 8008ace:	4628      	mov	r0, r5
 8008ad0:	47b8      	blx	r7
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d1be      	bne.n	8008a54 <_printf_float+0x2fc>
 8008ad6:	e68d      	b.n	80087f4 <_printf_float+0x9c>
 8008ad8:	9a04      	ldr	r2, [sp, #16]
 8008ada:	464b      	mov	r3, r9
 8008adc:	4442      	add	r2, r8
 8008ade:	4631      	mov	r1, r6
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	47b8      	blx	r7
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d1c1      	bne.n	8008a6c <_printf_float+0x314>
 8008ae8:	e684      	b.n	80087f4 <_printf_float+0x9c>
 8008aea:	9a08      	ldr	r2, [sp, #32]
 8008aec:	2a01      	cmp	r2, #1
 8008aee:	dc01      	bgt.n	8008af4 <_printf_float+0x39c>
 8008af0:	07db      	lsls	r3, r3, #31
 8008af2:	d537      	bpl.n	8008b64 <_printf_float+0x40c>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4642      	mov	r2, r8
 8008af8:	4631      	mov	r1, r6
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b8      	blx	r7
 8008afe:	3001      	adds	r0, #1
 8008b00:	f43f ae78 	beq.w	80087f4 <_printf_float+0x9c>
 8008b04:	4653      	mov	r3, sl
 8008b06:	465a      	mov	r2, fp
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f43f ae70 	beq.w	80087f4 <_printf_float+0x9c>
 8008b14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008b18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b20:	d01b      	beq.n	8008b5a <_printf_float+0x402>
 8008b22:	9b08      	ldr	r3, [sp, #32]
 8008b24:	f108 0201 	add.w	r2, r8, #1
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	47b8      	blx	r7
 8008b30:	3001      	adds	r0, #1
 8008b32:	d10e      	bne.n	8008b52 <_printf_float+0x3fa>
 8008b34:	e65e      	b.n	80087f4 <_printf_float+0x9c>
 8008b36:	2301      	movs	r3, #1
 8008b38:	464a      	mov	r2, r9
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	47b8      	blx	r7
 8008b40:	3001      	adds	r0, #1
 8008b42:	f43f ae57 	beq.w	80087f4 <_printf_float+0x9c>
 8008b46:	f108 0801 	add.w	r8, r8, #1
 8008b4a:	9b08      	ldr	r3, [sp, #32]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	4543      	cmp	r3, r8
 8008b50:	dcf1      	bgt.n	8008b36 <_printf_float+0x3de>
 8008b52:	9b04      	ldr	r3, [sp, #16]
 8008b54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b58:	e6db      	b.n	8008912 <_printf_float+0x1ba>
 8008b5a:	f04f 0800 	mov.w	r8, #0
 8008b5e:	f104 091a 	add.w	r9, r4, #26
 8008b62:	e7f2      	b.n	8008b4a <_printf_float+0x3f2>
 8008b64:	2301      	movs	r3, #1
 8008b66:	4642      	mov	r2, r8
 8008b68:	e7df      	b.n	8008b2a <_printf_float+0x3d2>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	464a      	mov	r2, r9
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4628      	mov	r0, r5
 8008b72:	47b8      	blx	r7
 8008b74:	3001      	adds	r0, #1
 8008b76:	f43f ae3d 	beq.w	80087f4 <_printf_float+0x9c>
 8008b7a:	f108 0801 	add.w	r8, r8, #1
 8008b7e:	68e3      	ldr	r3, [r4, #12]
 8008b80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b82:	1a5b      	subs	r3, r3, r1
 8008b84:	4543      	cmp	r3, r8
 8008b86:	dcf0      	bgt.n	8008b6a <_printf_float+0x412>
 8008b88:	e6f7      	b.n	800897a <_printf_float+0x222>
 8008b8a:	f04f 0800 	mov.w	r8, #0
 8008b8e:	f104 0919 	add.w	r9, r4, #25
 8008b92:	e7f4      	b.n	8008b7e <_printf_float+0x426>

08008b94 <_printf_common>:
 8008b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b98:	4616      	mov	r6, r2
 8008b9a:	4699      	mov	r9, r3
 8008b9c:	688a      	ldr	r2, [r1, #8]
 8008b9e:	690b      	ldr	r3, [r1, #16]
 8008ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	bfb8      	it	lt
 8008ba8:	4613      	movlt	r3, r2
 8008baa:	6033      	str	r3, [r6, #0]
 8008bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bb0:	4607      	mov	r7, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	b10a      	cbz	r2, 8008bba <_printf_common+0x26>
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	6033      	str	r3, [r6, #0]
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	0699      	lsls	r1, r3, #26
 8008bbe:	bf42      	ittt	mi
 8008bc0:	6833      	ldrmi	r3, [r6, #0]
 8008bc2:	3302      	addmi	r3, #2
 8008bc4:	6033      	strmi	r3, [r6, #0]
 8008bc6:	6825      	ldr	r5, [r4, #0]
 8008bc8:	f015 0506 	ands.w	r5, r5, #6
 8008bcc:	d106      	bne.n	8008bdc <_printf_common+0x48>
 8008bce:	f104 0a19 	add.w	sl, r4, #25
 8008bd2:	68e3      	ldr	r3, [r4, #12]
 8008bd4:	6832      	ldr	r2, [r6, #0]
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	42ab      	cmp	r3, r5
 8008bda:	dc26      	bgt.n	8008c2a <_printf_common+0x96>
 8008bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008be0:	1e13      	subs	r3, r2, #0
 8008be2:	6822      	ldr	r2, [r4, #0]
 8008be4:	bf18      	it	ne
 8008be6:	2301      	movne	r3, #1
 8008be8:	0692      	lsls	r2, r2, #26
 8008bea:	d42b      	bmi.n	8008c44 <_printf_common+0xb0>
 8008bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	47c0      	blx	r8
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	d01e      	beq.n	8008c38 <_printf_common+0xa4>
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	68e5      	ldr	r5, [r4, #12]
 8008bfe:	6832      	ldr	r2, [r6, #0]
 8008c00:	f003 0306 	and.w	r3, r3, #6
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	bf08      	it	eq
 8008c08:	1aad      	subeq	r5, r5, r2
 8008c0a:	68a3      	ldr	r3, [r4, #8]
 8008c0c:	6922      	ldr	r2, [r4, #16]
 8008c0e:	bf0c      	ite	eq
 8008c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c14:	2500      	movne	r5, #0
 8008c16:	4293      	cmp	r3, r2
 8008c18:	bfc4      	itt	gt
 8008c1a:	1a9b      	subgt	r3, r3, r2
 8008c1c:	18ed      	addgt	r5, r5, r3
 8008c1e:	2600      	movs	r6, #0
 8008c20:	341a      	adds	r4, #26
 8008c22:	42b5      	cmp	r5, r6
 8008c24:	d11a      	bne.n	8008c5c <_printf_common+0xc8>
 8008c26:	2000      	movs	r0, #0
 8008c28:	e008      	b.n	8008c3c <_printf_common+0xa8>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4652      	mov	r2, sl
 8008c2e:	4649      	mov	r1, r9
 8008c30:	4638      	mov	r0, r7
 8008c32:	47c0      	blx	r8
 8008c34:	3001      	adds	r0, #1
 8008c36:	d103      	bne.n	8008c40 <_printf_common+0xac>
 8008c38:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c40:	3501      	adds	r5, #1
 8008c42:	e7c6      	b.n	8008bd2 <_printf_common+0x3e>
 8008c44:	18e1      	adds	r1, r4, r3
 8008c46:	1c5a      	adds	r2, r3, #1
 8008c48:	2030      	movs	r0, #48	; 0x30
 8008c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c4e:	4422      	add	r2, r4
 8008c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c58:	3302      	adds	r3, #2
 8008c5a:	e7c7      	b.n	8008bec <_printf_common+0x58>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	4622      	mov	r2, r4
 8008c60:	4649      	mov	r1, r9
 8008c62:	4638      	mov	r0, r7
 8008c64:	47c0      	blx	r8
 8008c66:	3001      	adds	r0, #1
 8008c68:	d0e6      	beq.n	8008c38 <_printf_common+0xa4>
 8008c6a:	3601      	adds	r6, #1
 8008c6c:	e7d9      	b.n	8008c22 <_printf_common+0x8e>
	...

08008c70 <_printf_i>:
 8008c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c74:	7e0f      	ldrb	r7, [r1, #24]
 8008c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c78:	2f78      	cmp	r7, #120	; 0x78
 8008c7a:	4691      	mov	r9, r2
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	460c      	mov	r4, r1
 8008c80:	469a      	mov	sl, r3
 8008c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c86:	d807      	bhi.n	8008c98 <_printf_i+0x28>
 8008c88:	2f62      	cmp	r7, #98	; 0x62
 8008c8a:	d80a      	bhi.n	8008ca2 <_printf_i+0x32>
 8008c8c:	2f00      	cmp	r7, #0
 8008c8e:	f000 80d8 	beq.w	8008e42 <_printf_i+0x1d2>
 8008c92:	2f58      	cmp	r7, #88	; 0x58
 8008c94:	f000 80a3 	beq.w	8008dde <_printf_i+0x16e>
 8008c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ca0:	e03a      	b.n	8008d18 <_printf_i+0xa8>
 8008ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ca6:	2b15      	cmp	r3, #21
 8008ca8:	d8f6      	bhi.n	8008c98 <_printf_i+0x28>
 8008caa:	a101      	add	r1, pc, #4	; (adr r1, 8008cb0 <_printf_i+0x40>)
 8008cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cb0:	08008d09 	.word	0x08008d09
 8008cb4:	08008d1d 	.word	0x08008d1d
 8008cb8:	08008c99 	.word	0x08008c99
 8008cbc:	08008c99 	.word	0x08008c99
 8008cc0:	08008c99 	.word	0x08008c99
 8008cc4:	08008c99 	.word	0x08008c99
 8008cc8:	08008d1d 	.word	0x08008d1d
 8008ccc:	08008c99 	.word	0x08008c99
 8008cd0:	08008c99 	.word	0x08008c99
 8008cd4:	08008c99 	.word	0x08008c99
 8008cd8:	08008c99 	.word	0x08008c99
 8008cdc:	08008e29 	.word	0x08008e29
 8008ce0:	08008d4d 	.word	0x08008d4d
 8008ce4:	08008e0b 	.word	0x08008e0b
 8008ce8:	08008c99 	.word	0x08008c99
 8008cec:	08008c99 	.word	0x08008c99
 8008cf0:	08008e4b 	.word	0x08008e4b
 8008cf4:	08008c99 	.word	0x08008c99
 8008cf8:	08008d4d 	.word	0x08008d4d
 8008cfc:	08008c99 	.word	0x08008c99
 8008d00:	08008c99 	.word	0x08008c99
 8008d04:	08008e13 	.word	0x08008e13
 8008d08:	682b      	ldr	r3, [r5, #0]
 8008d0a:	1d1a      	adds	r2, r3, #4
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	602a      	str	r2, [r5, #0]
 8008d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e0a3      	b.n	8008e64 <_printf_i+0x1f4>
 8008d1c:	6820      	ldr	r0, [r4, #0]
 8008d1e:	6829      	ldr	r1, [r5, #0]
 8008d20:	0606      	lsls	r6, r0, #24
 8008d22:	f101 0304 	add.w	r3, r1, #4
 8008d26:	d50a      	bpl.n	8008d3e <_printf_i+0xce>
 8008d28:	680e      	ldr	r6, [r1, #0]
 8008d2a:	602b      	str	r3, [r5, #0]
 8008d2c:	2e00      	cmp	r6, #0
 8008d2e:	da03      	bge.n	8008d38 <_printf_i+0xc8>
 8008d30:	232d      	movs	r3, #45	; 0x2d
 8008d32:	4276      	negs	r6, r6
 8008d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d38:	485e      	ldr	r0, [pc, #376]	; (8008eb4 <_printf_i+0x244>)
 8008d3a:	230a      	movs	r3, #10
 8008d3c:	e019      	b.n	8008d72 <_printf_i+0x102>
 8008d3e:	680e      	ldr	r6, [r1, #0]
 8008d40:	602b      	str	r3, [r5, #0]
 8008d42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d46:	bf18      	it	ne
 8008d48:	b236      	sxthne	r6, r6
 8008d4a:	e7ef      	b.n	8008d2c <_printf_i+0xbc>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	6820      	ldr	r0, [r4, #0]
 8008d50:	1d19      	adds	r1, r3, #4
 8008d52:	6029      	str	r1, [r5, #0]
 8008d54:	0601      	lsls	r1, r0, #24
 8008d56:	d501      	bpl.n	8008d5c <_printf_i+0xec>
 8008d58:	681e      	ldr	r6, [r3, #0]
 8008d5a:	e002      	b.n	8008d62 <_printf_i+0xf2>
 8008d5c:	0646      	lsls	r6, r0, #25
 8008d5e:	d5fb      	bpl.n	8008d58 <_printf_i+0xe8>
 8008d60:	881e      	ldrh	r6, [r3, #0]
 8008d62:	4854      	ldr	r0, [pc, #336]	; (8008eb4 <_printf_i+0x244>)
 8008d64:	2f6f      	cmp	r7, #111	; 0x6f
 8008d66:	bf0c      	ite	eq
 8008d68:	2308      	moveq	r3, #8
 8008d6a:	230a      	movne	r3, #10
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d72:	6865      	ldr	r5, [r4, #4]
 8008d74:	60a5      	str	r5, [r4, #8]
 8008d76:	2d00      	cmp	r5, #0
 8008d78:	bfa2      	ittt	ge
 8008d7a:	6821      	ldrge	r1, [r4, #0]
 8008d7c:	f021 0104 	bicge.w	r1, r1, #4
 8008d80:	6021      	strge	r1, [r4, #0]
 8008d82:	b90e      	cbnz	r6, 8008d88 <_printf_i+0x118>
 8008d84:	2d00      	cmp	r5, #0
 8008d86:	d04d      	beq.n	8008e24 <_printf_i+0x1b4>
 8008d88:	4615      	mov	r5, r2
 8008d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d92:	5dc7      	ldrb	r7, [r0, r7]
 8008d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d98:	4637      	mov	r7, r6
 8008d9a:	42bb      	cmp	r3, r7
 8008d9c:	460e      	mov	r6, r1
 8008d9e:	d9f4      	bls.n	8008d8a <_printf_i+0x11a>
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d10b      	bne.n	8008dbc <_printf_i+0x14c>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	07de      	lsls	r6, r3, #31
 8008da8:	d508      	bpl.n	8008dbc <_printf_i+0x14c>
 8008daa:	6923      	ldr	r3, [r4, #16]
 8008dac:	6861      	ldr	r1, [r4, #4]
 8008dae:	4299      	cmp	r1, r3
 8008db0:	bfde      	ittt	le
 8008db2:	2330      	movle	r3, #48	; 0x30
 8008db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dbc:	1b52      	subs	r2, r2, r5
 8008dbe:	6122      	str	r2, [r4, #16]
 8008dc0:	f8cd a000 	str.w	sl, [sp]
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	aa03      	add	r2, sp, #12
 8008dc8:	4621      	mov	r1, r4
 8008dca:	4640      	mov	r0, r8
 8008dcc:	f7ff fee2 	bl	8008b94 <_printf_common>
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d14c      	bne.n	8008e6e <_printf_i+0x1fe>
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	b004      	add	sp, #16
 8008dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dde:	4835      	ldr	r0, [pc, #212]	; (8008eb4 <_printf_i+0x244>)
 8008de0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008de4:	6829      	ldr	r1, [r5, #0]
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dec:	6029      	str	r1, [r5, #0]
 8008dee:	061d      	lsls	r5, r3, #24
 8008df0:	d514      	bpl.n	8008e1c <_printf_i+0x1ac>
 8008df2:	07df      	lsls	r7, r3, #31
 8008df4:	bf44      	itt	mi
 8008df6:	f043 0320 	orrmi.w	r3, r3, #32
 8008dfa:	6023      	strmi	r3, [r4, #0]
 8008dfc:	b91e      	cbnz	r6, 8008e06 <_printf_i+0x196>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	f023 0320 	bic.w	r3, r3, #32
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	2310      	movs	r3, #16
 8008e08:	e7b0      	b.n	8008d6c <_printf_i+0xfc>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	f043 0320 	orr.w	r3, r3, #32
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	2378      	movs	r3, #120	; 0x78
 8008e14:	4828      	ldr	r0, [pc, #160]	; (8008eb8 <_printf_i+0x248>)
 8008e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e1a:	e7e3      	b.n	8008de4 <_printf_i+0x174>
 8008e1c:	0659      	lsls	r1, r3, #25
 8008e1e:	bf48      	it	mi
 8008e20:	b2b6      	uxthmi	r6, r6
 8008e22:	e7e6      	b.n	8008df2 <_printf_i+0x182>
 8008e24:	4615      	mov	r5, r2
 8008e26:	e7bb      	b.n	8008da0 <_printf_i+0x130>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	6826      	ldr	r6, [r4, #0]
 8008e2c:	6961      	ldr	r1, [r4, #20]
 8008e2e:	1d18      	adds	r0, r3, #4
 8008e30:	6028      	str	r0, [r5, #0]
 8008e32:	0635      	lsls	r5, r6, #24
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	d501      	bpl.n	8008e3c <_printf_i+0x1cc>
 8008e38:	6019      	str	r1, [r3, #0]
 8008e3a:	e002      	b.n	8008e42 <_printf_i+0x1d2>
 8008e3c:	0670      	lsls	r0, r6, #25
 8008e3e:	d5fb      	bpl.n	8008e38 <_printf_i+0x1c8>
 8008e40:	8019      	strh	r1, [r3, #0]
 8008e42:	2300      	movs	r3, #0
 8008e44:	6123      	str	r3, [r4, #16]
 8008e46:	4615      	mov	r5, r2
 8008e48:	e7ba      	b.n	8008dc0 <_printf_i+0x150>
 8008e4a:	682b      	ldr	r3, [r5, #0]
 8008e4c:	1d1a      	adds	r2, r3, #4
 8008e4e:	602a      	str	r2, [r5, #0]
 8008e50:	681d      	ldr	r5, [r3, #0]
 8008e52:	6862      	ldr	r2, [r4, #4]
 8008e54:	2100      	movs	r1, #0
 8008e56:	4628      	mov	r0, r5
 8008e58:	f7f7 fa4a 	bl	80002f0 <memchr>
 8008e5c:	b108      	cbz	r0, 8008e62 <_printf_i+0x1f2>
 8008e5e:	1b40      	subs	r0, r0, r5
 8008e60:	6060      	str	r0, [r4, #4]
 8008e62:	6863      	ldr	r3, [r4, #4]
 8008e64:	6123      	str	r3, [r4, #16]
 8008e66:	2300      	movs	r3, #0
 8008e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e6c:	e7a8      	b.n	8008dc0 <_printf_i+0x150>
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	462a      	mov	r2, r5
 8008e72:	4649      	mov	r1, r9
 8008e74:	4640      	mov	r0, r8
 8008e76:	47d0      	blx	sl
 8008e78:	3001      	adds	r0, #1
 8008e7a:	d0ab      	beq.n	8008dd4 <_printf_i+0x164>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	079b      	lsls	r3, r3, #30
 8008e80:	d413      	bmi.n	8008eaa <_printf_i+0x23a>
 8008e82:	68e0      	ldr	r0, [r4, #12]
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	4298      	cmp	r0, r3
 8008e88:	bfb8      	it	lt
 8008e8a:	4618      	movlt	r0, r3
 8008e8c:	e7a4      	b.n	8008dd8 <_printf_i+0x168>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	4632      	mov	r2, r6
 8008e92:	4649      	mov	r1, r9
 8008e94:	4640      	mov	r0, r8
 8008e96:	47d0      	blx	sl
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d09b      	beq.n	8008dd4 <_printf_i+0x164>
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	68e3      	ldr	r3, [r4, #12]
 8008ea0:	9903      	ldr	r1, [sp, #12]
 8008ea2:	1a5b      	subs	r3, r3, r1
 8008ea4:	42ab      	cmp	r3, r5
 8008ea6:	dcf2      	bgt.n	8008e8e <_printf_i+0x21e>
 8008ea8:	e7eb      	b.n	8008e82 <_printf_i+0x212>
 8008eaa:	2500      	movs	r5, #0
 8008eac:	f104 0619 	add.w	r6, r4, #25
 8008eb0:	e7f5      	b.n	8008e9e <_printf_i+0x22e>
 8008eb2:	bf00      	nop
 8008eb4:	0800cd8a 	.word	0x0800cd8a
 8008eb8:	0800cd9b 	.word	0x0800cd9b

08008ebc <_scanf_float>:
 8008ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec0:	b087      	sub	sp, #28
 8008ec2:	4617      	mov	r7, r2
 8008ec4:	9303      	str	r3, [sp, #12]
 8008ec6:	688b      	ldr	r3, [r1, #8]
 8008ec8:	1e5a      	subs	r2, r3, #1
 8008eca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008ece:	bf83      	ittte	hi
 8008ed0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008ed4:	195b      	addhi	r3, r3, r5
 8008ed6:	9302      	strhi	r3, [sp, #8]
 8008ed8:	2300      	movls	r3, #0
 8008eda:	bf86      	itte	hi
 8008edc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ee0:	608b      	strhi	r3, [r1, #8]
 8008ee2:	9302      	strls	r3, [sp, #8]
 8008ee4:	680b      	ldr	r3, [r1, #0]
 8008ee6:	468b      	mov	fp, r1
 8008ee8:	2500      	movs	r5, #0
 8008eea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008eee:	f84b 3b1c 	str.w	r3, [fp], #28
 8008ef2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008ef6:	4680      	mov	r8, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	465e      	mov	r6, fp
 8008efc:	46aa      	mov	sl, r5
 8008efe:	46a9      	mov	r9, r5
 8008f00:	9501      	str	r5, [sp, #4]
 8008f02:	68a2      	ldr	r2, [r4, #8]
 8008f04:	b152      	cbz	r2, 8008f1c <_scanf_float+0x60>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b4e      	cmp	r3, #78	; 0x4e
 8008f0c:	d864      	bhi.n	8008fd8 <_scanf_float+0x11c>
 8008f0e:	2b40      	cmp	r3, #64	; 0x40
 8008f10:	d83c      	bhi.n	8008f8c <_scanf_float+0xd0>
 8008f12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008f16:	b2c8      	uxtb	r0, r1
 8008f18:	280e      	cmp	r0, #14
 8008f1a:	d93a      	bls.n	8008f92 <_scanf_float+0xd6>
 8008f1c:	f1b9 0f00 	cmp.w	r9, #0
 8008f20:	d003      	beq.n	8008f2a <_scanf_float+0x6e>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f2e:	f1ba 0f01 	cmp.w	sl, #1
 8008f32:	f200 8113 	bhi.w	800915c <_scanf_float+0x2a0>
 8008f36:	455e      	cmp	r6, fp
 8008f38:	f200 8105 	bhi.w	8009146 <_scanf_float+0x28a>
 8008f3c:	2501      	movs	r5, #1
 8008f3e:	4628      	mov	r0, r5
 8008f40:	b007      	add	sp, #28
 8008f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008f4a:	2a0d      	cmp	r2, #13
 8008f4c:	d8e6      	bhi.n	8008f1c <_scanf_float+0x60>
 8008f4e:	a101      	add	r1, pc, #4	; (adr r1, 8008f54 <_scanf_float+0x98>)
 8008f50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f54:	08009093 	.word	0x08009093
 8008f58:	08008f1d 	.word	0x08008f1d
 8008f5c:	08008f1d 	.word	0x08008f1d
 8008f60:	08008f1d 	.word	0x08008f1d
 8008f64:	080090f3 	.word	0x080090f3
 8008f68:	080090cb 	.word	0x080090cb
 8008f6c:	08008f1d 	.word	0x08008f1d
 8008f70:	08008f1d 	.word	0x08008f1d
 8008f74:	080090a1 	.word	0x080090a1
 8008f78:	08008f1d 	.word	0x08008f1d
 8008f7c:	08008f1d 	.word	0x08008f1d
 8008f80:	08008f1d 	.word	0x08008f1d
 8008f84:	08008f1d 	.word	0x08008f1d
 8008f88:	08009059 	.word	0x08009059
 8008f8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008f90:	e7db      	b.n	8008f4a <_scanf_float+0x8e>
 8008f92:	290e      	cmp	r1, #14
 8008f94:	d8c2      	bhi.n	8008f1c <_scanf_float+0x60>
 8008f96:	a001      	add	r0, pc, #4	; (adr r0, 8008f9c <_scanf_float+0xe0>)
 8008f98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f9c:	0800904b 	.word	0x0800904b
 8008fa0:	08008f1d 	.word	0x08008f1d
 8008fa4:	0800904b 	.word	0x0800904b
 8008fa8:	080090df 	.word	0x080090df
 8008fac:	08008f1d 	.word	0x08008f1d
 8008fb0:	08008ff9 	.word	0x08008ff9
 8008fb4:	08009035 	.word	0x08009035
 8008fb8:	08009035 	.word	0x08009035
 8008fbc:	08009035 	.word	0x08009035
 8008fc0:	08009035 	.word	0x08009035
 8008fc4:	08009035 	.word	0x08009035
 8008fc8:	08009035 	.word	0x08009035
 8008fcc:	08009035 	.word	0x08009035
 8008fd0:	08009035 	.word	0x08009035
 8008fd4:	08009035 	.word	0x08009035
 8008fd8:	2b6e      	cmp	r3, #110	; 0x6e
 8008fda:	d809      	bhi.n	8008ff0 <_scanf_float+0x134>
 8008fdc:	2b60      	cmp	r3, #96	; 0x60
 8008fde:	d8b2      	bhi.n	8008f46 <_scanf_float+0x8a>
 8008fe0:	2b54      	cmp	r3, #84	; 0x54
 8008fe2:	d077      	beq.n	80090d4 <_scanf_float+0x218>
 8008fe4:	2b59      	cmp	r3, #89	; 0x59
 8008fe6:	d199      	bne.n	8008f1c <_scanf_float+0x60>
 8008fe8:	2d07      	cmp	r5, #7
 8008fea:	d197      	bne.n	8008f1c <_scanf_float+0x60>
 8008fec:	2508      	movs	r5, #8
 8008fee:	e029      	b.n	8009044 <_scanf_float+0x188>
 8008ff0:	2b74      	cmp	r3, #116	; 0x74
 8008ff2:	d06f      	beq.n	80090d4 <_scanf_float+0x218>
 8008ff4:	2b79      	cmp	r3, #121	; 0x79
 8008ff6:	e7f6      	b.n	8008fe6 <_scanf_float+0x12a>
 8008ff8:	6821      	ldr	r1, [r4, #0]
 8008ffa:	05c8      	lsls	r0, r1, #23
 8008ffc:	d51a      	bpl.n	8009034 <_scanf_float+0x178>
 8008ffe:	9b02      	ldr	r3, [sp, #8]
 8009000:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009004:	6021      	str	r1, [r4, #0]
 8009006:	f109 0901 	add.w	r9, r9, #1
 800900a:	b11b      	cbz	r3, 8009014 <_scanf_float+0x158>
 800900c:	3b01      	subs	r3, #1
 800900e:	3201      	adds	r2, #1
 8009010:	9302      	str	r3, [sp, #8]
 8009012:	60a2      	str	r2, [r4, #8]
 8009014:	68a3      	ldr	r3, [r4, #8]
 8009016:	3b01      	subs	r3, #1
 8009018:	60a3      	str	r3, [r4, #8]
 800901a:	6923      	ldr	r3, [r4, #16]
 800901c:	3301      	adds	r3, #1
 800901e:	6123      	str	r3, [r4, #16]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3b01      	subs	r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	607b      	str	r3, [r7, #4]
 8009028:	f340 8084 	ble.w	8009134 <_scanf_float+0x278>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	3301      	adds	r3, #1
 8009030:	603b      	str	r3, [r7, #0]
 8009032:	e766      	b.n	8008f02 <_scanf_float+0x46>
 8009034:	eb1a 0f05 	cmn.w	sl, r5
 8009038:	f47f af70 	bne.w	8008f1c <_scanf_float+0x60>
 800903c:	6822      	ldr	r2, [r4, #0]
 800903e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009042:	6022      	str	r2, [r4, #0]
 8009044:	f806 3b01 	strb.w	r3, [r6], #1
 8009048:	e7e4      	b.n	8009014 <_scanf_float+0x158>
 800904a:	6822      	ldr	r2, [r4, #0]
 800904c:	0610      	lsls	r0, r2, #24
 800904e:	f57f af65 	bpl.w	8008f1c <_scanf_float+0x60>
 8009052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009056:	e7f4      	b.n	8009042 <_scanf_float+0x186>
 8009058:	f1ba 0f00 	cmp.w	sl, #0
 800905c:	d10e      	bne.n	800907c <_scanf_float+0x1c0>
 800905e:	f1b9 0f00 	cmp.w	r9, #0
 8009062:	d10e      	bne.n	8009082 <_scanf_float+0x1c6>
 8009064:	6822      	ldr	r2, [r4, #0]
 8009066:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800906a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800906e:	d108      	bne.n	8009082 <_scanf_float+0x1c6>
 8009070:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009074:	6022      	str	r2, [r4, #0]
 8009076:	f04f 0a01 	mov.w	sl, #1
 800907a:	e7e3      	b.n	8009044 <_scanf_float+0x188>
 800907c:	f1ba 0f02 	cmp.w	sl, #2
 8009080:	d055      	beq.n	800912e <_scanf_float+0x272>
 8009082:	2d01      	cmp	r5, #1
 8009084:	d002      	beq.n	800908c <_scanf_float+0x1d0>
 8009086:	2d04      	cmp	r5, #4
 8009088:	f47f af48 	bne.w	8008f1c <_scanf_float+0x60>
 800908c:	3501      	adds	r5, #1
 800908e:	b2ed      	uxtb	r5, r5
 8009090:	e7d8      	b.n	8009044 <_scanf_float+0x188>
 8009092:	f1ba 0f01 	cmp.w	sl, #1
 8009096:	f47f af41 	bne.w	8008f1c <_scanf_float+0x60>
 800909a:	f04f 0a02 	mov.w	sl, #2
 800909e:	e7d1      	b.n	8009044 <_scanf_float+0x188>
 80090a0:	b97d      	cbnz	r5, 80090c2 <_scanf_float+0x206>
 80090a2:	f1b9 0f00 	cmp.w	r9, #0
 80090a6:	f47f af3c 	bne.w	8008f22 <_scanf_float+0x66>
 80090aa:	6822      	ldr	r2, [r4, #0]
 80090ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090b4:	f47f af39 	bne.w	8008f2a <_scanf_float+0x6e>
 80090b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090bc:	6022      	str	r2, [r4, #0]
 80090be:	2501      	movs	r5, #1
 80090c0:	e7c0      	b.n	8009044 <_scanf_float+0x188>
 80090c2:	2d03      	cmp	r5, #3
 80090c4:	d0e2      	beq.n	800908c <_scanf_float+0x1d0>
 80090c6:	2d05      	cmp	r5, #5
 80090c8:	e7de      	b.n	8009088 <_scanf_float+0x1cc>
 80090ca:	2d02      	cmp	r5, #2
 80090cc:	f47f af26 	bne.w	8008f1c <_scanf_float+0x60>
 80090d0:	2503      	movs	r5, #3
 80090d2:	e7b7      	b.n	8009044 <_scanf_float+0x188>
 80090d4:	2d06      	cmp	r5, #6
 80090d6:	f47f af21 	bne.w	8008f1c <_scanf_float+0x60>
 80090da:	2507      	movs	r5, #7
 80090dc:	e7b2      	b.n	8009044 <_scanf_float+0x188>
 80090de:	6822      	ldr	r2, [r4, #0]
 80090e0:	0591      	lsls	r1, r2, #22
 80090e2:	f57f af1b 	bpl.w	8008f1c <_scanf_float+0x60>
 80090e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80090ea:	6022      	str	r2, [r4, #0]
 80090ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80090f0:	e7a8      	b.n	8009044 <_scanf_float+0x188>
 80090f2:	6822      	ldr	r2, [r4, #0]
 80090f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80090f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80090fc:	d006      	beq.n	800910c <_scanf_float+0x250>
 80090fe:	0550      	lsls	r0, r2, #21
 8009100:	f57f af0c 	bpl.w	8008f1c <_scanf_float+0x60>
 8009104:	f1b9 0f00 	cmp.w	r9, #0
 8009108:	f43f af0f 	beq.w	8008f2a <_scanf_float+0x6e>
 800910c:	0591      	lsls	r1, r2, #22
 800910e:	bf58      	it	pl
 8009110:	9901      	ldrpl	r1, [sp, #4]
 8009112:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009116:	bf58      	it	pl
 8009118:	eba9 0101 	subpl.w	r1, r9, r1
 800911c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009120:	bf58      	it	pl
 8009122:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009126:	6022      	str	r2, [r4, #0]
 8009128:	f04f 0900 	mov.w	r9, #0
 800912c:	e78a      	b.n	8009044 <_scanf_float+0x188>
 800912e:	f04f 0a03 	mov.w	sl, #3
 8009132:	e787      	b.n	8009044 <_scanf_float+0x188>
 8009134:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009138:	4639      	mov	r1, r7
 800913a:	4640      	mov	r0, r8
 800913c:	4798      	blx	r3
 800913e:	2800      	cmp	r0, #0
 8009140:	f43f aedf 	beq.w	8008f02 <_scanf_float+0x46>
 8009144:	e6ea      	b.n	8008f1c <_scanf_float+0x60>
 8009146:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800914a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800914e:	463a      	mov	r2, r7
 8009150:	4640      	mov	r0, r8
 8009152:	4798      	blx	r3
 8009154:	6923      	ldr	r3, [r4, #16]
 8009156:	3b01      	subs	r3, #1
 8009158:	6123      	str	r3, [r4, #16]
 800915a:	e6ec      	b.n	8008f36 <_scanf_float+0x7a>
 800915c:	1e6b      	subs	r3, r5, #1
 800915e:	2b06      	cmp	r3, #6
 8009160:	d825      	bhi.n	80091ae <_scanf_float+0x2f2>
 8009162:	2d02      	cmp	r5, #2
 8009164:	d836      	bhi.n	80091d4 <_scanf_float+0x318>
 8009166:	455e      	cmp	r6, fp
 8009168:	f67f aee8 	bls.w	8008f3c <_scanf_float+0x80>
 800916c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009170:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009174:	463a      	mov	r2, r7
 8009176:	4640      	mov	r0, r8
 8009178:	4798      	blx	r3
 800917a:	6923      	ldr	r3, [r4, #16]
 800917c:	3b01      	subs	r3, #1
 800917e:	6123      	str	r3, [r4, #16]
 8009180:	e7f1      	b.n	8009166 <_scanf_float+0x2aa>
 8009182:	9802      	ldr	r0, [sp, #8]
 8009184:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009188:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800918c:	9002      	str	r0, [sp, #8]
 800918e:	463a      	mov	r2, r7
 8009190:	4640      	mov	r0, r8
 8009192:	4798      	blx	r3
 8009194:	6923      	ldr	r3, [r4, #16]
 8009196:	3b01      	subs	r3, #1
 8009198:	6123      	str	r3, [r4, #16]
 800919a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800919e:	fa5f fa8a 	uxtb.w	sl, sl
 80091a2:	f1ba 0f02 	cmp.w	sl, #2
 80091a6:	d1ec      	bne.n	8009182 <_scanf_float+0x2c6>
 80091a8:	3d03      	subs	r5, #3
 80091aa:	b2ed      	uxtb	r5, r5
 80091ac:	1b76      	subs	r6, r6, r5
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	05da      	lsls	r2, r3, #23
 80091b2:	d52f      	bpl.n	8009214 <_scanf_float+0x358>
 80091b4:	055b      	lsls	r3, r3, #21
 80091b6:	d510      	bpl.n	80091da <_scanf_float+0x31e>
 80091b8:	455e      	cmp	r6, fp
 80091ba:	f67f aebf 	bls.w	8008f3c <_scanf_float+0x80>
 80091be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091c6:	463a      	mov	r2, r7
 80091c8:	4640      	mov	r0, r8
 80091ca:	4798      	blx	r3
 80091cc:	6923      	ldr	r3, [r4, #16]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	6123      	str	r3, [r4, #16]
 80091d2:	e7f1      	b.n	80091b8 <_scanf_float+0x2fc>
 80091d4:	46aa      	mov	sl, r5
 80091d6:	9602      	str	r6, [sp, #8]
 80091d8:	e7df      	b.n	800919a <_scanf_float+0x2de>
 80091da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80091de:	6923      	ldr	r3, [r4, #16]
 80091e0:	2965      	cmp	r1, #101	; 0x65
 80091e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80091e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80091ea:	6123      	str	r3, [r4, #16]
 80091ec:	d00c      	beq.n	8009208 <_scanf_float+0x34c>
 80091ee:	2945      	cmp	r1, #69	; 0x45
 80091f0:	d00a      	beq.n	8009208 <_scanf_float+0x34c>
 80091f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091f6:	463a      	mov	r2, r7
 80091f8:	4640      	mov	r0, r8
 80091fa:	4798      	blx	r3
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009202:	3b01      	subs	r3, #1
 8009204:	1eb5      	subs	r5, r6, #2
 8009206:	6123      	str	r3, [r4, #16]
 8009208:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800920c:	463a      	mov	r2, r7
 800920e:	4640      	mov	r0, r8
 8009210:	4798      	blx	r3
 8009212:	462e      	mov	r6, r5
 8009214:	6825      	ldr	r5, [r4, #0]
 8009216:	f015 0510 	ands.w	r5, r5, #16
 800921a:	d14e      	bne.n	80092ba <_scanf_float+0x3fe>
 800921c:	7035      	strb	r5, [r6, #0]
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009228:	d119      	bne.n	800925e <_scanf_float+0x3a2>
 800922a:	9b01      	ldr	r3, [sp, #4]
 800922c:	454b      	cmp	r3, r9
 800922e:	eba3 0209 	sub.w	r2, r3, r9
 8009232:	d121      	bne.n	8009278 <_scanf_float+0x3bc>
 8009234:	2200      	movs	r2, #0
 8009236:	4659      	mov	r1, fp
 8009238:	4640      	mov	r0, r8
 800923a:	f000 fe3b 	bl	8009eb4 <_strtod_r>
 800923e:	6822      	ldr	r2, [r4, #0]
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	f012 0f02 	tst.w	r2, #2
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	d021      	beq.n	800928e <_scanf_float+0x3d2>
 800924a:	9903      	ldr	r1, [sp, #12]
 800924c:	1d1a      	adds	r2, r3, #4
 800924e:	600a      	str	r2, [r1, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	ed83 0b00 	vstr	d0, [r3]
 8009256:	68e3      	ldr	r3, [r4, #12]
 8009258:	3301      	adds	r3, #1
 800925a:	60e3      	str	r3, [r4, #12]
 800925c:	e66f      	b.n	8008f3e <_scanf_float+0x82>
 800925e:	9b04      	ldr	r3, [sp, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d0e7      	beq.n	8009234 <_scanf_float+0x378>
 8009264:	9905      	ldr	r1, [sp, #20]
 8009266:	230a      	movs	r3, #10
 8009268:	462a      	mov	r2, r5
 800926a:	3101      	adds	r1, #1
 800926c:	4640      	mov	r0, r8
 800926e:	f000 fea9 	bl	8009fc4 <_strtol_r>
 8009272:	9b04      	ldr	r3, [sp, #16]
 8009274:	9e05      	ldr	r6, [sp, #20]
 8009276:	1ac2      	subs	r2, r0, r3
 8009278:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800927c:	429e      	cmp	r6, r3
 800927e:	bf28      	it	cs
 8009280:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009284:	490e      	ldr	r1, [pc, #56]	; (80092c0 <_scanf_float+0x404>)
 8009286:	4630      	mov	r0, r6
 8009288:	f000 f824 	bl	80092d4 <siprintf>
 800928c:	e7d2      	b.n	8009234 <_scanf_float+0x378>
 800928e:	9903      	ldr	r1, [sp, #12]
 8009290:	f012 0f04 	tst.w	r2, #4
 8009294:	f103 0204 	add.w	r2, r3, #4
 8009298:	600a      	str	r2, [r1, #0]
 800929a:	d1d9      	bne.n	8009250 <_scanf_float+0x394>
 800929c:	eeb4 0b40 	vcmp.f64	d0, d0
 80092a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a4:	681e      	ldr	r6, [r3, #0]
 80092a6:	d705      	bvc.n	80092b4 <_scanf_float+0x3f8>
 80092a8:	4806      	ldr	r0, [pc, #24]	; (80092c4 <_scanf_float+0x408>)
 80092aa:	f000 f80d 	bl	80092c8 <nanf>
 80092ae:	ed86 0a00 	vstr	s0, [r6]
 80092b2:	e7d0      	b.n	8009256 <_scanf_float+0x39a>
 80092b4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80092b8:	e7f9      	b.n	80092ae <_scanf_float+0x3f2>
 80092ba:	2500      	movs	r5, #0
 80092bc:	e63f      	b.n	8008f3e <_scanf_float+0x82>
 80092be:	bf00      	nop
 80092c0:	0800cdac 	.word	0x0800cdac
 80092c4:	0800d1b8 	.word	0x0800d1b8

080092c8 <nanf>:
 80092c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80092d0 <nanf+0x8>
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	7fc00000 	.word	0x7fc00000

080092d4 <siprintf>:
 80092d4:	b40e      	push	{r1, r2, r3}
 80092d6:	b500      	push	{lr}
 80092d8:	b09c      	sub	sp, #112	; 0x70
 80092da:	ab1d      	add	r3, sp, #116	; 0x74
 80092dc:	9002      	str	r0, [sp, #8]
 80092de:	9006      	str	r0, [sp, #24]
 80092e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092e4:	4809      	ldr	r0, [pc, #36]	; (800930c <siprintf+0x38>)
 80092e6:	9107      	str	r1, [sp, #28]
 80092e8:	9104      	str	r1, [sp, #16]
 80092ea:	4909      	ldr	r1, [pc, #36]	; (8009310 <siprintf+0x3c>)
 80092ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80092f0:	9105      	str	r1, [sp, #20]
 80092f2:	6800      	ldr	r0, [r0, #0]
 80092f4:	9301      	str	r3, [sp, #4]
 80092f6:	a902      	add	r1, sp, #8
 80092f8:	f002 fe0c 	bl	800bf14 <_svfiprintf_r>
 80092fc:	9b02      	ldr	r3, [sp, #8]
 80092fe:	2200      	movs	r2, #0
 8009300:	701a      	strb	r2, [r3, #0]
 8009302:	b01c      	add	sp, #112	; 0x70
 8009304:	f85d eb04 	ldr.w	lr, [sp], #4
 8009308:	b003      	add	sp, #12
 800930a:	4770      	bx	lr
 800930c:	2400001c 	.word	0x2400001c
 8009310:	ffff0208 	.word	0xffff0208

08009314 <sulp>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	4604      	mov	r4, r0
 8009318:	460d      	mov	r5, r1
 800931a:	4616      	mov	r6, r2
 800931c:	ec45 4b10 	vmov	d0, r4, r5
 8009320:	f002 fb5a 	bl	800b9d8 <__ulp>
 8009324:	b17e      	cbz	r6, 8009346 <sulp+0x32>
 8009326:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800932a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800932e:	2b00      	cmp	r3, #0
 8009330:	dd09      	ble.n	8009346 <sulp+0x32>
 8009332:	051b      	lsls	r3, r3, #20
 8009334:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009338:	2000      	movs	r0, #0
 800933a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800933e:	ec41 0b17 	vmov	d7, r0, r1
 8009342:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009346:	bd70      	pop	{r4, r5, r6, pc}

08009348 <_strtod_l>:
 8009348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	ed2d 8b0e 	vpush	{d8-d14}
 8009350:	b097      	sub	sp, #92	; 0x5c
 8009352:	461f      	mov	r7, r3
 8009354:	2300      	movs	r3, #0
 8009356:	9312      	str	r3, [sp, #72]	; 0x48
 8009358:	4ba1      	ldr	r3, [pc, #644]	; (80095e0 <_strtod_l+0x298>)
 800935a:	920d      	str	r2, [sp, #52]	; 0x34
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	9307      	str	r3, [sp, #28]
 8009360:	4604      	mov	r4, r0
 8009362:	4618      	mov	r0, r3
 8009364:	468b      	mov	fp, r1
 8009366:	f7f6 ffbb 	bl	80002e0 <strlen>
 800936a:	f04f 0800 	mov.w	r8, #0
 800936e:	4605      	mov	r5, r0
 8009370:	f04f 0900 	mov.w	r9, #0
 8009374:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009378:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800937a:	7813      	ldrb	r3, [r2, #0]
 800937c:	2b2b      	cmp	r3, #43	; 0x2b
 800937e:	d04d      	beq.n	800941c <_strtod_l+0xd4>
 8009380:	d83a      	bhi.n	80093f8 <_strtod_l+0xb0>
 8009382:	2b0d      	cmp	r3, #13
 8009384:	d833      	bhi.n	80093ee <_strtod_l+0xa6>
 8009386:	2b08      	cmp	r3, #8
 8009388:	d833      	bhi.n	80093f2 <_strtod_l+0xaa>
 800938a:	2b00      	cmp	r3, #0
 800938c:	d03d      	beq.n	800940a <_strtod_l+0xc2>
 800938e:	2300      	movs	r3, #0
 8009390:	9308      	str	r3, [sp, #32]
 8009392:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009394:	7833      	ldrb	r3, [r6, #0]
 8009396:	2b30      	cmp	r3, #48	; 0x30
 8009398:	f040 80b0 	bne.w	80094fc <_strtod_l+0x1b4>
 800939c:	7873      	ldrb	r3, [r6, #1]
 800939e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093a2:	2b58      	cmp	r3, #88	; 0x58
 80093a4:	d167      	bne.n	8009476 <_strtod_l+0x12e>
 80093a6:	9b08      	ldr	r3, [sp, #32]
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	ab12      	add	r3, sp, #72	; 0x48
 80093ac:	9702      	str	r7, [sp, #8]
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	4a8c      	ldr	r2, [pc, #560]	; (80095e4 <_strtod_l+0x29c>)
 80093b2:	ab13      	add	r3, sp, #76	; 0x4c
 80093b4:	a911      	add	r1, sp, #68	; 0x44
 80093b6:	4620      	mov	r0, r4
 80093b8:	f001 fc68 	bl	800ac8c <__gethex>
 80093bc:	f010 0507 	ands.w	r5, r0, #7
 80093c0:	4607      	mov	r7, r0
 80093c2:	d005      	beq.n	80093d0 <_strtod_l+0x88>
 80093c4:	2d06      	cmp	r5, #6
 80093c6:	d12b      	bne.n	8009420 <_strtod_l+0xd8>
 80093c8:	3601      	adds	r6, #1
 80093ca:	2300      	movs	r3, #0
 80093cc:	9611      	str	r6, [sp, #68]	; 0x44
 80093ce:	9308      	str	r3, [sp, #32]
 80093d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f040 854e 	bne.w	8009e74 <_strtod_l+0xb2c>
 80093d8:	9b08      	ldr	r3, [sp, #32]
 80093da:	b1e3      	cbz	r3, 8009416 <_strtod_l+0xce>
 80093dc:	ec49 8b17 	vmov	d7, r8, r9
 80093e0:	eeb1 0b47 	vneg.f64	d0, d7
 80093e4:	b017      	add	sp, #92	; 0x5c
 80093e6:	ecbd 8b0e 	vpop	{d8-d14}
 80093ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ee:	2b20      	cmp	r3, #32
 80093f0:	d1cd      	bne.n	800938e <_strtod_l+0x46>
 80093f2:	3201      	adds	r2, #1
 80093f4:	9211      	str	r2, [sp, #68]	; 0x44
 80093f6:	e7bf      	b.n	8009378 <_strtod_l+0x30>
 80093f8:	2b2d      	cmp	r3, #45	; 0x2d
 80093fa:	d1c8      	bne.n	800938e <_strtod_l+0x46>
 80093fc:	2301      	movs	r3, #1
 80093fe:	9308      	str	r3, [sp, #32]
 8009400:	1c53      	adds	r3, r2, #1
 8009402:	9311      	str	r3, [sp, #68]	; 0x44
 8009404:	7853      	ldrb	r3, [r2, #1]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1c3      	bne.n	8009392 <_strtod_l+0x4a>
 800940a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800940c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009410:	2b00      	cmp	r3, #0
 8009412:	f040 852d 	bne.w	8009e70 <_strtod_l+0xb28>
 8009416:	ec49 8b10 	vmov	d0, r8, r9
 800941a:	e7e3      	b.n	80093e4 <_strtod_l+0x9c>
 800941c:	2300      	movs	r3, #0
 800941e:	e7ee      	b.n	80093fe <_strtod_l+0xb6>
 8009420:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009422:	b13a      	cbz	r2, 8009434 <_strtod_l+0xec>
 8009424:	2135      	movs	r1, #53	; 0x35
 8009426:	a814      	add	r0, sp, #80	; 0x50
 8009428:	f002 fbde 	bl	800bbe8 <__copybits>
 800942c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800942e:	4620      	mov	r0, r4
 8009430:	f001 ffa0 	bl	800b374 <_Bfree>
 8009434:	3d01      	subs	r5, #1
 8009436:	2d04      	cmp	r5, #4
 8009438:	d806      	bhi.n	8009448 <_strtod_l+0x100>
 800943a:	e8df f005 	tbb	[pc, r5]
 800943e:	030a      	.short	0x030a
 8009440:	1714      	.short	0x1714
 8009442:	0a          	.byte	0x0a
 8009443:	00          	.byte	0x00
 8009444:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8009448:	073f      	lsls	r7, r7, #28
 800944a:	d5c1      	bpl.n	80093d0 <_strtod_l+0x88>
 800944c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009450:	e7be      	b.n	80093d0 <_strtod_l+0x88>
 8009452:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8009456:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009458:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800945c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009460:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009464:	e7f0      	b.n	8009448 <_strtod_l+0x100>
 8009466:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80095e8 <_strtod_l+0x2a0>
 800946a:	e7ed      	b.n	8009448 <_strtod_l+0x100>
 800946c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009470:	f04f 38ff 	mov.w	r8, #4294967295
 8009474:	e7e8      	b.n	8009448 <_strtod_l+0x100>
 8009476:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009478:	1c5a      	adds	r2, r3, #1
 800947a:	9211      	str	r2, [sp, #68]	; 0x44
 800947c:	785b      	ldrb	r3, [r3, #1]
 800947e:	2b30      	cmp	r3, #48	; 0x30
 8009480:	d0f9      	beq.n	8009476 <_strtod_l+0x12e>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0a4      	beq.n	80093d0 <_strtod_l+0x88>
 8009486:	2301      	movs	r3, #1
 8009488:	f04f 0a00 	mov.w	sl, #0
 800948c:	9304      	str	r3, [sp, #16]
 800948e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009490:	930a      	str	r3, [sp, #40]	; 0x28
 8009492:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009496:	f8cd a018 	str.w	sl, [sp, #24]
 800949a:	220a      	movs	r2, #10
 800949c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800949e:	7807      	ldrb	r7, [r0, #0]
 80094a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80094a4:	b2d9      	uxtb	r1, r3
 80094a6:	2909      	cmp	r1, #9
 80094a8:	d92a      	bls.n	8009500 <_strtod_l+0x1b8>
 80094aa:	9907      	ldr	r1, [sp, #28]
 80094ac:	462a      	mov	r2, r5
 80094ae:	f002 fe4b 	bl	800c148 <strncmp>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d033      	beq.n	800951e <_strtod_l+0x1d6>
 80094b6:	2000      	movs	r0, #0
 80094b8:	9b06      	ldr	r3, [sp, #24]
 80094ba:	463a      	mov	r2, r7
 80094bc:	4601      	mov	r1, r0
 80094be:	4607      	mov	r7, r0
 80094c0:	2a65      	cmp	r2, #101	; 0x65
 80094c2:	d001      	beq.n	80094c8 <_strtod_l+0x180>
 80094c4:	2a45      	cmp	r2, #69	; 0x45
 80094c6:	d117      	bne.n	80094f8 <_strtod_l+0x1b0>
 80094c8:	b91b      	cbnz	r3, 80094d2 <_strtod_l+0x18a>
 80094ca:	9b04      	ldr	r3, [sp, #16]
 80094cc:	4303      	orrs	r3, r0
 80094ce:	d09c      	beq.n	800940a <_strtod_l+0xc2>
 80094d0:	2300      	movs	r3, #0
 80094d2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80094d6:	f10b 0201 	add.w	r2, fp, #1
 80094da:	9211      	str	r2, [sp, #68]	; 0x44
 80094dc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80094e0:	2a2b      	cmp	r2, #43	; 0x2b
 80094e2:	d071      	beq.n	80095c8 <_strtod_l+0x280>
 80094e4:	2a2d      	cmp	r2, #45	; 0x2d
 80094e6:	d077      	beq.n	80095d8 <_strtod_l+0x290>
 80094e8:	f04f 0e00 	mov.w	lr, #0
 80094ec:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80094f0:	2d09      	cmp	r5, #9
 80094f2:	d97f      	bls.n	80095f4 <_strtod_l+0x2ac>
 80094f4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80094f8:	2500      	movs	r5, #0
 80094fa:	e09b      	b.n	8009634 <_strtod_l+0x2ec>
 80094fc:	2300      	movs	r3, #0
 80094fe:	e7c3      	b.n	8009488 <_strtod_l+0x140>
 8009500:	9906      	ldr	r1, [sp, #24]
 8009502:	2908      	cmp	r1, #8
 8009504:	bfdd      	ittte	le
 8009506:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009508:	fb02 3301 	mlale	r3, r2, r1, r3
 800950c:	9309      	strle	r3, [sp, #36]	; 0x24
 800950e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009512:	9b06      	ldr	r3, [sp, #24]
 8009514:	3001      	adds	r0, #1
 8009516:	3301      	adds	r3, #1
 8009518:	9306      	str	r3, [sp, #24]
 800951a:	9011      	str	r0, [sp, #68]	; 0x44
 800951c:	e7be      	b.n	800949c <_strtod_l+0x154>
 800951e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009520:	195a      	adds	r2, r3, r5
 8009522:	9211      	str	r2, [sp, #68]	; 0x44
 8009524:	5d5a      	ldrb	r2, [r3, r5]
 8009526:	9b06      	ldr	r3, [sp, #24]
 8009528:	b3a3      	cbz	r3, 8009594 <_strtod_l+0x24c>
 800952a:	4607      	mov	r7, r0
 800952c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009530:	2909      	cmp	r1, #9
 8009532:	d912      	bls.n	800955a <_strtod_l+0x212>
 8009534:	2101      	movs	r1, #1
 8009536:	e7c3      	b.n	80094c0 <_strtod_l+0x178>
 8009538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	9211      	str	r2, [sp, #68]	; 0x44
 800953e:	785a      	ldrb	r2, [r3, #1]
 8009540:	3001      	adds	r0, #1
 8009542:	2a30      	cmp	r2, #48	; 0x30
 8009544:	d0f8      	beq.n	8009538 <_strtod_l+0x1f0>
 8009546:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800954a:	2b08      	cmp	r3, #8
 800954c:	f200 8497 	bhi.w	8009e7e <_strtod_l+0xb36>
 8009550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009552:	930a      	str	r3, [sp, #40]	; 0x28
 8009554:	4607      	mov	r7, r0
 8009556:	2000      	movs	r0, #0
 8009558:	4603      	mov	r3, r0
 800955a:	3a30      	subs	r2, #48	; 0x30
 800955c:	f100 0101 	add.w	r1, r0, #1
 8009560:	d012      	beq.n	8009588 <_strtod_l+0x240>
 8009562:	440f      	add	r7, r1
 8009564:	eb00 0c03 	add.w	ip, r0, r3
 8009568:	4619      	mov	r1, r3
 800956a:	250a      	movs	r5, #10
 800956c:	4561      	cmp	r1, ip
 800956e:	d113      	bne.n	8009598 <_strtod_l+0x250>
 8009570:	1819      	adds	r1, r3, r0
 8009572:	2908      	cmp	r1, #8
 8009574:	f103 0301 	add.w	r3, r3, #1
 8009578:	4403      	add	r3, r0
 800957a:	dc1c      	bgt.n	80095b6 <_strtod_l+0x26e>
 800957c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800957e:	210a      	movs	r1, #10
 8009580:	fb01 2200 	mla	r2, r1, r0, r2
 8009584:	9209      	str	r2, [sp, #36]	; 0x24
 8009586:	2100      	movs	r1, #0
 8009588:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800958a:	1c50      	adds	r0, r2, #1
 800958c:	9011      	str	r0, [sp, #68]	; 0x44
 800958e:	7852      	ldrb	r2, [r2, #1]
 8009590:	4608      	mov	r0, r1
 8009592:	e7cb      	b.n	800952c <_strtod_l+0x1e4>
 8009594:	9806      	ldr	r0, [sp, #24]
 8009596:	e7d4      	b.n	8009542 <_strtod_l+0x1fa>
 8009598:	2908      	cmp	r1, #8
 800959a:	dc04      	bgt.n	80095a6 <_strtod_l+0x25e>
 800959c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800959e:	436e      	muls	r6, r5
 80095a0:	9609      	str	r6, [sp, #36]	; 0x24
 80095a2:	3101      	adds	r1, #1
 80095a4:	e7e2      	b.n	800956c <_strtod_l+0x224>
 80095a6:	f101 0e01 	add.w	lr, r1, #1
 80095aa:	f1be 0f10 	cmp.w	lr, #16
 80095ae:	bfd8      	it	le
 80095b0:	fb05 fa0a 	mulle.w	sl, r5, sl
 80095b4:	e7f5      	b.n	80095a2 <_strtod_l+0x25a>
 80095b6:	2b10      	cmp	r3, #16
 80095b8:	bfdc      	itt	le
 80095ba:	210a      	movle	r1, #10
 80095bc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80095c0:	e7e1      	b.n	8009586 <_strtod_l+0x23e>
 80095c2:	2700      	movs	r7, #0
 80095c4:	2101      	movs	r1, #1
 80095c6:	e780      	b.n	80094ca <_strtod_l+0x182>
 80095c8:	f04f 0e00 	mov.w	lr, #0
 80095cc:	f10b 0202 	add.w	r2, fp, #2
 80095d0:	9211      	str	r2, [sp, #68]	; 0x44
 80095d2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80095d6:	e789      	b.n	80094ec <_strtod_l+0x1a4>
 80095d8:	f04f 0e01 	mov.w	lr, #1
 80095dc:	e7f6      	b.n	80095cc <_strtod_l+0x284>
 80095de:	bf00      	nop
 80095e0:	0800d000 	.word	0x0800d000
 80095e4:	0800cdb4 	.word	0x0800cdb4
 80095e8:	7ff00000 	.word	0x7ff00000
 80095ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095ee:	1c55      	adds	r5, r2, #1
 80095f0:	9511      	str	r5, [sp, #68]	; 0x44
 80095f2:	7852      	ldrb	r2, [r2, #1]
 80095f4:	2a30      	cmp	r2, #48	; 0x30
 80095f6:	d0f9      	beq.n	80095ec <_strtod_l+0x2a4>
 80095f8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80095fc:	2d08      	cmp	r5, #8
 80095fe:	f63f af7b 	bhi.w	80094f8 <_strtod_l+0x1b0>
 8009602:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009606:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009608:	9207      	str	r2, [sp, #28]
 800960a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800960c:	1c55      	adds	r5, r2, #1
 800960e:	9511      	str	r5, [sp, #68]	; 0x44
 8009610:	7852      	ldrb	r2, [r2, #1]
 8009612:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009616:	2e09      	cmp	r6, #9
 8009618:	d937      	bls.n	800968a <_strtod_l+0x342>
 800961a:	9e07      	ldr	r6, [sp, #28]
 800961c:	1bad      	subs	r5, r5, r6
 800961e:	2d08      	cmp	r5, #8
 8009620:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009624:	dc02      	bgt.n	800962c <_strtod_l+0x2e4>
 8009626:	4565      	cmp	r5, ip
 8009628:	bfa8      	it	ge
 800962a:	4665      	movge	r5, ip
 800962c:	f1be 0f00 	cmp.w	lr, #0
 8009630:	d000      	beq.n	8009634 <_strtod_l+0x2ec>
 8009632:	426d      	negs	r5, r5
 8009634:	2b00      	cmp	r3, #0
 8009636:	d14d      	bne.n	80096d4 <_strtod_l+0x38c>
 8009638:	9b04      	ldr	r3, [sp, #16]
 800963a:	4303      	orrs	r3, r0
 800963c:	f47f aec8 	bne.w	80093d0 <_strtod_l+0x88>
 8009640:	2900      	cmp	r1, #0
 8009642:	f47f aee2 	bne.w	800940a <_strtod_l+0xc2>
 8009646:	2a69      	cmp	r2, #105	; 0x69
 8009648:	d027      	beq.n	800969a <_strtod_l+0x352>
 800964a:	dc24      	bgt.n	8009696 <_strtod_l+0x34e>
 800964c:	2a49      	cmp	r2, #73	; 0x49
 800964e:	d024      	beq.n	800969a <_strtod_l+0x352>
 8009650:	2a4e      	cmp	r2, #78	; 0x4e
 8009652:	f47f aeda 	bne.w	800940a <_strtod_l+0xc2>
 8009656:	4996      	ldr	r1, [pc, #600]	; (80098b0 <_strtod_l+0x568>)
 8009658:	a811      	add	r0, sp, #68	; 0x44
 800965a:	f001 fd6f 	bl	800b13c <__match>
 800965e:	2800      	cmp	r0, #0
 8009660:	f43f aed3 	beq.w	800940a <_strtod_l+0xc2>
 8009664:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	2b28      	cmp	r3, #40	; 0x28
 800966a:	d12d      	bne.n	80096c8 <_strtod_l+0x380>
 800966c:	4991      	ldr	r1, [pc, #580]	; (80098b4 <_strtod_l+0x56c>)
 800966e:	aa14      	add	r2, sp, #80	; 0x50
 8009670:	a811      	add	r0, sp, #68	; 0x44
 8009672:	f001 fd77 	bl	800b164 <__hexnan>
 8009676:	2805      	cmp	r0, #5
 8009678:	d126      	bne.n	80096c8 <_strtod_l+0x380>
 800967a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800967c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009680:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009684:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009688:	e6a2      	b.n	80093d0 <_strtod_l+0x88>
 800968a:	250a      	movs	r5, #10
 800968c:	fb05 250c 	mla	r5, r5, ip, r2
 8009690:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8009694:	e7b9      	b.n	800960a <_strtod_l+0x2c2>
 8009696:	2a6e      	cmp	r2, #110	; 0x6e
 8009698:	e7db      	b.n	8009652 <_strtod_l+0x30a>
 800969a:	4987      	ldr	r1, [pc, #540]	; (80098b8 <_strtod_l+0x570>)
 800969c:	a811      	add	r0, sp, #68	; 0x44
 800969e:	f001 fd4d 	bl	800b13c <__match>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	f43f aeb1 	beq.w	800940a <_strtod_l+0xc2>
 80096a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096aa:	4984      	ldr	r1, [pc, #528]	; (80098bc <_strtod_l+0x574>)
 80096ac:	3b01      	subs	r3, #1
 80096ae:	a811      	add	r0, sp, #68	; 0x44
 80096b0:	9311      	str	r3, [sp, #68]	; 0x44
 80096b2:	f001 fd43 	bl	800b13c <__match>
 80096b6:	b910      	cbnz	r0, 80096be <_strtod_l+0x376>
 80096b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096ba:	3301      	adds	r3, #1
 80096bc:	9311      	str	r3, [sp, #68]	; 0x44
 80096be:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80098d0 <_strtod_l+0x588>
 80096c2:	f04f 0800 	mov.w	r8, #0
 80096c6:	e683      	b.n	80093d0 <_strtod_l+0x88>
 80096c8:	487d      	ldr	r0, [pc, #500]	; (80098c0 <_strtod_l+0x578>)
 80096ca:	f002 fd25 	bl	800c118 <nan>
 80096ce:	ec59 8b10 	vmov	r8, r9, d0
 80096d2:	e67d      	b.n	80093d0 <_strtod_l+0x88>
 80096d4:	1bea      	subs	r2, r5, r7
 80096d6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80096da:	9207      	str	r2, [sp, #28]
 80096dc:	9a06      	ldr	r2, [sp, #24]
 80096de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80096e2:	2a00      	cmp	r2, #0
 80096e4:	bf08      	it	eq
 80096e6:	461a      	moveq	r2, r3
 80096e8:	2b10      	cmp	r3, #16
 80096ea:	9206      	str	r2, [sp, #24]
 80096ec:	461a      	mov	r2, r3
 80096ee:	bfa8      	it	ge
 80096f0:	2210      	movge	r2, #16
 80096f2:	2b09      	cmp	r3, #9
 80096f4:	ec59 8b17 	vmov	r8, r9, d7
 80096f8:	dd0c      	ble.n	8009714 <_strtod_l+0x3cc>
 80096fa:	4972      	ldr	r1, [pc, #456]	; (80098c4 <_strtod_l+0x57c>)
 80096fc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009700:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8009704:	ee06 aa90 	vmov	s13, sl
 8009708:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800970c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009710:	ec59 8b16 	vmov	r8, r9, d6
 8009714:	2b0f      	cmp	r3, #15
 8009716:	dc36      	bgt.n	8009786 <_strtod_l+0x43e>
 8009718:	9907      	ldr	r1, [sp, #28]
 800971a:	2900      	cmp	r1, #0
 800971c:	f43f ae58 	beq.w	80093d0 <_strtod_l+0x88>
 8009720:	dd23      	ble.n	800976a <_strtod_l+0x422>
 8009722:	2916      	cmp	r1, #22
 8009724:	dc0b      	bgt.n	800973e <_strtod_l+0x3f6>
 8009726:	4b67      	ldr	r3, [pc, #412]	; (80098c4 <_strtod_l+0x57c>)
 8009728:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800972c:	ed93 7b00 	vldr	d7, [r3]
 8009730:	ec49 8b16 	vmov	d6, r8, r9
 8009734:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009738:	ec59 8b17 	vmov	r8, r9, d7
 800973c:	e648      	b.n	80093d0 <_strtod_l+0x88>
 800973e:	9807      	ldr	r0, [sp, #28]
 8009740:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8009744:	4281      	cmp	r1, r0
 8009746:	db1e      	blt.n	8009786 <_strtod_l+0x43e>
 8009748:	4a5e      	ldr	r2, [pc, #376]	; (80098c4 <_strtod_l+0x57c>)
 800974a:	f1c3 030f 	rsb	r3, r3, #15
 800974e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009752:	ed91 7b00 	vldr	d7, [r1]
 8009756:	ec49 8b16 	vmov	d6, r8, r9
 800975a:	1ac3      	subs	r3, r0, r3
 800975c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009760:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009764:	ed92 6b00 	vldr	d6, [r2]
 8009768:	e7e4      	b.n	8009734 <_strtod_l+0x3ec>
 800976a:	9907      	ldr	r1, [sp, #28]
 800976c:	3116      	adds	r1, #22
 800976e:	db0a      	blt.n	8009786 <_strtod_l+0x43e>
 8009770:	4b54      	ldr	r3, [pc, #336]	; (80098c4 <_strtod_l+0x57c>)
 8009772:	1b7d      	subs	r5, r7, r5
 8009774:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009778:	ed95 7b00 	vldr	d7, [r5]
 800977c:	ec49 8b16 	vmov	d6, r8, r9
 8009780:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009784:	e7d8      	b.n	8009738 <_strtod_l+0x3f0>
 8009786:	9907      	ldr	r1, [sp, #28]
 8009788:	1a9a      	subs	r2, r3, r2
 800978a:	440a      	add	r2, r1
 800978c:	2a00      	cmp	r2, #0
 800978e:	dd6f      	ble.n	8009870 <_strtod_l+0x528>
 8009790:	f012 000f 	ands.w	r0, r2, #15
 8009794:	d00a      	beq.n	80097ac <_strtod_l+0x464>
 8009796:	494b      	ldr	r1, [pc, #300]	; (80098c4 <_strtod_l+0x57c>)
 8009798:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800979c:	ed91 7b00 	vldr	d7, [r1]
 80097a0:	ec49 8b16 	vmov	d6, r8, r9
 80097a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097a8:	ec59 8b17 	vmov	r8, r9, d7
 80097ac:	f032 020f 	bics.w	r2, r2, #15
 80097b0:	d04f      	beq.n	8009852 <_strtod_l+0x50a>
 80097b2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80097b6:	dd22      	ble.n	80097fe <_strtod_l+0x4b6>
 80097b8:	2500      	movs	r5, #0
 80097ba:	462e      	mov	r6, r5
 80097bc:	9506      	str	r5, [sp, #24]
 80097be:	462f      	mov	r7, r5
 80097c0:	2322      	movs	r3, #34	; 0x22
 80097c2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80098d0 <_strtod_l+0x588>
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	f04f 0800 	mov.w	r8, #0
 80097cc:	9b06      	ldr	r3, [sp, #24]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f43f adfe 	beq.w	80093d0 <_strtod_l+0x88>
 80097d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80097d6:	4620      	mov	r0, r4
 80097d8:	f001 fdcc 	bl	800b374 <_Bfree>
 80097dc:	4639      	mov	r1, r7
 80097de:	4620      	mov	r0, r4
 80097e0:	f001 fdc8 	bl	800b374 <_Bfree>
 80097e4:	4631      	mov	r1, r6
 80097e6:	4620      	mov	r0, r4
 80097e8:	f001 fdc4 	bl	800b374 <_Bfree>
 80097ec:	9906      	ldr	r1, [sp, #24]
 80097ee:	4620      	mov	r0, r4
 80097f0:	f001 fdc0 	bl	800b374 <_Bfree>
 80097f4:	4629      	mov	r1, r5
 80097f6:	4620      	mov	r0, r4
 80097f8:	f001 fdbc 	bl	800b374 <_Bfree>
 80097fc:	e5e8      	b.n	80093d0 <_strtod_l+0x88>
 80097fe:	2000      	movs	r0, #0
 8009800:	ec49 8b17 	vmov	d7, r8, r9
 8009804:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80098c8 <_strtod_l+0x580>
 8009808:	1112      	asrs	r2, r2, #4
 800980a:	4601      	mov	r1, r0
 800980c:	2a01      	cmp	r2, #1
 800980e:	dc23      	bgt.n	8009858 <_strtod_l+0x510>
 8009810:	b108      	cbz	r0, 8009816 <_strtod_l+0x4ce>
 8009812:	ec59 8b17 	vmov	r8, r9, d7
 8009816:	4a2c      	ldr	r2, [pc, #176]	; (80098c8 <_strtod_l+0x580>)
 8009818:	482c      	ldr	r0, [pc, #176]	; (80098cc <_strtod_l+0x584>)
 800981a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800981e:	ed92 7b00 	vldr	d7, [r2]
 8009822:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009826:	ec49 8b16 	vmov	d6, r8, r9
 800982a:	4a29      	ldr	r2, [pc, #164]	; (80098d0 <_strtod_l+0x588>)
 800982c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009830:	ee17 1a90 	vmov	r1, s15
 8009834:	400a      	ands	r2, r1
 8009836:	4282      	cmp	r2, r0
 8009838:	ec59 8b17 	vmov	r8, r9, d7
 800983c:	d8bc      	bhi.n	80097b8 <_strtod_l+0x470>
 800983e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009842:	4282      	cmp	r2, r0
 8009844:	bf86      	itte	hi
 8009846:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80098d4 <_strtod_l+0x58c>
 800984a:	f04f 38ff 	movhi.w	r8, #4294967295
 800984e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009852:	2200      	movs	r2, #0
 8009854:	9204      	str	r2, [sp, #16]
 8009856:	e078      	b.n	800994a <_strtod_l+0x602>
 8009858:	07d6      	lsls	r6, r2, #31
 800985a:	d504      	bpl.n	8009866 <_strtod_l+0x51e>
 800985c:	ed9c 6b00 	vldr	d6, [ip]
 8009860:	2001      	movs	r0, #1
 8009862:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009866:	3101      	adds	r1, #1
 8009868:	1052      	asrs	r2, r2, #1
 800986a:	f10c 0c08 	add.w	ip, ip, #8
 800986e:	e7cd      	b.n	800980c <_strtod_l+0x4c4>
 8009870:	d0ef      	beq.n	8009852 <_strtod_l+0x50a>
 8009872:	4252      	negs	r2, r2
 8009874:	f012 000f 	ands.w	r0, r2, #15
 8009878:	d00a      	beq.n	8009890 <_strtod_l+0x548>
 800987a:	4912      	ldr	r1, [pc, #72]	; (80098c4 <_strtod_l+0x57c>)
 800987c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009880:	ed91 7b00 	vldr	d7, [r1]
 8009884:	ec49 8b16 	vmov	d6, r8, r9
 8009888:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800988c:	ec59 8b17 	vmov	r8, r9, d7
 8009890:	1112      	asrs	r2, r2, #4
 8009892:	d0de      	beq.n	8009852 <_strtod_l+0x50a>
 8009894:	2a1f      	cmp	r2, #31
 8009896:	dd1f      	ble.n	80098d8 <_strtod_l+0x590>
 8009898:	2500      	movs	r5, #0
 800989a:	462e      	mov	r6, r5
 800989c:	9506      	str	r5, [sp, #24]
 800989e:	462f      	mov	r7, r5
 80098a0:	2322      	movs	r3, #34	; 0x22
 80098a2:	f04f 0800 	mov.w	r8, #0
 80098a6:	f04f 0900 	mov.w	r9, #0
 80098aa:	6023      	str	r3, [r4, #0]
 80098ac:	e78e      	b.n	80097cc <_strtod_l+0x484>
 80098ae:	bf00      	nop
 80098b0:	0800cd85 	.word	0x0800cd85
 80098b4:	0800cdc8 	.word	0x0800cdc8
 80098b8:	0800cd7d 	.word	0x0800cd7d
 80098bc:	0800cf0c 	.word	0x0800cf0c
 80098c0:	0800d1b8 	.word	0x0800d1b8
 80098c4:	0800d098 	.word	0x0800d098
 80098c8:	0800d070 	.word	0x0800d070
 80098cc:	7ca00000 	.word	0x7ca00000
 80098d0:	7ff00000 	.word	0x7ff00000
 80098d4:	7fefffff 	.word	0x7fefffff
 80098d8:	f012 0110 	ands.w	r1, r2, #16
 80098dc:	bf18      	it	ne
 80098de:	216a      	movne	r1, #106	; 0x6a
 80098e0:	9104      	str	r1, [sp, #16]
 80098e2:	ec49 8b17 	vmov	d7, r8, r9
 80098e6:	49be      	ldr	r1, [pc, #760]	; (8009be0 <_strtod_l+0x898>)
 80098e8:	2000      	movs	r0, #0
 80098ea:	07d6      	lsls	r6, r2, #31
 80098ec:	d504      	bpl.n	80098f8 <_strtod_l+0x5b0>
 80098ee:	ed91 6b00 	vldr	d6, [r1]
 80098f2:	2001      	movs	r0, #1
 80098f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80098f8:	1052      	asrs	r2, r2, #1
 80098fa:	f101 0108 	add.w	r1, r1, #8
 80098fe:	d1f4      	bne.n	80098ea <_strtod_l+0x5a2>
 8009900:	b108      	cbz	r0, 8009906 <_strtod_l+0x5be>
 8009902:	ec59 8b17 	vmov	r8, r9, d7
 8009906:	9a04      	ldr	r2, [sp, #16]
 8009908:	b1c2      	cbz	r2, 800993c <_strtod_l+0x5f4>
 800990a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800990e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8009912:	2a00      	cmp	r2, #0
 8009914:	4648      	mov	r0, r9
 8009916:	dd11      	ble.n	800993c <_strtod_l+0x5f4>
 8009918:	2a1f      	cmp	r2, #31
 800991a:	f340 812e 	ble.w	8009b7a <_strtod_l+0x832>
 800991e:	2a34      	cmp	r2, #52	; 0x34
 8009920:	bfde      	ittt	le
 8009922:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8009926:	f04f 32ff 	movle.w	r2, #4294967295
 800992a:	fa02 f101 	lslle.w	r1, r2, r1
 800992e:	f04f 0800 	mov.w	r8, #0
 8009932:	bfcc      	ite	gt
 8009934:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009938:	ea01 0900 	andle.w	r9, r1, r0
 800993c:	ec49 8b17 	vmov	d7, r8, r9
 8009940:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009948:	d0a6      	beq.n	8009898 <_strtod_l+0x550>
 800994a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800994c:	9200      	str	r2, [sp, #0]
 800994e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009950:	9a06      	ldr	r2, [sp, #24]
 8009952:	4620      	mov	r0, r4
 8009954:	f001 fd76 	bl	800b444 <__s2b>
 8009958:	9006      	str	r0, [sp, #24]
 800995a:	2800      	cmp	r0, #0
 800995c:	f43f af2c 	beq.w	80097b8 <_strtod_l+0x470>
 8009960:	9b07      	ldr	r3, [sp, #28]
 8009962:	1b7d      	subs	r5, r7, r5
 8009964:	2b00      	cmp	r3, #0
 8009966:	bfb4      	ite	lt
 8009968:	462b      	movlt	r3, r5
 800996a:	2300      	movge	r3, #0
 800996c:	9309      	str	r3, [sp, #36]	; 0x24
 800996e:	9b07      	ldr	r3, [sp, #28]
 8009970:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009bc0 <_strtod_l+0x878>
 8009974:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009bc8 <_strtod_l+0x880>
 8009978:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009bd0 <_strtod_l+0x888>
 800997c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009980:	2500      	movs	r5, #0
 8009982:	930c      	str	r3, [sp, #48]	; 0x30
 8009984:	462e      	mov	r6, r5
 8009986:	9b06      	ldr	r3, [sp, #24]
 8009988:	4620      	mov	r0, r4
 800998a:	6859      	ldr	r1, [r3, #4]
 800998c:	f001 fcb2 	bl	800b2f4 <_Balloc>
 8009990:	4607      	mov	r7, r0
 8009992:	2800      	cmp	r0, #0
 8009994:	f43f af14 	beq.w	80097c0 <_strtod_l+0x478>
 8009998:	9b06      	ldr	r3, [sp, #24]
 800999a:	691a      	ldr	r2, [r3, #16]
 800999c:	3202      	adds	r2, #2
 800999e:	f103 010c 	add.w	r1, r3, #12
 80099a2:	0092      	lsls	r2, r2, #2
 80099a4:	300c      	adds	r0, #12
 80099a6:	f001 fc97 	bl	800b2d8 <memcpy>
 80099aa:	ec49 8b10 	vmov	d0, r8, r9
 80099ae:	aa14      	add	r2, sp, #80	; 0x50
 80099b0:	a913      	add	r1, sp, #76	; 0x4c
 80099b2:	4620      	mov	r0, r4
 80099b4:	f002 f88c 	bl	800bad0 <__d2b>
 80099b8:	ec49 8b18 	vmov	d8, r8, r9
 80099bc:	9012      	str	r0, [sp, #72]	; 0x48
 80099be:	2800      	cmp	r0, #0
 80099c0:	f43f aefe 	beq.w	80097c0 <_strtod_l+0x478>
 80099c4:	2101      	movs	r1, #1
 80099c6:	4620      	mov	r0, r4
 80099c8:	f001 fdd6 	bl	800b578 <__i2b>
 80099cc:	4606      	mov	r6, r0
 80099ce:	2800      	cmp	r0, #0
 80099d0:	f43f aef6 	beq.w	80097c0 <_strtod_l+0x478>
 80099d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80099d8:	2b00      	cmp	r3, #0
 80099da:	bfab      	itete	ge
 80099dc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80099de:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80099e0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80099e4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80099e8:	bfac      	ite	ge
 80099ea:	eb03 0b02 	addge.w	fp, r3, r2
 80099ee:	eba2 0a03 	sublt.w	sl, r2, r3
 80099f2:	9a04      	ldr	r2, [sp, #16]
 80099f4:	1a9b      	subs	r3, r3, r2
 80099f6:	440b      	add	r3, r1
 80099f8:	4a7a      	ldr	r2, [pc, #488]	; (8009be4 <_strtod_l+0x89c>)
 80099fa:	3b01      	subs	r3, #1
 80099fc:	4293      	cmp	r3, r2
 80099fe:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009a02:	f280 80cd 	bge.w	8009ba0 <_strtod_l+0x858>
 8009a06:	1ad2      	subs	r2, r2, r3
 8009a08:	2a1f      	cmp	r2, #31
 8009a0a:	eba1 0102 	sub.w	r1, r1, r2
 8009a0e:	f04f 0001 	mov.w	r0, #1
 8009a12:	f300 80b9 	bgt.w	8009b88 <_strtod_l+0x840>
 8009a16:	fa00 f302 	lsl.w	r3, r0, r2
 8009a1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a20:	eb0b 0301 	add.w	r3, fp, r1
 8009a24:	9a04      	ldr	r2, [sp, #16]
 8009a26:	459b      	cmp	fp, r3
 8009a28:	448a      	add	sl, r1
 8009a2a:	4492      	add	sl, r2
 8009a2c:	465a      	mov	r2, fp
 8009a2e:	bfa8      	it	ge
 8009a30:	461a      	movge	r2, r3
 8009a32:	4552      	cmp	r2, sl
 8009a34:	bfa8      	it	ge
 8009a36:	4652      	movge	r2, sl
 8009a38:	2a00      	cmp	r2, #0
 8009a3a:	bfc2      	ittt	gt
 8009a3c:	1a9b      	subgt	r3, r3, r2
 8009a3e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009a42:	ebab 0b02 	subgt.w	fp, fp, r2
 8009a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a48:	2a00      	cmp	r2, #0
 8009a4a:	dd18      	ble.n	8009a7e <_strtod_l+0x736>
 8009a4c:	4631      	mov	r1, r6
 8009a4e:	4620      	mov	r0, r4
 8009a50:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a52:	f001 fe51 	bl	800b6f8 <__pow5mult>
 8009a56:	4606      	mov	r6, r0
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	f43f aeb1 	beq.w	80097c0 <_strtod_l+0x478>
 8009a5e:	4601      	mov	r1, r0
 8009a60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a62:	4620      	mov	r0, r4
 8009a64:	f001 fd9e 	bl	800b5a4 <__multiply>
 8009a68:	900e      	str	r0, [sp, #56]	; 0x38
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	f43f aea8 	beq.w	80097c0 <_strtod_l+0x478>
 8009a70:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009a72:	4620      	mov	r0, r4
 8009a74:	f001 fc7e 	bl	800b374 <_Bfree>
 8009a78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a7c:	9212      	str	r2, [sp, #72]	; 0x48
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f300 8093 	bgt.w	8009baa <_strtod_l+0x862>
 8009a84:	9b07      	ldr	r3, [sp, #28]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	dd08      	ble.n	8009a9c <_strtod_l+0x754>
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f001 fe32 	bl	800b6f8 <__pow5mult>
 8009a94:	4607      	mov	r7, r0
 8009a96:	2800      	cmp	r0, #0
 8009a98:	f43f ae92 	beq.w	80097c0 <_strtod_l+0x478>
 8009a9c:	f1ba 0f00 	cmp.w	sl, #0
 8009aa0:	dd08      	ble.n	8009ab4 <_strtod_l+0x76c>
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	4652      	mov	r2, sl
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f001 fe80 	bl	800b7ac <__lshift>
 8009aac:	4607      	mov	r7, r0
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f43f ae86 	beq.w	80097c0 <_strtod_l+0x478>
 8009ab4:	f1bb 0f00 	cmp.w	fp, #0
 8009ab8:	dd08      	ble.n	8009acc <_strtod_l+0x784>
 8009aba:	4631      	mov	r1, r6
 8009abc:	465a      	mov	r2, fp
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f001 fe74 	bl	800b7ac <__lshift>
 8009ac4:	4606      	mov	r6, r0
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	f43f ae7a 	beq.w	80097c0 <_strtod_l+0x478>
 8009acc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009ace:	463a      	mov	r2, r7
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f001 fef7 	bl	800b8c4 <__mdiff>
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	f43f ae71 	beq.w	80097c0 <_strtod_l+0x478>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009ae4:	60c3      	str	r3, [r0, #12]
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	f001 fed0 	bl	800b88c <__mcmp>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	da7d      	bge.n	8009bec <_strtod_l+0x8a4>
 8009af0:	ea5a 0308 	orrs.w	r3, sl, r8
 8009af4:	f040 80a3 	bne.w	8009c3e <_strtod_l+0x8f6>
 8009af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f040 809e 	bne.w	8009c3e <_strtod_l+0x8f6>
 8009b02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b06:	0d1b      	lsrs	r3, r3, #20
 8009b08:	051b      	lsls	r3, r3, #20
 8009b0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b0e:	f240 8096 	bls.w	8009c3e <_strtod_l+0x8f6>
 8009b12:	696b      	ldr	r3, [r5, #20]
 8009b14:	b91b      	cbnz	r3, 8009b1e <_strtod_l+0x7d6>
 8009b16:	692b      	ldr	r3, [r5, #16]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	f340 8090 	ble.w	8009c3e <_strtod_l+0x8f6>
 8009b1e:	4629      	mov	r1, r5
 8009b20:	2201      	movs	r2, #1
 8009b22:	4620      	mov	r0, r4
 8009b24:	f001 fe42 	bl	800b7ac <__lshift>
 8009b28:	4631      	mov	r1, r6
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	f001 feae 	bl	800b88c <__mcmp>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	f340 8084 	ble.w	8009c3e <_strtod_l+0x8f6>
 8009b36:	9904      	ldr	r1, [sp, #16]
 8009b38:	4a2b      	ldr	r2, [pc, #172]	; (8009be8 <_strtod_l+0x8a0>)
 8009b3a:	464b      	mov	r3, r9
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	f000 809d 	beq.w	8009c7c <_strtod_l+0x934>
 8009b42:	ea02 0109 	and.w	r1, r2, r9
 8009b46:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b4a:	f300 8097 	bgt.w	8009c7c <_strtod_l+0x934>
 8009b4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b52:	f77f aea5 	ble.w	80098a0 <_strtod_l+0x558>
 8009b56:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009bd8 <_strtod_l+0x890>
 8009b5a:	ec49 8b16 	vmov	d6, r8, r9
 8009b5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b62:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009b66:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	bf08      	it	eq
 8009b6e:	2322      	moveq	r3, #34	; 0x22
 8009b70:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009b74:	bf08      	it	eq
 8009b76:	6023      	streq	r3, [r4, #0]
 8009b78:	e62c      	b.n	80097d4 <_strtod_l+0x48c>
 8009b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8009b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8009b82:	ea02 0808 	and.w	r8, r2, r8
 8009b86:	e6d9      	b.n	800993c <_strtod_l+0x5f4>
 8009b88:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009b8c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009b90:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009b94:	33e2      	adds	r3, #226	; 0xe2
 8009b96:	fa00 f303 	lsl.w	r3, r0, r3
 8009b9a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8009b9e:	e73f      	b.n	8009a20 <_strtod_l+0x6d8>
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009ba8:	e73a      	b.n	8009a20 <_strtod_l+0x6d8>
 8009baa:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009bac:	461a      	mov	r2, r3
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f001 fdfc 	bl	800b7ac <__lshift>
 8009bb4:	9012      	str	r0, [sp, #72]	; 0x48
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	f47f af64 	bne.w	8009a84 <_strtod_l+0x73c>
 8009bbc:	e600      	b.n	80097c0 <_strtod_l+0x478>
 8009bbe:	bf00      	nop
 8009bc0:	94a03595 	.word	0x94a03595
 8009bc4:	3fcfffff 	.word	0x3fcfffff
 8009bc8:	94a03595 	.word	0x94a03595
 8009bcc:	3fdfffff 	.word	0x3fdfffff
 8009bd0:	35afe535 	.word	0x35afe535
 8009bd4:	3fe00000 	.word	0x3fe00000
 8009bd8:	00000000 	.word	0x00000000
 8009bdc:	39500000 	.word	0x39500000
 8009be0:	0800cde0 	.word	0x0800cde0
 8009be4:	fffffc02 	.word	0xfffffc02
 8009be8:	7ff00000 	.word	0x7ff00000
 8009bec:	46cb      	mov	fp, r9
 8009bee:	d15f      	bne.n	8009cb0 <_strtod_l+0x968>
 8009bf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bf4:	f1ba 0f00 	cmp.w	sl, #0
 8009bf8:	d02a      	beq.n	8009c50 <_strtod_l+0x908>
 8009bfa:	4aa7      	ldr	r2, [pc, #668]	; (8009e98 <_strtod_l+0xb50>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d12b      	bne.n	8009c58 <_strtod_l+0x910>
 8009c00:	9b04      	ldr	r3, [sp, #16]
 8009c02:	4642      	mov	r2, r8
 8009c04:	b1fb      	cbz	r3, 8009c46 <_strtod_l+0x8fe>
 8009c06:	4ba5      	ldr	r3, [pc, #660]	; (8009e9c <_strtod_l+0xb54>)
 8009c08:	ea09 0303 	and.w	r3, r9, r3
 8009c0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c10:	f04f 31ff 	mov.w	r1, #4294967295
 8009c14:	d81a      	bhi.n	8009c4c <_strtod_l+0x904>
 8009c16:	0d1b      	lsrs	r3, r3, #20
 8009c18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d119      	bne.n	8009c58 <_strtod_l+0x910>
 8009c24:	4b9e      	ldr	r3, [pc, #632]	; (8009ea0 <_strtod_l+0xb58>)
 8009c26:	459b      	cmp	fp, r3
 8009c28:	d102      	bne.n	8009c30 <_strtod_l+0x8e8>
 8009c2a:	3201      	adds	r2, #1
 8009c2c:	f43f adc8 	beq.w	80097c0 <_strtod_l+0x478>
 8009c30:	4b9a      	ldr	r3, [pc, #616]	; (8009e9c <_strtod_l+0xb54>)
 8009c32:	ea0b 0303 	and.w	r3, fp, r3
 8009c36:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009c3a:	f04f 0800 	mov.w	r8, #0
 8009c3e:	9b04      	ldr	r3, [sp, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d188      	bne.n	8009b56 <_strtod_l+0x80e>
 8009c44:	e5c6      	b.n	80097d4 <_strtod_l+0x48c>
 8009c46:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4a:	e7e9      	b.n	8009c20 <_strtod_l+0x8d8>
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	e7e7      	b.n	8009c20 <_strtod_l+0x8d8>
 8009c50:	ea53 0308 	orrs.w	r3, r3, r8
 8009c54:	f43f af6f 	beq.w	8009b36 <_strtod_l+0x7ee>
 8009c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c5a:	b1cb      	cbz	r3, 8009c90 <_strtod_l+0x948>
 8009c5c:	ea13 0f0b 	tst.w	r3, fp
 8009c60:	d0ed      	beq.n	8009c3e <_strtod_l+0x8f6>
 8009c62:	9a04      	ldr	r2, [sp, #16]
 8009c64:	4640      	mov	r0, r8
 8009c66:	4649      	mov	r1, r9
 8009c68:	f1ba 0f00 	cmp.w	sl, #0
 8009c6c:	d014      	beq.n	8009c98 <_strtod_l+0x950>
 8009c6e:	f7ff fb51 	bl	8009314 <sulp>
 8009c72:	ee38 7b00 	vadd.f64	d7, d8, d0
 8009c76:	ec59 8b17 	vmov	r8, r9, d7
 8009c7a:	e7e0      	b.n	8009c3e <_strtod_l+0x8f6>
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c82:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009c86:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009c8a:	f04f 38ff 	mov.w	r8, #4294967295
 8009c8e:	e7d6      	b.n	8009c3e <_strtod_l+0x8f6>
 8009c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c92:	ea13 0f08 	tst.w	r3, r8
 8009c96:	e7e3      	b.n	8009c60 <_strtod_l+0x918>
 8009c98:	f7ff fb3c 	bl	8009314 <sulp>
 8009c9c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009ca0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca8:	ec59 8b10 	vmov	r8, r9, d0
 8009cac:	d1c7      	bne.n	8009c3e <_strtod_l+0x8f6>
 8009cae:	e5f7      	b.n	80098a0 <_strtod_l+0x558>
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	f001 ff68 	bl	800bb88 <__ratio>
 8009cb8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009cbc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc4:	d865      	bhi.n	8009d92 <_strtod_l+0xa4a>
 8009cc6:	f1ba 0f00 	cmp.w	sl, #0
 8009cca:	d042      	beq.n	8009d52 <_strtod_l+0xa0a>
 8009ccc:	4b75      	ldr	r3, [pc, #468]	; (8009ea4 <_strtod_l+0xb5c>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009cd4:	4871      	ldr	r0, [pc, #452]	; (8009e9c <_strtod_l+0xb54>)
 8009cd6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009eb0 <_strtod_l+0xb68>
 8009cda:	ea0b 0100 	and.w	r1, fp, r0
 8009cde:	4561      	cmp	r1, ip
 8009ce0:	f040 808e 	bne.w	8009e00 <_strtod_l+0xab8>
 8009ce4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009ce8:	ec49 8b10 	vmov	d0, r8, r9
 8009cec:	ec43 2b1c 	vmov	d12, r2, r3
 8009cf0:	910a      	str	r1, [sp, #40]	; 0x28
 8009cf2:	f001 fe71 	bl	800b9d8 <__ulp>
 8009cf6:	ec49 8b1e 	vmov	d14, r8, r9
 8009cfa:	4868      	ldr	r0, [pc, #416]	; (8009e9c <_strtod_l+0xb54>)
 8009cfc:	eeac eb00 	vfma.f64	d14, d12, d0
 8009d00:	ee1e 3a90 	vmov	r3, s29
 8009d04:	4a68      	ldr	r2, [pc, #416]	; (8009ea8 <_strtod_l+0xb60>)
 8009d06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d08:	4018      	ands	r0, r3
 8009d0a:	4290      	cmp	r0, r2
 8009d0c:	ec59 8b1e 	vmov	r8, r9, d14
 8009d10:	d94e      	bls.n	8009db0 <_strtod_l+0xa68>
 8009d12:	ee18 3a90 	vmov	r3, s17
 8009d16:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d104      	bne.n	8009d28 <_strtod_l+0x9e0>
 8009d1e:	ee18 3a10 	vmov	r3, s16
 8009d22:	3301      	adds	r3, #1
 8009d24:	f43f ad4c 	beq.w	80097c0 <_strtod_l+0x478>
 8009d28:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009ea0 <_strtod_l+0xb58>
 8009d2c:	f04f 38ff 	mov.w	r8, #4294967295
 8009d30:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009d32:	4620      	mov	r0, r4
 8009d34:	f001 fb1e 	bl	800b374 <_Bfree>
 8009d38:	4639      	mov	r1, r7
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f001 fb1a 	bl	800b374 <_Bfree>
 8009d40:	4631      	mov	r1, r6
 8009d42:	4620      	mov	r0, r4
 8009d44:	f001 fb16 	bl	800b374 <_Bfree>
 8009d48:	4629      	mov	r1, r5
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f001 fb12 	bl	800b374 <_Bfree>
 8009d50:	e619      	b.n	8009986 <_strtod_l+0x63e>
 8009d52:	f1b8 0f00 	cmp.w	r8, #0
 8009d56:	d112      	bne.n	8009d7e <_strtod_l+0xa36>
 8009d58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d5c:	b9b3      	cbnz	r3, 8009d8c <_strtod_l+0xa44>
 8009d5e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009d62:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009d6e:	bf58      	it	pl
 8009d70:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8009d74:	eeb1 7b4d 	vneg.f64	d7, d13
 8009d78:	ec53 2b17 	vmov	r2, r3, d7
 8009d7c:	e7aa      	b.n	8009cd4 <_strtod_l+0x98c>
 8009d7e:	f1b8 0f01 	cmp.w	r8, #1
 8009d82:	d103      	bne.n	8009d8c <_strtod_l+0xa44>
 8009d84:	f1b9 0f00 	cmp.w	r9, #0
 8009d88:	f43f ad8a 	beq.w	80098a0 <_strtod_l+0x558>
 8009d8c:	4b47      	ldr	r3, [pc, #284]	; (8009eac <_strtod_l+0xb64>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	e79e      	b.n	8009cd0 <_strtod_l+0x988>
 8009d92:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009d96:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009d9a:	f1ba 0f00 	cmp.w	sl, #0
 8009d9e:	d104      	bne.n	8009daa <_strtod_l+0xa62>
 8009da0:	eeb1 7b4d 	vneg.f64	d7, d13
 8009da4:	ec53 2b17 	vmov	r2, r3, d7
 8009da8:	e794      	b.n	8009cd4 <_strtod_l+0x98c>
 8009daa:	eeb0 7b4d 	vmov.f64	d7, d13
 8009dae:	e7f9      	b.n	8009da4 <_strtod_l+0xa5c>
 8009db0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009db4:	9b04      	ldr	r3, [sp, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1ba      	bne.n	8009d30 <_strtod_l+0x9e8>
 8009dba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009dbe:	0d1b      	lsrs	r3, r3, #20
 8009dc0:	051b      	lsls	r3, r3, #20
 8009dc2:	4299      	cmp	r1, r3
 8009dc4:	d1b4      	bne.n	8009d30 <_strtod_l+0x9e8>
 8009dc6:	ec51 0b1d 	vmov	r0, r1, d13
 8009dca:	f7f6 fcb5 	bl	8000738 <__aeabi_d2lz>
 8009dce:	f7f6 fc6d 	bl	80006ac <__aeabi_l2d>
 8009dd2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dd6:	ec41 0b17 	vmov	d7, r0, r1
 8009dda:	ea43 0308 	orr.w	r3, r3, r8
 8009dde:	ea53 030a 	orrs.w	r3, r3, sl
 8009de2:	ee3d db47 	vsub.f64	d13, d13, d7
 8009de6:	d03c      	beq.n	8009e62 <_strtod_l+0xb1a>
 8009de8:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df0:	f53f acf0 	bmi.w	80097d4 <_strtod_l+0x48c>
 8009df4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfc:	dd98      	ble.n	8009d30 <_strtod_l+0x9e8>
 8009dfe:	e4e9      	b.n	80097d4 <_strtod_l+0x48c>
 8009e00:	9804      	ldr	r0, [sp, #16]
 8009e02:	b1f0      	cbz	r0, 8009e42 <_strtod_l+0xafa>
 8009e04:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009e08:	d81b      	bhi.n	8009e42 <_strtod_l+0xafa>
 8009e0a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009e90 <_strtod_l+0xb48>
 8009e0e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e16:	d811      	bhi.n	8009e3c <_strtod_l+0xaf4>
 8009e18:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009e1c:	ee1d 3a10 	vmov	r3, s26
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	bf38      	it	cc
 8009e24:	2301      	movcc	r3, #1
 8009e26:	ee0d 3a10 	vmov	s26, r3
 8009e2a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009e2e:	f1ba 0f00 	cmp.w	sl, #0
 8009e32:	d113      	bne.n	8009e5c <_strtod_l+0xb14>
 8009e34:	eeb1 7b4d 	vneg.f64	d7, d13
 8009e38:	ec53 2b17 	vmov	r2, r3, d7
 8009e3c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009e40:	1a43      	subs	r3, r0, r1
 8009e42:	eeb0 0b48 	vmov.f64	d0, d8
 8009e46:	ec43 2b1c 	vmov	d12, r2, r3
 8009e4a:	910a      	str	r1, [sp, #40]	; 0x28
 8009e4c:	f001 fdc4 	bl	800b9d8 <__ulp>
 8009e50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e52:	eeac 8b00 	vfma.f64	d8, d12, d0
 8009e56:	ec59 8b18 	vmov	r8, r9, d8
 8009e5a:	e7ab      	b.n	8009db4 <_strtod_l+0xa6c>
 8009e5c:	eeb0 7b4d 	vmov.f64	d7, d13
 8009e60:	e7ea      	b.n	8009e38 <_strtod_l+0xaf0>
 8009e62:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8009e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e6a:	f57f af61 	bpl.w	8009d30 <_strtod_l+0x9e8>
 8009e6e:	e4b1      	b.n	80097d4 <_strtod_l+0x48c>
 8009e70:	2300      	movs	r3, #0
 8009e72:	9308      	str	r3, [sp, #32]
 8009e74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	f7ff baad 	b.w	80093d8 <_strtod_l+0x90>
 8009e7e:	2a65      	cmp	r2, #101	; 0x65
 8009e80:	f43f ab9f 	beq.w	80095c2 <_strtod_l+0x27a>
 8009e84:	2a45      	cmp	r2, #69	; 0x45
 8009e86:	f43f ab9c 	beq.w	80095c2 <_strtod_l+0x27a>
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	f7ff bbd4 	b.w	8009638 <_strtod_l+0x2f0>
 8009e90:	ffc00000 	.word	0xffc00000
 8009e94:	41dfffff 	.word	0x41dfffff
 8009e98:	000fffff 	.word	0x000fffff
 8009e9c:	7ff00000 	.word	0x7ff00000
 8009ea0:	7fefffff 	.word	0x7fefffff
 8009ea4:	3ff00000 	.word	0x3ff00000
 8009ea8:	7c9fffff 	.word	0x7c9fffff
 8009eac:	bff00000 	.word	0xbff00000
 8009eb0:	7fe00000 	.word	0x7fe00000

08009eb4 <_strtod_r>:
 8009eb4:	4b01      	ldr	r3, [pc, #4]	; (8009ebc <_strtod_r+0x8>)
 8009eb6:	f7ff ba47 	b.w	8009348 <_strtod_l>
 8009eba:	bf00      	nop
 8009ebc:	24000084 	.word	0x24000084

08009ec0 <_strtol_l.constprop.0>:
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec6:	d001      	beq.n	8009ecc <_strtol_l.constprop.0+0xc>
 8009ec8:	2b24      	cmp	r3, #36	; 0x24
 8009eca:	d906      	bls.n	8009eda <_strtol_l.constprop.0+0x1a>
 8009ecc:	f7fe fb82 	bl	80085d4 <__errno>
 8009ed0:	2316      	movs	r3, #22
 8009ed2:	6003      	str	r3, [r0, #0]
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009fc0 <_strtol_l.constprop.0+0x100>
 8009ede:	460d      	mov	r5, r1
 8009ee0:	462e      	mov	r6, r5
 8009ee2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ee6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009eea:	f017 0708 	ands.w	r7, r7, #8
 8009eee:	d1f7      	bne.n	8009ee0 <_strtol_l.constprop.0+0x20>
 8009ef0:	2c2d      	cmp	r4, #45	; 0x2d
 8009ef2:	d132      	bne.n	8009f5a <_strtol_l.constprop.0+0x9a>
 8009ef4:	782c      	ldrb	r4, [r5, #0]
 8009ef6:	2701      	movs	r7, #1
 8009ef8:	1cb5      	adds	r5, r6, #2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d05b      	beq.n	8009fb6 <_strtol_l.constprop.0+0xf6>
 8009efe:	2b10      	cmp	r3, #16
 8009f00:	d109      	bne.n	8009f16 <_strtol_l.constprop.0+0x56>
 8009f02:	2c30      	cmp	r4, #48	; 0x30
 8009f04:	d107      	bne.n	8009f16 <_strtol_l.constprop.0+0x56>
 8009f06:	782c      	ldrb	r4, [r5, #0]
 8009f08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f0c:	2c58      	cmp	r4, #88	; 0x58
 8009f0e:	d14d      	bne.n	8009fac <_strtol_l.constprop.0+0xec>
 8009f10:	786c      	ldrb	r4, [r5, #1]
 8009f12:	2310      	movs	r3, #16
 8009f14:	3502      	adds	r5, #2
 8009f16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009f1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f1e:	f04f 0c00 	mov.w	ip, #0
 8009f22:	fbb8 f9f3 	udiv	r9, r8, r3
 8009f26:	4666      	mov	r6, ip
 8009f28:	fb03 8a19 	mls	sl, r3, r9, r8
 8009f2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009f30:	f1be 0f09 	cmp.w	lr, #9
 8009f34:	d816      	bhi.n	8009f64 <_strtol_l.constprop.0+0xa4>
 8009f36:	4674      	mov	r4, lr
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	dd24      	ble.n	8009f86 <_strtol_l.constprop.0+0xc6>
 8009f3c:	f1bc 0f00 	cmp.w	ip, #0
 8009f40:	db1e      	blt.n	8009f80 <_strtol_l.constprop.0+0xc0>
 8009f42:	45b1      	cmp	r9, r6
 8009f44:	d31c      	bcc.n	8009f80 <_strtol_l.constprop.0+0xc0>
 8009f46:	d101      	bne.n	8009f4c <_strtol_l.constprop.0+0x8c>
 8009f48:	45a2      	cmp	sl, r4
 8009f4a:	db19      	blt.n	8009f80 <_strtol_l.constprop.0+0xc0>
 8009f4c:	fb06 4603 	mla	r6, r6, r3, r4
 8009f50:	f04f 0c01 	mov.w	ip, #1
 8009f54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f58:	e7e8      	b.n	8009f2c <_strtol_l.constprop.0+0x6c>
 8009f5a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f5c:	bf04      	itt	eq
 8009f5e:	782c      	ldrbeq	r4, [r5, #0]
 8009f60:	1cb5      	addeq	r5, r6, #2
 8009f62:	e7ca      	b.n	8009efa <_strtol_l.constprop.0+0x3a>
 8009f64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009f68:	f1be 0f19 	cmp.w	lr, #25
 8009f6c:	d801      	bhi.n	8009f72 <_strtol_l.constprop.0+0xb2>
 8009f6e:	3c37      	subs	r4, #55	; 0x37
 8009f70:	e7e2      	b.n	8009f38 <_strtol_l.constprop.0+0x78>
 8009f72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009f76:	f1be 0f19 	cmp.w	lr, #25
 8009f7a:	d804      	bhi.n	8009f86 <_strtol_l.constprop.0+0xc6>
 8009f7c:	3c57      	subs	r4, #87	; 0x57
 8009f7e:	e7db      	b.n	8009f38 <_strtol_l.constprop.0+0x78>
 8009f80:	f04f 3cff 	mov.w	ip, #4294967295
 8009f84:	e7e6      	b.n	8009f54 <_strtol_l.constprop.0+0x94>
 8009f86:	f1bc 0f00 	cmp.w	ip, #0
 8009f8a:	da05      	bge.n	8009f98 <_strtol_l.constprop.0+0xd8>
 8009f8c:	2322      	movs	r3, #34	; 0x22
 8009f8e:	6003      	str	r3, [r0, #0]
 8009f90:	4646      	mov	r6, r8
 8009f92:	b942      	cbnz	r2, 8009fa6 <_strtol_l.constprop.0+0xe6>
 8009f94:	4630      	mov	r0, r6
 8009f96:	e79e      	b.n	8009ed6 <_strtol_l.constprop.0+0x16>
 8009f98:	b107      	cbz	r7, 8009f9c <_strtol_l.constprop.0+0xdc>
 8009f9a:	4276      	negs	r6, r6
 8009f9c:	2a00      	cmp	r2, #0
 8009f9e:	d0f9      	beq.n	8009f94 <_strtol_l.constprop.0+0xd4>
 8009fa0:	f1bc 0f00 	cmp.w	ip, #0
 8009fa4:	d000      	beq.n	8009fa8 <_strtol_l.constprop.0+0xe8>
 8009fa6:	1e69      	subs	r1, r5, #1
 8009fa8:	6011      	str	r1, [r2, #0]
 8009faa:	e7f3      	b.n	8009f94 <_strtol_l.constprop.0+0xd4>
 8009fac:	2430      	movs	r4, #48	; 0x30
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1b1      	bne.n	8009f16 <_strtol_l.constprop.0+0x56>
 8009fb2:	2308      	movs	r3, #8
 8009fb4:	e7af      	b.n	8009f16 <_strtol_l.constprop.0+0x56>
 8009fb6:	2c30      	cmp	r4, #48	; 0x30
 8009fb8:	d0a5      	beq.n	8009f06 <_strtol_l.constprop.0+0x46>
 8009fba:	230a      	movs	r3, #10
 8009fbc:	e7ab      	b.n	8009f16 <_strtol_l.constprop.0+0x56>
 8009fbe:	bf00      	nop
 8009fc0:	0800ce09 	.word	0x0800ce09

08009fc4 <_strtol_r>:
 8009fc4:	f7ff bf7c 	b.w	8009ec0 <_strtol_l.constprop.0>

08009fc8 <quorem>:
 8009fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	6903      	ldr	r3, [r0, #16]
 8009fce:	690c      	ldr	r4, [r1, #16]
 8009fd0:	42a3      	cmp	r3, r4
 8009fd2:	4607      	mov	r7, r0
 8009fd4:	f2c0 8081 	blt.w	800a0da <quorem+0x112>
 8009fd8:	3c01      	subs	r4, #1
 8009fda:	f101 0814 	add.w	r8, r1, #20
 8009fde:	f100 0514 	add.w	r5, r0, #20
 8009fe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ff8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ffc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a000:	d331      	bcc.n	800a066 <quorem+0x9e>
 800a002:	f04f 0e00 	mov.w	lr, #0
 800a006:	4640      	mov	r0, r8
 800a008:	46ac      	mov	ip, r5
 800a00a:	46f2      	mov	sl, lr
 800a00c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a010:	b293      	uxth	r3, r2
 800a012:	fb06 e303 	mla	r3, r6, r3, lr
 800a016:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	ebaa 0303 	sub.w	r3, sl, r3
 800a020:	f8dc a000 	ldr.w	sl, [ip]
 800a024:	0c12      	lsrs	r2, r2, #16
 800a026:	fa13 f38a 	uxtah	r3, r3, sl
 800a02a:	fb06 e202 	mla	r2, r6, r2, lr
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	9b00      	ldr	r3, [sp, #0]
 800a032:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a036:	b292      	uxth	r2, r2
 800a038:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a03c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a040:	f8bd 3000 	ldrh.w	r3, [sp]
 800a044:	4581      	cmp	r9, r0
 800a046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a04a:	f84c 3b04 	str.w	r3, [ip], #4
 800a04e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a052:	d2db      	bcs.n	800a00c <quorem+0x44>
 800a054:	f855 300b 	ldr.w	r3, [r5, fp]
 800a058:	b92b      	cbnz	r3, 800a066 <quorem+0x9e>
 800a05a:	9b01      	ldr	r3, [sp, #4]
 800a05c:	3b04      	subs	r3, #4
 800a05e:	429d      	cmp	r5, r3
 800a060:	461a      	mov	r2, r3
 800a062:	d32e      	bcc.n	800a0c2 <quorem+0xfa>
 800a064:	613c      	str	r4, [r7, #16]
 800a066:	4638      	mov	r0, r7
 800a068:	f001 fc10 	bl	800b88c <__mcmp>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	db24      	blt.n	800a0ba <quorem+0xf2>
 800a070:	3601      	adds	r6, #1
 800a072:	4628      	mov	r0, r5
 800a074:	f04f 0c00 	mov.w	ip, #0
 800a078:	f858 2b04 	ldr.w	r2, [r8], #4
 800a07c:	f8d0 e000 	ldr.w	lr, [r0]
 800a080:	b293      	uxth	r3, r2
 800a082:	ebac 0303 	sub.w	r3, ip, r3
 800a086:	0c12      	lsrs	r2, r2, #16
 800a088:	fa13 f38e 	uxtah	r3, r3, lr
 800a08c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a090:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a094:	b29b      	uxth	r3, r3
 800a096:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a09a:	45c1      	cmp	r9, r8
 800a09c:	f840 3b04 	str.w	r3, [r0], #4
 800a0a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0a4:	d2e8      	bcs.n	800a078 <quorem+0xb0>
 800a0a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0ae:	b922      	cbnz	r2, 800a0ba <quorem+0xf2>
 800a0b0:	3b04      	subs	r3, #4
 800a0b2:	429d      	cmp	r5, r3
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	d30a      	bcc.n	800a0ce <quorem+0x106>
 800a0b8:	613c      	str	r4, [r7, #16]
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	b003      	add	sp, #12
 800a0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c2:	6812      	ldr	r2, [r2, #0]
 800a0c4:	3b04      	subs	r3, #4
 800a0c6:	2a00      	cmp	r2, #0
 800a0c8:	d1cc      	bne.n	800a064 <quorem+0x9c>
 800a0ca:	3c01      	subs	r4, #1
 800a0cc:	e7c7      	b.n	800a05e <quorem+0x96>
 800a0ce:	6812      	ldr	r2, [r2, #0]
 800a0d0:	3b04      	subs	r3, #4
 800a0d2:	2a00      	cmp	r2, #0
 800a0d4:	d1f0      	bne.n	800a0b8 <quorem+0xf0>
 800a0d6:	3c01      	subs	r4, #1
 800a0d8:	e7eb      	b.n	800a0b2 <quorem+0xea>
 800a0da:	2000      	movs	r0, #0
 800a0dc:	e7ee      	b.n	800a0bc <quorem+0xf4>
	...

0800a0e0 <_dtoa_r>:
 800a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	ed2d 8b02 	vpush	{d8}
 800a0e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0ea:	b091      	sub	sp, #68	; 0x44
 800a0ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a0f0:	ec59 8b10 	vmov	r8, r9, d0
 800a0f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a0f6:	9106      	str	r1, [sp, #24]
 800a0f8:	4606      	mov	r6, r0
 800a0fa:	9208      	str	r2, [sp, #32]
 800a0fc:	930c      	str	r3, [sp, #48]	; 0x30
 800a0fe:	b975      	cbnz	r5, 800a11e <_dtoa_r+0x3e>
 800a100:	2010      	movs	r0, #16
 800a102:	f001 f8cf 	bl	800b2a4 <malloc>
 800a106:	4602      	mov	r2, r0
 800a108:	6270      	str	r0, [r6, #36]	; 0x24
 800a10a:	b920      	cbnz	r0, 800a116 <_dtoa_r+0x36>
 800a10c:	4baa      	ldr	r3, [pc, #680]	; (800a3b8 <_dtoa_r+0x2d8>)
 800a10e:	21ea      	movs	r1, #234	; 0xea
 800a110:	48aa      	ldr	r0, [pc, #680]	; (800a3bc <_dtoa_r+0x2dc>)
 800a112:	f002 f83b 	bl	800c18c <__assert_func>
 800a116:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a11a:	6005      	str	r5, [r0, #0]
 800a11c:	60c5      	str	r5, [r0, #12]
 800a11e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a120:	6819      	ldr	r1, [r3, #0]
 800a122:	b151      	cbz	r1, 800a13a <_dtoa_r+0x5a>
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	604a      	str	r2, [r1, #4]
 800a128:	2301      	movs	r3, #1
 800a12a:	4093      	lsls	r3, r2
 800a12c:	608b      	str	r3, [r1, #8]
 800a12e:	4630      	mov	r0, r6
 800a130:	f001 f920 	bl	800b374 <_Bfree>
 800a134:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]
 800a13a:	f1b9 0300 	subs.w	r3, r9, #0
 800a13e:	bfbb      	ittet	lt
 800a140:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a144:	9303      	strlt	r3, [sp, #12]
 800a146:	2300      	movge	r3, #0
 800a148:	2201      	movlt	r2, #1
 800a14a:	bfac      	ite	ge
 800a14c:	6023      	strge	r3, [r4, #0]
 800a14e:	6022      	strlt	r2, [r4, #0]
 800a150:	4b9b      	ldr	r3, [pc, #620]	; (800a3c0 <_dtoa_r+0x2e0>)
 800a152:	9c03      	ldr	r4, [sp, #12]
 800a154:	43a3      	bics	r3, r4
 800a156:	d11c      	bne.n	800a192 <_dtoa_r+0xb2>
 800a158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a15a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a164:	ea53 0308 	orrs.w	r3, r3, r8
 800a168:	f000 84fd 	beq.w	800ab66 <_dtoa_r+0xa86>
 800a16c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a16e:	b963      	cbnz	r3, 800a18a <_dtoa_r+0xaa>
 800a170:	4b94      	ldr	r3, [pc, #592]	; (800a3c4 <_dtoa_r+0x2e4>)
 800a172:	e01f      	b.n	800a1b4 <_dtoa_r+0xd4>
 800a174:	4b94      	ldr	r3, [pc, #592]	; (800a3c8 <_dtoa_r+0x2e8>)
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	3308      	adds	r3, #8
 800a17a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	9801      	ldr	r0, [sp, #4]
 800a180:	b011      	add	sp, #68	; 0x44
 800a182:	ecbd 8b02 	vpop	{d8}
 800a186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18a:	4b8e      	ldr	r3, [pc, #568]	; (800a3c4 <_dtoa_r+0x2e4>)
 800a18c:	9301      	str	r3, [sp, #4]
 800a18e:	3303      	adds	r3, #3
 800a190:	e7f3      	b.n	800a17a <_dtoa_r+0x9a>
 800a192:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a196:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a19e:	d10b      	bne.n	800a1b8 <_dtoa_r+0xd8>
 800a1a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	6013      	str	r3, [r2, #0]
 800a1a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 84d9 	beq.w	800ab60 <_dtoa_r+0xa80>
 800a1ae:	4887      	ldr	r0, [pc, #540]	; (800a3cc <_dtoa_r+0x2ec>)
 800a1b0:	6018      	str	r0, [r3, #0]
 800a1b2:	1e43      	subs	r3, r0, #1
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	e7e2      	b.n	800a17e <_dtoa_r+0x9e>
 800a1b8:	a90f      	add	r1, sp, #60	; 0x3c
 800a1ba:	aa0e      	add	r2, sp, #56	; 0x38
 800a1bc:	4630      	mov	r0, r6
 800a1be:	eeb0 0b48 	vmov.f64	d0, d8
 800a1c2:	f001 fc85 	bl	800bad0 <__d2b>
 800a1c6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a1ce:	2900      	cmp	r1, #0
 800a1d0:	d046      	beq.n	800a260 <_dtoa_r+0x180>
 800a1d2:	ee18 4a90 	vmov	r4, s17
 800a1d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a1da:	ec53 2b18 	vmov	r2, r3, d8
 800a1de:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a1e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a1e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a1ea:	2400      	movs	r4, #0
 800a1ec:	ec43 2b16 	vmov	d6, r2, r3
 800a1f0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a1f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a3a0 <_dtoa_r+0x2c0>
 800a1f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a1fc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a3a8 <_dtoa_r+0x2c8>
 800a200:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a204:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a3b0 <_dtoa_r+0x2d0>
 800a208:	ee07 1a90 	vmov	s15, r1
 800a20c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a210:	eeb0 7b46 	vmov.f64	d7, d6
 800a214:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a218:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a21c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a224:	ee16 ba90 	vmov	fp, s13
 800a228:	940a      	str	r4, [sp, #40]	; 0x28
 800a22a:	d508      	bpl.n	800a23e <_dtoa_r+0x15e>
 800a22c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a230:	eeb4 6b47 	vcmp.f64	d6, d7
 800a234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a238:	bf18      	it	ne
 800a23a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a23e:	f1bb 0f16 	cmp.w	fp, #22
 800a242:	d82f      	bhi.n	800a2a4 <_dtoa_r+0x1c4>
 800a244:	4b62      	ldr	r3, [pc, #392]	; (800a3d0 <_dtoa_r+0x2f0>)
 800a246:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a24a:	ed93 7b00 	vldr	d7, [r3]
 800a24e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a256:	d501      	bpl.n	800a25c <_dtoa_r+0x17c>
 800a258:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a25c:	2300      	movs	r3, #0
 800a25e:	e022      	b.n	800a2a6 <_dtoa_r+0x1c6>
 800a260:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a262:	4401      	add	r1, r0
 800a264:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a268:	2b20      	cmp	r3, #32
 800a26a:	bfc1      	itttt	gt
 800a26c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a270:	fa04 f303 	lslgt.w	r3, r4, r3
 800a274:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a278:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a27c:	bfd6      	itet	le
 800a27e:	f1c3 0320 	rsble	r3, r3, #32
 800a282:	ea43 0808 	orrgt.w	r8, r3, r8
 800a286:	fa08 f803 	lslle.w	r8, r8, r3
 800a28a:	ee07 8a90 	vmov	s15, r8
 800a28e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a292:	3901      	subs	r1, #1
 800a294:	ee17 4a90 	vmov	r4, s15
 800a298:	ec53 2b17 	vmov	r2, r3, d7
 800a29c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a2a0:	2401      	movs	r4, #1
 800a2a2:	e7a3      	b.n	800a1ec <_dtoa_r+0x10c>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2a8:	1a43      	subs	r3, r0, r1
 800a2aa:	1e5a      	subs	r2, r3, #1
 800a2ac:	bf45      	ittet	mi
 800a2ae:	f1c3 0301 	rsbmi	r3, r3, #1
 800a2b2:	9304      	strmi	r3, [sp, #16]
 800a2b4:	2300      	movpl	r3, #0
 800a2b6:	2300      	movmi	r3, #0
 800a2b8:	9205      	str	r2, [sp, #20]
 800a2ba:	bf54      	ite	pl
 800a2bc:	9304      	strpl	r3, [sp, #16]
 800a2be:	9305      	strmi	r3, [sp, #20]
 800a2c0:	f1bb 0f00 	cmp.w	fp, #0
 800a2c4:	db18      	blt.n	800a2f8 <_dtoa_r+0x218>
 800a2c6:	9b05      	ldr	r3, [sp, #20]
 800a2c8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a2cc:	445b      	add	r3, fp
 800a2ce:	9305      	str	r3, [sp, #20]
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9a06      	ldr	r2, [sp, #24]
 800a2d4:	2a09      	cmp	r2, #9
 800a2d6:	d849      	bhi.n	800a36c <_dtoa_r+0x28c>
 800a2d8:	2a05      	cmp	r2, #5
 800a2da:	bfc4      	itt	gt
 800a2dc:	3a04      	subgt	r2, #4
 800a2de:	9206      	strgt	r2, [sp, #24]
 800a2e0:	9a06      	ldr	r2, [sp, #24]
 800a2e2:	f1a2 0202 	sub.w	r2, r2, #2
 800a2e6:	bfcc      	ite	gt
 800a2e8:	2400      	movgt	r4, #0
 800a2ea:	2401      	movle	r4, #1
 800a2ec:	2a03      	cmp	r2, #3
 800a2ee:	d848      	bhi.n	800a382 <_dtoa_r+0x2a2>
 800a2f0:	e8df f002 	tbb	[pc, r2]
 800a2f4:	3a2c2e0b 	.word	0x3a2c2e0b
 800a2f8:	9b04      	ldr	r3, [sp, #16]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	eba3 030b 	sub.w	r3, r3, fp
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	9209      	str	r2, [sp, #36]	; 0x24
 800a304:	f1cb 0300 	rsb	r3, fp, #0
 800a308:	e7e3      	b.n	800a2d2 <_dtoa_r+0x1f2>
 800a30a:	2200      	movs	r2, #0
 800a30c:	9207      	str	r2, [sp, #28]
 800a30e:	9a08      	ldr	r2, [sp, #32]
 800a310:	2a00      	cmp	r2, #0
 800a312:	dc39      	bgt.n	800a388 <_dtoa_r+0x2a8>
 800a314:	f04f 0a01 	mov.w	sl, #1
 800a318:	46d1      	mov	r9, sl
 800a31a:	4652      	mov	r2, sl
 800a31c:	f8cd a020 	str.w	sl, [sp, #32]
 800a320:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a322:	2100      	movs	r1, #0
 800a324:	6079      	str	r1, [r7, #4]
 800a326:	2004      	movs	r0, #4
 800a328:	f100 0c14 	add.w	ip, r0, #20
 800a32c:	4594      	cmp	ip, r2
 800a32e:	6879      	ldr	r1, [r7, #4]
 800a330:	d92f      	bls.n	800a392 <_dtoa_r+0x2b2>
 800a332:	4630      	mov	r0, r6
 800a334:	930d      	str	r3, [sp, #52]	; 0x34
 800a336:	f000 ffdd 	bl	800b2f4 <_Balloc>
 800a33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a33c:	9001      	str	r0, [sp, #4]
 800a33e:	4602      	mov	r2, r0
 800a340:	2800      	cmp	r0, #0
 800a342:	d149      	bne.n	800a3d8 <_dtoa_r+0x2f8>
 800a344:	4b23      	ldr	r3, [pc, #140]	; (800a3d4 <_dtoa_r+0x2f4>)
 800a346:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a34a:	e6e1      	b.n	800a110 <_dtoa_r+0x30>
 800a34c:	2201      	movs	r2, #1
 800a34e:	e7dd      	b.n	800a30c <_dtoa_r+0x22c>
 800a350:	2200      	movs	r2, #0
 800a352:	9207      	str	r2, [sp, #28]
 800a354:	9a08      	ldr	r2, [sp, #32]
 800a356:	eb0b 0a02 	add.w	sl, fp, r2
 800a35a:	f10a 0901 	add.w	r9, sl, #1
 800a35e:	464a      	mov	r2, r9
 800a360:	2a01      	cmp	r2, #1
 800a362:	bfb8      	it	lt
 800a364:	2201      	movlt	r2, #1
 800a366:	e7db      	b.n	800a320 <_dtoa_r+0x240>
 800a368:	2201      	movs	r2, #1
 800a36a:	e7f2      	b.n	800a352 <_dtoa_r+0x272>
 800a36c:	2401      	movs	r4, #1
 800a36e:	2200      	movs	r2, #0
 800a370:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a374:	f04f 3aff 	mov.w	sl, #4294967295
 800a378:	2100      	movs	r1, #0
 800a37a:	46d1      	mov	r9, sl
 800a37c:	2212      	movs	r2, #18
 800a37e:	9108      	str	r1, [sp, #32]
 800a380:	e7ce      	b.n	800a320 <_dtoa_r+0x240>
 800a382:	2201      	movs	r2, #1
 800a384:	9207      	str	r2, [sp, #28]
 800a386:	e7f5      	b.n	800a374 <_dtoa_r+0x294>
 800a388:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a38c:	46d1      	mov	r9, sl
 800a38e:	4652      	mov	r2, sl
 800a390:	e7c6      	b.n	800a320 <_dtoa_r+0x240>
 800a392:	3101      	adds	r1, #1
 800a394:	6079      	str	r1, [r7, #4]
 800a396:	0040      	lsls	r0, r0, #1
 800a398:	e7c6      	b.n	800a328 <_dtoa_r+0x248>
 800a39a:	bf00      	nop
 800a39c:	f3af 8000 	nop.w
 800a3a0:	636f4361 	.word	0x636f4361
 800a3a4:	3fd287a7 	.word	0x3fd287a7
 800a3a8:	8b60c8b3 	.word	0x8b60c8b3
 800a3ac:	3fc68a28 	.word	0x3fc68a28
 800a3b0:	509f79fb 	.word	0x509f79fb
 800a3b4:	3fd34413 	.word	0x3fd34413
 800a3b8:	0800cf16 	.word	0x0800cf16
 800a3bc:	0800cf2d 	.word	0x0800cf2d
 800a3c0:	7ff00000 	.word	0x7ff00000
 800a3c4:	0800cf12 	.word	0x0800cf12
 800a3c8:	0800cf09 	.word	0x0800cf09
 800a3cc:	0800cd89 	.word	0x0800cd89
 800a3d0:	0800d098 	.word	0x0800d098
 800a3d4:	0800cf88 	.word	0x0800cf88
 800a3d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a3da:	9901      	ldr	r1, [sp, #4]
 800a3dc:	6011      	str	r1, [r2, #0]
 800a3de:	f1b9 0f0e 	cmp.w	r9, #14
 800a3e2:	d86c      	bhi.n	800a4be <_dtoa_r+0x3de>
 800a3e4:	2c00      	cmp	r4, #0
 800a3e6:	d06a      	beq.n	800a4be <_dtoa_r+0x3de>
 800a3e8:	f1bb 0f00 	cmp.w	fp, #0
 800a3ec:	f340 80a0 	ble.w	800a530 <_dtoa_r+0x450>
 800a3f0:	49c1      	ldr	r1, [pc, #772]	; (800a6f8 <_dtoa_r+0x618>)
 800a3f2:	f00b 020f 	and.w	r2, fp, #15
 800a3f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a3fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a3fe:	ed92 7b00 	vldr	d7, [r2]
 800a402:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a406:	f000 8087 	beq.w	800a518 <_dtoa_r+0x438>
 800a40a:	4abc      	ldr	r2, [pc, #752]	; (800a6fc <_dtoa_r+0x61c>)
 800a40c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a410:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a414:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a418:	f001 010f 	and.w	r1, r1, #15
 800a41c:	2203      	movs	r2, #3
 800a41e:	48b7      	ldr	r0, [pc, #732]	; (800a6fc <_dtoa_r+0x61c>)
 800a420:	2900      	cmp	r1, #0
 800a422:	d17b      	bne.n	800a51c <_dtoa_r+0x43c>
 800a424:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a428:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a42c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a432:	2900      	cmp	r1, #0
 800a434:	f000 80a2 	beq.w	800a57c <_dtoa_r+0x49c>
 800a438:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a43c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a440:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a448:	f140 8098 	bpl.w	800a57c <_dtoa_r+0x49c>
 800a44c:	f1b9 0f00 	cmp.w	r9, #0
 800a450:	f000 8094 	beq.w	800a57c <_dtoa_r+0x49c>
 800a454:	f1ba 0f00 	cmp.w	sl, #0
 800a458:	dd2f      	ble.n	800a4ba <_dtoa_r+0x3da>
 800a45a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a45e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a462:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a466:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a46a:	3201      	adds	r2, #1
 800a46c:	4650      	mov	r0, sl
 800a46e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a472:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a476:	ee07 2a90 	vmov	s15, r2
 800a47a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a47e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a482:	ee15 4a90 	vmov	r4, s11
 800a486:	ec52 1b15 	vmov	r1, r2, d5
 800a48a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a48e:	2800      	cmp	r0, #0
 800a490:	d177      	bne.n	800a582 <_dtoa_r+0x4a2>
 800a492:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a496:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a49a:	ec42 1b17 	vmov	d7, r1, r2
 800a49e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4a6:	f300 8263 	bgt.w	800a970 <_dtoa_r+0x890>
 800a4aa:	eeb1 7b47 	vneg.f64	d7, d7
 800a4ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b6:	f100 8258 	bmi.w	800a96a <_dtoa_r+0x88a>
 800a4ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a4be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4c0:	2a00      	cmp	r2, #0
 800a4c2:	f2c0 811d 	blt.w	800a700 <_dtoa_r+0x620>
 800a4c6:	f1bb 0f0e 	cmp.w	fp, #14
 800a4ca:	f300 8119 	bgt.w	800a700 <_dtoa_r+0x620>
 800a4ce:	4b8a      	ldr	r3, [pc, #552]	; (800a6f8 <_dtoa_r+0x618>)
 800a4d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a4d4:	ed93 6b00 	vldr	d6, [r3]
 800a4d8:	9b08      	ldr	r3, [sp, #32]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f280 80b7 	bge.w	800a64e <_dtoa_r+0x56e>
 800a4e0:	f1b9 0f00 	cmp.w	r9, #0
 800a4e4:	f300 80b3 	bgt.w	800a64e <_dtoa_r+0x56e>
 800a4e8:	f040 823f 	bne.w	800a96a <_dtoa_r+0x88a>
 800a4ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a4f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a4f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a500:	464c      	mov	r4, r9
 800a502:	464f      	mov	r7, r9
 800a504:	f280 8215 	bge.w	800a932 <_dtoa_r+0x852>
 800a508:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a50c:	2331      	movs	r3, #49	; 0x31
 800a50e:	f808 3b01 	strb.w	r3, [r8], #1
 800a512:	f10b 0b01 	add.w	fp, fp, #1
 800a516:	e211      	b.n	800a93c <_dtoa_r+0x85c>
 800a518:	2202      	movs	r2, #2
 800a51a:	e780      	b.n	800a41e <_dtoa_r+0x33e>
 800a51c:	07cc      	lsls	r4, r1, #31
 800a51e:	d504      	bpl.n	800a52a <_dtoa_r+0x44a>
 800a520:	ed90 6b00 	vldr	d6, [r0]
 800a524:	3201      	adds	r2, #1
 800a526:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a52a:	1049      	asrs	r1, r1, #1
 800a52c:	3008      	adds	r0, #8
 800a52e:	e777      	b.n	800a420 <_dtoa_r+0x340>
 800a530:	d022      	beq.n	800a578 <_dtoa_r+0x498>
 800a532:	f1cb 0100 	rsb	r1, fp, #0
 800a536:	4a70      	ldr	r2, [pc, #448]	; (800a6f8 <_dtoa_r+0x618>)
 800a538:	f001 000f 	and.w	r0, r1, #15
 800a53c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a540:	ed92 7b00 	vldr	d7, [r2]
 800a544:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a548:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a54c:	486b      	ldr	r0, [pc, #428]	; (800a6fc <_dtoa_r+0x61c>)
 800a54e:	1109      	asrs	r1, r1, #4
 800a550:	2400      	movs	r4, #0
 800a552:	2202      	movs	r2, #2
 800a554:	b929      	cbnz	r1, 800a562 <_dtoa_r+0x482>
 800a556:	2c00      	cmp	r4, #0
 800a558:	f43f af6a 	beq.w	800a430 <_dtoa_r+0x350>
 800a55c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a560:	e766      	b.n	800a430 <_dtoa_r+0x350>
 800a562:	07cf      	lsls	r7, r1, #31
 800a564:	d505      	bpl.n	800a572 <_dtoa_r+0x492>
 800a566:	ed90 6b00 	vldr	d6, [r0]
 800a56a:	3201      	adds	r2, #1
 800a56c:	2401      	movs	r4, #1
 800a56e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a572:	1049      	asrs	r1, r1, #1
 800a574:	3008      	adds	r0, #8
 800a576:	e7ed      	b.n	800a554 <_dtoa_r+0x474>
 800a578:	2202      	movs	r2, #2
 800a57a:	e759      	b.n	800a430 <_dtoa_r+0x350>
 800a57c:	465f      	mov	r7, fp
 800a57e:	4648      	mov	r0, r9
 800a580:	e775      	b.n	800a46e <_dtoa_r+0x38e>
 800a582:	ec42 1b17 	vmov	d7, r1, r2
 800a586:	4a5c      	ldr	r2, [pc, #368]	; (800a6f8 <_dtoa_r+0x618>)
 800a588:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a58c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a590:	9a01      	ldr	r2, [sp, #4]
 800a592:	1814      	adds	r4, r2, r0
 800a594:	9a07      	ldr	r2, [sp, #28]
 800a596:	b352      	cbz	r2, 800a5ee <_dtoa_r+0x50e>
 800a598:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a59c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a5a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a5a4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a5a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a5ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a5b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a5b4:	ee14 2a90 	vmov	r2, s9
 800a5b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a5bc:	3230      	adds	r2, #48	; 0x30
 800a5be:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a5c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ca:	f808 2b01 	strb.w	r2, [r8], #1
 800a5ce:	d439      	bmi.n	800a644 <_dtoa_r+0x564>
 800a5d0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a5d4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5dc:	d472      	bmi.n	800a6c4 <_dtoa_r+0x5e4>
 800a5de:	45a0      	cmp	r8, r4
 800a5e0:	f43f af6b 	beq.w	800a4ba <_dtoa_r+0x3da>
 800a5e4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a5e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a5ec:	e7e0      	b.n	800a5b0 <_dtoa_r+0x4d0>
 800a5ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a5f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a5fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a600:	ee14 2a90 	vmov	r2, s9
 800a604:	3230      	adds	r2, #48	; 0x30
 800a606:	f808 2b01 	strb.w	r2, [r8], #1
 800a60a:	45a0      	cmp	r8, r4
 800a60c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a610:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a614:	d118      	bne.n	800a648 <_dtoa_r+0x568>
 800a616:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a61a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a61e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a626:	dc4d      	bgt.n	800a6c4 <_dtoa_r+0x5e4>
 800a628:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a62c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a634:	f57f af41 	bpl.w	800a4ba <_dtoa_r+0x3da>
 800a638:	4688      	mov	r8, r1
 800a63a:	3901      	subs	r1, #1
 800a63c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a640:	2b30      	cmp	r3, #48	; 0x30
 800a642:	d0f9      	beq.n	800a638 <_dtoa_r+0x558>
 800a644:	46bb      	mov	fp, r7
 800a646:	e02a      	b.n	800a69e <_dtoa_r+0x5be>
 800a648:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a64c:	e7d6      	b.n	800a5fc <_dtoa_r+0x51c>
 800a64e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a652:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a656:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a65a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a65e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a662:	ee15 3a10 	vmov	r3, s10
 800a666:	3330      	adds	r3, #48	; 0x30
 800a668:	f808 3b01 	strb.w	r3, [r8], #1
 800a66c:	9b01      	ldr	r3, [sp, #4]
 800a66e:	eba8 0303 	sub.w	r3, r8, r3
 800a672:	4599      	cmp	r9, r3
 800a674:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a678:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a67c:	d133      	bne.n	800a6e6 <_dtoa_r+0x606>
 800a67e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a682:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68a:	dc1a      	bgt.n	800a6c2 <_dtoa_r+0x5e2>
 800a68c:	eeb4 7b46 	vcmp.f64	d7, d6
 800a690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a694:	d103      	bne.n	800a69e <_dtoa_r+0x5be>
 800a696:	ee15 3a10 	vmov	r3, s10
 800a69a:	07d9      	lsls	r1, r3, #31
 800a69c:	d411      	bmi.n	800a6c2 <_dtoa_r+0x5e2>
 800a69e:	4629      	mov	r1, r5
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	f000 fe67 	bl	800b374 <_Bfree>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6aa:	f888 3000 	strb.w	r3, [r8]
 800a6ae:	f10b 0301 	add.w	r3, fp, #1
 800a6b2:	6013      	str	r3, [r2, #0]
 800a6b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f43f ad61 	beq.w	800a17e <_dtoa_r+0x9e>
 800a6bc:	f8c3 8000 	str.w	r8, [r3]
 800a6c0:	e55d      	b.n	800a17e <_dtoa_r+0x9e>
 800a6c2:	465f      	mov	r7, fp
 800a6c4:	4643      	mov	r3, r8
 800a6c6:	4698      	mov	r8, r3
 800a6c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6cc:	2a39      	cmp	r2, #57	; 0x39
 800a6ce:	d106      	bne.n	800a6de <_dtoa_r+0x5fe>
 800a6d0:	9a01      	ldr	r2, [sp, #4]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d1f7      	bne.n	800a6c6 <_dtoa_r+0x5e6>
 800a6d6:	9901      	ldr	r1, [sp, #4]
 800a6d8:	2230      	movs	r2, #48	; 0x30
 800a6da:	3701      	adds	r7, #1
 800a6dc:	700a      	strb	r2, [r1, #0]
 800a6de:	781a      	ldrb	r2, [r3, #0]
 800a6e0:	3201      	adds	r2, #1
 800a6e2:	701a      	strb	r2, [r3, #0]
 800a6e4:	e7ae      	b.n	800a644 <_dtoa_r+0x564>
 800a6e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a6ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f2:	d1b2      	bne.n	800a65a <_dtoa_r+0x57a>
 800a6f4:	e7d3      	b.n	800a69e <_dtoa_r+0x5be>
 800a6f6:	bf00      	nop
 800a6f8:	0800d098 	.word	0x0800d098
 800a6fc:	0800d070 	.word	0x0800d070
 800a700:	9907      	ldr	r1, [sp, #28]
 800a702:	2900      	cmp	r1, #0
 800a704:	f000 80d0 	beq.w	800a8a8 <_dtoa_r+0x7c8>
 800a708:	9906      	ldr	r1, [sp, #24]
 800a70a:	2901      	cmp	r1, #1
 800a70c:	f300 80b4 	bgt.w	800a878 <_dtoa_r+0x798>
 800a710:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a712:	2900      	cmp	r1, #0
 800a714:	f000 80ac 	beq.w	800a870 <_dtoa_r+0x790>
 800a718:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a71c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a720:	461c      	mov	r4, r3
 800a722:	930a      	str	r3, [sp, #40]	; 0x28
 800a724:	9b04      	ldr	r3, [sp, #16]
 800a726:	4413      	add	r3, r2
 800a728:	9304      	str	r3, [sp, #16]
 800a72a:	9b05      	ldr	r3, [sp, #20]
 800a72c:	2101      	movs	r1, #1
 800a72e:	4413      	add	r3, r2
 800a730:	4630      	mov	r0, r6
 800a732:	9305      	str	r3, [sp, #20]
 800a734:	f000 ff20 	bl	800b578 <__i2b>
 800a738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73a:	4607      	mov	r7, r0
 800a73c:	f1b8 0f00 	cmp.w	r8, #0
 800a740:	dd0d      	ble.n	800a75e <_dtoa_r+0x67e>
 800a742:	9a05      	ldr	r2, [sp, #20]
 800a744:	2a00      	cmp	r2, #0
 800a746:	dd0a      	ble.n	800a75e <_dtoa_r+0x67e>
 800a748:	4542      	cmp	r2, r8
 800a74a:	9904      	ldr	r1, [sp, #16]
 800a74c:	bfa8      	it	ge
 800a74e:	4642      	movge	r2, r8
 800a750:	1a89      	subs	r1, r1, r2
 800a752:	9104      	str	r1, [sp, #16]
 800a754:	9905      	ldr	r1, [sp, #20]
 800a756:	eba8 0802 	sub.w	r8, r8, r2
 800a75a:	1a8a      	subs	r2, r1, r2
 800a75c:	9205      	str	r2, [sp, #20]
 800a75e:	b303      	cbz	r3, 800a7a2 <_dtoa_r+0x6c2>
 800a760:	9a07      	ldr	r2, [sp, #28]
 800a762:	2a00      	cmp	r2, #0
 800a764:	f000 80a5 	beq.w	800a8b2 <_dtoa_r+0x7d2>
 800a768:	2c00      	cmp	r4, #0
 800a76a:	dd13      	ble.n	800a794 <_dtoa_r+0x6b4>
 800a76c:	4639      	mov	r1, r7
 800a76e:	4622      	mov	r2, r4
 800a770:	4630      	mov	r0, r6
 800a772:	930d      	str	r3, [sp, #52]	; 0x34
 800a774:	f000 ffc0 	bl	800b6f8 <__pow5mult>
 800a778:	462a      	mov	r2, r5
 800a77a:	4601      	mov	r1, r0
 800a77c:	4607      	mov	r7, r0
 800a77e:	4630      	mov	r0, r6
 800a780:	f000 ff10 	bl	800b5a4 <__multiply>
 800a784:	4629      	mov	r1, r5
 800a786:	900a      	str	r0, [sp, #40]	; 0x28
 800a788:	4630      	mov	r0, r6
 800a78a:	f000 fdf3 	bl	800b374 <_Bfree>
 800a78e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a792:	4615      	mov	r5, r2
 800a794:	1b1a      	subs	r2, r3, r4
 800a796:	d004      	beq.n	800a7a2 <_dtoa_r+0x6c2>
 800a798:	4629      	mov	r1, r5
 800a79a:	4630      	mov	r0, r6
 800a79c:	f000 ffac 	bl	800b6f8 <__pow5mult>
 800a7a0:	4605      	mov	r5, r0
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	f000 fee7 	bl	800b578 <__i2b>
 800a7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	f340 8081 	ble.w	800a8b6 <_dtoa_r+0x7d6>
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f000 ff9d 	bl	800b6f8 <__pow5mult>
 800a7be:	9b06      	ldr	r3, [sp, #24]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	dd7a      	ble.n	800a8bc <_dtoa_r+0x7dc>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	930a      	str	r3, [sp, #40]	; 0x28
 800a7ca:	6922      	ldr	r2, [r4, #16]
 800a7cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a7d0:	6910      	ldr	r0, [r2, #16]
 800a7d2:	f000 fe81 	bl	800b4d8 <__hi0bits>
 800a7d6:	f1c0 0020 	rsb	r0, r0, #32
 800a7da:	9b05      	ldr	r3, [sp, #20]
 800a7dc:	4418      	add	r0, r3
 800a7de:	f010 001f 	ands.w	r0, r0, #31
 800a7e2:	f000 808c 	beq.w	800a8fe <_dtoa_r+0x81e>
 800a7e6:	f1c0 0220 	rsb	r2, r0, #32
 800a7ea:	2a04      	cmp	r2, #4
 800a7ec:	f340 8085 	ble.w	800a8fa <_dtoa_r+0x81a>
 800a7f0:	f1c0 001c 	rsb	r0, r0, #28
 800a7f4:	9b04      	ldr	r3, [sp, #16]
 800a7f6:	4403      	add	r3, r0
 800a7f8:	9304      	str	r3, [sp, #16]
 800a7fa:	9b05      	ldr	r3, [sp, #20]
 800a7fc:	4403      	add	r3, r0
 800a7fe:	4480      	add	r8, r0
 800a800:	9305      	str	r3, [sp, #20]
 800a802:	9b04      	ldr	r3, [sp, #16]
 800a804:	2b00      	cmp	r3, #0
 800a806:	dd05      	ble.n	800a814 <_dtoa_r+0x734>
 800a808:	4629      	mov	r1, r5
 800a80a:	461a      	mov	r2, r3
 800a80c:	4630      	mov	r0, r6
 800a80e:	f000 ffcd 	bl	800b7ac <__lshift>
 800a812:	4605      	mov	r5, r0
 800a814:	9b05      	ldr	r3, [sp, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	dd05      	ble.n	800a826 <_dtoa_r+0x746>
 800a81a:	4621      	mov	r1, r4
 800a81c:	461a      	mov	r2, r3
 800a81e:	4630      	mov	r0, r6
 800a820:	f000 ffc4 	bl	800b7ac <__lshift>
 800a824:	4604      	mov	r4, r0
 800a826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d06a      	beq.n	800a902 <_dtoa_r+0x822>
 800a82c:	4621      	mov	r1, r4
 800a82e:	4628      	mov	r0, r5
 800a830:	f001 f82c 	bl	800b88c <__mcmp>
 800a834:	2800      	cmp	r0, #0
 800a836:	da64      	bge.n	800a902 <_dtoa_r+0x822>
 800a838:	2300      	movs	r3, #0
 800a83a:	4629      	mov	r1, r5
 800a83c:	220a      	movs	r2, #10
 800a83e:	4630      	mov	r0, r6
 800a840:	f000 fdba 	bl	800b3b8 <__multadd>
 800a844:	9b07      	ldr	r3, [sp, #28]
 800a846:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a84a:	4605      	mov	r5, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f000 8191 	beq.w	800ab74 <_dtoa_r+0xa94>
 800a852:	4639      	mov	r1, r7
 800a854:	2300      	movs	r3, #0
 800a856:	220a      	movs	r2, #10
 800a858:	4630      	mov	r0, r6
 800a85a:	f000 fdad 	bl	800b3b8 <__multadd>
 800a85e:	f1ba 0f00 	cmp.w	sl, #0
 800a862:	4607      	mov	r7, r0
 800a864:	f300 808d 	bgt.w	800a982 <_dtoa_r+0x8a2>
 800a868:	9b06      	ldr	r3, [sp, #24]
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	dc50      	bgt.n	800a910 <_dtoa_r+0x830>
 800a86e:	e088      	b.n	800a982 <_dtoa_r+0x8a2>
 800a870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a872:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a876:	e751      	b.n	800a71c <_dtoa_r+0x63c>
 800a878:	f109 34ff 	add.w	r4, r9, #4294967295
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	bfbf      	itttt	lt
 800a880:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a882:	1ae3      	sublt	r3, r4, r3
 800a884:	18d2      	addlt	r2, r2, r3
 800a886:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a888:	bfb6      	itet	lt
 800a88a:	4623      	movlt	r3, r4
 800a88c:	1b1c      	subge	r4, r3, r4
 800a88e:	2400      	movlt	r4, #0
 800a890:	f1b9 0f00 	cmp.w	r9, #0
 800a894:	bfb5      	itete	lt
 800a896:	9a04      	ldrlt	r2, [sp, #16]
 800a898:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a89c:	eba2 0809 	sublt.w	r8, r2, r9
 800a8a0:	464a      	movge	r2, r9
 800a8a2:	bfb8      	it	lt
 800a8a4:	2200      	movlt	r2, #0
 800a8a6:	e73c      	b.n	800a722 <_dtoa_r+0x642>
 800a8a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a8ac:	9f07      	ldr	r7, [sp, #28]
 800a8ae:	461c      	mov	r4, r3
 800a8b0:	e744      	b.n	800a73c <_dtoa_r+0x65c>
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	e770      	b.n	800a798 <_dtoa_r+0x6b8>
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	dc18      	bgt.n	800a8ee <_dtoa_r+0x80e>
 800a8bc:	9b02      	ldr	r3, [sp, #8]
 800a8be:	b9b3      	cbnz	r3, 800a8ee <_dtoa_r+0x80e>
 800a8c0:	9b03      	ldr	r3, [sp, #12]
 800a8c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a8c6:	b9a2      	cbnz	r2, 800a8f2 <_dtoa_r+0x812>
 800a8c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a8cc:	0d12      	lsrs	r2, r2, #20
 800a8ce:	0512      	lsls	r2, r2, #20
 800a8d0:	b18a      	cbz	r2, 800a8f6 <_dtoa_r+0x816>
 800a8d2:	9b04      	ldr	r3, [sp, #16]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	9304      	str	r3, [sp, #16]
 800a8d8:	9b05      	ldr	r3, [sp, #20]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	9305      	str	r3, [sp, #20]
 800a8de:	2301      	movs	r3, #1
 800a8e0:	930a      	str	r3, [sp, #40]	; 0x28
 800a8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f47f af70 	bne.w	800a7ca <_dtoa_r+0x6ea>
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	e775      	b.n	800a7da <_dtoa_r+0x6fa>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	e7f6      	b.n	800a8e0 <_dtoa_r+0x800>
 800a8f2:	9b02      	ldr	r3, [sp, #8]
 800a8f4:	e7f4      	b.n	800a8e0 <_dtoa_r+0x800>
 800a8f6:	920a      	str	r2, [sp, #40]	; 0x28
 800a8f8:	e7f3      	b.n	800a8e2 <_dtoa_r+0x802>
 800a8fa:	d082      	beq.n	800a802 <_dtoa_r+0x722>
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	301c      	adds	r0, #28
 800a900:	e778      	b.n	800a7f4 <_dtoa_r+0x714>
 800a902:	f1b9 0f00 	cmp.w	r9, #0
 800a906:	dc37      	bgt.n	800a978 <_dtoa_r+0x898>
 800a908:	9b06      	ldr	r3, [sp, #24]
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	dd34      	ble.n	800a978 <_dtoa_r+0x898>
 800a90e:	46ca      	mov	sl, r9
 800a910:	f1ba 0f00 	cmp.w	sl, #0
 800a914:	d10d      	bne.n	800a932 <_dtoa_r+0x852>
 800a916:	4621      	mov	r1, r4
 800a918:	4653      	mov	r3, sl
 800a91a:	2205      	movs	r2, #5
 800a91c:	4630      	mov	r0, r6
 800a91e:	f000 fd4b 	bl	800b3b8 <__multadd>
 800a922:	4601      	mov	r1, r0
 800a924:	4604      	mov	r4, r0
 800a926:	4628      	mov	r0, r5
 800a928:	f000 ffb0 	bl	800b88c <__mcmp>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f73f adeb 	bgt.w	800a508 <_dtoa_r+0x428>
 800a932:	9b08      	ldr	r3, [sp, #32]
 800a934:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a938:	ea6f 0b03 	mvn.w	fp, r3
 800a93c:	f04f 0900 	mov.w	r9, #0
 800a940:	4621      	mov	r1, r4
 800a942:	4630      	mov	r0, r6
 800a944:	f000 fd16 	bl	800b374 <_Bfree>
 800a948:	2f00      	cmp	r7, #0
 800a94a:	f43f aea8 	beq.w	800a69e <_dtoa_r+0x5be>
 800a94e:	f1b9 0f00 	cmp.w	r9, #0
 800a952:	d005      	beq.n	800a960 <_dtoa_r+0x880>
 800a954:	45b9      	cmp	r9, r7
 800a956:	d003      	beq.n	800a960 <_dtoa_r+0x880>
 800a958:	4649      	mov	r1, r9
 800a95a:	4630      	mov	r0, r6
 800a95c:	f000 fd0a 	bl	800b374 <_Bfree>
 800a960:	4639      	mov	r1, r7
 800a962:	4630      	mov	r0, r6
 800a964:	f000 fd06 	bl	800b374 <_Bfree>
 800a968:	e699      	b.n	800a69e <_dtoa_r+0x5be>
 800a96a:	2400      	movs	r4, #0
 800a96c:	4627      	mov	r7, r4
 800a96e:	e7e0      	b.n	800a932 <_dtoa_r+0x852>
 800a970:	46bb      	mov	fp, r7
 800a972:	4604      	mov	r4, r0
 800a974:	4607      	mov	r7, r0
 800a976:	e5c7      	b.n	800a508 <_dtoa_r+0x428>
 800a978:	9b07      	ldr	r3, [sp, #28]
 800a97a:	46ca      	mov	sl, r9
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 8100 	beq.w	800ab82 <_dtoa_r+0xaa2>
 800a982:	f1b8 0f00 	cmp.w	r8, #0
 800a986:	dd05      	ble.n	800a994 <_dtoa_r+0x8b4>
 800a988:	4639      	mov	r1, r7
 800a98a:	4642      	mov	r2, r8
 800a98c:	4630      	mov	r0, r6
 800a98e:	f000 ff0d 	bl	800b7ac <__lshift>
 800a992:	4607      	mov	r7, r0
 800a994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a996:	2b00      	cmp	r3, #0
 800a998:	d05d      	beq.n	800aa56 <_dtoa_r+0x976>
 800a99a:	6879      	ldr	r1, [r7, #4]
 800a99c:	4630      	mov	r0, r6
 800a99e:	f000 fca9 	bl	800b2f4 <_Balloc>
 800a9a2:	4680      	mov	r8, r0
 800a9a4:	b928      	cbnz	r0, 800a9b2 <_dtoa_r+0x8d2>
 800a9a6:	4b82      	ldr	r3, [pc, #520]	; (800abb0 <_dtoa_r+0xad0>)
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a9ae:	f7ff bbaf 	b.w	800a110 <_dtoa_r+0x30>
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	3202      	adds	r2, #2
 800a9b6:	0092      	lsls	r2, r2, #2
 800a9b8:	f107 010c 	add.w	r1, r7, #12
 800a9bc:	300c      	adds	r0, #12
 800a9be:	f000 fc8b 	bl	800b2d8 <memcpy>
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	4641      	mov	r1, r8
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f000 fef0 	bl	800b7ac <__lshift>
 800a9cc:	9b01      	ldr	r3, [sp, #4]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	9304      	str	r3, [sp, #16]
 800a9d2:	9b01      	ldr	r3, [sp, #4]
 800a9d4:	4453      	add	r3, sl
 800a9d6:	9308      	str	r3, [sp, #32]
 800a9d8:	9b02      	ldr	r3, [sp, #8]
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	46b9      	mov	r9, r7
 800a9e0:	9307      	str	r3, [sp, #28]
 800a9e2:	4607      	mov	r7, r0
 800a9e4:	9b04      	ldr	r3, [sp, #16]
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	9302      	str	r3, [sp, #8]
 800a9ee:	f7ff faeb 	bl	8009fc8 <quorem>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	3330      	adds	r3, #48	; 0x30
 800a9f6:	9005      	str	r0, [sp, #20]
 800a9f8:	4649      	mov	r1, r9
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a9fe:	f000 ff45 	bl	800b88c <__mcmp>
 800aa02:	463a      	mov	r2, r7
 800aa04:	4682      	mov	sl, r0
 800aa06:	4621      	mov	r1, r4
 800aa08:	4630      	mov	r0, r6
 800aa0a:	f000 ff5b 	bl	800b8c4 <__mdiff>
 800aa0e:	68c2      	ldr	r2, [r0, #12]
 800aa10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa12:	4680      	mov	r8, r0
 800aa14:	bb0a      	cbnz	r2, 800aa5a <_dtoa_r+0x97a>
 800aa16:	4601      	mov	r1, r0
 800aa18:	4628      	mov	r0, r5
 800aa1a:	f000 ff37 	bl	800b88c <__mcmp>
 800aa1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa20:	4602      	mov	r2, r0
 800aa22:	4641      	mov	r1, r8
 800aa24:	4630      	mov	r0, r6
 800aa26:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800aa2a:	f000 fca3 	bl	800b374 <_Bfree>
 800aa2e:	9b06      	ldr	r3, [sp, #24]
 800aa30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa32:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aa36:	ea43 0102 	orr.w	r1, r3, r2
 800aa3a:	9b07      	ldr	r3, [sp, #28]
 800aa3c:	430b      	orrs	r3, r1
 800aa3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa40:	d10d      	bne.n	800aa5e <_dtoa_r+0x97e>
 800aa42:	2b39      	cmp	r3, #57	; 0x39
 800aa44:	d029      	beq.n	800aa9a <_dtoa_r+0x9ba>
 800aa46:	f1ba 0f00 	cmp.w	sl, #0
 800aa4a:	dd01      	ble.n	800aa50 <_dtoa_r+0x970>
 800aa4c:	9b05      	ldr	r3, [sp, #20]
 800aa4e:	3331      	adds	r3, #49	; 0x31
 800aa50:	9a02      	ldr	r2, [sp, #8]
 800aa52:	7013      	strb	r3, [r2, #0]
 800aa54:	e774      	b.n	800a940 <_dtoa_r+0x860>
 800aa56:	4638      	mov	r0, r7
 800aa58:	e7b8      	b.n	800a9cc <_dtoa_r+0x8ec>
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	e7e1      	b.n	800aa22 <_dtoa_r+0x942>
 800aa5e:	f1ba 0f00 	cmp.w	sl, #0
 800aa62:	db06      	blt.n	800aa72 <_dtoa_r+0x992>
 800aa64:	9906      	ldr	r1, [sp, #24]
 800aa66:	ea41 0a0a 	orr.w	sl, r1, sl
 800aa6a:	9907      	ldr	r1, [sp, #28]
 800aa6c:	ea5a 0101 	orrs.w	r1, sl, r1
 800aa70:	d120      	bne.n	800aab4 <_dtoa_r+0x9d4>
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	ddec      	ble.n	800aa50 <_dtoa_r+0x970>
 800aa76:	4629      	mov	r1, r5
 800aa78:	2201      	movs	r2, #1
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	9304      	str	r3, [sp, #16]
 800aa7e:	f000 fe95 	bl	800b7ac <__lshift>
 800aa82:	4621      	mov	r1, r4
 800aa84:	4605      	mov	r5, r0
 800aa86:	f000 ff01 	bl	800b88c <__mcmp>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	9b04      	ldr	r3, [sp, #16]
 800aa8e:	dc02      	bgt.n	800aa96 <_dtoa_r+0x9b6>
 800aa90:	d1de      	bne.n	800aa50 <_dtoa_r+0x970>
 800aa92:	07da      	lsls	r2, r3, #31
 800aa94:	d5dc      	bpl.n	800aa50 <_dtoa_r+0x970>
 800aa96:	2b39      	cmp	r3, #57	; 0x39
 800aa98:	d1d8      	bne.n	800aa4c <_dtoa_r+0x96c>
 800aa9a:	9a02      	ldr	r2, [sp, #8]
 800aa9c:	2339      	movs	r3, #57	; 0x39
 800aa9e:	7013      	strb	r3, [r2, #0]
 800aaa0:	4643      	mov	r3, r8
 800aaa2:	4698      	mov	r8, r3
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800aaaa:	2a39      	cmp	r2, #57	; 0x39
 800aaac:	d051      	beq.n	800ab52 <_dtoa_r+0xa72>
 800aaae:	3201      	adds	r2, #1
 800aab0:	701a      	strb	r2, [r3, #0]
 800aab2:	e745      	b.n	800a940 <_dtoa_r+0x860>
 800aab4:	2a00      	cmp	r2, #0
 800aab6:	dd03      	ble.n	800aac0 <_dtoa_r+0x9e0>
 800aab8:	2b39      	cmp	r3, #57	; 0x39
 800aaba:	d0ee      	beq.n	800aa9a <_dtoa_r+0x9ba>
 800aabc:	3301      	adds	r3, #1
 800aabe:	e7c7      	b.n	800aa50 <_dtoa_r+0x970>
 800aac0:	9a04      	ldr	r2, [sp, #16]
 800aac2:	9908      	ldr	r1, [sp, #32]
 800aac4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aac8:	428a      	cmp	r2, r1
 800aaca:	d02b      	beq.n	800ab24 <_dtoa_r+0xa44>
 800aacc:	4629      	mov	r1, r5
 800aace:	2300      	movs	r3, #0
 800aad0:	220a      	movs	r2, #10
 800aad2:	4630      	mov	r0, r6
 800aad4:	f000 fc70 	bl	800b3b8 <__multadd>
 800aad8:	45b9      	cmp	r9, r7
 800aada:	4605      	mov	r5, r0
 800aadc:	f04f 0300 	mov.w	r3, #0
 800aae0:	f04f 020a 	mov.w	r2, #10
 800aae4:	4649      	mov	r1, r9
 800aae6:	4630      	mov	r0, r6
 800aae8:	d107      	bne.n	800aafa <_dtoa_r+0xa1a>
 800aaea:	f000 fc65 	bl	800b3b8 <__multadd>
 800aaee:	4681      	mov	r9, r0
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	9b04      	ldr	r3, [sp, #16]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	9304      	str	r3, [sp, #16]
 800aaf8:	e774      	b.n	800a9e4 <_dtoa_r+0x904>
 800aafa:	f000 fc5d 	bl	800b3b8 <__multadd>
 800aafe:	4639      	mov	r1, r7
 800ab00:	4681      	mov	r9, r0
 800ab02:	2300      	movs	r3, #0
 800ab04:	220a      	movs	r2, #10
 800ab06:	4630      	mov	r0, r6
 800ab08:	f000 fc56 	bl	800b3b8 <__multadd>
 800ab0c:	4607      	mov	r7, r0
 800ab0e:	e7f0      	b.n	800aaf2 <_dtoa_r+0xa12>
 800ab10:	f1ba 0f00 	cmp.w	sl, #0
 800ab14:	9a01      	ldr	r2, [sp, #4]
 800ab16:	bfcc      	ite	gt
 800ab18:	46d0      	movgt	r8, sl
 800ab1a:	f04f 0801 	movle.w	r8, #1
 800ab1e:	4490      	add	r8, r2
 800ab20:	f04f 0900 	mov.w	r9, #0
 800ab24:	4629      	mov	r1, r5
 800ab26:	2201      	movs	r2, #1
 800ab28:	4630      	mov	r0, r6
 800ab2a:	9302      	str	r3, [sp, #8]
 800ab2c:	f000 fe3e 	bl	800b7ac <__lshift>
 800ab30:	4621      	mov	r1, r4
 800ab32:	4605      	mov	r5, r0
 800ab34:	f000 feaa 	bl	800b88c <__mcmp>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	dcb1      	bgt.n	800aaa0 <_dtoa_r+0x9c0>
 800ab3c:	d102      	bne.n	800ab44 <_dtoa_r+0xa64>
 800ab3e:	9b02      	ldr	r3, [sp, #8]
 800ab40:	07db      	lsls	r3, r3, #31
 800ab42:	d4ad      	bmi.n	800aaa0 <_dtoa_r+0x9c0>
 800ab44:	4643      	mov	r3, r8
 800ab46:	4698      	mov	r8, r3
 800ab48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab4c:	2a30      	cmp	r2, #48	; 0x30
 800ab4e:	d0fa      	beq.n	800ab46 <_dtoa_r+0xa66>
 800ab50:	e6f6      	b.n	800a940 <_dtoa_r+0x860>
 800ab52:	9a01      	ldr	r2, [sp, #4]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d1a4      	bne.n	800aaa2 <_dtoa_r+0x9c2>
 800ab58:	f10b 0b01 	add.w	fp, fp, #1
 800ab5c:	2331      	movs	r3, #49	; 0x31
 800ab5e:	e778      	b.n	800aa52 <_dtoa_r+0x972>
 800ab60:	4b14      	ldr	r3, [pc, #80]	; (800abb4 <_dtoa_r+0xad4>)
 800ab62:	f7ff bb27 	b.w	800a1b4 <_dtoa_r+0xd4>
 800ab66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f47f ab03 	bne.w	800a174 <_dtoa_r+0x94>
 800ab6e:	4b12      	ldr	r3, [pc, #72]	; (800abb8 <_dtoa_r+0xad8>)
 800ab70:	f7ff bb20 	b.w	800a1b4 <_dtoa_r+0xd4>
 800ab74:	f1ba 0f00 	cmp.w	sl, #0
 800ab78:	dc03      	bgt.n	800ab82 <_dtoa_r+0xaa2>
 800ab7a:	9b06      	ldr	r3, [sp, #24]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	f73f aec7 	bgt.w	800a910 <_dtoa_r+0x830>
 800ab82:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ab86:	4621      	mov	r1, r4
 800ab88:	4628      	mov	r0, r5
 800ab8a:	f7ff fa1d 	bl	8009fc8 <quorem>
 800ab8e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab92:	f808 3b01 	strb.w	r3, [r8], #1
 800ab96:	9a01      	ldr	r2, [sp, #4]
 800ab98:	eba8 0202 	sub.w	r2, r8, r2
 800ab9c:	4592      	cmp	sl, r2
 800ab9e:	ddb7      	ble.n	800ab10 <_dtoa_r+0xa30>
 800aba0:	4629      	mov	r1, r5
 800aba2:	2300      	movs	r3, #0
 800aba4:	220a      	movs	r2, #10
 800aba6:	4630      	mov	r0, r6
 800aba8:	f000 fc06 	bl	800b3b8 <__multadd>
 800abac:	4605      	mov	r5, r0
 800abae:	e7ea      	b.n	800ab86 <_dtoa_r+0xaa6>
 800abb0:	0800cf88 	.word	0x0800cf88
 800abb4:	0800cd88 	.word	0x0800cd88
 800abb8:	0800cf09 	.word	0x0800cf09

0800abbc <rshift>:
 800abbc:	6903      	ldr	r3, [r0, #16]
 800abbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800abc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800abca:	f100 0414 	add.w	r4, r0, #20
 800abce:	dd45      	ble.n	800ac5c <rshift+0xa0>
 800abd0:	f011 011f 	ands.w	r1, r1, #31
 800abd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800abd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800abdc:	d10c      	bne.n	800abf8 <rshift+0x3c>
 800abde:	f100 0710 	add.w	r7, r0, #16
 800abe2:	4629      	mov	r1, r5
 800abe4:	42b1      	cmp	r1, r6
 800abe6:	d334      	bcc.n	800ac52 <rshift+0x96>
 800abe8:	1a9b      	subs	r3, r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	1eea      	subs	r2, r5, #3
 800abee:	4296      	cmp	r6, r2
 800abf0:	bf38      	it	cc
 800abf2:	2300      	movcc	r3, #0
 800abf4:	4423      	add	r3, r4
 800abf6:	e015      	b.n	800ac24 <rshift+0x68>
 800abf8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800abfc:	f1c1 0820 	rsb	r8, r1, #32
 800ac00:	40cf      	lsrs	r7, r1
 800ac02:	f105 0e04 	add.w	lr, r5, #4
 800ac06:	46a1      	mov	r9, r4
 800ac08:	4576      	cmp	r6, lr
 800ac0a:	46f4      	mov	ip, lr
 800ac0c:	d815      	bhi.n	800ac3a <rshift+0x7e>
 800ac0e:	1a9a      	subs	r2, r3, r2
 800ac10:	0092      	lsls	r2, r2, #2
 800ac12:	3a04      	subs	r2, #4
 800ac14:	3501      	adds	r5, #1
 800ac16:	42ae      	cmp	r6, r5
 800ac18:	bf38      	it	cc
 800ac1a:	2200      	movcc	r2, #0
 800ac1c:	18a3      	adds	r3, r4, r2
 800ac1e:	50a7      	str	r7, [r4, r2]
 800ac20:	b107      	cbz	r7, 800ac24 <rshift+0x68>
 800ac22:	3304      	adds	r3, #4
 800ac24:	1b1a      	subs	r2, r3, r4
 800ac26:	42a3      	cmp	r3, r4
 800ac28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac2c:	bf08      	it	eq
 800ac2e:	2300      	moveq	r3, #0
 800ac30:	6102      	str	r2, [r0, #16]
 800ac32:	bf08      	it	eq
 800ac34:	6143      	streq	r3, [r0, #20]
 800ac36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac3a:	f8dc c000 	ldr.w	ip, [ip]
 800ac3e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac42:	ea4c 0707 	orr.w	r7, ip, r7
 800ac46:	f849 7b04 	str.w	r7, [r9], #4
 800ac4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac4e:	40cf      	lsrs	r7, r1
 800ac50:	e7da      	b.n	800ac08 <rshift+0x4c>
 800ac52:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac56:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac5a:	e7c3      	b.n	800abe4 <rshift+0x28>
 800ac5c:	4623      	mov	r3, r4
 800ac5e:	e7e1      	b.n	800ac24 <rshift+0x68>

0800ac60 <__hexdig_fun>:
 800ac60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ac64:	2b09      	cmp	r3, #9
 800ac66:	d802      	bhi.n	800ac6e <__hexdig_fun+0xe>
 800ac68:	3820      	subs	r0, #32
 800ac6a:	b2c0      	uxtb	r0, r0
 800ac6c:	4770      	bx	lr
 800ac6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ac72:	2b05      	cmp	r3, #5
 800ac74:	d801      	bhi.n	800ac7a <__hexdig_fun+0x1a>
 800ac76:	3847      	subs	r0, #71	; 0x47
 800ac78:	e7f7      	b.n	800ac6a <__hexdig_fun+0xa>
 800ac7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ac7e:	2b05      	cmp	r3, #5
 800ac80:	d801      	bhi.n	800ac86 <__hexdig_fun+0x26>
 800ac82:	3827      	subs	r0, #39	; 0x27
 800ac84:	e7f1      	b.n	800ac6a <__hexdig_fun+0xa>
 800ac86:	2000      	movs	r0, #0
 800ac88:	4770      	bx	lr
	...

0800ac8c <__gethex>:
 800ac8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac90:	ed2d 8b02 	vpush	{d8}
 800ac94:	b089      	sub	sp, #36	; 0x24
 800ac96:	ee08 0a10 	vmov	s16, r0
 800ac9a:	9304      	str	r3, [sp, #16]
 800ac9c:	4bb4      	ldr	r3, [pc, #720]	; (800af70 <__gethex+0x2e4>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	4618      	mov	r0, r3
 800aca4:	468b      	mov	fp, r1
 800aca6:	4690      	mov	r8, r2
 800aca8:	f7f5 fb1a 	bl	80002e0 <strlen>
 800acac:	9b01      	ldr	r3, [sp, #4]
 800acae:	f8db 2000 	ldr.w	r2, [fp]
 800acb2:	4403      	add	r3, r0
 800acb4:	4682      	mov	sl, r0
 800acb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800acba:	9305      	str	r3, [sp, #20]
 800acbc:	1c93      	adds	r3, r2, #2
 800acbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800acc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800acc6:	32fe      	adds	r2, #254	; 0xfe
 800acc8:	18d1      	adds	r1, r2, r3
 800acca:	461f      	mov	r7, r3
 800accc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800acd0:	9100      	str	r1, [sp, #0]
 800acd2:	2830      	cmp	r0, #48	; 0x30
 800acd4:	d0f8      	beq.n	800acc8 <__gethex+0x3c>
 800acd6:	f7ff ffc3 	bl	800ac60 <__hexdig_fun>
 800acda:	4604      	mov	r4, r0
 800acdc:	2800      	cmp	r0, #0
 800acde:	d13a      	bne.n	800ad56 <__gethex+0xca>
 800ace0:	9901      	ldr	r1, [sp, #4]
 800ace2:	4652      	mov	r2, sl
 800ace4:	4638      	mov	r0, r7
 800ace6:	f001 fa2f 	bl	800c148 <strncmp>
 800acea:	4605      	mov	r5, r0
 800acec:	2800      	cmp	r0, #0
 800acee:	d168      	bne.n	800adc2 <__gethex+0x136>
 800acf0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800acf4:	eb07 060a 	add.w	r6, r7, sl
 800acf8:	f7ff ffb2 	bl	800ac60 <__hexdig_fun>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d062      	beq.n	800adc6 <__gethex+0x13a>
 800ad00:	4633      	mov	r3, r6
 800ad02:	7818      	ldrb	r0, [r3, #0]
 800ad04:	2830      	cmp	r0, #48	; 0x30
 800ad06:	461f      	mov	r7, r3
 800ad08:	f103 0301 	add.w	r3, r3, #1
 800ad0c:	d0f9      	beq.n	800ad02 <__gethex+0x76>
 800ad0e:	f7ff ffa7 	bl	800ac60 <__hexdig_fun>
 800ad12:	2301      	movs	r3, #1
 800ad14:	fab0 f480 	clz	r4, r0
 800ad18:	0964      	lsrs	r4, r4, #5
 800ad1a:	4635      	mov	r5, r6
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	463a      	mov	r2, r7
 800ad20:	4616      	mov	r6, r2
 800ad22:	3201      	adds	r2, #1
 800ad24:	7830      	ldrb	r0, [r6, #0]
 800ad26:	f7ff ff9b 	bl	800ac60 <__hexdig_fun>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d1f8      	bne.n	800ad20 <__gethex+0x94>
 800ad2e:	9901      	ldr	r1, [sp, #4]
 800ad30:	4652      	mov	r2, sl
 800ad32:	4630      	mov	r0, r6
 800ad34:	f001 fa08 	bl	800c148 <strncmp>
 800ad38:	b980      	cbnz	r0, 800ad5c <__gethex+0xd0>
 800ad3a:	b94d      	cbnz	r5, 800ad50 <__gethex+0xc4>
 800ad3c:	eb06 050a 	add.w	r5, r6, sl
 800ad40:	462a      	mov	r2, r5
 800ad42:	4616      	mov	r6, r2
 800ad44:	3201      	adds	r2, #1
 800ad46:	7830      	ldrb	r0, [r6, #0]
 800ad48:	f7ff ff8a 	bl	800ac60 <__hexdig_fun>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d1f8      	bne.n	800ad42 <__gethex+0xb6>
 800ad50:	1bad      	subs	r5, r5, r6
 800ad52:	00ad      	lsls	r5, r5, #2
 800ad54:	e004      	b.n	800ad60 <__gethex+0xd4>
 800ad56:	2400      	movs	r4, #0
 800ad58:	4625      	mov	r5, r4
 800ad5a:	e7e0      	b.n	800ad1e <__gethex+0x92>
 800ad5c:	2d00      	cmp	r5, #0
 800ad5e:	d1f7      	bne.n	800ad50 <__gethex+0xc4>
 800ad60:	7833      	ldrb	r3, [r6, #0]
 800ad62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad66:	2b50      	cmp	r3, #80	; 0x50
 800ad68:	d13b      	bne.n	800ade2 <__gethex+0x156>
 800ad6a:	7873      	ldrb	r3, [r6, #1]
 800ad6c:	2b2b      	cmp	r3, #43	; 0x2b
 800ad6e:	d02c      	beq.n	800adca <__gethex+0x13e>
 800ad70:	2b2d      	cmp	r3, #45	; 0x2d
 800ad72:	d02e      	beq.n	800add2 <__gethex+0x146>
 800ad74:	1c71      	adds	r1, r6, #1
 800ad76:	f04f 0900 	mov.w	r9, #0
 800ad7a:	7808      	ldrb	r0, [r1, #0]
 800ad7c:	f7ff ff70 	bl	800ac60 <__hexdig_fun>
 800ad80:	1e43      	subs	r3, r0, #1
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	2b18      	cmp	r3, #24
 800ad86:	d82c      	bhi.n	800ade2 <__gethex+0x156>
 800ad88:	f1a0 0210 	sub.w	r2, r0, #16
 800ad8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad90:	f7ff ff66 	bl	800ac60 <__hexdig_fun>
 800ad94:	1e43      	subs	r3, r0, #1
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	2b18      	cmp	r3, #24
 800ad9a:	d91d      	bls.n	800add8 <__gethex+0x14c>
 800ad9c:	f1b9 0f00 	cmp.w	r9, #0
 800ada0:	d000      	beq.n	800ada4 <__gethex+0x118>
 800ada2:	4252      	negs	r2, r2
 800ada4:	4415      	add	r5, r2
 800ada6:	f8cb 1000 	str.w	r1, [fp]
 800adaa:	b1e4      	cbz	r4, 800ade6 <__gethex+0x15a>
 800adac:	9b00      	ldr	r3, [sp, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	bf14      	ite	ne
 800adb2:	2700      	movne	r7, #0
 800adb4:	2706      	moveq	r7, #6
 800adb6:	4638      	mov	r0, r7
 800adb8:	b009      	add	sp, #36	; 0x24
 800adba:	ecbd 8b02 	vpop	{d8}
 800adbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc2:	463e      	mov	r6, r7
 800adc4:	4625      	mov	r5, r4
 800adc6:	2401      	movs	r4, #1
 800adc8:	e7ca      	b.n	800ad60 <__gethex+0xd4>
 800adca:	f04f 0900 	mov.w	r9, #0
 800adce:	1cb1      	adds	r1, r6, #2
 800add0:	e7d3      	b.n	800ad7a <__gethex+0xee>
 800add2:	f04f 0901 	mov.w	r9, #1
 800add6:	e7fa      	b.n	800adce <__gethex+0x142>
 800add8:	230a      	movs	r3, #10
 800adda:	fb03 0202 	mla	r2, r3, r2, r0
 800adde:	3a10      	subs	r2, #16
 800ade0:	e7d4      	b.n	800ad8c <__gethex+0x100>
 800ade2:	4631      	mov	r1, r6
 800ade4:	e7df      	b.n	800ada6 <__gethex+0x11a>
 800ade6:	1bf3      	subs	r3, r6, r7
 800ade8:	3b01      	subs	r3, #1
 800adea:	4621      	mov	r1, r4
 800adec:	2b07      	cmp	r3, #7
 800adee:	dc0b      	bgt.n	800ae08 <__gethex+0x17c>
 800adf0:	ee18 0a10 	vmov	r0, s16
 800adf4:	f000 fa7e 	bl	800b2f4 <_Balloc>
 800adf8:	4604      	mov	r4, r0
 800adfa:	b940      	cbnz	r0, 800ae0e <__gethex+0x182>
 800adfc:	4b5d      	ldr	r3, [pc, #372]	; (800af74 <__gethex+0x2e8>)
 800adfe:	4602      	mov	r2, r0
 800ae00:	21de      	movs	r1, #222	; 0xde
 800ae02:	485d      	ldr	r0, [pc, #372]	; (800af78 <__gethex+0x2ec>)
 800ae04:	f001 f9c2 	bl	800c18c <__assert_func>
 800ae08:	3101      	adds	r1, #1
 800ae0a:	105b      	asrs	r3, r3, #1
 800ae0c:	e7ee      	b.n	800adec <__gethex+0x160>
 800ae0e:	f100 0914 	add.w	r9, r0, #20
 800ae12:	f04f 0b00 	mov.w	fp, #0
 800ae16:	f1ca 0301 	rsb	r3, sl, #1
 800ae1a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ae1e:	f8cd b000 	str.w	fp, [sp]
 800ae22:	9306      	str	r3, [sp, #24]
 800ae24:	42b7      	cmp	r7, r6
 800ae26:	d340      	bcc.n	800aeaa <__gethex+0x21e>
 800ae28:	9802      	ldr	r0, [sp, #8]
 800ae2a:	9b00      	ldr	r3, [sp, #0]
 800ae2c:	f840 3b04 	str.w	r3, [r0], #4
 800ae30:	eba0 0009 	sub.w	r0, r0, r9
 800ae34:	1080      	asrs	r0, r0, #2
 800ae36:	0146      	lsls	r6, r0, #5
 800ae38:	6120      	str	r0, [r4, #16]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 fb4c 	bl	800b4d8 <__hi0bits>
 800ae40:	1a30      	subs	r0, r6, r0
 800ae42:	f8d8 6000 	ldr.w	r6, [r8]
 800ae46:	42b0      	cmp	r0, r6
 800ae48:	dd63      	ble.n	800af12 <__gethex+0x286>
 800ae4a:	1b87      	subs	r7, r0, r6
 800ae4c:	4639      	mov	r1, r7
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f000 feed 	bl	800bc2e <__any_on>
 800ae54:	4682      	mov	sl, r0
 800ae56:	b1a8      	cbz	r0, 800ae84 <__gethex+0x1f8>
 800ae58:	1e7b      	subs	r3, r7, #1
 800ae5a:	1159      	asrs	r1, r3, #5
 800ae5c:	f003 021f 	and.w	r2, r3, #31
 800ae60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ae64:	f04f 0a01 	mov.w	sl, #1
 800ae68:	fa0a f202 	lsl.w	r2, sl, r2
 800ae6c:	420a      	tst	r2, r1
 800ae6e:	d009      	beq.n	800ae84 <__gethex+0x1f8>
 800ae70:	4553      	cmp	r3, sl
 800ae72:	dd05      	ble.n	800ae80 <__gethex+0x1f4>
 800ae74:	1eb9      	subs	r1, r7, #2
 800ae76:	4620      	mov	r0, r4
 800ae78:	f000 fed9 	bl	800bc2e <__any_on>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d145      	bne.n	800af0c <__gethex+0x280>
 800ae80:	f04f 0a02 	mov.w	sl, #2
 800ae84:	4639      	mov	r1, r7
 800ae86:	4620      	mov	r0, r4
 800ae88:	f7ff fe98 	bl	800abbc <rshift>
 800ae8c:	443d      	add	r5, r7
 800ae8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae92:	42ab      	cmp	r3, r5
 800ae94:	da4c      	bge.n	800af30 <__gethex+0x2a4>
 800ae96:	ee18 0a10 	vmov	r0, s16
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	f000 fa6a 	bl	800b374 <_Bfree>
 800aea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aea2:	2300      	movs	r3, #0
 800aea4:	6013      	str	r3, [r2, #0]
 800aea6:	27a3      	movs	r7, #163	; 0xa3
 800aea8:	e785      	b.n	800adb6 <__gethex+0x12a>
 800aeaa:	1e73      	subs	r3, r6, #1
 800aeac:	9a05      	ldr	r2, [sp, #20]
 800aeae:	9303      	str	r3, [sp, #12]
 800aeb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d019      	beq.n	800aeec <__gethex+0x260>
 800aeb8:	f1bb 0f20 	cmp.w	fp, #32
 800aebc:	d107      	bne.n	800aece <__gethex+0x242>
 800aebe:	9b02      	ldr	r3, [sp, #8]
 800aec0:	9a00      	ldr	r2, [sp, #0]
 800aec2:	f843 2b04 	str.w	r2, [r3], #4
 800aec6:	9302      	str	r3, [sp, #8]
 800aec8:	2300      	movs	r3, #0
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	469b      	mov	fp, r3
 800aece:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aed2:	f7ff fec5 	bl	800ac60 <__hexdig_fun>
 800aed6:	9b00      	ldr	r3, [sp, #0]
 800aed8:	f000 000f 	and.w	r0, r0, #15
 800aedc:	fa00 f00b 	lsl.w	r0, r0, fp
 800aee0:	4303      	orrs	r3, r0
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	f10b 0b04 	add.w	fp, fp, #4
 800aee8:	9b03      	ldr	r3, [sp, #12]
 800aeea:	e00d      	b.n	800af08 <__gethex+0x27c>
 800aeec:	9b03      	ldr	r3, [sp, #12]
 800aeee:	9a06      	ldr	r2, [sp, #24]
 800aef0:	4413      	add	r3, r2
 800aef2:	42bb      	cmp	r3, r7
 800aef4:	d3e0      	bcc.n	800aeb8 <__gethex+0x22c>
 800aef6:	4618      	mov	r0, r3
 800aef8:	9901      	ldr	r1, [sp, #4]
 800aefa:	9307      	str	r3, [sp, #28]
 800aefc:	4652      	mov	r2, sl
 800aefe:	f001 f923 	bl	800c148 <strncmp>
 800af02:	9b07      	ldr	r3, [sp, #28]
 800af04:	2800      	cmp	r0, #0
 800af06:	d1d7      	bne.n	800aeb8 <__gethex+0x22c>
 800af08:	461e      	mov	r6, r3
 800af0a:	e78b      	b.n	800ae24 <__gethex+0x198>
 800af0c:	f04f 0a03 	mov.w	sl, #3
 800af10:	e7b8      	b.n	800ae84 <__gethex+0x1f8>
 800af12:	da0a      	bge.n	800af2a <__gethex+0x29e>
 800af14:	1a37      	subs	r7, r6, r0
 800af16:	4621      	mov	r1, r4
 800af18:	ee18 0a10 	vmov	r0, s16
 800af1c:	463a      	mov	r2, r7
 800af1e:	f000 fc45 	bl	800b7ac <__lshift>
 800af22:	1bed      	subs	r5, r5, r7
 800af24:	4604      	mov	r4, r0
 800af26:	f100 0914 	add.w	r9, r0, #20
 800af2a:	f04f 0a00 	mov.w	sl, #0
 800af2e:	e7ae      	b.n	800ae8e <__gethex+0x202>
 800af30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800af34:	42a8      	cmp	r0, r5
 800af36:	dd72      	ble.n	800b01e <__gethex+0x392>
 800af38:	1b45      	subs	r5, r0, r5
 800af3a:	42ae      	cmp	r6, r5
 800af3c:	dc36      	bgt.n	800afac <__gethex+0x320>
 800af3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af42:	2b02      	cmp	r3, #2
 800af44:	d02a      	beq.n	800af9c <__gethex+0x310>
 800af46:	2b03      	cmp	r3, #3
 800af48:	d02c      	beq.n	800afa4 <__gethex+0x318>
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d11c      	bne.n	800af88 <__gethex+0x2fc>
 800af4e:	42ae      	cmp	r6, r5
 800af50:	d11a      	bne.n	800af88 <__gethex+0x2fc>
 800af52:	2e01      	cmp	r6, #1
 800af54:	d112      	bne.n	800af7c <__gethex+0x2f0>
 800af56:	9a04      	ldr	r2, [sp, #16]
 800af58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af5c:	6013      	str	r3, [r2, #0]
 800af5e:	2301      	movs	r3, #1
 800af60:	6123      	str	r3, [r4, #16]
 800af62:	f8c9 3000 	str.w	r3, [r9]
 800af66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af68:	2762      	movs	r7, #98	; 0x62
 800af6a:	601c      	str	r4, [r3, #0]
 800af6c:	e723      	b.n	800adb6 <__gethex+0x12a>
 800af6e:	bf00      	nop
 800af70:	0800d000 	.word	0x0800d000
 800af74:	0800cf88 	.word	0x0800cf88
 800af78:	0800cf99 	.word	0x0800cf99
 800af7c:	1e71      	subs	r1, r6, #1
 800af7e:	4620      	mov	r0, r4
 800af80:	f000 fe55 	bl	800bc2e <__any_on>
 800af84:	2800      	cmp	r0, #0
 800af86:	d1e6      	bne.n	800af56 <__gethex+0x2ca>
 800af88:	ee18 0a10 	vmov	r0, s16
 800af8c:	4621      	mov	r1, r4
 800af8e:	f000 f9f1 	bl	800b374 <_Bfree>
 800af92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af94:	2300      	movs	r3, #0
 800af96:	6013      	str	r3, [r2, #0]
 800af98:	2750      	movs	r7, #80	; 0x50
 800af9a:	e70c      	b.n	800adb6 <__gethex+0x12a>
 800af9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1f2      	bne.n	800af88 <__gethex+0x2fc>
 800afa2:	e7d8      	b.n	800af56 <__gethex+0x2ca>
 800afa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1d5      	bne.n	800af56 <__gethex+0x2ca>
 800afaa:	e7ed      	b.n	800af88 <__gethex+0x2fc>
 800afac:	1e6f      	subs	r7, r5, #1
 800afae:	f1ba 0f00 	cmp.w	sl, #0
 800afb2:	d131      	bne.n	800b018 <__gethex+0x38c>
 800afb4:	b127      	cbz	r7, 800afc0 <__gethex+0x334>
 800afb6:	4639      	mov	r1, r7
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 fe38 	bl	800bc2e <__any_on>
 800afbe:	4682      	mov	sl, r0
 800afc0:	117b      	asrs	r3, r7, #5
 800afc2:	2101      	movs	r1, #1
 800afc4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800afc8:	f007 071f 	and.w	r7, r7, #31
 800afcc:	fa01 f707 	lsl.w	r7, r1, r7
 800afd0:	421f      	tst	r7, r3
 800afd2:	4629      	mov	r1, r5
 800afd4:	4620      	mov	r0, r4
 800afd6:	bf18      	it	ne
 800afd8:	f04a 0a02 	orrne.w	sl, sl, #2
 800afdc:	1b76      	subs	r6, r6, r5
 800afde:	f7ff fded 	bl	800abbc <rshift>
 800afe2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800afe6:	2702      	movs	r7, #2
 800afe8:	f1ba 0f00 	cmp.w	sl, #0
 800afec:	d048      	beq.n	800b080 <__gethex+0x3f4>
 800afee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d015      	beq.n	800b022 <__gethex+0x396>
 800aff6:	2b03      	cmp	r3, #3
 800aff8:	d017      	beq.n	800b02a <__gethex+0x39e>
 800affa:	2b01      	cmp	r3, #1
 800affc:	d109      	bne.n	800b012 <__gethex+0x386>
 800affe:	f01a 0f02 	tst.w	sl, #2
 800b002:	d006      	beq.n	800b012 <__gethex+0x386>
 800b004:	f8d9 0000 	ldr.w	r0, [r9]
 800b008:	ea4a 0a00 	orr.w	sl, sl, r0
 800b00c:	f01a 0f01 	tst.w	sl, #1
 800b010:	d10e      	bne.n	800b030 <__gethex+0x3a4>
 800b012:	f047 0710 	orr.w	r7, r7, #16
 800b016:	e033      	b.n	800b080 <__gethex+0x3f4>
 800b018:	f04f 0a01 	mov.w	sl, #1
 800b01c:	e7d0      	b.n	800afc0 <__gethex+0x334>
 800b01e:	2701      	movs	r7, #1
 800b020:	e7e2      	b.n	800afe8 <__gethex+0x35c>
 800b022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b024:	f1c3 0301 	rsb	r3, r3, #1
 800b028:	9315      	str	r3, [sp, #84]	; 0x54
 800b02a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d0f0      	beq.n	800b012 <__gethex+0x386>
 800b030:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b034:	f104 0314 	add.w	r3, r4, #20
 800b038:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b03c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b040:	f04f 0c00 	mov.w	ip, #0
 800b044:	4618      	mov	r0, r3
 800b046:	f853 2b04 	ldr.w	r2, [r3], #4
 800b04a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b04e:	d01c      	beq.n	800b08a <__gethex+0x3fe>
 800b050:	3201      	adds	r2, #1
 800b052:	6002      	str	r2, [r0, #0]
 800b054:	2f02      	cmp	r7, #2
 800b056:	f104 0314 	add.w	r3, r4, #20
 800b05a:	d13f      	bne.n	800b0dc <__gethex+0x450>
 800b05c:	f8d8 2000 	ldr.w	r2, [r8]
 800b060:	3a01      	subs	r2, #1
 800b062:	42b2      	cmp	r2, r6
 800b064:	d10a      	bne.n	800b07c <__gethex+0x3f0>
 800b066:	1171      	asrs	r1, r6, #5
 800b068:	2201      	movs	r2, #1
 800b06a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b06e:	f006 061f 	and.w	r6, r6, #31
 800b072:	fa02 f606 	lsl.w	r6, r2, r6
 800b076:	421e      	tst	r6, r3
 800b078:	bf18      	it	ne
 800b07a:	4617      	movne	r7, r2
 800b07c:	f047 0720 	orr.w	r7, r7, #32
 800b080:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b082:	601c      	str	r4, [r3, #0]
 800b084:	9b04      	ldr	r3, [sp, #16]
 800b086:	601d      	str	r5, [r3, #0]
 800b088:	e695      	b.n	800adb6 <__gethex+0x12a>
 800b08a:	4299      	cmp	r1, r3
 800b08c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b090:	d8d8      	bhi.n	800b044 <__gethex+0x3b8>
 800b092:	68a3      	ldr	r3, [r4, #8]
 800b094:	459b      	cmp	fp, r3
 800b096:	db19      	blt.n	800b0cc <__gethex+0x440>
 800b098:	6861      	ldr	r1, [r4, #4]
 800b09a:	ee18 0a10 	vmov	r0, s16
 800b09e:	3101      	adds	r1, #1
 800b0a0:	f000 f928 	bl	800b2f4 <_Balloc>
 800b0a4:	4681      	mov	r9, r0
 800b0a6:	b918      	cbnz	r0, 800b0b0 <__gethex+0x424>
 800b0a8:	4b1a      	ldr	r3, [pc, #104]	; (800b114 <__gethex+0x488>)
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	2184      	movs	r1, #132	; 0x84
 800b0ae:	e6a8      	b.n	800ae02 <__gethex+0x176>
 800b0b0:	6922      	ldr	r2, [r4, #16]
 800b0b2:	3202      	adds	r2, #2
 800b0b4:	f104 010c 	add.w	r1, r4, #12
 800b0b8:	0092      	lsls	r2, r2, #2
 800b0ba:	300c      	adds	r0, #12
 800b0bc:	f000 f90c 	bl	800b2d8 <memcpy>
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	ee18 0a10 	vmov	r0, s16
 800b0c6:	f000 f955 	bl	800b374 <_Bfree>
 800b0ca:	464c      	mov	r4, r9
 800b0cc:	6923      	ldr	r3, [r4, #16]
 800b0ce:	1c5a      	adds	r2, r3, #1
 800b0d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0d4:	6122      	str	r2, [r4, #16]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	615a      	str	r2, [r3, #20]
 800b0da:	e7bb      	b.n	800b054 <__gethex+0x3c8>
 800b0dc:	6922      	ldr	r2, [r4, #16]
 800b0de:	455a      	cmp	r2, fp
 800b0e0:	dd0b      	ble.n	800b0fa <__gethex+0x46e>
 800b0e2:	2101      	movs	r1, #1
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f7ff fd69 	bl	800abbc <rshift>
 800b0ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0ee:	3501      	adds	r5, #1
 800b0f0:	42ab      	cmp	r3, r5
 800b0f2:	f6ff aed0 	blt.w	800ae96 <__gethex+0x20a>
 800b0f6:	2701      	movs	r7, #1
 800b0f8:	e7c0      	b.n	800b07c <__gethex+0x3f0>
 800b0fa:	f016 061f 	ands.w	r6, r6, #31
 800b0fe:	d0fa      	beq.n	800b0f6 <__gethex+0x46a>
 800b100:	4453      	add	r3, sl
 800b102:	f1c6 0620 	rsb	r6, r6, #32
 800b106:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b10a:	f000 f9e5 	bl	800b4d8 <__hi0bits>
 800b10e:	42b0      	cmp	r0, r6
 800b110:	dbe7      	blt.n	800b0e2 <__gethex+0x456>
 800b112:	e7f0      	b.n	800b0f6 <__gethex+0x46a>
 800b114:	0800cf88 	.word	0x0800cf88

0800b118 <L_shift>:
 800b118:	f1c2 0208 	rsb	r2, r2, #8
 800b11c:	0092      	lsls	r2, r2, #2
 800b11e:	b570      	push	{r4, r5, r6, lr}
 800b120:	f1c2 0620 	rsb	r6, r2, #32
 800b124:	6843      	ldr	r3, [r0, #4]
 800b126:	6804      	ldr	r4, [r0, #0]
 800b128:	fa03 f506 	lsl.w	r5, r3, r6
 800b12c:	432c      	orrs	r4, r5
 800b12e:	40d3      	lsrs	r3, r2
 800b130:	6004      	str	r4, [r0, #0]
 800b132:	f840 3f04 	str.w	r3, [r0, #4]!
 800b136:	4288      	cmp	r0, r1
 800b138:	d3f4      	bcc.n	800b124 <L_shift+0xc>
 800b13a:	bd70      	pop	{r4, r5, r6, pc}

0800b13c <__match>:
 800b13c:	b530      	push	{r4, r5, lr}
 800b13e:	6803      	ldr	r3, [r0, #0]
 800b140:	3301      	adds	r3, #1
 800b142:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b146:	b914      	cbnz	r4, 800b14e <__match+0x12>
 800b148:	6003      	str	r3, [r0, #0]
 800b14a:	2001      	movs	r0, #1
 800b14c:	bd30      	pop	{r4, r5, pc}
 800b14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b152:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b156:	2d19      	cmp	r5, #25
 800b158:	bf98      	it	ls
 800b15a:	3220      	addls	r2, #32
 800b15c:	42a2      	cmp	r2, r4
 800b15e:	d0f0      	beq.n	800b142 <__match+0x6>
 800b160:	2000      	movs	r0, #0
 800b162:	e7f3      	b.n	800b14c <__match+0x10>

0800b164 <__hexnan>:
 800b164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b168:	680b      	ldr	r3, [r1, #0]
 800b16a:	115e      	asrs	r6, r3, #5
 800b16c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b170:	f013 031f 	ands.w	r3, r3, #31
 800b174:	b087      	sub	sp, #28
 800b176:	bf18      	it	ne
 800b178:	3604      	addne	r6, #4
 800b17a:	2500      	movs	r5, #0
 800b17c:	1f37      	subs	r7, r6, #4
 800b17e:	4690      	mov	r8, r2
 800b180:	6802      	ldr	r2, [r0, #0]
 800b182:	9301      	str	r3, [sp, #4]
 800b184:	4682      	mov	sl, r0
 800b186:	f846 5c04 	str.w	r5, [r6, #-4]
 800b18a:	46b9      	mov	r9, r7
 800b18c:	463c      	mov	r4, r7
 800b18e:	9502      	str	r5, [sp, #8]
 800b190:	46ab      	mov	fp, r5
 800b192:	7851      	ldrb	r1, [r2, #1]
 800b194:	1c53      	adds	r3, r2, #1
 800b196:	9303      	str	r3, [sp, #12]
 800b198:	b341      	cbz	r1, 800b1ec <__hexnan+0x88>
 800b19a:	4608      	mov	r0, r1
 800b19c:	9205      	str	r2, [sp, #20]
 800b19e:	9104      	str	r1, [sp, #16]
 800b1a0:	f7ff fd5e 	bl	800ac60 <__hexdig_fun>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d14f      	bne.n	800b248 <__hexnan+0xe4>
 800b1a8:	9904      	ldr	r1, [sp, #16]
 800b1aa:	9a05      	ldr	r2, [sp, #20]
 800b1ac:	2920      	cmp	r1, #32
 800b1ae:	d818      	bhi.n	800b1e2 <__hexnan+0x7e>
 800b1b0:	9b02      	ldr	r3, [sp, #8]
 800b1b2:	459b      	cmp	fp, r3
 800b1b4:	dd13      	ble.n	800b1de <__hexnan+0x7a>
 800b1b6:	454c      	cmp	r4, r9
 800b1b8:	d206      	bcs.n	800b1c8 <__hexnan+0x64>
 800b1ba:	2d07      	cmp	r5, #7
 800b1bc:	dc04      	bgt.n	800b1c8 <__hexnan+0x64>
 800b1be:	462a      	mov	r2, r5
 800b1c0:	4649      	mov	r1, r9
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f7ff ffa8 	bl	800b118 <L_shift>
 800b1c8:	4544      	cmp	r4, r8
 800b1ca:	d950      	bls.n	800b26e <__hexnan+0x10a>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	f1a4 0904 	sub.w	r9, r4, #4
 800b1d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1d6:	f8cd b008 	str.w	fp, [sp, #8]
 800b1da:	464c      	mov	r4, r9
 800b1dc:	461d      	mov	r5, r3
 800b1de:	9a03      	ldr	r2, [sp, #12]
 800b1e0:	e7d7      	b.n	800b192 <__hexnan+0x2e>
 800b1e2:	2929      	cmp	r1, #41	; 0x29
 800b1e4:	d156      	bne.n	800b294 <__hexnan+0x130>
 800b1e6:	3202      	adds	r2, #2
 800b1e8:	f8ca 2000 	str.w	r2, [sl]
 800b1ec:	f1bb 0f00 	cmp.w	fp, #0
 800b1f0:	d050      	beq.n	800b294 <__hexnan+0x130>
 800b1f2:	454c      	cmp	r4, r9
 800b1f4:	d206      	bcs.n	800b204 <__hexnan+0xa0>
 800b1f6:	2d07      	cmp	r5, #7
 800b1f8:	dc04      	bgt.n	800b204 <__hexnan+0xa0>
 800b1fa:	462a      	mov	r2, r5
 800b1fc:	4649      	mov	r1, r9
 800b1fe:	4620      	mov	r0, r4
 800b200:	f7ff ff8a 	bl	800b118 <L_shift>
 800b204:	4544      	cmp	r4, r8
 800b206:	d934      	bls.n	800b272 <__hexnan+0x10e>
 800b208:	f1a8 0204 	sub.w	r2, r8, #4
 800b20c:	4623      	mov	r3, r4
 800b20e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b212:	f842 1f04 	str.w	r1, [r2, #4]!
 800b216:	429f      	cmp	r7, r3
 800b218:	d2f9      	bcs.n	800b20e <__hexnan+0xaa>
 800b21a:	1b3b      	subs	r3, r7, r4
 800b21c:	f023 0303 	bic.w	r3, r3, #3
 800b220:	3304      	adds	r3, #4
 800b222:	3401      	adds	r4, #1
 800b224:	3e03      	subs	r6, #3
 800b226:	42b4      	cmp	r4, r6
 800b228:	bf88      	it	hi
 800b22a:	2304      	movhi	r3, #4
 800b22c:	4443      	add	r3, r8
 800b22e:	2200      	movs	r2, #0
 800b230:	f843 2b04 	str.w	r2, [r3], #4
 800b234:	429f      	cmp	r7, r3
 800b236:	d2fb      	bcs.n	800b230 <__hexnan+0xcc>
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	b91b      	cbnz	r3, 800b244 <__hexnan+0xe0>
 800b23c:	4547      	cmp	r7, r8
 800b23e:	d127      	bne.n	800b290 <__hexnan+0x12c>
 800b240:	2301      	movs	r3, #1
 800b242:	603b      	str	r3, [r7, #0]
 800b244:	2005      	movs	r0, #5
 800b246:	e026      	b.n	800b296 <__hexnan+0x132>
 800b248:	3501      	adds	r5, #1
 800b24a:	2d08      	cmp	r5, #8
 800b24c:	f10b 0b01 	add.w	fp, fp, #1
 800b250:	dd06      	ble.n	800b260 <__hexnan+0xfc>
 800b252:	4544      	cmp	r4, r8
 800b254:	d9c3      	bls.n	800b1de <__hexnan+0x7a>
 800b256:	2300      	movs	r3, #0
 800b258:	f844 3c04 	str.w	r3, [r4, #-4]
 800b25c:	2501      	movs	r5, #1
 800b25e:	3c04      	subs	r4, #4
 800b260:	6822      	ldr	r2, [r4, #0]
 800b262:	f000 000f 	and.w	r0, r0, #15
 800b266:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b26a:	6022      	str	r2, [r4, #0]
 800b26c:	e7b7      	b.n	800b1de <__hexnan+0x7a>
 800b26e:	2508      	movs	r5, #8
 800b270:	e7b5      	b.n	800b1de <__hexnan+0x7a>
 800b272:	9b01      	ldr	r3, [sp, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d0df      	beq.n	800b238 <__hexnan+0xd4>
 800b278:	f04f 32ff 	mov.w	r2, #4294967295
 800b27c:	f1c3 0320 	rsb	r3, r3, #32
 800b280:	fa22 f303 	lsr.w	r3, r2, r3
 800b284:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b288:	401a      	ands	r2, r3
 800b28a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b28e:	e7d3      	b.n	800b238 <__hexnan+0xd4>
 800b290:	3f04      	subs	r7, #4
 800b292:	e7d1      	b.n	800b238 <__hexnan+0xd4>
 800b294:	2004      	movs	r0, #4
 800b296:	b007      	add	sp, #28
 800b298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b29c <_localeconv_r>:
 800b29c:	4800      	ldr	r0, [pc, #0]	; (800b2a0 <_localeconv_r+0x4>)
 800b29e:	4770      	bx	lr
 800b2a0:	24000174 	.word	0x24000174

0800b2a4 <malloc>:
 800b2a4:	4b02      	ldr	r3, [pc, #8]	; (800b2b0 <malloc+0xc>)
 800b2a6:	4601      	mov	r1, r0
 800b2a8:	6818      	ldr	r0, [r3, #0]
 800b2aa:	f000 bd63 	b.w	800bd74 <_malloc_r>
 800b2ae:	bf00      	nop
 800b2b0:	2400001c 	.word	0x2400001c

0800b2b4 <__ascii_mbtowc>:
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	b901      	cbnz	r1, 800b2ba <__ascii_mbtowc+0x6>
 800b2b8:	a901      	add	r1, sp, #4
 800b2ba:	b142      	cbz	r2, 800b2ce <__ascii_mbtowc+0x1a>
 800b2bc:	b14b      	cbz	r3, 800b2d2 <__ascii_mbtowc+0x1e>
 800b2be:	7813      	ldrb	r3, [r2, #0]
 800b2c0:	600b      	str	r3, [r1, #0]
 800b2c2:	7812      	ldrb	r2, [r2, #0]
 800b2c4:	1e10      	subs	r0, r2, #0
 800b2c6:	bf18      	it	ne
 800b2c8:	2001      	movne	r0, #1
 800b2ca:	b002      	add	sp, #8
 800b2cc:	4770      	bx	lr
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	e7fb      	b.n	800b2ca <__ascii_mbtowc+0x16>
 800b2d2:	f06f 0001 	mvn.w	r0, #1
 800b2d6:	e7f8      	b.n	800b2ca <__ascii_mbtowc+0x16>

0800b2d8 <memcpy>:
 800b2d8:	440a      	add	r2, r1
 800b2da:	4291      	cmp	r1, r2
 800b2dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2e0:	d100      	bne.n	800b2e4 <memcpy+0xc>
 800b2e2:	4770      	bx	lr
 800b2e4:	b510      	push	{r4, lr}
 800b2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2ee:	4291      	cmp	r1, r2
 800b2f0:	d1f9      	bne.n	800b2e6 <memcpy+0xe>
 800b2f2:	bd10      	pop	{r4, pc}

0800b2f4 <_Balloc>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	460d      	mov	r5, r1
 800b2fc:	b976      	cbnz	r6, 800b31c <_Balloc+0x28>
 800b2fe:	2010      	movs	r0, #16
 800b300:	f7ff ffd0 	bl	800b2a4 <malloc>
 800b304:	4602      	mov	r2, r0
 800b306:	6260      	str	r0, [r4, #36]	; 0x24
 800b308:	b920      	cbnz	r0, 800b314 <_Balloc+0x20>
 800b30a:	4b18      	ldr	r3, [pc, #96]	; (800b36c <_Balloc+0x78>)
 800b30c:	4818      	ldr	r0, [pc, #96]	; (800b370 <_Balloc+0x7c>)
 800b30e:	2166      	movs	r1, #102	; 0x66
 800b310:	f000 ff3c 	bl	800c18c <__assert_func>
 800b314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b318:	6006      	str	r6, [r0, #0]
 800b31a:	60c6      	str	r6, [r0, #12]
 800b31c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b31e:	68f3      	ldr	r3, [r6, #12]
 800b320:	b183      	cbz	r3, 800b344 <_Balloc+0x50>
 800b322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b32a:	b9b8      	cbnz	r0, 800b35c <_Balloc+0x68>
 800b32c:	2101      	movs	r1, #1
 800b32e:	fa01 f605 	lsl.w	r6, r1, r5
 800b332:	1d72      	adds	r2, r6, #5
 800b334:	0092      	lsls	r2, r2, #2
 800b336:	4620      	mov	r0, r4
 800b338:	f000 fc9a 	bl	800bc70 <_calloc_r>
 800b33c:	b160      	cbz	r0, 800b358 <_Balloc+0x64>
 800b33e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b342:	e00e      	b.n	800b362 <_Balloc+0x6e>
 800b344:	2221      	movs	r2, #33	; 0x21
 800b346:	2104      	movs	r1, #4
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 fc91 	bl	800bc70 <_calloc_r>
 800b34e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b350:	60f0      	str	r0, [r6, #12]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1e4      	bne.n	800b322 <_Balloc+0x2e>
 800b358:	2000      	movs	r0, #0
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	6802      	ldr	r2, [r0, #0]
 800b35e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b362:	2300      	movs	r3, #0
 800b364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b368:	e7f7      	b.n	800b35a <_Balloc+0x66>
 800b36a:	bf00      	nop
 800b36c:	0800cf16 	.word	0x0800cf16
 800b370:	0800d014 	.word	0x0800d014

0800b374 <_Bfree>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b378:	4605      	mov	r5, r0
 800b37a:	460c      	mov	r4, r1
 800b37c:	b976      	cbnz	r6, 800b39c <_Bfree+0x28>
 800b37e:	2010      	movs	r0, #16
 800b380:	f7ff ff90 	bl	800b2a4 <malloc>
 800b384:	4602      	mov	r2, r0
 800b386:	6268      	str	r0, [r5, #36]	; 0x24
 800b388:	b920      	cbnz	r0, 800b394 <_Bfree+0x20>
 800b38a:	4b09      	ldr	r3, [pc, #36]	; (800b3b0 <_Bfree+0x3c>)
 800b38c:	4809      	ldr	r0, [pc, #36]	; (800b3b4 <_Bfree+0x40>)
 800b38e:	218a      	movs	r1, #138	; 0x8a
 800b390:	f000 fefc 	bl	800c18c <__assert_func>
 800b394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b398:	6006      	str	r6, [r0, #0]
 800b39a:	60c6      	str	r6, [r0, #12]
 800b39c:	b13c      	cbz	r4, 800b3ae <_Bfree+0x3a>
 800b39e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b3a0:	6862      	ldr	r2, [r4, #4]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3a8:	6021      	str	r1, [r4, #0]
 800b3aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3ae:	bd70      	pop	{r4, r5, r6, pc}
 800b3b0:	0800cf16 	.word	0x0800cf16
 800b3b4:	0800d014 	.word	0x0800d014

0800b3b8 <__multadd>:
 800b3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3bc:	690d      	ldr	r5, [r1, #16]
 800b3be:	4607      	mov	r7, r0
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	461e      	mov	r6, r3
 800b3c4:	f101 0c14 	add.w	ip, r1, #20
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	f8dc 3000 	ldr.w	r3, [ip]
 800b3ce:	b299      	uxth	r1, r3
 800b3d0:	fb02 6101 	mla	r1, r2, r1, r6
 800b3d4:	0c1e      	lsrs	r6, r3, #16
 800b3d6:	0c0b      	lsrs	r3, r1, #16
 800b3d8:	fb02 3306 	mla	r3, r2, r6, r3
 800b3dc:	b289      	uxth	r1, r1
 800b3de:	3001      	adds	r0, #1
 800b3e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b3e4:	4285      	cmp	r5, r0
 800b3e6:	f84c 1b04 	str.w	r1, [ip], #4
 800b3ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b3ee:	dcec      	bgt.n	800b3ca <__multadd+0x12>
 800b3f0:	b30e      	cbz	r6, 800b436 <__multadd+0x7e>
 800b3f2:	68a3      	ldr	r3, [r4, #8]
 800b3f4:	42ab      	cmp	r3, r5
 800b3f6:	dc19      	bgt.n	800b42c <__multadd+0x74>
 800b3f8:	6861      	ldr	r1, [r4, #4]
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	3101      	adds	r1, #1
 800b3fe:	f7ff ff79 	bl	800b2f4 <_Balloc>
 800b402:	4680      	mov	r8, r0
 800b404:	b928      	cbnz	r0, 800b412 <__multadd+0x5a>
 800b406:	4602      	mov	r2, r0
 800b408:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <__multadd+0x84>)
 800b40a:	480d      	ldr	r0, [pc, #52]	; (800b440 <__multadd+0x88>)
 800b40c:	21b5      	movs	r1, #181	; 0xb5
 800b40e:	f000 febd 	bl	800c18c <__assert_func>
 800b412:	6922      	ldr	r2, [r4, #16]
 800b414:	3202      	adds	r2, #2
 800b416:	f104 010c 	add.w	r1, r4, #12
 800b41a:	0092      	lsls	r2, r2, #2
 800b41c:	300c      	adds	r0, #12
 800b41e:	f7ff ff5b 	bl	800b2d8 <memcpy>
 800b422:	4621      	mov	r1, r4
 800b424:	4638      	mov	r0, r7
 800b426:	f7ff ffa5 	bl	800b374 <_Bfree>
 800b42a:	4644      	mov	r4, r8
 800b42c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b430:	3501      	adds	r5, #1
 800b432:	615e      	str	r6, [r3, #20]
 800b434:	6125      	str	r5, [r4, #16]
 800b436:	4620      	mov	r0, r4
 800b438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b43c:	0800cf88 	.word	0x0800cf88
 800b440:	0800d014 	.word	0x0800d014

0800b444 <__s2b>:
 800b444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b448:	460c      	mov	r4, r1
 800b44a:	4615      	mov	r5, r2
 800b44c:	461f      	mov	r7, r3
 800b44e:	2209      	movs	r2, #9
 800b450:	3308      	adds	r3, #8
 800b452:	4606      	mov	r6, r0
 800b454:	fb93 f3f2 	sdiv	r3, r3, r2
 800b458:	2100      	movs	r1, #0
 800b45a:	2201      	movs	r2, #1
 800b45c:	429a      	cmp	r2, r3
 800b45e:	db09      	blt.n	800b474 <__s2b+0x30>
 800b460:	4630      	mov	r0, r6
 800b462:	f7ff ff47 	bl	800b2f4 <_Balloc>
 800b466:	b940      	cbnz	r0, 800b47a <__s2b+0x36>
 800b468:	4602      	mov	r2, r0
 800b46a:	4b19      	ldr	r3, [pc, #100]	; (800b4d0 <__s2b+0x8c>)
 800b46c:	4819      	ldr	r0, [pc, #100]	; (800b4d4 <__s2b+0x90>)
 800b46e:	21ce      	movs	r1, #206	; 0xce
 800b470:	f000 fe8c 	bl	800c18c <__assert_func>
 800b474:	0052      	lsls	r2, r2, #1
 800b476:	3101      	adds	r1, #1
 800b478:	e7f0      	b.n	800b45c <__s2b+0x18>
 800b47a:	9b08      	ldr	r3, [sp, #32]
 800b47c:	6143      	str	r3, [r0, #20]
 800b47e:	2d09      	cmp	r5, #9
 800b480:	f04f 0301 	mov.w	r3, #1
 800b484:	6103      	str	r3, [r0, #16]
 800b486:	dd16      	ble.n	800b4b6 <__s2b+0x72>
 800b488:	f104 0909 	add.w	r9, r4, #9
 800b48c:	46c8      	mov	r8, r9
 800b48e:	442c      	add	r4, r5
 800b490:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b494:	4601      	mov	r1, r0
 800b496:	3b30      	subs	r3, #48	; 0x30
 800b498:	220a      	movs	r2, #10
 800b49a:	4630      	mov	r0, r6
 800b49c:	f7ff ff8c 	bl	800b3b8 <__multadd>
 800b4a0:	45a0      	cmp	r8, r4
 800b4a2:	d1f5      	bne.n	800b490 <__s2b+0x4c>
 800b4a4:	f1a5 0408 	sub.w	r4, r5, #8
 800b4a8:	444c      	add	r4, r9
 800b4aa:	1b2d      	subs	r5, r5, r4
 800b4ac:	1963      	adds	r3, r4, r5
 800b4ae:	42bb      	cmp	r3, r7
 800b4b0:	db04      	blt.n	800b4bc <__s2b+0x78>
 800b4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4b6:	340a      	adds	r4, #10
 800b4b8:	2509      	movs	r5, #9
 800b4ba:	e7f6      	b.n	800b4aa <__s2b+0x66>
 800b4bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b4c0:	4601      	mov	r1, r0
 800b4c2:	3b30      	subs	r3, #48	; 0x30
 800b4c4:	220a      	movs	r2, #10
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7ff ff76 	bl	800b3b8 <__multadd>
 800b4cc:	e7ee      	b.n	800b4ac <__s2b+0x68>
 800b4ce:	bf00      	nop
 800b4d0:	0800cf88 	.word	0x0800cf88
 800b4d4:	0800d014 	.word	0x0800d014

0800b4d8 <__hi0bits>:
 800b4d8:	0c03      	lsrs	r3, r0, #16
 800b4da:	041b      	lsls	r3, r3, #16
 800b4dc:	b9d3      	cbnz	r3, 800b514 <__hi0bits+0x3c>
 800b4de:	0400      	lsls	r0, r0, #16
 800b4e0:	2310      	movs	r3, #16
 800b4e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b4e6:	bf04      	itt	eq
 800b4e8:	0200      	lsleq	r0, r0, #8
 800b4ea:	3308      	addeq	r3, #8
 800b4ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b4f0:	bf04      	itt	eq
 800b4f2:	0100      	lsleq	r0, r0, #4
 800b4f4:	3304      	addeq	r3, #4
 800b4f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b4fa:	bf04      	itt	eq
 800b4fc:	0080      	lsleq	r0, r0, #2
 800b4fe:	3302      	addeq	r3, #2
 800b500:	2800      	cmp	r0, #0
 800b502:	db05      	blt.n	800b510 <__hi0bits+0x38>
 800b504:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b508:	f103 0301 	add.w	r3, r3, #1
 800b50c:	bf08      	it	eq
 800b50e:	2320      	moveq	r3, #32
 800b510:	4618      	mov	r0, r3
 800b512:	4770      	bx	lr
 800b514:	2300      	movs	r3, #0
 800b516:	e7e4      	b.n	800b4e2 <__hi0bits+0xa>

0800b518 <__lo0bits>:
 800b518:	6803      	ldr	r3, [r0, #0]
 800b51a:	f013 0207 	ands.w	r2, r3, #7
 800b51e:	4601      	mov	r1, r0
 800b520:	d00b      	beq.n	800b53a <__lo0bits+0x22>
 800b522:	07da      	lsls	r2, r3, #31
 800b524:	d423      	bmi.n	800b56e <__lo0bits+0x56>
 800b526:	0798      	lsls	r0, r3, #30
 800b528:	bf49      	itett	mi
 800b52a:	085b      	lsrmi	r3, r3, #1
 800b52c:	089b      	lsrpl	r3, r3, #2
 800b52e:	2001      	movmi	r0, #1
 800b530:	600b      	strmi	r3, [r1, #0]
 800b532:	bf5c      	itt	pl
 800b534:	600b      	strpl	r3, [r1, #0]
 800b536:	2002      	movpl	r0, #2
 800b538:	4770      	bx	lr
 800b53a:	b298      	uxth	r0, r3
 800b53c:	b9a8      	cbnz	r0, 800b56a <__lo0bits+0x52>
 800b53e:	0c1b      	lsrs	r3, r3, #16
 800b540:	2010      	movs	r0, #16
 800b542:	b2da      	uxtb	r2, r3
 800b544:	b90a      	cbnz	r2, 800b54a <__lo0bits+0x32>
 800b546:	3008      	adds	r0, #8
 800b548:	0a1b      	lsrs	r3, r3, #8
 800b54a:	071a      	lsls	r2, r3, #28
 800b54c:	bf04      	itt	eq
 800b54e:	091b      	lsreq	r3, r3, #4
 800b550:	3004      	addeq	r0, #4
 800b552:	079a      	lsls	r2, r3, #30
 800b554:	bf04      	itt	eq
 800b556:	089b      	lsreq	r3, r3, #2
 800b558:	3002      	addeq	r0, #2
 800b55a:	07da      	lsls	r2, r3, #31
 800b55c:	d403      	bmi.n	800b566 <__lo0bits+0x4e>
 800b55e:	085b      	lsrs	r3, r3, #1
 800b560:	f100 0001 	add.w	r0, r0, #1
 800b564:	d005      	beq.n	800b572 <__lo0bits+0x5a>
 800b566:	600b      	str	r3, [r1, #0]
 800b568:	4770      	bx	lr
 800b56a:	4610      	mov	r0, r2
 800b56c:	e7e9      	b.n	800b542 <__lo0bits+0x2a>
 800b56e:	2000      	movs	r0, #0
 800b570:	4770      	bx	lr
 800b572:	2020      	movs	r0, #32
 800b574:	4770      	bx	lr
	...

0800b578 <__i2b>:
 800b578:	b510      	push	{r4, lr}
 800b57a:	460c      	mov	r4, r1
 800b57c:	2101      	movs	r1, #1
 800b57e:	f7ff feb9 	bl	800b2f4 <_Balloc>
 800b582:	4602      	mov	r2, r0
 800b584:	b928      	cbnz	r0, 800b592 <__i2b+0x1a>
 800b586:	4b05      	ldr	r3, [pc, #20]	; (800b59c <__i2b+0x24>)
 800b588:	4805      	ldr	r0, [pc, #20]	; (800b5a0 <__i2b+0x28>)
 800b58a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b58e:	f000 fdfd 	bl	800c18c <__assert_func>
 800b592:	2301      	movs	r3, #1
 800b594:	6144      	str	r4, [r0, #20]
 800b596:	6103      	str	r3, [r0, #16]
 800b598:	bd10      	pop	{r4, pc}
 800b59a:	bf00      	nop
 800b59c:	0800cf88 	.word	0x0800cf88
 800b5a0:	0800d014 	.word	0x0800d014

0800b5a4 <__multiply>:
 800b5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a8:	4691      	mov	r9, r2
 800b5aa:	690a      	ldr	r2, [r1, #16]
 800b5ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	bfb8      	it	lt
 800b5b4:	460b      	movlt	r3, r1
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	bfbc      	itt	lt
 800b5ba:	464c      	movlt	r4, r9
 800b5bc:	4699      	movlt	r9, r3
 800b5be:	6927      	ldr	r7, [r4, #16]
 800b5c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5c4:	68a3      	ldr	r3, [r4, #8]
 800b5c6:	6861      	ldr	r1, [r4, #4]
 800b5c8:	eb07 060a 	add.w	r6, r7, sl
 800b5cc:	42b3      	cmp	r3, r6
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	bfb8      	it	lt
 800b5d2:	3101      	addlt	r1, #1
 800b5d4:	f7ff fe8e 	bl	800b2f4 <_Balloc>
 800b5d8:	b930      	cbnz	r0, 800b5e8 <__multiply+0x44>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	4b44      	ldr	r3, [pc, #272]	; (800b6f0 <__multiply+0x14c>)
 800b5de:	4845      	ldr	r0, [pc, #276]	; (800b6f4 <__multiply+0x150>)
 800b5e0:	f240 115d 	movw	r1, #349	; 0x15d
 800b5e4:	f000 fdd2 	bl	800c18c <__assert_func>
 800b5e8:	f100 0514 	add.w	r5, r0, #20
 800b5ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b5f0:	462b      	mov	r3, r5
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	4543      	cmp	r3, r8
 800b5f6:	d321      	bcc.n	800b63c <__multiply+0x98>
 800b5f8:	f104 0314 	add.w	r3, r4, #20
 800b5fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b600:	f109 0314 	add.w	r3, r9, #20
 800b604:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b608:	9202      	str	r2, [sp, #8]
 800b60a:	1b3a      	subs	r2, r7, r4
 800b60c:	3a15      	subs	r2, #21
 800b60e:	f022 0203 	bic.w	r2, r2, #3
 800b612:	3204      	adds	r2, #4
 800b614:	f104 0115 	add.w	r1, r4, #21
 800b618:	428f      	cmp	r7, r1
 800b61a:	bf38      	it	cc
 800b61c:	2204      	movcc	r2, #4
 800b61e:	9201      	str	r2, [sp, #4]
 800b620:	9a02      	ldr	r2, [sp, #8]
 800b622:	9303      	str	r3, [sp, #12]
 800b624:	429a      	cmp	r2, r3
 800b626:	d80c      	bhi.n	800b642 <__multiply+0x9e>
 800b628:	2e00      	cmp	r6, #0
 800b62a:	dd03      	ble.n	800b634 <__multiply+0x90>
 800b62c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b630:	2b00      	cmp	r3, #0
 800b632:	d05a      	beq.n	800b6ea <__multiply+0x146>
 800b634:	6106      	str	r6, [r0, #16]
 800b636:	b005      	add	sp, #20
 800b638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63c:	f843 2b04 	str.w	r2, [r3], #4
 800b640:	e7d8      	b.n	800b5f4 <__multiply+0x50>
 800b642:	f8b3 a000 	ldrh.w	sl, [r3]
 800b646:	f1ba 0f00 	cmp.w	sl, #0
 800b64a:	d024      	beq.n	800b696 <__multiply+0xf2>
 800b64c:	f104 0e14 	add.w	lr, r4, #20
 800b650:	46a9      	mov	r9, r5
 800b652:	f04f 0c00 	mov.w	ip, #0
 800b656:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b65a:	f8d9 1000 	ldr.w	r1, [r9]
 800b65e:	fa1f fb82 	uxth.w	fp, r2
 800b662:	b289      	uxth	r1, r1
 800b664:	fb0a 110b 	mla	r1, sl, fp, r1
 800b668:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b66c:	f8d9 2000 	ldr.w	r2, [r9]
 800b670:	4461      	add	r1, ip
 800b672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b676:	fb0a c20b 	mla	r2, sl, fp, ip
 800b67a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b67e:	b289      	uxth	r1, r1
 800b680:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b684:	4577      	cmp	r7, lr
 800b686:	f849 1b04 	str.w	r1, [r9], #4
 800b68a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b68e:	d8e2      	bhi.n	800b656 <__multiply+0xb2>
 800b690:	9a01      	ldr	r2, [sp, #4]
 800b692:	f845 c002 	str.w	ip, [r5, r2]
 800b696:	9a03      	ldr	r2, [sp, #12]
 800b698:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b69c:	3304      	adds	r3, #4
 800b69e:	f1b9 0f00 	cmp.w	r9, #0
 800b6a2:	d020      	beq.n	800b6e6 <__multiply+0x142>
 800b6a4:	6829      	ldr	r1, [r5, #0]
 800b6a6:	f104 0c14 	add.w	ip, r4, #20
 800b6aa:	46ae      	mov	lr, r5
 800b6ac:	f04f 0a00 	mov.w	sl, #0
 800b6b0:	f8bc b000 	ldrh.w	fp, [ip]
 800b6b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b6b8:	fb09 220b 	mla	r2, r9, fp, r2
 800b6bc:	4492      	add	sl, r2
 800b6be:	b289      	uxth	r1, r1
 800b6c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b6c4:	f84e 1b04 	str.w	r1, [lr], #4
 800b6c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b6cc:	f8be 1000 	ldrh.w	r1, [lr]
 800b6d0:	0c12      	lsrs	r2, r2, #16
 800b6d2:	fb09 1102 	mla	r1, r9, r2, r1
 800b6d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b6da:	4567      	cmp	r7, ip
 800b6dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b6e0:	d8e6      	bhi.n	800b6b0 <__multiply+0x10c>
 800b6e2:	9a01      	ldr	r2, [sp, #4]
 800b6e4:	50a9      	str	r1, [r5, r2]
 800b6e6:	3504      	adds	r5, #4
 800b6e8:	e79a      	b.n	800b620 <__multiply+0x7c>
 800b6ea:	3e01      	subs	r6, #1
 800b6ec:	e79c      	b.n	800b628 <__multiply+0x84>
 800b6ee:	bf00      	nop
 800b6f0:	0800cf88 	.word	0x0800cf88
 800b6f4:	0800d014 	.word	0x0800d014

0800b6f8 <__pow5mult>:
 800b6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6fc:	4615      	mov	r5, r2
 800b6fe:	f012 0203 	ands.w	r2, r2, #3
 800b702:	4606      	mov	r6, r0
 800b704:	460f      	mov	r7, r1
 800b706:	d007      	beq.n	800b718 <__pow5mult+0x20>
 800b708:	4c25      	ldr	r4, [pc, #148]	; (800b7a0 <__pow5mult+0xa8>)
 800b70a:	3a01      	subs	r2, #1
 800b70c:	2300      	movs	r3, #0
 800b70e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b712:	f7ff fe51 	bl	800b3b8 <__multadd>
 800b716:	4607      	mov	r7, r0
 800b718:	10ad      	asrs	r5, r5, #2
 800b71a:	d03d      	beq.n	800b798 <__pow5mult+0xa0>
 800b71c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b71e:	b97c      	cbnz	r4, 800b740 <__pow5mult+0x48>
 800b720:	2010      	movs	r0, #16
 800b722:	f7ff fdbf 	bl	800b2a4 <malloc>
 800b726:	4602      	mov	r2, r0
 800b728:	6270      	str	r0, [r6, #36]	; 0x24
 800b72a:	b928      	cbnz	r0, 800b738 <__pow5mult+0x40>
 800b72c:	4b1d      	ldr	r3, [pc, #116]	; (800b7a4 <__pow5mult+0xac>)
 800b72e:	481e      	ldr	r0, [pc, #120]	; (800b7a8 <__pow5mult+0xb0>)
 800b730:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b734:	f000 fd2a 	bl	800c18c <__assert_func>
 800b738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b73c:	6004      	str	r4, [r0, #0]
 800b73e:	60c4      	str	r4, [r0, #12]
 800b740:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b748:	b94c      	cbnz	r4, 800b75e <__pow5mult+0x66>
 800b74a:	f240 2171 	movw	r1, #625	; 0x271
 800b74e:	4630      	mov	r0, r6
 800b750:	f7ff ff12 	bl	800b578 <__i2b>
 800b754:	2300      	movs	r3, #0
 800b756:	f8c8 0008 	str.w	r0, [r8, #8]
 800b75a:	4604      	mov	r4, r0
 800b75c:	6003      	str	r3, [r0, #0]
 800b75e:	f04f 0900 	mov.w	r9, #0
 800b762:	07eb      	lsls	r3, r5, #31
 800b764:	d50a      	bpl.n	800b77c <__pow5mult+0x84>
 800b766:	4639      	mov	r1, r7
 800b768:	4622      	mov	r2, r4
 800b76a:	4630      	mov	r0, r6
 800b76c:	f7ff ff1a 	bl	800b5a4 <__multiply>
 800b770:	4639      	mov	r1, r7
 800b772:	4680      	mov	r8, r0
 800b774:	4630      	mov	r0, r6
 800b776:	f7ff fdfd 	bl	800b374 <_Bfree>
 800b77a:	4647      	mov	r7, r8
 800b77c:	106d      	asrs	r5, r5, #1
 800b77e:	d00b      	beq.n	800b798 <__pow5mult+0xa0>
 800b780:	6820      	ldr	r0, [r4, #0]
 800b782:	b938      	cbnz	r0, 800b794 <__pow5mult+0x9c>
 800b784:	4622      	mov	r2, r4
 800b786:	4621      	mov	r1, r4
 800b788:	4630      	mov	r0, r6
 800b78a:	f7ff ff0b 	bl	800b5a4 <__multiply>
 800b78e:	6020      	str	r0, [r4, #0]
 800b790:	f8c0 9000 	str.w	r9, [r0]
 800b794:	4604      	mov	r4, r0
 800b796:	e7e4      	b.n	800b762 <__pow5mult+0x6a>
 800b798:	4638      	mov	r0, r7
 800b79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b79e:	bf00      	nop
 800b7a0:	0800d160 	.word	0x0800d160
 800b7a4:	0800cf16 	.word	0x0800cf16
 800b7a8:	0800d014 	.word	0x0800d014

0800b7ac <__lshift>:
 800b7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	6849      	ldr	r1, [r1, #4]
 800b7b4:	6923      	ldr	r3, [r4, #16]
 800b7b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7ba:	68a3      	ldr	r3, [r4, #8]
 800b7bc:	4607      	mov	r7, r0
 800b7be:	4691      	mov	r9, r2
 800b7c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7c4:	f108 0601 	add.w	r6, r8, #1
 800b7c8:	42b3      	cmp	r3, r6
 800b7ca:	db0b      	blt.n	800b7e4 <__lshift+0x38>
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	f7ff fd91 	bl	800b2f4 <_Balloc>
 800b7d2:	4605      	mov	r5, r0
 800b7d4:	b948      	cbnz	r0, 800b7ea <__lshift+0x3e>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	4b2a      	ldr	r3, [pc, #168]	; (800b884 <__lshift+0xd8>)
 800b7da:	482b      	ldr	r0, [pc, #172]	; (800b888 <__lshift+0xdc>)
 800b7dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b7e0:	f000 fcd4 	bl	800c18c <__assert_func>
 800b7e4:	3101      	adds	r1, #1
 800b7e6:	005b      	lsls	r3, r3, #1
 800b7e8:	e7ee      	b.n	800b7c8 <__lshift+0x1c>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f100 0114 	add.w	r1, r0, #20
 800b7f0:	f100 0210 	add.w	r2, r0, #16
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	4553      	cmp	r3, sl
 800b7f8:	db37      	blt.n	800b86a <__lshift+0xbe>
 800b7fa:	6920      	ldr	r0, [r4, #16]
 800b7fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b800:	f104 0314 	add.w	r3, r4, #20
 800b804:	f019 091f 	ands.w	r9, r9, #31
 800b808:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b80c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b810:	d02f      	beq.n	800b872 <__lshift+0xc6>
 800b812:	f1c9 0e20 	rsb	lr, r9, #32
 800b816:	468a      	mov	sl, r1
 800b818:	f04f 0c00 	mov.w	ip, #0
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	fa02 f209 	lsl.w	r2, r2, r9
 800b822:	ea42 020c 	orr.w	r2, r2, ip
 800b826:	f84a 2b04 	str.w	r2, [sl], #4
 800b82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b82e:	4298      	cmp	r0, r3
 800b830:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b834:	d8f2      	bhi.n	800b81c <__lshift+0x70>
 800b836:	1b03      	subs	r3, r0, r4
 800b838:	3b15      	subs	r3, #21
 800b83a:	f023 0303 	bic.w	r3, r3, #3
 800b83e:	3304      	adds	r3, #4
 800b840:	f104 0215 	add.w	r2, r4, #21
 800b844:	4290      	cmp	r0, r2
 800b846:	bf38      	it	cc
 800b848:	2304      	movcc	r3, #4
 800b84a:	f841 c003 	str.w	ip, [r1, r3]
 800b84e:	f1bc 0f00 	cmp.w	ip, #0
 800b852:	d001      	beq.n	800b858 <__lshift+0xac>
 800b854:	f108 0602 	add.w	r6, r8, #2
 800b858:	3e01      	subs	r6, #1
 800b85a:	4638      	mov	r0, r7
 800b85c:	612e      	str	r6, [r5, #16]
 800b85e:	4621      	mov	r1, r4
 800b860:	f7ff fd88 	bl	800b374 <_Bfree>
 800b864:	4628      	mov	r0, r5
 800b866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b86e:	3301      	adds	r3, #1
 800b870:	e7c1      	b.n	800b7f6 <__lshift+0x4a>
 800b872:	3904      	subs	r1, #4
 800b874:	f853 2b04 	ldr.w	r2, [r3], #4
 800b878:	f841 2f04 	str.w	r2, [r1, #4]!
 800b87c:	4298      	cmp	r0, r3
 800b87e:	d8f9      	bhi.n	800b874 <__lshift+0xc8>
 800b880:	e7ea      	b.n	800b858 <__lshift+0xac>
 800b882:	bf00      	nop
 800b884:	0800cf88 	.word	0x0800cf88
 800b888:	0800d014 	.word	0x0800d014

0800b88c <__mcmp>:
 800b88c:	b530      	push	{r4, r5, lr}
 800b88e:	6902      	ldr	r2, [r0, #16]
 800b890:	690c      	ldr	r4, [r1, #16]
 800b892:	1b12      	subs	r2, r2, r4
 800b894:	d10e      	bne.n	800b8b4 <__mcmp+0x28>
 800b896:	f100 0314 	add.w	r3, r0, #20
 800b89a:	3114      	adds	r1, #20
 800b89c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b8a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b8a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b8a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b8ac:	42a5      	cmp	r5, r4
 800b8ae:	d003      	beq.n	800b8b8 <__mcmp+0x2c>
 800b8b0:	d305      	bcc.n	800b8be <__mcmp+0x32>
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	4610      	mov	r0, r2
 800b8b6:	bd30      	pop	{r4, r5, pc}
 800b8b8:	4283      	cmp	r3, r0
 800b8ba:	d3f3      	bcc.n	800b8a4 <__mcmp+0x18>
 800b8bc:	e7fa      	b.n	800b8b4 <__mcmp+0x28>
 800b8be:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c2:	e7f7      	b.n	800b8b4 <__mcmp+0x28>

0800b8c4 <__mdiff>:
 800b8c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	4690      	mov	r8, r2
 800b8d2:	f7ff ffdb 	bl	800b88c <__mcmp>
 800b8d6:	1e05      	subs	r5, r0, #0
 800b8d8:	d110      	bne.n	800b8fc <__mdiff+0x38>
 800b8da:	4629      	mov	r1, r5
 800b8dc:	4630      	mov	r0, r6
 800b8de:	f7ff fd09 	bl	800b2f4 <_Balloc>
 800b8e2:	b930      	cbnz	r0, 800b8f2 <__mdiff+0x2e>
 800b8e4:	4b3a      	ldr	r3, [pc, #232]	; (800b9d0 <__mdiff+0x10c>)
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	f240 2132 	movw	r1, #562	; 0x232
 800b8ec:	4839      	ldr	r0, [pc, #228]	; (800b9d4 <__mdiff+0x110>)
 800b8ee:	f000 fc4d 	bl	800c18c <__assert_func>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fc:	bfa4      	itt	ge
 800b8fe:	4643      	movge	r3, r8
 800b900:	46a0      	movge	r8, r4
 800b902:	4630      	mov	r0, r6
 800b904:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b908:	bfa6      	itte	ge
 800b90a:	461c      	movge	r4, r3
 800b90c:	2500      	movge	r5, #0
 800b90e:	2501      	movlt	r5, #1
 800b910:	f7ff fcf0 	bl	800b2f4 <_Balloc>
 800b914:	b920      	cbnz	r0, 800b920 <__mdiff+0x5c>
 800b916:	4b2e      	ldr	r3, [pc, #184]	; (800b9d0 <__mdiff+0x10c>)
 800b918:	4602      	mov	r2, r0
 800b91a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b91e:	e7e5      	b.n	800b8ec <__mdiff+0x28>
 800b920:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b924:	6926      	ldr	r6, [r4, #16]
 800b926:	60c5      	str	r5, [r0, #12]
 800b928:	f104 0914 	add.w	r9, r4, #20
 800b92c:	f108 0514 	add.w	r5, r8, #20
 800b930:	f100 0e14 	add.w	lr, r0, #20
 800b934:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b938:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b93c:	f108 0210 	add.w	r2, r8, #16
 800b940:	46f2      	mov	sl, lr
 800b942:	2100      	movs	r1, #0
 800b944:	f859 3b04 	ldr.w	r3, [r9], #4
 800b948:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b94c:	fa1f f883 	uxth.w	r8, r3
 800b950:	fa11 f18b 	uxtah	r1, r1, fp
 800b954:	0c1b      	lsrs	r3, r3, #16
 800b956:	eba1 0808 	sub.w	r8, r1, r8
 800b95a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b95e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b962:	fa1f f888 	uxth.w	r8, r8
 800b966:	1419      	asrs	r1, r3, #16
 800b968:	454e      	cmp	r6, r9
 800b96a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b96e:	f84a 3b04 	str.w	r3, [sl], #4
 800b972:	d8e7      	bhi.n	800b944 <__mdiff+0x80>
 800b974:	1b33      	subs	r3, r6, r4
 800b976:	3b15      	subs	r3, #21
 800b978:	f023 0303 	bic.w	r3, r3, #3
 800b97c:	3304      	adds	r3, #4
 800b97e:	3415      	adds	r4, #21
 800b980:	42a6      	cmp	r6, r4
 800b982:	bf38      	it	cc
 800b984:	2304      	movcc	r3, #4
 800b986:	441d      	add	r5, r3
 800b988:	4473      	add	r3, lr
 800b98a:	469e      	mov	lr, r3
 800b98c:	462e      	mov	r6, r5
 800b98e:	4566      	cmp	r6, ip
 800b990:	d30e      	bcc.n	800b9b0 <__mdiff+0xec>
 800b992:	f10c 0203 	add.w	r2, ip, #3
 800b996:	1b52      	subs	r2, r2, r5
 800b998:	f022 0203 	bic.w	r2, r2, #3
 800b99c:	3d03      	subs	r5, #3
 800b99e:	45ac      	cmp	ip, r5
 800b9a0:	bf38      	it	cc
 800b9a2:	2200      	movcc	r2, #0
 800b9a4:	441a      	add	r2, r3
 800b9a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b9aa:	b17b      	cbz	r3, 800b9cc <__mdiff+0x108>
 800b9ac:	6107      	str	r7, [r0, #16]
 800b9ae:	e7a3      	b.n	800b8f8 <__mdiff+0x34>
 800b9b0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b9b4:	fa11 f288 	uxtah	r2, r1, r8
 800b9b8:	1414      	asrs	r4, r2, #16
 800b9ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b9be:	b292      	uxth	r2, r2
 800b9c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b9c4:	f84e 2b04 	str.w	r2, [lr], #4
 800b9c8:	1421      	asrs	r1, r4, #16
 800b9ca:	e7e0      	b.n	800b98e <__mdiff+0xca>
 800b9cc:	3f01      	subs	r7, #1
 800b9ce:	e7ea      	b.n	800b9a6 <__mdiff+0xe2>
 800b9d0:	0800cf88 	.word	0x0800cf88
 800b9d4:	0800d014 	.word	0x0800d014

0800b9d8 <__ulp>:
 800b9d8:	b082      	sub	sp, #8
 800b9da:	ed8d 0b00 	vstr	d0, [sp]
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	4912      	ldr	r1, [pc, #72]	; (800ba2c <__ulp+0x54>)
 800b9e2:	4019      	ands	r1, r3
 800b9e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b9e8:	2900      	cmp	r1, #0
 800b9ea:	dd05      	ble.n	800b9f8 <__ulp+0x20>
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	ec43 2b10 	vmov	d0, r2, r3
 800b9f4:	b002      	add	sp, #8
 800b9f6:	4770      	bx	lr
 800b9f8:	4249      	negs	r1, r1
 800b9fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b9fe:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ba02:	f04f 0200 	mov.w	r2, #0
 800ba06:	f04f 0300 	mov.w	r3, #0
 800ba0a:	da04      	bge.n	800ba16 <__ulp+0x3e>
 800ba0c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ba10:	fa41 f300 	asr.w	r3, r1, r0
 800ba14:	e7ec      	b.n	800b9f0 <__ulp+0x18>
 800ba16:	f1a0 0114 	sub.w	r1, r0, #20
 800ba1a:	291e      	cmp	r1, #30
 800ba1c:	bfda      	itte	le
 800ba1e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ba22:	fa20 f101 	lsrle.w	r1, r0, r1
 800ba26:	2101      	movgt	r1, #1
 800ba28:	460a      	mov	r2, r1
 800ba2a:	e7e1      	b.n	800b9f0 <__ulp+0x18>
 800ba2c:	7ff00000 	.word	0x7ff00000

0800ba30 <__b2d>:
 800ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba32:	6905      	ldr	r5, [r0, #16]
 800ba34:	f100 0714 	add.w	r7, r0, #20
 800ba38:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ba3c:	1f2e      	subs	r6, r5, #4
 800ba3e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7ff fd48 	bl	800b4d8 <__hi0bits>
 800ba48:	f1c0 0320 	rsb	r3, r0, #32
 800ba4c:	280a      	cmp	r0, #10
 800ba4e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bacc <__b2d+0x9c>
 800ba52:	600b      	str	r3, [r1, #0]
 800ba54:	dc14      	bgt.n	800ba80 <__b2d+0x50>
 800ba56:	f1c0 0e0b 	rsb	lr, r0, #11
 800ba5a:	fa24 f10e 	lsr.w	r1, r4, lr
 800ba5e:	42b7      	cmp	r7, r6
 800ba60:	ea41 030c 	orr.w	r3, r1, ip
 800ba64:	bf34      	ite	cc
 800ba66:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba6a:	2100      	movcs	r1, #0
 800ba6c:	3015      	adds	r0, #21
 800ba6e:	fa04 f000 	lsl.w	r0, r4, r0
 800ba72:	fa21 f10e 	lsr.w	r1, r1, lr
 800ba76:	ea40 0201 	orr.w	r2, r0, r1
 800ba7a:	ec43 2b10 	vmov	d0, r2, r3
 800ba7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba80:	42b7      	cmp	r7, r6
 800ba82:	bf3a      	itte	cc
 800ba84:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba88:	f1a5 0608 	subcc.w	r6, r5, #8
 800ba8c:	2100      	movcs	r1, #0
 800ba8e:	380b      	subs	r0, #11
 800ba90:	d017      	beq.n	800bac2 <__b2d+0x92>
 800ba92:	f1c0 0c20 	rsb	ip, r0, #32
 800ba96:	fa04 f500 	lsl.w	r5, r4, r0
 800ba9a:	42be      	cmp	r6, r7
 800ba9c:	fa21 f40c 	lsr.w	r4, r1, ip
 800baa0:	ea45 0504 	orr.w	r5, r5, r4
 800baa4:	bf8c      	ite	hi
 800baa6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800baaa:	2400      	movls	r4, #0
 800baac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bab0:	fa01 f000 	lsl.w	r0, r1, r0
 800bab4:	fa24 f40c 	lsr.w	r4, r4, ip
 800bab8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800babc:	ea40 0204 	orr.w	r2, r0, r4
 800bac0:	e7db      	b.n	800ba7a <__b2d+0x4a>
 800bac2:	ea44 030c 	orr.w	r3, r4, ip
 800bac6:	460a      	mov	r2, r1
 800bac8:	e7d7      	b.n	800ba7a <__b2d+0x4a>
 800baca:	bf00      	nop
 800bacc:	3ff00000 	.word	0x3ff00000

0800bad0 <__d2b>:
 800bad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bad4:	4689      	mov	r9, r1
 800bad6:	2101      	movs	r1, #1
 800bad8:	ec57 6b10 	vmov	r6, r7, d0
 800badc:	4690      	mov	r8, r2
 800bade:	f7ff fc09 	bl	800b2f4 <_Balloc>
 800bae2:	4604      	mov	r4, r0
 800bae4:	b930      	cbnz	r0, 800baf4 <__d2b+0x24>
 800bae6:	4602      	mov	r2, r0
 800bae8:	4b25      	ldr	r3, [pc, #148]	; (800bb80 <__d2b+0xb0>)
 800baea:	4826      	ldr	r0, [pc, #152]	; (800bb84 <__d2b+0xb4>)
 800baec:	f240 310a 	movw	r1, #778	; 0x30a
 800baf0:	f000 fb4c 	bl	800c18c <__assert_func>
 800baf4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800baf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bafc:	bb35      	cbnz	r5, 800bb4c <__d2b+0x7c>
 800bafe:	2e00      	cmp	r6, #0
 800bb00:	9301      	str	r3, [sp, #4]
 800bb02:	d028      	beq.n	800bb56 <__d2b+0x86>
 800bb04:	4668      	mov	r0, sp
 800bb06:	9600      	str	r6, [sp, #0]
 800bb08:	f7ff fd06 	bl	800b518 <__lo0bits>
 800bb0c:	9900      	ldr	r1, [sp, #0]
 800bb0e:	b300      	cbz	r0, 800bb52 <__d2b+0x82>
 800bb10:	9a01      	ldr	r2, [sp, #4]
 800bb12:	f1c0 0320 	rsb	r3, r0, #32
 800bb16:	fa02 f303 	lsl.w	r3, r2, r3
 800bb1a:	430b      	orrs	r3, r1
 800bb1c:	40c2      	lsrs	r2, r0
 800bb1e:	6163      	str	r3, [r4, #20]
 800bb20:	9201      	str	r2, [sp, #4]
 800bb22:	9b01      	ldr	r3, [sp, #4]
 800bb24:	61a3      	str	r3, [r4, #24]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	bf14      	ite	ne
 800bb2a:	2202      	movne	r2, #2
 800bb2c:	2201      	moveq	r2, #1
 800bb2e:	6122      	str	r2, [r4, #16]
 800bb30:	b1d5      	cbz	r5, 800bb68 <__d2b+0x98>
 800bb32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bb36:	4405      	add	r5, r0
 800bb38:	f8c9 5000 	str.w	r5, [r9]
 800bb3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb40:	f8c8 0000 	str.w	r0, [r8]
 800bb44:	4620      	mov	r0, r4
 800bb46:	b003      	add	sp, #12
 800bb48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb50:	e7d5      	b.n	800bafe <__d2b+0x2e>
 800bb52:	6161      	str	r1, [r4, #20]
 800bb54:	e7e5      	b.n	800bb22 <__d2b+0x52>
 800bb56:	a801      	add	r0, sp, #4
 800bb58:	f7ff fcde 	bl	800b518 <__lo0bits>
 800bb5c:	9b01      	ldr	r3, [sp, #4]
 800bb5e:	6163      	str	r3, [r4, #20]
 800bb60:	2201      	movs	r2, #1
 800bb62:	6122      	str	r2, [r4, #16]
 800bb64:	3020      	adds	r0, #32
 800bb66:	e7e3      	b.n	800bb30 <__d2b+0x60>
 800bb68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb70:	f8c9 0000 	str.w	r0, [r9]
 800bb74:	6918      	ldr	r0, [r3, #16]
 800bb76:	f7ff fcaf 	bl	800b4d8 <__hi0bits>
 800bb7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb7e:	e7df      	b.n	800bb40 <__d2b+0x70>
 800bb80:	0800cf88 	.word	0x0800cf88
 800bb84:	0800d014 	.word	0x0800d014

0800bb88 <__ratio>:
 800bb88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	4688      	mov	r8, r1
 800bb8e:	4669      	mov	r1, sp
 800bb90:	4681      	mov	r9, r0
 800bb92:	f7ff ff4d 	bl	800ba30 <__b2d>
 800bb96:	a901      	add	r1, sp, #4
 800bb98:	4640      	mov	r0, r8
 800bb9a:	ec55 4b10 	vmov	r4, r5, d0
 800bb9e:	ee10 aa10 	vmov	sl, s0
 800bba2:	f7ff ff45 	bl	800ba30 <__b2d>
 800bba6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbaa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bbae:	1a59      	subs	r1, r3, r1
 800bbb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bbba:	ec57 6b10 	vmov	r6, r7, d0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	bfd6      	itet	le
 800bbc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bbc6:	462a      	movgt	r2, r5
 800bbc8:	463a      	movle	r2, r7
 800bbca:	46ab      	mov	fp, r5
 800bbcc:	bfd6      	itet	le
 800bbce:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bbd2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bbd6:	ee00 3a90 	vmovle	s1, r3
 800bbda:	ec4b ab17 	vmov	d7, sl, fp
 800bbde:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bbe2:	b003      	add	sp, #12
 800bbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bbe8 <__copybits>:
 800bbe8:	3901      	subs	r1, #1
 800bbea:	b570      	push	{r4, r5, r6, lr}
 800bbec:	1149      	asrs	r1, r1, #5
 800bbee:	6914      	ldr	r4, [r2, #16]
 800bbf0:	3101      	adds	r1, #1
 800bbf2:	f102 0314 	add.w	r3, r2, #20
 800bbf6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bbfa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bbfe:	1f05      	subs	r5, r0, #4
 800bc00:	42a3      	cmp	r3, r4
 800bc02:	d30c      	bcc.n	800bc1e <__copybits+0x36>
 800bc04:	1aa3      	subs	r3, r4, r2
 800bc06:	3b11      	subs	r3, #17
 800bc08:	f023 0303 	bic.w	r3, r3, #3
 800bc0c:	3211      	adds	r2, #17
 800bc0e:	42a2      	cmp	r2, r4
 800bc10:	bf88      	it	hi
 800bc12:	2300      	movhi	r3, #0
 800bc14:	4418      	add	r0, r3
 800bc16:	2300      	movs	r3, #0
 800bc18:	4288      	cmp	r0, r1
 800bc1a:	d305      	bcc.n	800bc28 <__copybits+0x40>
 800bc1c:	bd70      	pop	{r4, r5, r6, pc}
 800bc1e:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc22:	f845 6f04 	str.w	r6, [r5, #4]!
 800bc26:	e7eb      	b.n	800bc00 <__copybits+0x18>
 800bc28:	f840 3b04 	str.w	r3, [r0], #4
 800bc2c:	e7f4      	b.n	800bc18 <__copybits+0x30>

0800bc2e <__any_on>:
 800bc2e:	f100 0214 	add.w	r2, r0, #20
 800bc32:	6900      	ldr	r0, [r0, #16]
 800bc34:	114b      	asrs	r3, r1, #5
 800bc36:	4298      	cmp	r0, r3
 800bc38:	b510      	push	{r4, lr}
 800bc3a:	db11      	blt.n	800bc60 <__any_on+0x32>
 800bc3c:	dd0a      	ble.n	800bc54 <__any_on+0x26>
 800bc3e:	f011 011f 	ands.w	r1, r1, #31
 800bc42:	d007      	beq.n	800bc54 <__any_on+0x26>
 800bc44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bc48:	fa24 f001 	lsr.w	r0, r4, r1
 800bc4c:	fa00 f101 	lsl.w	r1, r0, r1
 800bc50:	428c      	cmp	r4, r1
 800bc52:	d10b      	bne.n	800bc6c <__any_on+0x3e>
 800bc54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d803      	bhi.n	800bc64 <__any_on+0x36>
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	bd10      	pop	{r4, pc}
 800bc60:	4603      	mov	r3, r0
 800bc62:	e7f7      	b.n	800bc54 <__any_on+0x26>
 800bc64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc68:	2900      	cmp	r1, #0
 800bc6a:	d0f5      	beq.n	800bc58 <__any_on+0x2a>
 800bc6c:	2001      	movs	r0, #1
 800bc6e:	e7f6      	b.n	800bc5e <__any_on+0x30>

0800bc70 <_calloc_r>:
 800bc70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc72:	fba1 2402 	umull	r2, r4, r1, r2
 800bc76:	b94c      	cbnz	r4, 800bc8c <_calloc_r+0x1c>
 800bc78:	4611      	mov	r1, r2
 800bc7a:	9201      	str	r2, [sp, #4]
 800bc7c:	f000 f87a 	bl	800bd74 <_malloc_r>
 800bc80:	9a01      	ldr	r2, [sp, #4]
 800bc82:	4605      	mov	r5, r0
 800bc84:	b930      	cbnz	r0, 800bc94 <_calloc_r+0x24>
 800bc86:	4628      	mov	r0, r5
 800bc88:	b003      	add	sp, #12
 800bc8a:	bd30      	pop	{r4, r5, pc}
 800bc8c:	220c      	movs	r2, #12
 800bc8e:	6002      	str	r2, [r0, #0]
 800bc90:	2500      	movs	r5, #0
 800bc92:	e7f8      	b.n	800bc86 <_calloc_r+0x16>
 800bc94:	4621      	mov	r1, r4
 800bc96:	f7fc fcc7 	bl	8008628 <memset>
 800bc9a:	e7f4      	b.n	800bc86 <_calloc_r+0x16>

0800bc9c <_free_r>:
 800bc9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc9e:	2900      	cmp	r1, #0
 800bca0:	d044      	beq.n	800bd2c <_free_r+0x90>
 800bca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bca6:	9001      	str	r0, [sp, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f1a1 0404 	sub.w	r4, r1, #4
 800bcae:	bfb8      	it	lt
 800bcb0:	18e4      	addlt	r4, r4, r3
 800bcb2:	f000 fab5 	bl	800c220 <__malloc_lock>
 800bcb6:	4a1e      	ldr	r2, [pc, #120]	; (800bd30 <_free_r+0x94>)
 800bcb8:	9801      	ldr	r0, [sp, #4]
 800bcba:	6813      	ldr	r3, [r2, #0]
 800bcbc:	b933      	cbnz	r3, 800bccc <_free_r+0x30>
 800bcbe:	6063      	str	r3, [r4, #4]
 800bcc0:	6014      	str	r4, [r2, #0]
 800bcc2:	b003      	add	sp, #12
 800bcc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcc8:	f000 bab0 	b.w	800c22c <__malloc_unlock>
 800bccc:	42a3      	cmp	r3, r4
 800bcce:	d908      	bls.n	800bce2 <_free_r+0x46>
 800bcd0:	6825      	ldr	r5, [r4, #0]
 800bcd2:	1961      	adds	r1, r4, r5
 800bcd4:	428b      	cmp	r3, r1
 800bcd6:	bf01      	itttt	eq
 800bcd8:	6819      	ldreq	r1, [r3, #0]
 800bcda:	685b      	ldreq	r3, [r3, #4]
 800bcdc:	1949      	addeq	r1, r1, r5
 800bcde:	6021      	streq	r1, [r4, #0]
 800bce0:	e7ed      	b.n	800bcbe <_free_r+0x22>
 800bce2:	461a      	mov	r2, r3
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	b10b      	cbz	r3, 800bcec <_free_r+0x50>
 800bce8:	42a3      	cmp	r3, r4
 800bcea:	d9fa      	bls.n	800bce2 <_free_r+0x46>
 800bcec:	6811      	ldr	r1, [r2, #0]
 800bcee:	1855      	adds	r5, r2, r1
 800bcf0:	42a5      	cmp	r5, r4
 800bcf2:	d10b      	bne.n	800bd0c <_free_r+0x70>
 800bcf4:	6824      	ldr	r4, [r4, #0]
 800bcf6:	4421      	add	r1, r4
 800bcf8:	1854      	adds	r4, r2, r1
 800bcfa:	42a3      	cmp	r3, r4
 800bcfc:	6011      	str	r1, [r2, #0]
 800bcfe:	d1e0      	bne.n	800bcc2 <_free_r+0x26>
 800bd00:	681c      	ldr	r4, [r3, #0]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	6053      	str	r3, [r2, #4]
 800bd06:	4421      	add	r1, r4
 800bd08:	6011      	str	r1, [r2, #0]
 800bd0a:	e7da      	b.n	800bcc2 <_free_r+0x26>
 800bd0c:	d902      	bls.n	800bd14 <_free_r+0x78>
 800bd0e:	230c      	movs	r3, #12
 800bd10:	6003      	str	r3, [r0, #0]
 800bd12:	e7d6      	b.n	800bcc2 <_free_r+0x26>
 800bd14:	6825      	ldr	r5, [r4, #0]
 800bd16:	1961      	adds	r1, r4, r5
 800bd18:	428b      	cmp	r3, r1
 800bd1a:	bf04      	itt	eq
 800bd1c:	6819      	ldreq	r1, [r3, #0]
 800bd1e:	685b      	ldreq	r3, [r3, #4]
 800bd20:	6063      	str	r3, [r4, #4]
 800bd22:	bf04      	itt	eq
 800bd24:	1949      	addeq	r1, r1, r5
 800bd26:	6021      	streq	r1, [r4, #0]
 800bd28:	6054      	str	r4, [r2, #4]
 800bd2a:	e7ca      	b.n	800bcc2 <_free_r+0x26>
 800bd2c:	b003      	add	sp, #12
 800bd2e:	bd30      	pop	{r4, r5, pc}
 800bd30:	24000464 	.word	0x24000464

0800bd34 <sbrk_aligned>:
 800bd34:	b570      	push	{r4, r5, r6, lr}
 800bd36:	4e0e      	ldr	r6, [pc, #56]	; (800bd70 <sbrk_aligned+0x3c>)
 800bd38:	460c      	mov	r4, r1
 800bd3a:	6831      	ldr	r1, [r6, #0]
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	b911      	cbnz	r1, 800bd46 <sbrk_aligned+0x12>
 800bd40:	f000 f9f2 	bl	800c128 <_sbrk_r>
 800bd44:	6030      	str	r0, [r6, #0]
 800bd46:	4621      	mov	r1, r4
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f000 f9ed 	bl	800c128 <_sbrk_r>
 800bd4e:	1c43      	adds	r3, r0, #1
 800bd50:	d00a      	beq.n	800bd68 <sbrk_aligned+0x34>
 800bd52:	1cc4      	adds	r4, r0, #3
 800bd54:	f024 0403 	bic.w	r4, r4, #3
 800bd58:	42a0      	cmp	r0, r4
 800bd5a:	d007      	beq.n	800bd6c <sbrk_aligned+0x38>
 800bd5c:	1a21      	subs	r1, r4, r0
 800bd5e:	4628      	mov	r0, r5
 800bd60:	f000 f9e2 	bl	800c128 <_sbrk_r>
 800bd64:	3001      	adds	r0, #1
 800bd66:	d101      	bne.n	800bd6c <sbrk_aligned+0x38>
 800bd68:	f04f 34ff 	mov.w	r4, #4294967295
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	bd70      	pop	{r4, r5, r6, pc}
 800bd70:	24000468 	.word	0x24000468

0800bd74 <_malloc_r>:
 800bd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd78:	1ccd      	adds	r5, r1, #3
 800bd7a:	f025 0503 	bic.w	r5, r5, #3
 800bd7e:	3508      	adds	r5, #8
 800bd80:	2d0c      	cmp	r5, #12
 800bd82:	bf38      	it	cc
 800bd84:	250c      	movcc	r5, #12
 800bd86:	2d00      	cmp	r5, #0
 800bd88:	4607      	mov	r7, r0
 800bd8a:	db01      	blt.n	800bd90 <_malloc_r+0x1c>
 800bd8c:	42a9      	cmp	r1, r5
 800bd8e:	d905      	bls.n	800bd9c <_malloc_r+0x28>
 800bd90:	230c      	movs	r3, #12
 800bd92:	603b      	str	r3, [r7, #0]
 800bd94:	2600      	movs	r6, #0
 800bd96:	4630      	mov	r0, r6
 800bd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd9c:	4e2e      	ldr	r6, [pc, #184]	; (800be58 <_malloc_r+0xe4>)
 800bd9e:	f000 fa3f 	bl	800c220 <__malloc_lock>
 800bda2:	6833      	ldr	r3, [r6, #0]
 800bda4:	461c      	mov	r4, r3
 800bda6:	bb34      	cbnz	r4, 800bdf6 <_malloc_r+0x82>
 800bda8:	4629      	mov	r1, r5
 800bdaa:	4638      	mov	r0, r7
 800bdac:	f7ff ffc2 	bl	800bd34 <sbrk_aligned>
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	d14d      	bne.n	800be52 <_malloc_r+0xde>
 800bdb6:	6834      	ldr	r4, [r6, #0]
 800bdb8:	4626      	mov	r6, r4
 800bdba:	2e00      	cmp	r6, #0
 800bdbc:	d140      	bne.n	800be40 <_malloc_r+0xcc>
 800bdbe:	6823      	ldr	r3, [r4, #0]
 800bdc0:	4631      	mov	r1, r6
 800bdc2:	4638      	mov	r0, r7
 800bdc4:	eb04 0803 	add.w	r8, r4, r3
 800bdc8:	f000 f9ae 	bl	800c128 <_sbrk_r>
 800bdcc:	4580      	cmp	r8, r0
 800bdce:	d13a      	bne.n	800be46 <_malloc_r+0xd2>
 800bdd0:	6821      	ldr	r1, [r4, #0]
 800bdd2:	3503      	adds	r5, #3
 800bdd4:	1a6d      	subs	r5, r5, r1
 800bdd6:	f025 0503 	bic.w	r5, r5, #3
 800bdda:	3508      	adds	r5, #8
 800bddc:	2d0c      	cmp	r5, #12
 800bdde:	bf38      	it	cc
 800bde0:	250c      	movcc	r5, #12
 800bde2:	4629      	mov	r1, r5
 800bde4:	4638      	mov	r0, r7
 800bde6:	f7ff ffa5 	bl	800bd34 <sbrk_aligned>
 800bdea:	3001      	adds	r0, #1
 800bdec:	d02b      	beq.n	800be46 <_malloc_r+0xd2>
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	442b      	add	r3, r5
 800bdf2:	6023      	str	r3, [r4, #0]
 800bdf4:	e00e      	b.n	800be14 <_malloc_r+0xa0>
 800bdf6:	6822      	ldr	r2, [r4, #0]
 800bdf8:	1b52      	subs	r2, r2, r5
 800bdfa:	d41e      	bmi.n	800be3a <_malloc_r+0xc6>
 800bdfc:	2a0b      	cmp	r2, #11
 800bdfe:	d916      	bls.n	800be2e <_malloc_r+0xba>
 800be00:	1961      	adds	r1, r4, r5
 800be02:	42a3      	cmp	r3, r4
 800be04:	6025      	str	r5, [r4, #0]
 800be06:	bf18      	it	ne
 800be08:	6059      	strne	r1, [r3, #4]
 800be0a:	6863      	ldr	r3, [r4, #4]
 800be0c:	bf08      	it	eq
 800be0e:	6031      	streq	r1, [r6, #0]
 800be10:	5162      	str	r2, [r4, r5]
 800be12:	604b      	str	r3, [r1, #4]
 800be14:	4638      	mov	r0, r7
 800be16:	f104 060b 	add.w	r6, r4, #11
 800be1a:	f000 fa07 	bl	800c22c <__malloc_unlock>
 800be1e:	f026 0607 	bic.w	r6, r6, #7
 800be22:	1d23      	adds	r3, r4, #4
 800be24:	1af2      	subs	r2, r6, r3
 800be26:	d0b6      	beq.n	800bd96 <_malloc_r+0x22>
 800be28:	1b9b      	subs	r3, r3, r6
 800be2a:	50a3      	str	r3, [r4, r2]
 800be2c:	e7b3      	b.n	800bd96 <_malloc_r+0x22>
 800be2e:	6862      	ldr	r2, [r4, #4]
 800be30:	42a3      	cmp	r3, r4
 800be32:	bf0c      	ite	eq
 800be34:	6032      	streq	r2, [r6, #0]
 800be36:	605a      	strne	r2, [r3, #4]
 800be38:	e7ec      	b.n	800be14 <_malloc_r+0xa0>
 800be3a:	4623      	mov	r3, r4
 800be3c:	6864      	ldr	r4, [r4, #4]
 800be3e:	e7b2      	b.n	800bda6 <_malloc_r+0x32>
 800be40:	4634      	mov	r4, r6
 800be42:	6876      	ldr	r6, [r6, #4]
 800be44:	e7b9      	b.n	800bdba <_malloc_r+0x46>
 800be46:	230c      	movs	r3, #12
 800be48:	603b      	str	r3, [r7, #0]
 800be4a:	4638      	mov	r0, r7
 800be4c:	f000 f9ee 	bl	800c22c <__malloc_unlock>
 800be50:	e7a1      	b.n	800bd96 <_malloc_r+0x22>
 800be52:	6025      	str	r5, [r4, #0]
 800be54:	e7de      	b.n	800be14 <_malloc_r+0xa0>
 800be56:	bf00      	nop
 800be58:	24000464 	.word	0x24000464

0800be5c <__ssputs_r>:
 800be5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be60:	688e      	ldr	r6, [r1, #8]
 800be62:	429e      	cmp	r6, r3
 800be64:	4682      	mov	sl, r0
 800be66:	460c      	mov	r4, r1
 800be68:	4690      	mov	r8, r2
 800be6a:	461f      	mov	r7, r3
 800be6c:	d838      	bhi.n	800bee0 <__ssputs_r+0x84>
 800be6e:	898a      	ldrh	r2, [r1, #12]
 800be70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be74:	d032      	beq.n	800bedc <__ssputs_r+0x80>
 800be76:	6825      	ldr	r5, [r4, #0]
 800be78:	6909      	ldr	r1, [r1, #16]
 800be7a:	eba5 0901 	sub.w	r9, r5, r1
 800be7e:	6965      	ldr	r5, [r4, #20]
 800be80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be88:	3301      	adds	r3, #1
 800be8a:	444b      	add	r3, r9
 800be8c:	106d      	asrs	r5, r5, #1
 800be8e:	429d      	cmp	r5, r3
 800be90:	bf38      	it	cc
 800be92:	461d      	movcc	r5, r3
 800be94:	0553      	lsls	r3, r2, #21
 800be96:	d531      	bpl.n	800befc <__ssputs_r+0xa0>
 800be98:	4629      	mov	r1, r5
 800be9a:	f7ff ff6b 	bl	800bd74 <_malloc_r>
 800be9e:	4606      	mov	r6, r0
 800bea0:	b950      	cbnz	r0, 800beb8 <__ssputs_r+0x5c>
 800bea2:	230c      	movs	r3, #12
 800bea4:	f8ca 3000 	str.w	r3, [sl]
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beae:	81a3      	strh	r3, [r4, #12]
 800beb0:	f04f 30ff 	mov.w	r0, #4294967295
 800beb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beb8:	6921      	ldr	r1, [r4, #16]
 800beba:	464a      	mov	r2, r9
 800bebc:	f7ff fa0c 	bl	800b2d8 <memcpy>
 800bec0:	89a3      	ldrh	r3, [r4, #12]
 800bec2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beca:	81a3      	strh	r3, [r4, #12]
 800becc:	6126      	str	r6, [r4, #16]
 800bece:	6165      	str	r5, [r4, #20]
 800bed0:	444e      	add	r6, r9
 800bed2:	eba5 0509 	sub.w	r5, r5, r9
 800bed6:	6026      	str	r6, [r4, #0]
 800bed8:	60a5      	str	r5, [r4, #8]
 800beda:	463e      	mov	r6, r7
 800bedc:	42be      	cmp	r6, r7
 800bede:	d900      	bls.n	800bee2 <__ssputs_r+0x86>
 800bee0:	463e      	mov	r6, r7
 800bee2:	6820      	ldr	r0, [r4, #0]
 800bee4:	4632      	mov	r2, r6
 800bee6:	4641      	mov	r1, r8
 800bee8:	f000 f980 	bl	800c1ec <memmove>
 800beec:	68a3      	ldr	r3, [r4, #8]
 800beee:	1b9b      	subs	r3, r3, r6
 800bef0:	60a3      	str	r3, [r4, #8]
 800bef2:	6823      	ldr	r3, [r4, #0]
 800bef4:	4433      	add	r3, r6
 800bef6:	6023      	str	r3, [r4, #0]
 800bef8:	2000      	movs	r0, #0
 800befa:	e7db      	b.n	800beb4 <__ssputs_r+0x58>
 800befc:	462a      	mov	r2, r5
 800befe:	f000 f99b 	bl	800c238 <_realloc_r>
 800bf02:	4606      	mov	r6, r0
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d1e1      	bne.n	800becc <__ssputs_r+0x70>
 800bf08:	6921      	ldr	r1, [r4, #16]
 800bf0a:	4650      	mov	r0, sl
 800bf0c:	f7ff fec6 	bl	800bc9c <_free_r>
 800bf10:	e7c7      	b.n	800bea2 <__ssputs_r+0x46>
	...

0800bf14 <_svfiprintf_r>:
 800bf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf18:	4698      	mov	r8, r3
 800bf1a:	898b      	ldrh	r3, [r1, #12]
 800bf1c:	061b      	lsls	r3, r3, #24
 800bf1e:	b09d      	sub	sp, #116	; 0x74
 800bf20:	4607      	mov	r7, r0
 800bf22:	460d      	mov	r5, r1
 800bf24:	4614      	mov	r4, r2
 800bf26:	d50e      	bpl.n	800bf46 <_svfiprintf_r+0x32>
 800bf28:	690b      	ldr	r3, [r1, #16]
 800bf2a:	b963      	cbnz	r3, 800bf46 <_svfiprintf_r+0x32>
 800bf2c:	2140      	movs	r1, #64	; 0x40
 800bf2e:	f7ff ff21 	bl	800bd74 <_malloc_r>
 800bf32:	6028      	str	r0, [r5, #0]
 800bf34:	6128      	str	r0, [r5, #16]
 800bf36:	b920      	cbnz	r0, 800bf42 <_svfiprintf_r+0x2e>
 800bf38:	230c      	movs	r3, #12
 800bf3a:	603b      	str	r3, [r7, #0]
 800bf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf40:	e0d1      	b.n	800c0e6 <_svfiprintf_r+0x1d2>
 800bf42:	2340      	movs	r3, #64	; 0x40
 800bf44:	616b      	str	r3, [r5, #20]
 800bf46:	2300      	movs	r3, #0
 800bf48:	9309      	str	r3, [sp, #36]	; 0x24
 800bf4a:	2320      	movs	r3, #32
 800bf4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf50:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf54:	2330      	movs	r3, #48	; 0x30
 800bf56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c100 <_svfiprintf_r+0x1ec>
 800bf5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf5e:	f04f 0901 	mov.w	r9, #1
 800bf62:	4623      	mov	r3, r4
 800bf64:	469a      	mov	sl, r3
 800bf66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf6a:	b10a      	cbz	r2, 800bf70 <_svfiprintf_r+0x5c>
 800bf6c:	2a25      	cmp	r2, #37	; 0x25
 800bf6e:	d1f9      	bne.n	800bf64 <_svfiprintf_r+0x50>
 800bf70:	ebba 0b04 	subs.w	fp, sl, r4
 800bf74:	d00b      	beq.n	800bf8e <_svfiprintf_r+0x7a>
 800bf76:	465b      	mov	r3, fp
 800bf78:	4622      	mov	r2, r4
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	4638      	mov	r0, r7
 800bf7e:	f7ff ff6d 	bl	800be5c <__ssputs_r>
 800bf82:	3001      	adds	r0, #1
 800bf84:	f000 80aa 	beq.w	800c0dc <_svfiprintf_r+0x1c8>
 800bf88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf8a:	445a      	add	r2, fp
 800bf8c:	9209      	str	r2, [sp, #36]	; 0x24
 800bf8e:	f89a 3000 	ldrb.w	r3, [sl]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f000 80a2 	beq.w	800c0dc <_svfiprintf_r+0x1c8>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfa2:	f10a 0a01 	add.w	sl, sl, #1
 800bfa6:	9304      	str	r3, [sp, #16]
 800bfa8:	9307      	str	r3, [sp, #28]
 800bfaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfae:	931a      	str	r3, [sp, #104]	; 0x68
 800bfb0:	4654      	mov	r4, sl
 800bfb2:	2205      	movs	r2, #5
 800bfb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb8:	4851      	ldr	r0, [pc, #324]	; (800c100 <_svfiprintf_r+0x1ec>)
 800bfba:	f7f4 f999 	bl	80002f0 <memchr>
 800bfbe:	9a04      	ldr	r2, [sp, #16]
 800bfc0:	b9d8      	cbnz	r0, 800bffa <_svfiprintf_r+0xe6>
 800bfc2:	06d0      	lsls	r0, r2, #27
 800bfc4:	bf44      	itt	mi
 800bfc6:	2320      	movmi	r3, #32
 800bfc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfcc:	0711      	lsls	r1, r2, #28
 800bfce:	bf44      	itt	mi
 800bfd0:	232b      	movmi	r3, #43	; 0x2b
 800bfd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfd6:	f89a 3000 	ldrb.w	r3, [sl]
 800bfda:	2b2a      	cmp	r3, #42	; 0x2a
 800bfdc:	d015      	beq.n	800c00a <_svfiprintf_r+0xf6>
 800bfde:	9a07      	ldr	r2, [sp, #28]
 800bfe0:	4654      	mov	r4, sl
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	f04f 0c0a 	mov.w	ip, #10
 800bfe8:	4621      	mov	r1, r4
 800bfea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfee:	3b30      	subs	r3, #48	; 0x30
 800bff0:	2b09      	cmp	r3, #9
 800bff2:	d94e      	bls.n	800c092 <_svfiprintf_r+0x17e>
 800bff4:	b1b0      	cbz	r0, 800c024 <_svfiprintf_r+0x110>
 800bff6:	9207      	str	r2, [sp, #28]
 800bff8:	e014      	b.n	800c024 <_svfiprintf_r+0x110>
 800bffa:	eba0 0308 	sub.w	r3, r0, r8
 800bffe:	fa09 f303 	lsl.w	r3, r9, r3
 800c002:	4313      	orrs	r3, r2
 800c004:	9304      	str	r3, [sp, #16]
 800c006:	46a2      	mov	sl, r4
 800c008:	e7d2      	b.n	800bfb0 <_svfiprintf_r+0x9c>
 800c00a:	9b03      	ldr	r3, [sp, #12]
 800c00c:	1d19      	adds	r1, r3, #4
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	9103      	str	r1, [sp, #12]
 800c012:	2b00      	cmp	r3, #0
 800c014:	bfbb      	ittet	lt
 800c016:	425b      	neglt	r3, r3
 800c018:	f042 0202 	orrlt.w	r2, r2, #2
 800c01c:	9307      	strge	r3, [sp, #28]
 800c01e:	9307      	strlt	r3, [sp, #28]
 800c020:	bfb8      	it	lt
 800c022:	9204      	strlt	r2, [sp, #16]
 800c024:	7823      	ldrb	r3, [r4, #0]
 800c026:	2b2e      	cmp	r3, #46	; 0x2e
 800c028:	d10c      	bne.n	800c044 <_svfiprintf_r+0x130>
 800c02a:	7863      	ldrb	r3, [r4, #1]
 800c02c:	2b2a      	cmp	r3, #42	; 0x2a
 800c02e:	d135      	bne.n	800c09c <_svfiprintf_r+0x188>
 800c030:	9b03      	ldr	r3, [sp, #12]
 800c032:	1d1a      	adds	r2, r3, #4
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	9203      	str	r2, [sp, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	bfb8      	it	lt
 800c03c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c040:	3402      	adds	r4, #2
 800c042:	9305      	str	r3, [sp, #20]
 800c044:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c110 <_svfiprintf_r+0x1fc>
 800c048:	7821      	ldrb	r1, [r4, #0]
 800c04a:	2203      	movs	r2, #3
 800c04c:	4650      	mov	r0, sl
 800c04e:	f7f4 f94f 	bl	80002f0 <memchr>
 800c052:	b140      	cbz	r0, 800c066 <_svfiprintf_r+0x152>
 800c054:	2340      	movs	r3, #64	; 0x40
 800c056:	eba0 000a 	sub.w	r0, r0, sl
 800c05a:	fa03 f000 	lsl.w	r0, r3, r0
 800c05e:	9b04      	ldr	r3, [sp, #16]
 800c060:	4303      	orrs	r3, r0
 800c062:	3401      	adds	r4, #1
 800c064:	9304      	str	r3, [sp, #16]
 800c066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c06a:	4826      	ldr	r0, [pc, #152]	; (800c104 <_svfiprintf_r+0x1f0>)
 800c06c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c070:	2206      	movs	r2, #6
 800c072:	f7f4 f93d 	bl	80002f0 <memchr>
 800c076:	2800      	cmp	r0, #0
 800c078:	d038      	beq.n	800c0ec <_svfiprintf_r+0x1d8>
 800c07a:	4b23      	ldr	r3, [pc, #140]	; (800c108 <_svfiprintf_r+0x1f4>)
 800c07c:	bb1b      	cbnz	r3, 800c0c6 <_svfiprintf_r+0x1b2>
 800c07e:	9b03      	ldr	r3, [sp, #12]
 800c080:	3307      	adds	r3, #7
 800c082:	f023 0307 	bic.w	r3, r3, #7
 800c086:	3308      	adds	r3, #8
 800c088:	9303      	str	r3, [sp, #12]
 800c08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c08c:	4433      	add	r3, r6
 800c08e:	9309      	str	r3, [sp, #36]	; 0x24
 800c090:	e767      	b.n	800bf62 <_svfiprintf_r+0x4e>
 800c092:	fb0c 3202 	mla	r2, ip, r2, r3
 800c096:	460c      	mov	r4, r1
 800c098:	2001      	movs	r0, #1
 800c09a:	e7a5      	b.n	800bfe8 <_svfiprintf_r+0xd4>
 800c09c:	2300      	movs	r3, #0
 800c09e:	3401      	adds	r4, #1
 800c0a0:	9305      	str	r3, [sp, #20]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	f04f 0c0a 	mov.w	ip, #10
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0ae:	3a30      	subs	r2, #48	; 0x30
 800c0b0:	2a09      	cmp	r2, #9
 800c0b2:	d903      	bls.n	800c0bc <_svfiprintf_r+0x1a8>
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d0c5      	beq.n	800c044 <_svfiprintf_r+0x130>
 800c0b8:	9105      	str	r1, [sp, #20]
 800c0ba:	e7c3      	b.n	800c044 <_svfiprintf_r+0x130>
 800c0bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e7f0      	b.n	800c0a8 <_svfiprintf_r+0x194>
 800c0c6:	ab03      	add	r3, sp, #12
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	462a      	mov	r2, r5
 800c0cc:	4b0f      	ldr	r3, [pc, #60]	; (800c10c <_svfiprintf_r+0x1f8>)
 800c0ce:	a904      	add	r1, sp, #16
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	f7fc fb41 	bl	8008758 <_printf_float>
 800c0d6:	1c42      	adds	r2, r0, #1
 800c0d8:	4606      	mov	r6, r0
 800c0da:	d1d6      	bne.n	800c08a <_svfiprintf_r+0x176>
 800c0dc:	89ab      	ldrh	r3, [r5, #12]
 800c0de:	065b      	lsls	r3, r3, #25
 800c0e0:	f53f af2c 	bmi.w	800bf3c <_svfiprintf_r+0x28>
 800c0e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0e6:	b01d      	add	sp, #116	; 0x74
 800c0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ec:	ab03      	add	r3, sp, #12
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	462a      	mov	r2, r5
 800c0f2:	4b06      	ldr	r3, [pc, #24]	; (800c10c <_svfiprintf_r+0x1f8>)
 800c0f4:	a904      	add	r1, sp, #16
 800c0f6:	4638      	mov	r0, r7
 800c0f8:	f7fc fdba 	bl	8008c70 <_printf_i>
 800c0fc:	e7eb      	b.n	800c0d6 <_svfiprintf_r+0x1c2>
 800c0fe:	bf00      	nop
 800c100:	0800d16c 	.word	0x0800d16c
 800c104:	0800d176 	.word	0x0800d176
 800c108:	08008759 	.word	0x08008759
 800c10c:	0800be5d 	.word	0x0800be5d
 800c110:	0800d172 	.word	0x0800d172
 800c114:	00000000 	.word	0x00000000

0800c118 <nan>:
 800c118:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c120 <nan+0x8>
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	00000000 	.word	0x00000000
 800c124:	7ff80000 	.word	0x7ff80000

0800c128 <_sbrk_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	4d06      	ldr	r5, [pc, #24]	; (800c144 <_sbrk_r+0x1c>)
 800c12c:	2300      	movs	r3, #0
 800c12e:	4604      	mov	r4, r0
 800c130:	4608      	mov	r0, r1
 800c132:	602b      	str	r3, [r5, #0]
 800c134:	f7f5 fca8 	bl	8001a88 <_sbrk>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	d102      	bne.n	800c142 <_sbrk_r+0x1a>
 800c13c:	682b      	ldr	r3, [r5, #0]
 800c13e:	b103      	cbz	r3, 800c142 <_sbrk_r+0x1a>
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	2400046c 	.word	0x2400046c

0800c148 <strncmp>:
 800c148:	b510      	push	{r4, lr}
 800c14a:	b17a      	cbz	r2, 800c16c <strncmp+0x24>
 800c14c:	4603      	mov	r3, r0
 800c14e:	3901      	subs	r1, #1
 800c150:	1884      	adds	r4, r0, r2
 800c152:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c156:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c15a:	4290      	cmp	r0, r2
 800c15c:	d101      	bne.n	800c162 <strncmp+0x1a>
 800c15e:	42a3      	cmp	r3, r4
 800c160:	d101      	bne.n	800c166 <strncmp+0x1e>
 800c162:	1a80      	subs	r0, r0, r2
 800c164:	bd10      	pop	{r4, pc}
 800c166:	2800      	cmp	r0, #0
 800c168:	d1f3      	bne.n	800c152 <strncmp+0xa>
 800c16a:	e7fa      	b.n	800c162 <strncmp+0x1a>
 800c16c:	4610      	mov	r0, r2
 800c16e:	e7f9      	b.n	800c164 <strncmp+0x1c>

0800c170 <__ascii_wctomb>:
 800c170:	b149      	cbz	r1, 800c186 <__ascii_wctomb+0x16>
 800c172:	2aff      	cmp	r2, #255	; 0xff
 800c174:	bf85      	ittet	hi
 800c176:	238a      	movhi	r3, #138	; 0x8a
 800c178:	6003      	strhi	r3, [r0, #0]
 800c17a:	700a      	strbls	r2, [r1, #0]
 800c17c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c180:	bf98      	it	ls
 800c182:	2001      	movls	r0, #1
 800c184:	4770      	bx	lr
 800c186:	4608      	mov	r0, r1
 800c188:	4770      	bx	lr
	...

0800c18c <__assert_func>:
 800c18c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c18e:	4614      	mov	r4, r2
 800c190:	461a      	mov	r2, r3
 800c192:	4b09      	ldr	r3, [pc, #36]	; (800c1b8 <__assert_func+0x2c>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4605      	mov	r5, r0
 800c198:	68d8      	ldr	r0, [r3, #12]
 800c19a:	b14c      	cbz	r4, 800c1b0 <__assert_func+0x24>
 800c19c:	4b07      	ldr	r3, [pc, #28]	; (800c1bc <__assert_func+0x30>)
 800c19e:	9100      	str	r1, [sp, #0]
 800c1a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1a4:	4906      	ldr	r1, [pc, #24]	; (800c1c0 <__assert_func+0x34>)
 800c1a6:	462b      	mov	r3, r5
 800c1a8:	f000 f80e 	bl	800c1c8 <fiprintf>
 800c1ac:	f000 fa8c 	bl	800c6c8 <abort>
 800c1b0:	4b04      	ldr	r3, [pc, #16]	; (800c1c4 <__assert_func+0x38>)
 800c1b2:	461c      	mov	r4, r3
 800c1b4:	e7f3      	b.n	800c19e <__assert_func+0x12>
 800c1b6:	bf00      	nop
 800c1b8:	2400001c 	.word	0x2400001c
 800c1bc:	0800d17d 	.word	0x0800d17d
 800c1c0:	0800d18a 	.word	0x0800d18a
 800c1c4:	0800d1b8 	.word	0x0800d1b8

0800c1c8 <fiprintf>:
 800c1c8:	b40e      	push	{r1, r2, r3}
 800c1ca:	b503      	push	{r0, r1, lr}
 800c1cc:	4601      	mov	r1, r0
 800c1ce:	ab03      	add	r3, sp, #12
 800c1d0:	4805      	ldr	r0, [pc, #20]	; (800c1e8 <fiprintf+0x20>)
 800c1d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1d6:	6800      	ldr	r0, [r0, #0]
 800c1d8:	9301      	str	r3, [sp, #4]
 800c1da:	f000 f885 	bl	800c2e8 <_vfiprintf_r>
 800c1de:	b002      	add	sp, #8
 800c1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1e4:	b003      	add	sp, #12
 800c1e6:	4770      	bx	lr
 800c1e8:	2400001c 	.word	0x2400001c

0800c1ec <memmove>:
 800c1ec:	4288      	cmp	r0, r1
 800c1ee:	b510      	push	{r4, lr}
 800c1f0:	eb01 0402 	add.w	r4, r1, r2
 800c1f4:	d902      	bls.n	800c1fc <memmove+0x10>
 800c1f6:	4284      	cmp	r4, r0
 800c1f8:	4623      	mov	r3, r4
 800c1fa:	d807      	bhi.n	800c20c <memmove+0x20>
 800c1fc:	1e43      	subs	r3, r0, #1
 800c1fe:	42a1      	cmp	r1, r4
 800c200:	d008      	beq.n	800c214 <memmove+0x28>
 800c202:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c206:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c20a:	e7f8      	b.n	800c1fe <memmove+0x12>
 800c20c:	4402      	add	r2, r0
 800c20e:	4601      	mov	r1, r0
 800c210:	428a      	cmp	r2, r1
 800c212:	d100      	bne.n	800c216 <memmove+0x2a>
 800c214:	bd10      	pop	{r4, pc}
 800c216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c21a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c21e:	e7f7      	b.n	800c210 <memmove+0x24>

0800c220 <__malloc_lock>:
 800c220:	4801      	ldr	r0, [pc, #4]	; (800c228 <__malloc_lock+0x8>)
 800c222:	f000 bc11 	b.w	800ca48 <__retarget_lock_acquire_recursive>
 800c226:	bf00      	nop
 800c228:	24000470 	.word	0x24000470

0800c22c <__malloc_unlock>:
 800c22c:	4801      	ldr	r0, [pc, #4]	; (800c234 <__malloc_unlock+0x8>)
 800c22e:	f000 bc0c 	b.w	800ca4a <__retarget_lock_release_recursive>
 800c232:	bf00      	nop
 800c234:	24000470 	.word	0x24000470

0800c238 <_realloc_r>:
 800c238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c23c:	4680      	mov	r8, r0
 800c23e:	4614      	mov	r4, r2
 800c240:	460e      	mov	r6, r1
 800c242:	b921      	cbnz	r1, 800c24e <_realloc_r+0x16>
 800c244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c248:	4611      	mov	r1, r2
 800c24a:	f7ff bd93 	b.w	800bd74 <_malloc_r>
 800c24e:	b92a      	cbnz	r2, 800c25c <_realloc_r+0x24>
 800c250:	f7ff fd24 	bl	800bc9c <_free_r>
 800c254:	4625      	mov	r5, r4
 800c256:	4628      	mov	r0, r5
 800c258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c25c:	f000 fc5c 	bl	800cb18 <_malloc_usable_size_r>
 800c260:	4284      	cmp	r4, r0
 800c262:	4607      	mov	r7, r0
 800c264:	d802      	bhi.n	800c26c <_realloc_r+0x34>
 800c266:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c26a:	d812      	bhi.n	800c292 <_realloc_r+0x5a>
 800c26c:	4621      	mov	r1, r4
 800c26e:	4640      	mov	r0, r8
 800c270:	f7ff fd80 	bl	800bd74 <_malloc_r>
 800c274:	4605      	mov	r5, r0
 800c276:	2800      	cmp	r0, #0
 800c278:	d0ed      	beq.n	800c256 <_realloc_r+0x1e>
 800c27a:	42bc      	cmp	r4, r7
 800c27c:	4622      	mov	r2, r4
 800c27e:	4631      	mov	r1, r6
 800c280:	bf28      	it	cs
 800c282:	463a      	movcs	r2, r7
 800c284:	f7ff f828 	bl	800b2d8 <memcpy>
 800c288:	4631      	mov	r1, r6
 800c28a:	4640      	mov	r0, r8
 800c28c:	f7ff fd06 	bl	800bc9c <_free_r>
 800c290:	e7e1      	b.n	800c256 <_realloc_r+0x1e>
 800c292:	4635      	mov	r5, r6
 800c294:	e7df      	b.n	800c256 <_realloc_r+0x1e>

0800c296 <__sfputc_r>:
 800c296:	6893      	ldr	r3, [r2, #8]
 800c298:	3b01      	subs	r3, #1
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	b410      	push	{r4}
 800c29e:	6093      	str	r3, [r2, #8]
 800c2a0:	da08      	bge.n	800c2b4 <__sfputc_r+0x1e>
 800c2a2:	6994      	ldr	r4, [r2, #24]
 800c2a4:	42a3      	cmp	r3, r4
 800c2a6:	db01      	blt.n	800c2ac <__sfputc_r+0x16>
 800c2a8:	290a      	cmp	r1, #10
 800c2aa:	d103      	bne.n	800c2b4 <__sfputc_r+0x1e>
 800c2ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2b0:	f000 b94a 	b.w	800c548 <__swbuf_r>
 800c2b4:	6813      	ldr	r3, [r2, #0]
 800c2b6:	1c58      	adds	r0, r3, #1
 800c2b8:	6010      	str	r0, [r2, #0]
 800c2ba:	7019      	strb	r1, [r3, #0]
 800c2bc:	4608      	mov	r0, r1
 800c2be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <__sfputs_r>:
 800c2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c6:	4606      	mov	r6, r0
 800c2c8:	460f      	mov	r7, r1
 800c2ca:	4614      	mov	r4, r2
 800c2cc:	18d5      	adds	r5, r2, r3
 800c2ce:	42ac      	cmp	r4, r5
 800c2d0:	d101      	bne.n	800c2d6 <__sfputs_r+0x12>
 800c2d2:	2000      	movs	r0, #0
 800c2d4:	e007      	b.n	800c2e6 <__sfputs_r+0x22>
 800c2d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2da:	463a      	mov	r2, r7
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f7ff ffda 	bl	800c296 <__sfputc_r>
 800c2e2:	1c43      	adds	r3, r0, #1
 800c2e4:	d1f3      	bne.n	800c2ce <__sfputs_r+0xa>
 800c2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2e8 <_vfiprintf_r>:
 800c2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ec:	460d      	mov	r5, r1
 800c2ee:	b09d      	sub	sp, #116	; 0x74
 800c2f0:	4614      	mov	r4, r2
 800c2f2:	4698      	mov	r8, r3
 800c2f4:	4606      	mov	r6, r0
 800c2f6:	b118      	cbz	r0, 800c300 <_vfiprintf_r+0x18>
 800c2f8:	6983      	ldr	r3, [r0, #24]
 800c2fa:	b90b      	cbnz	r3, 800c300 <_vfiprintf_r+0x18>
 800c2fc:	f000 fb06 	bl	800c90c <__sinit>
 800c300:	4b89      	ldr	r3, [pc, #548]	; (800c528 <_vfiprintf_r+0x240>)
 800c302:	429d      	cmp	r5, r3
 800c304:	d11b      	bne.n	800c33e <_vfiprintf_r+0x56>
 800c306:	6875      	ldr	r5, [r6, #4]
 800c308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c30a:	07d9      	lsls	r1, r3, #31
 800c30c:	d405      	bmi.n	800c31a <_vfiprintf_r+0x32>
 800c30e:	89ab      	ldrh	r3, [r5, #12]
 800c310:	059a      	lsls	r2, r3, #22
 800c312:	d402      	bmi.n	800c31a <_vfiprintf_r+0x32>
 800c314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c316:	f000 fb97 	bl	800ca48 <__retarget_lock_acquire_recursive>
 800c31a:	89ab      	ldrh	r3, [r5, #12]
 800c31c:	071b      	lsls	r3, r3, #28
 800c31e:	d501      	bpl.n	800c324 <_vfiprintf_r+0x3c>
 800c320:	692b      	ldr	r3, [r5, #16]
 800c322:	b9eb      	cbnz	r3, 800c360 <_vfiprintf_r+0x78>
 800c324:	4629      	mov	r1, r5
 800c326:	4630      	mov	r0, r6
 800c328:	f000 f960 	bl	800c5ec <__swsetup_r>
 800c32c:	b1c0      	cbz	r0, 800c360 <_vfiprintf_r+0x78>
 800c32e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c330:	07dc      	lsls	r4, r3, #31
 800c332:	d50e      	bpl.n	800c352 <_vfiprintf_r+0x6a>
 800c334:	f04f 30ff 	mov.w	r0, #4294967295
 800c338:	b01d      	add	sp, #116	; 0x74
 800c33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33e:	4b7b      	ldr	r3, [pc, #492]	; (800c52c <_vfiprintf_r+0x244>)
 800c340:	429d      	cmp	r5, r3
 800c342:	d101      	bne.n	800c348 <_vfiprintf_r+0x60>
 800c344:	68b5      	ldr	r5, [r6, #8]
 800c346:	e7df      	b.n	800c308 <_vfiprintf_r+0x20>
 800c348:	4b79      	ldr	r3, [pc, #484]	; (800c530 <_vfiprintf_r+0x248>)
 800c34a:	429d      	cmp	r5, r3
 800c34c:	bf08      	it	eq
 800c34e:	68f5      	ldreq	r5, [r6, #12]
 800c350:	e7da      	b.n	800c308 <_vfiprintf_r+0x20>
 800c352:	89ab      	ldrh	r3, [r5, #12]
 800c354:	0598      	lsls	r0, r3, #22
 800c356:	d4ed      	bmi.n	800c334 <_vfiprintf_r+0x4c>
 800c358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c35a:	f000 fb76 	bl	800ca4a <__retarget_lock_release_recursive>
 800c35e:	e7e9      	b.n	800c334 <_vfiprintf_r+0x4c>
 800c360:	2300      	movs	r3, #0
 800c362:	9309      	str	r3, [sp, #36]	; 0x24
 800c364:	2320      	movs	r3, #32
 800c366:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c36a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c36e:	2330      	movs	r3, #48	; 0x30
 800c370:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c534 <_vfiprintf_r+0x24c>
 800c374:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c378:	f04f 0901 	mov.w	r9, #1
 800c37c:	4623      	mov	r3, r4
 800c37e:	469a      	mov	sl, r3
 800c380:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c384:	b10a      	cbz	r2, 800c38a <_vfiprintf_r+0xa2>
 800c386:	2a25      	cmp	r2, #37	; 0x25
 800c388:	d1f9      	bne.n	800c37e <_vfiprintf_r+0x96>
 800c38a:	ebba 0b04 	subs.w	fp, sl, r4
 800c38e:	d00b      	beq.n	800c3a8 <_vfiprintf_r+0xc0>
 800c390:	465b      	mov	r3, fp
 800c392:	4622      	mov	r2, r4
 800c394:	4629      	mov	r1, r5
 800c396:	4630      	mov	r0, r6
 800c398:	f7ff ff94 	bl	800c2c4 <__sfputs_r>
 800c39c:	3001      	adds	r0, #1
 800c39e:	f000 80aa 	beq.w	800c4f6 <_vfiprintf_r+0x20e>
 800c3a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3a4:	445a      	add	r2, fp
 800c3a6:	9209      	str	r2, [sp, #36]	; 0x24
 800c3a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f000 80a2 	beq.w	800c4f6 <_vfiprintf_r+0x20e>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3bc:	f10a 0a01 	add.w	sl, sl, #1
 800c3c0:	9304      	str	r3, [sp, #16]
 800c3c2:	9307      	str	r3, [sp, #28]
 800c3c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3c8:	931a      	str	r3, [sp, #104]	; 0x68
 800c3ca:	4654      	mov	r4, sl
 800c3cc:	2205      	movs	r2, #5
 800c3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d2:	4858      	ldr	r0, [pc, #352]	; (800c534 <_vfiprintf_r+0x24c>)
 800c3d4:	f7f3 ff8c 	bl	80002f0 <memchr>
 800c3d8:	9a04      	ldr	r2, [sp, #16]
 800c3da:	b9d8      	cbnz	r0, 800c414 <_vfiprintf_r+0x12c>
 800c3dc:	06d1      	lsls	r1, r2, #27
 800c3de:	bf44      	itt	mi
 800c3e0:	2320      	movmi	r3, #32
 800c3e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3e6:	0713      	lsls	r3, r2, #28
 800c3e8:	bf44      	itt	mi
 800c3ea:	232b      	movmi	r3, #43	; 0x2b
 800c3ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c3f6:	d015      	beq.n	800c424 <_vfiprintf_r+0x13c>
 800c3f8:	9a07      	ldr	r2, [sp, #28]
 800c3fa:	4654      	mov	r4, sl
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	f04f 0c0a 	mov.w	ip, #10
 800c402:	4621      	mov	r1, r4
 800c404:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c408:	3b30      	subs	r3, #48	; 0x30
 800c40a:	2b09      	cmp	r3, #9
 800c40c:	d94e      	bls.n	800c4ac <_vfiprintf_r+0x1c4>
 800c40e:	b1b0      	cbz	r0, 800c43e <_vfiprintf_r+0x156>
 800c410:	9207      	str	r2, [sp, #28]
 800c412:	e014      	b.n	800c43e <_vfiprintf_r+0x156>
 800c414:	eba0 0308 	sub.w	r3, r0, r8
 800c418:	fa09 f303 	lsl.w	r3, r9, r3
 800c41c:	4313      	orrs	r3, r2
 800c41e:	9304      	str	r3, [sp, #16]
 800c420:	46a2      	mov	sl, r4
 800c422:	e7d2      	b.n	800c3ca <_vfiprintf_r+0xe2>
 800c424:	9b03      	ldr	r3, [sp, #12]
 800c426:	1d19      	adds	r1, r3, #4
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	9103      	str	r1, [sp, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	bfbb      	ittet	lt
 800c430:	425b      	neglt	r3, r3
 800c432:	f042 0202 	orrlt.w	r2, r2, #2
 800c436:	9307      	strge	r3, [sp, #28]
 800c438:	9307      	strlt	r3, [sp, #28]
 800c43a:	bfb8      	it	lt
 800c43c:	9204      	strlt	r2, [sp, #16]
 800c43e:	7823      	ldrb	r3, [r4, #0]
 800c440:	2b2e      	cmp	r3, #46	; 0x2e
 800c442:	d10c      	bne.n	800c45e <_vfiprintf_r+0x176>
 800c444:	7863      	ldrb	r3, [r4, #1]
 800c446:	2b2a      	cmp	r3, #42	; 0x2a
 800c448:	d135      	bne.n	800c4b6 <_vfiprintf_r+0x1ce>
 800c44a:	9b03      	ldr	r3, [sp, #12]
 800c44c:	1d1a      	adds	r2, r3, #4
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	9203      	str	r2, [sp, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	bfb8      	it	lt
 800c456:	f04f 33ff 	movlt.w	r3, #4294967295
 800c45a:	3402      	adds	r4, #2
 800c45c:	9305      	str	r3, [sp, #20]
 800c45e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c544 <_vfiprintf_r+0x25c>
 800c462:	7821      	ldrb	r1, [r4, #0]
 800c464:	2203      	movs	r2, #3
 800c466:	4650      	mov	r0, sl
 800c468:	f7f3 ff42 	bl	80002f0 <memchr>
 800c46c:	b140      	cbz	r0, 800c480 <_vfiprintf_r+0x198>
 800c46e:	2340      	movs	r3, #64	; 0x40
 800c470:	eba0 000a 	sub.w	r0, r0, sl
 800c474:	fa03 f000 	lsl.w	r0, r3, r0
 800c478:	9b04      	ldr	r3, [sp, #16]
 800c47a:	4303      	orrs	r3, r0
 800c47c:	3401      	adds	r4, #1
 800c47e:	9304      	str	r3, [sp, #16]
 800c480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c484:	482c      	ldr	r0, [pc, #176]	; (800c538 <_vfiprintf_r+0x250>)
 800c486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c48a:	2206      	movs	r2, #6
 800c48c:	f7f3 ff30 	bl	80002f0 <memchr>
 800c490:	2800      	cmp	r0, #0
 800c492:	d03f      	beq.n	800c514 <_vfiprintf_r+0x22c>
 800c494:	4b29      	ldr	r3, [pc, #164]	; (800c53c <_vfiprintf_r+0x254>)
 800c496:	bb1b      	cbnz	r3, 800c4e0 <_vfiprintf_r+0x1f8>
 800c498:	9b03      	ldr	r3, [sp, #12]
 800c49a:	3307      	adds	r3, #7
 800c49c:	f023 0307 	bic.w	r3, r3, #7
 800c4a0:	3308      	adds	r3, #8
 800c4a2:	9303      	str	r3, [sp, #12]
 800c4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a6:	443b      	add	r3, r7
 800c4a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c4aa:	e767      	b.n	800c37c <_vfiprintf_r+0x94>
 800c4ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4b0:	460c      	mov	r4, r1
 800c4b2:	2001      	movs	r0, #1
 800c4b4:	e7a5      	b.n	800c402 <_vfiprintf_r+0x11a>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	3401      	adds	r4, #1
 800c4ba:	9305      	str	r3, [sp, #20]
 800c4bc:	4619      	mov	r1, r3
 800c4be:	f04f 0c0a 	mov.w	ip, #10
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4c8:	3a30      	subs	r2, #48	; 0x30
 800c4ca:	2a09      	cmp	r2, #9
 800c4cc:	d903      	bls.n	800c4d6 <_vfiprintf_r+0x1ee>
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d0c5      	beq.n	800c45e <_vfiprintf_r+0x176>
 800c4d2:	9105      	str	r1, [sp, #20]
 800c4d4:	e7c3      	b.n	800c45e <_vfiprintf_r+0x176>
 800c4d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4da:	4604      	mov	r4, r0
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e7f0      	b.n	800c4c2 <_vfiprintf_r+0x1da>
 800c4e0:	ab03      	add	r3, sp, #12
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	462a      	mov	r2, r5
 800c4e6:	4b16      	ldr	r3, [pc, #88]	; (800c540 <_vfiprintf_r+0x258>)
 800c4e8:	a904      	add	r1, sp, #16
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	f7fc f934 	bl	8008758 <_printf_float>
 800c4f0:	4607      	mov	r7, r0
 800c4f2:	1c78      	adds	r0, r7, #1
 800c4f4:	d1d6      	bne.n	800c4a4 <_vfiprintf_r+0x1bc>
 800c4f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4f8:	07d9      	lsls	r1, r3, #31
 800c4fa:	d405      	bmi.n	800c508 <_vfiprintf_r+0x220>
 800c4fc:	89ab      	ldrh	r3, [r5, #12]
 800c4fe:	059a      	lsls	r2, r3, #22
 800c500:	d402      	bmi.n	800c508 <_vfiprintf_r+0x220>
 800c502:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c504:	f000 faa1 	bl	800ca4a <__retarget_lock_release_recursive>
 800c508:	89ab      	ldrh	r3, [r5, #12]
 800c50a:	065b      	lsls	r3, r3, #25
 800c50c:	f53f af12 	bmi.w	800c334 <_vfiprintf_r+0x4c>
 800c510:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c512:	e711      	b.n	800c338 <_vfiprintf_r+0x50>
 800c514:	ab03      	add	r3, sp, #12
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	462a      	mov	r2, r5
 800c51a:	4b09      	ldr	r3, [pc, #36]	; (800c540 <_vfiprintf_r+0x258>)
 800c51c:	a904      	add	r1, sp, #16
 800c51e:	4630      	mov	r0, r6
 800c520:	f7fc fba6 	bl	8008c70 <_printf_i>
 800c524:	e7e4      	b.n	800c4f0 <_vfiprintf_r+0x208>
 800c526:	bf00      	nop
 800c528:	0800d1dc 	.word	0x0800d1dc
 800c52c:	0800d1fc 	.word	0x0800d1fc
 800c530:	0800d1bc 	.word	0x0800d1bc
 800c534:	0800d16c 	.word	0x0800d16c
 800c538:	0800d176 	.word	0x0800d176
 800c53c:	08008759 	.word	0x08008759
 800c540:	0800c2c5 	.word	0x0800c2c5
 800c544:	0800d172 	.word	0x0800d172

0800c548 <__swbuf_r>:
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	460e      	mov	r6, r1
 800c54c:	4614      	mov	r4, r2
 800c54e:	4605      	mov	r5, r0
 800c550:	b118      	cbz	r0, 800c55a <__swbuf_r+0x12>
 800c552:	6983      	ldr	r3, [r0, #24]
 800c554:	b90b      	cbnz	r3, 800c55a <__swbuf_r+0x12>
 800c556:	f000 f9d9 	bl	800c90c <__sinit>
 800c55a:	4b21      	ldr	r3, [pc, #132]	; (800c5e0 <__swbuf_r+0x98>)
 800c55c:	429c      	cmp	r4, r3
 800c55e:	d12b      	bne.n	800c5b8 <__swbuf_r+0x70>
 800c560:	686c      	ldr	r4, [r5, #4]
 800c562:	69a3      	ldr	r3, [r4, #24]
 800c564:	60a3      	str	r3, [r4, #8]
 800c566:	89a3      	ldrh	r3, [r4, #12]
 800c568:	071a      	lsls	r2, r3, #28
 800c56a:	d52f      	bpl.n	800c5cc <__swbuf_r+0x84>
 800c56c:	6923      	ldr	r3, [r4, #16]
 800c56e:	b36b      	cbz	r3, 800c5cc <__swbuf_r+0x84>
 800c570:	6923      	ldr	r3, [r4, #16]
 800c572:	6820      	ldr	r0, [r4, #0]
 800c574:	1ac0      	subs	r0, r0, r3
 800c576:	6963      	ldr	r3, [r4, #20]
 800c578:	b2f6      	uxtb	r6, r6
 800c57a:	4283      	cmp	r3, r0
 800c57c:	4637      	mov	r7, r6
 800c57e:	dc04      	bgt.n	800c58a <__swbuf_r+0x42>
 800c580:	4621      	mov	r1, r4
 800c582:	4628      	mov	r0, r5
 800c584:	f000 f92e 	bl	800c7e4 <_fflush_r>
 800c588:	bb30      	cbnz	r0, 800c5d8 <__swbuf_r+0x90>
 800c58a:	68a3      	ldr	r3, [r4, #8]
 800c58c:	3b01      	subs	r3, #1
 800c58e:	60a3      	str	r3, [r4, #8]
 800c590:	6823      	ldr	r3, [r4, #0]
 800c592:	1c5a      	adds	r2, r3, #1
 800c594:	6022      	str	r2, [r4, #0]
 800c596:	701e      	strb	r6, [r3, #0]
 800c598:	6963      	ldr	r3, [r4, #20]
 800c59a:	3001      	adds	r0, #1
 800c59c:	4283      	cmp	r3, r0
 800c59e:	d004      	beq.n	800c5aa <__swbuf_r+0x62>
 800c5a0:	89a3      	ldrh	r3, [r4, #12]
 800c5a2:	07db      	lsls	r3, r3, #31
 800c5a4:	d506      	bpl.n	800c5b4 <__swbuf_r+0x6c>
 800c5a6:	2e0a      	cmp	r6, #10
 800c5a8:	d104      	bne.n	800c5b4 <__swbuf_r+0x6c>
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	f000 f919 	bl	800c7e4 <_fflush_r>
 800c5b2:	b988      	cbnz	r0, 800c5d8 <__swbuf_r+0x90>
 800c5b4:	4638      	mov	r0, r7
 800c5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5b8:	4b0a      	ldr	r3, [pc, #40]	; (800c5e4 <__swbuf_r+0x9c>)
 800c5ba:	429c      	cmp	r4, r3
 800c5bc:	d101      	bne.n	800c5c2 <__swbuf_r+0x7a>
 800c5be:	68ac      	ldr	r4, [r5, #8]
 800c5c0:	e7cf      	b.n	800c562 <__swbuf_r+0x1a>
 800c5c2:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <__swbuf_r+0xa0>)
 800c5c4:	429c      	cmp	r4, r3
 800c5c6:	bf08      	it	eq
 800c5c8:	68ec      	ldreq	r4, [r5, #12]
 800c5ca:	e7ca      	b.n	800c562 <__swbuf_r+0x1a>
 800c5cc:	4621      	mov	r1, r4
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	f000 f80c 	bl	800c5ec <__swsetup_r>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d0cb      	beq.n	800c570 <__swbuf_r+0x28>
 800c5d8:	f04f 37ff 	mov.w	r7, #4294967295
 800c5dc:	e7ea      	b.n	800c5b4 <__swbuf_r+0x6c>
 800c5de:	bf00      	nop
 800c5e0:	0800d1dc 	.word	0x0800d1dc
 800c5e4:	0800d1fc 	.word	0x0800d1fc
 800c5e8:	0800d1bc 	.word	0x0800d1bc

0800c5ec <__swsetup_r>:
 800c5ec:	4b32      	ldr	r3, [pc, #200]	; (800c6b8 <__swsetup_r+0xcc>)
 800c5ee:	b570      	push	{r4, r5, r6, lr}
 800c5f0:	681d      	ldr	r5, [r3, #0]
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	460c      	mov	r4, r1
 800c5f6:	b125      	cbz	r5, 800c602 <__swsetup_r+0x16>
 800c5f8:	69ab      	ldr	r3, [r5, #24]
 800c5fa:	b913      	cbnz	r3, 800c602 <__swsetup_r+0x16>
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f000 f985 	bl	800c90c <__sinit>
 800c602:	4b2e      	ldr	r3, [pc, #184]	; (800c6bc <__swsetup_r+0xd0>)
 800c604:	429c      	cmp	r4, r3
 800c606:	d10f      	bne.n	800c628 <__swsetup_r+0x3c>
 800c608:	686c      	ldr	r4, [r5, #4]
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c610:	0719      	lsls	r1, r3, #28
 800c612:	d42c      	bmi.n	800c66e <__swsetup_r+0x82>
 800c614:	06dd      	lsls	r5, r3, #27
 800c616:	d411      	bmi.n	800c63c <__swsetup_r+0x50>
 800c618:	2309      	movs	r3, #9
 800c61a:	6033      	str	r3, [r6, #0]
 800c61c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c620:	81a3      	strh	r3, [r4, #12]
 800c622:	f04f 30ff 	mov.w	r0, #4294967295
 800c626:	e03e      	b.n	800c6a6 <__swsetup_r+0xba>
 800c628:	4b25      	ldr	r3, [pc, #148]	; (800c6c0 <__swsetup_r+0xd4>)
 800c62a:	429c      	cmp	r4, r3
 800c62c:	d101      	bne.n	800c632 <__swsetup_r+0x46>
 800c62e:	68ac      	ldr	r4, [r5, #8]
 800c630:	e7eb      	b.n	800c60a <__swsetup_r+0x1e>
 800c632:	4b24      	ldr	r3, [pc, #144]	; (800c6c4 <__swsetup_r+0xd8>)
 800c634:	429c      	cmp	r4, r3
 800c636:	bf08      	it	eq
 800c638:	68ec      	ldreq	r4, [r5, #12]
 800c63a:	e7e6      	b.n	800c60a <__swsetup_r+0x1e>
 800c63c:	0758      	lsls	r0, r3, #29
 800c63e:	d512      	bpl.n	800c666 <__swsetup_r+0x7a>
 800c640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c642:	b141      	cbz	r1, 800c656 <__swsetup_r+0x6a>
 800c644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c648:	4299      	cmp	r1, r3
 800c64a:	d002      	beq.n	800c652 <__swsetup_r+0x66>
 800c64c:	4630      	mov	r0, r6
 800c64e:	f7ff fb25 	bl	800bc9c <_free_r>
 800c652:	2300      	movs	r3, #0
 800c654:	6363      	str	r3, [r4, #52]	; 0x34
 800c656:	89a3      	ldrh	r3, [r4, #12]
 800c658:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c65c:	81a3      	strh	r3, [r4, #12]
 800c65e:	2300      	movs	r3, #0
 800c660:	6063      	str	r3, [r4, #4]
 800c662:	6923      	ldr	r3, [r4, #16]
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	89a3      	ldrh	r3, [r4, #12]
 800c668:	f043 0308 	orr.w	r3, r3, #8
 800c66c:	81a3      	strh	r3, [r4, #12]
 800c66e:	6923      	ldr	r3, [r4, #16]
 800c670:	b94b      	cbnz	r3, 800c686 <__swsetup_r+0x9a>
 800c672:	89a3      	ldrh	r3, [r4, #12]
 800c674:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c67c:	d003      	beq.n	800c686 <__swsetup_r+0x9a>
 800c67e:	4621      	mov	r1, r4
 800c680:	4630      	mov	r0, r6
 800c682:	f000 fa09 	bl	800ca98 <__smakebuf_r>
 800c686:	89a0      	ldrh	r0, [r4, #12]
 800c688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c68c:	f010 0301 	ands.w	r3, r0, #1
 800c690:	d00a      	beq.n	800c6a8 <__swsetup_r+0xbc>
 800c692:	2300      	movs	r3, #0
 800c694:	60a3      	str	r3, [r4, #8]
 800c696:	6963      	ldr	r3, [r4, #20]
 800c698:	425b      	negs	r3, r3
 800c69a:	61a3      	str	r3, [r4, #24]
 800c69c:	6923      	ldr	r3, [r4, #16]
 800c69e:	b943      	cbnz	r3, 800c6b2 <__swsetup_r+0xc6>
 800c6a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c6a4:	d1ba      	bne.n	800c61c <__swsetup_r+0x30>
 800c6a6:	bd70      	pop	{r4, r5, r6, pc}
 800c6a8:	0781      	lsls	r1, r0, #30
 800c6aa:	bf58      	it	pl
 800c6ac:	6963      	ldrpl	r3, [r4, #20]
 800c6ae:	60a3      	str	r3, [r4, #8]
 800c6b0:	e7f4      	b.n	800c69c <__swsetup_r+0xb0>
 800c6b2:	2000      	movs	r0, #0
 800c6b4:	e7f7      	b.n	800c6a6 <__swsetup_r+0xba>
 800c6b6:	bf00      	nop
 800c6b8:	2400001c 	.word	0x2400001c
 800c6bc:	0800d1dc 	.word	0x0800d1dc
 800c6c0:	0800d1fc 	.word	0x0800d1fc
 800c6c4:	0800d1bc 	.word	0x0800d1bc

0800c6c8 <abort>:
 800c6c8:	b508      	push	{r3, lr}
 800c6ca:	2006      	movs	r0, #6
 800c6cc:	f000 fa54 	bl	800cb78 <raise>
 800c6d0:	2001      	movs	r0, #1
 800c6d2:	f7f5 f961 	bl	8001998 <_exit>
	...

0800c6d8 <__sflush_r>:
 800c6d8:	898a      	ldrh	r2, [r1, #12]
 800c6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6de:	4605      	mov	r5, r0
 800c6e0:	0710      	lsls	r0, r2, #28
 800c6e2:	460c      	mov	r4, r1
 800c6e4:	d458      	bmi.n	800c798 <__sflush_r+0xc0>
 800c6e6:	684b      	ldr	r3, [r1, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	dc05      	bgt.n	800c6f8 <__sflush_r+0x20>
 800c6ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	dc02      	bgt.n	800c6f8 <__sflush_r+0x20>
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6fa:	2e00      	cmp	r6, #0
 800c6fc:	d0f9      	beq.n	800c6f2 <__sflush_r+0x1a>
 800c6fe:	2300      	movs	r3, #0
 800c700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c704:	682f      	ldr	r7, [r5, #0]
 800c706:	602b      	str	r3, [r5, #0]
 800c708:	d032      	beq.n	800c770 <__sflush_r+0x98>
 800c70a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	075a      	lsls	r2, r3, #29
 800c710:	d505      	bpl.n	800c71e <__sflush_r+0x46>
 800c712:	6863      	ldr	r3, [r4, #4]
 800c714:	1ac0      	subs	r0, r0, r3
 800c716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c718:	b10b      	cbz	r3, 800c71e <__sflush_r+0x46>
 800c71a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c71c:	1ac0      	subs	r0, r0, r3
 800c71e:	2300      	movs	r3, #0
 800c720:	4602      	mov	r2, r0
 800c722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c724:	6a21      	ldr	r1, [r4, #32]
 800c726:	4628      	mov	r0, r5
 800c728:	47b0      	blx	r6
 800c72a:	1c43      	adds	r3, r0, #1
 800c72c:	89a3      	ldrh	r3, [r4, #12]
 800c72e:	d106      	bne.n	800c73e <__sflush_r+0x66>
 800c730:	6829      	ldr	r1, [r5, #0]
 800c732:	291d      	cmp	r1, #29
 800c734:	d82c      	bhi.n	800c790 <__sflush_r+0xb8>
 800c736:	4a2a      	ldr	r2, [pc, #168]	; (800c7e0 <__sflush_r+0x108>)
 800c738:	40ca      	lsrs	r2, r1
 800c73a:	07d6      	lsls	r6, r2, #31
 800c73c:	d528      	bpl.n	800c790 <__sflush_r+0xb8>
 800c73e:	2200      	movs	r2, #0
 800c740:	6062      	str	r2, [r4, #4]
 800c742:	04d9      	lsls	r1, r3, #19
 800c744:	6922      	ldr	r2, [r4, #16]
 800c746:	6022      	str	r2, [r4, #0]
 800c748:	d504      	bpl.n	800c754 <__sflush_r+0x7c>
 800c74a:	1c42      	adds	r2, r0, #1
 800c74c:	d101      	bne.n	800c752 <__sflush_r+0x7a>
 800c74e:	682b      	ldr	r3, [r5, #0]
 800c750:	b903      	cbnz	r3, 800c754 <__sflush_r+0x7c>
 800c752:	6560      	str	r0, [r4, #84]	; 0x54
 800c754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c756:	602f      	str	r7, [r5, #0]
 800c758:	2900      	cmp	r1, #0
 800c75a:	d0ca      	beq.n	800c6f2 <__sflush_r+0x1a>
 800c75c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c760:	4299      	cmp	r1, r3
 800c762:	d002      	beq.n	800c76a <__sflush_r+0x92>
 800c764:	4628      	mov	r0, r5
 800c766:	f7ff fa99 	bl	800bc9c <_free_r>
 800c76a:	2000      	movs	r0, #0
 800c76c:	6360      	str	r0, [r4, #52]	; 0x34
 800c76e:	e7c1      	b.n	800c6f4 <__sflush_r+0x1c>
 800c770:	6a21      	ldr	r1, [r4, #32]
 800c772:	2301      	movs	r3, #1
 800c774:	4628      	mov	r0, r5
 800c776:	47b0      	blx	r6
 800c778:	1c41      	adds	r1, r0, #1
 800c77a:	d1c7      	bne.n	800c70c <__sflush_r+0x34>
 800c77c:	682b      	ldr	r3, [r5, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d0c4      	beq.n	800c70c <__sflush_r+0x34>
 800c782:	2b1d      	cmp	r3, #29
 800c784:	d001      	beq.n	800c78a <__sflush_r+0xb2>
 800c786:	2b16      	cmp	r3, #22
 800c788:	d101      	bne.n	800c78e <__sflush_r+0xb6>
 800c78a:	602f      	str	r7, [r5, #0]
 800c78c:	e7b1      	b.n	800c6f2 <__sflush_r+0x1a>
 800c78e:	89a3      	ldrh	r3, [r4, #12]
 800c790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c794:	81a3      	strh	r3, [r4, #12]
 800c796:	e7ad      	b.n	800c6f4 <__sflush_r+0x1c>
 800c798:	690f      	ldr	r7, [r1, #16]
 800c79a:	2f00      	cmp	r7, #0
 800c79c:	d0a9      	beq.n	800c6f2 <__sflush_r+0x1a>
 800c79e:	0793      	lsls	r3, r2, #30
 800c7a0:	680e      	ldr	r6, [r1, #0]
 800c7a2:	bf08      	it	eq
 800c7a4:	694b      	ldreq	r3, [r1, #20]
 800c7a6:	600f      	str	r7, [r1, #0]
 800c7a8:	bf18      	it	ne
 800c7aa:	2300      	movne	r3, #0
 800c7ac:	eba6 0807 	sub.w	r8, r6, r7
 800c7b0:	608b      	str	r3, [r1, #8]
 800c7b2:	f1b8 0f00 	cmp.w	r8, #0
 800c7b6:	dd9c      	ble.n	800c6f2 <__sflush_r+0x1a>
 800c7b8:	6a21      	ldr	r1, [r4, #32]
 800c7ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7bc:	4643      	mov	r3, r8
 800c7be:	463a      	mov	r2, r7
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	47b0      	blx	r6
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	dc06      	bgt.n	800c7d6 <__sflush_r+0xfe>
 800c7c8:	89a3      	ldrh	r3, [r4, #12]
 800c7ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7ce:	81a3      	strh	r3, [r4, #12]
 800c7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d4:	e78e      	b.n	800c6f4 <__sflush_r+0x1c>
 800c7d6:	4407      	add	r7, r0
 800c7d8:	eba8 0800 	sub.w	r8, r8, r0
 800c7dc:	e7e9      	b.n	800c7b2 <__sflush_r+0xda>
 800c7de:	bf00      	nop
 800c7e0:	20400001 	.word	0x20400001

0800c7e4 <_fflush_r>:
 800c7e4:	b538      	push	{r3, r4, r5, lr}
 800c7e6:	690b      	ldr	r3, [r1, #16]
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	460c      	mov	r4, r1
 800c7ec:	b913      	cbnz	r3, 800c7f4 <_fflush_r+0x10>
 800c7ee:	2500      	movs	r5, #0
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	bd38      	pop	{r3, r4, r5, pc}
 800c7f4:	b118      	cbz	r0, 800c7fe <_fflush_r+0x1a>
 800c7f6:	6983      	ldr	r3, [r0, #24]
 800c7f8:	b90b      	cbnz	r3, 800c7fe <_fflush_r+0x1a>
 800c7fa:	f000 f887 	bl	800c90c <__sinit>
 800c7fe:	4b14      	ldr	r3, [pc, #80]	; (800c850 <_fflush_r+0x6c>)
 800c800:	429c      	cmp	r4, r3
 800c802:	d11b      	bne.n	800c83c <_fflush_r+0x58>
 800c804:	686c      	ldr	r4, [r5, #4]
 800c806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d0ef      	beq.n	800c7ee <_fflush_r+0xa>
 800c80e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c810:	07d0      	lsls	r0, r2, #31
 800c812:	d404      	bmi.n	800c81e <_fflush_r+0x3a>
 800c814:	0599      	lsls	r1, r3, #22
 800c816:	d402      	bmi.n	800c81e <_fflush_r+0x3a>
 800c818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c81a:	f000 f915 	bl	800ca48 <__retarget_lock_acquire_recursive>
 800c81e:	4628      	mov	r0, r5
 800c820:	4621      	mov	r1, r4
 800c822:	f7ff ff59 	bl	800c6d8 <__sflush_r>
 800c826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c828:	07da      	lsls	r2, r3, #31
 800c82a:	4605      	mov	r5, r0
 800c82c:	d4e0      	bmi.n	800c7f0 <_fflush_r+0xc>
 800c82e:	89a3      	ldrh	r3, [r4, #12]
 800c830:	059b      	lsls	r3, r3, #22
 800c832:	d4dd      	bmi.n	800c7f0 <_fflush_r+0xc>
 800c834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c836:	f000 f908 	bl	800ca4a <__retarget_lock_release_recursive>
 800c83a:	e7d9      	b.n	800c7f0 <_fflush_r+0xc>
 800c83c:	4b05      	ldr	r3, [pc, #20]	; (800c854 <_fflush_r+0x70>)
 800c83e:	429c      	cmp	r4, r3
 800c840:	d101      	bne.n	800c846 <_fflush_r+0x62>
 800c842:	68ac      	ldr	r4, [r5, #8]
 800c844:	e7df      	b.n	800c806 <_fflush_r+0x22>
 800c846:	4b04      	ldr	r3, [pc, #16]	; (800c858 <_fflush_r+0x74>)
 800c848:	429c      	cmp	r4, r3
 800c84a:	bf08      	it	eq
 800c84c:	68ec      	ldreq	r4, [r5, #12]
 800c84e:	e7da      	b.n	800c806 <_fflush_r+0x22>
 800c850:	0800d1dc 	.word	0x0800d1dc
 800c854:	0800d1fc 	.word	0x0800d1fc
 800c858:	0800d1bc 	.word	0x0800d1bc

0800c85c <std>:
 800c85c:	2300      	movs	r3, #0
 800c85e:	b510      	push	{r4, lr}
 800c860:	4604      	mov	r4, r0
 800c862:	e9c0 3300 	strd	r3, r3, [r0]
 800c866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c86a:	6083      	str	r3, [r0, #8]
 800c86c:	8181      	strh	r1, [r0, #12]
 800c86e:	6643      	str	r3, [r0, #100]	; 0x64
 800c870:	81c2      	strh	r2, [r0, #14]
 800c872:	6183      	str	r3, [r0, #24]
 800c874:	4619      	mov	r1, r3
 800c876:	2208      	movs	r2, #8
 800c878:	305c      	adds	r0, #92	; 0x5c
 800c87a:	f7fb fed5 	bl	8008628 <memset>
 800c87e:	4b05      	ldr	r3, [pc, #20]	; (800c894 <std+0x38>)
 800c880:	6263      	str	r3, [r4, #36]	; 0x24
 800c882:	4b05      	ldr	r3, [pc, #20]	; (800c898 <std+0x3c>)
 800c884:	62a3      	str	r3, [r4, #40]	; 0x28
 800c886:	4b05      	ldr	r3, [pc, #20]	; (800c89c <std+0x40>)
 800c888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c88a:	4b05      	ldr	r3, [pc, #20]	; (800c8a0 <std+0x44>)
 800c88c:	6224      	str	r4, [r4, #32]
 800c88e:	6323      	str	r3, [r4, #48]	; 0x30
 800c890:	bd10      	pop	{r4, pc}
 800c892:	bf00      	nop
 800c894:	0800cbb1 	.word	0x0800cbb1
 800c898:	0800cbd3 	.word	0x0800cbd3
 800c89c:	0800cc0b 	.word	0x0800cc0b
 800c8a0:	0800cc2f 	.word	0x0800cc2f

0800c8a4 <_cleanup_r>:
 800c8a4:	4901      	ldr	r1, [pc, #4]	; (800c8ac <_cleanup_r+0x8>)
 800c8a6:	f000 b8af 	b.w	800ca08 <_fwalk_reent>
 800c8aa:	bf00      	nop
 800c8ac:	0800c7e5 	.word	0x0800c7e5

0800c8b0 <__sfmoreglue>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	2268      	movs	r2, #104	; 0x68
 800c8b4:	1e4d      	subs	r5, r1, #1
 800c8b6:	4355      	muls	r5, r2
 800c8b8:	460e      	mov	r6, r1
 800c8ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c8be:	f7ff fa59 	bl	800bd74 <_malloc_r>
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	b140      	cbz	r0, 800c8d8 <__sfmoreglue+0x28>
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	e9c0 1600 	strd	r1, r6, [r0]
 800c8cc:	300c      	adds	r0, #12
 800c8ce:	60a0      	str	r0, [r4, #8]
 800c8d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c8d4:	f7fb fea8 	bl	8008628 <memset>
 800c8d8:	4620      	mov	r0, r4
 800c8da:	bd70      	pop	{r4, r5, r6, pc}

0800c8dc <__sfp_lock_acquire>:
 800c8dc:	4801      	ldr	r0, [pc, #4]	; (800c8e4 <__sfp_lock_acquire+0x8>)
 800c8de:	f000 b8b3 	b.w	800ca48 <__retarget_lock_acquire_recursive>
 800c8e2:	bf00      	nop
 800c8e4:	24000471 	.word	0x24000471

0800c8e8 <__sfp_lock_release>:
 800c8e8:	4801      	ldr	r0, [pc, #4]	; (800c8f0 <__sfp_lock_release+0x8>)
 800c8ea:	f000 b8ae 	b.w	800ca4a <__retarget_lock_release_recursive>
 800c8ee:	bf00      	nop
 800c8f0:	24000471 	.word	0x24000471

0800c8f4 <__sinit_lock_acquire>:
 800c8f4:	4801      	ldr	r0, [pc, #4]	; (800c8fc <__sinit_lock_acquire+0x8>)
 800c8f6:	f000 b8a7 	b.w	800ca48 <__retarget_lock_acquire_recursive>
 800c8fa:	bf00      	nop
 800c8fc:	24000472 	.word	0x24000472

0800c900 <__sinit_lock_release>:
 800c900:	4801      	ldr	r0, [pc, #4]	; (800c908 <__sinit_lock_release+0x8>)
 800c902:	f000 b8a2 	b.w	800ca4a <__retarget_lock_release_recursive>
 800c906:	bf00      	nop
 800c908:	24000472 	.word	0x24000472

0800c90c <__sinit>:
 800c90c:	b510      	push	{r4, lr}
 800c90e:	4604      	mov	r4, r0
 800c910:	f7ff fff0 	bl	800c8f4 <__sinit_lock_acquire>
 800c914:	69a3      	ldr	r3, [r4, #24]
 800c916:	b11b      	cbz	r3, 800c920 <__sinit+0x14>
 800c918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c91c:	f7ff bff0 	b.w	800c900 <__sinit_lock_release>
 800c920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c924:	6523      	str	r3, [r4, #80]	; 0x50
 800c926:	4b13      	ldr	r3, [pc, #76]	; (800c974 <__sinit+0x68>)
 800c928:	4a13      	ldr	r2, [pc, #76]	; (800c978 <__sinit+0x6c>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c92e:	42a3      	cmp	r3, r4
 800c930:	bf04      	itt	eq
 800c932:	2301      	moveq	r3, #1
 800c934:	61a3      	streq	r3, [r4, #24]
 800c936:	4620      	mov	r0, r4
 800c938:	f000 f820 	bl	800c97c <__sfp>
 800c93c:	6060      	str	r0, [r4, #4]
 800c93e:	4620      	mov	r0, r4
 800c940:	f000 f81c 	bl	800c97c <__sfp>
 800c944:	60a0      	str	r0, [r4, #8]
 800c946:	4620      	mov	r0, r4
 800c948:	f000 f818 	bl	800c97c <__sfp>
 800c94c:	2200      	movs	r2, #0
 800c94e:	60e0      	str	r0, [r4, #12]
 800c950:	2104      	movs	r1, #4
 800c952:	6860      	ldr	r0, [r4, #4]
 800c954:	f7ff ff82 	bl	800c85c <std>
 800c958:	68a0      	ldr	r0, [r4, #8]
 800c95a:	2201      	movs	r2, #1
 800c95c:	2109      	movs	r1, #9
 800c95e:	f7ff ff7d 	bl	800c85c <std>
 800c962:	68e0      	ldr	r0, [r4, #12]
 800c964:	2202      	movs	r2, #2
 800c966:	2112      	movs	r1, #18
 800c968:	f7ff ff78 	bl	800c85c <std>
 800c96c:	2301      	movs	r3, #1
 800c96e:	61a3      	str	r3, [r4, #24]
 800c970:	e7d2      	b.n	800c918 <__sinit+0xc>
 800c972:	bf00      	nop
 800c974:	0800cd74 	.word	0x0800cd74
 800c978:	0800c8a5 	.word	0x0800c8a5

0800c97c <__sfp>:
 800c97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97e:	4607      	mov	r7, r0
 800c980:	f7ff ffac 	bl	800c8dc <__sfp_lock_acquire>
 800c984:	4b1e      	ldr	r3, [pc, #120]	; (800ca00 <__sfp+0x84>)
 800c986:	681e      	ldr	r6, [r3, #0]
 800c988:	69b3      	ldr	r3, [r6, #24]
 800c98a:	b913      	cbnz	r3, 800c992 <__sfp+0x16>
 800c98c:	4630      	mov	r0, r6
 800c98e:	f7ff ffbd 	bl	800c90c <__sinit>
 800c992:	3648      	adds	r6, #72	; 0x48
 800c994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c998:	3b01      	subs	r3, #1
 800c99a:	d503      	bpl.n	800c9a4 <__sfp+0x28>
 800c99c:	6833      	ldr	r3, [r6, #0]
 800c99e:	b30b      	cbz	r3, 800c9e4 <__sfp+0x68>
 800c9a0:	6836      	ldr	r6, [r6, #0]
 800c9a2:	e7f7      	b.n	800c994 <__sfp+0x18>
 800c9a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c9a8:	b9d5      	cbnz	r5, 800c9e0 <__sfp+0x64>
 800c9aa:	4b16      	ldr	r3, [pc, #88]	; (800ca04 <__sfp+0x88>)
 800c9ac:	60e3      	str	r3, [r4, #12]
 800c9ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c9b2:	6665      	str	r5, [r4, #100]	; 0x64
 800c9b4:	f000 f847 	bl	800ca46 <__retarget_lock_init_recursive>
 800c9b8:	f7ff ff96 	bl	800c8e8 <__sfp_lock_release>
 800c9bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c9c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c9c4:	6025      	str	r5, [r4, #0]
 800c9c6:	61a5      	str	r5, [r4, #24]
 800c9c8:	2208      	movs	r2, #8
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c9d0:	f7fb fe2a 	bl	8008628 <memset>
 800c9d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c9d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c9dc:	4620      	mov	r0, r4
 800c9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e0:	3468      	adds	r4, #104	; 0x68
 800c9e2:	e7d9      	b.n	800c998 <__sfp+0x1c>
 800c9e4:	2104      	movs	r1, #4
 800c9e6:	4638      	mov	r0, r7
 800c9e8:	f7ff ff62 	bl	800c8b0 <__sfmoreglue>
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	6030      	str	r0, [r6, #0]
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	d1d5      	bne.n	800c9a0 <__sfp+0x24>
 800c9f4:	f7ff ff78 	bl	800c8e8 <__sfp_lock_release>
 800c9f8:	230c      	movs	r3, #12
 800c9fa:	603b      	str	r3, [r7, #0]
 800c9fc:	e7ee      	b.n	800c9dc <__sfp+0x60>
 800c9fe:	bf00      	nop
 800ca00:	0800cd74 	.word	0x0800cd74
 800ca04:	ffff0001 	.word	0xffff0001

0800ca08 <_fwalk_reent>:
 800ca08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	4688      	mov	r8, r1
 800ca10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca14:	2700      	movs	r7, #0
 800ca16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ca1e:	d505      	bpl.n	800ca2c <_fwalk_reent+0x24>
 800ca20:	6824      	ldr	r4, [r4, #0]
 800ca22:	2c00      	cmp	r4, #0
 800ca24:	d1f7      	bne.n	800ca16 <_fwalk_reent+0xe>
 800ca26:	4638      	mov	r0, r7
 800ca28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca2c:	89ab      	ldrh	r3, [r5, #12]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d907      	bls.n	800ca42 <_fwalk_reent+0x3a>
 800ca32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca36:	3301      	adds	r3, #1
 800ca38:	d003      	beq.n	800ca42 <_fwalk_reent+0x3a>
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	47c0      	blx	r8
 800ca40:	4307      	orrs	r7, r0
 800ca42:	3568      	adds	r5, #104	; 0x68
 800ca44:	e7e9      	b.n	800ca1a <_fwalk_reent+0x12>

0800ca46 <__retarget_lock_init_recursive>:
 800ca46:	4770      	bx	lr

0800ca48 <__retarget_lock_acquire_recursive>:
 800ca48:	4770      	bx	lr

0800ca4a <__retarget_lock_release_recursive>:
 800ca4a:	4770      	bx	lr

0800ca4c <__swhatbuf_r>:
 800ca4c:	b570      	push	{r4, r5, r6, lr}
 800ca4e:	460e      	mov	r6, r1
 800ca50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca54:	2900      	cmp	r1, #0
 800ca56:	b096      	sub	sp, #88	; 0x58
 800ca58:	4614      	mov	r4, r2
 800ca5a:	461d      	mov	r5, r3
 800ca5c:	da08      	bge.n	800ca70 <__swhatbuf_r+0x24>
 800ca5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca62:	2200      	movs	r2, #0
 800ca64:	602a      	str	r2, [r5, #0]
 800ca66:	061a      	lsls	r2, r3, #24
 800ca68:	d410      	bmi.n	800ca8c <__swhatbuf_r+0x40>
 800ca6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca6e:	e00e      	b.n	800ca8e <__swhatbuf_r+0x42>
 800ca70:	466a      	mov	r2, sp
 800ca72:	f000 f903 	bl	800cc7c <_fstat_r>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	dbf1      	blt.n	800ca5e <__swhatbuf_r+0x12>
 800ca7a:	9a01      	ldr	r2, [sp, #4]
 800ca7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca84:	425a      	negs	r2, r3
 800ca86:	415a      	adcs	r2, r3
 800ca88:	602a      	str	r2, [r5, #0]
 800ca8a:	e7ee      	b.n	800ca6a <__swhatbuf_r+0x1e>
 800ca8c:	2340      	movs	r3, #64	; 0x40
 800ca8e:	2000      	movs	r0, #0
 800ca90:	6023      	str	r3, [r4, #0]
 800ca92:	b016      	add	sp, #88	; 0x58
 800ca94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca98 <__smakebuf_r>:
 800ca98:	898b      	ldrh	r3, [r1, #12]
 800ca9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca9c:	079d      	lsls	r5, r3, #30
 800ca9e:	4606      	mov	r6, r0
 800caa0:	460c      	mov	r4, r1
 800caa2:	d507      	bpl.n	800cab4 <__smakebuf_r+0x1c>
 800caa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800caa8:	6023      	str	r3, [r4, #0]
 800caaa:	6123      	str	r3, [r4, #16]
 800caac:	2301      	movs	r3, #1
 800caae:	6163      	str	r3, [r4, #20]
 800cab0:	b002      	add	sp, #8
 800cab2:	bd70      	pop	{r4, r5, r6, pc}
 800cab4:	ab01      	add	r3, sp, #4
 800cab6:	466a      	mov	r2, sp
 800cab8:	f7ff ffc8 	bl	800ca4c <__swhatbuf_r>
 800cabc:	9900      	ldr	r1, [sp, #0]
 800cabe:	4605      	mov	r5, r0
 800cac0:	4630      	mov	r0, r6
 800cac2:	f7ff f957 	bl	800bd74 <_malloc_r>
 800cac6:	b948      	cbnz	r0, 800cadc <__smakebuf_r+0x44>
 800cac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cacc:	059a      	lsls	r2, r3, #22
 800cace:	d4ef      	bmi.n	800cab0 <__smakebuf_r+0x18>
 800cad0:	f023 0303 	bic.w	r3, r3, #3
 800cad4:	f043 0302 	orr.w	r3, r3, #2
 800cad8:	81a3      	strh	r3, [r4, #12]
 800cada:	e7e3      	b.n	800caa4 <__smakebuf_r+0xc>
 800cadc:	4b0d      	ldr	r3, [pc, #52]	; (800cb14 <__smakebuf_r+0x7c>)
 800cade:	62b3      	str	r3, [r6, #40]	; 0x28
 800cae0:	89a3      	ldrh	r3, [r4, #12]
 800cae2:	6020      	str	r0, [r4, #0]
 800cae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cae8:	81a3      	strh	r3, [r4, #12]
 800caea:	9b00      	ldr	r3, [sp, #0]
 800caec:	6163      	str	r3, [r4, #20]
 800caee:	9b01      	ldr	r3, [sp, #4]
 800caf0:	6120      	str	r0, [r4, #16]
 800caf2:	b15b      	cbz	r3, 800cb0c <__smakebuf_r+0x74>
 800caf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caf8:	4630      	mov	r0, r6
 800cafa:	f000 f8d1 	bl	800cca0 <_isatty_r>
 800cafe:	b128      	cbz	r0, 800cb0c <__smakebuf_r+0x74>
 800cb00:	89a3      	ldrh	r3, [r4, #12]
 800cb02:	f023 0303 	bic.w	r3, r3, #3
 800cb06:	f043 0301 	orr.w	r3, r3, #1
 800cb0a:	81a3      	strh	r3, [r4, #12]
 800cb0c:	89a0      	ldrh	r0, [r4, #12]
 800cb0e:	4305      	orrs	r5, r0
 800cb10:	81a5      	strh	r5, [r4, #12]
 800cb12:	e7cd      	b.n	800cab0 <__smakebuf_r+0x18>
 800cb14:	0800c8a5 	.word	0x0800c8a5

0800cb18 <_malloc_usable_size_r>:
 800cb18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb1c:	1f18      	subs	r0, r3, #4
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	bfbc      	itt	lt
 800cb22:	580b      	ldrlt	r3, [r1, r0]
 800cb24:	18c0      	addlt	r0, r0, r3
 800cb26:	4770      	bx	lr

0800cb28 <_raise_r>:
 800cb28:	291f      	cmp	r1, #31
 800cb2a:	b538      	push	{r3, r4, r5, lr}
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	460d      	mov	r5, r1
 800cb30:	d904      	bls.n	800cb3c <_raise_r+0x14>
 800cb32:	2316      	movs	r3, #22
 800cb34:	6003      	str	r3, [r0, #0]
 800cb36:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3a:	bd38      	pop	{r3, r4, r5, pc}
 800cb3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb3e:	b112      	cbz	r2, 800cb46 <_raise_r+0x1e>
 800cb40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb44:	b94b      	cbnz	r3, 800cb5a <_raise_r+0x32>
 800cb46:	4620      	mov	r0, r4
 800cb48:	f000 f830 	bl	800cbac <_getpid_r>
 800cb4c:	462a      	mov	r2, r5
 800cb4e:	4601      	mov	r1, r0
 800cb50:	4620      	mov	r0, r4
 800cb52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb56:	f000 b817 	b.w	800cb88 <_kill_r>
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d00a      	beq.n	800cb74 <_raise_r+0x4c>
 800cb5e:	1c59      	adds	r1, r3, #1
 800cb60:	d103      	bne.n	800cb6a <_raise_r+0x42>
 800cb62:	2316      	movs	r3, #22
 800cb64:	6003      	str	r3, [r0, #0]
 800cb66:	2001      	movs	r0, #1
 800cb68:	e7e7      	b.n	800cb3a <_raise_r+0x12>
 800cb6a:	2400      	movs	r4, #0
 800cb6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb70:	4628      	mov	r0, r5
 800cb72:	4798      	blx	r3
 800cb74:	2000      	movs	r0, #0
 800cb76:	e7e0      	b.n	800cb3a <_raise_r+0x12>

0800cb78 <raise>:
 800cb78:	4b02      	ldr	r3, [pc, #8]	; (800cb84 <raise+0xc>)
 800cb7a:	4601      	mov	r1, r0
 800cb7c:	6818      	ldr	r0, [r3, #0]
 800cb7e:	f7ff bfd3 	b.w	800cb28 <_raise_r>
 800cb82:	bf00      	nop
 800cb84:	2400001c 	.word	0x2400001c

0800cb88 <_kill_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	4d07      	ldr	r5, [pc, #28]	; (800cba8 <_kill_r+0x20>)
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	4604      	mov	r4, r0
 800cb90:	4608      	mov	r0, r1
 800cb92:	4611      	mov	r1, r2
 800cb94:	602b      	str	r3, [r5, #0]
 800cb96:	f7f4 feef 	bl	8001978 <_kill>
 800cb9a:	1c43      	adds	r3, r0, #1
 800cb9c:	d102      	bne.n	800cba4 <_kill_r+0x1c>
 800cb9e:	682b      	ldr	r3, [r5, #0]
 800cba0:	b103      	cbz	r3, 800cba4 <_kill_r+0x1c>
 800cba2:	6023      	str	r3, [r4, #0]
 800cba4:	bd38      	pop	{r3, r4, r5, pc}
 800cba6:	bf00      	nop
 800cba8:	2400046c 	.word	0x2400046c

0800cbac <_getpid_r>:
 800cbac:	f7f4 bedc 	b.w	8001968 <_getpid>

0800cbb0 <__sread>:
 800cbb0:	b510      	push	{r4, lr}
 800cbb2:	460c      	mov	r4, r1
 800cbb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb8:	f000 f894 	bl	800cce4 <_read_r>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	bfab      	itete	ge
 800cbc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbc2:	89a3      	ldrhlt	r3, [r4, #12]
 800cbc4:	181b      	addge	r3, r3, r0
 800cbc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbca:	bfac      	ite	ge
 800cbcc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cbce:	81a3      	strhlt	r3, [r4, #12]
 800cbd0:	bd10      	pop	{r4, pc}

0800cbd2 <__swrite>:
 800cbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd6:	461f      	mov	r7, r3
 800cbd8:	898b      	ldrh	r3, [r1, #12]
 800cbda:	05db      	lsls	r3, r3, #23
 800cbdc:	4605      	mov	r5, r0
 800cbde:	460c      	mov	r4, r1
 800cbe0:	4616      	mov	r6, r2
 800cbe2:	d505      	bpl.n	800cbf0 <__swrite+0x1e>
 800cbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe8:	2302      	movs	r3, #2
 800cbea:	2200      	movs	r2, #0
 800cbec:	f000 f868 	bl	800ccc0 <_lseek_r>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbfa:	81a3      	strh	r3, [r4, #12]
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	463b      	mov	r3, r7
 800cc00:	4628      	mov	r0, r5
 800cc02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc06:	f000 b817 	b.w	800cc38 <_write_r>

0800cc0a <__sseek>:
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	460c      	mov	r4, r1
 800cc0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc12:	f000 f855 	bl	800ccc0 <_lseek_r>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	bf15      	itete	ne
 800cc1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc26:	81a3      	strheq	r3, [r4, #12]
 800cc28:	bf18      	it	ne
 800cc2a:	81a3      	strhne	r3, [r4, #12]
 800cc2c:	bd10      	pop	{r4, pc}

0800cc2e <__sclose>:
 800cc2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc32:	f000 b813 	b.w	800cc5c <_close_r>
	...

0800cc38 <_write_r>:
 800cc38:	b538      	push	{r3, r4, r5, lr}
 800cc3a:	4d07      	ldr	r5, [pc, #28]	; (800cc58 <_write_r+0x20>)
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	4608      	mov	r0, r1
 800cc40:	4611      	mov	r1, r2
 800cc42:	2200      	movs	r2, #0
 800cc44:	602a      	str	r2, [r5, #0]
 800cc46:	461a      	mov	r2, r3
 800cc48:	f7f4 fecd 	bl	80019e6 <_write>
 800cc4c:	1c43      	adds	r3, r0, #1
 800cc4e:	d102      	bne.n	800cc56 <_write_r+0x1e>
 800cc50:	682b      	ldr	r3, [r5, #0]
 800cc52:	b103      	cbz	r3, 800cc56 <_write_r+0x1e>
 800cc54:	6023      	str	r3, [r4, #0]
 800cc56:	bd38      	pop	{r3, r4, r5, pc}
 800cc58:	2400046c 	.word	0x2400046c

0800cc5c <_close_r>:
 800cc5c:	b538      	push	{r3, r4, r5, lr}
 800cc5e:	4d06      	ldr	r5, [pc, #24]	; (800cc78 <_close_r+0x1c>)
 800cc60:	2300      	movs	r3, #0
 800cc62:	4604      	mov	r4, r0
 800cc64:	4608      	mov	r0, r1
 800cc66:	602b      	str	r3, [r5, #0]
 800cc68:	f7f4 fed9 	bl	8001a1e <_close>
 800cc6c:	1c43      	adds	r3, r0, #1
 800cc6e:	d102      	bne.n	800cc76 <_close_r+0x1a>
 800cc70:	682b      	ldr	r3, [r5, #0]
 800cc72:	b103      	cbz	r3, 800cc76 <_close_r+0x1a>
 800cc74:	6023      	str	r3, [r4, #0]
 800cc76:	bd38      	pop	{r3, r4, r5, pc}
 800cc78:	2400046c 	.word	0x2400046c

0800cc7c <_fstat_r>:
 800cc7c:	b538      	push	{r3, r4, r5, lr}
 800cc7e:	4d07      	ldr	r5, [pc, #28]	; (800cc9c <_fstat_r+0x20>)
 800cc80:	2300      	movs	r3, #0
 800cc82:	4604      	mov	r4, r0
 800cc84:	4608      	mov	r0, r1
 800cc86:	4611      	mov	r1, r2
 800cc88:	602b      	str	r3, [r5, #0]
 800cc8a:	f7f4 fed4 	bl	8001a36 <_fstat>
 800cc8e:	1c43      	adds	r3, r0, #1
 800cc90:	d102      	bne.n	800cc98 <_fstat_r+0x1c>
 800cc92:	682b      	ldr	r3, [r5, #0]
 800cc94:	b103      	cbz	r3, 800cc98 <_fstat_r+0x1c>
 800cc96:	6023      	str	r3, [r4, #0]
 800cc98:	bd38      	pop	{r3, r4, r5, pc}
 800cc9a:	bf00      	nop
 800cc9c:	2400046c 	.word	0x2400046c

0800cca0 <_isatty_r>:
 800cca0:	b538      	push	{r3, r4, r5, lr}
 800cca2:	4d06      	ldr	r5, [pc, #24]	; (800ccbc <_isatty_r+0x1c>)
 800cca4:	2300      	movs	r3, #0
 800cca6:	4604      	mov	r4, r0
 800cca8:	4608      	mov	r0, r1
 800ccaa:	602b      	str	r3, [r5, #0]
 800ccac:	f7f4 fed3 	bl	8001a56 <_isatty>
 800ccb0:	1c43      	adds	r3, r0, #1
 800ccb2:	d102      	bne.n	800ccba <_isatty_r+0x1a>
 800ccb4:	682b      	ldr	r3, [r5, #0]
 800ccb6:	b103      	cbz	r3, 800ccba <_isatty_r+0x1a>
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	bd38      	pop	{r3, r4, r5, pc}
 800ccbc:	2400046c 	.word	0x2400046c

0800ccc0 <_lseek_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4d07      	ldr	r5, [pc, #28]	; (800cce0 <_lseek_r+0x20>)
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	4608      	mov	r0, r1
 800ccc8:	4611      	mov	r1, r2
 800ccca:	2200      	movs	r2, #0
 800cccc:	602a      	str	r2, [r5, #0]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	f7f4 fecc 	bl	8001a6c <_lseek>
 800ccd4:	1c43      	adds	r3, r0, #1
 800ccd6:	d102      	bne.n	800ccde <_lseek_r+0x1e>
 800ccd8:	682b      	ldr	r3, [r5, #0]
 800ccda:	b103      	cbz	r3, 800ccde <_lseek_r+0x1e>
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	bd38      	pop	{r3, r4, r5, pc}
 800cce0:	2400046c 	.word	0x2400046c

0800cce4 <_read_r>:
 800cce4:	b538      	push	{r3, r4, r5, lr}
 800cce6:	4d07      	ldr	r5, [pc, #28]	; (800cd04 <_read_r+0x20>)
 800cce8:	4604      	mov	r4, r0
 800ccea:	4608      	mov	r0, r1
 800ccec:	4611      	mov	r1, r2
 800ccee:	2200      	movs	r2, #0
 800ccf0:	602a      	str	r2, [r5, #0]
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	f7f4 fe5a 	bl	80019ac <_read>
 800ccf8:	1c43      	adds	r3, r0, #1
 800ccfa:	d102      	bne.n	800cd02 <_read_r+0x1e>
 800ccfc:	682b      	ldr	r3, [r5, #0]
 800ccfe:	b103      	cbz	r3, 800cd02 <_read_r+0x1e>
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	bd38      	pop	{r3, r4, r5, pc}
 800cd04:	2400046c 	.word	0x2400046c

0800cd08 <_init>:
 800cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0a:	bf00      	nop
 800cd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd0e:	bc08      	pop	{r3}
 800cd10:	469e      	mov	lr, r3
 800cd12:	4770      	bx	lr

0800cd14 <_fini>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	bf00      	nop
 800cd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1a:	bc08      	pop	{r3}
 800cd1c:	469e      	mov	lr, r3
 800cd1e:	4770      	bx	lr
