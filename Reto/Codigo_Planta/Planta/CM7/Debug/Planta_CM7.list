
Planta_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc40  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800cee0  0800cee0  0001cee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d40c  0800d40c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d40c  0800d40c  0001d40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d414  0800d414  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d414  0800d414  0001d414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d418  0800d418  0001d418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  24000000  0800d41c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  240001fc  0800d618  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000498  0800d618  00020498  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c141  00000000  00000000  0002022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303b  00000000  00000000  0003c36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  000408c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bb38  00000000  00000000  00041ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b624  00000000  00000000  0007d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186c10  00000000  00000000  00098dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021fa0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d3c  00000000  00000000  0021fa5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001fc 	.word	0x240001fc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cec8 	.word	0x0800cec8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000200 	.word	0x24000200
 80002dc:	0800cec8 	.word	0x0800cec8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemInit+0xfc>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <SystemInit+0xfc>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0xfc>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <SystemInit+0xfc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0x100>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d807      	bhi.n	8000ab8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x100>)
 8000ab2:	f043 0307 	orr.w	r3, r3, #7
 8000ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemInit+0x104>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x104>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	492c      	ldr	r1, [pc, #176]	; (8000b80 <SystemInit+0x104>)
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemInit+0x108>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemInit+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemInit+0x100>)
 8000aec:	f043 0307 	orr.w	r3, r3, #7
 8000af0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x104>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemInit+0x10c>)
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x104>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <SystemInit+0x110>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x104>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemInit+0x114>)
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x104>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0x114>)
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x104>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SystemInit+0x114>)
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0x104>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0x104>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x118>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x118>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SystemInit+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x120>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d202      	bcs.n	8000b66 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x124>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x128>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	580000c0 	.word	0x580000c0
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bb4:	bf00      	nop
 8000bb6:	4b3f      	ldr	r3, [pc, #252]	; (8000cb4 <main+0x10c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <main+0x24>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dcf4      	bgt.n	8000bb6 <main+0xe>
  if ( timeout < 0 )
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da01      	bge.n	8000bd6 <main+0x2e>
  {
  Error_Handler();
 8000bd2:	f000 fc8b 	bl	80014ec <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f001 f8c7 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f87f 	bl	8000cdc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bde:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <main+0x10c>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a33      	ldr	r2, [pc, #204]	; (8000cb4 <main+0x10c>)
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <main+0x10c>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f001 fc4f 	bl	80024a0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f001 fc65 	bl	80024d4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c10:	bf00      	nop
 8000c12:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <main+0x10c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d104      	bne.n	8000c28 <main+0x80>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dcf4      	bgt.n	8000c12 <main+0x6a>
if ( timeout < 0 )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da01      	bge.n	8000c32 <main+0x8a>
{
Error_Handler();
 8000c2e:	f000 fc5d 	bl	80014ec <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c32:	f000 faef 	bl	8001214 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c36:	f000 faa1 	bl	800117c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000c3a:	f000 f9b5 	bl	8000fa8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000c3e:	f000 fa4f 	bl	80010e0 <MX_TIM5_Init>
  MX_I2C4_Init();
 8000c42:	f000 f8c5 	bl	8000dd0 <MX_I2C4_Init>
  MX_TIM1_Init();
 8000c46:	f000 f903 	bl	8000e50 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c4a:	f000 f9fb 	bl	8001044 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  print_int(&huart3, "PROYECTO FINAL ROBOGOD\r\n", 0);	// Prueba de comunicación UART
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4919      	ldr	r1, [pc, #100]	; (8000cb8 <main+0x110>)
 8000c52:	481a      	ldr	r0, [pc, #104]	; (8000cbc <main+0x114>)
 8000c54:	f001 f81c 	bl	8001c90 <print_int>

  MPRLS_status(&hi2c4);									// Revisión de conexión del MPRLS
 8000c58:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <main+0x118>)
 8000c5a:	f000 fc4d 	bl	80014f8 <MPRLS_status>
  MPRLS_init(&hi2c4);									// Inicialización del MPRLS
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <main+0x118>)
 8000c60:	f000 fc66 	bl	8001530 <MPRLS_init>

  MPU6050_status(&hi2c4); 								// Revisión de conexión del MPU6050
 8000c64:	4816      	ldr	r0, [pc, #88]	; (8000cc0 <main+0x118>)
 8000c66:	f000 fd0d 	bl	8001684 <MPU6050_status>
  MPU6050_init(&hi2c4);									// Inicialización del MPU6050
 8000c6a:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <main+0x118>)
 8000c6c:	f000 fd26 	bl	80016bc <MPU6050_init>

  HAL_TIM_Base_Start(&htim5); 							// Inicialización del timer 5 (cronómetro)
 8000c70:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <main+0x11c>)
 8000c72:	f005 f97f 	bl	8005f74 <HAL_TIM_Base_Start>

  HAL_Delay(2000);										// Delay 2s
 8000c76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c7a:	f001 f907 	bl	8001e8c <HAL_Delay>

  HAL_TIM_PWM_Init(&htim1);								// Inicialización del timer 1 (PWM)
 8000c7e:	4812      	ldr	r0, [pc, #72]	; (8000cc8 <main+0x120>)
 8000c80:	f005 fa60 	bl	8006144 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);				// Encendido del PWM
 8000c84:	2100      	movs	r1, #0
 8000c86:	4810      	ldr	r0, [pc, #64]	; (8000cc8 <main+0x120>)
 8000c88:	f005 fabe 	bl	8006208 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;										// Duty Cycle del 100%
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <main+0x124>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	635a      	str	r2, [r3, #52]	; 0x34

  // Entradas de polaridad del L298N
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);			// In 1
 8000c92:	2201      	movs	r2, #1
 8000c94:	2101      	movs	r1, #1
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <main+0x128>)
 8000c98:	f001 fbe8 	bl	800246c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);			// In 2
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <main+0x128>)
 8000ca2:	f001 fbe3 	bl	800246c <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);						// Inicialización del timer 2 (interrupción 128 Hz)
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <main+0x12c>)
 8000ca8:	f005 f9d4 	bl	8006054 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);						// Inicialización del timer 3 (interrupción 100 Hz)
 8000cac:	480a      	ldr	r0, [pc, #40]	; (8000cd8 <main+0x130>)
 8000cae:	f005 f9d1 	bl	8006054 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <main+0x10a>
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	0800cee0 	.word	0x0800cee0
 8000cbc:	24000394 	.word	0x24000394
 8000cc0:	24000218 	.word	0x24000218
 8000cc4:	24000348 	.word	0x24000348
 8000cc8:	24000264 	.word	0x24000264
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	58020c00 	.word	0x58020c00
 8000cd4:	240002b0 	.word	0x240002b0
 8000cd8:	240002fc 	.word	0x240002fc

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09c      	sub	sp, #112	; 0x70
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	224c      	movs	r2, #76	; 0x4c
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f007 fd7c 	bl	80087e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f007 fd76 	bl	80087e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cfc:	2004      	movs	r0, #4
 8000cfe:	f002 fd65 	bl	80037cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <SystemClock_Config+0xec>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <SystemClock_Config+0xec>)
 8000d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <SystemClock_Config+0xec>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <SystemClock_Config+0xf0>)
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <SystemClock_Config+0xf0>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <SystemClock_Config+0xf0>)
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d34:	bf00      	nop
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <SystemClock_Config+0xec>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d42:	d1f8      	bne.n	8000d36 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d44:	2301      	movs	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d48:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d52:	2302      	movs	r3, #2
 8000d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000d5a:	2378      	movs	r3, #120	; 0x78
 8000d5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 fd80 	bl	8003880 <HAL_RCC_OscConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d86:	f000 fbb1 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	233f      	movs	r3, #63	; 0x3f
 8000d8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d96:	2308      	movs	r3, #8
 8000d98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d9a:	2340      	movs	r3, #64	; 0x40
 8000d9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d9e:	2340      	movs	r3, #64	; 0x40
 8000da0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000da8:	2340      	movs	r3, #64	; 0x40
 8000daa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2104      	movs	r1, #4
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 f993 	bl	80040dc <HAL_RCC_ClockConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000dbc:	f000 fb96 	bl	80014ec <Error_Handler>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3770      	adds	r7, #112	; 0x70
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	58024800 	.word	0x58024800
 8000dcc:	58000400 	.word	0x58000400

08000dd0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <MX_I2C4_Init+0x78>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <MX_I2C4_Init+0x7c>)
 8000dde:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e0a:	480e      	ldr	r0, [pc, #56]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000e0c:	f001 fb76 	bl	80024fc <HAL_I2C_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e16:	f000 fb69 	bl	80014ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000e1e:	f002 fc3d 	bl	800369c <HAL_I2CEx_ConfigAnalogFilter>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e28:	f000 fb60 	bl	80014ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_I2C4_Init+0x74>)
 8000e30:	f002 fc7f 	bl	8003732 <HAL_I2CEx_ConfigDigitalFilter>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e3a:	f000 fb57 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	24000218 	.word	0x24000218
 8000e48:	58001c00 	.word	0x58001c00
 8000e4c:	307075b1 	.word	0x307075b1

08000e50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b09a      	sub	sp, #104	; 0x68
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	222c      	movs	r2, #44	; 0x2c
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f007 fcac 	bl	80087e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e90:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000e92:	4a44      	ldr	r2, [pc, #272]	; (8000fa4 <MX_TIM1_Init+0x154>)
 8000e94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240 - 1;
 8000e96:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000e98:	22ef      	movs	r2, #239	; 0xef
 8000e9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000ea4:	2264      	movs	r2, #100	; 0x64
 8000ea6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eae:	4b3c      	ldr	r3, [pc, #240]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb4:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eba:	4839      	ldr	r0, [pc, #228]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000ebc:	f005 f802 	bl	8005ec4 <HAL_TIM_Base_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ec6:	f000 fb11 	bl	80014ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ece:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ed0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4832      	ldr	r0, [pc, #200]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000ed8:	f005 fcd8 	bl	800688c <HAL_TIM_ConfigClockSource>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ee2:	f000 fb03 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ee6:	482e      	ldr	r0, [pc, #184]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000ee8:	f005 f92c 	bl	8006144 <HAL_TIM_PWM_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ef2:	f000 fafb 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f06:	4619      	mov	r1, r3
 8000f08:	4825      	ldr	r0, [pc, #148]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000f0a:	f006 fa13 	bl	8007334 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000f14:	f000 faea 	bl	80014ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f18:	2360      	movs	r3, #96	; 0x60
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f20:	2300      	movs	r3, #0
 8000f22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f24:	2300      	movs	r3, #0
 8000f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000f3e:	f005 fb91 	bl	8006664 <HAL_TIM_PWM_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000f48:	f000 fad0 	bl	80014ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000f82:	f006 fa65 	bl	8007450 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000f8c:	f000 faae 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000f92:	f000 fcd7 	bl	8001944 <HAL_TIM_MspPostInit>

}
 8000f96:	bf00      	nop
 8000f98:	3768      	adds	r7, #104	; 0x68
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	24000264 	.word	0x24000264
 8000fa4:	40010000 	.word	0x40010000

08000fa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240 - 1;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fd0:	22ef      	movs	r2, #239	; 0xef
 8000fd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7813 - 1;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fdc:	f641 6284 	movw	r2, #7812	; 0x1e84
 8000fe0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <MX_TIM2_Init+0x98>)
 8000ff0:	f004 ff68 	bl	8005ec4 <HAL_TIM_Base_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ffa:	f000 fa77 	bl	80014ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_TIM2_Init+0x98>)
 800100c:	f005 fc3e 	bl	800688c <HAL_TIM_ConfigClockSource>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001016:	f000 fa69 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_TIM2_Init+0x98>)
 8001028:	f006 f984 	bl	8007334 <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001032:	f000 fa5b 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	240002b0 	.word	0x240002b0

08001044 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_TIM3_Init+0x94>)
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <MX_TIM3_Init+0x98>)
 8001066:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240 - 1;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_TIM3_Init+0x94>)
 800106a:	22ef      	movs	r2, #239	; 0xef
 800106c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_TIM3_Init+0x94>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000 - 1;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_TIM3_Init+0x94>)
 8001076:	f242 720f 	movw	r2, #9999	; 0x270f
 800107a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_TIM3_Init+0x94>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_TIM3_Init+0x94>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001088:	4813      	ldr	r0, [pc, #76]	; (80010d8 <MX_TIM3_Init+0x94>)
 800108a:	f004 ff1b 	bl	8005ec4 <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001094:	f000 fa2a 	bl	80014ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4619      	mov	r1, r3
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <MX_TIM3_Init+0x94>)
 80010a6:	f005 fbf1 	bl	800688c <HAL_TIM_ConfigClockSource>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010b0:	f000 fa1c 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_TIM3_Init+0x94>)
 80010c2:	f006 f937 	bl	8007334 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80010cc:	f000 fa0e 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	240002fc 	.word	0x240002fc
 80010dc:	40000400 	.word	0x40000400

080010e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_TIM5_Init+0x94>)
 8001100:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <MX_TIM5_Init+0x98>)
 8001102:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 230;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <MX_TIM5_Init+0x94>)
 8001106:	22e6      	movs	r2, #230	; 0xe6
 8001108:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_TIM5_Init+0x94>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_TIM5_Init+0x94>)
 8001112:	f04f 32ff 	mov.w	r2, #4294967295
 8001116:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_TIM5_Init+0x94>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_TIM5_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001124:	4813      	ldr	r0, [pc, #76]	; (8001174 <MX_TIM5_Init+0x94>)
 8001126:	f004 fecd 	bl	8005ec4 <HAL_TIM_Base_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001130:	f000 f9dc 	bl	80014ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001138:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <MX_TIM5_Init+0x94>)
 8001142:	f005 fba3 	bl	800688c <HAL_TIM_ConfigClockSource>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800114c:	f000 f9ce 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_TIM5_Init+0x94>)
 800115e:	f006 f8e9 	bl	8007334 <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001168:	f000 f9c0 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	24000348 	.word	0x24000348
 8001178:	40000c00 	.word	0x40000c00

0800117c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <MX_USART3_UART_Init+0x90>)
 8001182:	4a23      	ldr	r2, [pc, #140]	; (8001210 <MX_USART3_UART_Init+0x94>)
 8001184:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_USART3_UART_Init+0x90>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_USART3_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_USART3_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <MX_USART3_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011c4:	4811      	ldr	r0, [pc, #68]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011c6:	f006 f9df 	bl	8007588 <HAL_UART_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011d0:	f000 f98c 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d4:	2100      	movs	r1, #0
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011d8:	f007 fa12 	bl	8008600 <HAL_UARTEx_SetTxFifoThreshold>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011e2:	f000 f983 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011ea:	f007 fa47 	bl	800867c <HAL_UARTEx_SetRxFifoThreshold>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011f4:	f000 f97a 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_USART3_UART_Init+0x90>)
 80011fa:	f007 f9c8 	bl	800858e <HAL_UARTEx_DisableFifoMode>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001204:	f000 f972 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	24000394 	.word	0x24000394
 8001210:	40004800 	.word	0x40004800

08001214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	4b49      	ldr	r3, [pc, #292]	; (8001350 <MX_GPIO_Init+0x13c>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	4a47      	ldr	r2, [pc, #284]	; (8001350 <MX_GPIO_Init+0x13c>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123a:	4b45      	ldr	r3, [pc, #276]	; (8001350 <MX_GPIO_Init+0x13c>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001248:	4b41      	ldr	r3, [pc, #260]	; (8001350 <MX_GPIO_Init+0x13c>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	4a40      	ldr	r2, [pc, #256]	; (8001350 <MX_GPIO_Init+0x13c>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <MX_GPIO_Init+0x13c>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <MX_GPIO_Init+0x13c>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a38      	ldr	r2, [pc, #224]	; (8001350 <MX_GPIO_Init+0x13c>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <MX_GPIO_Init+0x13c>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001284:	4b32      	ldr	r3, [pc, #200]	; (8001350 <MX_GPIO_Init+0x13c>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	4a31      	ldr	r2, [pc, #196]	; (8001350 <MX_GPIO_Init+0x13c>)
 800128c:	f043 0320 	orr.w	r3, r3, #32
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001294:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <MX_GPIO_Init+0x13c>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <MX_GPIO_Init+0x13c>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	4a29      	ldr	r2, [pc, #164]	; (8001350 <MX_GPIO_Init+0x13c>)
 80012aa:	f043 0310 	orr.w	r3, r3, #16
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <MX_GPIO_Init+0x13c>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <MX_GPIO_Init+0x13c>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	4a22      	ldr	r2, [pc, #136]	; (8001350 <MX_GPIO_Init+0x13c>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_GPIO_Init+0x13c>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f244 0101 	movw	r1, #16385	; 0x4001
 80012e4:	481b      	ldr	r0, [pc, #108]	; (8001354 <MX_GPIO_Init+0x140>)
 80012e6:	f001 f8c1 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2103      	movs	r1, #3
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <MX_GPIO_Init+0x144>)
 80012f0:	f001 f8bc 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012fe:	2302      	movs	r3, #2
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4814      	ldr	r0, [pc, #80]	; (800135c <MX_GPIO_Init+0x148>)
 800130a:	f000 feff 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800130e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001318:	2302      	movs	r3, #2
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131c:	2302      	movs	r3, #2
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <MX_GPIO_Init+0x140>)
 8001328:	f000 fef0 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 800132c:	2303      	movs	r3, #3
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001334:	2302      	movs	r3, #2
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_GPIO_Init+0x144>)
 8001344:	f000 fee2 	bl	800210c <HAL_GPIO_Init>

}
 8001348:	bf00      	nop
 800134a:	3730      	adds	r7, #48	; 0x30
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	58024400 	.word	0x58024400
 8001354:	58020400 	.word	0x58020400
 8001358:	58020c00 	.word	0x58020c00
 800135c:	58020800 	.word	0x58020800

08001360 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Interrupción por timer (TIM2) a 128 Hz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a4f      	ldr	r2, [pc, #316]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d108      	bne.n	8001382 <HAL_TIM_PeriodElapsedCallback+0x22>
		// Guardado de muestras en los arreglos
		//muestras_x[nm] = gyr[0];
		//muestras_y[nm] = gyr[1];
		//muestras_z[nm] = gyr[2];

		nm++;													// Incremento del contador de muestras
 8001370:	4b4e      	ldr	r3, [pc, #312]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001376:	b29b      	uxth	r3, r3
 8001378:	3301      	adds	r3, #1
 800137a:	b29b      	uxth	r3, r3
 800137c:	b21a      	sxth	r2, r3
 800137e:	4b4b      	ldr	r3, [pc, #300]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001380:	801a      	strh	r2, [r3, #0]
		//print_Readings();
	}
	if (htim == &htim3){
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4a      	ldr	r2, [pc, #296]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001386:	4293      	cmp	r3, r2
 8001388:	f040 8082 	bne.w	8001490 <HAL_TIM_PeriodElapsedCallback+0x130>
		//press_raw = MPRLS_data(&hi2c4);
		//send_data(&huart3, press_raw, 4);
		pkPrev = TIM1->CCR1;
 800138c:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800138e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001390:	4a49      	ldr	r2, [pc, #292]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001392:	6013      	str	r3, [r2, #0]
		error = reference - pressure;
 8001394:	4b49      	ldr	r3, [pc, #292]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001396:	ed93 7a00 	vldr	s14, [r3]
 800139a:	4b49      	ldr	r3, [pc, #292]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80013a6:	edc3 7a00 	vstr	s15, [r3]
		control = KP*error + KI*ts*(error + errorPrev);// + (kd/ts)*(error - errorPrev);
 80013aa:	4b46      	ldr	r3, [pc, #280]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013b4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001498 <HAL_TIM_PeriodElapsedCallback+0x138>
 80013b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013bc:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013c6:	ed9f 5b36 	vldr	d5, [pc, #216]	; 80014a0 <HAL_TIM_PeriodElapsedCallback+0x140>
 80013ca:	ee27 5b05 	vmul.f64	d5, d7, d5
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80013d0:	ed93 7a00 	vldr	s14, [r3]
 80013d4:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80013f0:	edc3 7a00 	vstr	s15, [r3]
		pk = pkPrev + control*10;
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001400:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800140a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800140e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001416:	ee17 2a90 	vmov	r2, s15
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800141c:	601a      	str	r2, [r3, #0]
		errorPrev = error;
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a2a      	ldr	r2, [pc, #168]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001424:	6013      	str	r3, [r2, #0]

		if (pk >= 100){
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b63      	cmp	r3, #99	; 0x63
 800142c:	d903      	bls.n	8001436 <HAL_TIM_PeriodElapsedCallback+0xd6>
			TIM1->CCR1 = 100;
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001430:	2264      	movs	r2, #100	; 0x64
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
 8001434:	e00b      	b.n	800144e <HAL_TIM_PeriodElapsedCallback+0xee>
		}else if (pk <= 0){
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <HAL_TIM_PeriodElapsedCallback+0xe6>
			TIM1->CCR1 = 0;
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001440:	2200      	movs	r2, #0
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
 8001444:	e003      	b.n	800144e <HAL_TIM_PeriodElapsedCallback+0xee>
		}else{
			TIM1->CCR1 = pk;
 8001446:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6353      	str	r3, [r2, #52]	; 0x34
		}

		pressure = MPRLS_read(&hi2c4);
 800144e:	4822      	ldr	r0, [pc, #136]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001450:	f000 f8b6 	bl	80015c0 <MPRLS_read>
 8001454:	eef0 7a40 	vmov.f32	s15, s0
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800145a:	edc3 7a00 	vstr	s15, [r3]
		print_float(&huart3, "Presión: %.5f\r\n", pressure);
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	eeb0 0a67 	vmov.f32	s0, s15
 8001468:	491c      	ldr	r1, [pc, #112]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800146a:	481d      	ldr	r0, [pc, #116]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800146c:	f000 fc2e 	bl	8001ccc <print_float>
		print_int(&huart3, "PWM: %u\r\n", pk);
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	491b      	ldr	r1, [pc, #108]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001478:	4819      	ldr	r0, [pc, #100]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800147a:	f000 fc09 	bl	8001c90 <print_int>
		print_float(&huart3, "Control: %.5f\r\n", control);
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	4917      	ldr	r1, [pc, #92]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800148a:	4815      	ldr	r0, [pc, #84]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800148c:	f000 fc1e 	bl	8001ccc <print_float>

	}
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	9374bc6a 	.word	0x9374bc6a
 800149c:	3fd60418 	.word	0x3fd60418
 80014a0:	8db8bac7 	.word	0x8db8bac7
 80014a4:	3f86f006 	.word	0x3f86f006
 80014a8:	240002b0 	.word	0x240002b0
 80014ac:	24000424 	.word	0x24000424
 80014b0:	240002fc 	.word	0x240002fc
 80014b4:	40010000 	.word	0x40010000
 80014b8:	2400043c 	.word	0x2400043c
 80014bc:	2400000c 	.word	0x2400000c
 80014c0:	24000428 	.word	0x24000428
 80014c4:	24000430 	.word	0x24000430
 80014c8:	24000008 	.word	0x24000008
 80014cc:	24000434 	.word	0x24000434
 80014d0:	2400042c 	.word	0x2400042c
 80014d4:	24000438 	.word	0x24000438
 80014d8:	24000218 	.word	0x24000218
 80014dc:	0800cefc 	.word	0x0800cefc
 80014e0:	24000394 	.word	0x24000394
 80014e4:	0800cf10 	.word	0x0800cf10
 80014e8:	0800cf1c 	.word	0x0800cf1c

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <Error_Handler+0x8>
	...

080014f8 <MPRLS_status>:
float pmin = 0.0; // minimum value of pressure range [bar, psi, kPa, etc.
uint8_t cmd[3] = {0xAA, 0x00, 0x00}; // Comando a enviar
uint8_t press_read[4];
float press = 0;

void MPRLS_status(I2C_HandleTypeDef *hi2c){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(hi2c, 0x30, 3, 3000);
 8001500:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001504:	2203      	movs	r2, #3
 8001506:	2130      	movs	r1, #48	; 0x30
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f001 fc9f 	bl	8002e4c <HAL_I2C_IsDeviceReady>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, SET);
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d104      	bne.n	8001522 <MPRLS_status+0x2a>
 8001518:	2201      	movs	r2, #1
 800151a:	2102      	movs	r1, #2
 800151c:	4803      	ldr	r0, [pc, #12]	; (800152c <MPRLS_status+0x34>)
 800151e:	f000 ffa5 	bl	800246c <HAL_GPIO_WritePin>
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	58021000 	.word	0x58021000

08001530 <MPRLS_init>:

void MPRLS_init(I2C_HandleTypeDef *hi2c){
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	outputmin = (uint32_t)((float)16777216L * (outputmin / 100.0) + 0.5);
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <MPRLS_init+0x88>)
 800153a:	edd3 7a00 	vldr	s15, [r3]
 800153e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001542:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80015a8 <MPRLS_init+0x78>
 8001546:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800154a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80015b0 <MPRLS_init+0x80>
 800154e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001552:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001556:	ee37 7b06 	vadd.f64	d7, d7, d6
 800155a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800155e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MPRLS_init+0x88>)
 8001564:	edc3 7a00 	vstr	s15, [r3]
	outputmax = (uint32_t)((float)16777216L * (outputmax / 100.0) + 0.5);
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MPRLS_init+0x8c>)
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001572:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 80015a8 <MPRLS_init+0x78>
 8001576:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800157a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80015b0 <MPRLS_init+0x80>
 800157e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001582:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001586:	ee37 7b06 	vadd.f64	d7, d7, d6
 800158a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800158e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MPRLS_init+0x8c>)
 8001594:	edc3 7a00 	vstr	s15, [r3]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	f3af 8000 	nop.w
 80015a8:	00000000 	.word	0x00000000
 80015ac:	40590000 	.word	0x40590000
 80015b0:	00000000 	.word	0x00000000
 80015b4:	41700000 	.word	0x41700000
 80015b8:	24000014 	.word	0x24000014
 80015bc:	24000010 	.word	0x24000010

080015c0 <MPRLS_read>:

float MPRLS_read(I2C_HandleTypeDef *hi2c){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, 0x30, cmd, 3, 3000);
 80015c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2303      	movs	r3, #3
 80015d0:	4a26      	ldr	r2, [pc, #152]	; (800166c <MPRLS_read+0xac>)
 80015d2:	2130      	movs	r1, #48	; 0x30
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f001 f821 	bl	800261c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, 0x31, press_read, 4, 3000);
 80015da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2304      	movs	r3, #4
 80015e2:	4a23      	ldr	r2, [pc, #140]	; (8001670 <MPRLS_read+0xb0>)
 80015e4:	2131      	movs	r1, #49	; 0x31
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f001 f90c 	bl	8002804 <HAL_I2C_Master_Receive>
	uint32_t psi1 = ((uint32_t)(press_read[1]) << 16) | ((uint32_t)(press_read[2]) << 8) | ((uint32_t)(press_read[3]));
 80015ec:	4b20      	ldr	r3, [pc, #128]	; (8001670 <MPRLS_read+0xb0>)
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	041a      	lsls	r2, r3, #16
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MPRLS_read+0xb0>)
 80015f4:	789b      	ldrb	r3, [r3, #2]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	4313      	orrs	r3, r2
 80015fa:	4a1d      	ldr	r2, [pc, #116]	; (8001670 <MPRLS_read+0xb0>)
 80015fc:	78d2      	ldrb	r2, [r2, #3]
 80015fe:	4313      	orrs	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
	float psi = (psi1 - outputmin) * (pmax - pmin);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <MPRLS_read+0xb4>)
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MPRLS_read+0xb8>)
 8001618:	edd3 6a00 	vldr	s13, [r3]
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <MPRLS_read+0xbc>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162a:	edc7 7a02 	vstr	s15, [r7, #8]
	psi /= (float)(outputmax - outputmin);
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MPRLS_read+0xc0>)
 8001630:	ed93 7a00 	vldr	s14, [r3]
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MPRLS_read+0xb4>)
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800163e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001646:	edc7 7a02 	vstr	s15, [r7, #8]
	psi += pmin;
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MPRLS_read+0xbc>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ed97 7a02 	vldr	s14, [r7, #8]
 8001654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001658:	edc7 7a02 	vstr	s15, [r7, #8]
	return psi;
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	ee07 3a90 	vmov	s15, r3
}
 8001662:	eeb0 0a67 	vmov.f32	s0, s15
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	2400001c 	.word	0x2400001c
 8001670:	24000444 	.word	0x24000444
 8001674:	24000014 	.word	0x24000014
 8001678:	24000018 	.word	0x24000018
 800167c:	24000440 	.word	0x24000440
 8001680:	24000010 	.word	0x24000010

08001684 <MPU6050_status>:

// Lectura del MPU6050
uint8_t check, data;
float gyrF[3];

void MPU6050_status(I2C_HandleTypeDef *hi2c){
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(hi2c, MPU6050_ADDR, 1, 3000);
 800168c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001690:	2201      	movs	r2, #1
 8001692:	21d0      	movs	r1, #208	; 0xd0
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f001 fbd9 	bl	8002e4c <HAL_I2C_IsDeviceReady>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d104      	bne.n	80016ae <MPU6050_status+0x2a>
 80016a4:	2201      	movs	r2, #1
 80016a6:	2101      	movs	r1, #1
 80016a8:	4803      	ldr	r0, [pc, #12]	; (80016b8 <MPU6050_status+0x34>)
 80016aa:	f000 fedf 	bl	800246c <HAL_GPIO_WritePin>
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	58020400 	.word	0x58020400

080016bc <MPU6050_init>:

uint8_t MPU6050_init(I2C_HandleTypeDef *hi2c){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af04      	add	r7, sp, #16
 80016c2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 3000);
 80016c4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80016c8:	9302      	str	r3, [sp, #8]
 80016ca:	2301      	movs	r3, #1
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <MPU6050_init+0x98>)
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2301      	movs	r3, #1
 80016d4:	2275      	movs	r2, #117	; 0x75
 80016d6:	21d0      	movs	r1, #208	; 0xd0
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f001 fa9d 	bl	8002c18 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 80016de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e2:	f000 fbd3 	bl	8001e8c <HAL_Delay>

	data = 0x00;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MPU6050_init+0x9c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 3000);
 80016ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	2301      	movs	r3, #1
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MPU6050_init+0x9c>)
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	226b      	movs	r2, #107	; 0x6b
 80016fe:	21d0      	movs	r1, #208	; 0xd0
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f001 f975 	bl	80029f0 <HAL_I2C_Mem_Write>
	data = 0b10000011;
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MPU6050_init+0x9c>)
 8001708:	2283      	movs	r2, #131	; 0x83
 800170a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPLRT_DIV, 1, &data, 1, 3000);
 800170c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	2301      	movs	r3, #1
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MPU6050_init+0x9c>)
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	2219      	movs	r2, #25
 800171e:	21d0      	movs	r1, #208	; 0xd0
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f001 f965 	bl	80029f0 <HAL_I2C_Mem_Write>
	data = 0x00;
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MPU6050_init+0x9c>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG, 1, &data, 1, 3000);
 800172c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	2301      	movs	r3, #1
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MPU6050_init+0x9c>)
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2301      	movs	r3, #1
 800173c:	221b      	movs	r2, #27
 800173e:	21d0      	movs	r1, #208	; 0xd0
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f001 f955 	bl	80029f0 <HAL_I2C_Mem_Write>

	return check;
 8001746:	4b03      	ldr	r3, [pc, #12]	; (8001754 <MPU6050_init+0x98>)
 8001748:	781b      	ldrb	r3, [r3, #0]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	24000448 	.word	0x24000448
 8001758:	24000449 	.word	0x24000449

0800175c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_MspInit+0x30>)
 8001764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001768:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_MspInit+0x30>)
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_MspInit+0x30>)
 8001774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	58024400 	.word	0x58024400

08001790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0b8      	sub	sp, #224	; 0xe0
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	22bc      	movs	r2, #188	; 0xbc
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f007 f819 	bl	80087e8 <memset>
  if(hi2c->Instance==I2C4)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a25      	ldr	r2, [pc, #148]	; (8001850 <HAL_I2C_MspInit+0xc0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d142      	bne.n	8001846 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80017c0:	2310      	movs	r3, #16
 80017c2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 f810 	bl	80047f4 <HAL_RCCEx_PeriphCLKConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017da:	f7ff fe87 	bl	80014ec <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <HAL_I2C_MspInit+0xc4>)
 80017e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <HAL_I2C_MspInit+0xc4>)
 80017e6:	f043 0320 	orr.w	r3, r3, #32
 80017ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_I2C_MspInit+0xc4>)
 80017f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f4:	f003 0320 	and.w	r3, r3, #32
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80017fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001804:	2312      	movs	r3, #18
 8001806:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001816:	2304      	movs	r3, #4
 8001818:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800181c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001820:	4619      	mov	r1, r3
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <HAL_I2C_MspInit+0xc8>)
 8001824:	f000 fc72 	bl	800210c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_I2C_MspInit+0xc4>)
 800182a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800182e:	4a09      	ldr	r2, [pc, #36]	; (8001854 <HAL_I2C_MspInit+0xc4>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001834:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_I2C_MspInit+0xc4>)
 800183a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001846:	bf00      	nop
 8001848:	37e0      	adds	r7, #224	; 0xe0
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	58001c00 	.word	0x58001c00
 8001854:	58024400 	.word	0x58024400
 8001858:	58021400 	.word	0x58021400

0800185c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a32      	ldr	r2, [pc, #200]	; (8001934 <HAL_TIM_Base_MspInit+0xd8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10f      	bne.n	800188e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_TIM_Base_MspInit+0xdc>)
 8001870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001874:	4a30      	ldr	r2, [pc, #192]	; (8001938 <HAL_TIM_Base_MspInit+0xdc>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <HAL_TIM_Base_MspInit+0xdc>)
 8001880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800188c:	e04d      	b.n	800192a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001896:	d117      	bne.n	80018c8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_TIM_Base_MspInit+0xdc>)
 800189a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800189e:	4a26      	ldr	r2, [pc, #152]	; (8001938 <HAL_TIM_Base_MspInit+0xdc>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_TIM_Base_MspInit+0xdc>)
 80018aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	201c      	movs	r0, #28
 80018bc:	f000 fbf1 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c0:	201c      	movs	r0, #28
 80018c2:	f000 fc08 	bl	80020d6 <HAL_NVIC_EnableIRQ>
}
 80018c6:	e030      	b.n	800192a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1b      	ldr	r2, [pc, #108]	; (800193c <HAL_TIM_Base_MspInit+0xe0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d117      	bne.n	8001902 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_TIM_Base_MspInit+0xdc>)
 80018d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018d8:	4a17      	ldr	r2, [pc, #92]	; (8001938 <HAL_TIM_Base_MspInit+0xdc>)
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_TIM_Base_MspInit+0xdc>)
 80018e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	201d      	movs	r0, #29
 80018f6:	f000 fbd4 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018fa:	201d      	movs	r0, #29
 80018fc:	f000 fbeb 	bl	80020d6 <HAL_NVIC_EnableIRQ>
}
 8001900:	e013      	b.n	800192a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_TIM_Base_MspInit+0xe4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d10e      	bne.n	800192a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_TIM_Base_MspInit+0xdc>)
 800190e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_TIM_Base_MspInit+0xdc>)
 8001914:	f043 0308 	orr.w	r3, r3, #8
 8001918:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_TIM_Base_MspInit+0xdc>)
 800191e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40010000 	.word	0x40010000
 8001938:	58024400 	.word	0x58024400
 800193c:	40000400 	.word	0x40000400
 8001940:	40000c00 	.word	0x40000c00

08001944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <HAL_TIM_MspPostInit+0x6c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d11f      	bne.n	80019a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_TIM_MspPostInit+0x70>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196c:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <HAL_TIM_MspPostInit+0x70>)
 800196e:	f043 0310 	orr.w	r3, r3, #16
 8001972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_TIM_MspPostInit+0x70>)
 8001978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001988:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001996:	2301      	movs	r3, #1
 8001998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	4619      	mov	r1, r3
 80019a0:	4805      	ldr	r0, [pc, #20]	; (80019b8 <HAL_TIM_MspPostInit+0x74>)
 80019a2:	f000 fbb3 	bl	800210c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019a6:	bf00      	nop
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40010000 	.word	0x40010000
 80019b4:	58024400 	.word	0x58024400
 80019b8:	58021000 	.word	0x58021000

080019bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0b8      	sub	sp, #224	; 0xe0
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	22bc      	movs	r2, #188	; 0xbc
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f006 ff03 	bl	80087e8 <memset>
  if(huart->Instance==USART3)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a25      	ldr	r2, [pc, #148]	; (8001a7c <HAL_UART_MspInit+0xc0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d142      	bne.n	8001a72 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019ec:	2302      	movs	r3, #2
 80019ee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fefa 	bl	80047f4 <HAL_RCCEx_PeriphCLKConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a06:	f7ff fd71 	bl	80014ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_UART_MspInit+0xc4>)
 8001a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a10:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <HAL_UART_MspInit+0xc4>)
 8001a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_UART_MspInit+0xc4>)
 8001a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_UART_MspInit+0xc4>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2e:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_UART_MspInit+0xc4>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_UART_MspInit+0xc4>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a60:	2307      	movs	r3, #7
 8001a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_UART_MspInit+0xc8>)
 8001a6e:	f000 fb4d 	bl	800210c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	37e0      	adds	r7, #224	; 0xe0
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40004800 	.word	0x40004800
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58020c00 	.word	0x58020c00

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <NMI_Handler+0x4>

08001a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad4:	f000 f9ba 	bl	8001e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}

08001adc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <TIM2_IRQHandler+0x10>)
 8001ae2:	f004 fc9f 	bl	8006424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	240002b0 	.word	0x240002b0

08001af0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <TIM3_IRQHandler+0x10>)
 8001af6:	f004 fc95 	bl	8006424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	240002fc 	.word	0x240002fc

08001b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
	return 1;
 8001b08:	2301      	movs	r3, #1
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_kill>:

int _kill(int pid, int sig)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b1e:	f006 fe39 	bl	8008794 <__errno>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2216      	movs	r2, #22
 8001b26:	601a      	str	r2, [r3, #0]
	return -1;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_exit>:

void _exit (int status)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ffe7 	bl	8001b14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b46:	e7fe      	b.n	8001b46 <_exit+0x12>

08001b48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e00a      	b.n	8001b70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b5a:	f3af 8000 	nop.w
 8001b5e:	4601      	mov	r1, r0
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	60ba      	str	r2, [r7, #8]
 8001b66:	b2ca      	uxtb	r2, r1
 8001b68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbf0      	blt.n	8001b5a <_read+0x12>
	}

return len;
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e009      	b.n	8001ba8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dbf1      	blt.n	8001b94 <_write+0x12>
	}
	return len;
 8001bb0:	687b      	ldr	r3, [r7, #4]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_close>:

int _close(int file)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
	return -1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be2:	605a      	str	r2, [r3, #4]
	return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <_isatty>:

int _isatty(int file)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
	return 1;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
	return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <_sbrk+0x5c>)
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <_sbrk+0x60>)
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <_sbrk+0x64>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <_sbrk+0x68>)
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d207      	bcs.n	8001c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c54:	f006 fd9e 	bl	8008794 <__errno>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	e009      	b.n	8001c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <_sbrk+0x64>)
 8001c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	24080000 	.word	0x24080000
 8001c84:	00000400 	.word	0x00000400
 8001c88:	2400044c 	.word	0x2400044c
 8001c8c:	24000498 	.word	0x24000498

08001c90 <print_int>:

typedef float complex cplx;
char uart_buf[50];
uint16_t uart_buf_len;

void print_int(UART_HandleTypeDef *huart, char *string, int var){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
	uart_buf_len = sprintf(uart_buf, string, var);
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	68b9      	ldr	r1, [r7, #8]
 8001ca0:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <print_int+0x34>)
 8001ca2:	f007 fbf7 	bl	8009494 <siprintf>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <print_int+0x38>)
 8001cac:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(huart, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <print_int+0x38>)
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	2364      	movs	r3, #100	; 0x64
 8001cb4:	4903      	ldr	r1, [pc, #12]	; (8001cc4 <print_int+0x34>)
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f005 fcb6 	bl	8007628 <HAL_UART_Transmit>
}
 8001cbc:	bf00      	nop
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	24000450 	.word	0x24000450
 8001cc8:	24000482 	.word	0x24000482

08001ccc <print_float>:

void print_float(UART_HandleTypeDef *huart, char *string, float var){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	ed87 0a01 	vstr	s0, [r7, #4]
	uart_buf_len = sprintf(uart_buf, string, var);
 8001cda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce2:	ec53 2b17 	vmov	r2, r3, d7
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	4808      	ldr	r0, [pc, #32]	; (8001d0c <print_float+0x40>)
 8001cea:	f007 fbd3 	bl	8009494 <siprintf>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <print_float+0x44>)
 8001cf4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(huart, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <print_float+0x44>)
 8001cf8:	881a      	ldrh	r2, [r3, #0]
 8001cfa:	2364      	movs	r3, #100	; 0x64
 8001cfc:	4903      	ldr	r1, [pc, #12]	; (8001d0c <print_float+0x40>)
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f005 fc92 	bl	8007628 <HAL_UART_Transmit>
}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	24000450 	.word	0x24000450
 8001d10:	24000482 	.word	0x24000482

08001d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d18:	f7fe feb0 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d1c:	480c      	ldr	r0, [pc, #48]	; (8001d50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d1e:	490d      	ldr	r1, [pc, #52]	; (8001d54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d34:	4c0a      	ldr	r4, [pc, #40]	; (8001d60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d42:	f006 fd2d 	bl	80087a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d46:	f7fe ff2f 	bl	8000ba8 <main>
  bx  lr
 8001d4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d4c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d54:	240001fc 	.word	0x240001fc
  ldr r2, =_sidata
 8001d58:	0800d41c 	.word	0x0800d41c
  ldr r2, =_sbss
 8001d5c:	240001fc 	.word	0x240001fc
  ldr r4, =_ebss
 8001d60:	24000498 	.word	0x24000498

08001d64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC3_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f000 f98c 	bl	800208c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d74:	f002 fb68 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_Init+0x68>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	4913      	ldr	r1, [pc, #76]	; (8001dd4 <HAL_Init+0x6c>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_Init+0x68>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_Init+0x6c>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <HAL_Init+0x70>)
 8001daa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <HAL_Init+0x74>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001db2:	2000      	movs	r0, #0
 8001db4:	f000 f814 	bl	8001de0 <HAL_InitTick>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e002      	b.n	8001dc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc2:	f7ff fccb 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	0800cf2c 	.word	0x0800cf2c
 8001dd8:	24000004 	.word	0x24000004
 8001ddc:	24000000 	.word	0x24000000

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_InitTick+0x60>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e021      	b.n	8001e38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_InitTick+0x64>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_InitTick+0x60>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f971 	bl	80020f2 <HAL_SYSTICK_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00e      	b.n	8001e38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0f      	cmp	r3, #15
 8001e1e:	d80a      	bhi.n	8001e36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e20:	2200      	movs	r2, #0
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f000 f93b 	bl	80020a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e2c:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <HAL_InitTick+0x68>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	24000024 	.word	0x24000024
 8001e44:	24000000 	.word	0x24000000
 8001e48:	24000020 	.word	0x24000020

08001e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_IncTick+0x20>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_IncTick+0x24>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <HAL_IncTick+0x24>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	24000024 	.word	0x24000024
 8001e70:	24000484 	.word	0x24000484

08001e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_GetTick+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	24000484 	.word	0x24000484

08001e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff ffee 	bl	8001e74 <HAL_GetTick>
 8001e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d005      	beq.n	8001eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_Delay+0x44>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eb2:	bf00      	nop
 8001eb4:	f7ff ffde 	bl	8001e74 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d8f7      	bhi.n	8001eb4 <HAL_Delay+0x28>
  {
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	24000024 	.word	0x24000024

08001ed4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetREVID+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0c1b      	lsrs	r3, r3, #16
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	5c001000 	.word	0x5c001000

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <__NVIC_SetPriorityGrouping+0x40>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <__NVIC_SetPriorityGrouping+0x40>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00
 8001f30:	05fa0000 	.word	0x05fa0000

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f7ff ff8e 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff29 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020b0:	f7ff ff40 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 80020b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff90 	bl	8001fe0 <NVIC_EncodePriority>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5f 	bl	8001f8c <__NVIC_SetPriority>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff33 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ffa4 	bl	8002048 <SysTick_Config>
 8002100:	4603      	mov	r3, r0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800211a:	4b89      	ldr	r3, [pc, #548]	; (8002340 <HAL_GPIO_Init+0x234>)
 800211c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800211e:	e194      	b.n	800244a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8186 	beq.w	8002444 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d005      	beq.n	8002150 <HAL_GPIO_Init+0x44>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d130      	bne.n	80021b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002186:	2201      	movs	r2, #1
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 0201 	and.w	r2, r3, #1
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d017      	beq.n	80021ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d123      	bne.n	8002242 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	69b9      	ldr	r1, [r7, #24]
 800223e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0203 	and.w	r2, r3, #3
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80e0 	beq.w	8002444 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <HAL_GPIO_Init+0x238>)
 8002286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800228a:	4a2e      	ldr	r2, [pc, #184]	; (8002344 <HAL_GPIO_Init+0x238>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_GPIO_Init+0x238>)
 8002296:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022a2:	4a29      	ldr	r2, [pc, #164]	; (8002348 <HAL_GPIO_Init+0x23c>)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a20      	ldr	r2, [pc, #128]	; (800234c <HAL_GPIO_Init+0x240>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d052      	beq.n	8002374 <HAL_GPIO_Init+0x268>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_GPIO_Init+0x244>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d031      	beq.n	800233a <HAL_GPIO_Init+0x22e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <HAL_GPIO_Init+0x248>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d02b      	beq.n	8002336 <HAL_GPIO_Init+0x22a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <HAL_GPIO_Init+0x24c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d025      	beq.n	8002332 <HAL_GPIO_Init+0x226>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1c      	ldr	r2, [pc, #112]	; (800235c <HAL_GPIO_Init+0x250>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01f      	beq.n	800232e <HAL_GPIO_Init+0x222>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_GPIO_Init+0x254>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d019      	beq.n	800232a <HAL_GPIO_Init+0x21e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <HAL_GPIO_Init+0x258>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0x21a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a19      	ldr	r2, [pc, #100]	; (8002368 <HAL_GPIO_Init+0x25c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00d      	beq.n	8002322 <HAL_GPIO_Init+0x216>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a18      	ldr	r2, [pc, #96]	; (800236c <HAL_GPIO_Init+0x260>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x212>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_GPIO_Init+0x264>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_GPIO_Init+0x20e>
 8002316:	2309      	movs	r3, #9
 8002318:	e02d      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800231a:	230a      	movs	r3, #10
 800231c:	e02b      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800231e:	2308      	movs	r3, #8
 8002320:	e029      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 8002322:	2307      	movs	r3, #7
 8002324:	e027      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 8002326:	2306      	movs	r3, #6
 8002328:	e025      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800232a:	2305      	movs	r3, #5
 800232c:	e023      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800232e:	2304      	movs	r3, #4
 8002330:	e021      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 8002332:	2303      	movs	r3, #3
 8002334:	e01f      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 8002336:	2302      	movs	r3, #2
 8002338:	e01d      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800233a:	2301      	movs	r3, #1
 800233c:	e01b      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800233e:	bf00      	nop
 8002340:	58000080 	.word	0x58000080
 8002344:	58024400 	.word	0x58024400
 8002348:	58000400 	.word	0x58000400
 800234c:	58020000 	.word	0x58020000
 8002350:	58020400 	.word	0x58020400
 8002354:	58020800 	.word	0x58020800
 8002358:	58020c00 	.word	0x58020c00
 800235c:	58021000 	.word	0x58021000
 8002360:	58021400 	.word	0x58021400
 8002364:	58021800 	.word	0x58021800
 8002368:	58021c00 	.word	0x58021c00
 800236c:	58022000 	.word	0x58022000
 8002370:	58022400 	.word	0x58022400
 8002374:	2300      	movs	r3, #0
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	f002 0203 	and.w	r2, r2, #3
 800237c:	0092      	lsls	r2, r2, #2
 800237e:	4093      	lsls	r3, r2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002386:	4938      	ldr	r1, [pc, #224]	; (8002468 <HAL_GPIO_Init+0x35c>)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	3301      	adds	r3, #1
 8002448:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	f47f ae63 	bne.w	8002120 <HAL_GPIO_Init+0x14>
  }
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	3724      	adds	r7, #36	; 0x24
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	58000400 	.word	0x58000400

0800246c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	807b      	strh	r3, [r7, #2]
 8002478:	4613      	mov	r3, r2
 800247a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002488:	e003      	b.n	8002492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	041a      	lsls	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	619a      	str	r2, [r3, #24]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80024a8:	4a08      	ldr	r2, [pc, #32]	; (80024cc <HAL_HSEM_FastTake+0x2c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3320      	adds	r3, #32
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_HSEM_FastTake+0x30>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d101      	bne.n	80024bc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e000      	b.n	80024be <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	58026400 	.word	0x58026400
 80024d0:	80000300 	.word	0x80000300

080024d4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80024de:	4906      	ldr	r1, [pc, #24]	; (80024f8 <HAL_HSEM_Release+0x24>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	58026400 	.word	0x58026400

080024fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e07f      	b.n	800260e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff f934 	bl	8001790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800254c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e006      	b.n	8002584 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002582:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d104      	bne.n	8002596 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002594:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_I2C_Init+0x11c>)
 80025a2:	430b      	orrs	r3, r1
 80025a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69d9      	ldr	r1, [r3, #28]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1a      	ldr	r2, [r3, #32]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	02008000 	.word	0x02008000

0800261c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	461a      	mov	r2, r3
 8002628:	460b      	mov	r3, r1
 800262a:	817b      	strh	r3, [r7, #10]
 800262c:	4613      	mov	r3, r2
 800262e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b20      	cmp	r3, #32
 800263a:	f040 80da 	bne.w	80027f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_I2C_Master_Transmit+0x30>
 8002648:	2302      	movs	r3, #2
 800264a:	e0d3      	b.n	80027f4 <HAL_I2C_Master_Transmit+0x1d8>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002654:	f7ff fc0e 	bl	8001e74 <HAL_GetTick>
 8002658:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2319      	movs	r3, #25
 8002660:	2201      	movs	r2, #1
 8002662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fdc4 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0be      	b.n	80027f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2221      	movs	r2, #33	; 0x21
 800267a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2210      	movs	r2, #16
 8002682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	893a      	ldrh	r2, [r7, #8]
 8002696:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2bff      	cmp	r3, #255	; 0xff
 80026a6:	d90e      	bls.n	80026c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	22ff      	movs	r2, #255	; 0xff
 80026ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	8979      	ldrh	r1, [r7, #10]
 80026b6:	4b51      	ldr	r3, [pc, #324]	; (80027fc <HAL_I2C_Master_Transmit+0x1e0>)
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 ffba 	bl	8003638 <I2C_TransferConfig>
 80026c4:	e06c      	b.n	80027a0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	8979      	ldrh	r1, [r7, #10]
 80026d8:	4b48      	ldr	r3, [pc, #288]	; (80027fc <HAL_I2C_Master_Transmit+0x1e0>)
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 ffa9 	bl	8003638 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80026e6:	e05b      	b.n	80027a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	6a39      	ldr	r1, [r7, #32]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fdc1 	bl	8003274 <I2C_WaitOnTXISFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e07b      	b.n	80027f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d034      	beq.n	80027a0 <HAL_I2C_Master_Transmit+0x184>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	2b00      	cmp	r3, #0
 800273c:	d130      	bne.n	80027a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2200      	movs	r2, #0
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fd53 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e04d      	b.n	80027f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	2bff      	cmp	r3, #255	; 0xff
 8002760:	d90e      	bls.n	8002780 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	b2da      	uxtb	r2, r3
 800276e:	8979      	ldrh	r1, [r7, #10]
 8002770:	2300      	movs	r3, #0
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 ff5d 	bl	8003638 <I2C_TransferConfig>
 800277e:	e00f      	b.n	80027a0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278e:	b2da      	uxtb	r2, r3
 8002790:	8979      	ldrh	r1, [r7, #10]
 8002792:	2300      	movs	r3, #0
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 ff4c 	bl	8003638 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d19e      	bne.n	80026e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	6a39      	ldr	r1, [r7, #32]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fda0 	bl	80032f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e01a      	b.n	80027f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2220      	movs	r2, #32
 80027c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_I2C_Master_Transmit+0x1e4>)
 80027d2:	400b      	ands	r3, r1
 80027d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	80002000 	.word	0x80002000
 8002800:	fe00e800 	.word	0xfe00e800

08002804 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	461a      	mov	r2, r3
 8002810:	460b      	mov	r3, r1
 8002812:	817b      	strh	r3, [r7, #10]
 8002814:	4613      	mov	r3, r2
 8002816:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b20      	cmp	r3, #32
 8002822:	f040 80db 	bne.w	80029dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_I2C_Master_Receive+0x30>
 8002830:	2302      	movs	r3, #2
 8002832:	e0d4      	b.n	80029de <HAL_I2C_Master_Receive+0x1da>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800283c:	f7ff fb1a 	bl	8001e74 <HAL_GetTick>
 8002840:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2319      	movs	r3, #25
 8002848:	2201      	movs	r2, #1
 800284a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fcd0 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e0bf      	b.n	80029de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2222      	movs	r2, #34	; 0x22
 8002862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2210      	movs	r2, #16
 800286a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	893a      	ldrh	r2, [r7, #8]
 800287e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	2bff      	cmp	r3, #255	; 0xff
 800288e:	d90e      	bls.n	80028ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	22ff      	movs	r2, #255	; 0xff
 8002894:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	b2da      	uxtb	r2, r3
 800289c:	8979      	ldrh	r1, [r7, #10]
 800289e:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <HAL_I2C_Master_Receive+0x1e4>)
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fec6 	bl	8003638 <I2C_TransferConfig>
 80028ac:	e06d      	b.n	800298a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	8979      	ldrh	r1, [r7, #10]
 80028c0:	4b49      	ldr	r3, [pc, #292]	; (80029e8 <HAL_I2C_Master_Receive+0x1e4>)
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 feb5 	bl	8003638 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80028ce:	e05c      	b.n	800298a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	6a39      	ldr	r1, [r7, #32]
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fd49 	bl	800336c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e07c      	b.n	80029de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d034      	beq.n	800298a <HAL_I2C_Master_Receive+0x186>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	d130      	bne.n	800298a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	2200      	movs	r2, #0
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fc5e 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e04d      	b.n	80029de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	2bff      	cmp	r3, #255	; 0xff
 800294a:	d90e      	bls.n	800296a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	22ff      	movs	r2, #255	; 0xff
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	b2da      	uxtb	r2, r3
 8002958:	8979      	ldrh	r1, [r7, #10]
 800295a:	2300      	movs	r3, #0
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fe68 	bl	8003638 <I2C_TransferConfig>
 8002968:	e00f      	b.n	800298a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	b2da      	uxtb	r2, r3
 800297a:	8979      	ldrh	r1, [r7, #10]
 800297c:	2300      	movs	r3, #0
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fe57 	bl	8003638 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d19d      	bne.n	80028d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	6a39      	ldr	r1, [r7, #32]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fcab 	bl	80032f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e01a      	b.n	80029de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2220      	movs	r2, #32
 80029ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_I2C_Master_Receive+0x1e8>)
 80029bc:	400b      	ands	r3, r1
 80029be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e000      	b.n	80029de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	80002400 	.word	0x80002400
 80029ec:	fe00e800 	.word	0xfe00e800

080029f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	4608      	mov	r0, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	4603      	mov	r3, r0
 8002a00:	817b      	strh	r3, [r7, #10]
 8002a02:	460b      	mov	r3, r1
 8002a04:	813b      	strh	r3, [r7, #8]
 8002a06:	4613      	mov	r3, r2
 8002a08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	f040 80f9 	bne.w	8002c0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x34>
 8002a1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0ed      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_I2C_Mem_Write+0x4e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e0e6      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a46:	f7ff fa15 	bl	8001e74 <HAL_GetTick>
 8002a4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2319      	movs	r3, #25
 8002a52:	2201      	movs	r2, #1
 8002a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fbcb 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0d1      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2221      	movs	r2, #33	; 0x21
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2240      	movs	r2, #64	; 0x40
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a90:	88f8      	ldrh	r0, [r7, #6]
 8002a92:	893a      	ldrh	r2, [r7, #8]
 8002a94:	8979      	ldrh	r1, [r7, #10]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fadb 	bl	800305c <I2C_RequestMemoryWrite>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0a9      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2bff      	cmp	r3, #255	; 0xff
 8002ac0:	d90e      	bls.n	8002ae0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	22ff      	movs	r2, #255	; 0xff
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	8979      	ldrh	r1, [r7, #10]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fdad 	bl	8003638 <I2C_TransferConfig>
 8002ade:	e00f      	b.n	8002b00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	8979      	ldrh	r1, [r7, #10]
 8002af2:	2300      	movs	r3, #0
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fd9c 	bl	8003638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fbb5 	bl	8003274 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e07b      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d034      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x1c8>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d130      	bne.n	8002bb8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fb47 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e04d      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2bff      	cmp	r3, #255	; 0xff
 8002b78:	d90e      	bls.n	8002b98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	22ff      	movs	r2, #255	; 0xff
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	8979      	ldrh	r1, [r7, #10]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fd51 	bl	8003638 <I2C_TransferConfig>
 8002b96:	e00f      	b.n	8002bb8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	8979      	ldrh	r1, [r7, #10]
 8002baa:	2300      	movs	r3, #0
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fd40 	bl	8003638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d19e      	bne.n	8002b00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fb94 	bl	80032f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e01a      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_I2C_Mem_Write+0x224>)
 8002bea:	400b      	ands	r3, r1
 8002bec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	fe00e800 	.word	0xfe00e800

08002c18 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	817b      	strh	r3, [r7, #10]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	813b      	strh	r3, [r7, #8]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	f040 80fd 	bne.w	8002e3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_I2C_Mem_Read+0x34>
 8002c46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d105      	bne.n	8002c58 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0f1      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Mem_Read+0x4e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0ea      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c6e:	f7ff f901 	bl	8001e74 <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2319      	movs	r3, #25
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fab7 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0d5      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2222      	movs	r2, #34	; 0x22
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cb8:	88f8      	ldrh	r0, [r7, #6]
 8002cba:	893a      	ldrh	r2, [r7, #8]
 8002cbc:	8979      	ldrh	r1, [r7, #10]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fa1b 	bl	8003104 <I2C_RequestMemoryRead>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0ad      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2bff      	cmp	r3, #255	; 0xff
 8002ce8:	d90e      	bls.n	8002d08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	22ff      	movs	r2, #255	; 0xff
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <HAL_I2C_Mem_Read+0x22c>)
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fc99 	bl	8003638 <I2C_TransferConfig>
 8002d06:	e00f      	b.n	8002d28 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_I2C_Mem_Read+0x22c>)
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fc88 	bl	8003638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2104      	movs	r1, #4
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fa5e 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e07c      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d034      	beq.n	8002de8 <HAL_I2C_Mem_Read+0x1d0>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d130      	bne.n	8002de8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2180      	movs	r1, #128	; 0x80
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fa2f 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e04d      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2bff      	cmp	r3, #255	; 0xff
 8002da8:	d90e      	bls.n	8002dc8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	8979      	ldrh	r1, [r7, #10]
 8002db8:	2300      	movs	r3, #0
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fc39 	bl	8003638 <I2C_TransferConfig>
 8002dc6:	e00f      	b.n	8002de8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fc28 	bl	8003638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d19a      	bne.n	8002d28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fa7c 	bl	80032f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e01a      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_I2C_Mem_Read+0x230>)
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e000      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	80002400 	.word	0x80002400
 8002e48:	fe00e800 	.word	0xfe00e800

08002e4c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	f040 80ef 	bne.w	800304c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7c:	d101      	bne.n	8002e82 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0e5      	b.n	800304e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_I2C_IsDeviceReady+0x44>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0de      	b.n	800304e <HAL_I2C_IsDeviceReady+0x202>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d105      	bne.n	8002eba <HAL_I2C_IsDeviceReady+0x6e>
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002eb4:	4b68      	ldr	r3, [pc, #416]	; (8003058 <HAL_I2C_IsDeviceReady+0x20c>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	e004      	b.n	8002ec4 <HAL_I2C_IsDeviceReady+0x78>
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe ffd3 	bl	8001e74 <HAL_GetTick>
 8002ece:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002efc:	e034      	b.n	8002f68 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d01a      	beq.n	8002f3c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f06:	f7fe ffb5 	bl	8001e74 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <HAL_I2C_IsDeviceReady+0xd0>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10f      	bne.n	8002f3c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e088      	b.n	800304e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	bf0c      	ite	eq
 8002f4a:	2301      	moveq	r3, #1
 8002f4c:	2300      	movne	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b10      	cmp	r3, #16
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002f68:	7ffb      	ldrb	r3, [r7, #31]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <HAL_I2C_IsDeviceReady+0x128>
 8002f6e:	7fbb      	ldrb	r3, [r7, #30]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0c4      	beq.n	8002efe <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d01a      	beq.n	8002fb8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2120      	movs	r1, #32
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f931 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e058      	b.n	800304e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e04a      	b.n	800304e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2120      	movs	r1, #32
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f916 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e03d      	b.n	800304e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d118      	bne.n	800301c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ff8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2200      	movs	r2, #0
 8003002:	2120      	movs	r1, #32
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f8f5 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e01c      	b.n	800304e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2220      	movs	r2, #32
 800301a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3301      	adds	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	429a      	cmp	r2, r3
 8003028:	f63f af3d 	bhi.w	8002ea6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	02002000 	.word	0x02002000

0800305c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	4608      	mov	r0, r1
 8003066:	4611      	mov	r1, r2
 8003068:	461a      	mov	r2, r3
 800306a:	4603      	mov	r3, r0
 800306c:	817b      	strh	r3, [r7, #10]
 800306e:	460b      	mov	r3, r1
 8003070:	813b      	strh	r3, [r7, #8]
 8003072:	4613      	mov	r3, r2
 8003074:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	8979      	ldrh	r1, [r7, #10]
 800307c:	4b20      	ldr	r3, [pc, #128]	; (8003100 <I2C_RequestMemoryWrite+0xa4>)
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fad7 	bl	8003638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f8f0 	bl	8003274 <I2C_WaitOnTXISFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e02c      	b.n	80030f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d105      	bne.n	80030b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030a4:	893b      	ldrh	r3, [r7, #8]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
 80030ae:	e015      	b.n	80030dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030b0:	893b      	ldrh	r3, [r7, #8]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	69b9      	ldr	r1, [r7, #24]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f8d6 	bl	8003274 <I2C_WaitOnTXISFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e012      	b.n	80030f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030d2:	893b      	ldrh	r3, [r7, #8]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2200      	movs	r2, #0
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f884 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	80002000 	.word	0x80002000

08003104 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	4608      	mov	r0, r1
 800310e:	4611      	mov	r1, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4603      	mov	r3, r0
 8003114:	817b      	strh	r3, [r7, #10]
 8003116:	460b      	mov	r3, r1
 8003118:	813b      	strh	r3, [r7, #8]
 800311a:	4613      	mov	r3, r2
 800311c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	8979      	ldrh	r1, [r7, #10]
 8003124:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <I2C_RequestMemoryRead+0xa4>)
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2300      	movs	r3, #0
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fa84 	bl	8003638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f89d 	bl	8003274 <I2C_WaitOnTXISFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e02c      	b.n	800319e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d105      	bne.n	8003156 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800314a:	893b      	ldrh	r3, [r7, #8]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
 8003154:	e015      	b.n	8003182 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003156:	893b      	ldrh	r3, [r7, #8]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	b29b      	uxth	r3, r3
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	69b9      	ldr	r1, [r7, #24]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f883 	bl	8003274 <I2C_WaitOnTXISFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e012      	b.n	800319e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003178:	893b      	ldrh	r3, [r7, #8]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2200      	movs	r2, #0
 800318a:	2140      	movs	r1, #64	; 0x40
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f831 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	80002000 	.word	0x80002000

080031ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d103      	bne.n	80031ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d007      	beq.n	80031e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	619a      	str	r2, [r3, #24]
  }
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003204:	e022      	b.n	800324c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d01e      	beq.n	800324c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320e:	f7fe fe31 	bl	8001e74 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d302      	bcc.n	8003224 <I2C_WaitOnFlagUntilTimeout+0x30>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d113      	bne.n	800324c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e00f      	b.n	800326c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	4013      	ands	r3, r2
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	429a      	cmp	r2, r3
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	429a      	cmp	r2, r3
 8003268:	d0cd      	beq.n	8003206 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003280:	e02c      	b.n	80032dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f8ea 	bl	8003460 <I2C_IsErrorOccurred>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e02a      	b.n	80032ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d01e      	beq.n	80032dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329e:	f7fe fde9 	bl	8001e74 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d302      	bcc.n	80032b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d113      	bne.n	80032dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d1cb      	bne.n	8003282 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003300:	e028      	b.n	8003354 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f8aa 	bl	8003460 <I2C_IsErrorOccurred>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e026      	b.n	8003364 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003316:	f7fe fdad 	bl	8001e74 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	429a      	cmp	r2, r3
 8003324:	d302      	bcc.n	800332c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d113      	bne.n	8003354 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e007      	b.n	8003364 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b20      	cmp	r3, #32
 8003360:	d1cf      	bne.n	8003302 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003378:	e064      	b.n	8003444 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f86e 	bl	8003460 <I2C_IsErrorOccurred>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e062      	b.n	8003454 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b20      	cmp	r3, #32
 800339a:	d138      	bne.n	800340e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d105      	bne.n	80033b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e04e      	b.n	8003454 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d107      	bne.n	80033d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2210      	movs	r2, #16
 80033ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2204      	movs	r2, #4
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
 80033d2:	e002      	b.n	80033da <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2220      	movs	r2, #32
 80033e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b1b      	ldr	r3, [pc, #108]	; (800345c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80033ee:	400b      	ands	r3, r1
 80033f0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e022      	b.n	8003454 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fe fd31 	bl	8001e74 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10f      	bne.n	8003444 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e007      	b.n	8003454 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b04      	cmp	r3, #4
 8003450:	d193      	bne.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	fe00e800 	.word	0xfe00e800

08003460 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d075      	beq.n	8003578 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2210      	movs	r2, #16
 8003492:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003494:	e056      	b.n	8003544 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d052      	beq.n	8003544 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fe fce9 	bl	8001e74 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_IsErrorOccurred+0x54>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d147      	bne.n	8003544 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d6:	d12e      	bne.n	8003536 <I2C_IsErrorOccurred+0xd6>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034de:	d02a      	beq.n	8003536 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d027      	beq.n	8003536 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034f4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034f6:	f7fe fcbd 	bl	8001e74 <HAL_GetTick>
 80034fa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034fc:	e01b      	b.n	8003536 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034fe:	f7fe fcb9 	bl	8001e74 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b19      	cmp	r3, #25
 800350a:	d914      	bls.n	8003536 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b20      	cmp	r3, #32
 8003542:	d1dc      	bne.n	80034fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b20      	cmp	r3, #32
 8003550:	d003      	beq.n	800355a <I2C_IsErrorOccurred+0xfa>
 8003552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003556:	2b00      	cmp	r3, #0
 8003558:	d09d      	beq.n	8003496 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800355a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2220      	movs	r2, #32
 8003568:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800359a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	f043 0308 	orr.w	r3, r3, #8
 80035b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d01c      	beq.n	8003628 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff fddc 	bl	80031ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6859      	ldr	r1, [r3, #4]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <I2C_IsErrorOccurred+0x1d4>)
 8003600:	400b      	ands	r3, r1
 8003602:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	431a      	orrs	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800362c:	4618      	mov	r0, r3
 800362e:	3728      	adds	r7, #40	; 0x28
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	fe00e800 	.word	0xfe00e800

08003638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	817b      	strh	r3, [r7, #10]
 8003646:	4613      	mov	r3, r2
 8003648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800364a:	897b      	ldrh	r3, [r7, #10]
 800364c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003650:	7a7b      	ldrb	r3, [r7, #9]
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003658:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	4313      	orrs	r3, r2
 8003662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003666:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	0d5b      	lsrs	r3, r3, #21
 8003672:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <I2C_TransferConfig+0x60>)
 8003678:	430b      	orrs	r3, r1
 800367a:	43db      	mvns	r3, r3
 800367c:	ea02 0103 	and.w	r1, r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	03ff63ff 	.word	0x03ff63ff

0800369c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d138      	bne.n	8003724 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036bc:	2302      	movs	r3, #2
 80036be:	e032      	b.n	8003726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2224      	movs	r2, #36	; 0x24
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003732:	b480      	push	{r7}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b20      	cmp	r3, #32
 8003746:	d139      	bne.n	80037bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003752:	2302      	movs	r3, #2
 8003754:	e033      	b.n	80037be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2224      	movs	r2, #36	; 0x24
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003784:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
  }
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80037d4:	4b29      	ldr	r3, [pc, #164]	; (800387c <HAL_PWREx_ConfigSupply+0xb0>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	2b06      	cmp	r3, #6
 80037de:	d00a      	beq.n	80037f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037e0:	4b26      	ldr	r3, [pc, #152]	; (800387c <HAL_PWREx_ConfigSupply+0xb0>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d001      	beq.n	80037f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e040      	b.n	8003874 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e03e      	b.n	8003874 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037f6:	4b21      	ldr	r3, [pc, #132]	; (800387c <HAL_PWREx_ConfigSupply+0xb0>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80037fe:	491f      	ldr	r1, [pc, #124]	; (800387c <HAL_PWREx_ConfigSupply+0xb0>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4313      	orrs	r3, r2
 8003804:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003806:	f7fe fb35 	bl	8001e74 <HAL_GetTick>
 800380a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800380c:	e009      	b.n	8003822 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800380e:	f7fe fb31 	bl	8001e74 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800381c:	d901      	bls.n	8003822 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e028      	b.n	8003874 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003822:	4b16      	ldr	r3, [pc, #88]	; (800387c <HAL_PWREx_ConfigSupply+0xb0>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800382a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382e:	d1ee      	bne.n	800380e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b1e      	cmp	r3, #30
 8003834:	d008      	beq.n	8003848 <HAL_PWREx_ConfigSupply+0x7c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b2e      	cmp	r3, #46	; 0x2e
 800383a:	d005      	beq.n	8003848 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b1d      	cmp	r3, #29
 8003840:	d002      	beq.n	8003848 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b2d      	cmp	r3, #45	; 0x2d
 8003846:	d114      	bne.n	8003872 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003848:	f7fe fb14 	bl	8001e74 <HAL_GetTick>
 800384c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800384e:	e009      	b.n	8003864 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003850:	f7fe fb10 	bl	8001e74 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800385e:	d901      	bls.n	8003864 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e007      	b.n	8003874 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_PWREx_ConfigSupply+0xb0>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003870:	d1ee      	bne.n	8003850 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	58024800 	.word	0x58024800

08003880 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08c      	sub	sp, #48	; 0x30
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f000 bc1d 	b.w	80040ce <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8087 	beq.w	80039b0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a2:	4b99      	ldr	r3, [pc, #612]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038ac:	4b96      	ldr	r3, [pc, #600]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d007      	beq.n	80038c8 <HAL_RCC_OscConfig+0x48>
 80038b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ba:	2b18      	cmp	r3, #24
 80038bc:	d110      	bne.n	80038e0 <HAL_RCC_OscConfig+0x60>
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d10b      	bne.n	80038e0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c8:	4b8f      	ldr	r3, [pc, #572]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d06c      	beq.n	80039ae <HAL_RCC_OscConfig+0x12e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d168      	bne.n	80039ae <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e3f6      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e8:	d106      	bne.n	80038f8 <HAL_RCC_OscConfig+0x78>
 80038ea:	4b87      	ldr	r3, [pc, #540]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a86      	ldr	r2, [pc, #536]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 80038f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e02e      	b.n	8003956 <HAL_RCC_OscConfig+0xd6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10c      	bne.n	800391a <HAL_RCC_OscConfig+0x9a>
 8003900:	4b81      	ldr	r3, [pc, #516]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a80      	ldr	r2, [pc, #512]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a7d      	ldr	r2, [pc, #500]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	e01d      	b.n	8003956 <HAL_RCC_OscConfig+0xd6>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003922:	d10c      	bne.n	800393e <HAL_RCC_OscConfig+0xbe>
 8003924:	4b78      	ldr	r3, [pc, #480]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a77      	ldr	r2, [pc, #476]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 800392a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b75      	ldr	r3, [pc, #468]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a74      	ldr	r2, [pc, #464]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	e00b      	b.n	8003956 <HAL_RCC_OscConfig+0xd6>
 800393e:	4b72      	ldr	r3, [pc, #456]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a71      	ldr	r2, [pc, #452]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a6e      	ldr	r2, [pc, #440]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003954:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d013      	beq.n	8003986 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fe fa89 	bl	8001e74 <HAL_GetTick>
 8003962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003966:	f7fe fa85 	bl	8001e74 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b64      	cmp	r3, #100	; 0x64
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e3aa      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003978:	4b63      	ldr	r3, [pc, #396]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0xe6>
 8003984:	e014      	b.n	80039b0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fe fa75 	bl	8001e74 <HAL_GetTick>
 800398a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800398e:	f7fe fa71 	bl	8001e74 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b64      	cmp	r3, #100	; 0x64
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e396      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039a0:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f0      	bne.n	800398e <HAL_RCC_OscConfig+0x10e>
 80039ac:	e000      	b.n	80039b0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80cb 	beq.w	8003b54 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039be:	4b52      	ldr	r3, [pc, #328]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039c6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039c8:	4b4f      	ldr	r3, [pc, #316]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d007      	beq.n	80039e4 <HAL_RCC_OscConfig+0x164>
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	2b18      	cmp	r3, #24
 80039d8:	d156      	bne.n	8003a88 <HAL_RCC_OscConfig+0x208>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d151      	bne.n	8003a88 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e4:	4b48      	ldr	r3, [pc, #288]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_OscConfig+0x17c>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e368      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039fc:	4b42      	ldr	r3, [pc, #264]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 0219 	bic.w	r2, r3, #25
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	493f      	ldr	r1, [pc, #252]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a0e:	f7fe fa31 	bl	8001e74 <HAL_GetTick>
 8003a12:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a16:	f7fe fa2d 	bl	8001e74 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e352      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a28:	4b37      	ldr	r3, [pc, #220]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a34:	f7fe fa4e 	bl	8001ed4 <HAL_GetREVID>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d817      	bhi.n	8003a72 <HAL_RCC_OscConfig+0x1f2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d108      	bne.n	8003a5c <HAL_RCC_OscConfig+0x1dc>
 8003a4a:	4b2f      	ldr	r3, [pc, #188]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a52:	4a2d      	ldr	r2, [pc, #180]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a58:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a5a:	e07b      	b.n	8003b54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5c:	4b2a      	ldr	r3, [pc, #168]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	031b      	lsls	r3, r3, #12
 8003a6a:	4927      	ldr	r1, [pc, #156]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a70:	e070      	b.n	8003b54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a72:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	061b      	lsls	r3, r3, #24
 8003a80:	4921      	ldr	r1, [pc, #132]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a86:	e065      	b.n	8003b54 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d048      	beq.n	8003b22 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a90:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 0219 	bic.w	r2, r3, #25
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	491a      	ldr	r1, [pc, #104]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fe f9e7 	bl	8001e74 <HAL_GetTick>
 8003aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aaa:	f7fe f9e3 	bl	8001e74 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e308      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac8:	f7fe fa04 	bl	8001ed4 <HAL_GetREVID>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d81a      	bhi.n	8003b0c <HAL_RCC_OscConfig+0x28c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d108      	bne.n	8003af0 <HAL_RCC_OscConfig+0x270>
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ae6:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aec:	6053      	str	r3, [r2, #4]
 8003aee:	e031      	b.n	8003b54 <HAL_RCC_OscConfig+0x2d4>
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	031b      	lsls	r3, r3, #12
 8003afe:	4902      	ldr	r1, [pc, #8]	; (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
 8003b04:	e026      	b.n	8003b54 <HAL_RCC_OscConfig+0x2d4>
 8003b06:	bf00      	nop
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	4b9a      	ldr	r3, [pc, #616]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	061b      	lsls	r3, r3, #24
 8003b1a:	4997      	ldr	r1, [pc, #604]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
 8003b20:	e018      	b.n	8003b54 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b22:	4b95      	ldr	r3, [pc, #596]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a94      	ldr	r2, [pc, #592]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7fe f9a1 	bl	8001e74 <HAL_GetTick>
 8003b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b36:	f7fe f99d 	bl	8001e74 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e2c2      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b48:	4b8b      	ldr	r3, [pc, #556]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f0      	bne.n	8003b36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80a9 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b62:	4b85      	ldr	r3, [pc, #532]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b6c:	4b82      	ldr	r3, [pc, #520]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d007      	beq.n	8003b88 <HAL_RCC_OscConfig+0x308>
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b18      	cmp	r3, #24
 8003b7c:	d13a      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x374>
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d135      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b88:	4b7b      	ldr	r3, [pc, #492]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x320>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	2b80      	cmp	r3, #128	; 0x80
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e296      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ba0:	f7fe f998 	bl	8001ed4 <HAL_GetREVID>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d817      	bhi.n	8003bde <HAL_RCC_OscConfig+0x35e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d108      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x348>
 8003bb6:	4b70      	ldr	r3, [pc, #448]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bbe:	4a6e      	ldr	r2, [pc, #440]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003bc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bc4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bc6:	e075      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bc8:	4b6b      	ldr	r3, [pc, #428]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	069b      	lsls	r3, r3, #26
 8003bd6:	4968      	ldr	r1, [pc, #416]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bdc:	e06a      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bde:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	061b      	lsls	r3, r3, #24
 8003bec:	4962      	ldr	r1, [pc, #392]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bf2:	e05f      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d042      	beq.n	8003c82 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bfc:	4b5e      	ldr	r3, [pc, #376]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a5d      	ldr	r2, [pc, #372]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe f934 	bl	8001e74 <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c10:	f7fe f930 	bl	8001e74 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e255      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c22:	4b55      	ldr	r3, [pc, #340]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c2e:	f7fe f951 	bl	8001ed4 <HAL_GetREVID>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d817      	bhi.n	8003c6c <HAL_RCC_OscConfig+0x3ec>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d108      	bne.n	8003c56 <HAL_RCC_OscConfig+0x3d6>
 8003c44:	4b4c      	ldr	r3, [pc, #304]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c4c:	4a4a      	ldr	r2, [pc, #296]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c52:	6053      	str	r3, [r2, #4]
 8003c54:	e02e      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
 8003c56:	4b48      	ldr	r3, [pc, #288]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	069b      	lsls	r3, r3, #26
 8003c64:	4944      	ldr	r1, [pc, #272]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
 8003c6a:	e023      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
 8003c6c:	4b42      	ldr	r3, [pc, #264]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	493f      	ldr	r1, [pc, #252]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60cb      	str	r3, [r1, #12]
 8003c80:	e018      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c82:	4b3d      	ldr	r3, [pc, #244]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3c      	ldr	r2, [pc, #240]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fe f8f1 	bl	8001e74 <HAL_GetTick>
 8003c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c96:	f7fe f8ed 	bl	8001e74 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e212      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ca8:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d036      	beq.n	8003d2e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d019      	beq.n	8003cfc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fe f8ce 	bl	8001e74 <HAL_GetTick>
 8003cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7fe f8ca 	bl	8001e74 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1ef      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x45c>
 8003cfa:	e018      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d00:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fe f8b4 	bl	8001e74 <HAL_GetTick>
 8003d0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d10:	f7fe f8b0 	bl	8001e74 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e1d5      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d039      	beq.n	8003dae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01c      	beq.n	8003d7c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a0c      	ldr	r2, [pc, #48]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d4e:	f7fe f891 	bl	8001e74 <HAL_GetTick>
 8003d52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d56:	f7fe f88d 	bl	8001e74 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1b2      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x4d6>
 8003d74:	e01b      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
 8003d76:	bf00      	nop
 8003d78:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d7c:	4b9b      	ldr	r3, [pc, #620]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a9a      	ldr	r2, [pc, #616]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d88:	f7fe f874 	bl	8001e74 <HAL_GetTick>
 8003d8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d90:	f7fe f870 	bl	8001e74 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e195      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003da2:	4b92      	ldr	r3, [pc, #584]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8081 	beq.w	8003ebe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dbc:	4b8c      	ldr	r3, [pc, #560]	; (8003ff0 <HAL_RCC_OscConfig+0x770>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a8b      	ldr	r2, [pc, #556]	; (8003ff0 <HAL_RCC_OscConfig+0x770>)
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc8:	f7fe f854 	bl	8001e74 <HAL_GetTick>
 8003dcc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dd0:	f7fe f850 	bl	8001e74 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e175      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de2:	4b83      	ldr	r3, [pc, #524]	; (8003ff0 <HAL_RCC_OscConfig+0x770>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d106      	bne.n	8003e04 <HAL_RCC_OscConfig+0x584>
 8003df6:	4b7d      	ldr	r3, [pc, #500]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a7c      	ldr	r2, [pc, #496]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
 8003e02:	e02d      	b.n	8003e60 <HAL_RCC_OscConfig+0x5e0>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10c      	bne.n	8003e26 <HAL_RCC_OscConfig+0x5a6>
 8003e0c:	4b77      	ldr	r3, [pc, #476]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	4a76      	ldr	r2, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
 8003e18:	4b74      	ldr	r3, [pc, #464]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	4a73      	ldr	r2, [pc, #460]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e1e:	f023 0304 	bic.w	r3, r3, #4
 8003e22:	6713      	str	r3, [r2, #112]	; 0x70
 8003e24:	e01c      	b.n	8003e60 <HAL_RCC_OscConfig+0x5e0>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x5c8>
 8003e2e:	4b6f      	ldr	r3, [pc, #444]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	4a6e      	ldr	r2, [pc, #440]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e34:	f043 0304 	orr.w	r3, r3, #4
 8003e38:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3a:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	4a6b      	ldr	r2, [pc, #428]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6713      	str	r3, [r2, #112]	; 0x70
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0x5e0>
 8003e48:	4b68      	ldr	r3, [pc, #416]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	4a67      	ldr	r2, [pc, #412]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70
 8003e54:	4b65      	ldr	r3, [pc, #404]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a64      	ldr	r2, [pc, #400]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e5a:	f023 0304 	bic.w	r3, r3, #4
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7fe f804 	bl	8001e74 <HAL_GetTick>
 8003e6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7fe f800 	bl	8001e74 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e123      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e86:	4b59      	ldr	r3, [pc, #356]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ee      	beq.n	8003e70 <HAL_RCC_OscConfig+0x5f0>
 8003e92:	e014      	b.n	8003ebe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7fd ffee 	bl	8001e74 <HAL_GetTick>
 8003e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9c:	f7fd ffea 	bl	8001e74 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e10d      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eb2:	4b4e      	ldr	r3, [pc, #312]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ee      	bne.n	8003e9c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8102 	beq.w	80040cc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ec8:	4b48      	ldr	r3, [pc, #288]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ed0:	2b18      	cmp	r3, #24
 8003ed2:	f000 80bd 	beq.w	8004050 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	f040 809e 	bne.w	800401c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee0:	4b42      	ldr	r3, [pc, #264]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a41      	ldr	r2, [pc, #260]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fd ffc2 	bl	8001e74 <HAL_GetTick>
 8003ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef4:	f7fd ffbe 	bl	8001e74 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e0e3      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f06:	4b39      	ldr	r3, [pc, #228]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f16:	4b37      	ldr	r3, [pc, #220]	; (8003ff4 <HAL_RCC_OscConfig+0x774>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f22:	0112      	lsls	r2, r2, #4
 8003f24:	430a      	orrs	r2, r1
 8003f26:	4931      	ldr	r1, [pc, #196]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	3b01      	subs	r3, #1
 8003f32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	025b      	lsls	r3, r3, #9
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	3b01      	subs	r3, #1
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	3b01      	subs	r3, #1
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f5c:	4923      	ldr	r1, [pc, #140]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003f62:	4b22      	ldr	r3, [pc, #136]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	4a21      	ldr	r2, [pc, #132]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f6e:	4b1f      	ldr	r3, [pc, #124]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f72:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <HAL_RCC_OscConfig+0x778>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f7a:	00d2      	lsls	r2, r2, #3
 8003f7c:	491b      	ldr	r1, [pc, #108]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f82:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	f023 020c 	bic.w	r2, r3, #12
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	4917      	ldr	r1, [pc, #92]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f94:	4b15      	ldr	r3, [pc, #84]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	f023 0202 	bic.w	r2, r3, #2
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	4912      	ldr	r1, [pc, #72]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	4a10      	ldr	r2, [pc, #64]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	4a0d      	ldr	r2, [pc, #52]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	4a07      	ldr	r2, [pc, #28]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a04      	ldr	r2, [pc, #16]	; (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fd ff47 	bl	8001e74 <HAL_GetTick>
 8003fe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fe8:	e011      	b.n	800400e <HAL_RCC_OscConfig+0x78e>
 8003fea:	bf00      	nop
 8003fec:	58024400 	.word	0x58024400
 8003ff0:	58024800 	.word	0x58024800
 8003ff4:	fffffc0c 	.word	0xfffffc0c
 8003ff8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fd ff3a 	bl	8001e74 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e05f      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800400e:	4b32      	ldr	r3, [pc, #200]	; (80040d8 <HAL_RCC_OscConfig+0x858>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x77c>
 800401a:	e057      	b.n	80040cc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <HAL_RCC_OscConfig+0x858>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <HAL_RCC_OscConfig+0x858>)
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd ff24 	bl	8001e74 <HAL_GetTick>
 800402c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004030:	f7fd ff20 	bl	8001e74 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e045      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004042:	4b25      	ldr	r3, [pc, #148]	; (80040d8 <HAL_RCC_OscConfig+0x858>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x7b0>
 800404e:	e03d      	b.n	80040cc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004050:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <HAL_RCC_OscConfig+0x858>)
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <HAL_RCC_OscConfig+0x858>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	2b01      	cmp	r3, #1
 8004062:	d031      	beq.n	80040c8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f003 0203 	and.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d12a      	bne.n	80040c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d122      	bne.n	80040c8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d11a      	bne.n	80040c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	0a5b      	lsrs	r3, r3, #9
 8004096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d111      	bne.n	80040c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d108      	bne.n	80040c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	0e1b      	lsrs	r3, r3, #24
 80040ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3730      	adds	r7, #48	; 0x30
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	58024400 	.word	0x58024400

080040dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e19c      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f0:	4b8a      	ldr	r3, [pc, #552]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d910      	bls.n	8004120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b87      	ldr	r3, [pc, #540]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 020f 	bic.w	r2, r3, #15
 8004106:	4985      	ldr	r1, [pc, #532]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b83      	ldr	r3, [pc, #524]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e184      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d010      	beq.n	800414e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	4b7b      	ldr	r3, [pc, #492]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004138:	429a      	cmp	r2, r3
 800413a:	d908      	bls.n	800414e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800413c:	4b78      	ldr	r3, [pc, #480]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	4975      	ldr	r1, [pc, #468]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800414a:	4313      	orrs	r3, r2
 800414c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d010      	beq.n	800417c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	4b70      	ldr	r3, [pc, #448]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004166:	429a      	cmp	r2, r3
 8004168:	d908      	bls.n	800417c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800416a:	4b6d      	ldr	r3, [pc, #436]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	496a      	ldr	r1, [pc, #424]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004178:	4313      	orrs	r3, r2
 800417a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	4b64      	ldr	r3, [pc, #400]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004194:	429a      	cmp	r2, r3
 8004196:	d908      	bls.n	80041aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004198:	4b61      	ldr	r3, [pc, #388]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	495e      	ldr	r1, [pc, #376]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d010      	beq.n	80041d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	4b59      	ldr	r3, [pc, #356]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d908      	bls.n	80041d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041c6:	4b56      	ldr	r3, [pc, #344]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4953      	ldr	r1, [pc, #332]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d010      	beq.n	8004206 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	4b4d      	ldr	r3, [pc, #308]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d908      	bls.n	8004206 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f4:	4b4a      	ldr	r3, [pc, #296]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f023 020f 	bic.w	r2, r3, #15
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4947      	ldr	r1, [pc, #284]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004202:	4313      	orrs	r3, r2
 8004204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d055      	beq.n	80042be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004212:	4b43      	ldr	r3, [pc, #268]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	4940      	ldr	r1, [pc, #256]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004220:	4313      	orrs	r3, r2
 8004222:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d107      	bne.n	800423c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800422c:	4b3c      	ldr	r3, [pc, #240]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d121      	bne.n	800427c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0f6      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b03      	cmp	r3, #3
 8004242:	d107      	bne.n	8004254 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004244:	4b36      	ldr	r3, [pc, #216]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d115      	bne.n	800427c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0ea      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d107      	bne.n	800426c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800425c:	4b30      	ldr	r3, [pc, #192]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d109      	bne.n	800427c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0de      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800426c:	4b2c      	ldr	r3, [pc, #176]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0d6      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800427c:	4b28      	ldr	r3, [pc, #160]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f023 0207 	bic.w	r2, r3, #7
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4925      	ldr	r1, [pc, #148]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428e:	f7fd fdf1 	bl	8001e74 <HAL_GetTick>
 8004292:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004294:	e00a      	b.n	80042ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004296:	f7fd fded 	bl	8001e74 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e0be      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ac:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d1eb      	bne.n	8004296 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d010      	beq.n	80042ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	4b14      	ldr	r3, [pc, #80]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d208      	bcs.n	80042ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042da:	4b11      	ldr	r3, [pc, #68]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f023 020f 	bic.w	r2, r3, #15
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	490e      	ldr	r1, [pc, #56]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d214      	bcs.n	8004324 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b08      	ldr	r3, [pc, #32]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 020f 	bic.w	r2, r3, #15
 8004302:	4906      	ldr	r1, [pc, #24]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	4313      	orrs	r3, r2
 8004308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d005      	beq.n	8004324 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e086      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
 800431c:	52002000 	.word	0x52002000
 8004320:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d010      	beq.n	8004352 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	4b3f      	ldr	r3, [pc, #252]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800433c:	429a      	cmp	r2, r3
 800433e:	d208      	bcs.n	8004352 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004340:	4b3c      	ldr	r3, [pc, #240]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	4939      	ldr	r1, [pc, #228]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 800434e:	4313      	orrs	r3, r2
 8004350:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d010      	beq.n	8004380 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	4b34      	ldr	r3, [pc, #208]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800436a:	429a      	cmp	r2, r3
 800436c:	d208      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	492e      	ldr	r1, [pc, #184]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 800437c:	4313      	orrs	r3, r2
 800437e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d010      	beq.n	80043ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	4b28      	ldr	r3, [pc, #160]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004398:	429a      	cmp	r2, r3
 800439a:	d208      	bcs.n	80043ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	4922      	ldr	r1, [pc, #136]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d010      	beq.n	80043dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d208      	bcs.n	80043dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043ca:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	4917      	ldr	r1, [pc, #92]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043dc:	f000 f834 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	4912      	ldr	r1, [pc, #72]	; (8004438 <HAL_RCC_ClockConfig+0x35c>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
 80043f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043fa:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <HAL_RCC_ClockConfig+0x35c>)
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
 8004410:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_RCC_ClockConfig+0x360>)
 8004412:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004414:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <HAL_RCC_ClockConfig+0x364>)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <HAL_RCC_ClockConfig+0x368>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fcde 	bl	8001de0 <HAL_InitTick>
 8004424:	4603      	mov	r3, r0
 8004426:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	58024400 	.word	0x58024400
 8004438:	0800cf2c 	.word	0x0800cf2c
 800443c:	24000004 	.word	0x24000004
 8004440:	24000000 	.word	0x24000000
 8004444:	24000020 	.word	0x24000020

08004448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800444e:	4bb3      	ldr	r3, [pc, #716]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004456:	2b18      	cmp	r3, #24
 8004458:	f200 8155 	bhi.w	8004706 <HAL_RCC_GetSysClockFreq+0x2be>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <HAL_RCC_GetSysClockFreq+0x1c>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	080044c9 	.word	0x080044c9
 8004468:	08004707 	.word	0x08004707
 800446c:	08004707 	.word	0x08004707
 8004470:	08004707 	.word	0x08004707
 8004474:	08004707 	.word	0x08004707
 8004478:	08004707 	.word	0x08004707
 800447c:	08004707 	.word	0x08004707
 8004480:	08004707 	.word	0x08004707
 8004484:	080044ef 	.word	0x080044ef
 8004488:	08004707 	.word	0x08004707
 800448c:	08004707 	.word	0x08004707
 8004490:	08004707 	.word	0x08004707
 8004494:	08004707 	.word	0x08004707
 8004498:	08004707 	.word	0x08004707
 800449c:	08004707 	.word	0x08004707
 80044a0:	08004707 	.word	0x08004707
 80044a4:	080044f5 	.word	0x080044f5
 80044a8:	08004707 	.word	0x08004707
 80044ac:	08004707 	.word	0x08004707
 80044b0:	08004707 	.word	0x08004707
 80044b4:	08004707 	.word	0x08004707
 80044b8:	08004707 	.word	0x08004707
 80044bc:	08004707 	.word	0x08004707
 80044c0:	08004707 	.word	0x08004707
 80044c4:	080044fb 	.word	0x080044fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044c8:	4b94      	ldr	r3, [pc, #592]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044d4:	4b91      	ldr	r3, [pc, #580]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	08db      	lsrs	r3, r3, #3
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	4a90      	ldr	r2, [pc, #576]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
 80044e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80044e6:	e111      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044e8:	4b8d      	ldr	r3, [pc, #564]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044ea:	61bb      	str	r3, [r7, #24]
    break;
 80044ec:	e10e      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80044ee:	4b8d      	ldr	r3, [pc, #564]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044f0:	61bb      	str	r3, [r7, #24]
    break;
 80044f2:	e10b      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80044f4:	4b8c      	ldr	r3, [pc, #560]	; (8004728 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044f6:	61bb      	str	r3, [r7, #24]
    break;
 80044f8:	e108      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044fa:	4b88      	ldr	r3, [pc, #544]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004504:	4b85      	ldr	r3, [pc, #532]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800450e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004510:	4b82      	ldr	r3, [pc, #520]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800451a:	4b80      	ldr	r3, [pc, #512]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	08db      	lsrs	r3, r3, #3
 8004520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80e1 	beq.w	8004700 <HAL_RCC_GetSysClockFreq+0x2b8>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b02      	cmp	r3, #2
 8004542:	f000 8083 	beq.w	800464c <HAL_RCC_GetSysClockFreq+0x204>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b02      	cmp	r3, #2
 800454a:	f200 80a1 	bhi.w	8004690 <HAL_RCC_GetSysClockFreq+0x248>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x114>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d056      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x1c0>
 800455a:	e099      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800455c:	4b6f      	ldr	r3, [pc, #444]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d02d      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004568:	4b6c      	ldr	r3, [pc, #432]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	08db      	lsrs	r3, r3, #3
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	4a6b      	ldr	r2, [pc, #428]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
 8004578:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004592:	4b62      	ldr	r3, [pc, #392]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800472c <HAL_RCC_GetSysClockFreq+0x2e4>
 80045aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80045c2:	e087      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d6:	4b51      	ldr	r3, [pc, #324]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800472c <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004606:	e065      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004734 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b40      	ldr	r3, [pc, #256]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	ed97 6a02 	vldr	s12, [r7, #8]
 800462e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800472c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800464a:	e043      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004738 <HAL_RCC_GetSysClockFreq+0x2f0>
 800465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465e:	4b2f      	ldr	r3, [pc, #188]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004672:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800472c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800468e:	e021      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004734 <HAL_RCC_GetSysClockFreq+0x2ec>
 800469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a2:	4b1e      	ldr	r3, [pc, #120]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800472c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80046d4:	4b11      	ldr	r3, [pc, #68]	; (800471c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	0a5b      	lsrs	r3, r3, #9
 80046da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046de:	3301      	adds	r3, #1
 80046e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	ee07 3a90 	vmov	s15, r3
 80046e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f8:	ee17 3a90 	vmov	r3, s15
 80046fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80046fe:	e005      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	61bb      	str	r3, [r7, #24]
    break;
 8004704:	e002      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004706:	4b07      	ldr	r3, [pc, #28]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004708:	61bb      	str	r3, [r7, #24]
    break;
 800470a:	bf00      	nop
  }

  return sysclockfreq;
 800470c:	69bb      	ldr	r3, [r7, #24]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3724      	adds	r7, #36	; 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	58024400 	.word	0x58024400
 8004720:	03d09000 	.word	0x03d09000
 8004724:	003d0900 	.word	0x003d0900
 8004728:	007a1200 	.word	0x007a1200
 800472c:	46000000 	.word	0x46000000
 8004730:	4c742400 	.word	0x4c742400
 8004734:	4a742400 	.word	0x4a742400
 8004738:	4af42400 	.word	0x4af42400

0800473c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004742:	f7ff fe81 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8004746:	4602      	mov	r2, r0
 8004748:	4b10      	ldr	r3, [pc, #64]	; (800478c <HAL_RCC_GetHCLKFreq+0x50>)
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	0a1b      	lsrs	r3, r3, #8
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	490f      	ldr	r1, [pc, #60]	; (8004790 <HAL_RCC_GetHCLKFreq+0x54>)
 8004754:	5ccb      	ldrb	r3, [r1, r3]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004760:	4b0a      	ldr	r3, [pc, #40]	; (800478c <HAL_RCC_GetHCLKFreq+0x50>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	4a09      	ldr	r2, [pc, #36]	; (8004790 <HAL_RCC_GetHCLKFreq+0x54>)
 800476a:	5cd3      	ldrb	r3, [r2, r3]
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	fa22 f303 	lsr.w	r3, r2, r3
 8004776:	4a07      	ldr	r2, [pc, #28]	; (8004794 <HAL_RCC_GetHCLKFreq+0x58>)
 8004778:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800477a:	4a07      	ldr	r2, [pc, #28]	; (8004798 <HAL_RCC_GetHCLKFreq+0x5c>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004780:	4b04      	ldr	r3, [pc, #16]	; (8004794 <HAL_RCC_GetHCLKFreq+0x58>)
 8004782:	681b      	ldr	r3, [r3, #0]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	58024400 	.word	0x58024400
 8004790:	0800cf2c 	.word	0x0800cf2c
 8004794:	24000004 	.word	0x24000004
 8004798:	24000000 	.word	0x24000000

0800479c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047a0:	f7ff ffcc 	bl	800473c <HAL_RCC_GetHCLKFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4904      	ldr	r1, [pc, #16]	; (80047c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047bc:	4618      	mov	r0, r3
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	58024400 	.word	0x58024400
 80047c4:	0800cf2c 	.word	0x0800cf2c

080047c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80047cc:	f7ff ffb6 	bl	800473c <HAL_RCC_GetHCLKFreq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	4904      	ldr	r1, [pc, #16]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047de:	5ccb      	ldrb	r3, [r1, r3]
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	58024400 	.word	0x58024400
 80047f0:	0800cf2c 	.word	0x0800cf2c

080047f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047fc:	2300      	movs	r3, #0
 80047fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004800:	2300      	movs	r3, #0
 8004802:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d03f      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004814:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004818:	d02a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800481a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800481e:	d824      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004820:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004824:	d018      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800482a:	d81e      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004834:	d007      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004836:	e018      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004838:	4ba3      	ldr	r3, [pc, #652]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	4aa2      	ldr	r2, [pc, #648]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800483e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004842:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004844:	e015      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	2102      	movs	r1, #2
 800484c:	4618      	mov	r0, r3
 800484e:	f001 f9d5 	bl	8005bfc <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004856:	e00c      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3324      	adds	r3, #36	; 0x24
 800485c:	2102      	movs	r1, #2
 800485e:	4618      	mov	r0, r3
 8004860:	f001 fa7e 	bl	8005d60 <RCCEx_PLL3_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004868:	e003      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	75fb      	strb	r3, [r7, #23]
      break;
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004878:	4b93      	ldr	r3, [pc, #588]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800487a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004884:	4990      	ldr	r1, [pc, #576]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	650b      	str	r3, [r1, #80]	; 0x50
 800488a:	e001      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d03d      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d826      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80048a4:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	080048c1 	.word	0x080048c1
 80048b0:	080048cf 	.word	0x080048cf
 80048b4:	080048e1 	.word	0x080048e1
 80048b8:	080048f9 	.word	0x080048f9
 80048bc:	080048f9 	.word	0x080048f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c0:	4b81      	ldr	r3, [pc, #516]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	4a80      	ldr	r2, [pc, #512]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048cc:	e015      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3304      	adds	r3, #4
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 f991 	bl	8005bfc <RCCEx_PLL2_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048de:	e00c      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3324      	adds	r3, #36	; 0x24
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 fa3a 	bl	8005d60 <RCCEx_PLL3_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048f0:	e003      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	75fb      	strb	r3, [r7, #23]
      break;
 80048f6:	e000      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80048f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004900:	4b71      	ldr	r3, [pc, #452]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004904:	f023 0207 	bic.w	r2, r3, #7
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490c:	496e      	ldr	r1, [pc, #440]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800490e:	4313      	orrs	r3, r2
 8004910:	650b      	str	r3, [r1, #80]	; 0x50
 8004912:	e001      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004914:	7dfb      	ldrb	r3, [r7, #23]
 8004916:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004920:	2b00      	cmp	r3, #0
 8004922:	d042      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492c:	d02b      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800492e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004932:	d825      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004934:	2bc0      	cmp	r3, #192	; 0xc0
 8004936:	d028      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004938:	2bc0      	cmp	r3, #192	; 0xc0
 800493a:	d821      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800493c:	2b80      	cmp	r3, #128	; 0x80
 800493e:	d016      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004940:	2b80      	cmp	r3, #128	; 0x80
 8004942:	d81d      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004948:	2b40      	cmp	r3, #64	; 0x40
 800494a:	d007      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800494c:	e018      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800494e:	4b5e      	ldr	r3, [pc, #376]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	4a5d      	ldr	r2, [pc, #372]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004958:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800495a:	e017      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f001 f94a 	bl	8005bfc <RCCEx_PLL2_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800496c:	e00e      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3324      	adds	r3, #36	; 0x24
 8004972:	2100      	movs	r1, #0
 8004974:	4618      	mov	r0, r3
 8004976:	f001 f9f3 	bl	8005d60 <RCCEx_PLL3_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800497e:	e005      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	75fb      	strb	r3, [r7, #23]
      break;
 8004984:	e002      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004986:	bf00      	nop
 8004988:	e000      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800498a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800498c:	7dfb      	ldrb	r3, [r7, #23]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004992:	4b4d      	ldr	r3, [pc, #308]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004996:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499e:	494a      	ldr	r1, [pc, #296]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	650b      	str	r3, [r1, #80]	; 0x50
 80049a4:	e001      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d049      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049c0:	d030      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80049c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049c6:	d82a      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80049c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049cc:	d02c      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80049ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049d2:	d824      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80049d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d8:	d018      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80049da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049de:	d81e      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80049e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e8:	d007      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x206>
 80049ea:	e018      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ec:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	4a35      	ldr	r2, [pc, #212]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049f8:	e017      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3304      	adds	r3, #4
 80049fe:	2100      	movs	r1, #0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 f8fb 	bl	8005bfc <RCCEx_PLL2_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a0a:	e00e      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3324      	adds	r3, #36	; 0x24
 8004a10:	2100      	movs	r1, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 f9a4 	bl	8005d60 <RCCEx_PLL3_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a1c:	e005      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	75fb      	strb	r3, [r7, #23]
      break;
 8004a22:	e002      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a24:	bf00      	nop
 8004a26:	e000      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a30:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a3e:	4922      	ldr	r1, [pc, #136]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	658b      	str	r3, [r1, #88]	; 0x58
 8004a44:	e001      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
 8004a48:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d04b      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a60:	d030      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004a62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a66:	d82a      	bhi.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a6c:	d02e      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004a6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a72:	d824      	bhi.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a78:	d018      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a7e:	d81e      	bhi.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a88:	d007      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004a8a:	e018      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	4a0d      	ldr	r2, [pc, #52]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a98:	e019      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 f8ab 	bl	8005bfc <RCCEx_PLL2_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004aaa:	e010      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3324      	adds	r3, #36	; 0x24
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 f954 	bl	8005d60 <RCCEx_PLL3_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004abc:	e007      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac2:	e004      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004ac4:	bf00      	nop
 8004ac6:	e002      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004ac8:	58024400 	.word	0x58024400
      break;
 8004acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ad4:	4b99      	ldr	r3, [pc, #612]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ae2:	4996      	ldr	r1, [pc, #600]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	658b      	str	r3, [r1, #88]	; 0x58
 8004ae8:	e001      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aea:	7dfb      	ldrb	r3, [r7, #23]
 8004aec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d032      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afe:	2b30      	cmp	r3, #48	; 0x30
 8004b00:	d01c      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004b02:	2b30      	cmp	r3, #48	; 0x30
 8004b04:	d817      	bhi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d00c      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d813      	bhi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d016      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004b12:	2b10      	cmp	r3, #16
 8004b14:	d10f      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b16:	4b89      	ldr	r3, [pc, #548]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	4a88      	ldr	r2, [pc, #544]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b22:	e00e      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3304      	adds	r3, #4
 8004b28:	2102      	movs	r1, #2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f001 f866 	bl	8005bfc <RCCEx_PLL2_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b34:	e005      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	75fb      	strb	r3, [r7, #23]
      break;
 8004b3a:	e002      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004b3c:	bf00      	nop
 8004b3e:	e000      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004b40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b42:	7dfb      	ldrb	r3, [r7, #23]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b48:	4b7c      	ldr	r3, [pc, #496]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b54:	4979      	ldr	r1, [pc, #484]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b5a:	e001      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
 8004b5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d047      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b74:	d030      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b7a:	d82a      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004b7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b80:	d02c      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004b82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b86:	d824      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b8c:	d018      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b92:	d81e      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9c:	d007      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004b9e:	e018      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba0:	4b66      	ldr	r3, [pc, #408]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	4a65      	ldr	r2, [pc, #404]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004baa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bac:	e017      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 f821 	bl	8005bfc <RCCEx_PLL2_Config>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bbe:	e00e      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3324      	adds	r3, #36	; 0x24
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 f8ca 	bl	8005d60 <RCCEx_PLL3_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bd0:	e005      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd6:	e002      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004bd8:	bf00      	nop
 8004bda:	e000      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004be4:	4b55      	ldr	r3, [pc, #340]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf0:	4952      	ldr	r1, [pc, #328]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	650b      	str	r3, [r1, #80]	; 0x50
 8004bf6:	e001      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d049      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c10:	d02e      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c16:	d828      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c1c:	d02a      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004c1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c22:	d822      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c28:	d026      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004c2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c2e:	d81c      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c34:	d010      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004c36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c3a:	d816      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01d      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c44:	d111      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 ffd5 	bl	8005bfc <RCCEx_PLL2_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c56:	e012      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3324      	adds	r3, #36	; 0x24
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 f87e 	bl	8005d60 <RCCEx_PLL3_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c68:	e009      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6e:	e006      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004c70:	bf00      	nop
 8004c72:	e004      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004c74:	bf00      	nop
 8004c76:	e002      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004c78:	bf00      	nop
 8004c7a:	e000      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c7e:	7dfb      	ldrb	r3, [r7, #23]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d109      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c84:	4b2d      	ldr	r3, [pc, #180]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c88:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c90:	492a      	ldr	r1, [pc, #168]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	650b      	str	r3, [r1, #80]	; 0x50
 8004c96:	e001      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
 8004c9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d04d      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cb2:	d02e      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cb8:	d828      	bhi.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbe:	d02a      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc4:	d822      	bhi.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004cc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cca:	d026      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004ccc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cd0:	d81c      	bhi.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd6:	d010      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cdc:	d816      	bhi.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01d      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ce6:	d111      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3304      	adds	r3, #4
 8004cec:	2101      	movs	r1, #1
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 ff84 	bl	8005bfc <RCCEx_PLL2_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004cf8:	e012      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3324      	adds	r3, #36	; 0x24
 8004cfe:	2101      	movs	r1, #1
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 f82d 	bl	8005d60 <RCCEx_PLL3_Config>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d0a:	e009      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d10:	e006      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d12:	bf00      	nop
 8004d14:	e004      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d26:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d34:	4901      	ldr	r1, [pc, #4]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	658b      	str	r3, [r1, #88]	; 0x58
 8004d3a:	e003      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
 8004d42:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d02f      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d58:	d00e      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d5e:	d814      	bhi.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d015      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d68:	d10f      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d6a:	4baf      	ldr	r3, [pc, #700]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	4aae      	ldr	r2, [pc, #696]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d76:	e00c      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 ff3c 	bl	8005bfc <RCCEx_PLL2_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d88:	e003      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8e:	e000      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d98:	4ba3      	ldr	r3, [pc, #652]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da4:	49a0      	ldr	r1, [pc, #640]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	650b      	str	r3, [r1, #80]	; 0x50
 8004daa:	e001      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
 8004dae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d032      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d81b      	bhi.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004dc4:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004e03 	.word	0x08004e03
 8004dd0:	08004ddd 	.word	0x08004ddd
 8004dd4:	08004deb 	.word	0x08004deb
 8004dd8:	08004e03 	.word	0x08004e03
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ddc:	4b92      	ldr	r3, [pc, #584]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	4a91      	ldr	r2, [pc, #580]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004de8:	e00c      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3304      	adds	r3, #4
 8004dee:	2102      	movs	r1, #2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 ff03 	bl	8005bfc <RCCEx_PLL2_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004dfa:	e003      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8004e00:	e000      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e0a:	4b87      	ldr	r3, [pc, #540]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0e:	f023 0203 	bic.w	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	4984      	ldr	r1, [pc, #528]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e1c:	e001      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
 8004e20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8086 	beq.w	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e30:	4b7e      	ldr	r3, [pc, #504]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a7d      	ldr	r2, [pc, #500]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e3c:	f7fd f81a 	bl	8001e74 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e42:	e009      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e44:	f7fd f816 	bl	8001e74 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	; 0x64
 8004e50:	d902      	bls.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	75fb      	strb	r3, [r7, #23]
        break;
 8004e56:	e005      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e58:	4b74      	ldr	r3, [pc, #464]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0ef      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d166      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e6a:	4b6f      	ldr	r3, [pc, #444]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e74:	4053      	eors	r3, r2
 8004e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d013      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e7e:	4b6a      	ldr	r3, [pc, #424]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e86:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e88:	4b67      	ldr	r3, [pc, #412]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	4a66      	ldr	r2, [pc, #408]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e92:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e94:	4b64      	ldr	r3, [pc, #400]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	4a63      	ldr	r2, [pc, #396]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ea0:	4a61      	ldr	r2, [pc, #388]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb0:	d115      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7fc ffdf 	bl	8001e74 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb8:	e00b      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fc ffdb 	bl	8001e74 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d902      	bls.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	75fb      	strb	r3, [r7, #23]
            break;
 8004ed0:	e005      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed2:	4b55      	ldr	r3, [pc, #340]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0ed      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d126      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ef2:	d10d      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004ef4:	4b4c      	ldr	r3, [pc, #304]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f02:	0919      	lsrs	r1, r3, #4
 8004f04:	4b4a      	ldr	r3, [pc, #296]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004f06:	400b      	ands	r3, r1
 8004f08:	4947      	ldr	r1, [pc, #284]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	610b      	str	r3, [r1, #16]
 8004f0e:	e005      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004f10:	4b45      	ldr	r3, [pc, #276]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	4a44      	ldr	r2, [pc, #272]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f1a:	6113      	str	r3, [r2, #16]
 8004f1c:	4b42      	ldr	r3, [pc, #264]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f2a:	493f      	ldr	r1, [pc, #252]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	670b      	str	r3, [r1, #112]	; 0x70
 8004f30:	e004      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	75bb      	strb	r3, [r7, #22]
 8004f36:	e001      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8085 	beq.w	8005054 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f4e:	2b28      	cmp	r3, #40	; 0x28
 8004f50:	d866      	bhi.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004f52:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f58:	08005035 	.word	0x08005035
 8004f5c:	08005021 	.word	0x08005021
 8004f60:	08005021 	.word	0x08005021
 8004f64:	08005021 	.word	0x08005021
 8004f68:	08005021 	.word	0x08005021
 8004f6c:	08005021 	.word	0x08005021
 8004f70:	08005021 	.word	0x08005021
 8004f74:	08005021 	.word	0x08005021
 8004f78:	08004ffd 	.word	0x08004ffd
 8004f7c:	08005021 	.word	0x08005021
 8004f80:	08005021 	.word	0x08005021
 8004f84:	08005021 	.word	0x08005021
 8004f88:	08005021 	.word	0x08005021
 8004f8c:	08005021 	.word	0x08005021
 8004f90:	08005021 	.word	0x08005021
 8004f94:	08005021 	.word	0x08005021
 8004f98:	0800500f 	.word	0x0800500f
 8004f9c:	08005021 	.word	0x08005021
 8004fa0:	08005021 	.word	0x08005021
 8004fa4:	08005021 	.word	0x08005021
 8004fa8:	08005021 	.word	0x08005021
 8004fac:	08005021 	.word	0x08005021
 8004fb0:	08005021 	.word	0x08005021
 8004fb4:	08005021 	.word	0x08005021
 8004fb8:	08005035 	.word	0x08005035
 8004fbc:	08005021 	.word	0x08005021
 8004fc0:	08005021 	.word	0x08005021
 8004fc4:	08005021 	.word	0x08005021
 8004fc8:	08005021 	.word	0x08005021
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08005021 	.word	0x08005021
 8004fd4:	08005021 	.word	0x08005021
 8004fd8:	08005035 	.word	0x08005035
 8004fdc:	08005021 	.word	0x08005021
 8004fe0:	08005021 	.word	0x08005021
 8004fe4:	08005021 	.word	0x08005021
 8004fe8:	08005021 	.word	0x08005021
 8004fec:	08005021 	.word	0x08005021
 8004ff0:	08005021 	.word	0x08005021
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	08005035 	.word	0x08005035
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	2101      	movs	r1, #1
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fdfa 	bl	8005bfc <RCCEx_PLL2_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800500c:	e013      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3324      	adds	r3, #36	; 0x24
 8005012:	2101      	movs	r1, #1
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fea3 	bl	8005d60 <RCCEx_PLL3_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800501e:	e00a      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	75fb      	strb	r3, [r7, #23]
      break;
 8005024:	e007      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005026:	bf00      	nop
 8005028:	58024400 	.word	0x58024400
 800502c:	58024800 	.word	0x58024800
 8005030:	00ffffcf 	.word	0x00ffffcf
      break;
 8005034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005036:	7dfb      	ldrb	r3, [r7, #23]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800503c:	4b96      	ldr	r3, [pc, #600]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800503e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005040:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005048:	4993      	ldr	r1, [pc, #588]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800504a:	4313      	orrs	r3, r2
 800504c:	654b      	str	r3, [r1, #84]	; 0x54
 800504e:	e001      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d038      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005064:	2b05      	cmp	r3, #5
 8005066:	d821      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	080050b3 	.word	0x080050b3
 8005074:	08005089 	.word	0x08005089
 8005078:	0800509b 	.word	0x0800509b
 800507c:	080050b3 	.word	0x080050b3
 8005080:	080050b3 	.word	0x080050b3
 8005084:	080050b3 	.word	0x080050b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	2101      	movs	r1, #1
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fdb4 	bl	8005bfc <RCCEx_PLL2_Config>
 8005094:	4603      	mov	r3, r0
 8005096:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005098:	e00c      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3324      	adds	r3, #36	; 0x24
 800509e:	2101      	movs	r1, #1
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fe5d 	bl	8005d60 <RCCEx_PLL3_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050aa:	e003      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	75fb      	strb	r3, [r7, #23]
      break;
 80050b0:	e000      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80050b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050ba:	4b77      	ldr	r3, [pc, #476]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	f023 0207 	bic.w	r2, r3, #7
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c6:	4974      	ldr	r1, [pc, #464]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	654b      	str	r3, [r1, #84]	; 0x54
 80050cc:	e001      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
 80050d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d03a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e4:	2b05      	cmp	r3, #5
 80050e6:	d821      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005133 	.word	0x08005133
 80050f4:	08005109 	.word	0x08005109
 80050f8:	0800511b 	.word	0x0800511b
 80050fc:	08005133 	.word	0x08005133
 8005100:	08005133 	.word	0x08005133
 8005104:	08005133 	.word	0x08005133
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	2101      	movs	r1, #1
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fd74 	bl	8005bfc <RCCEx_PLL2_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005118:	e00c      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3324      	adds	r3, #36	; 0x24
 800511e:	2101      	movs	r1, #1
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fe1d 	bl	8005d60 <RCCEx_PLL3_Config>
 8005126:	4603      	mov	r3, r0
 8005128:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800512a:	e003      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	75fb      	strb	r3, [r7, #23]
      break;
 8005130:	e000      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005134:	7dfb      	ldrb	r3, [r7, #23]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800513a:	4b57      	ldr	r3, [pc, #348]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	f023 0207 	bic.w	r2, r3, #7
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005148:	4953      	ldr	r1, [pc, #332]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800514a:	4313      	orrs	r3, r2
 800514c:	658b      	str	r3, [r1, #88]	; 0x58
 800514e:	e001      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d04b      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800516a:	d02e      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800516c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005170:	d828      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005176:	d02a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517c:	d822      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800517e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005182:	d026      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005184:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005188:	d81c      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800518a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800518e:	d010      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005194:	d816      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01d      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800519a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800519e:	d111      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3304      	adds	r3, #4
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fd28 	bl	8005bfc <RCCEx_PLL2_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051b0:	e012      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3324      	adds	r3, #36	; 0x24
 80051b6:	2102      	movs	r1, #2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fdd1 	bl	8005d60 <RCCEx_PLL3_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051c2:	e009      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	75fb      	strb	r3, [r7, #23]
      break;
 80051c8:	e006      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80051ca:	bf00      	nop
 80051cc:	e004      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80051ce:	bf00      	nop
 80051d0:	e002      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80051d2:	bf00      	nop
 80051d4:	e000      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80051d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051de:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ec:	492a      	ldr	r1, [pc, #168]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	654b      	str	r3, [r1, #84]	; 0x54
 80051f2:	e001      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d04d      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800520a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800520e:	d02e      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005210:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005214:	d828      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521a:	d02a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800521c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005220:	d822      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005222:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005226:	d026      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005228:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800522c:	d81c      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800522e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005232:	d010      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005238:	d816      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01d      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800523e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005242:	d111      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	2100      	movs	r1, #0
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fcd6 	bl	8005bfc <RCCEx_PLL2_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005254:	e012      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3324      	adds	r3, #36	; 0x24
 800525a:	2102      	movs	r1, #2
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fd7f 	bl	8005d60 <RCCEx_PLL3_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005266:	e009      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	75fb      	strb	r3, [r7, #23]
      break;
 800526c:	e006      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800526e:	bf00      	nop
 8005270:	e004      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005272:	bf00      	nop
 8005274:	e002      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005276:	bf00      	nop
 8005278:	e000      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800527a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10c      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005282:	4b05      	ldr	r3, [pc, #20]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005290:	4901      	ldr	r1, [pc, #4]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005292:	4313      	orrs	r3, r2
 8005294:	658b      	str	r3, [r1, #88]	; 0x58
 8005296:	e003      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d04b      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052b6:	d02e      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80052b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052bc:	d828      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80052be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c2:	d02a      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80052c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c8:	d822      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80052ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052ce:	d026      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80052d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052d4:	d81c      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80052d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052da:	d010      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80052dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052e0:	d816      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01d      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80052e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ea:	d111      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	2100      	movs	r1, #0
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fc82 	bl	8005bfc <RCCEx_PLL2_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80052fc:	e012      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3324      	adds	r3, #36	; 0x24
 8005302:	2102      	movs	r1, #2
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fd2b 	bl	8005d60 <RCCEx_PLL3_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800530e:	e009      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	75fb      	strb	r3, [r7, #23]
      break;
 8005314:	e006      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005316:	bf00      	nop
 8005318:	e004      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800531a:	bf00      	nop
 800531c:	e002      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800531e:	bf00      	nop
 8005320:	e000      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800532a:	4b9d      	ldr	r3, [pc, #628]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800532c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005338:	4999      	ldr	r1, [pc, #612]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800533a:	4313      	orrs	r3, r2
 800533c:	658b      	str	r3, [r1, #88]	; 0x58
 800533e:	e001      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	7dfb      	ldrb	r3, [r7, #23]
 8005342:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535a:	d10a      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3324      	adds	r3, #36	; 0x24
 8005360:	2102      	movs	r1, #2
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fcfc 	bl	8005d60 <RCCEx_PLL3_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005372:	4b8b      	ldr	r3, [pc, #556]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005380:	4987      	ldr	r1, [pc, #540]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005382:	4313      	orrs	r3, r2
 8005384:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539c:	d10a      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3324      	adds	r3, #36	; 0x24
 80053a2:	2102      	movs	r1, #2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fcdb 	bl	8005d60 <RCCEx_PLL3_Config>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053b4:	4b7a      	ldr	r3, [pc, #488]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c2:	4977      	ldr	r1, [pc, #476]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d034      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053de:	d01d      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80053e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053e4:	d817      	bhi.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80053ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ee:	d009      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80053f0:	e011      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3304      	adds	r3, #4
 80053f6:	2100      	movs	r1, #0
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fbff 	bl	8005bfc <RCCEx_PLL2_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005402:	e00c      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3324      	adds	r3, #36	; 0x24
 8005408:	2102      	movs	r1, #2
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fca8 	bl	8005d60 <RCCEx_PLL3_Config>
 8005410:	4603      	mov	r3, r0
 8005412:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005414:	e003      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
      break;
 800541a:	e000      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800541c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800541e:	7dfb      	ldrb	r3, [r7, #23]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005424:	4b5e      	ldr	r3, [pc, #376]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005432:	495b      	ldr	r1, [pc, #364]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005434:	4313      	orrs	r3, r2
 8005436:	658b      	str	r3, [r1, #88]	; 0x58
 8005438:	e001      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543a:	7dfb      	ldrb	r3, [r7, #23]
 800543c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d033      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005450:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005454:	d01c      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005456:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800545a:	d816      	bhi.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800545c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005460:	d003      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005466:	d007      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005468:	e00f      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800546a:	4b4d      	ldr	r3, [pc, #308]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	4a4c      	ldr	r2, [pc, #304]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005476:	e00c      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3324      	adds	r3, #36	; 0x24
 800547c:	2101      	movs	r1, #1
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fc6e 	bl	8005d60 <RCCEx_PLL3_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005488:	e003      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	75fb      	strb	r3, [r7, #23]
      break;
 800548e:	e000      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005498:	4b41      	ldr	r3, [pc, #260]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800549a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a6:	493e      	ldr	r1, [pc, #248]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	654b      	str	r3, [r1, #84]	; 0x54
 80054ac:	e001      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
 80054b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d029      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80054c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ca:	d007      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80054cc:	e00f      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ce:	4b34      	ldr	r3, [pc, #208]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	4a33      	ldr	r2, [pc, #204]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80054da:	e00b      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	2102      	movs	r1, #2
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fb8a 	bl	8005bfc <RCCEx_PLL2_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80054ec:	e002      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
      break;
 80054f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054fa:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	4926      	ldr	r1, [pc, #152]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005508:	4313      	orrs	r3, r2
 800550a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800550c:	e001      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3324      	adds	r3, #36	; 0x24
 8005522:	2102      	movs	r1, #2
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fc1b 	bl	8005d60 <RCCEx_PLL3_Config>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d033      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005548:	d017      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800554a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800554e:	d811      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005554:	d013      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800555a:	d80b      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d010      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005564:	d106      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005566:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	4a0d      	ldr	r2, [pc, #52]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800556c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005572:	e007      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	75fb      	strb	r3, [r7, #23]
      break;
 8005578:	e004      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800557a:	bf00      	nop
 800557c:	e002      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10c      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005596:	4902      	ldr	r1, [pc, #8]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005598:	4313      	orrs	r3, r2
 800559a:	654b      	str	r3, [r1, #84]	; 0x54
 800559c:	e004      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800559e:	bf00      	nop
 80055a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055b4:	4b31      	ldr	r3, [pc, #196]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c0:	492e      	ldr	r1, [pc, #184]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80055d2:	4b2a      	ldr	r3, [pc, #168]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80055e0:	4926      	ldr	r1, [pc, #152]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d008      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055f2:	4b22      	ldr	r3, [pc, #136]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055fe:	491f      	ldr	r1, [pc, #124]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005600:	4313      	orrs	r3, r2
 8005602:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00d      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005610:	4b1a      	ldr	r3, [pc, #104]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	4a19      	ldr	r2, [pc, #100]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005616:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800561a:	6113      	str	r3, [r2, #16]
 800561c:	4b17      	ldr	r3, [pc, #92]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005626:	4915      	ldr	r1, [pc, #84]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005628:	4313      	orrs	r3, r2
 800562a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	da08      	bge.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005634:	4b11      	ldr	r3, [pc, #68]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005638:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005640:	490e      	ldr	r1, [pc, #56]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005642:	4313      	orrs	r3, r2
 8005644:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005652:	4b0a      	ldr	r3, [pc, #40]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005656:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005660:	4906      	ldr	r1, [pc, #24]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005662:	4313      	orrs	r3, r2
 8005664:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005666:	7dbb      	ldrb	r3, [r7, #22]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	e000      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	58024400 	.word	0x58024400

08005680 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005684:	f7ff f85a 	bl	800473c <HAL_RCC_GetHCLKFreq>
 8005688:	4602      	mov	r2, r0
 800568a:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	091b      	lsrs	r3, r3, #4
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	4904      	ldr	r1, [pc, #16]	; (80056a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005696:	5ccb      	ldrb	r3, [r1, r3]
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	58024400 	.word	0x58024400
 80056a8:	0800cf2c 	.word	0x0800cf2c

080056ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b089      	sub	sp, #36	; 0x24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056b4:	4ba1      	ldr	r3, [pc, #644]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80056be:	4b9f      	ldr	r3, [pc, #636]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	0b1b      	lsrs	r3, r3, #12
 80056c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80056ca:	4b9c      	ldr	r3, [pc, #624]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	091b      	lsrs	r3, r3, #4
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80056d6:	4b99      	ldr	r3, [pc, #612]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056da:	08db      	lsrs	r3, r3, #3
 80056dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8111 	beq.w	800591c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	f000 8083 	beq.w	8005808 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b02      	cmp	r3, #2
 8005706:	f200 80a1 	bhi.w	800584c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d056      	beq.n	80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005716:	e099      	b.n	800584c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005718:	4b88      	ldr	r3, [pc, #544]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d02d      	beq.n	8005780 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005724:	4b85      	ldr	r3, [pc, #532]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	08db      	lsrs	r3, r3, #3
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	4a84      	ldr	r2, [pc, #528]	; (8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
 8005734:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	ee07 3a90 	vmov	s15, r3
 800573c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800574e:	4b7b      	ldr	r3, [pc, #492]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005762:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800576e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800577e:	e087      	b.n	8005890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800578e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005792:	4b6a      	ldr	r3, [pc, #424]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057c2:	e065      	b.n	8005890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800594c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d6:	4b59      	ldr	r3, [pc, #356]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005806:	e043      	b.n	8005890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005812:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581a:	4b48      	ldr	r3, [pc, #288]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582a:	ed97 6a03 	vldr	s12, [r7, #12]
 800582e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800583e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005846:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800584a:	e021      	b.n	8005890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005856:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800594c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800585a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585e:	4b37      	ldr	r3, [pc, #220]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005872:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800588e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005890:	4b2a      	ldr	r3, [pc, #168]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	0a5b      	lsrs	r3, r3, #9
 8005896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058b6:	ee17 2a90 	vmov	r2, s15
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80058be:	4b1f      	ldr	r3, [pc, #124]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	0c1b      	lsrs	r3, r3, #16
 80058c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c8:	ee07 3a90 	vmov	s15, r3
 80058cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80058dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058e4:	ee17 2a90 	vmov	r2, s15
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80058ec:	4b13      	ldr	r3, [pc, #76]	; (800593c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	0e1b      	lsrs	r3, r3, #24
 80058f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005902:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005906:	edd7 6a07 	vldr	s13, [r7, #28]
 800590a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800590e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005912:	ee17 2a90 	vmov	r2, s15
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800591a:	e008      	b.n	800592e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	609a      	str	r2, [r3, #8]
}
 800592e:	bf00      	nop
 8005930:	3724      	adds	r7, #36	; 0x24
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	58024400 	.word	0x58024400
 8005940:	03d09000 	.word	0x03d09000
 8005944:	46000000 	.word	0x46000000
 8005948:	4c742400 	.word	0x4c742400
 800594c:	4a742400 	.word	0x4a742400
 8005950:	4af42400 	.word	0x4af42400

08005954 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005954:	b480      	push	{r7}
 8005956:	b089      	sub	sp, #36	; 0x24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800595c:	4ba1      	ldr	r3, [pc, #644]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005966:	4b9f      	ldr	r3, [pc, #636]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596a:	0d1b      	lsrs	r3, r3, #20
 800596c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005970:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005972:	4b9c      	ldr	r3, [pc, #624]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	0a1b      	lsrs	r3, r3, #8
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800597e:	4b99      	ldr	r3, [pc, #612]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	08db      	lsrs	r3, r3, #3
 8005984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	fb02 f303 	mul.w	r3, r2, r3
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005996:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 8111 	beq.w	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	f000 8083 	beq.w	8005ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	f200 80a1 	bhi.w	8005af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d056      	beq.n	8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80059be:	e099      	b.n	8005af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059c0:	4b88      	ldr	r3, [pc, #544]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d02d      	beq.n	8005a28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059cc:	4b85      	ldr	r3, [pc, #532]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	08db      	lsrs	r3, r3, #3
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	4a84      	ldr	r2, [pc, #528]	; (8005be8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
 80059dc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	ee07 3a90 	vmov	s15, r3
 80059e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f6:	4b7b      	ldr	r3, [pc, #492]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a26:	e087      	b.n	8005b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3a:	4b6a      	ldr	r3, [pc, #424]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a6a:	e065      	b.n	8005b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	ee07 3a90 	vmov	s15, r3
 8005a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7e:	4b59      	ldr	r3, [pc, #356]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aae:	e043      	b.n	8005b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ac2:	4b48      	ldr	r3, [pc, #288]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ad6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005af2:	e021      	b.n	8005b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	ee07 3a90 	vmov	s15, r3
 8005afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b06:	4b37      	ldr	r3, [pc, #220]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005b38:	4b2a      	ldr	r3, [pc, #168]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	0a5b      	lsrs	r3, r3, #9
 8005b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b52:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b5e:	ee17 2a90 	vmov	r2, s15
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005b66:	4b1f      	ldr	r3, [pc, #124]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	0c1b      	lsrs	r3, r3, #16
 8005b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b70:	ee07 3a90 	vmov	s15, r3
 8005b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b8c:	ee17 2a90 	vmov	r2, s15
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005b94:	4b13      	ldr	r3, [pc, #76]	; (8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	0e1b      	lsrs	r3, r3, #24
 8005b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bba:	ee17 2a90 	vmov	r2, s15
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	609a      	str	r2, [r3, #8]
}
 8005bd6:	bf00      	nop
 8005bd8:	3724      	adds	r7, #36	; 0x24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	58024400 	.word	0x58024400
 8005be8:	03d09000 	.word	0x03d09000
 8005bec:	46000000 	.word	0x46000000
 8005bf0:	4c742400 	.word	0x4c742400
 8005bf4:	4a742400 	.word	0x4a742400
 8005bf8:	4af42400 	.word	0x4af42400

08005bfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c0a:	4b53      	ldr	r3, [pc, #332]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d101      	bne.n	8005c1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e099      	b.n	8005d4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c1a:	4b4f      	ldr	r3, [pc, #316]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a4e      	ldr	r2, [pc, #312]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005c20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c26:	f7fc f925 	bl	8001e74 <HAL_GetTick>
 8005c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c2c:	e008      	b.n	8005c40 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c2e:	f7fc f921 	bl	8001e74 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e086      	b.n	8005d4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c40:	4b45      	ldr	r3, [pc, #276]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1f0      	bne.n	8005c2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c4c:	4b42      	ldr	r3, [pc, #264]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	031b      	lsls	r3, r3, #12
 8005c5a:	493f      	ldr	r1, [pc, #252]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	628b      	str	r3, [r1, #40]	; 0x28
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	025b      	lsls	r3, r3, #9
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	041b      	lsls	r3, r3, #16
 8005c7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	061b      	lsls	r3, r3, #24
 8005c8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c90:	4931      	ldr	r1, [pc, #196]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c96:	4b30      	ldr	r3, [pc, #192]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	492d      	ldr	r1, [pc, #180]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ca8:	4b2b      	ldr	r3, [pc, #172]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	f023 0220 	bic.w	r2, r3, #32
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	4928      	ldr	r1, [pc, #160]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005cba:	4b27      	ldr	r3, [pc, #156]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	4a26      	ldr	r2, [pc, #152]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005cc0:	f023 0310 	bic.w	r3, r3, #16
 8005cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005cc6:	4b24      	ldr	r3, [pc, #144]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cca:	4b24      	ldr	r3, [pc, #144]	; (8005d5c <RCCEx_PLL2_Config+0x160>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	69d2      	ldr	r2, [r2, #28]
 8005cd2:	00d2      	lsls	r2, r2, #3
 8005cd4:	4920      	ldr	r1, [pc, #128]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005cda:	4b1f      	ldr	r3, [pc, #124]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	4a1e      	ldr	r2, [pc, #120]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005ce0:	f043 0310 	orr.w	r3, r3, #16
 8005ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d106      	bne.n	8005cfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005cec:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cf8:	e00f      	b.n	8005d1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d106      	bne.n	8005d0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d00:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	4a14      	ldr	r2, [pc, #80]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d0c:	e005      	b.n	8005d1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d0e:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	4a11      	ldr	r2, [pc, #68]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d1a:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a0e      	ldr	r2, [pc, #56]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005d20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d26:	f7fc f8a5 	bl	8001e74 <HAL_GetTick>
 8005d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d2c:	e008      	b.n	8005d40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d2e:	f7fc f8a1 	bl	8001e74 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e006      	b.n	8005d4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <RCCEx_PLL2_Config+0x15c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	58024400 	.word	0x58024400
 8005d5c:	ffff0007 	.word	0xffff0007

08005d60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d6e:	4b53      	ldr	r3, [pc, #332]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d101      	bne.n	8005d7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e099      	b.n	8005eb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d7e:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a4e      	ldr	r2, [pc, #312]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d8a:	f7fc f873 	bl	8001e74 <HAL_GetTick>
 8005d8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d90:	e008      	b.n	8005da4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d92:	f7fc f86f 	bl	8001e74 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d901      	bls.n	8005da4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e086      	b.n	8005eb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005da4:	4b45      	ldr	r3, [pc, #276]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1f0      	bne.n	8005d92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005db0:	4b42      	ldr	r3, [pc, #264]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	051b      	lsls	r3, r3, #20
 8005dbe:	493f      	ldr	r1, [pc, #252]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	628b      	str	r3, [r1, #40]	; 0x28
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	025b      	lsls	r3, r3, #9
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	041b      	lsls	r3, r3, #16
 8005de2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	061b      	lsls	r3, r3, #24
 8005df0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005df4:	4931      	ldr	r1, [pc, #196]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005dfa:	4b30      	ldr	r3, [pc, #192]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	492d      	ldr	r1, [pc, #180]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e0c:	4b2b      	ldr	r3, [pc, #172]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	4928      	ldr	r1, [pc, #160]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e1e:	4b27      	ldr	r3, [pc, #156]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	4a26      	ldr	r2, [pc, #152]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e2a:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e2e:	4b24      	ldr	r3, [pc, #144]	; (8005ec0 <RCCEx_PLL3_Config+0x160>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	69d2      	ldr	r2, [r2, #28]
 8005e36:	00d2      	lsls	r2, r2, #3
 8005e38:	4920      	ldr	r1, [pc, #128]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e3e:	4b1f      	ldr	r3, [pc, #124]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	4a1e      	ldr	r2, [pc, #120]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d106      	bne.n	8005e5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e50:	4b1a      	ldr	r3, [pc, #104]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	4a19      	ldr	r2, [pc, #100]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e5c:	e00f      	b.n	8005e7e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d106      	bne.n	8005e72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e64:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e70:	e005      	b.n	8005e7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e72:	4b12      	ldr	r3, [pc, #72]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	4a11      	ldr	r2, [pc, #68]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005e7e:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e8a:	f7fb fff3 	bl	8001e74 <HAL_GetTick>
 8005e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e90:	e008      	b.n	8005ea4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005e92:	f7fb ffef 	bl	8001e74 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e006      	b.n	8005eb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <RCCEx_PLL3_Config+0x15c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	58024400 	.word	0x58024400
 8005ec0:	ffff0007 	.word	0xffff0007

08005ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e049      	b.n	8005f6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fb fcb6 	bl	800185c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f000 fde2 	bl	8006acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d001      	beq.n	8005f8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e04c      	b.n	8006026 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a26      	ldr	r2, [pc, #152]	; (8006034 <HAL_TIM_Base_Start+0xc0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d022      	beq.n	8005fe4 <HAL_TIM_Base_Start+0x70>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa6:	d01d      	beq.n	8005fe4 <HAL_TIM_Base_Start+0x70>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a22      	ldr	r2, [pc, #136]	; (8006038 <HAL_TIM_Base_Start+0xc4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_TIM_Base_Start+0x70>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a21      	ldr	r2, [pc, #132]	; (800603c <HAL_TIM_Base_Start+0xc8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_TIM_Base_Start+0x70>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <HAL_TIM_Base_Start+0xcc>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_TIM_Base_Start+0x70>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1e      	ldr	r2, [pc, #120]	; (8006044 <HAL_TIM_Base_Start+0xd0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_TIM_Base_Start+0x70>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1c      	ldr	r2, [pc, #112]	; (8006048 <HAL_TIM_Base_Start+0xd4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_TIM_Base_Start+0x70>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1b      	ldr	r2, [pc, #108]	; (800604c <HAL_TIM_Base_Start+0xd8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d115      	bne.n	8006010 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	4b19      	ldr	r3, [pc, #100]	; (8006050 <HAL_TIM_Base_Start+0xdc>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b06      	cmp	r3, #6
 8005ff4:	d015      	beq.n	8006022 <HAL_TIM_Base_Start+0xae>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffc:	d011      	beq.n	8006022 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0201 	orr.w	r2, r2, #1
 800600c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600e:	e008      	b.n	8006022 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	e000      	b.n	8006024 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006022:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40010000 	.word	0x40010000
 8006038:	40000400 	.word	0x40000400
 800603c:	40000800 	.word	0x40000800
 8006040:	40000c00 	.word	0x40000c00
 8006044:	40010400 	.word	0x40010400
 8006048:	40001800 	.word	0x40001800
 800604c:	40014000 	.word	0x40014000
 8006050:	00010007 	.word	0x00010007

08006054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	d001      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e054      	b.n	8006116 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a26      	ldr	r2, [pc, #152]	; (8006124 <HAL_TIM_Base_Start_IT+0xd0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d022      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d01d      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a22      	ldr	r2, [pc, #136]	; (8006128 <HAL_TIM_Base_Start_IT+0xd4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a21      	ldr	r2, [pc, #132]	; (800612c <HAL_TIM_Base_Start_IT+0xd8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1f      	ldr	r2, [pc, #124]	; (8006130 <HAL_TIM_Base_Start_IT+0xdc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1e      	ldr	r2, [pc, #120]	; (8006134 <HAL_TIM_Base_Start_IT+0xe0>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1c      	ldr	r2, [pc, #112]	; (8006138 <HAL_TIM_Base_Start_IT+0xe4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1b      	ldr	r2, [pc, #108]	; (800613c <HAL_TIM_Base_Start_IT+0xe8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d115      	bne.n	8006100 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	4b19      	ldr	r3, [pc, #100]	; (8006140 <HAL_TIM_Base_Start_IT+0xec>)
 80060dc:	4013      	ands	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d015      	beq.n	8006112 <HAL_TIM_Base_Start_IT+0xbe>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ec:	d011      	beq.n	8006112 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0201 	orr.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fe:	e008      	b.n	8006112 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	e000      	b.n	8006114 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006112:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40010000 	.word	0x40010000
 8006128:	40000400 	.word	0x40000400
 800612c:	40000800 	.word	0x40000800
 8006130:	40000c00 	.word	0x40000c00
 8006134:	40010400 	.word	0x40010400
 8006138:	40001800 	.word	0x40001800
 800613c:	40014000 	.word	0x40014000
 8006140:	00010007 	.word	0x00010007

08006144 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e049      	b.n	80061ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f841 	bl	80061f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f000 fca2 	bl	8006acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
	...

08006208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <HAL_TIM_PWM_Start+0x24>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	bf14      	ite	ne
 8006224:	2301      	movne	r3, #1
 8006226:	2300      	moveq	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	e03c      	b.n	80062a6 <HAL_TIM_PWM_Start+0x9e>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b04      	cmp	r3, #4
 8006230:	d109      	bne.n	8006246 <HAL_TIM_PWM_Start+0x3e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b01      	cmp	r3, #1
 800623c:	bf14      	ite	ne
 800623e:	2301      	movne	r3, #1
 8006240:	2300      	moveq	r3, #0
 8006242:	b2db      	uxtb	r3, r3
 8006244:	e02f      	b.n	80062a6 <HAL_TIM_PWM_Start+0x9e>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b08      	cmp	r3, #8
 800624a:	d109      	bne.n	8006260 <HAL_TIM_PWM_Start+0x58>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b01      	cmp	r3, #1
 8006256:	bf14      	ite	ne
 8006258:	2301      	movne	r3, #1
 800625a:	2300      	moveq	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	e022      	b.n	80062a6 <HAL_TIM_PWM_Start+0x9e>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b0c      	cmp	r3, #12
 8006264:	d109      	bne.n	800627a <HAL_TIM_PWM_Start+0x72>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b01      	cmp	r3, #1
 8006270:	bf14      	ite	ne
 8006272:	2301      	movne	r3, #1
 8006274:	2300      	moveq	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	e015      	b.n	80062a6 <HAL_TIM_PWM_Start+0x9e>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b10      	cmp	r3, #16
 800627e:	d109      	bne.n	8006294 <HAL_TIM_PWM_Start+0x8c>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	bf14      	ite	ne
 800628c:	2301      	movne	r3, #1
 800628e:	2300      	moveq	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	e008      	b.n	80062a6 <HAL_TIM_PWM_Start+0x9e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	bf14      	ite	ne
 80062a0:	2301      	movne	r3, #1
 80062a2:	2300      	moveq	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e0a1      	b.n	80063f2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d104      	bne.n	80062be <HAL_TIM_PWM_Start+0xb6>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062bc:	e023      	b.n	8006306 <HAL_TIM_PWM_Start+0xfe>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d104      	bne.n	80062ce <HAL_TIM_PWM_Start+0xc6>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062cc:	e01b      	b.n	8006306 <HAL_TIM_PWM_Start+0xfe>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d104      	bne.n	80062de <HAL_TIM_PWM_Start+0xd6>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062dc:	e013      	b.n	8006306 <HAL_TIM_PWM_Start+0xfe>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b0c      	cmp	r3, #12
 80062e2:	d104      	bne.n	80062ee <HAL_TIM_PWM_Start+0xe6>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062ec:	e00b      	b.n	8006306 <HAL_TIM_PWM_Start+0xfe>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b10      	cmp	r3, #16
 80062f2:	d104      	bne.n	80062fe <HAL_TIM_PWM_Start+0xf6>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062fc:	e003      	b.n	8006306 <HAL_TIM_PWM_Start+0xfe>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2202      	movs	r2, #2
 8006302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2201      	movs	r2, #1
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 ffea 	bl	80072e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a38      	ldr	r2, [pc, #224]	; (80063fc <HAL_TIM_PWM_Start+0x1f4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_TIM_PWM_Start+0x13e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a37      	ldr	r2, [pc, #220]	; (8006400 <HAL_TIM_PWM_Start+0x1f8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00e      	beq.n	8006346 <HAL_TIM_PWM_Start+0x13e>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a35      	ldr	r2, [pc, #212]	; (8006404 <HAL_TIM_PWM_Start+0x1fc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_TIM_PWM_Start+0x13e>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a34      	ldr	r2, [pc, #208]	; (8006408 <HAL_TIM_PWM_Start+0x200>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_TIM_PWM_Start+0x13e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a32      	ldr	r2, [pc, #200]	; (800640c <HAL_TIM_PWM_Start+0x204>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d101      	bne.n	800634a <HAL_TIM_PWM_Start+0x142>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <HAL_TIM_PWM_Start+0x144>
 800634a:	2300      	movs	r3, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800635e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a25      	ldr	r2, [pc, #148]	; (80063fc <HAL_TIM_PWM_Start+0x1f4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d022      	beq.n	80063b0 <HAL_TIM_PWM_Start+0x1a8>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006372:	d01d      	beq.n	80063b0 <HAL_TIM_PWM_Start+0x1a8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a25      	ldr	r2, [pc, #148]	; (8006410 <HAL_TIM_PWM_Start+0x208>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d018      	beq.n	80063b0 <HAL_TIM_PWM_Start+0x1a8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a24      	ldr	r2, [pc, #144]	; (8006414 <HAL_TIM_PWM_Start+0x20c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d013      	beq.n	80063b0 <HAL_TIM_PWM_Start+0x1a8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a22      	ldr	r2, [pc, #136]	; (8006418 <HAL_TIM_PWM_Start+0x210>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00e      	beq.n	80063b0 <HAL_TIM_PWM_Start+0x1a8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1a      	ldr	r2, [pc, #104]	; (8006400 <HAL_TIM_PWM_Start+0x1f8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d009      	beq.n	80063b0 <HAL_TIM_PWM_Start+0x1a8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a1e      	ldr	r2, [pc, #120]	; (800641c <HAL_TIM_PWM_Start+0x214>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d004      	beq.n	80063b0 <HAL_TIM_PWM_Start+0x1a8>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a16      	ldr	r2, [pc, #88]	; (8006404 <HAL_TIM_PWM_Start+0x1fc>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d115      	bne.n	80063dc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	4b1a      	ldr	r3, [pc, #104]	; (8006420 <HAL_TIM_PWM_Start+0x218>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b06      	cmp	r3, #6
 80063c0:	d015      	beq.n	80063ee <HAL_TIM_PWM_Start+0x1e6>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c8:	d011      	beq.n	80063ee <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0201 	orr.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063da:	e008      	b.n	80063ee <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	e000      	b.n	80063f0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40010400 	.word	0x40010400
 8006404:	40014000 	.word	0x40014000
 8006408:	40014400 	.word	0x40014400
 800640c:	40014800 	.word	0x40014800
 8006410:	40000400 	.word	0x40000400
 8006414:	40000800 	.word	0x40000800
 8006418:	40000c00 	.word	0x40000c00
 800641c:	40001800 	.word	0x40001800
 8006420:	00010007 	.word	0x00010007

08006424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b02      	cmp	r3, #2
 8006438:	d122      	bne.n	8006480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b02      	cmp	r3, #2
 8006446:	d11b      	bne.n	8006480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0202 	mvn.w	r2, #2
 8006450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fb12 	bl	8006a90 <HAL_TIM_IC_CaptureCallback>
 800646c:	e005      	b.n	800647a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fb04 	bl	8006a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fb15 	bl	8006aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b04      	cmp	r3, #4
 800648c:	d122      	bne.n	80064d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b04      	cmp	r3, #4
 800649a:	d11b      	bne.n	80064d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0204 	mvn.w	r2, #4
 80064a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fae8 	bl	8006a90 <HAL_TIM_IC_CaptureCallback>
 80064c0:	e005      	b.n	80064ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fada 	bl	8006a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 faeb 	bl	8006aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d122      	bne.n	8006528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d11b      	bne.n	8006528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0208 	mvn.w	r2, #8
 80064f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2204      	movs	r2, #4
 80064fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fabe 	bl	8006a90 <HAL_TIM_IC_CaptureCallback>
 8006514:	e005      	b.n	8006522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fab0 	bl	8006a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fac1 	bl	8006aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b10      	cmp	r3, #16
 8006534:	d122      	bne.n	800657c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b10      	cmp	r3, #16
 8006542:	d11b      	bne.n	800657c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0210 	mvn.w	r2, #16
 800654c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2208      	movs	r2, #8
 8006552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa94 	bl	8006a90 <HAL_TIM_IC_CaptureCallback>
 8006568:	e005      	b.n	8006576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa86 	bl	8006a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fa97 	bl	8006aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b01      	cmp	r3, #1
 8006588:	d10e      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b01      	cmp	r3, #1
 8006596:	d107      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0201 	mvn.w	r2, #1
 80065a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fa fedc 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b2:	2b80      	cmp	r3, #128	; 0x80
 80065b4:	d10e      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c0:	2b80      	cmp	r3, #128	; 0x80
 80065c2:	d107      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 ffc6 	bl	8007560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e2:	d10e      	bne.n	8006602 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ee:	2b80      	cmp	r3, #128	; 0x80
 80065f0:	d107      	bne.n	8006602 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 ffb9 	bl	8007574 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d10e      	bne.n	800662e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661a:	2b40      	cmp	r3, #64	; 0x40
 800661c:	d107      	bne.n	800662e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fa45 	bl	8006ab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b20      	cmp	r3, #32
 800663a:	d10e      	bne.n	800665a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b20      	cmp	r3, #32
 8006648:	d107      	bne.n	800665a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f06f 0220 	mvn.w	r2, #32
 8006652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 ff79 	bl	800754c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800667e:	2302      	movs	r3, #2
 8006680:	e0ff      	b.n	8006882 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b14      	cmp	r3, #20
 800668e:	f200 80f0 	bhi.w	8006872 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006873 	.word	0x08006873
 80066a0:	08006873 	.word	0x08006873
 80066a4:	08006873 	.word	0x08006873
 80066a8:	0800672d 	.word	0x0800672d
 80066ac:	08006873 	.word	0x08006873
 80066b0:	08006873 	.word	0x08006873
 80066b4:	08006873 	.word	0x08006873
 80066b8:	0800676f 	.word	0x0800676f
 80066bc:	08006873 	.word	0x08006873
 80066c0:	08006873 	.word	0x08006873
 80066c4:	08006873 	.word	0x08006873
 80066c8:	080067af 	.word	0x080067af
 80066cc:	08006873 	.word	0x08006873
 80066d0:	08006873 	.word	0x08006873
 80066d4:	08006873 	.word	0x08006873
 80066d8:	080067f1 	.word	0x080067f1
 80066dc:	08006873 	.word	0x08006873
 80066e0:	08006873 	.word	0x08006873
 80066e4:	08006873 	.word	0x08006873
 80066e8:	08006831 	.word	0x08006831
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fa84 	bl	8006c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0208 	orr.w	r2, r2, #8
 8006706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0204 	bic.w	r2, r2, #4
 8006716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6999      	ldr	r1, [r3, #24]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	619a      	str	r2, [r3, #24]
      break;
 800672a:	e0a5      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 faf4 	bl	8006d20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6999      	ldr	r1, [r3, #24]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	021a      	lsls	r2, r3, #8
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	619a      	str	r2, [r3, #24]
      break;
 800676c:	e084      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fb5d 	bl	8006e34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0208 	orr.w	r2, r2, #8
 8006788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69da      	ldr	r2, [r3, #28]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0204 	bic.w	r2, r2, #4
 8006798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69d9      	ldr	r1, [r3, #28]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	61da      	str	r2, [r3, #28]
      break;
 80067ac:	e064      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fbc5 	bl	8006f44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69d9      	ldr	r1, [r3, #28]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	021a      	lsls	r2, r3, #8
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	61da      	str	r2, [r3, #28]
      break;
 80067ee:	e043      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fc0e 	bl	8007018 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0208 	orr.w	r2, r2, #8
 800680a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0204 	bic.w	r2, r2, #4
 800681a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800682e:	e023      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fc52 	bl	80070e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800684a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	021a      	lsls	r2, r3, #8
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006870:	e002      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	75fb      	strb	r3, [r7, #23]
      break;
 8006876:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop

0800688c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_TIM_ConfigClockSource+0x1c>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e0dc      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x1d6>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	4b6a      	ldr	r3, [pc, #424]	; (8006a6c <HAL_TIM_ConfigClockSource+0x1e0>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a64      	ldr	r2, [pc, #400]	; (8006a70 <HAL_TIM_ConfigClockSource+0x1e4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	f000 80a9 	beq.w	8006a36 <HAL_TIM_ConfigClockSource+0x1aa>
 80068e4:	4a62      	ldr	r2, [pc, #392]	; (8006a70 <HAL_TIM_ConfigClockSource+0x1e4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	f200 80ae 	bhi.w	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 80068ec:	4a61      	ldr	r2, [pc, #388]	; (8006a74 <HAL_TIM_ConfigClockSource+0x1e8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	f000 80a1 	beq.w	8006a36 <HAL_TIM_ConfigClockSource+0x1aa>
 80068f4:	4a5f      	ldr	r2, [pc, #380]	; (8006a74 <HAL_TIM_ConfigClockSource+0x1e8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	f200 80a6 	bhi.w	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 80068fc:	4a5e      	ldr	r2, [pc, #376]	; (8006a78 <HAL_TIM_ConfigClockSource+0x1ec>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	f000 8099 	beq.w	8006a36 <HAL_TIM_ConfigClockSource+0x1aa>
 8006904:	4a5c      	ldr	r2, [pc, #368]	; (8006a78 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006906:	4293      	cmp	r3, r2
 8006908:	f200 809e 	bhi.w	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 800690c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006910:	f000 8091 	beq.w	8006a36 <HAL_TIM_ConfigClockSource+0x1aa>
 8006914:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006918:	f200 8096 	bhi.w	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 800691c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006920:	f000 8089 	beq.w	8006a36 <HAL_TIM_ConfigClockSource+0x1aa>
 8006924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006928:	f200 808e 	bhi.w	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 800692c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006930:	d03e      	beq.n	80069b0 <HAL_TIM_ConfigClockSource+0x124>
 8006932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006936:	f200 8087 	bhi.w	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 800693a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693e:	f000 8086 	beq.w	8006a4e <HAL_TIM_ConfigClockSource+0x1c2>
 8006942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006946:	d87f      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006948:	2b70      	cmp	r3, #112	; 0x70
 800694a:	d01a      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0xf6>
 800694c:	2b70      	cmp	r3, #112	; 0x70
 800694e:	d87b      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006950:	2b60      	cmp	r3, #96	; 0x60
 8006952:	d050      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x16a>
 8006954:	2b60      	cmp	r3, #96	; 0x60
 8006956:	d877      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006958:	2b50      	cmp	r3, #80	; 0x50
 800695a:	d03c      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x14a>
 800695c:	2b50      	cmp	r3, #80	; 0x50
 800695e:	d873      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	d058      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x18a>
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d86f      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006968:	2b30      	cmp	r3, #48	; 0x30
 800696a:	d064      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x1aa>
 800696c:	2b30      	cmp	r3, #48	; 0x30
 800696e:	d86b      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006970:	2b20      	cmp	r3, #32
 8006972:	d060      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x1aa>
 8006974:	2b20      	cmp	r3, #32
 8006976:	d867      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d05c      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x1aa>
 800697c:	2b10      	cmp	r3, #16
 800697e:	d05a      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x1aa>
 8006980:	e062      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6899      	ldr	r1, [r3, #8]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f000 fc89 	bl	80072a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	609a      	str	r2, [r3, #8]
      break;
 80069ae:	e04f      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	6899      	ldr	r1, [r3, #8]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f000 fc72 	bl	80072a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069d2:	609a      	str	r2, [r3, #8]
      break;
 80069d4:	e03c      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6859      	ldr	r1, [r3, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f000 fbe2 	bl	80071ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2150      	movs	r1, #80	; 0x50
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fc3c 	bl	800726c <TIM_ITRx_SetConfig>
      break;
 80069f4:	e02c      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6859      	ldr	r1, [r3, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f000 fc01 	bl	800720a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2160      	movs	r1, #96	; 0x60
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fc2c 	bl	800726c <TIM_ITRx_SetConfig>
      break;
 8006a14:	e01c      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6859      	ldr	r1, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f000 fbc2 	bl	80071ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2140      	movs	r1, #64	; 0x40
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fc1c 	bl	800726c <TIM_ITRx_SetConfig>
      break;
 8006a34:	e00c      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f000 fc13 	bl	800726c <TIM_ITRx_SetConfig>
      break;
 8006a46:	e003      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a4c:	e000      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	ffceff88 	.word	0xffceff88
 8006a70:	00100040 	.word	0x00100040
 8006a74:	00100030 	.word	0x00100030
 8006a78:	00100020 	.word	0x00100020

08006a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a40      	ldr	r2, [pc, #256]	; (8006be0 <TIM_Base_SetConfig+0x114>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aea:	d00f      	beq.n	8006b0c <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a3d      	ldr	r2, [pc, #244]	; (8006be4 <TIM_Base_SetConfig+0x118>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00b      	beq.n	8006b0c <TIM_Base_SetConfig+0x40>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a3c      	ldr	r2, [pc, #240]	; (8006be8 <TIM_Base_SetConfig+0x11c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d007      	beq.n	8006b0c <TIM_Base_SetConfig+0x40>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a3b      	ldr	r2, [pc, #236]	; (8006bec <TIM_Base_SetConfig+0x120>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_Base_SetConfig+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a3a      	ldr	r2, [pc, #232]	; (8006bf0 <TIM_Base_SetConfig+0x124>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d108      	bne.n	8006b1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a2f      	ldr	r2, [pc, #188]	; (8006be0 <TIM_Base_SetConfig+0x114>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01f      	beq.n	8006b66 <TIM_Base_SetConfig+0x9a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2c:	d01b      	beq.n	8006b66 <TIM_Base_SetConfig+0x9a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a2c      	ldr	r2, [pc, #176]	; (8006be4 <TIM_Base_SetConfig+0x118>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d017      	beq.n	8006b66 <TIM_Base_SetConfig+0x9a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2b      	ldr	r2, [pc, #172]	; (8006be8 <TIM_Base_SetConfig+0x11c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d013      	beq.n	8006b66 <TIM_Base_SetConfig+0x9a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a2a      	ldr	r2, [pc, #168]	; (8006bec <TIM_Base_SetConfig+0x120>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00f      	beq.n	8006b66 <TIM_Base_SetConfig+0x9a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a29      	ldr	r2, [pc, #164]	; (8006bf0 <TIM_Base_SetConfig+0x124>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00b      	beq.n	8006b66 <TIM_Base_SetConfig+0x9a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a28      	ldr	r2, [pc, #160]	; (8006bf4 <TIM_Base_SetConfig+0x128>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d007      	beq.n	8006b66 <TIM_Base_SetConfig+0x9a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a27      	ldr	r2, [pc, #156]	; (8006bf8 <TIM_Base_SetConfig+0x12c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_Base_SetConfig+0x9a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a26      	ldr	r2, [pc, #152]	; (8006bfc <TIM_Base_SetConfig+0x130>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d108      	bne.n	8006b78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a10      	ldr	r2, [pc, #64]	; (8006be0 <TIM_Base_SetConfig+0x114>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00f      	beq.n	8006bc4 <TIM_Base_SetConfig+0xf8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a12      	ldr	r2, [pc, #72]	; (8006bf0 <TIM_Base_SetConfig+0x124>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00b      	beq.n	8006bc4 <TIM_Base_SetConfig+0xf8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a11      	ldr	r2, [pc, #68]	; (8006bf4 <TIM_Base_SetConfig+0x128>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d007      	beq.n	8006bc4 <TIM_Base_SetConfig+0xf8>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a10      	ldr	r2, [pc, #64]	; (8006bf8 <TIM_Base_SetConfig+0x12c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_Base_SetConfig+0xf8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a0f      	ldr	r2, [pc, #60]	; (8006bfc <TIM_Base_SetConfig+0x130>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d103      	bne.n	8006bcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	691a      	ldr	r2, [r3, #16]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	615a      	str	r2, [r3, #20]
}
 8006bd2:	bf00      	nop
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40010000 	.word	0x40010000
 8006be4:	40000400 	.word	0x40000400
 8006be8:	40000800 	.word	0x40000800
 8006bec:	40000c00 	.word	0x40000c00
 8006bf0:	40010400 	.word	0x40010400
 8006bf4:	40014000 	.word	0x40014000
 8006bf8:	40014400 	.word	0x40014400
 8006bfc:	40014800 	.word	0x40014800

08006c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	f023 0201 	bic.w	r2, r3, #1
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4b37      	ldr	r3, [pc, #220]	; (8006d08 <TIM_OC1_SetConfig+0x108>)
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0303 	bic.w	r3, r3, #3
 8006c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f023 0302 	bic.w	r3, r3, #2
 8006c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a2d      	ldr	r2, [pc, #180]	; (8006d0c <TIM_OC1_SetConfig+0x10c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00f      	beq.n	8006c7c <TIM_OC1_SetConfig+0x7c>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a2c      	ldr	r2, [pc, #176]	; (8006d10 <TIM_OC1_SetConfig+0x110>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00b      	beq.n	8006c7c <TIM_OC1_SetConfig+0x7c>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a2b      	ldr	r2, [pc, #172]	; (8006d14 <TIM_OC1_SetConfig+0x114>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d007      	beq.n	8006c7c <TIM_OC1_SetConfig+0x7c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a2a      	ldr	r2, [pc, #168]	; (8006d18 <TIM_OC1_SetConfig+0x118>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d003      	beq.n	8006c7c <TIM_OC1_SetConfig+0x7c>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a29      	ldr	r2, [pc, #164]	; (8006d1c <TIM_OC1_SetConfig+0x11c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d10c      	bne.n	8006c96 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f023 0308 	bic.w	r3, r3, #8
 8006c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f023 0304 	bic.w	r3, r3, #4
 8006c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a1c      	ldr	r2, [pc, #112]	; (8006d0c <TIM_OC1_SetConfig+0x10c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00f      	beq.n	8006cbe <TIM_OC1_SetConfig+0xbe>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a1b      	ldr	r2, [pc, #108]	; (8006d10 <TIM_OC1_SetConfig+0x110>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00b      	beq.n	8006cbe <TIM_OC1_SetConfig+0xbe>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a1a      	ldr	r2, [pc, #104]	; (8006d14 <TIM_OC1_SetConfig+0x114>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d007      	beq.n	8006cbe <TIM_OC1_SetConfig+0xbe>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a19      	ldr	r2, [pc, #100]	; (8006d18 <TIM_OC1_SetConfig+0x118>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d003      	beq.n	8006cbe <TIM_OC1_SetConfig+0xbe>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a18      	ldr	r2, [pc, #96]	; (8006d1c <TIM_OC1_SetConfig+0x11c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d111      	bne.n	8006ce2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	621a      	str	r2, [r3, #32]
}
 8006cfc:	bf00      	nop
 8006cfe:	371c      	adds	r7, #28
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	fffeff8f 	.word	0xfffeff8f
 8006d0c:	40010000 	.word	0x40010000
 8006d10:	40010400 	.word	0x40010400
 8006d14:	40014000 	.word	0x40014000
 8006d18:	40014400 	.word	0x40014400
 8006d1c:	40014800 	.word	0x40014800

08006d20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f023 0210 	bic.w	r2, r3, #16
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4b34      	ldr	r3, [pc, #208]	; (8006e1c <TIM_OC2_SetConfig+0xfc>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	021b      	lsls	r3, r3, #8
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f023 0320 	bic.w	r3, r3, #32
 8006d6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a29      	ldr	r2, [pc, #164]	; (8006e20 <TIM_OC2_SetConfig+0x100>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_OC2_SetConfig+0x68>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a28      	ldr	r2, [pc, #160]	; (8006e24 <TIM_OC2_SetConfig+0x104>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d10d      	bne.n	8006da4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a1e      	ldr	r2, [pc, #120]	; (8006e20 <TIM_OC2_SetConfig+0x100>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00f      	beq.n	8006dcc <TIM_OC2_SetConfig+0xac>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a1d      	ldr	r2, [pc, #116]	; (8006e24 <TIM_OC2_SetConfig+0x104>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00b      	beq.n	8006dcc <TIM_OC2_SetConfig+0xac>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a1c      	ldr	r2, [pc, #112]	; (8006e28 <TIM_OC2_SetConfig+0x108>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d007      	beq.n	8006dcc <TIM_OC2_SetConfig+0xac>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a1b      	ldr	r2, [pc, #108]	; (8006e2c <TIM_OC2_SetConfig+0x10c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_OC2_SetConfig+0xac>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a1a      	ldr	r2, [pc, #104]	; (8006e30 <TIM_OC2_SetConfig+0x110>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d113      	bne.n	8006df4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	feff8fff 	.word	0xfeff8fff
 8006e20:	40010000 	.word	0x40010000
 8006e24:	40010400 	.word	0x40010400
 8006e28:	40014000 	.word	0x40014000
 8006e2c:	40014400 	.word	0x40014400
 8006e30:	40014800 	.word	0x40014800

08006e34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4b33      	ldr	r3, [pc, #204]	; (8006f2c <TIM_OC3_SetConfig+0xf8>)
 8006e60:	4013      	ands	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a28      	ldr	r2, [pc, #160]	; (8006f30 <TIM_OC3_SetConfig+0xfc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d003      	beq.n	8006e9a <TIM_OC3_SetConfig+0x66>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a27      	ldr	r2, [pc, #156]	; (8006f34 <TIM_OC3_SetConfig+0x100>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d10d      	bne.n	8006eb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	021b      	lsls	r3, r3, #8
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a1d      	ldr	r2, [pc, #116]	; (8006f30 <TIM_OC3_SetConfig+0xfc>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00f      	beq.n	8006ede <TIM_OC3_SetConfig+0xaa>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a1c      	ldr	r2, [pc, #112]	; (8006f34 <TIM_OC3_SetConfig+0x100>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d00b      	beq.n	8006ede <TIM_OC3_SetConfig+0xaa>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a1b      	ldr	r2, [pc, #108]	; (8006f38 <TIM_OC3_SetConfig+0x104>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d007      	beq.n	8006ede <TIM_OC3_SetConfig+0xaa>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a1a      	ldr	r2, [pc, #104]	; (8006f3c <TIM_OC3_SetConfig+0x108>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d003      	beq.n	8006ede <TIM_OC3_SetConfig+0xaa>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a19      	ldr	r2, [pc, #100]	; (8006f40 <TIM_OC3_SetConfig+0x10c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d113      	bne.n	8006f06 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	621a      	str	r2, [r3, #32]
}
 8006f20:	bf00      	nop
 8006f22:	371c      	adds	r7, #28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	fffeff8f 	.word	0xfffeff8f
 8006f30:	40010000 	.word	0x40010000
 8006f34:	40010400 	.word	0x40010400
 8006f38:	40014000 	.word	0x40014000
 8006f3c:	40014400 	.word	0x40014400
 8006f40:	40014800 	.word	0x40014800

08006f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4b24      	ldr	r3, [pc, #144]	; (8007000 <TIM_OC4_SetConfig+0xbc>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	031b      	lsls	r3, r3, #12
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a19      	ldr	r2, [pc, #100]	; (8007004 <TIM_OC4_SetConfig+0xc0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00f      	beq.n	8006fc4 <TIM_OC4_SetConfig+0x80>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a18      	ldr	r2, [pc, #96]	; (8007008 <TIM_OC4_SetConfig+0xc4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00b      	beq.n	8006fc4 <TIM_OC4_SetConfig+0x80>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a17      	ldr	r2, [pc, #92]	; (800700c <TIM_OC4_SetConfig+0xc8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d007      	beq.n	8006fc4 <TIM_OC4_SetConfig+0x80>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a16      	ldr	r2, [pc, #88]	; (8007010 <TIM_OC4_SetConfig+0xcc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_OC4_SetConfig+0x80>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a15      	ldr	r2, [pc, #84]	; (8007014 <TIM_OC4_SetConfig+0xd0>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d109      	bne.n	8006fd8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	019b      	lsls	r3, r3, #6
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	feff8fff 	.word	0xfeff8fff
 8007004:	40010000 	.word	0x40010000
 8007008:	40010400 	.word	0x40010400
 800700c:	40014000 	.word	0x40014000
 8007010:	40014400 	.word	0x40014400
 8007014:	40014800 	.word	0x40014800

08007018 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4b21      	ldr	r3, [pc, #132]	; (80070c8 <TIM_OC5_SetConfig+0xb0>)
 8007044:	4013      	ands	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007058:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	041b      	lsls	r3, r3, #16
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a18      	ldr	r2, [pc, #96]	; (80070cc <TIM_OC5_SetConfig+0xb4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00f      	beq.n	800708e <TIM_OC5_SetConfig+0x76>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a17      	ldr	r2, [pc, #92]	; (80070d0 <TIM_OC5_SetConfig+0xb8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00b      	beq.n	800708e <TIM_OC5_SetConfig+0x76>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a16      	ldr	r2, [pc, #88]	; (80070d4 <TIM_OC5_SetConfig+0xbc>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d007      	beq.n	800708e <TIM_OC5_SetConfig+0x76>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a15      	ldr	r2, [pc, #84]	; (80070d8 <TIM_OC5_SetConfig+0xc0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d003      	beq.n	800708e <TIM_OC5_SetConfig+0x76>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a14      	ldr	r2, [pc, #80]	; (80070dc <TIM_OC5_SetConfig+0xc4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d109      	bne.n	80070a2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007094:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	621a      	str	r2, [r3, #32]
}
 80070bc:	bf00      	nop
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	fffeff8f 	.word	0xfffeff8f
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40010400 	.word	0x40010400
 80070d4:	40014000 	.word	0x40014000
 80070d8:	40014400 	.word	0x40014400
 80070dc:	40014800 	.word	0x40014800

080070e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4b22      	ldr	r3, [pc, #136]	; (8007194 <TIM_OC6_SetConfig+0xb4>)
 800710c:	4013      	ands	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	051b      	lsls	r3, r3, #20
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a19      	ldr	r2, [pc, #100]	; (8007198 <TIM_OC6_SetConfig+0xb8>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d00f      	beq.n	8007158 <TIM_OC6_SetConfig+0x78>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a18      	ldr	r2, [pc, #96]	; (800719c <TIM_OC6_SetConfig+0xbc>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00b      	beq.n	8007158 <TIM_OC6_SetConfig+0x78>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a17      	ldr	r2, [pc, #92]	; (80071a0 <TIM_OC6_SetConfig+0xc0>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d007      	beq.n	8007158 <TIM_OC6_SetConfig+0x78>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a16      	ldr	r2, [pc, #88]	; (80071a4 <TIM_OC6_SetConfig+0xc4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d003      	beq.n	8007158 <TIM_OC6_SetConfig+0x78>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a15      	ldr	r2, [pc, #84]	; (80071a8 <TIM_OC6_SetConfig+0xc8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d109      	bne.n	800716c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800715e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	029b      	lsls	r3, r3, #10
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	621a      	str	r2, [r3, #32]
}
 8007186:	bf00      	nop
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	feff8fff 	.word	0xfeff8fff
 8007198:	40010000 	.word	0x40010000
 800719c:	40010400 	.word	0x40010400
 80071a0:	40014000 	.word	0x40014000
 80071a4:	40014400 	.word	0x40014400
 80071a8:	40014800 	.word	0x40014800

080071ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	f023 0201 	bic.w	r2, r3, #1
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f023 030a 	bic.w	r3, r3, #10
 80071e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	621a      	str	r2, [r3, #32]
}
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800720a:	b480      	push	{r7}
 800720c:	b087      	sub	sp, #28
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	f023 0210 	bic.w	r2, r3, #16
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	031b      	lsls	r3, r3, #12
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	621a      	str	r2, [r3, #32]
}
 800725e:	bf00      	nop
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
	...

0800726c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <TIM_ITRx_SetConfig+0x38>)
 8007280:	4013      	ands	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	f043 0307 	orr.w	r3, r3, #7
 800728e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	609a      	str	r2, [r3, #8]
}
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	ffcfff8f 	.word	0xffcfff8f

080072a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	021a      	lsls	r2, r3, #8
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	431a      	orrs	r2, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	609a      	str	r2, [r3, #8]
}
 80072dc:	bf00      	nop
 80072de:	371c      	adds	r7, #28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	2201      	movs	r2, #1
 80072fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6a1a      	ldr	r2, [r3, #32]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	43db      	mvns	r3, r3
 800730a:	401a      	ands	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a1a      	ldr	r2, [r3, #32]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f003 031f 	and.w	r3, r3, #31
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	fa01 f303 	lsl.w	r3, r1, r3
 8007320:	431a      	orrs	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	621a      	str	r2, [r3, #32]
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
	...

08007334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007348:	2302      	movs	r3, #2
 800734a:	e06d      	b.n	8007428 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a30      	ldr	r2, [pc, #192]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d004      	beq.n	8007380 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a2f      	ldr	r2, [pc, #188]	; (8007438 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d108      	bne.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007386:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007398:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a20      	ldr	r2, [pc, #128]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d022      	beq.n	80073fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073be:	d01d      	beq.n	80073fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a1d      	ldr	r2, [pc, #116]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d018      	beq.n	80073fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a1c      	ldr	r2, [pc, #112]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d013      	beq.n	80073fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a1a      	ldr	r2, [pc, #104]	; (8007444 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00e      	beq.n	80073fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a15      	ldr	r2, [pc, #84]	; (8007438 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d009      	beq.n	80073fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a16      	ldr	r2, [pc, #88]	; (8007448 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d004      	beq.n	80073fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a15      	ldr	r2, [pc, #84]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d10c      	bne.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007402:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	4313      	orrs	r3, r2
 800740c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	40010000 	.word	0x40010000
 8007438:	40010400 	.word	0x40010400
 800743c:	40000400 	.word	0x40000400
 8007440:	40000800 	.word	0x40000800
 8007444:	40000c00 	.word	0x40000c00
 8007448:	40001800 	.word	0x40001800
 800744c:	40014000 	.word	0x40014000

08007450 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007468:	2302      	movs	r3, #2
 800746a:	e065      	b.n	8007538 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	4313      	orrs	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d2:	4313      	orrs	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	041b      	lsls	r3, r3, #16
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a16      	ldr	r2, [pc, #88]	; (8007544 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d004      	beq.n	80074fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a14      	ldr	r2, [pc, #80]	; (8007548 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d115      	bne.n	8007526 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	051b      	lsls	r3, r3, #20
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	69db      	ldr	r3, [r3, #28]
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	40010000 	.word	0x40010000
 8007548:	40010400 	.word	0x40010400

0800754c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e042      	b.n	8007620 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d106      	bne.n	80075b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7fa fa05 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2224      	movs	r2, #36	; 0x24
 80075b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0201 	bic.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f8c2 	bl	8007754 <UART_SetConfig>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e022      	b.n	8007620 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fe1e 	bl	8008224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f042 0201 	orr.w	r2, r2, #1
 8007616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fea5 	bl	8008368 <UART_CheckIdleState>
 800761e:	4603      	mov	r3, r0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	; 0x28
 800762c:	af02      	add	r7, sp, #8
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	4613      	mov	r3, r2
 8007636:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800763e:	2b20      	cmp	r3, #32
 8007640:	f040 8083 	bne.w	800774a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <HAL_UART_Transmit+0x28>
 800764a:	88fb      	ldrh	r3, [r7, #6]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e07b      	b.n	800774c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_UART_Transmit+0x3a>
 800765e:	2302      	movs	r3, #2
 8007660:	e074      	b.n	800774c <HAL_UART_Transmit+0x124>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2221      	movs	r2, #33	; 0x21
 8007676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800767a:	f7fa fbfb 	bl	8001e74 <HAL_GetTick>
 800767e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	88fa      	ldrh	r2, [r7, #6]
 8007684:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	88fa      	ldrh	r2, [r7, #6]
 800768c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007698:	d108      	bne.n	80076ac <HAL_UART_Transmit+0x84>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d104      	bne.n	80076ac <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	e003      	b.n	80076b4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80076bc:	e02c      	b.n	8007718 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2200      	movs	r2, #0
 80076c6:	2180      	movs	r1, #128	; 0x80
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 fe98 	bl	80083fe <UART_WaitOnFlagUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e039      	b.n	800774c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10b      	bne.n	80076f6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	3302      	adds	r3, #2
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	e007      	b.n	8007706 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	781a      	ldrb	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	3301      	adds	r3, #1
 8007704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1cc      	bne.n	80076be <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2200      	movs	r2, #0
 800772c:	2140      	movs	r1, #64	; 0x40
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 fe65 	bl	80083fe <UART_WaitOnFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e006      	b.n	800774c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2220      	movs	r2, #32
 8007742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	e000      	b.n	800774c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800774a:	2302      	movs	r3, #2
  }
}
 800774c:	4618      	mov	r0, r3
 800774e:	3720      	adds	r7, #32
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007758:	b092      	sub	sp, #72	; 0x48
 800775a:	af00      	add	r7, sp, #0
 800775c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	689a      	ldr	r2, [r3, #8]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	431a      	orrs	r2, r3
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	431a      	orrs	r2, r3
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	4313      	orrs	r3, r2
 800777a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	4bbe      	ldr	r3, [pc, #760]	; (8007a7c <UART_SetConfig+0x328>)
 8007784:	4013      	ands	r3, r2
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	6812      	ldr	r2, [r2, #0]
 800778a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800778c:	430b      	orrs	r3, r1
 800778e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4ab3      	ldr	r2, [pc, #716]	; (8007a80 <UART_SetConfig+0x32c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d004      	beq.n	80077c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077bc:	4313      	orrs	r3, r2
 80077be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	4baf      	ldr	r3, [pc, #700]	; (8007a84 <UART_SetConfig+0x330>)
 80077c8:	4013      	ands	r3, r2
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	6812      	ldr	r2, [r2, #0]
 80077ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077d0:	430b      	orrs	r3, r1
 80077d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077da:	f023 010f 	bic.w	r1, r3, #15
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4aa6      	ldr	r2, [pc, #664]	; (8007a88 <UART_SetConfig+0x334>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d177      	bne.n	80078e4 <UART_SetConfig+0x190>
 80077f4:	4ba5      	ldr	r3, [pc, #660]	; (8007a8c <UART_SetConfig+0x338>)
 80077f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077fc:	2b28      	cmp	r3, #40	; 0x28
 80077fe:	d86d      	bhi.n	80078dc <UART_SetConfig+0x188>
 8007800:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <UART_SetConfig+0xb4>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	080078ad 	.word	0x080078ad
 800780c:	080078dd 	.word	0x080078dd
 8007810:	080078dd 	.word	0x080078dd
 8007814:	080078dd 	.word	0x080078dd
 8007818:	080078dd 	.word	0x080078dd
 800781c:	080078dd 	.word	0x080078dd
 8007820:	080078dd 	.word	0x080078dd
 8007824:	080078dd 	.word	0x080078dd
 8007828:	080078b5 	.word	0x080078b5
 800782c:	080078dd 	.word	0x080078dd
 8007830:	080078dd 	.word	0x080078dd
 8007834:	080078dd 	.word	0x080078dd
 8007838:	080078dd 	.word	0x080078dd
 800783c:	080078dd 	.word	0x080078dd
 8007840:	080078dd 	.word	0x080078dd
 8007844:	080078dd 	.word	0x080078dd
 8007848:	080078bd 	.word	0x080078bd
 800784c:	080078dd 	.word	0x080078dd
 8007850:	080078dd 	.word	0x080078dd
 8007854:	080078dd 	.word	0x080078dd
 8007858:	080078dd 	.word	0x080078dd
 800785c:	080078dd 	.word	0x080078dd
 8007860:	080078dd 	.word	0x080078dd
 8007864:	080078dd 	.word	0x080078dd
 8007868:	080078c5 	.word	0x080078c5
 800786c:	080078dd 	.word	0x080078dd
 8007870:	080078dd 	.word	0x080078dd
 8007874:	080078dd 	.word	0x080078dd
 8007878:	080078dd 	.word	0x080078dd
 800787c:	080078dd 	.word	0x080078dd
 8007880:	080078dd 	.word	0x080078dd
 8007884:	080078dd 	.word	0x080078dd
 8007888:	080078cd 	.word	0x080078cd
 800788c:	080078dd 	.word	0x080078dd
 8007890:	080078dd 	.word	0x080078dd
 8007894:	080078dd 	.word	0x080078dd
 8007898:	080078dd 	.word	0x080078dd
 800789c:	080078dd 	.word	0x080078dd
 80078a0:	080078dd 	.word	0x080078dd
 80078a4:	080078dd 	.word	0x080078dd
 80078a8:	080078d5 	.word	0x080078d5
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b2:	e222      	b.n	8007cfa <UART_SetConfig+0x5a6>
 80078b4:	2304      	movs	r3, #4
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ba:	e21e      	b.n	8007cfa <UART_SetConfig+0x5a6>
 80078bc:	2308      	movs	r3, #8
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c2:	e21a      	b.n	8007cfa <UART_SetConfig+0x5a6>
 80078c4:	2310      	movs	r3, #16
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ca:	e216      	b.n	8007cfa <UART_SetConfig+0x5a6>
 80078cc:	2320      	movs	r3, #32
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d2:	e212      	b.n	8007cfa <UART_SetConfig+0x5a6>
 80078d4:	2340      	movs	r3, #64	; 0x40
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078da:	e20e      	b.n	8007cfa <UART_SetConfig+0x5a6>
 80078dc:	2380      	movs	r3, #128	; 0x80
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e2:	e20a      	b.n	8007cfa <UART_SetConfig+0x5a6>
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a69      	ldr	r2, [pc, #420]	; (8007a90 <UART_SetConfig+0x33c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d130      	bne.n	8007950 <UART_SetConfig+0x1fc>
 80078ee:	4b67      	ldr	r3, [pc, #412]	; (8007a8c <UART_SetConfig+0x338>)
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	2b05      	cmp	r3, #5
 80078f8:	d826      	bhi.n	8007948 <UART_SetConfig+0x1f4>
 80078fa:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <UART_SetConfig+0x1ac>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	08007919 	.word	0x08007919
 8007904:	08007921 	.word	0x08007921
 8007908:	08007929 	.word	0x08007929
 800790c:	08007931 	.word	0x08007931
 8007910:	08007939 	.word	0x08007939
 8007914:	08007941 	.word	0x08007941
 8007918:	2300      	movs	r3, #0
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791e:	e1ec      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007920:	2304      	movs	r3, #4
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007926:	e1e8      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007928:	2308      	movs	r3, #8
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792e:	e1e4      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007930:	2310      	movs	r3, #16
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007936:	e1e0      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007938:	2320      	movs	r3, #32
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793e:	e1dc      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007940:	2340      	movs	r3, #64	; 0x40
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007946:	e1d8      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007948:	2380      	movs	r3, #128	; 0x80
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794e:	e1d4      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a4f      	ldr	r2, [pc, #316]	; (8007a94 <UART_SetConfig+0x340>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d130      	bne.n	80079bc <UART_SetConfig+0x268>
 800795a:	4b4c      	ldr	r3, [pc, #304]	; (8007a8c <UART_SetConfig+0x338>)
 800795c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	2b05      	cmp	r3, #5
 8007964:	d826      	bhi.n	80079b4 <UART_SetConfig+0x260>
 8007966:	a201      	add	r2, pc, #4	; (adr r2, 800796c <UART_SetConfig+0x218>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	08007985 	.word	0x08007985
 8007970:	0800798d 	.word	0x0800798d
 8007974:	08007995 	.word	0x08007995
 8007978:	0800799d 	.word	0x0800799d
 800797c:	080079a5 	.word	0x080079a5
 8007980:	080079ad 	.word	0x080079ad
 8007984:	2300      	movs	r3, #0
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798a:	e1b6      	b.n	8007cfa <UART_SetConfig+0x5a6>
 800798c:	2304      	movs	r3, #4
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007992:	e1b2      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007994:	2308      	movs	r3, #8
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799a:	e1ae      	b.n	8007cfa <UART_SetConfig+0x5a6>
 800799c:	2310      	movs	r3, #16
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a2:	e1aa      	b.n	8007cfa <UART_SetConfig+0x5a6>
 80079a4:	2320      	movs	r3, #32
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079aa:	e1a6      	b.n	8007cfa <UART_SetConfig+0x5a6>
 80079ac:	2340      	movs	r3, #64	; 0x40
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079b2:	e1a2      	b.n	8007cfa <UART_SetConfig+0x5a6>
 80079b4:	2380      	movs	r3, #128	; 0x80
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ba:	e19e      	b.n	8007cfa <UART_SetConfig+0x5a6>
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a35      	ldr	r2, [pc, #212]	; (8007a98 <UART_SetConfig+0x344>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d130      	bne.n	8007a28 <UART_SetConfig+0x2d4>
 80079c6:	4b31      	ldr	r3, [pc, #196]	; (8007a8c <UART_SetConfig+0x338>)
 80079c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ca:	f003 0307 	and.w	r3, r3, #7
 80079ce:	2b05      	cmp	r3, #5
 80079d0:	d826      	bhi.n	8007a20 <UART_SetConfig+0x2cc>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <UART_SetConfig+0x284>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	080079f1 	.word	0x080079f1
 80079dc:	080079f9 	.word	0x080079f9
 80079e0:	08007a01 	.word	0x08007a01
 80079e4:	08007a09 	.word	0x08007a09
 80079e8:	08007a11 	.word	0x08007a11
 80079ec:	08007a19 	.word	0x08007a19
 80079f0:	2300      	movs	r3, #0
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f6:	e180      	b.n	8007cfa <UART_SetConfig+0x5a6>
 80079f8:	2304      	movs	r3, #4
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fe:	e17c      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007a00:	2308      	movs	r3, #8
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a06:	e178      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007a08:	2310      	movs	r3, #16
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0e:	e174      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007a10:	2320      	movs	r3, #32
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a16:	e170      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007a18:	2340      	movs	r3, #64	; 0x40
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a1e:	e16c      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a26:	e168      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a1b      	ldr	r2, [pc, #108]	; (8007a9c <UART_SetConfig+0x348>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d142      	bne.n	8007ab8 <UART_SetConfig+0x364>
 8007a32:	4b16      	ldr	r3, [pc, #88]	; (8007a8c <UART_SetConfig+0x338>)
 8007a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b05      	cmp	r3, #5
 8007a3c:	d838      	bhi.n	8007ab0 <UART_SetConfig+0x35c>
 8007a3e:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <UART_SetConfig+0x2f0>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007a5d 	.word	0x08007a5d
 8007a48:	08007a65 	.word	0x08007a65
 8007a4c:	08007a6d 	.word	0x08007a6d
 8007a50:	08007a75 	.word	0x08007a75
 8007a54:	08007aa1 	.word	0x08007aa1
 8007a58:	08007aa9 	.word	0x08007aa9
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a62:	e14a      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007a64:	2304      	movs	r3, #4
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6a:	e146      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007a6c:	2308      	movs	r3, #8
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a72:	e142      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007a74:	2310      	movs	r3, #16
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7a:	e13e      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007a7c:	cfff69f3 	.word	0xcfff69f3
 8007a80:	58000c00 	.word	0x58000c00
 8007a84:	11fff4ff 	.word	0x11fff4ff
 8007a88:	40011000 	.word	0x40011000
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	40004400 	.word	0x40004400
 8007a94:	40004800 	.word	0x40004800
 8007a98:	40004c00 	.word	0x40004c00
 8007a9c:	40005000 	.word	0x40005000
 8007aa0:	2320      	movs	r3, #32
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa6:	e128      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007aa8:	2340      	movs	r3, #64	; 0x40
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aae:	e124      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007ab0:	2380      	movs	r3, #128	; 0x80
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab6:	e120      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4acb      	ldr	r2, [pc, #812]	; (8007dec <UART_SetConfig+0x698>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d176      	bne.n	8007bb0 <UART_SetConfig+0x45c>
 8007ac2:	4bcb      	ldr	r3, [pc, #812]	; (8007df0 <UART_SetConfig+0x69c>)
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aca:	2b28      	cmp	r3, #40	; 0x28
 8007acc:	d86c      	bhi.n	8007ba8 <UART_SetConfig+0x454>
 8007ace:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <UART_SetConfig+0x380>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007b79 	.word	0x08007b79
 8007ad8:	08007ba9 	.word	0x08007ba9
 8007adc:	08007ba9 	.word	0x08007ba9
 8007ae0:	08007ba9 	.word	0x08007ba9
 8007ae4:	08007ba9 	.word	0x08007ba9
 8007ae8:	08007ba9 	.word	0x08007ba9
 8007aec:	08007ba9 	.word	0x08007ba9
 8007af0:	08007ba9 	.word	0x08007ba9
 8007af4:	08007b81 	.word	0x08007b81
 8007af8:	08007ba9 	.word	0x08007ba9
 8007afc:	08007ba9 	.word	0x08007ba9
 8007b00:	08007ba9 	.word	0x08007ba9
 8007b04:	08007ba9 	.word	0x08007ba9
 8007b08:	08007ba9 	.word	0x08007ba9
 8007b0c:	08007ba9 	.word	0x08007ba9
 8007b10:	08007ba9 	.word	0x08007ba9
 8007b14:	08007b89 	.word	0x08007b89
 8007b18:	08007ba9 	.word	0x08007ba9
 8007b1c:	08007ba9 	.word	0x08007ba9
 8007b20:	08007ba9 	.word	0x08007ba9
 8007b24:	08007ba9 	.word	0x08007ba9
 8007b28:	08007ba9 	.word	0x08007ba9
 8007b2c:	08007ba9 	.word	0x08007ba9
 8007b30:	08007ba9 	.word	0x08007ba9
 8007b34:	08007b91 	.word	0x08007b91
 8007b38:	08007ba9 	.word	0x08007ba9
 8007b3c:	08007ba9 	.word	0x08007ba9
 8007b40:	08007ba9 	.word	0x08007ba9
 8007b44:	08007ba9 	.word	0x08007ba9
 8007b48:	08007ba9 	.word	0x08007ba9
 8007b4c:	08007ba9 	.word	0x08007ba9
 8007b50:	08007ba9 	.word	0x08007ba9
 8007b54:	08007b99 	.word	0x08007b99
 8007b58:	08007ba9 	.word	0x08007ba9
 8007b5c:	08007ba9 	.word	0x08007ba9
 8007b60:	08007ba9 	.word	0x08007ba9
 8007b64:	08007ba9 	.word	0x08007ba9
 8007b68:	08007ba9 	.word	0x08007ba9
 8007b6c:	08007ba9 	.word	0x08007ba9
 8007b70:	08007ba9 	.word	0x08007ba9
 8007b74:	08007ba1 	.word	0x08007ba1
 8007b78:	2301      	movs	r3, #1
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7e:	e0bc      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007b80:	2304      	movs	r3, #4
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b86:	e0b8      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007b88:	2308      	movs	r3, #8
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8e:	e0b4      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007b90:	2310      	movs	r3, #16
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b96:	e0b0      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007b98:	2320      	movs	r3, #32
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9e:	e0ac      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007ba0:	2340      	movs	r3, #64	; 0x40
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba6:	e0a8      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007ba8:	2380      	movs	r3, #128	; 0x80
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bae:	e0a4      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a8f      	ldr	r2, [pc, #572]	; (8007df4 <UART_SetConfig+0x6a0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d130      	bne.n	8007c1c <UART_SetConfig+0x4c8>
 8007bba:	4b8d      	ldr	r3, [pc, #564]	; (8007df0 <UART_SetConfig+0x69c>)
 8007bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	2b05      	cmp	r3, #5
 8007bc4:	d826      	bhi.n	8007c14 <UART_SetConfig+0x4c0>
 8007bc6:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <UART_SetConfig+0x478>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007be5 	.word	0x08007be5
 8007bd0:	08007bed 	.word	0x08007bed
 8007bd4:	08007bf5 	.word	0x08007bf5
 8007bd8:	08007bfd 	.word	0x08007bfd
 8007bdc:	08007c05 	.word	0x08007c05
 8007be0:	08007c0d 	.word	0x08007c0d
 8007be4:	2300      	movs	r3, #0
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bea:	e086      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007bec:	2304      	movs	r3, #4
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf2:	e082      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfa:	e07e      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e07a      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007c04:	2320      	movs	r3, #32
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e076      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007c0c:	2340      	movs	r3, #64	; 0x40
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c12:	e072      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007c14:	2380      	movs	r3, #128	; 0x80
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1a:	e06e      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a75      	ldr	r2, [pc, #468]	; (8007df8 <UART_SetConfig+0x6a4>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d130      	bne.n	8007c88 <UART_SetConfig+0x534>
 8007c26:	4b72      	ldr	r3, [pc, #456]	; (8007df0 <UART_SetConfig+0x69c>)
 8007c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	2b05      	cmp	r3, #5
 8007c30:	d826      	bhi.n	8007c80 <UART_SetConfig+0x52c>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <UART_SetConfig+0x4e4>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c51 	.word	0x08007c51
 8007c3c:	08007c59 	.word	0x08007c59
 8007c40:	08007c61 	.word	0x08007c61
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007c71 	.word	0x08007c71
 8007c4c:	08007c79 	.word	0x08007c79
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c56:	e050      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c5e:	e04c      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007c60:	2308      	movs	r3, #8
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c66:	e048      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e044      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007c70:	2320      	movs	r3, #32
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e040      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007c78:	2340      	movs	r3, #64	; 0x40
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e03c      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007c80:	2380      	movs	r3, #128	; 0x80
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c86:	e038      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a5b      	ldr	r2, [pc, #364]	; (8007dfc <UART_SetConfig+0x6a8>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d130      	bne.n	8007cf4 <UART_SetConfig+0x5a0>
 8007c92:	4b57      	ldr	r3, [pc, #348]	; (8007df0 <UART_SetConfig+0x69c>)
 8007c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b05      	cmp	r3, #5
 8007c9c:	d826      	bhi.n	8007cec <UART_SetConfig+0x598>
 8007c9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <UART_SetConfig+0x550>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cbd 	.word	0x08007cbd
 8007ca8:	08007cc5 	.word	0x08007cc5
 8007cac:	08007ccd 	.word	0x08007ccd
 8007cb0:	08007cd5 	.word	0x08007cd5
 8007cb4:	08007cdd 	.word	0x08007cdd
 8007cb8:	08007ce5 	.word	0x08007ce5
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cc2:	e01a      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007cc4:	2304      	movs	r3, #4
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cca:	e016      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007ccc:	2308      	movs	r3, #8
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cd2:	e012      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007cd4:	2310      	movs	r3, #16
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cda:	e00e      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007cdc:	2320      	movs	r3, #32
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e00a      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007ce4:	2340      	movs	r3, #64	; 0x40
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cea:	e006      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007cec:	2380      	movs	r3, #128	; 0x80
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cf2:	e002      	b.n	8007cfa <UART_SetConfig+0x5a6>
 8007cf4:	2380      	movs	r3, #128	; 0x80
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a3f      	ldr	r2, [pc, #252]	; (8007dfc <UART_SetConfig+0x6a8>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	f040 80f8 	bne.w	8007ef6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	dc46      	bgt.n	8007d9c <UART_SetConfig+0x648>
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	f2c0 8082 	blt.w	8007e18 <UART_SetConfig+0x6c4>
 8007d14:	3b02      	subs	r3, #2
 8007d16:	2b1e      	cmp	r3, #30
 8007d18:	d87e      	bhi.n	8007e18 <UART_SetConfig+0x6c4>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x5cc>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007da3 	.word	0x08007da3
 8007d24:	08007e19 	.word	0x08007e19
 8007d28:	08007dab 	.word	0x08007dab
 8007d2c:	08007e19 	.word	0x08007e19
 8007d30:	08007e19 	.word	0x08007e19
 8007d34:	08007e19 	.word	0x08007e19
 8007d38:	08007dbb 	.word	0x08007dbb
 8007d3c:	08007e19 	.word	0x08007e19
 8007d40:	08007e19 	.word	0x08007e19
 8007d44:	08007e19 	.word	0x08007e19
 8007d48:	08007e19 	.word	0x08007e19
 8007d4c:	08007e19 	.word	0x08007e19
 8007d50:	08007e19 	.word	0x08007e19
 8007d54:	08007e19 	.word	0x08007e19
 8007d58:	08007dcb 	.word	0x08007dcb
 8007d5c:	08007e19 	.word	0x08007e19
 8007d60:	08007e19 	.word	0x08007e19
 8007d64:	08007e19 	.word	0x08007e19
 8007d68:	08007e19 	.word	0x08007e19
 8007d6c:	08007e19 	.word	0x08007e19
 8007d70:	08007e19 	.word	0x08007e19
 8007d74:	08007e19 	.word	0x08007e19
 8007d78:	08007e19 	.word	0x08007e19
 8007d7c:	08007e19 	.word	0x08007e19
 8007d80:	08007e19 	.word	0x08007e19
 8007d84:	08007e19 	.word	0x08007e19
 8007d88:	08007e19 	.word	0x08007e19
 8007d8c:	08007e19 	.word	0x08007e19
 8007d90:	08007e19 	.word	0x08007e19
 8007d94:	08007e19 	.word	0x08007e19
 8007d98:	08007e0b 	.word	0x08007e0b
 8007d9c:	2b40      	cmp	r3, #64	; 0x40
 8007d9e:	d037      	beq.n	8007e10 <UART_SetConfig+0x6bc>
 8007da0:	e03a      	b.n	8007e18 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007da2:	f7fd fc6d 	bl	8005680 <HAL_RCCEx_GetD3PCLK1Freq>
 8007da6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007da8:	e03c      	b.n	8007e24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fd fc7c 	bl	80056ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db8:	e034      	b.n	8007e24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dba:	f107 0318 	add.w	r3, r7, #24
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fd fdc8 	bl	8005954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dc8:	e02c      	b.n	8007e24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dca:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <UART_SetConfig+0x69c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d016      	beq.n	8007e04 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007dd6:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <UART_SetConfig+0x69c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	08db      	lsrs	r3, r3, #3
 8007ddc:	f003 0303 	and.w	r3, r3, #3
 8007de0:	4a07      	ldr	r2, [pc, #28]	; (8007e00 <UART_SetConfig+0x6ac>)
 8007de2:	fa22 f303 	lsr.w	r3, r2, r3
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007de8:	e01c      	b.n	8007e24 <UART_SetConfig+0x6d0>
 8007dea:	bf00      	nop
 8007dec:	40011400 	.word	0x40011400
 8007df0:	58024400 	.word	0x58024400
 8007df4:	40007800 	.word	0x40007800
 8007df8:	40007c00 	.word	0x40007c00
 8007dfc:	58000c00 	.word	0x58000c00
 8007e00:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007e04:	4b9d      	ldr	r3, [pc, #628]	; (800807c <UART_SetConfig+0x928>)
 8007e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e08:	e00c      	b.n	8007e24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e0a:	4b9d      	ldr	r3, [pc, #628]	; (8008080 <UART_SetConfig+0x92c>)
 8007e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e0e:	e009      	b.n	8007e24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e16:	e005      	b.n	8007e24 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 81de 	beq.w	80081e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	4a94      	ldr	r2, [pc, #592]	; (8008084 <UART_SetConfig+0x930>)
 8007e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e36:	461a      	mov	r2, r3
 8007e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e3e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	4613      	mov	r3, r2
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	4413      	add	r3, r2
 8007e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d305      	bcc.n	8007e5c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d903      	bls.n	8007e64 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007e62:	e1c1      	b.n	80081e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e66:	2200      	movs	r2, #0
 8007e68:	60bb      	str	r3, [r7, #8]
 8007e6a:	60fa      	str	r2, [r7, #12]
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	4a84      	ldr	r2, [pc, #528]	; (8008084 <UART_SetConfig+0x930>)
 8007e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2200      	movs	r2, #0
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	607a      	str	r2, [r7, #4]
 8007e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e86:	f7f8 fc3f 	bl	8000708 <__aeabi_uldivmod>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4610      	mov	r0, r2
 8007e90:	4619      	mov	r1, r3
 8007e92:	f04f 0200 	mov.w	r2, #0
 8007e96:	f04f 0300 	mov.w	r3, #0
 8007e9a:	020b      	lsls	r3, r1, #8
 8007e9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ea0:	0202      	lsls	r2, r0, #8
 8007ea2:	6979      	ldr	r1, [r7, #20]
 8007ea4:	6849      	ldr	r1, [r1, #4]
 8007ea6:	0849      	lsrs	r1, r1, #1
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	4605      	mov	r5, r0
 8007eae:	eb12 0804 	adds.w	r8, r2, r4
 8007eb2:	eb43 0905 	adc.w	r9, r3, r5
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	469a      	mov	sl, r3
 8007ebe:	4693      	mov	fp, r2
 8007ec0:	4652      	mov	r2, sl
 8007ec2:	465b      	mov	r3, fp
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	f7f8 fc1e 	bl	8000708 <__aeabi_uldivmod>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eda:	d308      	bcc.n	8007eee <UART_SetConfig+0x79a>
 8007edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ee2:	d204      	bcs.n	8007eee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eea:	60da      	str	r2, [r3, #12]
 8007eec:	e17c      	b.n	80081e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ef4:	e178      	b.n	80081e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007efe:	f040 80c5 	bne.w	800808c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007f02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	dc48      	bgt.n	8007f9c <UART_SetConfig+0x848>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	db7b      	blt.n	8008006 <UART_SetConfig+0x8b2>
 8007f0e:	2b20      	cmp	r3, #32
 8007f10:	d879      	bhi.n	8008006 <UART_SetConfig+0x8b2>
 8007f12:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <UART_SetConfig+0x7c4>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007fa3 	.word	0x08007fa3
 8007f1c:	08007fab 	.word	0x08007fab
 8007f20:	08008007 	.word	0x08008007
 8007f24:	08008007 	.word	0x08008007
 8007f28:	08007fb3 	.word	0x08007fb3
 8007f2c:	08008007 	.word	0x08008007
 8007f30:	08008007 	.word	0x08008007
 8007f34:	08008007 	.word	0x08008007
 8007f38:	08007fc3 	.word	0x08007fc3
 8007f3c:	08008007 	.word	0x08008007
 8007f40:	08008007 	.word	0x08008007
 8007f44:	08008007 	.word	0x08008007
 8007f48:	08008007 	.word	0x08008007
 8007f4c:	08008007 	.word	0x08008007
 8007f50:	08008007 	.word	0x08008007
 8007f54:	08008007 	.word	0x08008007
 8007f58:	08007fd3 	.word	0x08007fd3
 8007f5c:	08008007 	.word	0x08008007
 8007f60:	08008007 	.word	0x08008007
 8007f64:	08008007 	.word	0x08008007
 8007f68:	08008007 	.word	0x08008007
 8007f6c:	08008007 	.word	0x08008007
 8007f70:	08008007 	.word	0x08008007
 8007f74:	08008007 	.word	0x08008007
 8007f78:	08008007 	.word	0x08008007
 8007f7c:	08008007 	.word	0x08008007
 8007f80:	08008007 	.word	0x08008007
 8007f84:	08008007 	.word	0x08008007
 8007f88:	08008007 	.word	0x08008007
 8007f8c:	08008007 	.word	0x08008007
 8007f90:	08008007 	.word	0x08008007
 8007f94:	08008007 	.word	0x08008007
 8007f98:	08007ff9 	.word	0x08007ff9
 8007f9c:	2b40      	cmp	r3, #64	; 0x40
 8007f9e:	d02e      	beq.n	8007ffe <UART_SetConfig+0x8aa>
 8007fa0:	e031      	b.n	8008006 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fa2:	f7fc fbfb 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 8007fa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007fa8:	e033      	b.n	8008012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007faa:	f7fc fc0d 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 8007fae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007fb0:	e02f      	b.n	8008012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fd fb78 	bl	80056ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc0:	e027      	b.n	8008012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fc2:	f107 0318 	add.w	r3, r7, #24
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fd fcc4 	bl	8005954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fd0:	e01f      	b.n	8008012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fd2:	4b2d      	ldr	r3, [pc, #180]	; (8008088 <UART_SetConfig+0x934>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d009      	beq.n	8007ff2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007fde:	4b2a      	ldr	r3, [pc, #168]	; (8008088 <UART_SetConfig+0x934>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	08db      	lsrs	r3, r3, #3
 8007fe4:	f003 0303 	and.w	r3, r3, #3
 8007fe8:	4a24      	ldr	r2, [pc, #144]	; (800807c <UART_SetConfig+0x928>)
 8007fea:	fa22 f303 	lsr.w	r3, r2, r3
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ff0:	e00f      	b.n	8008012 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007ff2:	4b22      	ldr	r3, [pc, #136]	; (800807c <UART_SetConfig+0x928>)
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff6:	e00c      	b.n	8008012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ff8:	4b21      	ldr	r3, [pc, #132]	; (8008080 <UART_SetConfig+0x92c>)
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ffc:	e009      	b.n	8008012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008004:	e005      	b.n	8008012 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008010:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 80e7 	beq.w	80081e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	4a19      	ldr	r2, [pc, #100]	; (8008084 <UART_SetConfig+0x930>)
 8008020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008024:	461a      	mov	r2, r3
 8008026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008028:	fbb3 f3f2 	udiv	r3, r3, r2
 800802c:	005a      	lsls	r2, r3, #1
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	085b      	lsrs	r3, r3, #1
 8008034:	441a      	add	r2, r3
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	fbb2 f3f3 	udiv	r3, r2, r3
 800803e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	2b0f      	cmp	r3, #15
 8008044:	d916      	bls.n	8008074 <UART_SetConfig+0x920>
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804c:	d212      	bcs.n	8008074 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	b29b      	uxth	r3, r3
 8008052:	f023 030f 	bic.w	r3, r3, #15
 8008056:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805a:	085b      	lsrs	r3, r3, #1
 800805c:	b29b      	uxth	r3, r3
 800805e:	f003 0307 	and.w	r3, r3, #7
 8008062:	b29a      	uxth	r2, r3
 8008064:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008066:	4313      	orrs	r3, r2
 8008068:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008070:	60da      	str	r2, [r3, #12]
 8008072:	e0b9      	b.n	80081e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800807a:	e0b5      	b.n	80081e8 <UART_SetConfig+0xa94>
 800807c:	03d09000 	.word	0x03d09000
 8008080:	003d0900 	.word	0x003d0900
 8008084:	0800cf3c 	.word	0x0800cf3c
 8008088:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800808c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008090:	2b20      	cmp	r3, #32
 8008092:	dc49      	bgt.n	8008128 <UART_SetConfig+0x9d4>
 8008094:	2b00      	cmp	r3, #0
 8008096:	db7c      	blt.n	8008192 <UART_SetConfig+0xa3e>
 8008098:	2b20      	cmp	r3, #32
 800809a:	d87a      	bhi.n	8008192 <UART_SetConfig+0xa3e>
 800809c:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <UART_SetConfig+0x950>)
 800809e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a2:	bf00      	nop
 80080a4:	0800812f 	.word	0x0800812f
 80080a8:	08008137 	.word	0x08008137
 80080ac:	08008193 	.word	0x08008193
 80080b0:	08008193 	.word	0x08008193
 80080b4:	0800813f 	.word	0x0800813f
 80080b8:	08008193 	.word	0x08008193
 80080bc:	08008193 	.word	0x08008193
 80080c0:	08008193 	.word	0x08008193
 80080c4:	0800814f 	.word	0x0800814f
 80080c8:	08008193 	.word	0x08008193
 80080cc:	08008193 	.word	0x08008193
 80080d0:	08008193 	.word	0x08008193
 80080d4:	08008193 	.word	0x08008193
 80080d8:	08008193 	.word	0x08008193
 80080dc:	08008193 	.word	0x08008193
 80080e0:	08008193 	.word	0x08008193
 80080e4:	0800815f 	.word	0x0800815f
 80080e8:	08008193 	.word	0x08008193
 80080ec:	08008193 	.word	0x08008193
 80080f0:	08008193 	.word	0x08008193
 80080f4:	08008193 	.word	0x08008193
 80080f8:	08008193 	.word	0x08008193
 80080fc:	08008193 	.word	0x08008193
 8008100:	08008193 	.word	0x08008193
 8008104:	08008193 	.word	0x08008193
 8008108:	08008193 	.word	0x08008193
 800810c:	08008193 	.word	0x08008193
 8008110:	08008193 	.word	0x08008193
 8008114:	08008193 	.word	0x08008193
 8008118:	08008193 	.word	0x08008193
 800811c:	08008193 	.word	0x08008193
 8008120:	08008193 	.word	0x08008193
 8008124:	08008185 	.word	0x08008185
 8008128:	2b40      	cmp	r3, #64	; 0x40
 800812a:	d02e      	beq.n	800818a <UART_SetConfig+0xa36>
 800812c:	e031      	b.n	8008192 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800812e:	f7fc fb35 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 8008132:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008134:	e033      	b.n	800819e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008136:	f7fc fb47 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 800813a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800813c:	e02f      	b.n	800819e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800813e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008142:	4618      	mov	r0, r3
 8008144:	f7fd fab2 	bl	80056ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800814c:	e027      	b.n	800819e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800814e:	f107 0318 	add.w	r3, r7, #24
 8008152:	4618      	mov	r0, r3
 8008154:	f7fd fbfe 	bl	8005954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800815c:	e01f      	b.n	800819e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800815e:	4b2d      	ldr	r3, [pc, #180]	; (8008214 <UART_SetConfig+0xac0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800816a:	4b2a      	ldr	r3, [pc, #168]	; (8008214 <UART_SetConfig+0xac0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	08db      	lsrs	r3, r3, #3
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	4a28      	ldr	r2, [pc, #160]	; (8008218 <UART_SetConfig+0xac4>)
 8008176:	fa22 f303 	lsr.w	r3, r2, r3
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800817c:	e00f      	b.n	800819e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800817e:	4b26      	ldr	r3, [pc, #152]	; (8008218 <UART_SetConfig+0xac4>)
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008182:	e00c      	b.n	800819e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008184:	4b25      	ldr	r3, [pc, #148]	; (800821c <UART_SetConfig+0xac8>)
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008188:	e009      	b.n	800819e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008190:	e005      	b.n	800819e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800819c:	bf00      	nop
    }

    if (pclk != 0U)
 800819e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d021      	beq.n	80081e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	4a1d      	ldr	r2, [pc, #116]	; (8008220 <UART_SetConfig+0xacc>)
 80081aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081ae:	461a      	mov	r2, r3
 80081b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	085b      	lsrs	r3, r3, #1
 80081bc:	441a      	add	r2, r3
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	2b0f      	cmp	r3, #15
 80081cc:	d909      	bls.n	80081e2 <UART_SetConfig+0xa8e>
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d4:	d205      	bcs.n	80081e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	b29a      	uxth	r2, r3
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60da      	str	r2, [r3, #12]
 80081e0:	e002      	b.n	80081e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2200      	movs	r2, #0
 80081fc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2200      	movs	r2, #0
 8008202:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008204:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008208:	4618      	mov	r0, r3
 800820a:	3748      	adds	r7, #72	; 0x48
 800820c:	46bd      	mov	sp, r7
 800820e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008212:	bf00      	nop
 8008214:	58024400 	.word	0x58024400
 8008218:	03d09000 	.word	0x03d09000
 800821c:	003d0900 	.word	0x003d0900
 8008220:	0800cf3c 	.word	0x0800cf3c

08008224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00a      	beq.n	800824e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	430a      	orrs	r2, r1
 800824c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	430a      	orrs	r2, r1
 800826e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00a      	beq.n	8008292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b8:	f003 0310 	and.w	r3, r3, #16
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00a      	beq.n	80082d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008300:	2b00      	cmp	r3, #0
 8008302:	d01a      	beq.n	800833a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008322:	d10a      	bne.n	800833a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00a      	beq.n	800835c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	430a      	orrs	r2, r1
 800835a:	605a      	str	r2, [r3, #4]
  }
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af02      	add	r7, sp, #8
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008378:	f7f9 fd7c 	bl	8001e74 <HAL_GetTick>
 800837c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0308 	and.w	r3, r3, #8
 8008388:	2b08      	cmp	r3, #8
 800838a:	d10e      	bne.n	80083aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800838c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f82f 	bl	80083fe <UART_WaitOnFlagUntilTimeout>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e025      	b.n	80083f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0304 	and.w	r3, r3, #4
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d10e      	bne.n	80083d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f819 	bl	80083fe <UART_WaitOnFlagUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e00f      	b.n	80083f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b09c      	sub	sp, #112	; 0x70
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	603b      	str	r3, [r7, #0]
 800840a:	4613      	mov	r3, r2
 800840c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800840e:	e0a9      	b.n	8008564 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008416:	f000 80a5 	beq.w	8008564 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800841a:	f7f9 fd2b 	bl	8001e74 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008426:	429a      	cmp	r2, r3
 8008428:	d302      	bcc.n	8008430 <UART_WaitOnFlagUntilTimeout+0x32>
 800842a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800842c:	2b00      	cmp	r3, #0
 800842e:	d140      	bne.n	80084b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800843e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008440:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008444:	667b      	str	r3, [r7, #100]	; 0x64
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800844e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008450:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008454:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800845c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e6      	bne.n	8008430 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3308      	adds	r3, #8
 8008468:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	663b      	str	r3, [r7, #96]	; 0x60
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3308      	adds	r3, #8
 8008480:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008482:	64ba      	str	r2, [r7, #72]	; 0x48
 8008484:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e5      	bne.n	8008462 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e069      	b.n	8008586 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0304 	and.w	r3, r3, #4
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d051      	beq.n	8008564 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ce:	d149      	bne.n	8008564 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
 80084fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e6      	bne.n	80084da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3308      	adds	r3, #8
 8008512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	613b      	str	r3, [r7, #16]
   return(result);
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f023 0301 	bic.w	r3, r3, #1
 8008522:	66bb      	str	r3, [r7, #104]	; 0x68
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3308      	adds	r3, #8
 800852a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800852c:	623a      	str	r2, [r7, #32]
 800852e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	69f9      	ldr	r1, [r7, #28]
 8008532:	6a3a      	ldr	r2, [r7, #32]
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	61bb      	str	r3, [r7, #24]
   return(result);
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e5      	bne.n	800850c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2220      	movs	r2, #32
 8008544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2220      	movs	r2, #32
 800854c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2220      	movs	r2, #32
 8008554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e010      	b.n	8008586 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	69da      	ldr	r2, [r3, #28]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4013      	ands	r3, r2
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	429a      	cmp	r2, r3
 8008572:	bf0c      	ite	eq
 8008574:	2301      	moveq	r3, #1
 8008576:	2300      	movne	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	429a      	cmp	r2, r3
 8008580:	f43f af46 	beq.w	8008410 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3770      	adds	r7, #112	; 0x70
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800858e:	b480      	push	{r7}
 8008590:	b085      	sub	sp, #20
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800859c:	2b01      	cmp	r3, #1
 800859e:	d101      	bne.n	80085a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e027      	b.n	80085f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2224      	movs	r2, #36	; 0x24
 80085b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0201 	bic.w	r2, r2, #1
 80085ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80085d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2220      	movs	r2, #32
 80085e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008610:	2b01      	cmp	r3, #1
 8008612:	d101      	bne.n	8008618 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008614:	2302      	movs	r3, #2
 8008616:	e02d      	b.n	8008674 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2224      	movs	r2, #36	; 0x24
 8008624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f022 0201 	bic.w	r2, r2, #1
 800863e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	430a      	orrs	r2, r1
 8008652:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f84f 	bl	80086f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2220      	movs	r2, #32
 8008666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008690:	2302      	movs	r3, #2
 8008692:	e02d      	b.n	80086f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2224      	movs	r2, #36	; 0x24
 80086a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 0201 	bic.w	r2, r2, #1
 80086ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f811 	bl	80086f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008704:	2b00      	cmp	r3, #0
 8008706:	d108      	bne.n	800871a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008718:	e031      	b.n	800877e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800871a:	2310      	movs	r3, #16
 800871c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800871e:	2310      	movs	r3, #16
 8008720:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	0e5b      	lsrs	r3, r3, #25
 800872a:	b2db      	uxtb	r3, r3
 800872c:	f003 0307 	and.w	r3, r3, #7
 8008730:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	0f5b      	lsrs	r3, r3, #29
 800873a:	b2db      	uxtb	r3, r3
 800873c:	f003 0307 	and.w	r3, r3, #7
 8008740:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	7b3a      	ldrb	r2, [r7, #12]
 8008746:	4911      	ldr	r1, [pc, #68]	; (800878c <UARTEx_SetNbDataToProcess+0x94>)
 8008748:	5c8a      	ldrb	r2, [r1, r2]
 800874a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800874e:	7b3a      	ldrb	r2, [r7, #12]
 8008750:	490f      	ldr	r1, [pc, #60]	; (8008790 <UARTEx_SetNbDataToProcess+0x98>)
 8008752:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008754:	fb93 f3f2 	sdiv	r3, r3, r2
 8008758:	b29a      	uxth	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	7b7a      	ldrb	r2, [r7, #13]
 8008764:	4909      	ldr	r1, [pc, #36]	; (800878c <UARTEx_SetNbDataToProcess+0x94>)
 8008766:	5c8a      	ldrb	r2, [r1, r2]
 8008768:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800876c:	7b7a      	ldrb	r2, [r7, #13]
 800876e:	4908      	ldr	r1, [pc, #32]	; (8008790 <UARTEx_SetNbDataToProcess+0x98>)
 8008770:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008772:	fb93 f3f2 	sdiv	r3, r3, r2
 8008776:	b29a      	uxth	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800877e:	bf00      	nop
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	0800cf54 	.word	0x0800cf54
 8008790:	0800cf5c 	.word	0x0800cf5c

08008794 <__errno>:
 8008794:	4b01      	ldr	r3, [pc, #4]	; (800879c <__errno+0x8>)
 8008796:	6818      	ldr	r0, [r3, #0]
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	24000028 	.word	0x24000028

080087a0 <__libc_init_array>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	4d0d      	ldr	r5, [pc, #52]	; (80087d8 <__libc_init_array+0x38>)
 80087a4:	4c0d      	ldr	r4, [pc, #52]	; (80087dc <__libc_init_array+0x3c>)
 80087a6:	1b64      	subs	r4, r4, r5
 80087a8:	10a4      	asrs	r4, r4, #2
 80087aa:	2600      	movs	r6, #0
 80087ac:	42a6      	cmp	r6, r4
 80087ae:	d109      	bne.n	80087c4 <__libc_init_array+0x24>
 80087b0:	4d0b      	ldr	r5, [pc, #44]	; (80087e0 <__libc_init_array+0x40>)
 80087b2:	4c0c      	ldr	r4, [pc, #48]	; (80087e4 <__libc_init_array+0x44>)
 80087b4:	f004 fb88 	bl	800cec8 <_init>
 80087b8:	1b64      	subs	r4, r4, r5
 80087ba:	10a4      	asrs	r4, r4, #2
 80087bc:	2600      	movs	r6, #0
 80087be:	42a6      	cmp	r6, r4
 80087c0:	d105      	bne.n	80087ce <__libc_init_array+0x2e>
 80087c2:	bd70      	pop	{r4, r5, r6, pc}
 80087c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c8:	4798      	blx	r3
 80087ca:	3601      	adds	r6, #1
 80087cc:	e7ee      	b.n	80087ac <__libc_init_array+0xc>
 80087ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d2:	4798      	blx	r3
 80087d4:	3601      	adds	r6, #1
 80087d6:	e7f2      	b.n	80087be <__libc_init_array+0x1e>
 80087d8:	0800d414 	.word	0x0800d414
 80087dc:	0800d414 	.word	0x0800d414
 80087e0:	0800d414 	.word	0x0800d414
 80087e4:	0800d418 	.word	0x0800d418

080087e8 <memset>:
 80087e8:	4402      	add	r2, r0
 80087ea:	4603      	mov	r3, r0
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d100      	bne.n	80087f2 <memset+0xa>
 80087f0:	4770      	bx	lr
 80087f2:	f803 1b01 	strb.w	r1, [r3], #1
 80087f6:	e7f9      	b.n	80087ec <memset+0x4>

080087f8 <__cvt>:
 80087f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fa:	ed2d 8b02 	vpush	{d8}
 80087fe:	eeb0 8b40 	vmov.f64	d8, d0
 8008802:	b085      	sub	sp, #20
 8008804:	4617      	mov	r7, r2
 8008806:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008808:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800880a:	ee18 2a90 	vmov	r2, s17
 800880e:	f025 0520 	bic.w	r5, r5, #32
 8008812:	2a00      	cmp	r2, #0
 8008814:	bfb6      	itet	lt
 8008816:	222d      	movlt	r2, #45	; 0x2d
 8008818:	2200      	movge	r2, #0
 800881a:	eeb1 8b40 	vneglt.f64	d8, d0
 800881e:	2d46      	cmp	r5, #70	; 0x46
 8008820:	460c      	mov	r4, r1
 8008822:	701a      	strb	r2, [r3, #0]
 8008824:	d004      	beq.n	8008830 <__cvt+0x38>
 8008826:	2d45      	cmp	r5, #69	; 0x45
 8008828:	d100      	bne.n	800882c <__cvt+0x34>
 800882a:	3401      	adds	r4, #1
 800882c:	2102      	movs	r1, #2
 800882e:	e000      	b.n	8008832 <__cvt+0x3a>
 8008830:	2103      	movs	r1, #3
 8008832:	ab03      	add	r3, sp, #12
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	ab02      	add	r3, sp, #8
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	4622      	mov	r2, r4
 800883c:	4633      	mov	r3, r6
 800883e:	eeb0 0b48 	vmov.f64	d0, d8
 8008842:	f001 fd2d 	bl	800a2a0 <_dtoa_r>
 8008846:	2d47      	cmp	r5, #71	; 0x47
 8008848:	d101      	bne.n	800884e <__cvt+0x56>
 800884a:	07fb      	lsls	r3, r7, #31
 800884c:	d51a      	bpl.n	8008884 <__cvt+0x8c>
 800884e:	2d46      	cmp	r5, #70	; 0x46
 8008850:	eb00 0204 	add.w	r2, r0, r4
 8008854:	d10c      	bne.n	8008870 <__cvt+0x78>
 8008856:	7803      	ldrb	r3, [r0, #0]
 8008858:	2b30      	cmp	r3, #48	; 0x30
 800885a:	d107      	bne.n	800886c <__cvt+0x74>
 800885c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008864:	bf1c      	itt	ne
 8008866:	f1c4 0401 	rsbne	r4, r4, #1
 800886a:	6034      	strne	r4, [r6, #0]
 800886c:	6833      	ldr	r3, [r6, #0]
 800886e:	441a      	add	r2, r3
 8008870:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008878:	bf08      	it	eq
 800887a:	9203      	streq	r2, [sp, #12]
 800887c:	2130      	movs	r1, #48	; 0x30
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	4293      	cmp	r3, r2
 8008882:	d307      	bcc.n	8008894 <__cvt+0x9c>
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008888:	1a1b      	subs	r3, r3, r0
 800888a:	6013      	str	r3, [r2, #0]
 800888c:	b005      	add	sp, #20
 800888e:	ecbd 8b02 	vpop	{d8}
 8008892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008894:	1c5c      	adds	r4, r3, #1
 8008896:	9403      	str	r4, [sp, #12]
 8008898:	7019      	strb	r1, [r3, #0]
 800889a:	e7f0      	b.n	800887e <__cvt+0x86>

0800889c <__exponent>:
 800889c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800889e:	4603      	mov	r3, r0
 80088a0:	2900      	cmp	r1, #0
 80088a2:	bfb8      	it	lt
 80088a4:	4249      	neglt	r1, r1
 80088a6:	f803 2b02 	strb.w	r2, [r3], #2
 80088aa:	bfb4      	ite	lt
 80088ac:	222d      	movlt	r2, #45	; 0x2d
 80088ae:	222b      	movge	r2, #43	; 0x2b
 80088b0:	2909      	cmp	r1, #9
 80088b2:	7042      	strb	r2, [r0, #1]
 80088b4:	dd2a      	ble.n	800890c <__exponent+0x70>
 80088b6:	f10d 0407 	add.w	r4, sp, #7
 80088ba:	46a4      	mov	ip, r4
 80088bc:	270a      	movs	r7, #10
 80088be:	46a6      	mov	lr, r4
 80088c0:	460a      	mov	r2, r1
 80088c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80088c6:	fb07 1516 	mls	r5, r7, r6, r1
 80088ca:	3530      	adds	r5, #48	; 0x30
 80088cc:	2a63      	cmp	r2, #99	; 0x63
 80088ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80088d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80088d6:	4631      	mov	r1, r6
 80088d8:	dcf1      	bgt.n	80088be <__exponent+0x22>
 80088da:	3130      	adds	r1, #48	; 0x30
 80088dc:	f1ae 0502 	sub.w	r5, lr, #2
 80088e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80088e4:	1c44      	adds	r4, r0, #1
 80088e6:	4629      	mov	r1, r5
 80088e8:	4561      	cmp	r1, ip
 80088ea:	d30a      	bcc.n	8008902 <__exponent+0x66>
 80088ec:	f10d 0209 	add.w	r2, sp, #9
 80088f0:	eba2 020e 	sub.w	r2, r2, lr
 80088f4:	4565      	cmp	r5, ip
 80088f6:	bf88      	it	hi
 80088f8:	2200      	movhi	r2, #0
 80088fa:	4413      	add	r3, r2
 80088fc:	1a18      	subs	r0, r3, r0
 80088fe:	b003      	add	sp, #12
 8008900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008906:	f804 2f01 	strb.w	r2, [r4, #1]!
 800890a:	e7ed      	b.n	80088e8 <__exponent+0x4c>
 800890c:	2330      	movs	r3, #48	; 0x30
 800890e:	3130      	adds	r1, #48	; 0x30
 8008910:	7083      	strb	r3, [r0, #2]
 8008912:	70c1      	strb	r1, [r0, #3]
 8008914:	1d03      	adds	r3, r0, #4
 8008916:	e7f1      	b.n	80088fc <__exponent+0x60>

08008918 <_printf_float>:
 8008918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891c:	b08b      	sub	sp, #44	; 0x2c
 800891e:	460c      	mov	r4, r1
 8008920:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008924:	4616      	mov	r6, r2
 8008926:	461f      	mov	r7, r3
 8008928:	4605      	mov	r5, r0
 800892a:	f002 fd97 	bl	800b45c <_localeconv_r>
 800892e:	f8d0 b000 	ldr.w	fp, [r0]
 8008932:	4658      	mov	r0, fp
 8008934:	f7f7 fcd4 	bl	80002e0 <strlen>
 8008938:	2300      	movs	r3, #0
 800893a:	9308      	str	r3, [sp, #32]
 800893c:	f8d8 3000 	ldr.w	r3, [r8]
 8008940:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008944:	6822      	ldr	r2, [r4, #0]
 8008946:	3307      	adds	r3, #7
 8008948:	f023 0307 	bic.w	r3, r3, #7
 800894c:	f103 0108 	add.w	r1, r3, #8
 8008950:	f8c8 1000 	str.w	r1, [r8]
 8008954:	4682      	mov	sl, r0
 8008956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800895a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800895e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008bc0 <_printf_float+0x2a8>
 8008962:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008966:	eeb0 6bc0 	vabs.f64	d6, d0
 800896a:	eeb4 6b47 	vcmp.f64	d6, d7
 800896e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008972:	dd24      	ble.n	80089be <_printf_float+0xa6>
 8008974:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800897c:	d502      	bpl.n	8008984 <_printf_float+0x6c>
 800897e:	232d      	movs	r3, #45	; 0x2d
 8008980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008984:	4b90      	ldr	r3, [pc, #576]	; (8008bc8 <_printf_float+0x2b0>)
 8008986:	4891      	ldr	r0, [pc, #580]	; (8008bcc <_printf_float+0x2b4>)
 8008988:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800898c:	bf94      	ite	ls
 800898e:	4698      	movls	r8, r3
 8008990:	4680      	movhi	r8, r0
 8008992:	2303      	movs	r3, #3
 8008994:	6123      	str	r3, [r4, #16]
 8008996:	f022 0204 	bic.w	r2, r2, #4
 800899a:	2300      	movs	r3, #0
 800899c:	6022      	str	r2, [r4, #0]
 800899e:	9304      	str	r3, [sp, #16]
 80089a0:	9700      	str	r7, [sp, #0]
 80089a2:	4633      	mov	r3, r6
 80089a4:	aa09      	add	r2, sp, #36	; 0x24
 80089a6:	4621      	mov	r1, r4
 80089a8:	4628      	mov	r0, r5
 80089aa:	f000 f9d3 	bl	8008d54 <_printf_common>
 80089ae:	3001      	adds	r0, #1
 80089b0:	f040 808a 	bne.w	8008ac8 <_printf_float+0x1b0>
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295
 80089b8:	b00b      	add	sp, #44	; 0x2c
 80089ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089be:	eeb4 0b40 	vcmp.f64	d0, d0
 80089c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c6:	d709      	bvc.n	80089dc <_printf_float+0xc4>
 80089c8:	ee10 3a90 	vmov	r3, s1
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	bfbc      	itt	lt
 80089d0:	232d      	movlt	r3, #45	; 0x2d
 80089d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089d6:	487e      	ldr	r0, [pc, #504]	; (8008bd0 <_printf_float+0x2b8>)
 80089d8:	4b7e      	ldr	r3, [pc, #504]	; (8008bd4 <_printf_float+0x2bc>)
 80089da:	e7d5      	b.n	8008988 <_printf_float+0x70>
 80089dc:	6863      	ldr	r3, [r4, #4]
 80089de:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80089e2:	9104      	str	r1, [sp, #16]
 80089e4:	1c59      	adds	r1, r3, #1
 80089e6:	d13c      	bne.n	8008a62 <_printf_float+0x14a>
 80089e8:	2306      	movs	r3, #6
 80089ea:	6063      	str	r3, [r4, #4]
 80089ec:	2300      	movs	r3, #0
 80089ee:	9303      	str	r3, [sp, #12]
 80089f0:	ab08      	add	r3, sp, #32
 80089f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80089f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089fa:	ab07      	add	r3, sp, #28
 80089fc:	6861      	ldr	r1, [r4, #4]
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	6022      	str	r2, [r4, #0]
 8008a02:	f10d 031b 	add.w	r3, sp, #27
 8008a06:	4628      	mov	r0, r5
 8008a08:	f7ff fef6 	bl	80087f8 <__cvt>
 8008a0c:	9b04      	ldr	r3, [sp, #16]
 8008a0e:	9907      	ldr	r1, [sp, #28]
 8008a10:	2b47      	cmp	r3, #71	; 0x47
 8008a12:	4680      	mov	r8, r0
 8008a14:	d108      	bne.n	8008a28 <_printf_float+0x110>
 8008a16:	1cc8      	adds	r0, r1, #3
 8008a18:	db02      	blt.n	8008a20 <_printf_float+0x108>
 8008a1a:	6863      	ldr	r3, [r4, #4]
 8008a1c:	4299      	cmp	r1, r3
 8008a1e:	dd41      	ble.n	8008aa4 <_printf_float+0x18c>
 8008a20:	f1a9 0902 	sub.w	r9, r9, #2
 8008a24:	fa5f f989 	uxtb.w	r9, r9
 8008a28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008a2c:	d820      	bhi.n	8008a70 <_printf_float+0x158>
 8008a2e:	3901      	subs	r1, #1
 8008a30:	464a      	mov	r2, r9
 8008a32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a36:	9107      	str	r1, [sp, #28]
 8008a38:	f7ff ff30 	bl	800889c <__exponent>
 8008a3c:	9a08      	ldr	r2, [sp, #32]
 8008a3e:	9004      	str	r0, [sp, #16]
 8008a40:	1813      	adds	r3, r2, r0
 8008a42:	2a01      	cmp	r2, #1
 8008a44:	6123      	str	r3, [r4, #16]
 8008a46:	dc02      	bgt.n	8008a4e <_printf_float+0x136>
 8008a48:	6822      	ldr	r2, [r4, #0]
 8008a4a:	07d2      	lsls	r2, r2, #31
 8008a4c:	d501      	bpl.n	8008a52 <_printf_float+0x13a>
 8008a4e:	3301      	adds	r3, #1
 8008a50:	6123      	str	r3, [r4, #16]
 8008a52:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d0a2      	beq.n	80089a0 <_printf_float+0x88>
 8008a5a:	232d      	movs	r3, #45	; 0x2d
 8008a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a60:	e79e      	b.n	80089a0 <_printf_float+0x88>
 8008a62:	9904      	ldr	r1, [sp, #16]
 8008a64:	2947      	cmp	r1, #71	; 0x47
 8008a66:	d1c1      	bne.n	80089ec <_printf_float+0xd4>
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1bf      	bne.n	80089ec <_printf_float+0xd4>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e7bc      	b.n	80089ea <_printf_float+0xd2>
 8008a70:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008a74:	d118      	bne.n	8008aa8 <_printf_float+0x190>
 8008a76:	2900      	cmp	r1, #0
 8008a78:	6863      	ldr	r3, [r4, #4]
 8008a7a:	dd0b      	ble.n	8008a94 <_printf_float+0x17c>
 8008a7c:	6121      	str	r1, [r4, #16]
 8008a7e:	b913      	cbnz	r3, 8008a86 <_printf_float+0x16e>
 8008a80:	6822      	ldr	r2, [r4, #0]
 8008a82:	07d0      	lsls	r0, r2, #31
 8008a84:	d502      	bpl.n	8008a8c <_printf_float+0x174>
 8008a86:	3301      	adds	r3, #1
 8008a88:	440b      	add	r3, r1
 8008a8a:	6123      	str	r3, [r4, #16]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	e7de      	b.n	8008a52 <_printf_float+0x13a>
 8008a94:	b913      	cbnz	r3, 8008a9c <_printf_float+0x184>
 8008a96:	6822      	ldr	r2, [r4, #0]
 8008a98:	07d2      	lsls	r2, r2, #31
 8008a9a:	d501      	bpl.n	8008aa0 <_printf_float+0x188>
 8008a9c:	3302      	adds	r3, #2
 8008a9e:	e7f4      	b.n	8008a8a <_printf_float+0x172>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e7f2      	b.n	8008a8a <_printf_float+0x172>
 8008aa4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008aa8:	9b08      	ldr	r3, [sp, #32]
 8008aaa:	4299      	cmp	r1, r3
 8008aac:	db05      	blt.n	8008aba <_printf_float+0x1a2>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	6121      	str	r1, [r4, #16]
 8008ab2:	07d8      	lsls	r0, r3, #31
 8008ab4:	d5ea      	bpl.n	8008a8c <_printf_float+0x174>
 8008ab6:	1c4b      	adds	r3, r1, #1
 8008ab8:	e7e7      	b.n	8008a8a <_printf_float+0x172>
 8008aba:	2900      	cmp	r1, #0
 8008abc:	bfd4      	ite	le
 8008abe:	f1c1 0202 	rsble	r2, r1, #2
 8008ac2:	2201      	movgt	r2, #1
 8008ac4:	4413      	add	r3, r2
 8008ac6:	e7e0      	b.n	8008a8a <_printf_float+0x172>
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	055a      	lsls	r2, r3, #21
 8008acc:	d407      	bmi.n	8008ade <_printf_float+0x1c6>
 8008ace:	6923      	ldr	r3, [r4, #16]
 8008ad0:	4642      	mov	r2, r8
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d12a      	bne.n	8008b32 <_printf_float+0x21a>
 8008adc:	e76a      	b.n	80089b4 <_printf_float+0x9c>
 8008ade:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ae2:	f240 80e2 	bls.w	8008caa <_printf_float+0x392>
 8008ae6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008aea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af2:	d133      	bne.n	8008b5c <_printf_float+0x244>
 8008af4:	4a38      	ldr	r2, [pc, #224]	; (8008bd8 <_printf_float+0x2c0>)
 8008af6:	2301      	movs	r3, #1
 8008af8:	4631      	mov	r1, r6
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b8      	blx	r7
 8008afe:	3001      	adds	r0, #1
 8008b00:	f43f af58 	beq.w	80089b4 <_printf_float+0x9c>
 8008b04:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	db02      	blt.n	8008b12 <_printf_float+0x1fa>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	07d8      	lsls	r0, r3, #31
 8008b10:	d50f      	bpl.n	8008b32 <_printf_float+0x21a>
 8008b12:	4653      	mov	r3, sl
 8008b14:	465a      	mov	r2, fp
 8008b16:	4631      	mov	r1, r6
 8008b18:	4628      	mov	r0, r5
 8008b1a:	47b8      	blx	r7
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	f43f af49 	beq.w	80089b4 <_printf_float+0x9c>
 8008b22:	f04f 0800 	mov.w	r8, #0
 8008b26:	f104 091a 	add.w	r9, r4, #26
 8008b2a:	9b08      	ldr	r3, [sp, #32]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	4543      	cmp	r3, r8
 8008b30:	dc09      	bgt.n	8008b46 <_printf_float+0x22e>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	079b      	lsls	r3, r3, #30
 8008b36:	f100 8108 	bmi.w	8008d4a <_printf_float+0x432>
 8008b3a:	68e0      	ldr	r0, [r4, #12]
 8008b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3e:	4298      	cmp	r0, r3
 8008b40:	bfb8      	it	lt
 8008b42:	4618      	movlt	r0, r3
 8008b44:	e738      	b.n	80089b8 <_printf_float+0xa0>
 8008b46:	2301      	movs	r3, #1
 8008b48:	464a      	mov	r2, r9
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	47b8      	blx	r7
 8008b50:	3001      	adds	r0, #1
 8008b52:	f43f af2f 	beq.w	80089b4 <_printf_float+0x9c>
 8008b56:	f108 0801 	add.w	r8, r8, #1
 8008b5a:	e7e6      	b.n	8008b2a <_printf_float+0x212>
 8008b5c:	9b07      	ldr	r3, [sp, #28]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	dc3c      	bgt.n	8008bdc <_printf_float+0x2c4>
 8008b62:	4a1d      	ldr	r2, [pc, #116]	; (8008bd8 <_printf_float+0x2c0>)
 8008b64:	2301      	movs	r3, #1
 8008b66:	4631      	mov	r1, r6
 8008b68:	4628      	mov	r0, r5
 8008b6a:	47b8      	blx	r7
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	f43f af21 	beq.w	80089b4 <_printf_float+0x9c>
 8008b72:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	d102      	bne.n	8008b80 <_printf_float+0x268>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	07d9      	lsls	r1, r3, #31
 8008b7e:	d5d8      	bpl.n	8008b32 <_printf_float+0x21a>
 8008b80:	4653      	mov	r3, sl
 8008b82:	465a      	mov	r2, fp
 8008b84:	4631      	mov	r1, r6
 8008b86:	4628      	mov	r0, r5
 8008b88:	47b8      	blx	r7
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	f43f af12 	beq.w	80089b4 <_printf_float+0x9c>
 8008b90:	f04f 0900 	mov.w	r9, #0
 8008b94:	f104 0a1a 	add.w	sl, r4, #26
 8008b98:	9b07      	ldr	r3, [sp, #28]
 8008b9a:	425b      	negs	r3, r3
 8008b9c:	454b      	cmp	r3, r9
 8008b9e:	dc01      	bgt.n	8008ba4 <_printf_float+0x28c>
 8008ba0:	9b08      	ldr	r3, [sp, #32]
 8008ba2:	e795      	b.n	8008ad0 <_printf_float+0x1b8>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	4652      	mov	r2, sl
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4628      	mov	r0, r5
 8008bac:	47b8      	blx	r7
 8008bae:	3001      	adds	r0, #1
 8008bb0:	f43f af00 	beq.w	80089b4 <_printf_float+0x9c>
 8008bb4:	f109 0901 	add.w	r9, r9, #1
 8008bb8:	e7ee      	b.n	8008b98 <_printf_float+0x280>
 8008bba:	bf00      	nop
 8008bbc:	f3af 8000 	nop.w
 8008bc0:	ffffffff 	.word	0xffffffff
 8008bc4:	7fefffff 	.word	0x7fefffff
 8008bc8:	0800cf68 	.word	0x0800cf68
 8008bcc:	0800cf6c 	.word	0x0800cf6c
 8008bd0:	0800cf74 	.word	0x0800cf74
 8008bd4:	0800cf70 	.word	0x0800cf70
 8008bd8:	0800cf78 	.word	0x0800cf78
 8008bdc:	9a08      	ldr	r2, [sp, #32]
 8008bde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008be0:	429a      	cmp	r2, r3
 8008be2:	bfa8      	it	ge
 8008be4:	461a      	movge	r2, r3
 8008be6:	2a00      	cmp	r2, #0
 8008be8:	4691      	mov	r9, r2
 8008bea:	dc38      	bgt.n	8008c5e <_printf_float+0x346>
 8008bec:	2300      	movs	r3, #0
 8008bee:	9305      	str	r3, [sp, #20]
 8008bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bf4:	f104 021a 	add.w	r2, r4, #26
 8008bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bfa:	9905      	ldr	r1, [sp, #20]
 8008bfc:	9304      	str	r3, [sp, #16]
 8008bfe:	eba3 0309 	sub.w	r3, r3, r9
 8008c02:	428b      	cmp	r3, r1
 8008c04:	dc33      	bgt.n	8008c6e <_printf_float+0x356>
 8008c06:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	db3c      	blt.n	8008c88 <_printf_float+0x370>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	07da      	lsls	r2, r3, #31
 8008c12:	d439      	bmi.n	8008c88 <_printf_float+0x370>
 8008c14:	9b08      	ldr	r3, [sp, #32]
 8008c16:	9a04      	ldr	r2, [sp, #16]
 8008c18:	9907      	ldr	r1, [sp, #28]
 8008c1a:	1a9a      	subs	r2, r3, r2
 8008c1c:	eba3 0901 	sub.w	r9, r3, r1
 8008c20:	4591      	cmp	r9, r2
 8008c22:	bfa8      	it	ge
 8008c24:	4691      	movge	r9, r2
 8008c26:	f1b9 0f00 	cmp.w	r9, #0
 8008c2a:	dc35      	bgt.n	8008c98 <_printf_float+0x380>
 8008c2c:	f04f 0800 	mov.w	r8, #0
 8008c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c34:	f104 0a1a 	add.w	sl, r4, #26
 8008c38:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008c3c:	1a9b      	subs	r3, r3, r2
 8008c3e:	eba3 0309 	sub.w	r3, r3, r9
 8008c42:	4543      	cmp	r3, r8
 8008c44:	f77f af75 	ble.w	8008b32 <_printf_float+0x21a>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	4652      	mov	r2, sl
 8008c4c:	4631      	mov	r1, r6
 8008c4e:	4628      	mov	r0, r5
 8008c50:	47b8      	blx	r7
 8008c52:	3001      	adds	r0, #1
 8008c54:	f43f aeae 	beq.w	80089b4 <_printf_float+0x9c>
 8008c58:	f108 0801 	add.w	r8, r8, #1
 8008c5c:	e7ec      	b.n	8008c38 <_printf_float+0x320>
 8008c5e:	4613      	mov	r3, r2
 8008c60:	4631      	mov	r1, r6
 8008c62:	4642      	mov	r2, r8
 8008c64:	4628      	mov	r0, r5
 8008c66:	47b8      	blx	r7
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d1bf      	bne.n	8008bec <_printf_float+0x2d4>
 8008c6c:	e6a2      	b.n	80089b4 <_printf_float+0x9c>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4631      	mov	r1, r6
 8008c72:	4628      	mov	r0, r5
 8008c74:	9204      	str	r2, [sp, #16]
 8008c76:	47b8      	blx	r7
 8008c78:	3001      	adds	r0, #1
 8008c7a:	f43f ae9b 	beq.w	80089b4 <_printf_float+0x9c>
 8008c7e:	9b05      	ldr	r3, [sp, #20]
 8008c80:	9a04      	ldr	r2, [sp, #16]
 8008c82:	3301      	adds	r3, #1
 8008c84:	9305      	str	r3, [sp, #20]
 8008c86:	e7b7      	b.n	8008bf8 <_printf_float+0x2e0>
 8008c88:	4653      	mov	r3, sl
 8008c8a:	465a      	mov	r2, fp
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4628      	mov	r0, r5
 8008c90:	47b8      	blx	r7
 8008c92:	3001      	adds	r0, #1
 8008c94:	d1be      	bne.n	8008c14 <_printf_float+0x2fc>
 8008c96:	e68d      	b.n	80089b4 <_printf_float+0x9c>
 8008c98:	9a04      	ldr	r2, [sp, #16]
 8008c9a:	464b      	mov	r3, r9
 8008c9c:	4442      	add	r2, r8
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	47b8      	blx	r7
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d1c1      	bne.n	8008c2c <_printf_float+0x314>
 8008ca8:	e684      	b.n	80089b4 <_printf_float+0x9c>
 8008caa:	9a08      	ldr	r2, [sp, #32]
 8008cac:	2a01      	cmp	r2, #1
 8008cae:	dc01      	bgt.n	8008cb4 <_printf_float+0x39c>
 8008cb0:	07db      	lsls	r3, r3, #31
 8008cb2:	d537      	bpl.n	8008d24 <_printf_float+0x40c>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	4642      	mov	r2, r8
 8008cb8:	4631      	mov	r1, r6
 8008cba:	4628      	mov	r0, r5
 8008cbc:	47b8      	blx	r7
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	f43f ae78 	beq.w	80089b4 <_printf_float+0x9c>
 8008cc4:	4653      	mov	r3, sl
 8008cc6:	465a      	mov	r2, fp
 8008cc8:	4631      	mov	r1, r6
 8008cca:	4628      	mov	r0, r5
 8008ccc:	47b8      	blx	r7
 8008cce:	3001      	adds	r0, #1
 8008cd0:	f43f ae70 	beq.w	80089b4 <_printf_float+0x9c>
 8008cd4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008cd8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce0:	d01b      	beq.n	8008d1a <_printf_float+0x402>
 8008ce2:	9b08      	ldr	r3, [sp, #32]
 8008ce4:	f108 0201 	add.w	r2, r8, #1
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	4631      	mov	r1, r6
 8008cec:	4628      	mov	r0, r5
 8008cee:	47b8      	blx	r7
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d10e      	bne.n	8008d12 <_printf_float+0x3fa>
 8008cf4:	e65e      	b.n	80089b4 <_printf_float+0x9c>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	464a      	mov	r2, r9
 8008cfa:	4631      	mov	r1, r6
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	47b8      	blx	r7
 8008d00:	3001      	adds	r0, #1
 8008d02:	f43f ae57 	beq.w	80089b4 <_printf_float+0x9c>
 8008d06:	f108 0801 	add.w	r8, r8, #1
 8008d0a:	9b08      	ldr	r3, [sp, #32]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	4543      	cmp	r3, r8
 8008d10:	dcf1      	bgt.n	8008cf6 <_printf_float+0x3de>
 8008d12:	9b04      	ldr	r3, [sp, #16]
 8008d14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d18:	e6db      	b.n	8008ad2 <_printf_float+0x1ba>
 8008d1a:	f04f 0800 	mov.w	r8, #0
 8008d1e:	f104 091a 	add.w	r9, r4, #26
 8008d22:	e7f2      	b.n	8008d0a <_printf_float+0x3f2>
 8008d24:	2301      	movs	r3, #1
 8008d26:	4642      	mov	r2, r8
 8008d28:	e7df      	b.n	8008cea <_printf_float+0x3d2>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	464a      	mov	r2, r9
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4628      	mov	r0, r5
 8008d32:	47b8      	blx	r7
 8008d34:	3001      	adds	r0, #1
 8008d36:	f43f ae3d 	beq.w	80089b4 <_printf_float+0x9c>
 8008d3a:	f108 0801 	add.w	r8, r8, #1
 8008d3e:	68e3      	ldr	r3, [r4, #12]
 8008d40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d42:	1a5b      	subs	r3, r3, r1
 8008d44:	4543      	cmp	r3, r8
 8008d46:	dcf0      	bgt.n	8008d2a <_printf_float+0x412>
 8008d48:	e6f7      	b.n	8008b3a <_printf_float+0x222>
 8008d4a:	f04f 0800 	mov.w	r8, #0
 8008d4e:	f104 0919 	add.w	r9, r4, #25
 8008d52:	e7f4      	b.n	8008d3e <_printf_float+0x426>

08008d54 <_printf_common>:
 8008d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d58:	4616      	mov	r6, r2
 8008d5a:	4699      	mov	r9, r3
 8008d5c:	688a      	ldr	r2, [r1, #8]
 8008d5e:	690b      	ldr	r3, [r1, #16]
 8008d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d64:	4293      	cmp	r3, r2
 8008d66:	bfb8      	it	lt
 8008d68:	4613      	movlt	r3, r2
 8008d6a:	6033      	str	r3, [r6, #0]
 8008d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d70:	4607      	mov	r7, r0
 8008d72:	460c      	mov	r4, r1
 8008d74:	b10a      	cbz	r2, 8008d7a <_printf_common+0x26>
 8008d76:	3301      	adds	r3, #1
 8008d78:	6033      	str	r3, [r6, #0]
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	0699      	lsls	r1, r3, #26
 8008d7e:	bf42      	ittt	mi
 8008d80:	6833      	ldrmi	r3, [r6, #0]
 8008d82:	3302      	addmi	r3, #2
 8008d84:	6033      	strmi	r3, [r6, #0]
 8008d86:	6825      	ldr	r5, [r4, #0]
 8008d88:	f015 0506 	ands.w	r5, r5, #6
 8008d8c:	d106      	bne.n	8008d9c <_printf_common+0x48>
 8008d8e:	f104 0a19 	add.w	sl, r4, #25
 8008d92:	68e3      	ldr	r3, [r4, #12]
 8008d94:	6832      	ldr	r2, [r6, #0]
 8008d96:	1a9b      	subs	r3, r3, r2
 8008d98:	42ab      	cmp	r3, r5
 8008d9a:	dc26      	bgt.n	8008dea <_printf_common+0x96>
 8008d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008da0:	1e13      	subs	r3, r2, #0
 8008da2:	6822      	ldr	r2, [r4, #0]
 8008da4:	bf18      	it	ne
 8008da6:	2301      	movne	r3, #1
 8008da8:	0692      	lsls	r2, r2, #26
 8008daa:	d42b      	bmi.n	8008e04 <_printf_common+0xb0>
 8008dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008db0:	4649      	mov	r1, r9
 8008db2:	4638      	mov	r0, r7
 8008db4:	47c0      	blx	r8
 8008db6:	3001      	adds	r0, #1
 8008db8:	d01e      	beq.n	8008df8 <_printf_common+0xa4>
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	68e5      	ldr	r5, [r4, #12]
 8008dbe:	6832      	ldr	r2, [r6, #0]
 8008dc0:	f003 0306 	and.w	r3, r3, #6
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	bf08      	it	eq
 8008dc8:	1aad      	subeq	r5, r5, r2
 8008dca:	68a3      	ldr	r3, [r4, #8]
 8008dcc:	6922      	ldr	r2, [r4, #16]
 8008dce:	bf0c      	ite	eq
 8008dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dd4:	2500      	movne	r5, #0
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	bfc4      	itt	gt
 8008dda:	1a9b      	subgt	r3, r3, r2
 8008ddc:	18ed      	addgt	r5, r5, r3
 8008dde:	2600      	movs	r6, #0
 8008de0:	341a      	adds	r4, #26
 8008de2:	42b5      	cmp	r5, r6
 8008de4:	d11a      	bne.n	8008e1c <_printf_common+0xc8>
 8008de6:	2000      	movs	r0, #0
 8008de8:	e008      	b.n	8008dfc <_printf_common+0xa8>
 8008dea:	2301      	movs	r3, #1
 8008dec:	4652      	mov	r2, sl
 8008dee:	4649      	mov	r1, r9
 8008df0:	4638      	mov	r0, r7
 8008df2:	47c0      	blx	r8
 8008df4:	3001      	adds	r0, #1
 8008df6:	d103      	bne.n	8008e00 <_printf_common+0xac>
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e00:	3501      	adds	r5, #1
 8008e02:	e7c6      	b.n	8008d92 <_printf_common+0x3e>
 8008e04:	18e1      	adds	r1, r4, r3
 8008e06:	1c5a      	adds	r2, r3, #1
 8008e08:	2030      	movs	r0, #48	; 0x30
 8008e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e0e:	4422      	add	r2, r4
 8008e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e18:	3302      	adds	r3, #2
 8008e1a:	e7c7      	b.n	8008dac <_printf_common+0x58>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	4622      	mov	r2, r4
 8008e20:	4649      	mov	r1, r9
 8008e22:	4638      	mov	r0, r7
 8008e24:	47c0      	blx	r8
 8008e26:	3001      	adds	r0, #1
 8008e28:	d0e6      	beq.n	8008df8 <_printf_common+0xa4>
 8008e2a:	3601      	adds	r6, #1
 8008e2c:	e7d9      	b.n	8008de2 <_printf_common+0x8e>
	...

08008e30 <_printf_i>:
 8008e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e34:	7e0f      	ldrb	r7, [r1, #24]
 8008e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e38:	2f78      	cmp	r7, #120	; 0x78
 8008e3a:	4691      	mov	r9, r2
 8008e3c:	4680      	mov	r8, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	469a      	mov	sl, r3
 8008e42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e46:	d807      	bhi.n	8008e58 <_printf_i+0x28>
 8008e48:	2f62      	cmp	r7, #98	; 0x62
 8008e4a:	d80a      	bhi.n	8008e62 <_printf_i+0x32>
 8008e4c:	2f00      	cmp	r7, #0
 8008e4e:	f000 80d8 	beq.w	8009002 <_printf_i+0x1d2>
 8008e52:	2f58      	cmp	r7, #88	; 0x58
 8008e54:	f000 80a3 	beq.w	8008f9e <_printf_i+0x16e>
 8008e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e60:	e03a      	b.n	8008ed8 <_printf_i+0xa8>
 8008e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e66:	2b15      	cmp	r3, #21
 8008e68:	d8f6      	bhi.n	8008e58 <_printf_i+0x28>
 8008e6a:	a101      	add	r1, pc, #4	; (adr r1, 8008e70 <_printf_i+0x40>)
 8008e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e70:	08008ec9 	.word	0x08008ec9
 8008e74:	08008edd 	.word	0x08008edd
 8008e78:	08008e59 	.word	0x08008e59
 8008e7c:	08008e59 	.word	0x08008e59
 8008e80:	08008e59 	.word	0x08008e59
 8008e84:	08008e59 	.word	0x08008e59
 8008e88:	08008edd 	.word	0x08008edd
 8008e8c:	08008e59 	.word	0x08008e59
 8008e90:	08008e59 	.word	0x08008e59
 8008e94:	08008e59 	.word	0x08008e59
 8008e98:	08008e59 	.word	0x08008e59
 8008e9c:	08008fe9 	.word	0x08008fe9
 8008ea0:	08008f0d 	.word	0x08008f0d
 8008ea4:	08008fcb 	.word	0x08008fcb
 8008ea8:	08008e59 	.word	0x08008e59
 8008eac:	08008e59 	.word	0x08008e59
 8008eb0:	0800900b 	.word	0x0800900b
 8008eb4:	08008e59 	.word	0x08008e59
 8008eb8:	08008f0d 	.word	0x08008f0d
 8008ebc:	08008e59 	.word	0x08008e59
 8008ec0:	08008e59 	.word	0x08008e59
 8008ec4:	08008fd3 	.word	0x08008fd3
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	1d1a      	adds	r2, r3, #4
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	602a      	str	r2, [r5, #0]
 8008ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e0a3      	b.n	8009024 <_printf_i+0x1f4>
 8008edc:	6820      	ldr	r0, [r4, #0]
 8008ede:	6829      	ldr	r1, [r5, #0]
 8008ee0:	0606      	lsls	r6, r0, #24
 8008ee2:	f101 0304 	add.w	r3, r1, #4
 8008ee6:	d50a      	bpl.n	8008efe <_printf_i+0xce>
 8008ee8:	680e      	ldr	r6, [r1, #0]
 8008eea:	602b      	str	r3, [r5, #0]
 8008eec:	2e00      	cmp	r6, #0
 8008eee:	da03      	bge.n	8008ef8 <_printf_i+0xc8>
 8008ef0:	232d      	movs	r3, #45	; 0x2d
 8008ef2:	4276      	negs	r6, r6
 8008ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef8:	485e      	ldr	r0, [pc, #376]	; (8009074 <_printf_i+0x244>)
 8008efa:	230a      	movs	r3, #10
 8008efc:	e019      	b.n	8008f32 <_printf_i+0x102>
 8008efe:	680e      	ldr	r6, [r1, #0]
 8008f00:	602b      	str	r3, [r5, #0]
 8008f02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f06:	bf18      	it	ne
 8008f08:	b236      	sxthne	r6, r6
 8008f0a:	e7ef      	b.n	8008eec <_printf_i+0xbc>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	6820      	ldr	r0, [r4, #0]
 8008f10:	1d19      	adds	r1, r3, #4
 8008f12:	6029      	str	r1, [r5, #0]
 8008f14:	0601      	lsls	r1, r0, #24
 8008f16:	d501      	bpl.n	8008f1c <_printf_i+0xec>
 8008f18:	681e      	ldr	r6, [r3, #0]
 8008f1a:	e002      	b.n	8008f22 <_printf_i+0xf2>
 8008f1c:	0646      	lsls	r6, r0, #25
 8008f1e:	d5fb      	bpl.n	8008f18 <_printf_i+0xe8>
 8008f20:	881e      	ldrh	r6, [r3, #0]
 8008f22:	4854      	ldr	r0, [pc, #336]	; (8009074 <_printf_i+0x244>)
 8008f24:	2f6f      	cmp	r7, #111	; 0x6f
 8008f26:	bf0c      	ite	eq
 8008f28:	2308      	moveq	r3, #8
 8008f2a:	230a      	movne	r3, #10
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f32:	6865      	ldr	r5, [r4, #4]
 8008f34:	60a5      	str	r5, [r4, #8]
 8008f36:	2d00      	cmp	r5, #0
 8008f38:	bfa2      	ittt	ge
 8008f3a:	6821      	ldrge	r1, [r4, #0]
 8008f3c:	f021 0104 	bicge.w	r1, r1, #4
 8008f40:	6021      	strge	r1, [r4, #0]
 8008f42:	b90e      	cbnz	r6, 8008f48 <_printf_i+0x118>
 8008f44:	2d00      	cmp	r5, #0
 8008f46:	d04d      	beq.n	8008fe4 <_printf_i+0x1b4>
 8008f48:	4615      	mov	r5, r2
 8008f4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f4e:	fb03 6711 	mls	r7, r3, r1, r6
 8008f52:	5dc7      	ldrb	r7, [r0, r7]
 8008f54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f58:	4637      	mov	r7, r6
 8008f5a:	42bb      	cmp	r3, r7
 8008f5c:	460e      	mov	r6, r1
 8008f5e:	d9f4      	bls.n	8008f4a <_printf_i+0x11a>
 8008f60:	2b08      	cmp	r3, #8
 8008f62:	d10b      	bne.n	8008f7c <_printf_i+0x14c>
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	07de      	lsls	r6, r3, #31
 8008f68:	d508      	bpl.n	8008f7c <_printf_i+0x14c>
 8008f6a:	6923      	ldr	r3, [r4, #16]
 8008f6c:	6861      	ldr	r1, [r4, #4]
 8008f6e:	4299      	cmp	r1, r3
 8008f70:	bfde      	ittt	le
 8008f72:	2330      	movle	r3, #48	; 0x30
 8008f74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f7c:	1b52      	subs	r2, r2, r5
 8008f7e:	6122      	str	r2, [r4, #16]
 8008f80:	f8cd a000 	str.w	sl, [sp]
 8008f84:	464b      	mov	r3, r9
 8008f86:	aa03      	add	r2, sp, #12
 8008f88:	4621      	mov	r1, r4
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	f7ff fee2 	bl	8008d54 <_printf_common>
 8008f90:	3001      	adds	r0, #1
 8008f92:	d14c      	bne.n	800902e <_printf_i+0x1fe>
 8008f94:	f04f 30ff 	mov.w	r0, #4294967295
 8008f98:	b004      	add	sp, #16
 8008f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f9e:	4835      	ldr	r0, [pc, #212]	; (8009074 <_printf_i+0x244>)
 8008fa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008fa4:	6829      	ldr	r1, [r5, #0]
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fac:	6029      	str	r1, [r5, #0]
 8008fae:	061d      	lsls	r5, r3, #24
 8008fb0:	d514      	bpl.n	8008fdc <_printf_i+0x1ac>
 8008fb2:	07df      	lsls	r7, r3, #31
 8008fb4:	bf44      	itt	mi
 8008fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8008fba:	6023      	strmi	r3, [r4, #0]
 8008fbc:	b91e      	cbnz	r6, 8008fc6 <_printf_i+0x196>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	f023 0320 	bic.w	r3, r3, #32
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	2310      	movs	r3, #16
 8008fc8:	e7b0      	b.n	8008f2c <_printf_i+0xfc>
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	f043 0320 	orr.w	r3, r3, #32
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	2378      	movs	r3, #120	; 0x78
 8008fd4:	4828      	ldr	r0, [pc, #160]	; (8009078 <_printf_i+0x248>)
 8008fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fda:	e7e3      	b.n	8008fa4 <_printf_i+0x174>
 8008fdc:	0659      	lsls	r1, r3, #25
 8008fde:	bf48      	it	mi
 8008fe0:	b2b6      	uxthmi	r6, r6
 8008fe2:	e7e6      	b.n	8008fb2 <_printf_i+0x182>
 8008fe4:	4615      	mov	r5, r2
 8008fe6:	e7bb      	b.n	8008f60 <_printf_i+0x130>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	6826      	ldr	r6, [r4, #0]
 8008fec:	6961      	ldr	r1, [r4, #20]
 8008fee:	1d18      	adds	r0, r3, #4
 8008ff0:	6028      	str	r0, [r5, #0]
 8008ff2:	0635      	lsls	r5, r6, #24
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	d501      	bpl.n	8008ffc <_printf_i+0x1cc>
 8008ff8:	6019      	str	r1, [r3, #0]
 8008ffa:	e002      	b.n	8009002 <_printf_i+0x1d2>
 8008ffc:	0670      	lsls	r0, r6, #25
 8008ffe:	d5fb      	bpl.n	8008ff8 <_printf_i+0x1c8>
 8009000:	8019      	strh	r1, [r3, #0]
 8009002:	2300      	movs	r3, #0
 8009004:	6123      	str	r3, [r4, #16]
 8009006:	4615      	mov	r5, r2
 8009008:	e7ba      	b.n	8008f80 <_printf_i+0x150>
 800900a:	682b      	ldr	r3, [r5, #0]
 800900c:	1d1a      	adds	r2, r3, #4
 800900e:	602a      	str	r2, [r5, #0]
 8009010:	681d      	ldr	r5, [r3, #0]
 8009012:	6862      	ldr	r2, [r4, #4]
 8009014:	2100      	movs	r1, #0
 8009016:	4628      	mov	r0, r5
 8009018:	f7f7 f96a 	bl	80002f0 <memchr>
 800901c:	b108      	cbz	r0, 8009022 <_printf_i+0x1f2>
 800901e:	1b40      	subs	r0, r0, r5
 8009020:	6060      	str	r0, [r4, #4]
 8009022:	6863      	ldr	r3, [r4, #4]
 8009024:	6123      	str	r3, [r4, #16]
 8009026:	2300      	movs	r3, #0
 8009028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800902c:	e7a8      	b.n	8008f80 <_printf_i+0x150>
 800902e:	6923      	ldr	r3, [r4, #16]
 8009030:	462a      	mov	r2, r5
 8009032:	4649      	mov	r1, r9
 8009034:	4640      	mov	r0, r8
 8009036:	47d0      	blx	sl
 8009038:	3001      	adds	r0, #1
 800903a:	d0ab      	beq.n	8008f94 <_printf_i+0x164>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	079b      	lsls	r3, r3, #30
 8009040:	d413      	bmi.n	800906a <_printf_i+0x23a>
 8009042:	68e0      	ldr	r0, [r4, #12]
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	4298      	cmp	r0, r3
 8009048:	bfb8      	it	lt
 800904a:	4618      	movlt	r0, r3
 800904c:	e7a4      	b.n	8008f98 <_printf_i+0x168>
 800904e:	2301      	movs	r3, #1
 8009050:	4632      	mov	r2, r6
 8009052:	4649      	mov	r1, r9
 8009054:	4640      	mov	r0, r8
 8009056:	47d0      	blx	sl
 8009058:	3001      	adds	r0, #1
 800905a:	d09b      	beq.n	8008f94 <_printf_i+0x164>
 800905c:	3501      	adds	r5, #1
 800905e:	68e3      	ldr	r3, [r4, #12]
 8009060:	9903      	ldr	r1, [sp, #12]
 8009062:	1a5b      	subs	r3, r3, r1
 8009064:	42ab      	cmp	r3, r5
 8009066:	dcf2      	bgt.n	800904e <_printf_i+0x21e>
 8009068:	e7eb      	b.n	8009042 <_printf_i+0x212>
 800906a:	2500      	movs	r5, #0
 800906c:	f104 0619 	add.w	r6, r4, #25
 8009070:	e7f5      	b.n	800905e <_printf_i+0x22e>
 8009072:	bf00      	nop
 8009074:	0800cf7a 	.word	0x0800cf7a
 8009078:	0800cf8b 	.word	0x0800cf8b

0800907c <_scanf_float>:
 800907c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009080:	b087      	sub	sp, #28
 8009082:	4617      	mov	r7, r2
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	688b      	ldr	r3, [r1, #8]
 8009088:	1e5a      	subs	r2, r3, #1
 800908a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800908e:	bf83      	ittte	hi
 8009090:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009094:	195b      	addhi	r3, r3, r5
 8009096:	9302      	strhi	r3, [sp, #8]
 8009098:	2300      	movls	r3, #0
 800909a:	bf86      	itte	hi
 800909c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80090a0:	608b      	strhi	r3, [r1, #8]
 80090a2:	9302      	strls	r3, [sp, #8]
 80090a4:	680b      	ldr	r3, [r1, #0]
 80090a6:	468b      	mov	fp, r1
 80090a8:	2500      	movs	r5, #0
 80090aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80090ae:	f84b 3b1c 	str.w	r3, [fp], #28
 80090b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80090b6:	4680      	mov	r8, r0
 80090b8:	460c      	mov	r4, r1
 80090ba:	465e      	mov	r6, fp
 80090bc:	46aa      	mov	sl, r5
 80090be:	46a9      	mov	r9, r5
 80090c0:	9501      	str	r5, [sp, #4]
 80090c2:	68a2      	ldr	r2, [r4, #8]
 80090c4:	b152      	cbz	r2, 80090dc <_scanf_float+0x60>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	2b4e      	cmp	r3, #78	; 0x4e
 80090cc:	d864      	bhi.n	8009198 <_scanf_float+0x11c>
 80090ce:	2b40      	cmp	r3, #64	; 0x40
 80090d0:	d83c      	bhi.n	800914c <_scanf_float+0xd0>
 80090d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80090d6:	b2c8      	uxtb	r0, r1
 80090d8:	280e      	cmp	r0, #14
 80090da:	d93a      	bls.n	8009152 <_scanf_float+0xd6>
 80090dc:	f1b9 0f00 	cmp.w	r9, #0
 80090e0:	d003      	beq.n	80090ea <_scanf_float+0x6e>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090ee:	f1ba 0f01 	cmp.w	sl, #1
 80090f2:	f200 8113 	bhi.w	800931c <_scanf_float+0x2a0>
 80090f6:	455e      	cmp	r6, fp
 80090f8:	f200 8105 	bhi.w	8009306 <_scanf_float+0x28a>
 80090fc:	2501      	movs	r5, #1
 80090fe:	4628      	mov	r0, r5
 8009100:	b007      	add	sp, #28
 8009102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009106:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800910a:	2a0d      	cmp	r2, #13
 800910c:	d8e6      	bhi.n	80090dc <_scanf_float+0x60>
 800910e:	a101      	add	r1, pc, #4	; (adr r1, 8009114 <_scanf_float+0x98>)
 8009110:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009114:	08009253 	.word	0x08009253
 8009118:	080090dd 	.word	0x080090dd
 800911c:	080090dd 	.word	0x080090dd
 8009120:	080090dd 	.word	0x080090dd
 8009124:	080092b3 	.word	0x080092b3
 8009128:	0800928b 	.word	0x0800928b
 800912c:	080090dd 	.word	0x080090dd
 8009130:	080090dd 	.word	0x080090dd
 8009134:	08009261 	.word	0x08009261
 8009138:	080090dd 	.word	0x080090dd
 800913c:	080090dd 	.word	0x080090dd
 8009140:	080090dd 	.word	0x080090dd
 8009144:	080090dd 	.word	0x080090dd
 8009148:	08009219 	.word	0x08009219
 800914c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009150:	e7db      	b.n	800910a <_scanf_float+0x8e>
 8009152:	290e      	cmp	r1, #14
 8009154:	d8c2      	bhi.n	80090dc <_scanf_float+0x60>
 8009156:	a001      	add	r0, pc, #4	; (adr r0, 800915c <_scanf_float+0xe0>)
 8009158:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800915c:	0800920b 	.word	0x0800920b
 8009160:	080090dd 	.word	0x080090dd
 8009164:	0800920b 	.word	0x0800920b
 8009168:	0800929f 	.word	0x0800929f
 800916c:	080090dd 	.word	0x080090dd
 8009170:	080091b9 	.word	0x080091b9
 8009174:	080091f5 	.word	0x080091f5
 8009178:	080091f5 	.word	0x080091f5
 800917c:	080091f5 	.word	0x080091f5
 8009180:	080091f5 	.word	0x080091f5
 8009184:	080091f5 	.word	0x080091f5
 8009188:	080091f5 	.word	0x080091f5
 800918c:	080091f5 	.word	0x080091f5
 8009190:	080091f5 	.word	0x080091f5
 8009194:	080091f5 	.word	0x080091f5
 8009198:	2b6e      	cmp	r3, #110	; 0x6e
 800919a:	d809      	bhi.n	80091b0 <_scanf_float+0x134>
 800919c:	2b60      	cmp	r3, #96	; 0x60
 800919e:	d8b2      	bhi.n	8009106 <_scanf_float+0x8a>
 80091a0:	2b54      	cmp	r3, #84	; 0x54
 80091a2:	d077      	beq.n	8009294 <_scanf_float+0x218>
 80091a4:	2b59      	cmp	r3, #89	; 0x59
 80091a6:	d199      	bne.n	80090dc <_scanf_float+0x60>
 80091a8:	2d07      	cmp	r5, #7
 80091aa:	d197      	bne.n	80090dc <_scanf_float+0x60>
 80091ac:	2508      	movs	r5, #8
 80091ae:	e029      	b.n	8009204 <_scanf_float+0x188>
 80091b0:	2b74      	cmp	r3, #116	; 0x74
 80091b2:	d06f      	beq.n	8009294 <_scanf_float+0x218>
 80091b4:	2b79      	cmp	r3, #121	; 0x79
 80091b6:	e7f6      	b.n	80091a6 <_scanf_float+0x12a>
 80091b8:	6821      	ldr	r1, [r4, #0]
 80091ba:	05c8      	lsls	r0, r1, #23
 80091bc:	d51a      	bpl.n	80091f4 <_scanf_float+0x178>
 80091be:	9b02      	ldr	r3, [sp, #8]
 80091c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80091c4:	6021      	str	r1, [r4, #0]
 80091c6:	f109 0901 	add.w	r9, r9, #1
 80091ca:	b11b      	cbz	r3, 80091d4 <_scanf_float+0x158>
 80091cc:	3b01      	subs	r3, #1
 80091ce:	3201      	adds	r2, #1
 80091d0:	9302      	str	r3, [sp, #8]
 80091d2:	60a2      	str	r2, [r4, #8]
 80091d4:	68a3      	ldr	r3, [r4, #8]
 80091d6:	3b01      	subs	r3, #1
 80091d8:	60a3      	str	r3, [r4, #8]
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	3301      	adds	r3, #1
 80091de:	6123      	str	r3, [r4, #16]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	607b      	str	r3, [r7, #4]
 80091e8:	f340 8084 	ble.w	80092f4 <_scanf_float+0x278>
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	3301      	adds	r3, #1
 80091f0:	603b      	str	r3, [r7, #0]
 80091f2:	e766      	b.n	80090c2 <_scanf_float+0x46>
 80091f4:	eb1a 0f05 	cmn.w	sl, r5
 80091f8:	f47f af70 	bne.w	80090dc <_scanf_float+0x60>
 80091fc:	6822      	ldr	r2, [r4, #0]
 80091fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009202:	6022      	str	r2, [r4, #0]
 8009204:	f806 3b01 	strb.w	r3, [r6], #1
 8009208:	e7e4      	b.n	80091d4 <_scanf_float+0x158>
 800920a:	6822      	ldr	r2, [r4, #0]
 800920c:	0610      	lsls	r0, r2, #24
 800920e:	f57f af65 	bpl.w	80090dc <_scanf_float+0x60>
 8009212:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009216:	e7f4      	b.n	8009202 <_scanf_float+0x186>
 8009218:	f1ba 0f00 	cmp.w	sl, #0
 800921c:	d10e      	bne.n	800923c <_scanf_float+0x1c0>
 800921e:	f1b9 0f00 	cmp.w	r9, #0
 8009222:	d10e      	bne.n	8009242 <_scanf_float+0x1c6>
 8009224:	6822      	ldr	r2, [r4, #0]
 8009226:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800922a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800922e:	d108      	bne.n	8009242 <_scanf_float+0x1c6>
 8009230:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009234:	6022      	str	r2, [r4, #0]
 8009236:	f04f 0a01 	mov.w	sl, #1
 800923a:	e7e3      	b.n	8009204 <_scanf_float+0x188>
 800923c:	f1ba 0f02 	cmp.w	sl, #2
 8009240:	d055      	beq.n	80092ee <_scanf_float+0x272>
 8009242:	2d01      	cmp	r5, #1
 8009244:	d002      	beq.n	800924c <_scanf_float+0x1d0>
 8009246:	2d04      	cmp	r5, #4
 8009248:	f47f af48 	bne.w	80090dc <_scanf_float+0x60>
 800924c:	3501      	adds	r5, #1
 800924e:	b2ed      	uxtb	r5, r5
 8009250:	e7d8      	b.n	8009204 <_scanf_float+0x188>
 8009252:	f1ba 0f01 	cmp.w	sl, #1
 8009256:	f47f af41 	bne.w	80090dc <_scanf_float+0x60>
 800925a:	f04f 0a02 	mov.w	sl, #2
 800925e:	e7d1      	b.n	8009204 <_scanf_float+0x188>
 8009260:	b97d      	cbnz	r5, 8009282 <_scanf_float+0x206>
 8009262:	f1b9 0f00 	cmp.w	r9, #0
 8009266:	f47f af3c 	bne.w	80090e2 <_scanf_float+0x66>
 800926a:	6822      	ldr	r2, [r4, #0]
 800926c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009270:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009274:	f47f af39 	bne.w	80090ea <_scanf_float+0x6e>
 8009278:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800927c:	6022      	str	r2, [r4, #0]
 800927e:	2501      	movs	r5, #1
 8009280:	e7c0      	b.n	8009204 <_scanf_float+0x188>
 8009282:	2d03      	cmp	r5, #3
 8009284:	d0e2      	beq.n	800924c <_scanf_float+0x1d0>
 8009286:	2d05      	cmp	r5, #5
 8009288:	e7de      	b.n	8009248 <_scanf_float+0x1cc>
 800928a:	2d02      	cmp	r5, #2
 800928c:	f47f af26 	bne.w	80090dc <_scanf_float+0x60>
 8009290:	2503      	movs	r5, #3
 8009292:	e7b7      	b.n	8009204 <_scanf_float+0x188>
 8009294:	2d06      	cmp	r5, #6
 8009296:	f47f af21 	bne.w	80090dc <_scanf_float+0x60>
 800929a:	2507      	movs	r5, #7
 800929c:	e7b2      	b.n	8009204 <_scanf_float+0x188>
 800929e:	6822      	ldr	r2, [r4, #0]
 80092a0:	0591      	lsls	r1, r2, #22
 80092a2:	f57f af1b 	bpl.w	80090dc <_scanf_float+0x60>
 80092a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80092aa:	6022      	str	r2, [r4, #0]
 80092ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80092b0:	e7a8      	b.n	8009204 <_scanf_float+0x188>
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80092b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80092bc:	d006      	beq.n	80092cc <_scanf_float+0x250>
 80092be:	0550      	lsls	r0, r2, #21
 80092c0:	f57f af0c 	bpl.w	80090dc <_scanf_float+0x60>
 80092c4:	f1b9 0f00 	cmp.w	r9, #0
 80092c8:	f43f af0f 	beq.w	80090ea <_scanf_float+0x6e>
 80092cc:	0591      	lsls	r1, r2, #22
 80092ce:	bf58      	it	pl
 80092d0:	9901      	ldrpl	r1, [sp, #4]
 80092d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092d6:	bf58      	it	pl
 80092d8:	eba9 0101 	subpl.w	r1, r9, r1
 80092dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80092e0:	bf58      	it	pl
 80092e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80092e6:	6022      	str	r2, [r4, #0]
 80092e8:	f04f 0900 	mov.w	r9, #0
 80092ec:	e78a      	b.n	8009204 <_scanf_float+0x188>
 80092ee:	f04f 0a03 	mov.w	sl, #3
 80092f2:	e787      	b.n	8009204 <_scanf_float+0x188>
 80092f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80092f8:	4639      	mov	r1, r7
 80092fa:	4640      	mov	r0, r8
 80092fc:	4798      	blx	r3
 80092fe:	2800      	cmp	r0, #0
 8009300:	f43f aedf 	beq.w	80090c2 <_scanf_float+0x46>
 8009304:	e6ea      	b.n	80090dc <_scanf_float+0x60>
 8009306:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800930a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800930e:	463a      	mov	r2, r7
 8009310:	4640      	mov	r0, r8
 8009312:	4798      	blx	r3
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	3b01      	subs	r3, #1
 8009318:	6123      	str	r3, [r4, #16]
 800931a:	e6ec      	b.n	80090f6 <_scanf_float+0x7a>
 800931c:	1e6b      	subs	r3, r5, #1
 800931e:	2b06      	cmp	r3, #6
 8009320:	d825      	bhi.n	800936e <_scanf_float+0x2f2>
 8009322:	2d02      	cmp	r5, #2
 8009324:	d836      	bhi.n	8009394 <_scanf_float+0x318>
 8009326:	455e      	cmp	r6, fp
 8009328:	f67f aee8 	bls.w	80090fc <_scanf_float+0x80>
 800932c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009330:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009334:	463a      	mov	r2, r7
 8009336:	4640      	mov	r0, r8
 8009338:	4798      	blx	r3
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	3b01      	subs	r3, #1
 800933e:	6123      	str	r3, [r4, #16]
 8009340:	e7f1      	b.n	8009326 <_scanf_float+0x2aa>
 8009342:	9802      	ldr	r0, [sp, #8]
 8009344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009348:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800934c:	9002      	str	r0, [sp, #8]
 800934e:	463a      	mov	r2, r7
 8009350:	4640      	mov	r0, r8
 8009352:	4798      	blx	r3
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	3b01      	subs	r3, #1
 8009358:	6123      	str	r3, [r4, #16]
 800935a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800935e:	fa5f fa8a 	uxtb.w	sl, sl
 8009362:	f1ba 0f02 	cmp.w	sl, #2
 8009366:	d1ec      	bne.n	8009342 <_scanf_float+0x2c6>
 8009368:	3d03      	subs	r5, #3
 800936a:	b2ed      	uxtb	r5, r5
 800936c:	1b76      	subs	r6, r6, r5
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	05da      	lsls	r2, r3, #23
 8009372:	d52f      	bpl.n	80093d4 <_scanf_float+0x358>
 8009374:	055b      	lsls	r3, r3, #21
 8009376:	d510      	bpl.n	800939a <_scanf_float+0x31e>
 8009378:	455e      	cmp	r6, fp
 800937a:	f67f aebf 	bls.w	80090fc <_scanf_float+0x80>
 800937e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009386:	463a      	mov	r2, r7
 8009388:	4640      	mov	r0, r8
 800938a:	4798      	blx	r3
 800938c:	6923      	ldr	r3, [r4, #16]
 800938e:	3b01      	subs	r3, #1
 8009390:	6123      	str	r3, [r4, #16]
 8009392:	e7f1      	b.n	8009378 <_scanf_float+0x2fc>
 8009394:	46aa      	mov	sl, r5
 8009396:	9602      	str	r6, [sp, #8]
 8009398:	e7df      	b.n	800935a <_scanf_float+0x2de>
 800939a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800939e:	6923      	ldr	r3, [r4, #16]
 80093a0:	2965      	cmp	r1, #101	; 0x65
 80093a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80093a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80093aa:	6123      	str	r3, [r4, #16]
 80093ac:	d00c      	beq.n	80093c8 <_scanf_float+0x34c>
 80093ae:	2945      	cmp	r1, #69	; 0x45
 80093b0:	d00a      	beq.n	80093c8 <_scanf_float+0x34c>
 80093b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093b6:	463a      	mov	r2, r7
 80093b8:	4640      	mov	r0, r8
 80093ba:	4798      	blx	r3
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	1eb5      	subs	r5, r6, #2
 80093c6:	6123      	str	r3, [r4, #16]
 80093c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093cc:	463a      	mov	r2, r7
 80093ce:	4640      	mov	r0, r8
 80093d0:	4798      	blx	r3
 80093d2:	462e      	mov	r6, r5
 80093d4:	6825      	ldr	r5, [r4, #0]
 80093d6:	f015 0510 	ands.w	r5, r5, #16
 80093da:	d14e      	bne.n	800947a <_scanf_float+0x3fe>
 80093dc:	7035      	strb	r5, [r6, #0]
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80093e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093e8:	d119      	bne.n	800941e <_scanf_float+0x3a2>
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	454b      	cmp	r3, r9
 80093ee:	eba3 0209 	sub.w	r2, r3, r9
 80093f2:	d121      	bne.n	8009438 <_scanf_float+0x3bc>
 80093f4:	2200      	movs	r2, #0
 80093f6:	4659      	mov	r1, fp
 80093f8:	4640      	mov	r0, r8
 80093fa:	f000 fe3b 	bl	800a074 <_strtod_r>
 80093fe:	6822      	ldr	r2, [r4, #0]
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	f012 0f02 	tst.w	r2, #2
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	d021      	beq.n	800944e <_scanf_float+0x3d2>
 800940a:	9903      	ldr	r1, [sp, #12]
 800940c:	1d1a      	adds	r2, r3, #4
 800940e:	600a      	str	r2, [r1, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	ed83 0b00 	vstr	d0, [r3]
 8009416:	68e3      	ldr	r3, [r4, #12]
 8009418:	3301      	adds	r3, #1
 800941a:	60e3      	str	r3, [r4, #12]
 800941c:	e66f      	b.n	80090fe <_scanf_float+0x82>
 800941e:	9b04      	ldr	r3, [sp, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d0e7      	beq.n	80093f4 <_scanf_float+0x378>
 8009424:	9905      	ldr	r1, [sp, #20]
 8009426:	230a      	movs	r3, #10
 8009428:	462a      	mov	r2, r5
 800942a:	3101      	adds	r1, #1
 800942c:	4640      	mov	r0, r8
 800942e:	f000 fea9 	bl	800a184 <_strtol_r>
 8009432:	9b04      	ldr	r3, [sp, #16]
 8009434:	9e05      	ldr	r6, [sp, #20]
 8009436:	1ac2      	subs	r2, r0, r3
 8009438:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800943c:	429e      	cmp	r6, r3
 800943e:	bf28      	it	cs
 8009440:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009444:	490e      	ldr	r1, [pc, #56]	; (8009480 <_scanf_float+0x404>)
 8009446:	4630      	mov	r0, r6
 8009448:	f000 f824 	bl	8009494 <siprintf>
 800944c:	e7d2      	b.n	80093f4 <_scanf_float+0x378>
 800944e:	9903      	ldr	r1, [sp, #12]
 8009450:	f012 0f04 	tst.w	r2, #4
 8009454:	f103 0204 	add.w	r2, r3, #4
 8009458:	600a      	str	r2, [r1, #0]
 800945a:	d1d9      	bne.n	8009410 <_scanf_float+0x394>
 800945c:	eeb4 0b40 	vcmp.f64	d0, d0
 8009460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009464:	681e      	ldr	r6, [r3, #0]
 8009466:	d705      	bvc.n	8009474 <_scanf_float+0x3f8>
 8009468:	4806      	ldr	r0, [pc, #24]	; (8009484 <_scanf_float+0x408>)
 800946a:	f000 f80d 	bl	8009488 <nanf>
 800946e:	ed86 0a00 	vstr	s0, [r6]
 8009472:	e7d0      	b.n	8009416 <_scanf_float+0x39a>
 8009474:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009478:	e7f9      	b.n	800946e <_scanf_float+0x3f2>
 800947a:	2500      	movs	r5, #0
 800947c:	e63f      	b.n	80090fe <_scanf_float+0x82>
 800947e:	bf00      	nop
 8009480:	0800cf9c 	.word	0x0800cf9c
 8009484:	0800d3a8 	.word	0x0800d3a8

08009488 <nanf>:
 8009488:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009490 <nanf+0x8>
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	7fc00000 	.word	0x7fc00000

08009494 <siprintf>:
 8009494:	b40e      	push	{r1, r2, r3}
 8009496:	b500      	push	{lr}
 8009498:	b09c      	sub	sp, #112	; 0x70
 800949a:	ab1d      	add	r3, sp, #116	; 0x74
 800949c:	9002      	str	r0, [sp, #8]
 800949e:	9006      	str	r0, [sp, #24]
 80094a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094a4:	4809      	ldr	r0, [pc, #36]	; (80094cc <siprintf+0x38>)
 80094a6:	9107      	str	r1, [sp, #28]
 80094a8:	9104      	str	r1, [sp, #16]
 80094aa:	4909      	ldr	r1, [pc, #36]	; (80094d0 <siprintf+0x3c>)
 80094ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b0:	9105      	str	r1, [sp, #20]
 80094b2:	6800      	ldr	r0, [r0, #0]
 80094b4:	9301      	str	r3, [sp, #4]
 80094b6:	a902      	add	r1, sp, #8
 80094b8:	f002 fe0c 	bl	800c0d4 <_svfiprintf_r>
 80094bc:	9b02      	ldr	r3, [sp, #8]
 80094be:	2200      	movs	r2, #0
 80094c0:	701a      	strb	r2, [r3, #0]
 80094c2:	b01c      	add	sp, #112	; 0x70
 80094c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094c8:	b003      	add	sp, #12
 80094ca:	4770      	bx	lr
 80094cc:	24000028 	.word	0x24000028
 80094d0:	ffff0208 	.word	0xffff0208

080094d4 <sulp>:
 80094d4:	b570      	push	{r4, r5, r6, lr}
 80094d6:	4604      	mov	r4, r0
 80094d8:	460d      	mov	r5, r1
 80094da:	4616      	mov	r6, r2
 80094dc:	ec45 4b10 	vmov	d0, r4, r5
 80094e0:	f002 fb5a 	bl	800bb98 <__ulp>
 80094e4:	b17e      	cbz	r6, 8009506 <sulp+0x32>
 80094e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80094ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dd09      	ble.n	8009506 <sulp+0x32>
 80094f2:	051b      	lsls	r3, r3, #20
 80094f4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80094f8:	2000      	movs	r0, #0
 80094fa:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80094fe:	ec41 0b17 	vmov	d7, r0, r1
 8009502:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009506:	bd70      	pop	{r4, r5, r6, pc}

08009508 <_strtod_l>:
 8009508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950c:	ed2d 8b0e 	vpush	{d8-d14}
 8009510:	b097      	sub	sp, #92	; 0x5c
 8009512:	461f      	mov	r7, r3
 8009514:	2300      	movs	r3, #0
 8009516:	9312      	str	r3, [sp, #72]	; 0x48
 8009518:	4ba1      	ldr	r3, [pc, #644]	; (80097a0 <_strtod_l+0x298>)
 800951a:	920d      	str	r2, [sp, #52]	; 0x34
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	9307      	str	r3, [sp, #28]
 8009520:	4604      	mov	r4, r0
 8009522:	4618      	mov	r0, r3
 8009524:	468b      	mov	fp, r1
 8009526:	f7f6 fedb 	bl	80002e0 <strlen>
 800952a:	f04f 0800 	mov.w	r8, #0
 800952e:	4605      	mov	r5, r0
 8009530:	f04f 0900 	mov.w	r9, #0
 8009534:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009538:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800953a:	7813      	ldrb	r3, [r2, #0]
 800953c:	2b2b      	cmp	r3, #43	; 0x2b
 800953e:	d04d      	beq.n	80095dc <_strtod_l+0xd4>
 8009540:	d83a      	bhi.n	80095b8 <_strtod_l+0xb0>
 8009542:	2b0d      	cmp	r3, #13
 8009544:	d833      	bhi.n	80095ae <_strtod_l+0xa6>
 8009546:	2b08      	cmp	r3, #8
 8009548:	d833      	bhi.n	80095b2 <_strtod_l+0xaa>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d03d      	beq.n	80095ca <_strtod_l+0xc2>
 800954e:	2300      	movs	r3, #0
 8009550:	9308      	str	r3, [sp, #32]
 8009552:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009554:	7833      	ldrb	r3, [r6, #0]
 8009556:	2b30      	cmp	r3, #48	; 0x30
 8009558:	f040 80b0 	bne.w	80096bc <_strtod_l+0x1b4>
 800955c:	7873      	ldrb	r3, [r6, #1]
 800955e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009562:	2b58      	cmp	r3, #88	; 0x58
 8009564:	d167      	bne.n	8009636 <_strtod_l+0x12e>
 8009566:	9b08      	ldr	r3, [sp, #32]
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	ab12      	add	r3, sp, #72	; 0x48
 800956c:	9702      	str	r7, [sp, #8]
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	4a8c      	ldr	r2, [pc, #560]	; (80097a4 <_strtod_l+0x29c>)
 8009572:	ab13      	add	r3, sp, #76	; 0x4c
 8009574:	a911      	add	r1, sp, #68	; 0x44
 8009576:	4620      	mov	r0, r4
 8009578:	f001 fc68 	bl	800ae4c <__gethex>
 800957c:	f010 0507 	ands.w	r5, r0, #7
 8009580:	4607      	mov	r7, r0
 8009582:	d005      	beq.n	8009590 <_strtod_l+0x88>
 8009584:	2d06      	cmp	r5, #6
 8009586:	d12b      	bne.n	80095e0 <_strtod_l+0xd8>
 8009588:	3601      	adds	r6, #1
 800958a:	2300      	movs	r3, #0
 800958c:	9611      	str	r6, [sp, #68]	; 0x44
 800958e:	9308      	str	r3, [sp, #32]
 8009590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009592:	2b00      	cmp	r3, #0
 8009594:	f040 854e 	bne.w	800a034 <_strtod_l+0xb2c>
 8009598:	9b08      	ldr	r3, [sp, #32]
 800959a:	b1e3      	cbz	r3, 80095d6 <_strtod_l+0xce>
 800959c:	ec49 8b17 	vmov	d7, r8, r9
 80095a0:	eeb1 0b47 	vneg.f64	d0, d7
 80095a4:	b017      	add	sp, #92	; 0x5c
 80095a6:	ecbd 8b0e 	vpop	{d8-d14}
 80095aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ae:	2b20      	cmp	r3, #32
 80095b0:	d1cd      	bne.n	800954e <_strtod_l+0x46>
 80095b2:	3201      	adds	r2, #1
 80095b4:	9211      	str	r2, [sp, #68]	; 0x44
 80095b6:	e7bf      	b.n	8009538 <_strtod_l+0x30>
 80095b8:	2b2d      	cmp	r3, #45	; 0x2d
 80095ba:	d1c8      	bne.n	800954e <_strtod_l+0x46>
 80095bc:	2301      	movs	r3, #1
 80095be:	9308      	str	r3, [sp, #32]
 80095c0:	1c53      	adds	r3, r2, #1
 80095c2:	9311      	str	r3, [sp, #68]	; 0x44
 80095c4:	7853      	ldrb	r3, [r2, #1]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1c3      	bne.n	8009552 <_strtod_l+0x4a>
 80095ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095cc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f040 852d 	bne.w	800a030 <_strtod_l+0xb28>
 80095d6:	ec49 8b10 	vmov	d0, r8, r9
 80095da:	e7e3      	b.n	80095a4 <_strtod_l+0x9c>
 80095dc:	2300      	movs	r3, #0
 80095de:	e7ee      	b.n	80095be <_strtod_l+0xb6>
 80095e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095e2:	b13a      	cbz	r2, 80095f4 <_strtod_l+0xec>
 80095e4:	2135      	movs	r1, #53	; 0x35
 80095e6:	a814      	add	r0, sp, #80	; 0x50
 80095e8:	f002 fbde 	bl	800bda8 <__copybits>
 80095ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 80095ee:	4620      	mov	r0, r4
 80095f0:	f001 ffa0 	bl	800b534 <_Bfree>
 80095f4:	3d01      	subs	r5, #1
 80095f6:	2d04      	cmp	r5, #4
 80095f8:	d806      	bhi.n	8009608 <_strtod_l+0x100>
 80095fa:	e8df f005 	tbb	[pc, r5]
 80095fe:	030a      	.short	0x030a
 8009600:	1714      	.short	0x1714
 8009602:	0a          	.byte	0x0a
 8009603:	00          	.byte	0x00
 8009604:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8009608:	073f      	lsls	r7, r7, #28
 800960a:	d5c1      	bpl.n	8009590 <_strtod_l+0x88>
 800960c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009610:	e7be      	b.n	8009590 <_strtod_l+0x88>
 8009612:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8009616:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009618:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800961c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009620:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009624:	e7f0      	b.n	8009608 <_strtod_l+0x100>
 8009626:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80097a8 <_strtod_l+0x2a0>
 800962a:	e7ed      	b.n	8009608 <_strtod_l+0x100>
 800962c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009630:	f04f 38ff 	mov.w	r8, #4294967295
 8009634:	e7e8      	b.n	8009608 <_strtod_l+0x100>
 8009636:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	9211      	str	r2, [sp, #68]	; 0x44
 800963c:	785b      	ldrb	r3, [r3, #1]
 800963e:	2b30      	cmp	r3, #48	; 0x30
 8009640:	d0f9      	beq.n	8009636 <_strtod_l+0x12e>
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0a4      	beq.n	8009590 <_strtod_l+0x88>
 8009646:	2301      	movs	r3, #1
 8009648:	f04f 0a00 	mov.w	sl, #0
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009650:	930a      	str	r3, [sp, #40]	; 0x28
 8009652:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009656:	f8cd a018 	str.w	sl, [sp, #24]
 800965a:	220a      	movs	r2, #10
 800965c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800965e:	7807      	ldrb	r7, [r0, #0]
 8009660:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009664:	b2d9      	uxtb	r1, r3
 8009666:	2909      	cmp	r1, #9
 8009668:	d92a      	bls.n	80096c0 <_strtod_l+0x1b8>
 800966a:	9907      	ldr	r1, [sp, #28]
 800966c:	462a      	mov	r2, r5
 800966e:	f002 fe4b 	bl	800c308 <strncmp>
 8009672:	2800      	cmp	r0, #0
 8009674:	d033      	beq.n	80096de <_strtod_l+0x1d6>
 8009676:	2000      	movs	r0, #0
 8009678:	9b06      	ldr	r3, [sp, #24]
 800967a:	463a      	mov	r2, r7
 800967c:	4601      	mov	r1, r0
 800967e:	4607      	mov	r7, r0
 8009680:	2a65      	cmp	r2, #101	; 0x65
 8009682:	d001      	beq.n	8009688 <_strtod_l+0x180>
 8009684:	2a45      	cmp	r2, #69	; 0x45
 8009686:	d117      	bne.n	80096b8 <_strtod_l+0x1b0>
 8009688:	b91b      	cbnz	r3, 8009692 <_strtod_l+0x18a>
 800968a:	9b04      	ldr	r3, [sp, #16]
 800968c:	4303      	orrs	r3, r0
 800968e:	d09c      	beq.n	80095ca <_strtod_l+0xc2>
 8009690:	2300      	movs	r3, #0
 8009692:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8009696:	f10b 0201 	add.w	r2, fp, #1
 800969a:	9211      	str	r2, [sp, #68]	; 0x44
 800969c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80096a0:	2a2b      	cmp	r2, #43	; 0x2b
 80096a2:	d071      	beq.n	8009788 <_strtod_l+0x280>
 80096a4:	2a2d      	cmp	r2, #45	; 0x2d
 80096a6:	d077      	beq.n	8009798 <_strtod_l+0x290>
 80096a8:	f04f 0e00 	mov.w	lr, #0
 80096ac:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80096b0:	2d09      	cmp	r5, #9
 80096b2:	d97f      	bls.n	80097b4 <_strtod_l+0x2ac>
 80096b4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80096b8:	2500      	movs	r5, #0
 80096ba:	e09b      	b.n	80097f4 <_strtod_l+0x2ec>
 80096bc:	2300      	movs	r3, #0
 80096be:	e7c3      	b.n	8009648 <_strtod_l+0x140>
 80096c0:	9906      	ldr	r1, [sp, #24]
 80096c2:	2908      	cmp	r1, #8
 80096c4:	bfdd      	ittte	le
 80096c6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80096c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80096cc:	9309      	strle	r3, [sp, #36]	; 0x24
 80096ce:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80096d2:	9b06      	ldr	r3, [sp, #24]
 80096d4:	3001      	adds	r0, #1
 80096d6:	3301      	adds	r3, #1
 80096d8:	9306      	str	r3, [sp, #24]
 80096da:	9011      	str	r0, [sp, #68]	; 0x44
 80096dc:	e7be      	b.n	800965c <_strtod_l+0x154>
 80096de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096e0:	195a      	adds	r2, r3, r5
 80096e2:	9211      	str	r2, [sp, #68]	; 0x44
 80096e4:	5d5a      	ldrb	r2, [r3, r5]
 80096e6:	9b06      	ldr	r3, [sp, #24]
 80096e8:	b3a3      	cbz	r3, 8009754 <_strtod_l+0x24c>
 80096ea:	4607      	mov	r7, r0
 80096ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80096f0:	2909      	cmp	r1, #9
 80096f2:	d912      	bls.n	800971a <_strtod_l+0x212>
 80096f4:	2101      	movs	r1, #1
 80096f6:	e7c3      	b.n	8009680 <_strtod_l+0x178>
 80096f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	9211      	str	r2, [sp, #68]	; 0x44
 80096fe:	785a      	ldrb	r2, [r3, #1]
 8009700:	3001      	adds	r0, #1
 8009702:	2a30      	cmp	r2, #48	; 0x30
 8009704:	d0f8      	beq.n	80096f8 <_strtod_l+0x1f0>
 8009706:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800970a:	2b08      	cmp	r3, #8
 800970c:	f200 8497 	bhi.w	800a03e <_strtod_l+0xb36>
 8009710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009712:	930a      	str	r3, [sp, #40]	; 0x28
 8009714:	4607      	mov	r7, r0
 8009716:	2000      	movs	r0, #0
 8009718:	4603      	mov	r3, r0
 800971a:	3a30      	subs	r2, #48	; 0x30
 800971c:	f100 0101 	add.w	r1, r0, #1
 8009720:	d012      	beq.n	8009748 <_strtod_l+0x240>
 8009722:	440f      	add	r7, r1
 8009724:	eb00 0c03 	add.w	ip, r0, r3
 8009728:	4619      	mov	r1, r3
 800972a:	250a      	movs	r5, #10
 800972c:	4561      	cmp	r1, ip
 800972e:	d113      	bne.n	8009758 <_strtod_l+0x250>
 8009730:	1819      	adds	r1, r3, r0
 8009732:	2908      	cmp	r1, #8
 8009734:	f103 0301 	add.w	r3, r3, #1
 8009738:	4403      	add	r3, r0
 800973a:	dc1c      	bgt.n	8009776 <_strtod_l+0x26e>
 800973c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800973e:	210a      	movs	r1, #10
 8009740:	fb01 2200 	mla	r2, r1, r0, r2
 8009744:	9209      	str	r2, [sp, #36]	; 0x24
 8009746:	2100      	movs	r1, #0
 8009748:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800974a:	1c50      	adds	r0, r2, #1
 800974c:	9011      	str	r0, [sp, #68]	; 0x44
 800974e:	7852      	ldrb	r2, [r2, #1]
 8009750:	4608      	mov	r0, r1
 8009752:	e7cb      	b.n	80096ec <_strtod_l+0x1e4>
 8009754:	9806      	ldr	r0, [sp, #24]
 8009756:	e7d4      	b.n	8009702 <_strtod_l+0x1fa>
 8009758:	2908      	cmp	r1, #8
 800975a:	dc04      	bgt.n	8009766 <_strtod_l+0x25e>
 800975c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800975e:	436e      	muls	r6, r5
 8009760:	9609      	str	r6, [sp, #36]	; 0x24
 8009762:	3101      	adds	r1, #1
 8009764:	e7e2      	b.n	800972c <_strtod_l+0x224>
 8009766:	f101 0e01 	add.w	lr, r1, #1
 800976a:	f1be 0f10 	cmp.w	lr, #16
 800976e:	bfd8      	it	le
 8009770:	fb05 fa0a 	mulle.w	sl, r5, sl
 8009774:	e7f5      	b.n	8009762 <_strtod_l+0x25a>
 8009776:	2b10      	cmp	r3, #16
 8009778:	bfdc      	itt	le
 800977a:	210a      	movle	r1, #10
 800977c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8009780:	e7e1      	b.n	8009746 <_strtod_l+0x23e>
 8009782:	2700      	movs	r7, #0
 8009784:	2101      	movs	r1, #1
 8009786:	e780      	b.n	800968a <_strtod_l+0x182>
 8009788:	f04f 0e00 	mov.w	lr, #0
 800978c:	f10b 0202 	add.w	r2, fp, #2
 8009790:	9211      	str	r2, [sp, #68]	; 0x44
 8009792:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8009796:	e789      	b.n	80096ac <_strtod_l+0x1a4>
 8009798:	f04f 0e01 	mov.w	lr, #1
 800979c:	e7f6      	b.n	800978c <_strtod_l+0x284>
 800979e:	bf00      	nop
 80097a0:	0800d1f0 	.word	0x0800d1f0
 80097a4:	0800cfa4 	.word	0x0800cfa4
 80097a8:	7ff00000 	.word	0x7ff00000
 80097ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097ae:	1c55      	adds	r5, r2, #1
 80097b0:	9511      	str	r5, [sp, #68]	; 0x44
 80097b2:	7852      	ldrb	r2, [r2, #1]
 80097b4:	2a30      	cmp	r2, #48	; 0x30
 80097b6:	d0f9      	beq.n	80097ac <_strtod_l+0x2a4>
 80097b8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80097bc:	2d08      	cmp	r5, #8
 80097be:	f63f af7b 	bhi.w	80096b8 <_strtod_l+0x1b0>
 80097c2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80097c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097c8:	9207      	str	r2, [sp, #28]
 80097ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097cc:	1c55      	adds	r5, r2, #1
 80097ce:	9511      	str	r5, [sp, #68]	; 0x44
 80097d0:	7852      	ldrb	r2, [r2, #1]
 80097d2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80097d6:	2e09      	cmp	r6, #9
 80097d8:	d937      	bls.n	800984a <_strtod_l+0x342>
 80097da:	9e07      	ldr	r6, [sp, #28]
 80097dc:	1bad      	subs	r5, r5, r6
 80097de:	2d08      	cmp	r5, #8
 80097e0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80097e4:	dc02      	bgt.n	80097ec <_strtod_l+0x2e4>
 80097e6:	4565      	cmp	r5, ip
 80097e8:	bfa8      	it	ge
 80097ea:	4665      	movge	r5, ip
 80097ec:	f1be 0f00 	cmp.w	lr, #0
 80097f0:	d000      	beq.n	80097f4 <_strtod_l+0x2ec>
 80097f2:	426d      	negs	r5, r5
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d14d      	bne.n	8009894 <_strtod_l+0x38c>
 80097f8:	9b04      	ldr	r3, [sp, #16]
 80097fa:	4303      	orrs	r3, r0
 80097fc:	f47f aec8 	bne.w	8009590 <_strtod_l+0x88>
 8009800:	2900      	cmp	r1, #0
 8009802:	f47f aee2 	bne.w	80095ca <_strtod_l+0xc2>
 8009806:	2a69      	cmp	r2, #105	; 0x69
 8009808:	d027      	beq.n	800985a <_strtod_l+0x352>
 800980a:	dc24      	bgt.n	8009856 <_strtod_l+0x34e>
 800980c:	2a49      	cmp	r2, #73	; 0x49
 800980e:	d024      	beq.n	800985a <_strtod_l+0x352>
 8009810:	2a4e      	cmp	r2, #78	; 0x4e
 8009812:	f47f aeda 	bne.w	80095ca <_strtod_l+0xc2>
 8009816:	4996      	ldr	r1, [pc, #600]	; (8009a70 <_strtod_l+0x568>)
 8009818:	a811      	add	r0, sp, #68	; 0x44
 800981a:	f001 fd6f 	bl	800b2fc <__match>
 800981e:	2800      	cmp	r0, #0
 8009820:	f43f aed3 	beq.w	80095ca <_strtod_l+0xc2>
 8009824:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	2b28      	cmp	r3, #40	; 0x28
 800982a:	d12d      	bne.n	8009888 <_strtod_l+0x380>
 800982c:	4991      	ldr	r1, [pc, #580]	; (8009a74 <_strtod_l+0x56c>)
 800982e:	aa14      	add	r2, sp, #80	; 0x50
 8009830:	a811      	add	r0, sp, #68	; 0x44
 8009832:	f001 fd77 	bl	800b324 <__hexnan>
 8009836:	2805      	cmp	r0, #5
 8009838:	d126      	bne.n	8009888 <_strtod_l+0x380>
 800983a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800983c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009840:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009844:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009848:	e6a2      	b.n	8009590 <_strtod_l+0x88>
 800984a:	250a      	movs	r5, #10
 800984c:	fb05 250c 	mla	r5, r5, ip, r2
 8009850:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8009854:	e7b9      	b.n	80097ca <_strtod_l+0x2c2>
 8009856:	2a6e      	cmp	r2, #110	; 0x6e
 8009858:	e7db      	b.n	8009812 <_strtod_l+0x30a>
 800985a:	4987      	ldr	r1, [pc, #540]	; (8009a78 <_strtod_l+0x570>)
 800985c:	a811      	add	r0, sp, #68	; 0x44
 800985e:	f001 fd4d 	bl	800b2fc <__match>
 8009862:	2800      	cmp	r0, #0
 8009864:	f43f aeb1 	beq.w	80095ca <_strtod_l+0xc2>
 8009868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800986a:	4984      	ldr	r1, [pc, #528]	; (8009a7c <_strtod_l+0x574>)
 800986c:	3b01      	subs	r3, #1
 800986e:	a811      	add	r0, sp, #68	; 0x44
 8009870:	9311      	str	r3, [sp, #68]	; 0x44
 8009872:	f001 fd43 	bl	800b2fc <__match>
 8009876:	b910      	cbnz	r0, 800987e <_strtod_l+0x376>
 8009878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800987a:	3301      	adds	r3, #1
 800987c:	9311      	str	r3, [sp, #68]	; 0x44
 800987e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8009a90 <_strtod_l+0x588>
 8009882:	f04f 0800 	mov.w	r8, #0
 8009886:	e683      	b.n	8009590 <_strtod_l+0x88>
 8009888:	487d      	ldr	r0, [pc, #500]	; (8009a80 <_strtod_l+0x578>)
 800988a:	f002 fd25 	bl	800c2d8 <nan>
 800988e:	ec59 8b10 	vmov	r8, r9, d0
 8009892:	e67d      	b.n	8009590 <_strtod_l+0x88>
 8009894:	1bea      	subs	r2, r5, r7
 8009896:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800989a:	9207      	str	r2, [sp, #28]
 800989c:	9a06      	ldr	r2, [sp, #24]
 800989e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80098a2:	2a00      	cmp	r2, #0
 80098a4:	bf08      	it	eq
 80098a6:	461a      	moveq	r2, r3
 80098a8:	2b10      	cmp	r3, #16
 80098aa:	9206      	str	r2, [sp, #24]
 80098ac:	461a      	mov	r2, r3
 80098ae:	bfa8      	it	ge
 80098b0:	2210      	movge	r2, #16
 80098b2:	2b09      	cmp	r3, #9
 80098b4:	ec59 8b17 	vmov	r8, r9, d7
 80098b8:	dd0c      	ble.n	80098d4 <_strtod_l+0x3cc>
 80098ba:	4972      	ldr	r1, [pc, #456]	; (8009a84 <_strtod_l+0x57c>)
 80098bc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80098c0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80098c4:	ee06 aa90 	vmov	s13, sl
 80098c8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80098cc:	eea7 6b05 	vfma.f64	d6, d7, d5
 80098d0:	ec59 8b16 	vmov	r8, r9, d6
 80098d4:	2b0f      	cmp	r3, #15
 80098d6:	dc36      	bgt.n	8009946 <_strtod_l+0x43e>
 80098d8:	9907      	ldr	r1, [sp, #28]
 80098da:	2900      	cmp	r1, #0
 80098dc:	f43f ae58 	beq.w	8009590 <_strtod_l+0x88>
 80098e0:	dd23      	ble.n	800992a <_strtod_l+0x422>
 80098e2:	2916      	cmp	r1, #22
 80098e4:	dc0b      	bgt.n	80098fe <_strtod_l+0x3f6>
 80098e6:	4b67      	ldr	r3, [pc, #412]	; (8009a84 <_strtod_l+0x57c>)
 80098e8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80098ec:	ed93 7b00 	vldr	d7, [r3]
 80098f0:	ec49 8b16 	vmov	d6, r8, r9
 80098f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80098f8:	ec59 8b17 	vmov	r8, r9, d7
 80098fc:	e648      	b.n	8009590 <_strtod_l+0x88>
 80098fe:	9807      	ldr	r0, [sp, #28]
 8009900:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8009904:	4281      	cmp	r1, r0
 8009906:	db1e      	blt.n	8009946 <_strtod_l+0x43e>
 8009908:	4a5e      	ldr	r2, [pc, #376]	; (8009a84 <_strtod_l+0x57c>)
 800990a:	f1c3 030f 	rsb	r3, r3, #15
 800990e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009912:	ed91 7b00 	vldr	d7, [r1]
 8009916:	ec49 8b16 	vmov	d6, r8, r9
 800991a:	1ac3      	subs	r3, r0, r3
 800991c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009920:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009924:	ed92 6b00 	vldr	d6, [r2]
 8009928:	e7e4      	b.n	80098f4 <_strtod_l+0x3ec>
 800992a:	9907      	ldr	r1, [sp, #28]
 800992c:	3116      	adds	r1, #22
 800992e:	db0a      	blt.n	8009946 <_strtod_l+0x43e>
 8009930:	4b54      	ldr	r3, [pc, #336]	; (8009a84 <_strtod_l+0x57c>)
 8009932:	1b7d      	subs	r5, r7, r5
 8009934:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009938:	ed95 7b00 	vldr	d7, [r5]
 800993c:	ec49 8b16 	vmov	d6, r8, r9
 8009940:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009944:	e7d8      	b.n	80098f8 <_strtod_l+0x3f0>
 8009946:	9907      	ldr	r1, [sp, #28]
 8009948:	1a9a      	subs	r2, r3, r2
 800994a:	440a      	add	r2, r1
 800994c:	2a00      	cmp	r2, #0
 800994e:	dd6f      	ble.n	8009a30 <_strtod_l+0x528>
 8009950:	f012 000f 	ands.w	r0, r2, #15
 8009954:	d00a      	beq.n	800996c <_strtod_l+0x464>
 8009956:	494b      	ldr	r1, [pc, #300]	; (8009a84 <_strtod_l+0x57c>)
 8009958:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800995c:	ed91 7b00 	vldr	d7, [r1]
 8009960:	ec49 8b16 	vmov	d6, r8, r9
 8009964:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009968:	ec59 8b17 	vmov	r8, r9, d7
 800996c:	f032 020f 	bics.w	r2, r2, #15
 8009970:	d04f      	beq.n	8009a12 <_strtod_l+0x50a>
 8009972:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8009976:	dd22      	ble.n	80099be <_strtod_l+0x4b6>
 8009978:	2500      	movs	r5, #0
 800997a:	462e      	mov	r6, r5
 800997c:	9506      	str	r5, [sp, #24]
 800997e:	462f      	mov	r7, r5
 8009980:	2322      	movs	r3, #34	; 0x22
 8009982:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8009a90 <_strtod_l+0x588>
 8009986:	6023      	str	r3, [r4, #0]
 8009988:	f04f 0800 	mov.w	r8, #0
 800998c:	9b06      	ldr	r3, [sp, #24]
 800998e:	2b00      	cmp	r3, #0
 8009990:	f43f adfe 	beq.w	8009590 <_strtod_l+0x88>
 8009994:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009996:	4620      	mov	r0, r4
 8009998:	f001 fdcc 	bl	800b534 <_Bfree>
 800999c:	4639      	mov	r1, r7
 800999e:	4620      	mov	r0, r4
 80099a0:	f001 fdc8 	bl	800b534 <_Bfree>
 80099a4:	4631      	mov	r1, r6
 80099a6:	4620      	mov	r0, r4
 80099a8:	f001 fdc4 	bl	800b534 <_Bfree>
 80099ac:	9906      	ldr	r1, [sp, #24]
 80099ae:	4620      	mov	r0, r4
 80099b0:	f001 fdc0 	bl	800b534 <_Bfree>
 80099b4:	4629      	mov	r1, r5
 80099b6:	4620      	mov	r0, r4
 80099b8:	f001 fdbc 	bl	800b534 <_Bfree>
 80099bc:	e5e8      	b.n	8009590 <_strtod_l+0x88>
 80099be:	2000      	movs	r0, #0
 80099c0:	ec49 8b17 	vmov	d7, r8, r9
 80099c4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009a88 <_strtod_l+0x580>
 80099c8:	1112      	asrs	r2, r2, #4
 80099ca:	4601      	mov	r1, r0
 80099cc:	2a01      	cmp	r2, #1
 80099ce:	dc23      	bgt.n	8009a18 <_strtod_l+0x510>
 80099d0:	b108      	cbz	r0, 80099d6 <_strtod_l+0x4ce>
 80099d2:	ec59 8b17 	vmov	r8, r9, d7
 80099d6:	4a2c      	ldr	r2, [pc, #176]	; (8009a88 <_strtod_l+0x580>)
 80099d8:	482c      	ldr	r0, [pc, #176]	; (8009a8c <_strtod_l+0x584>)
 80099da:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80099de:	ed92 7b00 	vldr	d7, [r2]
 80099e2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80099e6:	ec49 8b16 	vmov	d6, r8, r9
 80099ea:	4a29      	ldr	r2, [pc, #164]	; (8009a90 <_strtod_l+0x588>)
 80099ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80099f0:	ee17 1a90 	vmov	r1, s15
 80099f4:	400a      	ands	r2, r1
 80099f6:	4282      	cmp	r2, r0
 80099f8:	ec59 8b17 	vmov	r8, r9, d7
 80099fc:	d8bc      	bhi.n	8009978 <_strtod_l+0x470>
 80099fe:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009a02:	4282      	cmp	r2, r0
 8009a04:	bf86      	itte	hi
 8009a06:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009a94 <_strtod_l+0x58c>
 8009a0a:	f04f 38ff 	movhi.w	r8, #4294967295
 8009a0e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009a12:	2200      	movs	r2, #0
 8009a14:	9204      	str	r2, [sp, #16]
 8009a16:	e078      	b.n	8009b0a <_strtod_l+0x602>
 8009a18:	07d6      	lsls	r6, r2, #31
 8009a1a:	d504      	bpl.n	8009a26 <_strtod_l+0x51e>
 8009a1c:	ed9c 6b00 	vldr	d6, [ip]
 8009a20:	2001      	movs	r0, #1
 8009a22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a26:	3101      	adds	r1, #1
 8009a28:	1052      	asrs	r2, r2, #1
 8009a2a:	f10c 0c08 	add.w	ip, ip, #8
 8009a2e:	e7cd      	b.n	80099cc <_strtod_l+0x4c4>
 8009a30:	d0ef      	beq.n	8009a12 <_strtod_l+0x50a>
 8009a32:	4252      	negs	r2, r2
 8009a34:	f012 000f 	ands.w	r0, r2, #15
 8009a38:	d00a      	beq.n	8009a50 <_strtod_l+0x548>
 8009a3a:	4912      	ldr	r1, [pc, #72]	; (8009a84 <_strtod_l+0x57c>)
 8009a3c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009a40:	ed91 7b00 	vldr	d7, [r1]
 8009a44:	ec49 8b16 	vmov	d6, r8, r9
 8009a48:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a4c:	ec59 8b17 	vmov	r8, r9, d7
 8009a50:	1112      	asrs	r2, r2, #4
 8009a52:	d0de      	beq.n	8009a12 <_strtod_l+0x50a>
 8009a54:	2a1f      	cmp	r2, #31
 8009a56:	dd1f      	ble.n	8009a98 <_strtod_l+0x590>
 8009a58:	2500      	movs	r5, #0
 8009a5a:	462e      	mov	r6, r5
 8009a5c:	9506      	str	r5, [sp, #24]
 8009a5e:	462f      	mov	r7, r5
 8009a60:	2322      	movs	r3, #34	; 0x22
 8009a62:	f04f 0800 	mov.w	r8, #0
 8009a66:	f04f 0900 	mov.w	r9, #0
 8009a6a:	6023      	str	r3, [r4, #0]
 8009a6c:	e78e      	b.n	800998c <_strtod_l+0x484>
 8009a6e:	bf00      	nop
 8009a70:	0800cf75 	.word	0x0800cf75
 8009a74:	0800cfb8 	.word	0x0800cfb8
 8009a78:	0800cf6d 	.word	0x0800cf6d
 8009a7c:	0800d0fc 	.word	0x0800d0fc
 8009a80:	0800d3a8 	.word	0x0800d3a8
 8009a84:	0800d288 	.word	0x0800d288
 8009a88:	0800d260 	.word	0x0800d260
 8009a8c:	7ca00000 	.word	0x7ca00000
 8009a90:	7ff00000 	.word	0x7ff00000
 8009a94:	7fefffff 	.word	0x7fefffff
 8009a98:	f012 0110 	ands.w	r1, r2, #16
 8009a9c:	bf18      	it	ne
 8009a9e:	216a      	movne	r1, #106	; 0x6a
 8009aa0:	9104      	str	r1, [sp, #16]
 8009aa2:	ec49 8b17 	vmov	d7, r8, r9
 8009aa6:	49be      	ldr	r1, [pc, #760]	; (8009da0 <_strtod_l+0x898>)
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	07d6      	lsls	r6, r2, #31
 8009aac:	d504      	bpl.n	8009ab8 <_strtod_l+0x5b0>
 8009aae:	ed91 6b00 	vldr	d6, [r1]
 8009ab2:	2001      	movs	r0, #1
 8009ab4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ab8:	1052      	asrs	r2, r2, #1
 8009aba:	f101 0108 	add.w	r1, r1, #8
 8009abe:	d1f4      	bne.n	8009aaa <_strtod_l+0x5a2>
 8009ac0:	b108      	cbz	r0, 8009ac6 <_strtod_l+0x5be>
 8009ac2:	ec59 8b17 	vmov	r8, r9, d7
 8009ac6:	9a04      	ldr	r2, [sp, #16]
 8009ac8:	b1c2      	cbz	r2, 8009afc <_strtod_l+0x5f4>
 8009aca:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8009ace:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8009ad2:	2a00      	cmp	r2, #0
 8009ad4:	4648      	mov	r0, r9
 8009ad6:	dd11      	ble.n	8009afc <_strtod_l+0x5f4>
 8009ad8:	2a1f      	cmp	r2, #31
 8009ada:	f340 812e 	ble.w	8009d3a <_strtod_l+0x832>
 8009ade:	2a34      	cmp	r2, #52	; 0x34
 8009ae0:	bfde      	ittt	le
 8009ae2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8009ae6:	f04f 32ff 	movle.w	r2, #4294967295
 8009aea:	fa02 f101 	lslle.w	r1, r2, r1
 8009aee:	f04f 0800 	mov.w	r8, #0
 8009af2:	bfcc      	ite	gt
 8009af4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009af8:	ea01 0900 	andle.w	r9, r1, r0
 8009afc:	ec49 8b17 	vmov	d7, r8, r9
 8009b00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b08:	d0a6      	beq.n	8009a58 <_strtod_l+0x550>
 8009b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b0c:	9200      	str	r2, [sp, #0]
 8009b0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009b10:	9a06      	ldr	r2, [sp, #24]
 8009b12:	4620      	mov	r0, r4
 8009b14:	f001 fd76 	bl	800b604 <__s2b>
 8009b18:	9006      	str	r0, [sp, #24]
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f43f af2c 	beq.w	8009978 <_strtod_l+0x470>
 8009b20:	9b07      	ldr	r3, [sp, #28]
 8009b22:	1b7d      	subs	r5, r7, r5
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bfb4      	ite	lt
 8009b28:	462b      	movlt	r3, r5
 8009b2a:	2300      	movge	r3, #0
 8009b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b2e:	9b07      	ldr	r3, [sp, #28]
 8009b30:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009d80 <_strtod_l+0x878>
 8009b34:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009d88 <_strtod_l+0x880>
 8009b38:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009d90 <_strtod_l+0x888>
 8009b3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009b40:	2500      	movs	r5, #0
 8009b42:	930c      	str	r3, [sp, #48]	; 0x30
 8009b44:	462e      	mov	r6, r5
 8009b46:	9b06      	ldr	r3, [sp, #24]
 8009b48:	4620      	mov	r0, r4
 8009b4a:	6859      	ldr	r1, [r3, #4]
 8009b4c:	f001 fcb2 	bl	800b4b4 <_Balloc>
 8009b50:	4607      	mov	r7, r0
 8009b52:	2800      	cmp	r0, #0
 8009b54:	f43f af14 	beq.w	8009980 <_strtod_l+0x478>
 8009b58:	9b06      	ldr	r3, [sp, #24]
 8009b5a:	691a      	ldr	r2, [r3, #16]
 8009b5c:	3202      	adds	r2, #2
 8009b5e:	f103 010c 	add.w	r1, r3, #12
 8009b62:	0092      	lsls	r2, r2, #2
 8009b64:	300c      	adds	r0, #12
 8009b66:	f001 fc97 	bl	800b498 <memcpy>
 8009b6a:	ec49 8b10 	vmov	d0, r8, r9
 8009b6e:	aa14      	add	r2, sp, #80	; 0x50
 8009b70:	a913      	add	r1, sp, #76	; 0x4c
 8009b72:	4620      	mov	r0, r4
 8009b74:	f002 f88c 	bl	800bc90 <__d2b>
 8009b78:	ec49 8b18 	vmov	d8, r8, r9
 8009b7c:	9012      	str	r0, [sp, #72]	; 0x48
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	f43f aefe 	beq.w	8009980 <_strtod_l+0x478>
 8009b84:	2101      	movs	r1, #1
 8009b86:	4620      	mov	r0, r4
 8009b88:	f001 fdd6 	bl	800b738 <__i2b>
 8009b8c:	4606      	mov	r6, r0
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	f43f aef6 	beq.w	8009980 <_strtod_l+0x478>
 8009b94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b96:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bfab      	itete	ge
 8009b9c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8009b9e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009ba0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8009ba4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009ba8:	bfac      	ite	ge
 8009baa:	eb03 0b02 	addge.w	fp, r3, r2
 8009bae:	eba2 0a03 	sublt.w	sl, r2, r3
 8009bb2:	9a04      	ldr	r2, [sp, #16]
 8009bb4:	1a9b      	subs	r3, r3, r2
 8009bb6:	440b      	add	r3, r1
 8009bb8:	4a7a      	ldr	r2, [pc, #488]	; (8009da4 <_strtod_l+0x89c>)
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009bc2:	f280 80cd 	bge.w	8009d60 <_strtod_l+0x858>
 8009bc6:	1ad2      	subs	r2, r2, r3
 8009bc8:	2a1f      	cmp	r2, #31
 8009bca:	eba1 0102 	sub.w	r1, r1, r2
 8009bce:	f04f 0001 	mov.w	r0, #1
 8009bd2:	f300 80b9 	bgt.w	8009d48 <_strtod_l+0x840>
 8009bd6:	fa00 f302 	lsl.w	r3, r0, r2
 8009bda:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bdc:	2300      	movs	r3, #0
 8009bde:	930a      	str	r3, [sp, #40]	; 0x28
 8009be0:	eb0b 0301 	add.w	r3, fp, r1
 8009be4:	9a04      	ldr	r2, [sp, #16]
 8009be6:	459b      	cmp	fp, r3
 8009be8:	448a      	add	sl, r1
 8009bea:	4492      	add	sl, r2
 8009bec:	465a      	mov	r2, fp
 8009bee:	bfa8      	it	ge
 8009bf0:	461a      	movge	r2, r3
 8009bf2:	4552      	cmp	r2, sl
 8009bf4:	bfa8      	it	ge
 8009bf6:	4652      	movge	r2, sl
 8009bf8:	2a00      	cmp	r2, #0
 8009bfa:	bfc2      	ittt	gt
 8009bfc:	1a9b      	subgt	r3, r3, r2
 8009bfe:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009c02:	ebab 0b02 	subgt.w	fp, fp, r2
 8009c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c08:	2a00      	cmp	r2, #0
 8009c0a:	dd18      	ble.n	8009c3e <_strtod_l+0x736>
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4620      	mov	r0, r4
 8009c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c12:	f001 fe51 	bl	800b8b8 <__pow5mult>
 8009c16:	4606      	mov	r6, r0
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	f43f aeb1 	beq.w	8009980 <_strtod_l+0x478>
 8009c1e:	4601      	mov	r1, r0
 8009c20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c22:	4620      	mov	r0, r4
 8009c24:	f001 fd9e 	bl	800b764 <__multiply>
 8009c28:	900e      	str	r0, [sp, #56]	; 0x38
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f43f aea8 	beq.w	8009980 <_strtod_l+0x478>
 8009c30:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009c32:	4620      	mov	r0, r4
 8009c34:	f001 fc7e 	bl	800b534 <_Bfree>
 8009c38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c3c:	9212      	str	r2, [sp, #72]	; 0x48
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f300 8093 	bgt.w	8009d6a <_strtod_l+0x862>
 8009c44:	9b07      	ldr	r3, [sp, #28]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	dd08      	ble.n	8009c5c <_strtod_l+0x754>
 8009c4a:	4639      	mov	r1, r7
 8009c4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f001 fe32 	bl	800b8b8 <__pow5mult>
 8009c54:	4607      	mov	r7, r0
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f43f ae92 	beq.w	8009980 <_strtod_l+0x478>
 8009c5c:	f1ba 0f00 	cmp.w	sl, #0
 8009c60:	dd08      	ble.n	8009c74 <_strtod_l+0x76c>
 8009c62:	4639      	mov	r1, r7
 8009c64:	4652      	mov	r2, sl
 8009c66:	4620      	mov	r0, r4
 8009c68:	f001 fe80 	bl	800b96c <__lshift>
 8009c6c:	4607      	mov	r7, r0
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	f43f ae86 	beq.w	8009980 <_strtod_l+0x478>
 8009c74:	f1bb 0f00 	cmp.w	fp, #0
 8009c78:	dd08      	ble.n	8009c8c <_strtod_l+0x784>
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	465a      	mov	r2, fp
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f001 fe74 	bl	800b96c <__lshift>
 8009c84:	4606      	mov	r6, r0
 8009c86:	2800      	cmp	r0, #0
 8009c88:	f43f ae7a 	beq.w	8009980 <_strtod_l+0x478>
 8009c8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009c8e:	463a      	mov	r2, r7
 8009c90:	4620      	mov	r0, r4
 8009c92:	f001 fef7 	bl	800ba84 <__mdiff>
 8009c96:	4605      	mov	r5, r0
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	f43f ae71 	beq.w	8009980 <_strtod_l+0x478>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009ca4:	60c3      	str	r3, [r0, #12]
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	f001 fed0 	bl	800ba4c <__mcmp>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	da7d      	bge.n	8009dac <_strtod_l+0x8a4>
 8009cb0:	ea5a 0308 	orrs.w	r3, sl, r8
 8009cb4:	f040 80a3 	bne.w	8009dfe <_strtod_l+0x8f6>
 8009cb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f040 809e 	bne.w	8009dfe <_strtod_l+0x8f6>
 8009cc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009cc6:	0d1b      	lsrs	r3, r3, #20
 8009cc8:	051b      	lsls	r3, r3, #20
 8009cca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009cce:	f240 8096 	bls.w	8009dfe <_strtod_l+0x8f6>
 8009cd2:	696b      	ldr	r3, [r5, #20]
 8009cd4:	b91b      	cbnz	r3, 8009cde <_strtod_l+0x7d6>
 8009cd6:	692b      	ldr	r3, [r5, #16]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	f340 8090 	ble.w	8009dfe <_strtod_l+0x8f6>
 8009cde:	4629      	mov	r1, r5
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f001 fe42 	bl	800b96c <__lshift>
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4605      	mov	r5, r0
 8009cec:	f001 feae 	bl	800ba4c <__mcmp>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	f340 8084 	ble.w	8009dfe <_strtod_l+0x8f6>
 8009cf6:	9904      	ldr	r1, [sp, #16]
 8009cf8:	4a2b      	ldr	r2, [pc, #172]	; (8009da8 <_strtod_l+0x8a0>)
 8009cfa:	464b      	mov	r3, r9
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	f000 809d 	beq.w	8009e3c <_strtod_l+0x934>
 8009d02:	ea02 0109 	and.w	r1, r2, r9
 8009d06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009d0a:	f300 8097 	bgt.w	8009e3c <_strtod_l+0x934>
 8009d0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009d12:	f77f aea5 	ble.w	8009a60 <_strtod_l+0x558>
 8009d16:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009d98 <_strtod_l+0x890>
 8009d1a:	ec49 8b16 	vmov	d6, r8, r9
 8009d1e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009d22:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d26:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	bf08      	it	eq
 8009d2e:	2322      	moveq	r3, #34	; 0x22
 8009d30:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009d34:	bf08      	it	eq
 8009d36:	6023      	streq	r3, [r4, #0]
 8009d38:	e62c      	b.n	8009994 <_strtod_l+0x48c>
 8009d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8009d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8009d42:	ea02 0808 	and.w	r8, r2, r8
 8009d46:	e6d9      	b.n	8009afc <_strtod_l+0x5f4>
 8009d48:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009d4c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009d50:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009d54:	33e2      	adds	r3, #226	; 0xe2
 8009d56:	fa00 f303 	lsl.w	r3, r0, r3
 8009d5a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8009d5e:	e73f      	b.n	8009be0 <_strtod_l+0x6d8>
 8009d60:	2200      	movs	r2, #0
 8009d62:	2301      	movs	r3, #1
 8009d64:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009d68:	e73a      	b.n	8009be0 <_strtod_l+0x6d8>
 8009d6a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f001 fdfc 	bl	800b96c <__lshift>
 8009d74:	9012      	str	r0, [sp, #72]	; 0x48
 8009d76:	2800      	cmp	r0, #0
 8009d78:	f47f af64 	bne.w	8009c44 <_strtod_l+0x73c>
 8009d7c:	e600      	b.n	8009980 <_strtod_l+0x478>
 8009d7e:	bf00      	nop
 8009d80:	94a03595 	.word	0x94a03595
 8009d84:	3fcfffff 	.word	0x3fcfffff
 8009d88:	94a03595 	.word	0x94a03595
 8009d8c:	3fdfffff 	.word	0x3fdfffff
 8009d90:	35afe535 	.word	0x35afe535
 8009d94:	3fe00000 	.word	0x3fe00000
 8009d98:	00000000 	.word	0x00000000
 8009d9c:	39500000 	.word	0x39500000
 8009da0:	0800cfd0 	.word	0x0800cfd0
 8009da4:	fffffc02 	.word	0xfffffc02
 8009da8:	7ff00000 	.word	0x7ff00000
 8009dac:	46cb      	mov	fp, r9
 8009dae:	d15f      	bne.n	8009e70 <_strtod_l+0x968>
 8009db0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009db4:	f1ba 0f00 	cmp.w	sl, #0
 8009db8:	d02a      	beq.n	8009e10 <_strtod_l+0x908>
 8009dba:	4aa7      	ldr	r2, [pc, #668]	; (800a058 <_strtod_l+0xb50>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d12b      	bne.n	8009e18 <_strtod_l+0x910>
 8009dc0:	9b04      	ldr	r3, [sp, #16]
 8009dc2:	4642      	mov	r2, r8
 8009dc4:	b1fb      	cbz	r3, 8009e06 <_strtod_l+0x8fe>
 8009dc6:	4ba5      	ldr	r3, [pc, #660]	; (800a05c <_strtod_l+0xb54>)
 8009dc8:	ea09 0303 	and.w	r3, r9, r3
 8009dcc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8009dd4:	d81a      	bhi.n	8009e0c <_strtod_l+0x904>
 8009dd6:	0d1b      	lsrs	r3, r3, #20
 8009dd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d119      	bne.n	8009e18 <_strtod_l+0x910>
 8009de4:	4b9e      	ldr	r3, [pc, #632]	; (800a060 <_strtod_l+0xb58>)
 8009de6:	459b      	cmp	fp, r3
 8009de8:	d102      	bne.n	8009df0 <_strtod_l+0x8e8>
 8009dea:	3201      	adds	r2, #1
 8009dec:	f43f adc8 	beq.w	8009980 <_strtod_l+0x478>
 8009df0:	4b9a      	ldr	r3, [pc, #616]	; (800a05c <_strtod_l+0xb54>)
 8009df2:	ea0b 0303 	and.w	r3, fp, r3
 8009df6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009dfa:	f04f 0800 	mov.w	r8, #0
 8009dfe:	9b04      	ldr	r3, [sp, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d188      	bne.n	8009d16 <_strtod_l+0x80e>
 8009e04:	e5c6      	b.n	8009994 <_strtod_l+0x48c>
 8009e06:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0a:	e7e9      	b.n	8009de0 <_strtod_l+0x8d8>
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	e7e7      	b.n	8009de0 <_strtod_l+0x8d8>
 8009e10:	ea53 0308 	orrs.w	r3, r3, r8
 8009e14:	f43f af6f 	beq.w	8009cf6 <_strtod_l+0x7ee>
 8009e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e1a:	b1cb      	cbz	r3, 8009e50 <_strtod_l+0x948>
 8009e1c:	ea13 0f0b 	tst.w	r3, fp
 8009e20:	d0ed      	beq.n	8009dfe <_strtod_l+0x8f6>
 8009e22:	9a04      	ldr	r2, [sp, #16]
 8009e24:	4640      	mov	r0, r8
 8009e26:	4649      	mov	r1, r9
 8009e28:	f1ba 0f00 	cmp.w	sl, #0
 8009e2c:	d014      	beq.n	8009e58 <_strtod_l+0x950>
 8009e2e:	f7ff fb51 	bl	80094d4 <sulp>
 8009e32:	ee38 7b00 	vadd.f64	d7, d8, d0
 8009e36:	ec59 8b17 	vmov	r8, r9, d7
 8009e3a:	e7e0      	b.n	8009dfe <_strtod_l+0x8f6>
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009e42:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009e46:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009e4a:	f04f 38ff 	mov.w	r8, #4294967295
 8009e4e:	e7d6      	b.n	8009dfe <_strtod_l+0x8f6>
 8009e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e52:	ea13 0f08 	tst.w	r3, r8
 8009e56:	e7e3      	b.n	8009e20 <_strtod_l+0x918>
 8009e58:	f7ff fb3c 	bl	80094d4 <sulp>
 8009e5c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009e60:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e68:	ec59 8b10 	vmov	r8, r9, d0
 8009e6c:	d1c7      	bne.n	8009dfe <_strtod_l+0x8f6>
 8009e6e:	e5f7      	b.n	8009a60 <_strtod_l+0x558>
 8009e70:	4631      	mov	r1, r6
 8009e72:	4628      	mov	r0, r5
 8009e74:	f001 ff68 	bl	800bd48 <__ratio>
 8009e78:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009e7c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e84:	d865      	bhi.n	8009f52 <_strtod_l+0xa4a>
 8009e86:	f1ba 0f00 	cmp.w	sl, #0
 8009e8a:	d042      	beq.n	8009f12 <_strtod_l+0xa0a>
 8009e8c:	4b75      	ldr	r3, [pc, #468]	; (800a064 <_strtod_l+0xb5c>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009e94:	4871      	ldr	r0, [pc, #452]	; (800a05c <_strtod_l+0xb54>)
 8009e96:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800a070 <_strtod_l+0xb68>
 8009e9a:	ea0b 0100 	and.w	r1, fp, r0
 8009e9e:	4561      	cmp	r1, ip
 8009ea0:	f040 808e 	bne.w	8009fc0 <_strtod_l+0xab8>
 8009ea4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009ea8:	ec49 8b10 	vmov	d0, r8, r9
 8009eac:	ec43 2b1c 	vmov	d12, r2, r3
 8009eb0:	910a      	str	r1, [sp, #40]	; 0x28
 8009eb2:	f001 fe71 	bl	800bb98 <__ulp>
 8009eb6:	ec49 8b1e 	vmov	d14, r8, r9
 8009eba:	4868      	ldr	r0, [pc, #416]	; (800a05c <_strtod_l+0xb54>)
 8009ebc:	eeac eb00 	vfma.f64	d14, d12, d0
 8009ec0:	ee1e 3a90 	vmov	r3, s29
 8009ec4:	4a68      	ldr	r2, [pc, #416]	; (800a068 <_strtod_l+0xb60>)
 8009ec6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ec8:	4018      	ands	r0, r3
 8009eca:	4290      	cmp	r0, r2
 8009ecc:	ec59 8b1e 	vmov	r8, r9, d14
 8009ed0:	d94e      	bls.n	8009f70 <_strtod_l+0xa68>
 8009ed2:	ee18 3a90 	vmov	r3, s17
 8009ed6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d104      	bne.n	8009ee8 <_strtod_l+0x9e0>
 8009ede:	ee18 3a10 	vmov	r3, s16
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	f43f ad4c 	beq.w	8009980 <_strtod_l+0x478>
 8009ee8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a060 <_strtod_l+0xb58>
 8009eec:	f04f 38ff 	mov.w	r8, #4294967295
 8009ef0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f001 fb1e 	bl	800b534 <_Bfree>
 8009ef8:	4639      	mov	r1, r7
 8009efa:	4620      	mov	r0, r4
 8009efc:	f001 fb1a 	bl	800b534 <_Bfree>
 8009f00:	4631      	mov	r1, r6
 8009f02:	4620      	mov	r0, r4
 8009f04:	f001 fb16 	bl	800b534 <_Bfree>
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f001 fb12 	bl	800b534 <_Bfree>
 8009f10:	e619      	b.n	8009b46 <_strtod_l+0x63e>
 8009f12:	f1b8 0f00 	cmp.w	r8, #0
 8009f16:	d112      	bne.n	8009f3e <_strtod_l+0xa36>
 8009f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f1c:	b9b3      	cbnz	r3, 8009f4c <_strtod_l+0xa44>
 8009f1e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009f22:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f2a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009f2e:	bf58      	it	pl
 8009f30:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8009f34:	eeb1 7b4d 	vneg.f64	d7, d13
 8009f38:	ec53 2b17 	vmov	r2, r3, d7
 8009f3c:	e7aa      	b.n	8009e94 <_strtod_l+0x98c>
 8009f3e:	f1b8 0f01 	cmp.w	r8, #1
 8009f42:	d103      	bne.n	8009f4c <_strtod_l+0xa44>
 8009f44:	f1b9 0f00 	cmp.w	r9, #0
 8009f48:	f43f ad8a 	beq.w	8009a60 <_strtod_l+0x558>
 8009f4c:	4b47      	ldr	r3, [pc, #284]	; (800a06c <_strtod_l+0xb64>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	e79e      	b.n	8009e90 <_strtod_l+0x988>
 8009f52:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009f56:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009f5a:	f1ba 0f00 	cmp.w	sl, #0
 8009f5e:	d104      	bne.n	8009f6a <_strtod_l+0xa62>
 8009f60:	eeb1 7b4d 	vneg.f64	d7, d13
 8009f64:	ec53 2b17 	vmov	r2, r3, d7
 8009f68:	e794      	b.n	8009e94 <_strtod_l+0x98c>
 8009f6a:	eeb0 7b4d 	vmov.f64	d7, d13
 8009f6e:	e7f9      	b.n	8009f64 <_strtod_l+0xa5c>
 8009f70:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009f74:	9b04      	ldr	r3, [sp, #16]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1ba      	bne.n	8009ef0 <_strtod_l+0x9e8>
 8009f7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f7e:	0d1b      	lsrs	r3, r3, #20
 8009f80:	051b      	lsls	r3, r3, #20
 8009f82:	4299      	cmp	r1, r3
 8009f84:	d1b4      	bne.n	8009ef0 <_strtod_l+0x9e8>
 8009f86:	ec51 0b1d 	vmov	r0, r1, d13
 8009f8a:	f7f6 fbd5 	bl	8000738 <__aeabi_d2lz>
 8009f8e:	f7f6 fb8d 	bl	80006ac <__aeabi_l2d>
 8009f92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f96:	ec41 0b17 	vmov	d7, r0, r1
 8009f9a:	ea43 0308 	orr.w	r3, r3, r8
 8009f9e:	ea53 030a 	orrs.w	r3, r3, sl
 8009fa2:	ee3d db47 	vsub.f64	d13, d13, d7
 8009fa6:	d03c      	beq.n	800a022 <_strtod_l+0xb1a>
 8009fa8:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb0:	f53f acf0 	bmi.w	8009994 <_strtod_l+0x48c>
 8009fb4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fbc:	dd98      	ble.n	8009ef0 <_strtod_l+0x9e8>
 8009fbe:	e4e9      	b.n	8009994 <_strtod_l+0x48c>
 8009fc0:	9804      	ldr	r0, [sp, #16]
 8009fc2:	b1f0      	cbz	r0, 800a002 <_strtod_l+0xafa>
 8009fc4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009fc8:	d81b      	bhi.n	800a002 <_strtod_l+0xafa>
 8009fca:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a050 <_strtod_l+0xb48>
 8009fce:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd6:	d811      	bhi.n	8009ffc <_strtod_l+0xaf4>
 8009fd8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009fdc:	ee1d 3a10 	vmov	r3, s26
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	bf38      	it	cc
 8009fe4:	2301      	movcc	r3, #1
 8009fe6:	ee0d 3a10 	vmov	s26, r3
 8009fea:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009fee:	f1ba 0f00 	cmp.w	sl, #0
 8009ff2:	d113      	bne.n	800a01c <_strtod_l+0xb14>
 8009ff4:	eeb1 7b4d 	vneg.f64	d7, d13
 8009ff8:	ec53 2b17 	vmov	r2, r3, d7
 8009ffc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800a000:	1a43      	subs	r3, r0, r1
 800a002:	eeb0 0b48 	vmov.f64	d0, d8
 800a006:	ec43 2b1c 	vmov	d12, r2, r3
 800a00a:	910a      	str	r1, [sp, #40]	; 0x28
 800a00c:	f001 fdc4 	bl	800bb98 <__ulp>
 800a010:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a012:	eeac 8b00 	vfma.f64	d8, d12, d0
 800a016:	ec59 8b18 	vmov	r8, r9, d8
 800a01a:	e7ab      	b.n	8009f74 <_strtod_l+0xa6c>
 800a01c:	eeb0 7b4d 	vmov.f64	d7, d13
 800a020:	e7ea      	b.n	8009ff8 <_strtod_l+0xaf0>
 800a022:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800a026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02a:	f57f af61 	bpl.w	8009ef0 <_strtod_l+0x9e8>
 800a02e:	e4b1      	b.n	8009994 <_strtod_l+0x48c>
 800a030:	2300      	movs	r3, #0
 800a032:	9308      	str	r3, [sp, #32]
 800a034:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a038:	6013      	str	r3, [r2, #0]
 800a03a:	f7ff baad 	b.w	8009598 <_strtod_l+0x90>
 800a03e:	2a65      	cmp	r2, #101	; 0x65
 800a040:	f43f ab9f 	beq.w	8009782 <_strtod_l+0x27a>
 800a044:	2a45      	cmp	r2, #69	; 0x45
 800a046:	f43f ab9c 	beq.w	8009782 <_strtod_l+0x27a>
 800a04a:	2101      	movs	r1, #1
 800a04c:	f7ff bbd4 	b.w	80097f8 <_strtod_l+0x2f0>
 800a050:	ffc00000 	.word	0xffc00000
 800a054:	41dfffff 	.word	0x41dfffff
 800a058:	000fffff 	.word	0x000fffff
 800a05c:	7ff00000 	.word	0x7ff00000
 800a060:	7fefffff 	.word	0x7fefffff
 800a064:	3ff00000 	.word	0x3ff00000
 800a068:	7c9fffff 	.word	0x7c9fffff
 800a06c:	bff00000 	.word	0xbff00000
 800a070:	7fe00000 	.word	0x7fe00000

0800a074 <_strtod_r>:
 800a074:	4b01      	ldr	r3, [pc, #4]	; (800a07c <_strtod_r+0x8>)
 800a076:	f7ff ba47 	b.w	8009508 <_strtod_l>
 800a07a:	bf00      	nop
 800a07c:	24000090 	.word	0x24000090

0800a080 <_strtol_l.constprop.0>:
 800a080:	2b01      	cmp	r3, #1
 800a082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a086:	d001      	beq.n	800a08c <_strtol_l.constprop.0+0xc>
 800a088:	2b24      	cmp	r3, #36	; 0x24
 800a08a:	d906      	bls.n	800a09a <_strtol_l.constprop.0+0x1a>
 800a08c:	f7fe fb82 	bl	8008794 <__errno>
 800a090:	2316      	movs	r3, #22
 800a092:	6003      	str	r3, [r0, #0]
 800a094:	2000      	movs	r0, #0
 800a096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a180 <_strtol_l.constprop.0+0x100>
 800a09e:	460d      	mov	r5, r1
 800a0a0:	462e      	mov	r6, r5
 800a0a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a0aa:	f017 0708 	ands.w	r7, r7, #8
 800a0ae:	d1f7      	bne.n	800a0a0 <_strtol_l.constprop.0+0x20>
 800a0b0:	2c2d      	cmp	r4, #45	; 0x2d
 800a0b2:	d132      	bne.n	800a11a <_strtol_l.constprop.0+0x9a>
 800a0b4:	782c      	ldrb	r4, [r5, #0]
 800a0b6:	2701      	movs	r7, #1
 800a0b8:	1cb5      	adds	r5, r6, #2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d05b      	beq.n	800a176 <_strtol_l.constprop.0+0xf6>
 800a0be:	2b10      	cmp	r3, #16
 800a0c0:	d109      	bne.n	800a0d6 <_strtol_l.constprop.0+0x56>
 800a0c2:	2c30      	cmp	r4, #48	; 0x30
 800a0c4:	d107      	bne.n	800a0d6 <_strtol_l.constprop.0+0x56>
 800a0c6:	782c      	ldrb	r4, [r5, #0]
 800a0c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a0cc:	2c58      	cmp	r4, #88	; 0x58
 800a0ce:	d14d      	bne.n	800a16c <_strtol_l.constprop.0+0xec>
 800a0d0:	786c      	ldrb	r4, [r5, #1]
 800a0d2:	2310      	movs	r3, #16
 800a0d4:	3502      	adds	r5, #2
 800a0d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a0da:	f108 38ff 	add.w	r8, r8, #4294967295
 800a0de:	f04f 0c00 	mov.w	ip, #0
 800a0e2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a0e6:	4666      	mov	r6, ip
 800a0e8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a0ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a0f0:	f1be 0f09 	cmp.w	lr, #9
 800a0f4:	d816      	bhi.n	800a124 <_strtol_l.constprop.0+0xa4>
 800a0f6:	4674      	mov	r4, lr
 800a0f8:	42a3      	cmp	r3, r4
 800a0fa:	dd24      	ble.n	800a146 <_strtol_l.constprop.0+0xc6>
 800a0fc:	f1bc 0f00 	cmp.w	ip, #0
 800a100:	db1e      	blt.n	800a140 <_strtol_l.constprop.0+0xc0>
 800a102:	45b1      	cmp	r9, r6
 800a104:	d31c      	bcc.n	800a140 <_strtol_l.constprop.0+0xc0>
 800a106:	d101      	bne.n	800a10c <_strtol_l.constprop.0+0x8c>
 800a108:	45a2      	cmp	sl, r4
 800a10a:	db19      	blt.n	800a140 <_strtol_l.constprop.0+0xc0>
 800a10c:	fb06 4603 	mla	r6, r6, r3, r4
 800a110:	f04f 0c01 	mov.w	ip, #1
 800a114:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a118:	e7e8      	b.n	800a0ec <_strtol_l.constprop.0+0x6c>
 800a11a:	2c2b      	cmp	r4, #43	; 0x2b
 800a11c:	bf04      	itt	eq
 800a11e:	782c      	ldrbeq	r4, [r5, #0]
 800a120:	1cb5      	addeq	r5, r6, #2
 800a122:	e7ca      	b.n	800a0ba <_strtol_l.constprop.0+0x3a>
 800a124:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a128:	f1be 0f19 	cmp.w	lr, #25
 800a12c:	d801      	bhi.n	800a132 <_strtol_l.constprop.0+0xb2>
 800a12e:	3c37      	subs	r4, #55	; 0x37
 800a130:	e7e2      	b.n	800a0f8 <_strtol_l.constprop.0+0x78>
 800a132:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a136:	f1be 0f19 	cmp.w	lr, #25
 800a13a:	d804      	bhi.n	800a146 <_strtol_l.constprop.0+0xc6>
 800a13c:	3c57      	subs	r4, #87	; 0x57
 800a13e:	e7db      	b.n	800a0f8 <_strtol_l.constprop.0+0x78>
 800a140:	f04f 3cff 	mov.w	ip, #4294967295
 800a144:	e7e6      	b.n	800a114 <_strtol_l.constprop.0+0x94>
 800a146:	f1bc 0f00 	cmp.w	ip, #0
 800a14a:	da05      	bge.n	800a158 <_strtol_l.constprop.0+0xd8>
 800a14c:	2322      	movs	r3, #34	; 0x22
 800a14e:	6003      	str	r3, [r0, #0]
 800a150:	4646      	mov	r6, r8
 800a152:	b942      	cbnz	r2, 800a166 <_strtol_l.constprop.0+0xe6>
 800a154:	4630      	mov	r0, r6
 800a156:	e79e      	b.n	800a096 <_strtol_l.constprop.0+0x16>
 800a158:	b107      	cbz	r7, 800a15c <_strtol_l.constprop.0+0xdc>
 800a15a:	4276      	negs	r6, r6
 800a15c:	2a00      	cmp	r2, #0
 800a15e:	d0f9      	beq.n	800a154 <_strtol_l.constprop.0+0xd4>
 800a160:	f1bc 0f00 	cmp.w	ip, #0
 800a164:	d000      	beq.n	800a168 <_strtol_l.constprop.0+0xe8>
 800a166:	1e69      	subs	r1, r5, #1
 800a168:	6011      	str	r1, [r2, #0]
 800a16a:	e7f3      	b.n	800a154 <_strtol_l.constprop.0+0xd4>
 800a16c:	2430      	movs	r4, #48	; 0x30
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1b1      	bne.n	800a0d6 <_strtol_l.constprop.0+0x56>
 800a172:	2308      	movs	r3, #8
 800a174:	e7af      	b.n	800a0d6 <_strtol_l.constprop.0+0x56>
 800a176:	2c30      	cmp	r4, #48	; 0x30
 800a178:	d0a5      	beq.n	800a0c6 <_strtol_l.constprop.0+0x46>
 800a17a:	230a      	movs	r3, #10
 800a17c:	e7ab      	b.n	800a0d6 <_strtol_l.constprop.0+0x56>
 800a17e:	bf00      	nop
 800a180:	0800cff9 	.word	0x0800cff9

0800a184 <_strtol_r>:
 800a184:	f7ff bf7c 	b.w	800a080 <_strtol_l.constprop.0>

0800a188 <quorem>:
 800a188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	6903      	ldr	r3, [r0, #16]
 800a18e:	690c      	ldr	r4, [r1, #16]
 800a190:	42a3      	cmp	r3, r4
 800a192:	4607      	mov	r7, r0
 800a194:	f2c0 8081 	blt.w	800a29a <quorem+0x112>
 800a198:	3c01      	subs	r4, #1
 800a19a:	f101 0814 	add.w	r8, r1, #20
 800a19e:	f100 0514 	add.w	r5, r0, #20
 800a1a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1a6:	9301      	str	r3, [sp, #4]
 800a1a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1c0:	d331      	bcc.n	800a226 <quorem+0x9e>
 800a1c2:	f04f 0e00 	mov.w	lr, #0
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	46ac      	mov	ip, r5
 800a1ca:	46f2      	mov	sl, lr
 800a1cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1d0:	b293      	uxth	r3, r2
 800a1d2:	fb06 e303 	mla	r3, r6, r3, lr
 800a1d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	ebaa 0303 	sub.w	r3, sl, r3
 800a1e0:	f8dc a000 	ldr.w	sl, [ip]
 800a1e4:	0c12      	lsrs	r2, r2, #16
 800a1e6:	fa13 f38a 	uxtah	r3, r3, sl
 800a1ea:	fb06 e202 	mla	r2, r6, r2, lr
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	9b00      	ldr	r3, [sp, #0]
 800a1f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1f6:	b292      	uxth	r2, r2
 800a1f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a1fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a200:	f8bd 3000 	ldrh.w	r3, [sp]
 800a204:	4581      	cmp	r9, r0
 800a206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a20a:	f84c 3b04 	str.w	r3, [ip], #4
 800a20e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a212:	d2db      	bcs.n	800a1cc <quorem+0x44>
 800a214:	f855 300b 	ldr.w	r3, [r5, fp]
 800a218:	b92b      	cbnz	r3, 800a226 <quorem+0x9e>
 800a21a:	9b01      	ldr	r3, [sp, #4]
 800a21c:	3b04      	subs	r3, #4
 800a21e:	429d      	cmp	r5, r3
 800a220:	461a      	mov	r2, r3
 800a222:	d32e      	bcc.n	800a282 <quorem+0xfa>
 800a224:	613c      	str	r4, [r7, #16]
 800a226:	4638      	mov	r0, r7
 800a228:	f001 fc10 	bl	800ba4c <__mcmp>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	db24      	blt.n	800a27a <quorem+0xf2>
 800a230:	3601      	adds	r6, #1
 800a232:	4628      	mov	r0, r5
 800a234:	f04f 0c00 	mov.w	ip, #0
 800a238:	f858 2b04 	ldr.w	r2, [r8], #4
 800a23c:	f8d0 e000 	ldr.w	lr, [r0]
 800a240:	b293      	uxth	r3, r2
 800a242:	ebac 0303 	sub.w	r3, ip, r3
 800a246:	0c12      	lsrs	r2, r2, #16
 800a248:	fa13 f38e 	uxtah	r3, r3, lr
 800a24c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a250:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a254:	b29b      	uxth	r3, r3
 800a256:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a25a:	45c1      	cmp	r9, r8
 800a25c:	f840 3b04 	str.w	r3, [r0], #4
 800a260:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a264:	d2e8      	bcs.n	800a238 <quorem+0xb0>
 800a266:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a26a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a26e:	b922      	cbnz	r2, 800a27a <quorem+0xf2>
 800a270:	3b04      	subs	r3, #4
 800a272:	429d      	cmp	r5, r3
 800a274:	461a      	mov	r2, r3
 800a276:	d30a      	bcc.n	800a28e <quorem+0x106>
 800a278:	613c      	str	r4, [r7, #16]
 800a27a:	4630      	mov	r0, r6
 800a27c:	b003      	add	sp, #12
 800a27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a282:	6812      	ldr	r2, [r2, #0]
 800a284:	3b04      	subs	r3, #4
 800a286:	2a00      	cmp	r2, #0
 800a288:	d1cc      	bne.n	800a224 <quorem+0x9c>
 800a28a:	3c01      	subs	r4, #1
 800a28c:	e7c7      	b.n	800a21e <quorem+0x96>
 800a28e:	6812      	ldr	r2, [r2, #0]
 800a290:	3b04      	subs	r3, #4
 800a292:	2a00      	cmp	r2, #0
 800a294:	d1f0      	bne.n	800a278 <quorem+0xf0>
 800a296:	3c01      	subs	r4, #1
 800a298:	e7eb      	b.n	800a272 <quorem+0xea>
 800a29a:	2000      	movs	r0, #0
 800a29c:	e7ee      	b.n	800a27c <quorem+0xf4>
	...

0800a2a0 <_dtoa_r>:
 800a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	ed2d 8b02 	vpush	{d8}
 800a2a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2aa:	b091      	sub	sp, #68	; 0x44
 800a2ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a2b0:	ec59 8b10 	vmov	r8, r9, d0
 800a2b4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a2b6:	9106      	str	r1, [sp, #24]
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	9208      	str	r2, [sp, #32]
 800a2bc:	930c      	str	r3, [sp, #48]	; 0x30
 800a2be:	b975      	cbnz	r5, 800a2de <_dtoa_r+0x3e>
 800a2c0:	2010      	movs	r0, #16
 800a2c2:	f001 f8cf 	bl	800b464 <malloc>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	6270      	str	r0, [r6, #36]	; 0x24
 800a2ca:	b920      	cbnz	r0, 800a2d6 <_dtoa_r+0x36>
 800a2cc:	4baa      	ldr	r3, [pc, #680]	; (800a578 <_dtoa_r+0x2d8>)
 800a2ce:	21ea      	movs	r1, #234	; 0xea
 800a2d0:	48aa      	ldr	r0, [pc, #680]	; (800a57c <_dtoa_r+0x2dc>)
 800a2d2:	f002 f83b 	bl	800c34c <__assert_func>
 800a2d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2da:	6005      	str	r5, [r0, #0]
 800a2dc:	60c5      	str	r5, [r0, #12]
 800a2de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a2e0:	6819      	ldr	r1, [r3, #0]
 800a2e2:	b151      	cbz	r1, 800a2fa <_dtoa_r+0x5a>
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	604a      	str	r2, [r1, #4]
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	4093      	lsls	r3, r2
 800a2ec:	608b      	str	r3, [r1, #8]
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f001 f920 	bl	800b534 <_Bfree>
 800a2f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	f1b9 0300 	subs.w	r3, r9, #0
 800a2fe:	bfbb      	ittet	lt
 800a300:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a304:	9303      	strlt	r3, [sp, #12]
 800a306:	2300      	movge	r3, #0
 800a308:	2201      	movlt	r2, #1
 800a30a:	bfac      	ite	ge
 800a30c:	6023      	strge	r3, [r4, #0]
 800a30e:	6022      	strlt	r2, [r4, #0]
 800a310:	4b9b      	ldr	r3, [pc, #620]	; (800a580 <_dtoa_r+0x2e0>)
 800a312:	9c03      	ldr	r4, [sp, #12]
 800a314:	43a3      	bics	r3, r4
 800a316:	d11c      	bne.n	800a352 <_dtoa_r+0xb2>
 800a318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a31a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a324:	ea53 0308 	orrs.w	r3, r3, r8
 800a328:	f000 84fd 	beq.w	800ad26 <_dtoa_r+0xa86>
 800a32c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a32e:	b963      	cbnz	r3, 800a34a <_dtoa_r+0xaa>
 800a330:	4b94      	ldr	r3, [pc, #592]	; (800a584 <_dtoa_r+0x2e4>)
 800a332:	e01f      	b.n	800a374 <_dtoa_r+0xd4>
 800a334:	4b94      	ldr	r3, [pc, #592]	; (800a588 <_dtoa_r+0x2e8>)
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	3308      	adds	r3, #8
 800a33a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	9801      	ldr	r0, [sp, #4]
 800a340:	b011      	add	sp, #68	; 0x44
 800a342:	ecbd 8b02 	vpop	{d8}
 800a346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a34a:	4b8e      	ldr	r3, [pc, #568]	; (800a584 <_dtoa_r+0x2e4>)
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	3303      	adds	r3, #3
 800a350:	e7f3      	b.n	800a33a <_dtoa_r+0x9a>
 800a352:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a356:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35e:	d10b      	bne.n	800a378 <_dtoa_r+0xd8>
 800a360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a362:	2301      	movs	r3, #1
 800a364:	6013      	str	r3, [r2, #0]
 800a366:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f000 84d9 	beq.w	800ad20 <_dtoa_r+0xa80>
 800a36e:	4887      	ldr	r0, [pc, #540]	; (800a58c <_dtoa_r+0x2ec>)
 800a370:	6018      	str	r0, [r3, #0]
 800a372:	1e43      	subs	r3, r0, #1
 800a374:	9301      	str	r3, [sp, #4]
 800a376:	e7e2      	b.n	800a33e <_dtoa_r+0x9e>
 800a378:	a90f      	add	r1, sp, #60	; 0x3c
 800a37a:	aa0e      	add	r2, sp, #56	; 0x38
 800a37c:	4630      	mov	r0, r6
 800a37e:	eeb0 0b48 	vmov.f64	d0, d8
 800a382:	f001 fc85 	bl	800bc90 <__d2b>
 800a386:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a38a:	4605      	mov	r5, r0
 800a38c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a38e:	2900      	cmp	r1, #0
 800a390:	d046      	beq.n	800a420 <_dtoa_r+0x180>
 800a392:	ee18 4a90 	vmov	r4, s17
 800a396:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a39a:	ec53 2b18 	vmov	r2, r3, d8
 800a39e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a3a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a3a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a3aa:	2400      	movs	r4, #0
 800a3ac:	ec43 2b16 	vmov	d6, r2, r3
 800a3b0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a3b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a560 <_dtoa_r+0x2c0>
 800a3b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a3bc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a568 <_dtoa_r+0x2c8>
 800a3c0:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a3c4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a570 <_dtoa_r+0x2d0>
 800a3c8:	ee07 1a90 	vmov	s15, r1
 800a3cc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a3d0:	eeb0 7b46 	vmov.f64	d7, d6
 800a3d4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a3d8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a3dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e4:	ee16 ba90 	vmov	fp, s13
 800a3e8:	940a      	str	r4, [sp, #40]	; 0x28
 800a3ea:	d508      	bpl.n	800a3fe <_dtoa_r+0x15e>
 800a3ec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a3f0:	eeb4 6b47 	vcmp.f64	d6, d7
 800a3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f8:	bf18      	it	ne
 800a3fa:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a3fe:	f1bb 0f16 	cmp.w	fp, #22
 800a402:	d82f      	bhi.n	800a464 <_dtoa_r+0x1c4>
 800a404:	4b62      	ldr	r3, [pc, #392]	; (800a590 <_dtoa_r+0x2f0>)
 800a406:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a40a:	ed93 7b00 	vldr	d7, [r3]
 800a40e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a416:	d501      	bpl.n	800a41c <_dtoa_r+0x17c>
 800a418:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a41c:	2300      	movs	r3, #0
 800a41e:	e022      	b.n	800a466 <_dtoa_r+0x1c6>
 800a420:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a422:	4401      	add	r1, r0
 800a424:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a428:	2b20      	cmp	r3, #32
 800a42a:	bfc1      	itttt	gt
 800a42c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a430:	fa04 f303 	lslgt.w	r3, r4, r3
 800a434:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a438:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a43c:	bfd6      	itet	le
 800a43e:	f1c3 0320 	rsble	r3, r3, #32
 800a442:	ea43 0808 	orrgt.w	r8, r3, r8
 800a446:	fa08 f803 	lslle.w	r8, r8, r3
 800a44a:	ee07 8a90 	vmov	s15, r8
 800a44e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a452:	3901      	subs	r1, #1
 800a454:	ee17 4a90 	vmov	r4, s15
 800a458:	ec53 2b17 	vmov	r2, r3, d7
 800a45c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a460:	2401      	movs	r4, #1
 800a462:	e7a3      	b.n	800a3ac <_dtoa_r+0x10c>
 800a464:	2301      	movs	r3, #1
 800a466:	930b      	str	r3, [sp, #44]	; 0x2c
 800a468:	1a43      	subs	r3, r0, r1
 800a46a:	1e5a      	subs	r2, r3, #1
 800a46c:	bf45      	ittet	mi
 800a46e:	f1c3 0301 	rsbmi	r3, r3, #1
 800a472:	9304      	strmi	r3, [sp, #16]
 800a474:	2300      	movpl	r3, #0
 800a476:	2300      	movmi	r3, #0
 800a478:	9205      	str	r2, [sp, #20]
 800a47a:	bf54      	ite	pl
 800a47c:	9304      	strpl	r3, [sp, #16]
 800a47e:	9305      	strmi	r3, [sp, #20]
 800a480:	f1bb 0f00 	cmp.w	fp, #0
 800a484:	db18      	blt.n	800a4b8 <_dtoa_r+0x218>
 800a486:	9b05      	ldr	r3, [sp, #20]
 800a488:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a48c:	445b      	add	r3, fp
 800a48e:	9305      	str	r3, [sp, #20]
 800a490:	2300      	movs	r3, #0
 800a492:	9a06      	ldr	r2, [sp, #24]
 800a494:	2a09      	cmp	r2, #9
 800a496:	d849      	bhi.n	800a52c <_dtoa_r+0x28c>
 800a498:	2a05      	cmp	r2, #5
 800a49a:	bfc4      	itt	gt
 800a49c:	3a04      	subgt	r2, #4
 800a49e:	9206      	strgt	r2, [sp, #24]
 800a4a0:	9a06      	ldr	r2, [sp, #24]
 800a4a2:	f1a2 0202 	sub.w	r2, r2, #2
 800a4a6:	bfcc      	ite	gt
 800a4a8:	2400      	movgt	r4, #0
 800a4aa:	2401      	movle	r4, #1
 800a4ac:	2a03      	cmp	r2, #3
 800a4ae:	d848      	bhi.n	800a542 <_dtoa_r+0x2a2>
 800a4b0:	e8df f002 	tbb	[pc, r2]
 800a4b4:	3a2c2e0b 	.word	0x3a2c2e0b
 800a4b8:	9b04      	ldr	r3, [sp, #16]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	eba3 030b 	sub.w	r3, r3, fp
 800a4c0:	9304      	str	r3, [sp, #16]
 800a4c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a4c4:	f1cb 0300 	rsb	r3, fp, #0
 800a4c8:	e7e3      	b.n	800a492 <_dtoa_r+0x1f2>
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	9207      	str	r2, [sp, #28]
 800a4ce:	9a08      	ldr	r2, [sp, #32]
 800a4d0:	2a00      	cmp	r2, #0
 800a4d2:	dc39      	bgt.n	800a548 <_dtoa_r+0x2a8>
 800a4d4:	f04f 0a01 	mov.w	sl, #1
 800a4d8:	46d1      	mov	r9, sl
 800a4da:	4652      	mov	r2, sl
 800a4dc:	f8cd a020 	str.w	sl, [sp, #32]
 800a4e0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	6079      	str	r1, [r7, #4]
 800a4e6:	2004      	movs	r0, #4
 800a4e8:	f100 0c14 	add.w	ip, r0, #20
 800a4ec:	4594      	cmp	ip, r2
 800a4ee:	6879      	ldr	r1, [r7, #4]
 800a4f0:	d92f      	bls.n	800a552 <_dtoa_r+0x2b2>
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	930d      	str	r3, [sp, #52]	; 0x34
 800a4f6:	f000 ffdd 	bl	800b4b4 <_Balloc>
 800a4fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4fc:	9001      	str	r0, [sp, #4]
 800a4fe:	4602      	mov	r2, r0
 800a500:	2800      	cmp	r0, #0
 800a502:	d149      	bne.n	800a598 <_dtoa_r+0x2f8>
 800a504:	4b23      	ldr	r3, [pc, #140]	; (800a594 <_dtoa_r+0x2f4>)
 800a506:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a50a:	e6e1      	b.n	800a2d0 <_dtoa_r+0x30>
 800a50c:	2201      	movs	r2, #1
 800a50e:	e7dd      	b.n	800a4cc <_dtoa_r+0x22c>
 800a510:	2200      	movs	r2, #0
 800a512:	9207      	str	r2, [sp, #28]
 800a514:	9a08      	ldr	r2, [sp, #32]
 800a516:	eb0b 0a02 	add.w	sl, fp, r2
 800a51a:	f10a 0901 	add.w	r9, sl, #1
 800a51e:	464a      	mov	r2, r9
 800a520:	2a01      	cmp	r2, #1
 800a522:	bfb8      	it	lt
 800a524:	2201      	movlt	r2, #1
 800a526:	e7db      	b.n	800a4e0 <_dtoa_r+0x240>
 800a528:	2201      	movs	r2, #1
 800a52a:	e7f2      	b.n	800a512 <_dtoa_r+0x272>
 800a52c:	2401      	movs	r4, #1
 800a52e:	2200      	movs	r2, #0
 800a530:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a534:	f04f 3aff 	mov.w	sl, #4294967295
 800a538:	2100      	movs	r1, #0
 800a53a:	46d1      	mov	r9, sl
 800a53c:	2212      	movs	r2, #18
 800a53e:	9108      	str	r1, [sp, #32]
 800a540:	e7ce      	b.n	800a4e0 <_dtoa_r+0x240>
 800a542:	2201      	movs	r2, #1
 800a544:	9207      	str	r2, [sp, #28]
 800a546:	e7f5      	b.n	800a534 <_dtoa_r+0x294>
 800a548:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a54c:	46d1      	mov	r9, sl
 800a54e:	4652      	mov	r2, sl
 800a550:	e7c6      	b.n	800a4e0 <_dtoa_r+0x240>
 800a552:	3101      	adds	r1, #1
 800a554:	6079      	str	r1, [r7, #4]
 800a556:	0040      	lsls	r0, r0, #1
 800a558:	e7c6      	b.n	800a4e8 <_dtoa_r+0x248>
 800a55a:	bf00      	nop
 800a55c:	f3af 8000 	nop.w
 800a560:	636f4361 	.word	0x636f4361
 800a564:	3fd287a7 	.word	0x3fd287a7
 800a568:	8b60c8b3 	.word	0x8b60c8b3
 800a56c:	3fc68a28 	.word	0x3fc68a28
 800a570:	509f79fb 	.word	0x509f79fb
 800a574:	3fd34413 	.word	0x3fd34413
 800a578:	0800d106 	.word	0x0800d106
 800a57c:	0800d11d 	.word	0x0800d11d
 800a580:	7ff00000 	.word	0x7ff00000
 800a584:	0800d102 	.word	0x0800d102
 800a588:	0800d0f9 	.word	0x0800d0f9
 800a58c:	0800cf79 	.word	0x0800cf79
 800a590:	0800d288 	.word	0x0800d288
 800a594:	0800d178 	.word	0x0800d178
 800a598:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a59a:	9901      	ldr	r1, [sp, #4]
 800a59c:	6011      	str	r1, [r2, #0]
 800a59e:	f1b9 0f0e 	cmp.w	r9, #14
 800a5a2:	d86c      	bhi.n	800a67e <_dtoa_r+0x3de>
 800a5a4:	2c00      	cmp	r4, #0
 800a5a6:	d06a      	beq.n	800a67e <_dtoa_r+0x3de>
 800a5a8:	f1bb 0f00 	cmp.w	fp, #0
 800a5ac:	f340 80a0 	ble.w	800a6f0 <_dtoa_r+0x450>
 800a5b0:	49c1      	ldr	r1, [pc, #772]	; (800a8b8 <_dtoa_r+0x618>)
 800a5b2:	f00b 020f 	and.w	r2, fp, #15
 800a5b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a5ba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a5be:	ed92 7b00 	vldr	d7, [r2]
 800a5c2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a5c6:	f000 8087 	beq.w	800a6d8 <_dtoa_r+0x438>
 800a5ca:	4abc      	ldr	r2, [pc, #752]	; (800a8bc <_dtoa_r+0x61c>)
 800a5cc:	ed92 6b08 	vldr	d6, [r2, #32]
 800a5d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a5d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a5d8:	f001 010f 	and.w	r1, r1, #15
 800a5dc:	2203      	movs	r2, #3
 800a5de:	48b7      	ldr	r0, [pc, #732]	; (800a8bc <_dtoa_r+0x61c>)
 800a5e0:	2900      	cmp	r1, #0
 800a5e2:	d17b      	bne.n	800a6dc <_dtoa_r+0x43c>
 800a5e4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a5e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a5ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5f2:	2900      	cmp	r1, #0
 800a5f4:	f000 80a2 	beq.w	800a73c <_dtoa_r+0x49c>
 800a5f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a5fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a600:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a608:	f140 8098 	bpl.w	800a73c <_dtoa_r+0x49c>
 800a60c:	f1b9 0f00 	cmp.w	r9, #0
 800a610:	f000 8094 	beq.w	800a73c <_dtoa_r+0x49c>
 800a614:	f1ba 0f00 	cmp.w	sl, #0
 800a618:	dd2f      	ble.n	800a67a <_dtoa_r+0x3da>
 800a61a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a61e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a622:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a626:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a62a:	3201      	adds	r2, #1
 800a62c:	4650      	mov	r0, sl
 800a62e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a632:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a636:	ee07 2a90 	vmov	s15, r2
 800a63a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a63e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a642:	ee15 4a90 	vmov	r4, s11
 800a646:	ec52 1b15 	vmov	r1, r2, d5
 800a64a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a64e:	2800      	cmp	r0, #0
 800a650:	d177      	bne.n	800a742 <_dtoa_r+0x4a2>
 800a652:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a656:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a65a:	ec42 1b17 	vmov	d7, r1, r2
 800a65e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a666:	f300 8263 	bgt.w	800ab30 <_dtoa_r+0x890>
 800a66a:	eeb1 7b47 	vneg.f64	d7, d7
 800a66e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a676:	f100 8258 	bmi.w	800ab2a <_dtoa_r+0x88a>
 800a67a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a67e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a680:	2a00      	cmp	r2, #0
 800a682:	f2c0 811d 	blt.w	800a8c0 <_dtoa_r+0x620>
 800a686:	f1bb 0f0e 	cmp.w	fp, #14
 800a68a:	f300 8119 	bgt.w	800a8c0 <_dtoa_r+0x620>
 800a68e:	4b8a      	ldr	r3, [pc, #552]	; (800a8b8 <_dtoa_r+0x618>)
 800a690:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a694:	ed93 6b00 	vldr	d6, [r3]
 800a698:	9b08      	ldr	r3, [sp, #32]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f280 80b7 	bge.w	800a80e <_dtoa_r+0x56e>
 800a6a0:	f1b9 0f00 	cmp.w	r9, #0
 800a6a4:	f300 80b3 	bgt.w	800a80e <_dtoa_r+0x56e>
 800a6a8:	f040 823f 	bne.w	800ab2a <_dtoa_r+0x88a>
 800a6ac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a6b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a6b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c0:	464c      	mov	r4, r9
 800a6c2:	464f      	mov	r7, r9
 800a6c4:	f280 8215 	bge.w	800aaf2 <_dtoa_r+0x852>
 800a6c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a6cc:	2331      	movs	r3, #49	; 0x31
 800a6ce:	f808 3b01 	strb.w	r3, [r8], #1
 800a6d2:	f10b 0b01 	add.w	fp, fp, #1
 800a6d6:	e211      	b.n	800aafc <_dtoa_r+0x85c>
 800a6d8:	2202      	movs	r2, #2
 800a6da:	e780      	b.n	800a5de <_dtoa_r+0x33e>
 800a6dc:	07cc      	lsls	r4, r1, #31
 800a6de:	d504      	bpl.n	800a6ea <_dtoa_r+0x44a>
 800a6e0:	ed90 6b00 	vldr	d6, [r0]
 800a6e4:	3201      	adds	r2, #1
 800a6e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a6ea:	1049      	asrs	r1, r1, #1
 800a6ec:	3008      	adds	r0, #8
 800a6ee:	e777      	b.n	800a5e0 <_dtoa_r+0x340>
 800a6f0:	d022      	beq.n	800a738 <_dtoa_r+0x498>
 800a6f2:	f1cb 0100 	rsb	r1, fp, #0
 800a6f6:	4a70      	ldr	r2, [pc, #448]	; (800a8b8 <_dtoa_r+0x618>)
 800a6f8:	f001 000f 	and.w	r0, r1, #15
 800a6fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a700:	ed92 7b00 	vldr	d7, [r2]
 800a704:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a708:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a70c:	486b      	ldr	r0, [pc, #428]	; (800a8bc <_dtoa_r+0x61c>)
 800a70e:	1109      	asrs	r1, r1, #4
 800a710:	2400      	movs	r4, #0
 800a712:	2202      	movs	r2, #2
 800a714:	b929      	cbnz	r1, 800a722 <_dtoa_r+0x482>
 800a716:	2c00      	cmp	r4, #0
 800a718:	f43f af6a 	beq.w	800a5f0 <_dtoa_r+0x350>
 800a71c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a720:	e766      	b.n	800a5f0 <_dtoa_r+0x350>
 800a722:	07cf      	lsls	r7, r1, #31
 800a724:	d505      	bpl.n	800a732 <_dtoa_r+0x492>
 800a726:	ed90 6b00 	vldr	d6, [r0]
 800a72a:	3201      	adds	r2, #1
 800a72c:	2401      	movs	r4, #1
 800a72e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a732:	1049      	asrs	r1, r1, #1
 800a734:	3008      	adds	r0, #8
 800a736:	e7ed      	b.n	800a714 <_dtoa_r+0x474>
 800a738:	2202      	movs	r2, #2
 800a73a:	e759      	b.n	800a5f0 <_dtoa_r+0x350>
 800a73c:	465f      	mov	r7, fp
 800a73e:	4648      	mov	r0, r9
 800a740:	e775      	b.n	800a62e <_dtoa_r+0x38e>
 800a742:	ec42 1b17 	vmov	d7, r1, r2
 800a746:	4a5c      	ldr	r2, [pc, #368]	; (800a8b8 <_dtoa_r+0x618>)
 800a748:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a74c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a750:	9a01      	ldr	r2, [sp, #4]
 800a752:	1814      	adds	r4, r2, r0
 800a754:	9a07      	ldr	r2, [sp, #28]
 800a756:	b352      	cbz	r2, 800a7ae <_dtoa_r+0x50e>
 800a758:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a75c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a760:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a764:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a768:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a76c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a770:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a774:	ee14 2a90 	vmov	r2, s9
 800a778:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a77c:	3230      	adds	r2, #48	; 0x30
 800a77e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a782:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a78a:	f808 2b01 	strb.w	r2, [r8], #1
 800a78e:	d439      	bmi.n	800a804 <_dtoa_r+0x564>
 800a790:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a794:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a79c:	d472      	bmi.n	800a884 <_dtoa_r+0x5e4>
 800a79e:	45a0      	cmp	r8, r4
 800a7a0:	f43f af6b 	beq.w	800a67a <_dtoa_r+0x3da>
 800a7a4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a7a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a7ac:	e7e0      	b.n	800a770 <_dtoa_r+0x4d0>
 800a7ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a7b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a7bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a7c0:	ee14 2a90 	vmov	r2, s9
 800a7c4:	3230      	adds	r2, #48	; 0x30
 800a7c6:	f808 2b01 	strb.w	r2, [r8], #1
 800a7ca:	45a0      	cmp	r8, r4
 800a7cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a7d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a7d4:	d118      	bne.n	800a808 <_dtoa_r+0x568>
 800a7d6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a7da:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a7de:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e6:	dc4d      	bgt.n	800a884 <_dtoa_r+0x5e4>
 800a7e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a7ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f4:	f57f af41 	bpl.w	800a67a <_dtoa_r+0x3da>
 800a7f8:	4688      	mov	r8, r1
 800a7fa:	3901      	subs	r1, #1
 800a7fc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a800:	2b30      	cmp	r3, #48	; 0x30
 800a802:	d0f9      	beq.n	800a7f8 <_dtoa_r+0x558>
 800a804:	46bb      	mov	fp, r7
 800a806:	e02a      	b.n	800a85e <_dtoa_r+0x5be>
 800a808:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a80c:	e7d6      	b.n	800a7bc <_dtoa_r+0x51c>
 800a80e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a812:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a816:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a81a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a81e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a822:	ee15 3a10 	vmov	r3, s10
 800a826:	3330      	adds	r3, #48	; 0x30
 800a828:	f808 3b01 	strb.w	r3, [r8], #1
 800a82c:	9b01      	ldr	r3, [sp, #4]
 800a82e:	eba8 0303 	sub.w	r3, r8, r3
 800a832:	4599      	cmp	r9, r3
 800a834:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a838:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a83c:	d133      	bne.n	800a8a6 <_dtoa_r+0x606>
 800a83e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a842:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a84a:	dc1a      	bgt.n	800a882 <_dtoa_r+0x5e2>
 800a84c:	eeb4 7b46 	vcmp.f64	d7, d6
 800a850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a854:	d103      	bne.n	800a85e <_dtoa_r+0x5be>
 800a856:	ee15 3a10 	vmov	r3, s10
 800a85a:	07d9      	lsls	r1, r3, #31
 800a85c:	d411      	bmi.n	800a882 <_dtoa_r+0x5e2>
 800a85e:	4629      	mov	r1, r5
 800a860:	4630      	mov	r0, r6
 800a862:	f000 fe67 	bl	800b534 <_Bfree>
 800a866:	2300      	movs	r3, #0
 800a868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a86a:	f888 3000 	strb.w	r3, [r8]
 800a86e:	f10b 0301 	add.w	r3, fp, #1
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a876:	2b00      	cmp	r3, #0
 800a878:	f43f ad61 	beq.w	800a33e <_dtoa_r+0x9e>
 800a87c:	f8c3 8000 	str.w	r8, [r3]
 800a880:	e55d      	b.n	800a33e <_dtoa_r+0x9e>
 800a882:	465f      	mov	r7, fp
 800a884:	4643      	mov	r3, r8
 800a886:	4698      	mov	r8, r3
 800a888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a88c:	2a39      	cmp	r2, #57	; 0x39
 800a88e:	d106      	bne.n	800a89e <_dtoa_r+0x5fe>
 800a890:	9a01      	ldr	r2, [sp, #4]
 800a892:	429a      	cmp	r2, r3
 800a894:	d1f7      	bne.n	800a886 <_dtoa_r+0x5e6>
 800a896:	9901      	ldr	r1, [sp, #4]
 800a898:	2230      	movs	r2, #48	; 0x30
 800a89a:	3701      	adds	r7, #1
 800a89c:	700a      	strb	r2, [r1, #0]
 800a89e:	781a      	ldrb	r2, [r3, #0]
 800a8a0:	3201      	adds	r2, #1
 800a8a2:	701a      	strb	r2, [r3, #0]
 800a8a4:	e7ae      	b.n	800a804 <_dtoa_r+0x564>
 800a8a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a8aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b2:	d1b2      	bne.n	800a81a <_dtoa_r+0x57a>
 800a8b4:	e7d3      	b.n	800a85e <_dtoa_r+0x5be>
 800a8b6:	bf00      	nop
 800a8b8:	0800d288 	.word	0x0800d288
 800a8bc:	0800d260 	.word	0x0800d260
 800a8c0:	9907      	ldr	r1, [sp, #28]
 800a8c2:	2900      	cmp	r1, #0
 800a8c4:	f000 80d0 	beq.w	800aa68 <_dtoa_r+0x7c8>
 800a8c8:	9906      	ldr	r1, [sp, #24]
 800a8ca:	2901      	cmp	r1, #1
 800a8cc:	f300 80b4 	bgt.w	800aa38 <_dtoa_r+0x798>
 800a8d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a8d2:	2900      	cmp	r1, #0
 800a8d4:	f000 80ac 	beq.w	800aa30 <_dtoa_r+0x790>
 800a8d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a8dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a8e0:	461c      	mov	r4, r3
 800a8e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a8e4:	9b04      	ldr	r3, [sp, #16]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	9304      	str	r3, [sp, #16]
 800a8ea:	9b05      	ldr	r3, [sp, #20]
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	4413      	add	r3, r2
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	9305      	str	r3, [sp, #20]
 800a8f4:	f000 ff20 	bl	800b738 <__i2b>
 800a8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8fa:	4607      	mov	r7, r0
 800a8fc:	f1b8 0f00 	cmp.w	r8, #0
 800a900:	dd0d      	ble.n	800a91e <_dtoa_r+0x67e>
 800a902:	9a05      	ldr	r2, [sp, #20]
 800a904:	2a00      	cmp	r2, #0
 800a906:	dd0a      	ble.n	800a91e <_dtoa_r+0x67e>
 800a908:	4542      	cmp	r2, r8
 800a90a:	9904      	ldr	r1, [sp, #16]
 800a90c:	bfa8      	it	ge
 800a90e:	4642      	movge	r2, r8
 800a910:	1a89      	subs	r1, r1, r2
 800a912:	9104      	str	r1, [sp, #16]
 800a914:	9905      	ldr	r1, [sp, #20]
 800a916:	eba8 0802 	sub.w	r8, r8, r2
 800a91a:	1a8a      	subs	r2, r1, r2
 800a91c:	9205      	str	r2, [sp, #20]
 800a91e:	b303      	cbz	r3, 800a962 <_dtoa_r+0x6c2>
 800a920:	9a07      	ldr	r2, [sp, #28]
 800a922:	2a00      	cmp	r2, #0
 800a924:	f000 80a5 	beq.w	800aa72 <_dtoa_r+0x7d2>
 800a928:	2c00      	cmp	r4, #0
 800a92a:	dd13      	ble.n	800a954 <_dtoa_r+0x6b4>
 800a92c:	4639      	mov	r1, r7
 800a92e:	4622      	mov	r2, r4
 800a930:	4630      	mov	r0, r6
 800a932:	930d      	str	r3, [sp, #52]	; 0x34
 800a934:	f000 ffc0 	bl	800b8b8 <__pow5mult>
 800a938:	462a      	mov	r2, r5
 800a93a:	4601      	mov	r1, r0
 800a93c:	4607      	mov	r7, r0
 800a93e:	4630      	mov	r0, r6
 800a940:	f000 ff10 	bl	800b764 <__multiply>
 800a944:	4629      	mov	r1, r5
 800a946:	900a      	str	r0, [sp, #40]	; 0x28
 800a948:	4630      	mov	r0, r6
 800a94a:	f000 fdf3 	bl	800b534 <_Bfree>
 800a94e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a952:	4615      	mov	r5, r2
 800a954:	1b1a      	subs	r2, r3, r4
 800a956:	d004      	beq.n	800a962 <_dtoa_r+0x6c2>
 800a958:	4629      	mov	r1, r5
 800a95a:	4630      	mov	r0, r6
 800a95c:	f000 ffac 	bl	800b8b8 <__pow5mult>
 800a960:	4605      	mov	r5, r0
 800a962:	2101      	movs	r1, #1
 800a964:	4630      	mov	r0, r6
 800a966:	f000 fee7 	bl	800b738 <__i2b>
 800a96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	4604      	mov	r4, r0
 800a970:	f340 8081 	ble.w	800aa76 <_dtoa_r+0x7d6>
 800a974:	461a      	mov	r2, r3
 800a976:	4601      	mov	r1, r0
 800a978:	4630      	mov	r0, r6
 800a97a:	f000 ff9d 	bl	800b8b8 <__pow5mult>
 800a97e:	9b06      	ldr	r3, [sp, #24]
 800a980:	2b01      	cmp	r3, #1
 800a982:	4604      	mov	r4, r0
 800a984:	dd7a      	ble.n	800aa7c <_dtoa_r+0x7dc>
 800a986:	2300      	movs	r3, #0
 800a988:	930a      	str	r3, [sp, #40]	; 0x28
 800a98a:	6922      	ldr	r2, [r4, #16]
 800a98c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a990:	6910      	ldr	r0, [r2, #16]
 800a992:	f000 fe81 	bl	800b698 <__hi0bits>
 800a996:	f1c0 0020 	rsb	r0, r0, #32
 800a99a:	9b05      	ldr	r3, [sp, #20]
 800a99c:	4418      	add	r0, r3
 800a99e:	f010 001f 	ands.w	r0, r0, #31
 800a9a2:	f000 808c 	beq.w	800aabe <_dtoa_r+0x81e>
 800a9a6:	f1c0 0220 	rsb	r2, r0, #32
 800a9aa:	2a04      	cmp	r2, #4
 800a9ac:	f340 8085 	ble.w	800aaba <_dtoa_r+0x81a>
 800a9b0:	f1c0 001c 	rsb	r0, r0, #28
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	4403      	add	r3, r0
 800a9b8:	9304      	str	r3, [sp, #16]
 800a9ba:	9b05      	ldr	r3, [sp, #20]
 800a9bc:	4403      	add	r3, r0
 800a9be:	4480      	add	r8, r0
 800a9c0:	9305      	str	r3, [sp, #20]
 800a9c2:	9b04      	ldr	r3, [sp, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	dd05      	ble.n	800a9d4 <_dtoa_r+0x734>
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	f000 ffcd 	bl	800b96c <__lshift>
 800a9d2:	4605      	mov	r5, r0
 800a9d4:	9b05      	ldr	r3, [sp, #20]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	dd05      	ble.n	800a9e6 <_dtoa_r+0x746>
 800a9da:	4621      	mov	r1, r4
 800a9dc:	461a      	mov	r2, r3
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f000 ffc4 	bl	800b96c <__lshift>
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d06a      	beq.n	800aac2 <_dtoa_r+0x822>
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f001 f82c 	bl	800ba4c <__mcmp>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	da64      	bge.n	800aac2 <_dtoa_r+0x822>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	220a      	movs	r2, #10
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f000 fdba 	bl	800b578 <__multadd>
 800aa04:	9b07      	ldr	r3, [sp, #28]
 800aa06:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f000 8191 	beq.w	800ad34 <_dtoa_r+0xa94>
 800aa12:	4639      	mov	r1, r7
 800aa14:	2300      	movs	r3, #0
 800aa16:	220a      	movs	r2, #10
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f000 fdad 	bl	800b578 <__multadd>
 800aa1e:	f1ba 0f00 	cmp.w	sl, #0
 800aa22:	4607      	mov	r7, r0
 800aa24:	f300 808d 	bgt.w	800ab42 <_dtoa_r+0x8a2>
 800aa28:	9b06      	ldr	r3, [sp, #24]
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	dc50      	bgt.n	800aad0 <_dtoa_r+0x830>
 800aa2e:	e088      	b.n	800ab42 <_dtoa_r+0x8a2>
 800aa30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa32:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aa36:	e751      	b.n	800a8dc <_dtoa_r+0x63c>
 800aa38:	f109 34ff 	add.w	r4, r9, #4294967295
 800aa3c:	42a3      	cmp	r3, r4
 800aa3e:	bfbf      	itttt	lt
 800aa40:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800aa42:	1ae3      	sublt	r3, r4, r3
 800aa44:	18d2      	addlt	r2, r2, r3
 800aa46:	9209      	strlt	r2, [sp, #36]	; 0x24
 800aa48:	bfb6      	itet	lt
 800aa4a:	4623      	movlt	r3, r4
 800aa4c:	1b1c      	subge	r4, r3, r4
 800aa4e:	2400      	movlt	r4, #0
 800aa50:	f1b9 0f00 	cmp.w	r9, #0
 800aa54:	bfb5      	itete	lt
 800aa56:	9a04      	ldrlt	r2, [sp, #16]
 800aa58:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800aa5c:	eba2 0809 	sublt.w	r8, r2, r9
 800aa60:	464a      	movge	r2, r9
 800aa62:	bfb8      	it	lt
 800aa64:	2200      	movlt	r2, #0
 800aa66:	e73c      	b.n	800a8e2 <_dtoa_r+0x642>
 800aa68:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aa6c:	9f07      	ldr	r7, [sp, #28]
 800aa6e:	461c      	mov	r4, r3
 800aa70:	e744      	b.n	800a8fc <_dtoa_r+0x65c>
 800aa72:	461a      	mov	r2, r3
 800aa74:	e770      	b.n	800a958 <_dtoa_r+0x6b8>
 800aa76:	9b06      	ldr	r3, [sp, #24]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	dc18      	bgt.n	800aaae <_dtoa_r+0x80e>
 800aa7c:	9b02      	ldr	r3, [sp, #8]
 800aa7e:	b9b3      	cbnz	r3, 800aaae <_dtoa_r+0x80e>
 800aa80:	9b03      	ldr	r3, [sp, #12]
 800aa82:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800aa86:	b9a2      	cbnz	r2, 800aab2 <_dtoa_r+0x812>
 800aa88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aa8c:	0d12      	lsrs	r2, r2, #20
 800aa8e:	0512      	lsls	r2, r2, #20
 800aa90:	b18a      	cbz	r2, 800aab6 <_dtoa_r+0x816>
 800aa92:	9b04      	ldr	r3, [sp, #16]
 800aa94:	3301      	adds	r3, #1
 800aa96:	9304      	str	r3, [sp, #16]
 800aa98:	9b05      	ldr	r3, [sp, #20]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	9305      	str	r3, [sp, #20]
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	930a      	str	r3, [sp, #40]	; 0x28
 800aaa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f47f af70 	bne.w	800a98a <_dtoa_r+0x6ea>
 800aaaa:	2001      	movs	r0, #1
 800aaac:	e775      	b.n	800a99a <_dtoa_r+0x6fa>
 800aaae:	2300      	movs	r3, #0
 800aab0:	e7f6      	b.n	800aaa0 <_dtoa_r+0x800>
 800aab2:	9b02      	ldr	r3, [sp, #8]
 800aab4:	e7f4      	b.n	800aaa0 <_dtoa_r+0x800>
 800aab6:	920a      	str	r2, [sp, #40]	; 0x28
 800aab8:	e7f3      	b.n	800aaa2 <_dtoa_r+0x802>
 800aaba:	d082      	beq.n	800a9c2 <_dtoa_r+0x722>
 800aabc:	4610      	mov	r0, r2
 800aabe:	301c      	adds	r0, #28
 800aac0:	e778      	b.n	800a9b4 <_dtoa_r+0x714>
 800aac2:	f1b9 0f00 	cmp.w	r9, #0
 800aac6:	dc37      	bgt.n	800ab38 <_dtoa_r+0x898>
 800aac8:	9b06      	ldr	r3, [sp, #24]
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	dd34      	ble.n	800ab38 <_dtoa_r+0x898>
 800aace:	46ca      	mov	sl, r9
 800aad0:	f1ba 0f00 	cmp.w	sl, #0
 800aad4:	d10d      	bne.n	800aaf2 <_dtoa_r+0x852>
 800aad6:	4621      	mov	r1, r4
 800aad8:	4653      	mov	r3, sl
 800aada:	2205      	movs	r2, #5
 800aadc:	4630      	mov	r0, r6
 800aade:	f000 fd4b 	bl	800b578 <__multadd>
 800aae2:	4601      	mov	r1, r0
 800aae4:	4604      	mov	r4, r0
 800aae6:	4628      	mov	r0, r5
 800aae8:	f000 ffb0 	bl	800ba4c <__mcmp>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	f73f adeb 	bgt.w	800a6c8 <_dtoa_r+0x428>
 800aaf2:	9b08      	ldr	r3, [sp, #32]
 800aaf4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aaf8:	ea6f 0b03 	mvn.w	fp, r3
 800aafc:	f04f 0900 	mov.w	r9, #0
 800ab00:	4621      	mov	r1, r4
 800ab02:	4630      	mov	r0, r6
 800ab04:	f000 fd16 	bl	800b534 <_Bfree>
 800ab08:	2f00      	cmp	r7, #0
 800ab0a:	f43f aea8 	beq.w	800a85e <_dtoa_r+0x5be>
 800ab0e:	f1b9 0f00 	cmp.w	r9, #0
 800ab12:	d005      	beq.n	800ab20 <_dtoa_r+0x880>
 800ab14:	45b9      	cmp	r9, r7
 800ab16:	d003      	beq.n	800ab20 <_dtoa_r+0x880>
 800ab18:	4649      	mov	r1, r9
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	f000 fd0a 	bl	800b534 <_Bfree>
 800ab20:	4639      	mov	r1, r7
 800ab22:	4630      	mov	r0, r6
 800ab24:	f000 fd06 	bl	800b534 <_Bfree>
 800ab28:	e699      	b.n	800a85e <_dtoa_r+0x5be>
 800ab2a:	2400      	movs	r4, #0
 800ab2c:	4627      	mov	r7, r4
 800ab2e:	e7e0      	b.n	800aaf2 <_dtoa_r+0x852>
 800ab30:	46bb      	mov	fp, r7
 800ab32:	4604      	mov	r4, r0
 800ab34:	4607      	mov	r7, r0
 800ab36:	e5c7      	b.n	800a6c8 <_dtoa_r+0x428>
 800ab38:	9b07      	ldr	r3, [sp, #28]
 800ab3a:	46ca      	mov	sl, r9
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 8100 	beq.w	800ad42 <_dtoa_r+0xaa2>
 800ab42:	f1b8 0f00 	cmp.w	r8, #0
 800ab46:	dd05      	ble.n	800ab54 <_dtoa_r+0x8b4>
 800ab48:	4639      	mov	r1, r7
 800ab4a:	4642      	mov	r2, r8
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f000 ff0d 	bl	800b96c <__lshift>
 800ab52:	4607      	mov	r7, r0
 800ab54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d05d      	beq.n	800ac16 <_dtoa_r+0x976>
 800ab5a:	6879      	ldr	r1, [r7, #4]
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f000 fca9 	bl	800b4b4 <_Balloc>
 800ab62:	4680      	mov	r8, r0
 800ab64:	b928      	cbnz	r0, 800ab72 <_dtoa_r+0x8d2>
 800ab66:	4b82      	ldr	r3, [pc, #520]	; (800ad70 <_dtoa_r+0xad0>)
 800ab68:	4602      	mov	r2, r0
 800ab6a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab6e:	f7ff bbaf 	b.w	800a2d0 <_dtoa_r+0x30>
 800ab72:	693a      	ldr	r2, [r7, #16]
 800ab74:	3202      	adds	r2, #2
 800ab76:	0092      	lsls	r2, r2, #2
 800ab78:	f107 010c 	add.w	r1, r7, #12
 800ab7c:	300c      	adds	r0, #12
 800ab7e:	f000 fc8b 	bl	800b498 <memcpy>
 800ab82:	2201      	movs	r2, #1
 800ab84:	4641      	mov	r1, r8
 800ab86:	4630      	mov	r0, r6
 800ab88:	f000 fef0 	bl	800b96c <__lshift>
 800ab8c:	9b01      	ldr	r3, [sp, #4]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	9b01      	ldr	r3, [sp, #4]
 800ab94:	4453      	add	r3, sl
 800ab96:	9308      	str	r3, [sp, #32]
 800ab98:	9b02      	ldr	r3, [sp, #8]
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	46b9      	mov	r9, r7
 800aba0:	9307      	str	r3, [sp, #28]
 800aba2:	4607      	mov	r7, r0
 800aba4:	9b04      	ldr	r3, [sp, #16]
 800aba6:	4621      	mov	r1, r4
 800aba8:	3b01      	subs	r3, #1
 800abaa:	4628      	mov	r0, r5
 800abac:	9302      	str	r3, [sp, #8]
 800abae:	f7ff faeb 	bl	800a188 <quorem>
 800abb2:	4603      	mov	r3, r0
 800abb4:	3330      	adds	r3, #48	; 0x30
 800abb6:	9005      	str	r0, [sp, #20]
 800abb8:	4649      	mov	r1, r9
 800abba:	4628      	mov	r0, r5
 800abbc:	9309      	str	r3, [sp, #36]	; 0x24
 800abbe:	f000 ff45 	bl	800ba4c <__mcmp>
 800abc2:	463a      	mov	r2, r7
 800abc4:	4682      	mov	sl, r0
 800abc6:	4621      	mov	r1, r4
 800abc8:	4630      	mov	r0, r6
 800abca:	f000 ff5b 	bl	800ba84 <__mdiff>
 800abce:	68c2      	ldr	r2, [r0, #12]
 800abd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd2:	4680      	mov	r8, r0
 800abd4:	bb0a      	cbnz	r2, 800ac1a <_dtoa_r+0x97a>
 800abd6:	4601      	mov	r1, r0
 800abd8:	4628      	mov	r0, r5
 800abda:	f000 ff37 	bl	800ba4c <__mcmp>
 800abde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe0:	4602      	mov	r2, r0
 800abe2:	4641      	mov	r1, r8
 800abe4:	4630      	mov	r0, r6
 800abe6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800abea:	f000 fca3 	bl	800b534 <_Bfree>
 800abee:	9b06      	ldr	r3, [sp, #24]
 800abf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abf2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800abf6:	ea43 0102 	orr.w	r1, r3, r2
 800abfa:	9b07      	ldr	r3, [sp, #28]
 800abfc:	430b      	orrs	r3, r1
 800abfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac00:	d10d      	bne.n	800ac1e <_dtoa_r+0x97e>
 800ac02:	2b39      	cmp	r3, #57	; 0x39
 800ac04:	d029      	beq.n	800ac5a <_dtoa_r+0x9ba>
 800ac06:	f1ba 0f00 	cmp.w	sl, #0
 800ac0a:	dd01      	ble.n	800ac10 <_dtoa_r+0x970>
 800ac0c:	9b05      	ldr	r3, [sp, #20]
 800ac0e:	3331      	adds	r3, #49	; 0x31
 800ac10:	9a02      	ldr	r2, [sp, #8]
 800ac12:	7013      	strb	r3, [r2, #0]
 800ac14:	e774      	b.n	800ab00 <_dtoa_r+0x860>
 800ac16:	4638      	mov	r0, r7
 800ac18:	e7b8      	b.n	800ab8c <_dtoa_r+0x8ec>
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	e7e1      	b.n	800abe2 <_dtoa_r+0x942>
 800ac1e:	f1ba 0f00 	cmp.w	sl, #0
 800ac22:	db06      	blt.n	800ac32 <_dtoa_r+0x992>
 800ac24:	9906      	ldr	r1, [sp, #24]
 800ac26:	ea41 0a0a 	orr.w	sl, r1, sl
 800ac2a:	9907      	ldr	r1, [sp, #28]
 800ac2c:	ea5a 0101 	orrs.w	r1, sl, r1
 800ac30:	d120      	bne.n	800ac74 <_dtoa_r+0x9d4>
 800ac32:	2a00      	cmp	r2, #0
 800ac34:	ddec      	ble.n	800ac10 <_dtoa_r+0x970>
 800ac36:	4629      	mov	r1, r5
 800ac38:	2201      	movs	r2, #1
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	9304      	str	r3, [sp, #16]
 800ac3e:	f000 fe95 	bl	800b96c <__lshift>
 800ac42:	4621      	mov	r1, r4
 800ac44:	4605      	mov	r5, r0
 800ac46:	f000 ff01 	bl	800ba4c <__mcmp>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	9b04      	ldr	r3, [sp, #16]
 800ac4e:	dc02      	bgt.n	800ac56 <_dtoa_r+0x9b6>
 800ac50:	d1de      	bne.n	800ac10 <_dtoa_r+0x970>
 800ac52:	07da      	lsls	r2, r3, #31
 800ac54:	d5dc      	bpl.n	800ac10 <_dtoa_r+0x970>
 800ac56:	2b39      	cmp	r3, #57	; 0x39
 800ac58:	d1d8      	bne.n	800ac0c <_dtoa_r+0x96c>
 800ac5a:	9a02      	ldr	r2, [sp, #8]
 800ac5c:	2339      	movs	r3, #57	; 0x39
 800ac5e:	7013      	strb	r3, [r2, #0]
 800ac60:	4643      	mov	r3, r8
 800ac62:	4698      	mov	r8, r3
 800ac64:	3b01      	subs	r3, #1
 800ac66:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ac6a:	2a39      	cmp	r2, #57	; 0x39
 800ac6c:	d051      	beq.n	800ad12 <_dtoa_r+0xa72>
 800ac6e:	3201      	adds	r2, #1
 800ac70:	701a      	strb	r2, [r3, #0]
 800ac72:	e745      	b.n	800ab00 <_dtoa_r+0x860>
 800ac74:	2a00      	cmp	r2, #0
 800ac76:	dd03      	ble.n	800ac80 <_dtoa_r+0x9e0>
 800ac78:	2b39      	cmp	r3, #57	; 0x39
 800ac7a:	d0ee      	beq.n	800ac5a <_dtoa_r+0x9ba>
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	e7c7      	b.n	800ac10 <_dtoa_r+0x970>
 800ac80:	9a04      	ldr	r2, [sp, #16]
 800ac82:	9908      	ldr	r1, [sp, #32]
 800ac84:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ac88:	428a      	cmp	r2, r1
 800ac8a:	d02b      	beq.n	800ace4 <_dtoa_r+0xa44>
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	2300      	movs	r3, #0
 800ac90:	220a      	movs	r2, #10
 800ac92:	4630      	mov	r0, r6
 800ac94:	f000 fc70 	bl	800b578 <__multadd>
 800ac98:	45b9      	cmp	r9, r7
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	f04f 0300 	mov.w	r3, #0
 800aca0:	f04f 020a 	mov.w	r2, #10
 800aca4:	4649      	mov	r1, r9
 800aca6:	4630      	mov	r0, r6
 800aca8:	d107      	bne.n	800acba <_dtoa_r+0xa1a>
 800acaa:	f000 fc65 	bl	800b578 <__multadd>
 800acae:	4681      	mov	r9, r0
 800acb0:	4607      	mov	r7, r0
 800acb2:	9b04      	ldr	r3, [sp, #16]
 800acb4:	3301      	adds	r3, #1
 800acb6:	9304      	str	r3, [sp, #16]
 800acb8:	e774      	b.n	800aba4 <_dtoa_r+0x904>
 800acba:	f000 fc5d 	bl	800b578 <__multadd>
 800acbe:	4639      	mov	r1, r7
 800acc0:	4681      	mov	r9, r0
 800acc2:	2300      	movs	r3, #0
 800acc4:	220a      	movs	r2, #10
 800acc6:	4630      	mov	r0, r6
 800acc8:	f000 fc56 	bl	800b578 <__multadd>
 800accc:	4607      	mov	r7, r0
 800acce:	e7f0      	b.n	800acb2 <_dtoa_r+0xa12>
 800acd0:	f1ba 0f00 	cmp.w	sl, #0
 800acd4:	9a01      	ldr	r2, [sp, #4]
 800acd6:	bfcc      	ite	gt
 800acd8:	46d0      	movgt	r8, sl
 800acda:	f04f 0801 	movle.w	r8, #1
 800acde:	4490      	add	r8, r2
 800ace0:	f04f 0900 	mov.w	r9, #0
 800ace4:	4629      	mov	r1, r5
 800ace6:	2201      	movs	r2, #1
 800ace8:	4630      	mov	r0, r6
 800acea:	9302      	str	r3, [sp, #8]
 800acec:	f000 fe3e 	bl	800b96c <__lshift>
 800acf0:	4621      	mov	r1, r4
 800acf2:	4605      	mov	r5, r0
 800acf4:	f000 feaa 	bl	800ba4c <__mcmp>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	dcb1      	bgt.n	800ac60 <_dtoa_r+0x9c0>
 800acfc:	d102      	bne.n	800ad04 <_dtoa_r+0xa64>
 800acfe:	9b02      	ldr	r3, [sp, #8]
 800ad00:	07db      	lsls	r3, r3, #31
 800ad02:	d4ad      	bmi.n	800ac60 <_dtoa_r+0x9c0>
 800ad04:	4643      	mov	r3, r8
 800ad06:	4698      	mov	r8, r3
 800ad08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad0c:	2a30      	cmp	r2, #48	; 0x30
 800ad0e:	d0fa      	beq.n	800ad06 <_dtoa_r+0xa66>
 800ad10:	e6f6      	b.n	800ab00 <_dtoa_r+0x860>
 800ad12:	9a01      	ldr	r2, [sp, #4]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d1a4      	bne.n	800ac62 <_dtoa_r+0x9c2>
 800ad18:	f10b 0b01 	add.w	fp, fp, #1
 800ad1c:	2331      	movs	r3, #49	; 0x31
 800ad1e:	e778      	b.n	800ac12 <_dtoa_r+0x972>
 800ad20:	4b14      	ldr	r3, [pc, #80]	; (800ad74 <_dtoa_r+0xad4>)
 800ad22:	f7ff bb27 	b.w	800a374 <_dtoa_r+0xd4>
 800ad26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f47f ab03 	bne.w	800a334 <_dtoa_r+0x94>
 800ad2e:	4b12      	ldr	r3, [pc, #72]	; (800ad78 <_dtoa_r+0xad8>)
 800ad30:	f7ff bb20 	b.w	800a374 <_dtoa_r+0xd4>
 800ad34:	f1ba 0f00 	cmp.w	sl, #0
 800ad38:	dc03      	bgt.n	800ad42 <_dtoa_r+0xaa2>
 800ad3a:	9b06      	ldr	r3, [sp, #24]
 800ad3c:	2b02      	cmp	r3, #2
 800ad3e:	f73f aec7 	bgt.w	800aad0 <_dtoa_r+0x830>
 800ad42:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad46:	4621      	mov	r1, r4
 800ad48:	4628      	mov	r0, r5
 800ad4a:	f7ff fa1d 	bl	800a188 <quorem>
 800ad4e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ad52:	f808 3b01 	strb.w	r3, [r8], #1
 800ad56:	9a01      	ldr	r2, [sp, #4]
 800ad58:	eba8 0202 	sub.w	r2, r8, r2
 800ad5c:	4592      	cmp	sl, r2
 800ad5e:	ddb7      	ble.n	800acd0 <_dtoa_r+0xa30>
 800ad60:	4629      	mov	r1, r5
 800ad62:	2300      	movs	r3, #0
 800ad64:	220a      	movs	r2, #10
 800ad66:	4630      	mov	r0, r6
 800ad68:	f000 fc06 	bl	800b578 <__multadd>
 800ad6c:	4605      	mov	r5, r0
 800ad6e:	e7ea      	b.n	800ad46 <_dtoa_r+0xaa6>
 800ad70:	0800d178 	.word	0x0800d178
 800ad74:	0800cf78 	.word	0x0800cf78
 800ad78:	0800d0f9 	.word	0x0800d0f9

0800ad7c <rshift>:
 800ad7c:	6903      	ldr	r3, [r0, #16]
 800ad7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ad82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ad8a:	f100 0414 	add.w	r4, r0, #20
 800ad8e:	dd45      	ble.n	800ae1c <rshift+0xa0>
 800ad90:	f011 011f 	ands.w	r1, r1, #31
 800ad94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad9c:	d10c      	bne.n	800adb8 <rshift+0x3c>
 800ad9e:	f100 0710 	add.w	r7, r0, #16
 800ada2:	4629      	mov	r1, r5
 800ada4:	42b1      	cmp	r1, r6
 800ada6:	d334      	bcc.n	800ae12 <rshift+0x96>
 800ada8:	1a9b      	subs	r3, r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	1eea      	subs	r2, r5, #3
 800adae:	4296      	cmp	r6, r2
 800adb0:	bf38      	it	cc
 800adb2:	2300      	movcc	r3, #0
 800adb4:	4423      	add	r3, r4
 800adb6:	e015      	b.n	800ade4 <rshift+0x68>
 800adb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800adbc:	f1c1 0820 	rsb	r8, r1, #32
 800adc0:	40cf      	lsrs	r7, r1
 800adc2:	f105 0e04 	add.w	lr, r5, #4
 800adc6:	46a1      	mov	r9, r4
 800adc8:	4576      	cmp	r6, lr
 800adca:	46f4      	mov	ip, lr
 800adcc:	d815      	bhi.n	800adfa <rshift+0x7e>
 800adce:	1a9a      	subs	r2, r3, r2
 800add0:	0092      	lsls	r2, r2, #2
 800add2:	3a04      	subs	r2, #4
 800add4:	3501      	adds	r5, #1
 800add6:	42ae      	cmp	r6, r5
 800add8:	bf38      	it	cc
 800adda:	2200      	movcc	r2, #0
 800addc:	18a3      	adds	r3, r4, r2
 800adde:	50a7      	str	r7, [r4, r2]
 800ade0:	b107      	cbz	r7, 800ade4 <rshift+0x68>
 800ade2:	3304      	adds	r3, #4
 800ade4:	1b1a      	subs	r2, r3, r4
 800ade6:	42a3      	cmp	r3, r4
 800ade8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800adec:	bf08      	it	eq
 800adee:	2300      	moveq	r3, #0
 800adf0:	6102      	str	r2, [r0, #16]
 800adf2:	bf08      	it	eq
 800adf4:	6143      	streq	r3, [r0, #20]
 800adf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adfa:	f8dc c000 	ldr.w	ip, [ip]
 800adfe:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae02:	ea4c 0707 	orr.w	r7, ip, r7
 800ae06:	f849 7b04 	str.w	r7, [r9], #4
 800ae0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae0e:	40cf      	lsrs	r7, r1
 800ae10:	e7da      	b.n	800adc8 <rshift+0x4c>
 800ae12:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae16:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae1a:	e7c3      	b.n	800ada4 <rshift+0x28>
 800ae1c:	4623      	mov	r3, r4
 800ae1e:	e7e1      	b.n	800ade4 <rshift+0x68>

0800ae20 <__hexdig_fun>:
 800ae20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ae24:	2b09      	cmp	r3, #9
 800ae26:	d802      	bhi.n	800ae2e <__hexdig_fun+0xe>
 800ae28:	3820      	subs	r0, #32
 800ae2a:	b2c0      	uxtb	r0, r0
 800ae2c:	4770      	bx	lr
 800ae2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ae32:	2b05      	cmp	r3, #5
 800ae34:	d801      	bhi.n	800ae3a <__hexdig_fun+0x1a>
 800ae36:	3847      	subs	r0, #71	; 0x47
 800ae38:	e7f7      	b.n	800ae2a <__hexdig_fun+0xa>
 800ae3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ae3e:	2b05      	cmp	r3, #5
 800ae40:	d801      	bhi.n	800ae46 <__hexdig_fun+0x26>
 800ae42:	3827      	subs	r0, #39	; 0x27
 800ae44:	e7f1      	b.n	800ae2a <__hexdig_fun+0xa>
 800ae46:	2000      	movs	r0, #0
 800ae48:	4770      	bx	lr
	...

0800ae4c <__gethex>:
 800ae4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae50:	ed2d 8b02 	vpush	{d8}
 800ae54:	b089      	sub	sp, #36	; 0x24
 800ae56:	ee08 0a10 	vmov	s16, r0
 800ae5a:	9304      	str	r3, [sp, #16]
 800ae5c:	4bb4      	ldr	r3, [pc, #720]	; (800b130 <__gethex+0x2e4>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	4618      	mov	r0, r3
 800ae64:	468b      	mov	fp, r1
 800ae66:	4690      	mov	r8, r2
 800ae68:	f7f5 fa3a 	bl	80002e0 <strlen>
 800ae6c:	9b01      	ldr	r3, [sp, #4]
 800ae6e:	f8db 2000 	ldr.w	r2, [fp]
 800ae72:	4403      	add	r3, r0
 800ae74:	4682      	mov	sl, r0
 800ae76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ae7a:	9305      	str	r3, [sp, #20]
 800ae7c:	1c93      	adds	r3, r2, #2
 800ae7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ae82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ae86:	32fe      	adds	r2, #254	; 0xfe
 800ae88:	18d1      	adds	r1, r2, r3
 800ae8a:	461f      	mov	r7, r3
 800ae8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae90:	9100      	str	r1, [sp, #0]
 800ae92:	2830      	cmp	r0, #48	; 0x30
 800ae94:	d0f8      	beq.n	800ae88 <__gethex+0x3c>
 800ae96:	f7ff ffc3 	bl	800ae20 <__hexdig_fun>
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d13a      	bne.n	800af16 <__gethex+0xca>
 800aea0:	9901      	ldr	r1, [sp, #4]
 800aea2:	4652      	mov	r2, sl
 800aea4:	4638      	mov	r0, r7
 800aea6:	f001 fa2f 	bl	800c308 <strncmp>
 800aeaa:	4605      	mov	r5, r0
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d168      	bne.n	800af82 <__gethex+0x136>
 800aeb0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800aeb4:	eb07 060a 	add.w	r6, r7, sl
 800aeb8:	f7ff ffb2 	bl	800ae20 <__hexdig_fun>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d062      	beq.n	800af86 <__gethex+0x13a>
 800aec0:	4633      	mov	r3, r6
 800aec2:	7818      	ldrb	r0, [r3, #0]
 800aec4:	2830      	cmp	r0, #48	; 0x30
 800aec6:	461f      	mov	r7, r3
 800aec8:	f103 0301 	add.w	r3, r3, #1
 800aecc:	d0f9      	beq.n	800aec2 <__gethex+0x76>
 800aece:	f7ff ffa7 	bl	800ae20 <__hexdig_fun>
 800aed2:	2301      	movs	r3, #1
 800aed4:	fab0 f480 	clz	r4, r0
 800aed8:	0964      	lsrs	r4, r4, #5
 800aeda:	4635      	mov	r5, r6
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	463a      	mov	r2, r7
 800aee0:	4616      	mov	r6, r2
 800aee2:	3201      	adds	r2, #1
 800aee4:	7830      	ldrb	r0, [r6, #0]
 800aee6:	f7ff ff9b 	bl	800ae20 <__hexdig_fun>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d1f8      	bne.n	800aee0 <__gethex+0x94>
 800aeee:	9901      	ldr	r1, [sp, #4]
 800aef0:	4652      	mov	r2, sl
 800aef2:	4630      	mov	r0, r6
 800aef4:	f001 fa08 	bl	800c308 <strncmp>
 800aef8:	b980      	cbnz	r0, 800af1c <__gethex+0xd0>
 800aefa:	b94d      	cbnz	r5, 800af10 <__gethex+0xc4>
 800aefc:	eb06 050a 	add.w	r5, r6, sl
 800af00:	462a      	mov	r2, r5
 800af02:	4616      	mov	r6, r2
 800af04:	3201      	adds	r2, #1
 800af06:	7830      	ldrb	r0, [r6, #0]
 800af08:	f7ff ff8a 	bl	800ae20 <__hexdig_fun>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d1f8      	bne.n	800af02 <__gethex+0xb6>
 800af10:	1bad      	subs	r5, r5, r6
 800af12:	00ad      	lsls	r5, r5, #2
 800af14:	e004      	b.n	800af20 <__gethex+0xd4>
 800af16:	2400      	movs	r4, #0
 800af18:	4625      	mov	r5, r4
 800af1a:	e7e0      	b.n	800aede <__gethex+0x92>
 800af1c:	2d00      	cmp	r5, #0
 800af1e:	d1f7      	bne.n	800af10 <__gethex+0xc4>
 800af20:	7833      	ldrb	r3, [r6, #0]
 800af22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af26:	2b50      	cmp	r3, #80	; 0x50
 800af28:	d13b      	bne.n	800afa2 <__gethex+0x156>
 800af2a:	7873      	ldrb	r3, [r6, #1]
 800af2c:	2b2b      	cmp	r3, #43	; 0x2b
 800af2e:	d02c      	beq.n	800af8a <__gethex+0x13e>
 800af30:	2b2d      	cmp	r3, #45	; 0x2d
 800af32:	d02e      	beq.n	800af92 <__gethex+0x146>
 800af34:	1c71      	adds	r1, r6, #1
 800af36:	f04f 0900 	mov.w	r9, #0
 800af3a:	7808      	ldrb	r0, [r1, #0]
 800af3c:	f7ff ff70 	bl	800ae20 <__hexdig_fun>
 800af40:	1e43      	subs	r3, r0, #1
 800af42:	b2db      	uxtb	r3, r3
 800af44:	2b18      	cmp	r3, #24
 800af46:	d82c      	bhi.n	800afa2 <__gethex+0x156>
 800af48:	f1a0 0210 	sub.w	r2, r0, #16
 800af4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af50:	f7ff ff66 	bl	800ae20 <__hexdig_fun>
 800af54:	1e43      	subs	r3, r0, #1
 800af56:	b2db      	uxtb	r3, r3
 800af58:	2b18      	cmp	r3, #24
 800af5a:	d91d      	bls.n	800af98 <__gethex+0x14c>
 800af5c:	f1b9 0f00 	cmp.w	r9, #0
 800af60:	d000      	beq.n	800af64 <__gethex+0x118>
 800af62:	4252      	negs	r2, r2
 800af64:	4415      	add	r5, r2
 800af66:	f8cb 1000 	str.w	r1, [fp]
 800af6a:	b1e4      	cbz	r4, 800afa6 <__gethex+0x15a>
 800af6c:	9b00      	ldr	r3, [sp, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	bf14      	ite	ne
 800af72:	2700      	movne	r7, #0
 800af74:	2706      	moveq	r7, #6
 800af76:	4638      	mov	r0, r7
 800af78:	b009      	add	sp, #36	; 0x24
 800af7a:	ecbd 8b02 	vpop	{d8}
 800af7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af82:	463e      	mov	r6, r7
 800af84:	4625      	mov	r5, r4
 800af86:	2401      	movs	r4, #1
 800af88:	e7ca      	b.n	800af20 <__gethex+0xd4>
 800af8a:	f04f 0900 	mov.w	r9, #0
 800af8e:	1cb1      	adds	r1, r6, #2
 800af90:	e7d3      	b.n	800af3a <__gethex+0xee>
 800af92:	f04f 0901 	mov.w	r9, #1
 800af96:	e7fa      	b.n	800af8e <__gethex+0x142>
 800af98:	230a      	movs	r3, #10
 800af9a:	fb03 0202 	mla	r2, r3, r2, r0
 800af9e:	3a10      	subs	r2, #16
 800afa0:	e7d4      	b.n	800af4c <__gethex+0x100>
 800afa2:	4631      	mov	r1, r6
 800afa4:	e7df      	b.n	800af66 <__gethex+0x11a>
 800afa6:	1bf3      	subs	r3, r6, r7
 800afa8:	3b01      	subs	r3, #1
 800afaa:	4621      	mov	r1, r4
 800afac:	2b07      	cmp	r3, #7
 800afae:	dc0b      	bgt.n	800afc8 <__gethex+0x17c>
 800afb0:	ee18 0a10 	vmov	r0, s16
 800afb4:	f000 fa7e 	bl	800b4b4 <_Balloc>
 800afb8:	4604      	mov	r4, r0
 800afba:	b940      	cbnz	r0, 800afce <__gethex+0x182>
 800afbc:	4b5d      	ldr	r3, [pc, #372]	; (800b134 <__gethex+0x2e8>)
 800afbe:	4602      	mov	r2, r0
 800afc0:	21de      	movs	r1, #222	; 0xde
 800afc2:	485d      	ldr	r0, [pc, #372]	; (800b138 <__gethex+0x2ec>)
 800afc4:	f001 f9c2 	bl	800c34c <__assert_func>
 800afc8:	3101      	adds	r1, #1
 800afca:	105b      	asrs	r3, r3, #1
 800afcc:	e7ee      	b.n	800afac <__gethex+0x160>
 800afce:	f100 0914 	add.w	r9, r0, #20
 800afd2:	f04f 0b00 	mov.w	fp, #0
 800afd6:	f1ca 0301 	rsb	r3, sl, #1
 800afda:	f8cd 9008 	str.w	r9, [sp, #8]
 800afde:	f8cd b000 	str.w	fp, [sp]
 800afe2:	9306      	str	r3, [sp, #24]
 800afe4:	42b7      	cmp	r7, r6
 800afe6:	d340      	bcc.n	800b06a <__gethex+0x21e>
 800afe8:	9802      	ldr	r0, [sp, #8]
 800afea:	9b00      	ldr	r3, [sp, #0]
 800afec:	f840 3b04 	str.w	r3, [r0], #4
 800aff0:	eba0 0009 	sub.w	r0, r0, r9
 800aff4:	1080      	asrs	r0, r0, #2
 800aff6:	0146      	lsls	r6, r0, #5
 800aff8:	6120      	str	r0, [r4, #16]
 800affa:	4618      	mov	r0, r3
 800affc:	f000 fb4c 	bl	800b698 <__hi0bits>
 800b000:	1a30      	subs	r0, r6, r0
 800b002:	f8d8 6000 	ldr.w	r6, [r8]
 800b006:	42b0      	cmp	r0, r6
 800b008:	dd63      	ble.n	800b0d2 <__gethex+0x286>
 800b00a:	1b87      	subs	r7, r0, r6
 800b00c:	4639      	mov	r1, r7
 800b00e:	4620      	mov	r0, r4
 800b010:	f000 feed 	bl	800bdee <__any_on>
 800b014:	4682      	mov	sl, r0
 800b016:	b1a8      	cbz	r0, 800b044 <__gethex+0x1f8>
 800b018:	1e7b      	subs	r3, r7, #1
 800b01a:	1159      	asrs	r1, r3, #5
 800b01c:	f003 021f 	and.w	r2, r3, #31
 800b020:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b024:	f04f 0a01 	mov.w	sl, #1
 800b028:	fa0a f202 	lsl.w	r2, sl, r2
 800b02c:	420a      	tst	r2, r1
 800b02e:	d009      	beq.n	800b044 <__gethex+0x1f8>
 800b030:	4553      	cmp	r3, sl
 800b032:	dd05      	ble.n	800b040 <__gethex+0x1f4>
 800b034:	1eb9      	subs	r1, r7, #2
 800b036:	4620      	mov	r0, r4
 800b038:	f000 fed9 	bl	800bdee <__any_on>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d145      	bne.n	800b0cc <__gethex+0x280>
 800b040:	f04f 0a02 	mov.w	sl, #2
 800b044:	4639      	mov	r1, r7
 800b046:	4620      	mov	r0, r4
 800b048:	f7ff fe98 	bl	800ad7c <rshift>
 800b04c:	443d      	add	r5, r7
 800b04e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b052:	42ab      	cmp	r3, r5
 800b054:	da4c      	bge.n	800b0f0 <__gethex+0x2a4>
 800b056:	ee18 0a10 	vmov	r0, s16
 800b05a:	4621      	mov	r1, r4
 800b05c:	f000 fa6a 	bl	800b534 <_Bfree>
 800b060:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b062:	2300      	movs	r3, #0
 800b064:	6013      	str	r3, [r2, #0]
 800b066:	27a3      	movs	r7, #163	; 0xa3
 800b068:	e785      	b.n	800af76 <__gethex+0x12a>
 800b06a:	1e73      	subs	r3, r6, #1
 800b06c:	9a05      	ldr	r2, [sp, #20]
 800b06e:	9303      	str	r3, [sp, #12]
 800b070:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b074:	4293      	cmp	r3, r2
 800b076:	d019      	beq.n	800b0ac <__gethex+0x260>
 800b078:	f1bb 0f20 	cmp.w	fp, #32
 800b07c:	d107      	bne.n	800b08e <__gethex+0x242>
 800b07e:	9b02      	ldr	r3, [sp, #8]
 800b080:	9a00      	ldr	r2, [sp, #0]
 800b082:	f843 2b04 	str.w	r2, [r3], #4
 800b086:	9302      	str	r3, [sp, #8]
 800b088:	2300      	movs	r3, #0
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	469b      	mov	fp, r3
 800b08e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b092:	f7ff fec5 	bl	800ae20 <__hexdig_fun>
 800b096:	9b00      	ldr	r3, [sp, #0]
 800b098:	f000 000f 	and.w	r0, r0, #15
 800b09c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b0a0:	4303      	orrs	r3, r0
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	f10b 0b04 	add.w	fp, fp, #4
 800b0a8:	9b03      	ldr	r3, [sp, #12]
 800b0aa:	e00d      	b.n	800b0c8 <__gethex+0x27c>
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	9a06      	ldr	r2, [sp, #24]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	42bb      	cmp	r3, r7
 800b0b4:	d3e0      	bcc.n	800b078 <__gethex+0x22c>
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	9901      	ldr	r1, [sp, #4]
 800b0ba:	9307      	str	r3, [sp, #28]
 800b0bc:	4652      	mov	r2, sl
 800b0be:	f001 f923 	bl	800c308 <strncmp>
 800b0c2:	9b07      	ldr	r3, [sp, #28]
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d1d7      	bne.n	800b078 <__gethex+0x22c>
 800b0c8:	461e      	mov	r6, r3
 800b0ca:	e78b      	b.n	800afe4 <__gethex+0x198>
 800b0cc:	f04f 0a03 	mov.w	sl, #3
 800b0d0:	e7b8      	b.n	800b044 <__gethex+0x1f8>
 800b0d2:	da0a      	bge.n	800b0ea <__gethex+0x29e>
 800b0d4:	1a37      	subs	r7, r6, r0
 800b0d6:	4621      	mov	r1, r4
 800b0d8:	ee18 0a10 	vmov	r0, s16
 800b0dc:	463a      	mov	r2, r7
 800b0de:	f000 fc45 	bl	800b96c <__lshift>
 800b0e2:	1bed      	subs	r5, r5, r7
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	f100 0914 	add.w	r9, r0, #20
 800b0ea:	f04f 0a00 	mov.w	sl, #0
 800b0ee:	e7ae      	b.n	800b04e <__gethex+0x202>
 800b0f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b0f4:	42a8      	cmp	r0, r5
 800b0f6:	dd72      	ble.n	800b1de <__gethex+0x392>
 800b0f8:	1b45      	subs	r5, r0, r5
 800b0fa:	42ae      	cmp	r6, r5
 800b0fc:	dc36      	bgt.n	800b16c <__gethex+0x320>
 800b0fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b102:	2b02      	cmp	r3, #2
 800b104:	d02a      	beq.n	800b15c <__gethex+0x310>
 800b106:	2b03      	cmp	r3, #3
 800b108:	d02c      	beq.n	800b164 <__gethex+0x318>
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d11c      	bne.n	800b148 <__gethex+0x2fc>
 800b10e:	42ae      	cmp	r6, r5
 800b110:	d11a      	bne.n	800b148 <__gethex+0x2fc>
 800b112:	2e01      	cmp	r6, #1
 800b114:	d112      	bne.n	800b13c <__gethex+0x2f0>
 800b116:	9a04      	ldr	r2, [sp, #16]
 800b118:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	2301      	movs	r3, #1
 800b120:	6123      	str	r3, [r4, #16]
 800b122:	f8c9 3000 	str.w	r3, [r9]
 800b126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b128:	2762      	movs	r7, #98	; 0x62
 800b12a:	601c      	str	r4, [r3, #0]
 800b12c:	e723      	b.n	800af76 <__gethex+0x12a>
 800b12e:	bf00      	nop
 800b130:	0800d1f0 	.word	0x0800d1f0
 800b134:	0800d178 	.word	0x0800d178
 800b138:	0800d189 	.word	0x0800d189
 800b13c:	1e71      	subs	r1, r6, #1
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 fe55 	bl	800bdee <__any_on>
 800b144:	2800      	cmp	r0, #0
 800b146:	d1e6      	bne.n	800b116 <__gethex+0x2ca>
 800b148:	ee18 0a10 	vmov	r0, s16
 800b14c:	4621      	mov	r1, r4
 800b14e:	f000 f9f1 	bl	800b534 <_Bfree>
 800b152:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b154:	2300      	movs	r3, #0
 800b156:	6013      	str	r3, [r2, #0]
 800b158:	2750      	movs	r7, #80	; 0x50
 800b15a:	e70c      	b.n	800af76 <__gethex+0x12a>
 800b15c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1f2      	bne.n	800b148 <__gethex+0x2fc>
 800b162:	e7d8      	b.n	800b116 <__gethex+0x2ca>
 800b164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1d5      	bne.n	800b116 <__gethex+0x2ca>
 800b16a:	e7ed      	b.n	800b148 <__gethex+0x2fc>
 800b16c:	1e6f      	subs	r7, r5, #1
 800b16e:	f1ba 0f00 	cmp.w	sl, #0
 800b172:	d131      	bne.n	800b1d8 <__gethex+0x38c>
 800b174:	b127      	cbz	r7, 800b180 <__gethex+0x334>
 800b176:	4639      	mov	r1, r7
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 fe38 	bl	800bdee <__any_on>
 800b17e:	4682      	mov	sl, r0
 800b180:	117b      	asrs	r3, r7, #5
 800b182:	2101      	movs	r1, #1
 800b184:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b188:	f007 071f 	and.w	r7, r7, #31
 800b18c:	fa01 f707 	lsl.w	r7, r1, r7
 800b190:	421f      	tst	r7, r3
 800b192:	4629      	mov	r1, r5
 800b194:	4620      	mov	r0, r4
 800b196:	bf18      	it	ne
 800b198:	f04a 0a02 	orrne.w	sl, sl, #2
 800b19c:	1b76      	subs	r6, r6, r5
 800b19e:	f7ff fded 	bl	800ad7c <rshift>
 800b1a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b1a6:	2702      	movs	r7, #2
 800b1a8:	f1ba 0f00 	cmp.w	sl, #0
 800b1ac:	d048      	beq.n	800b240 <__gethex+0x3f4>
 800b1ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d015      	beq.n	800b1e2 <__gethex+0x396>
 800b1b6:	2b03      	cmp	r3, #3
 800b1b8:	d017      	beq.n	800b1ea <__gethex+0x39e>
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d109      	bne.n	800b1d2 <__gethex+0x386>
 800b1be:	f01a 0f02 	tst.w	sl, #2
 800b1c2:	d006      	beq.n	800b1d2 <__gethex+0x386>
 800b1c4:	f8d9 0000 	ldr.w	r0, [r9]
 800b1c8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b1cc:	f01a 0f01 	tst.w	sl, #1
 800b1d0:	d10e      	bne.n	800b1f0 <__gethex+0x3a4>
 800b1d2:	f047 0710 	orr.w	r7, r7, #16
 800b1d6:	e033      	b.n	800b240 <__gethex+0x3f4>
 800b1d8:	f04f 0a01 	mov.w	sl, #1
 800b1dc:	e7d0      	b.n	800b180 <__gethex+0x334>
 800b1de:	2701      	movs	r7, #1
 800b1e0:	e7e2      	b.n	800b1a8 <__gethex+0x35c>
 800b1e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1e4:	f1c3 0301 	rsb	r3, r3, #1
 800b1e8:	9315      	str	r3, [sp, #84]	; 0x54
 800b1ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d0f0      	beq.n	800b1d2 <__gethex+0x386>
 800b1f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b1f4:	f104 0314 	add.w	r3, r4, #20
 800b1f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b1fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b200:	f04f 0c00 	mov.w	ip, #0
 800b204:	4618      	mov	r0, r3
 800b206:	f853 2b04 	ldr.w	r2, [r3], #4
 800b20a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b20e:	d01c      	beq.n	800b24a <__gethex+0x3fe>
 800b210:	3201      	adds	r2, #1
 800b212:	6002      	str	r2, [r0, #0]
 800b214:	2f02      	cmp	r7, #2
 800b216:	f104 0314 	add.w	r3, r4, #20
 800b21a:	d13f      	bne.n	800b29c <__gethex+0x450>
 800b21c:	f8d8 2000 	ldr.w	r2, [r8]
 800b220:	3a01      	subs	r2, #1
 800b222:	42b2      	cmp	r2, r6
 800b224:	d10a      	bne.n	800b23c <__gethex+0x3f0>
 800b226:	1171      	asrs	r1, r6, #5
 800b228:	2201      	movs	r2, #1
 800b22a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b22e:	f006 061f 	and.w	r6, r6, #31
 800b232:	fa02 f606 	lsl.w	r6, r2, r6
 800b236:	421e      	tst	r6, r3
 800b238:	bf18      	it	ne
 800b23a:	4617      	movne	r7, r2
 800b23c:	f047 0720 	orr.w	r7, r7, #32
 800b240:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b242:	601c      	str	r4, [r3, #0]
 800b244:	9b04      	ldr	r3, [sp, #16]
 800b246:	601d      	str	r5, [r3, #0]
 800b248:	e695      	b.n	800af76 <__gethex+0x12a>
 800b24a:	4299      	cmp	r1, r3
 800b24c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b250:	d8d8      	bhi.n	800b204 <__gethex+0x3b8>
 800b252:	68a3      	ldr	r3, [r4, #8]
 800b254:	459b      	cmp	fp, r3
 800b256:	db19      	blt.n	800b28c <__gethex+0x440>
 800b258:	6861      	ldr	r1, [r4, #4]
 800b25a:	ee18 0a10 	vmov	r0, s16
 800b25e:	3101      	adds	r1, #1
 800b260:	f000 f928 	bl	800b4b4 <_Balloc>
 800b264:	4681      	mov	r9, r0
 800b266:	b918      	cbnz	r0, 800b270 <__gethex+0x424>
 800b268:	4b1a      	ldr	r3, [pc, #104]	; (800b2d4 <__gethex+0x488>)
 800b26a:	4602      	mov	r2, r0
 800b26c:	2184      	movs	r1, #132	; 0x84
 800b26e:	e6a8      	b.n	800afc2 <__gethex+0x176>
 800b270:	6922      	ldr	r2, [r4, #16]
 800b272:	3202      	adds	r2, #2
 800b274:	f104 010c 	add.w	r1, r4, #12
 800b278:	0092      	lsls	r2, r2, #2
 800b27a:	300c      	adds	r0, #12
 800b27c:	f000 f90c 	bl	800b498 <memcpy>
 800b280:	4621      	mov	r1, r4
 800b282:	ee18 0a10 	vmov	r0, s16
 800b286:	f000 f955 	bl	800b534 <_Bfree>
 800b28a:	464c      	mov	r4, r9
 800b28c:	6923      	ldr	r3, [r4, #16]
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b294:	6122      	str	r2, [r4, #16]
 800b296:	2201      	movs	r2, #1
 800b298:	615a      	str	r2, [r3, #20]
 800b29a:	e7bb      	b.n	800b214 <__gethex+0x3c8>
 800b29c:	6922      	ldr	r2, [r4, #16]
 800b29e:	455a      	cmp	r2, fp
 800b2a0:	dd0b      	ble.n	800b2ba <__gethex+0x46e>
 800b2a2:	2101      	movs	r1, #1
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f7ff fd69 	bl	800ad7c <rshift>
 800b2aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2ae:	3501      	adds	r5, #1
 800b2b0:	42ab      	cmp	r3, r5
 800b2b2:	f6ff aed0 	blt.w	800b056 <__gethex+0x20a>
 800b2b6:	2701      	movs	r7, #1
 800b2b8:	e7c0      	b.n	800b23c <__gethex+0x3f0>
 800b2ba:	f016 061f 	ands.w	r6, r6, #31
 800b2be:	d0fa      	beq.n	800b2b6 <__gethex+0x46a>
 800b2c0:	4453      	add	r3, sl
 800b2c2:	f1c6 0620 	rsb	r6, r6, #32
 800b2c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b2ca:	f000 f9e5 	bl	800b698 <__hi0bits>
 800b2ce:	42b0      	cmp	r0, r6
 800b2d0:	dbe7      	blt.n	800b2a2 <__gethex+0x456>
 800b2d2:	e7f0      	b.n	800b2b6 <__gethex+0x46a>
 800b2d4:	0800d178 	.word	0x0800d178

0800b2d8 <L_shift>:
 800b2d8:	f1c2 0208 	rsb	r2, r2, #8
 800b2dc:	0092      	lsls	r2, r2, #2
 800b2de:	b570      	push	{r4, r5, r6, lr}
 800b2e0:	f1c2 0620 	rsb	r6, r2, #32
 800b2e4:	6843      	ldr	r3, [r0, #4]
 800b2e6:	6804      	ldr	r4, [r0, #0]
 800b2e8:	fa03 f506 	lsl.w	r5, r3, r6
 800b2ec:	432c      	orrs	r4, r5
 800b2ee:	40d3      	lsrs	r3, r2
 800b2f0:	6004      	str	r4, [r0, #0]
 800b2f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b2f6:	4288      	cmp	r0, r1
 800b2f8:	d3f4      	bcc.n	800b2e4 <L_shift+0xc>
 800b2fa:	bd70      	pop	{r4, r5, r6, pc}

0800b2fc <__match>:
 800b2fc:	b530      	push	{r4, r5, lr}
 800b2fe:	6803      	ldr	r3, [r0, #0]
 800b300:	3301      	adds	r3, #1
 800b302:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b306:	b914      	cbnz	r4, 800b30e <__match+0x12>
 800b308:	6003      	str	r3, [r0, #0]
 800b30a:	2001      	movs	r0, #1
 800b30c:	bd30      	pop	{r4, r5, pc}
 800b30e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b312:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b316:	2d19      	cmp	r5, #25
 800b318:	bf98      	it	ls
 800b31a:	3220      	addls	r2, #32
 800b31c:	42a2      	cmp	r2, r4
 800b31e:	d0f0      	beq.n	800b302 <__match+0x6>
 800b320:	2000      	movs	r0, #0
 800b322:	e7f3      	b.n	800b30c <__match+0x10>

0800b324 <__hexnan>:
 800b324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b328:	680b      	ldr	r3, [r1, #0]
 800b32a:	115e      	asrs	r6, r3, #5
 800b32c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b330:	f013 031f 	ands.w	r3, r3, #31
 800b334:	b087      	sub	sp, #28
 800b336:	bf18      	it	ne
 800b338:	3604      	addne	r6, #4
 800b33a:	2500      	movs	r5, #0
 800b33c:	1f37      	subs	r7, r6, #4
 800b33e:	4690      	mov	r8, r2
 800b340:	6802      	ldr	r2, [r0, #0]
 800b342:	9301      	str	r3, [sp, #4]
 800b344:	4682      	mov	sl, r0
 800b346:	f846 5c04 	str.w	r5, [r6, #-4]
 800b34a:	46b9      	mov	r9, r7
 800b34c:	463c      	mov	r4, r7
 800b34e:	9502      	str	r5, [sp, #8]
 800b350:	46ab      	mov	fp, r5
 800b352:	7851      	ldrb	r1, [r2, #1]
 800b354:	1c53      	adds	r3, r2, #1
 800b356:	9303      	str	r3, [sp, #12]
 800b358:	b341      	cbz	r1, 800b3ac <__hexnan+0x88>
 800b35a:	4608      	mov	r0, r1
 800b35c:	9205      	str	r2, [sp, #20]
 800b35e:	9104      	str	r1, [sp, #16]
 800b360:	f7ff fd5e 	bl	800ae20 <__hexdig_fun>
 800b364:	2800      	cmp	r0, #0
 800b366:	d14f      	bne.n	800b408 <__hexnan+0xe4>
 800b368:	9904      	ldr	r1, [sp, #16]
 800b36a:	9a05      	ldr	r2, [sp, #20]
 800b36c:	2920      	cmp	r1, #32
 800b36e:	d818      	bhi.n	800b3a2 <__hexnan+0x7e>
 800b370:	9b02      	ldr	r3, [sp, #8]
 800b372:	459b      	cmp	fp, r3
 800b374:	dd13      	ble.n	800b39e <__hexnan+0x7a>
 800b376:	454c      	cmp	r4, r9
 800b378:	d206      	bcs.n	800b388 <__hexnan+0x64>
 800b37a:	2d07      	cmp	r5, #7
 800b37c:	dc04      	bgt.n	800b388 <__hexnan+0x64>
 800b37e:	462a      	mov	r2, r5
 800b380:	4649      	mov	r1, r9
 800b382:	4620      	mov	r0, r4
 800b384:	f7ff ffa8 	bl	800b2d8 <L_shift>
 800b388:	4544      	cmp	r4, r8
 800b38a:	d950      	bls.n	800b42e <__hexnan+0x10a>
 800b38c:	2300      	movs	r3, #0
 800b38e:	f1a4 0904 	sub.w	r9, r4, #4
 800b392:	f844 3c04 	str.w	r3, [r4, #-4]
 800b396:	f8cd b008 	str.w	fp, [sp, #8]
 800b39a:	464c      	mov	r4, r9
 800b39c:	461d      	mov	r5, r3
 800b39e:	9a03      	ldr	r2, [sp, #12]
 800b3a0:	e7d7      	b.n	800b352 <__hexnan+0x2e>
 800b3a2:	2929      	cmp	r1, #41	; 0x29
 800b3a4:	d156      	bne.n	800b454 <__hexnan+0x130>
 800b3a6:	3202      	adds	r2, #2
 800b3a8:	f8ca 2000 	str.w	r2, [sl]
 800b3ac:	f1bb 0f00 	cmp.w	fp, #0
 800b3b0:	d050      	beq.n	800b454 <__hexnan+0x130>
 800b3b2:	454c      	cmp	r4, r9
 800b3b4:	d206      	bcs.n	800b3c4 <__hexnan+0xa0>
 800b3b6:	2d07      	cmp	r5, #7
 800b3b8:	dc04      	bgt.n	800b3c4 <__hexnan+0xa0>
 800b3ba:	462a      	mov	r2, r5
 800b3bc:	4649      	mov	r1, r9
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f7ff ff8a 	bl	800b2d8 <L_shift>
 800b3c4:	4544      	cmp	r4, r8
 800b3c6:	d934      	bls.n	800b432 <__hexnan+0x10e>
 800b3c8:	f1a8 0204 	sub.w	r2, r8, #4
 800b3cc:	4623      	mov	r3, r4
 800b3ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800b3d2:	f842 1f04 	str.w	r1, [r2, #4]!
 800b3d6:	429f      	cmp	r7, r3
 800b3d8:	d2f9      	bcs.n	800b3ce <__hexnan+0xaa>
 800b3da:	1b3b      	subs	r3, r7, r4
 800b3dc:	f023 0303 	bic.w	r3, r3, #3
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	3401      	adds	r4, #1
 800b3e4:	3e03      	subs	r6, #3
 800b3e6:	42b4      	cmp	r4, r6
 800b3e8:	bf88      	it	hi
 800b3ea:	2304      	movhi	r3, #4
 800b3ec:	4443      	add	r3, r8
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f843 2b04 	str.w	r2, [r3], #4
 800b3f4:	429f      	cmp	r7, r3
 800b3f6:	d2fb      	bcs.n	800b3f0 <__hexnan+0xcc>
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	b91b      	cbnz	r3, 800b404 <__hexnan+0xe0>
 800b3fc:	4547      	cmp	r7, r8
 800b3fe:	d127      	bne.n	800b450 <__hexnan+0x12c>
 800b400:	2301      	movs	r3, #1
 800b402:	603b      	str	r3, [r7, #0]
 800b404:	2005      	movs	r0, #5
 800b406:	e026      	b.n	800b456 <__hexnan+0x132>
 800b408:	3501      	adds	r5, #1
 800b40a:	2d08      	cmp	r5, #8
 800b40c:	f10b 0b01 	add.w	fp, fp, #1
 800b410:	dd06      	ble.n	800b420 <__hexnan+0xfc>
 800b412:	4544      	cmp	r4, r8
 800b414:	d9c3      	bls.n	800b39e <__hexnan+0x7a>
 800b416:	2300      	movs	r3, #0
 800b418:	f844 3c04 	str.w	r3, [r4, #-4]
 800b41c:	2501      	movs	r5, #1
 800b41e:	3c04      	subs	r4, #4
 800b420:	6822      	ldr	r2, [r4, #0]
 800b422:	f000 000f 	and.w	r0, r0, #15
 800b426:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b42a:	6022      	str	r2, [r4, #0]
 800b42c:	e7b7      	b.n	800b39e <__hexnan+0x7a>
 800b42e:	2508      	movs	r5, #8
 800b430:	e7b5      	b.n	800b39e <__hexnan+0x7a>
 800b432:	9b01      	ldr	r3, [sp, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d0df      	beq.n	800b3f8 <__hexnan+0xd4>
 800b438:	f04f 32ff 	mov.w	r2, #4294967295
 800b43c:	f1c3 0320 	rsb	r3, r3, #32
 800b440:	fa22 f303 	lsr.w	r3, r2, r3
 800b444:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b448:	401a      	ands	r2, r3
 800b44a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b44e:	e7d3      	b.n	800b3f8 <__hexnan+0xd4>
 800b450:	3f04      	subs	r7, #4
 800b452:	e7d1      	b.n	800b3f8 <__hexnan+0xd4>
 800b454:	2004      	movs	r0, #4
 800b456:	b007      	add	sp, #28
 800b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b45c <_localeconv_r>:
 800b45c:	4800      	ldr	r0, [pc, #0]	; (800b460 <_localeconv_r+0x4>)
 800b45e:	4770      	bx	lr
 800b460:	24000180 	.word	0x24000180

0800b464 <malloc>:
 800b464:	4b02      	ldr	r3, [pc, #8]	; (800b470 <malloc+0xc>)
 800b466:	4601      	mov	r1, r0
 800b468:	6818      	ldr	r0, [r3, #0]
 800b46a:	f000 bd63 	b.w	800bf34 <_malloc_r>
 800b46e:	bf00      	nop
 800b470:	24000028 	.word	0x24000028

0800b474 <__ascii_mbtowc>:
 800b474:	b082      	sub	sp, #8
 800b476:	b901      	cbnz	r1, 800b47a <__ascii_mbtowc+0x6>
 800b478:	a901      	add	r1, sp, #4
 800b47a:	b142      	cbz	r2, 800b48e <__ascii_mbtowc+0x1a>
 800b47c:	b14b      	cbz	r3, 800b492 <__ascii_mbtowc+0x1e>
 800b47e:	7813      	ldrb	r3, [r2, #0]
 800b480:	600b      	str	r3, [r1, #0]
 800b482:	7812      	ldrb	r2, [r2, #0]
 800b484:	1e10      	subs	r0, r2, #0
 800b486:	bf18      	it	ne
 800b488:	2001      	movne	r0, #1
 800b48a:	b002      	add	sp, #8
 800b48c:	4770      	bx	lr
 800b48e:	4610      	mov	r0, r2
 800b490:	e7fb      	b.n	800b48a <__ascii_mbtowc+0x16>
 800b492:	f06f 0001 	mvn.w	r0, #1
 800b496:	e7f8      	b.n	800b48a <__ascii_mbtowc+0x16>

0800b498 <memcpy>:
 800b498:	440a      	add	r2, r1
 800b49a:	4291      	cmp	r1, r2
 800b49c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4a0:	d100      	bne.n	800b4a4 <memcpy+0xc>
 800b4a2:	4770      	bx	lr
 800b4a4:	b510      	push	{r4, lr}
 800b4a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4ae:	4291      	cmp	r1, r2
 800b4b0:	d1f9      	bne.n	800b4a6 <memcpy+0xe>
 800b4b2:	bd10      	pop	{r4, pc}

0800b4b4 <_Balloc>:
 800b4b4:	b570      	push	{r4, r5, r6, lr}
 800b4b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	460d      	mov	r5, r1
 800b4bc:	b976      	cbnz	r6, 800b4dc <_Balloc+0x28>
 800b4be:	2010      	movs	r0, #16
 800b4c0:	f7ff ffd0 	bl	800b464 <malloc>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	6260      	str	r0, [r4, #36]	; 0x24
 800b4c8:	b920      	cbnz	r0, 800b4d4 <_Balloc+0x20>
 800b4ca:	4b18      	ldr	r3, [pc, #96]	; (800b52c <_Balloc+0x78>)
 800b4cc:	4818      	ldr	r0, [pc, #96]	; (800b530 <_Balloc+0x7c>)
 800b4ce:	2166      	movs	r1, #102	; 0x66
 800b4d0:	f000 ff3c 	bl	800c34c <__assert_func>
 800b4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4d8:	6006      	str	r6, [r0, #0]
 800b4da:	60c6      	str	r6, [r0, #12]
 800b4dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b4de:	68f3      	ldr	r3, [r6, #12]
 800b4e0:	b183      	cbz	r3, 800b504 <_Balloc+0x50>
 800b4e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4ea:	b9b8      	cbnz	r0, 800b51c <_Balloc+0x68>
 800b4ec:	2101      	movs	r1, #1
 800b4ee:	fa01 f605 	lsl.w	r6, r1, r5
 800b4f2:	1d72      	adds	r2, r6, #5
 800b4f4:	0092      	lsls	r2, r2, #2
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f000 fc9a 	bl	800be30 <_calloc_r>
 800b4fc:	b160      	cbz	r0, 800b518 <_Balloc+0x64>
 800b4fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b502:	e00e      	b.n	800b522 <_Balloc+0x6e>
 800b504:	2221      	movs	r2, #33	; 0x21
 800b506:	2104      	movs	r1, #4
 800b508:	4620      	mov	r0, r4
 800b50a:	f000 fc91 	bl	800be30 <_calloc_r>
 800b50e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b510:	60f0      	str	r0, [r6, #12]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1e4      	bne.n	800b4e2 <_Balloc+0x2e>
 800b518:	2000      	movs	r0, #0
 800b51a:	bd70      	pop	{r4, r5, r6, pc}
 800b51c:	6802      	ldr	r2, [r0, #0]
 800b51e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b522:	2300      	movs	r3, #0
 800b524:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b528:	e7f7      	b.n	800b51a <_Balloc+0x66>
 800b52a:	bf00      	nop
 800b52c:	0800d106 	.word	0x0800d106
 800b530:	0800d204 	.word	0x0800d204

0800b534 <_Bfree>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b538:	4605      	mov	r5, r0
 800b53a:	460c      	mov	r4, r1
 800b53c:	b976      	cbnz	r6, 800b55c <_Bfree+0x28>
 800b53e:	2010      	movs	r0, #16
 800b540:	f7ff ff90 	bl	800b464 <malloc>
 800b544:	4602      	mov	r2, r0
 800b546:	6268      	str	r0, [r5, #36]	; 0x24
 800b548:	b920      	cbnz	r0, 800b554 <_Bfree+0x20>
 800b54a:	4b09      	ldr	r3, [pc, #36]	; (800b570 <_Bfree+0x3c>)
 800b54c:	4809      	ldr	r0, [pc, #36]	; (800b574 <_Bfree+0x40>)
 800b54e:	218a      	movs	r1, #138	; 0x8a
 800b550:	f000 fefc 	bl	800c34c <__assert_func>
 800b554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b558:	6006      	str	r6, [r0, #0]
 800b55a:	60c6      	str	r6, [r0, #12]
 800b55c:	b13c      	cbz	r4, 800b56e <_Bfree+0x3a>
 800b55e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b560:	6862      	ldr	r2, [r4, #4]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b568:	6021      	str	r1, [r4, #0]
 800b56a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b56e:	bd70      	pop	{r4, r5, r6, pc}
 800b570:	0800d106 	.word	0x0800d106
 800b574:	0800d204 	.word	0x0800d204

0800b578 <__multadd>:
 800b578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b57c:	690d      	ldr	r5, [r1, #16]
 800b57e:	4607      	mov	r7, r0
 800b580:	460c      	mov	r4, r1
 800b582:	461e      	mov	r6, r3
 800b584:	f101 0c14 	add.w	ip, r1, #20
 800b588:	2000      	movs	r0, #0
 800b58a:	f8dc 3000 	ldr.w	r3, [ip]
 800b58e:	b299      	uxth	r1, r3
 800b590:	fb02 6101 	mla	r1, r2, r1, r6
 800b594:	0c1e      	lsrs	r6, r3, #16
 800b596:	0c0b      	lsrs	r3, r1, #16
 800b598:	fb02 3306 	mla	r3, r2, r6, r3
 800b59c:	b289      	uxth	r1, r1
 800b59e:	3001      	adds	r0, #1
 800b5a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5a4:	4285      	cmp	r5, r0
 800b5a6:	f84c 1b04 	str.w	r1, [ip], #4
 800b5aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5ae:	dcec      	bgt.n	800b58a <__multadd+0x12>
 800b5b0:	b30e      	cbz	r6, 800b5f6 <__multadd+0x7e>
 800b5b2:	68a3      	ldr	r3, [r4, #8]
 800b5b4:	42ab      	cmp	r3, r5
 800b5b6:	dc19      	bgt.n	800b5ec <__multadd+0x74>
 800b5b8:	6861      	ldr	r1, [r4, #4]
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	3101      	adds	r1, #1
 800b5be:	f7ff ff79 	bl	800b4b4 <_Balloc>
 800b5c2:	4680      	mov	r8, r0
 800b5c4:	b928      	cbnz	r0, 800b5d2 <__multadd+0x5a>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	4b0c      	ldr	r3, [pc, #48]	; (800b5fc <__multadd+0x84>)
 800b5ca:	480d      	ldr	r0, [pc, #52]	; (800b600 <__multadd+0x88>)
 800b5cc:	21b5      	movs	r1, #181	; 0xb5
 800b5ce:	f000 febd 	bl	800c34c <__assert_func>
 800b5d2:	6922      	ldr	r2, [r4, #16]
 800b5d4:	3202      	adds	r2, #2
 800b5d6:	f104 010c 	add.w	r1, r4, #12
 800b5da:	0092      	lsls	r2, r2, #2
 800b5dc:	300c      	adds	r0, #12
 800b5de:	f7ff ff5b 	bl	800b498 <memcpy>
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	f7ff ffa5 	bl	800b534 <_Bfree>
 800b5ea:	4644      	mov	r4, r8
 800b5ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5f0:	3501      	adds	r5, #1
 800b5f2:	615e      	str	r6, [r3, #20]
 800b5f4:	6125      	str	r5, [r4, #16]
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5fc:	0800d178 	.word	0x0800d178
 800b600:	0800d204 	.word	0x0800d204

0800b604 <__s2b>:
 800b604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b608:	460c      	mov	r4, r1
 800b60a:	4615      	mov	r5, r2
 800b60c:	461f      	mov	r7, r3
 800b60e:	2209      	movs	r2, #9
 800b610:	3308      	adds	r3, #8
 800b612:	4606      	mov	r6, r0
 800b614:	fb93 f3f2 	sdiv	r3, r3, r2
 800b618:	2100      	movs	r1, #0
 800b61a:	2201      	movs	r2, #1
 800b61c:	429a      	cmp	r2, r3
 800b61e:	db09      	blt.n	800b634 <__s2b+0x30>
 800b620:	4630      	mov	r0, r6
 800b622:	f7ff ff47 	bl	800b4b4 <_Balloc>
 800b626:	b940      	cbnz	r0, 800b63a <__s2b+0x36>
 800b628:	4602      	mov	r2, r0
 800b62a:	4b19      	ldr	r3, [pc, #100]	; (800b690 <__s2b+0x8c>)
 800b62c:	4819      	ldr	r0, [pc, #100]	; (800b694 <__s2b+0x90>)
 800b62e:	21ce      	movs	r1, #206	; 0xce
 800b630:	f000 fe8c 	bl	800c34c <__assert_func>
 800b634:	0052      	lsls	r2, r2, #1
 800b636:	3101      	adds	r1, #1
 800b638:	e7f0      	b.n	800b61c <__s2b+0x18>
 800b63a:	9b08      	ldr	r3, [sp, #32]
 800b63c:	6143      	str	r3, [r0, #20]
 800b63e:	2d09      	cmp	r5, #9
 800b640:	f04f 0301 	mov.w	r3, #1
 800b644:	6103      	str	r3, [r0, #16]
 800b646:	dd16      	ble.n	800b676 <__s2b+0x72>
 800b648:	f104 0909 	add.w	r9, r4, #9
 800b64c:	46c8      	mov	r8, r9
 800b64e:	442c      	add	r4, r5
 800b650:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b654:	4601      	mov	r1, r0
 800b656:	3b30      	subs	r3, #48	; 0x30
 800b658:	220a      	movs	r2, #10
 800b65a:	4630      	mov	r0, r6
 800b65c:	f7ff ff8c 	bl	800b578 <__multadd>
 800b660:	45a0      	cmp	r8, r4
 800b662:	d1f5      	bne.n	800b650 <__s2b+0x4c>
 800b664:	f1a5 0408 	sub.w	r4, r5, #8
 800b668:	444c      	add	r4, r9
 800b66a:	1b2d      	subs	r5, r5, r4
 800b66c:	1963      	adds	r3, r4, r5
 800b66e:	42bb      	cmp	r3, r7
 800b670:	db04      	blt.n	800b67c <__s2b+0x78>
 800b672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b676:	340a      	adds	r4, #10
 800b678:	2509      	movs	r5, #9
 800b67a:	e7f6      	b.n	800b66a <__s2b+0x66>
 800b67c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b680:	4601      	mov	r1, r0
 800b682:	3b30      	subs	r3, #48	; 0x30
 800b684:	220a      	movs	r2, #10
 800b686:	4630      	mov	r0, r6
 800b688:	f7ff ff76 	bl	800b578 <__multadd>
 800b68c:	e7ee      	b.n	800b66c <__s2b+0x68>
 800b68e:	bf00      	nop
 800b690:	0800d178 	.word	0x0800d178
 800b694:	0800d204 	.word	0x0800d204

0800b698 <__hi0bits>:
 800b698:	0c03      	lsrs	r3, r0, #16
 800b69a:	041b      	lsls	r3, r3, #16
 800b69c:	b9d3      	cbnz	r3, 800b6d4 <__hi0bits+0x3c>
 800b69e:	0400      	lsls	r0, r0, #16
 800b6a0:	2310      	movs	r3, #16
 800b6a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b6a6:	bf04      	itt	eq
 800b6a8:	0200      	lsleq	r0, r0, #8
 800b6aa:	3308      	addeq	r3, #8
 800b6ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b6b0:	bf04      	itt	eq
 800b6b2:	0100      	lsleq	r0, r0, #4
 800b6b4:	3304      	addeq	r3, #4
 800b6b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b6ba:	bf04      	itt	eq
 800b6bc:	0080      	lsleq	r0, r0, #2
 800b6be:	3302      	addeq	r3, #2
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	db05      	blt.n	800b6d0 <__hi0bits+0x38>
 800b6c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b6c8:	f103 0301 	add.w	r3, r3, #1
 800b6cc:	bf08      	it	eq
 800b6ce:	2320      	moveq	r3, #32
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	4770      	bx	lr
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	e7e4      	b.n	800b6a2 <__hi0bits+0xa>

0800b6d8 <__lo0bits>:
 800b6d8:	6803      	ldr	r3, [r0, #0]
 800b6da:	f013 0207 	ands.w	r2, r3, #7
 800b6de:	4601      	mov	r1, r0
 800b6e0:	d00b      	beq.n	800b6fa <__lo0bits+0x22>
 800b6e2:	07da      	lsls	r2, r3, #31
 800b6e4:	d423      	bmi.n	800b72e <__lo0bits+0x56>
 800b6e6:	0798      	lsls	r0, r3, #30
 800b6e8:	bf49      	itett	mi
 800b6ea:	085b      	lsrmi	r3, r3, #1
 800b6ec:	089b      	lsrpl	r3, r3, #2
 800b6ee:	2001      	movmi	r0, #1
 800b6f0:	600b      	strmi	r3, [r1, #0]
 800b6f2:	bf5c      	itt	pl
 800b6f4:	600b      	strpl	r3, [r1, #0]
 800b6f6:	2002      	movpl	r0, #2
 800b6f8:	4770      	bx	lr
 800b6fa:	b298      	uxth	r0, r3
 800b6fc:	b9a8      	cbnz	r0, 800b72a <__lo0bits+0x52>
 800b6fe:	0c1b      	lsrs	r3, r3, #16
 800b700:	2010      	movs	r0, #16
 800b702:	b2da      	uxtb	r2, r3
 800b704:	b90a      	cbnz	r2, 800b70a <__lo0bits+0x32>
 800b706:	3008      	adds	r0, #8
 800b708:	0a1b      	lsrs	r3, r3, #8
 800b70a:	071a      	lsls	r2, r3, #28
 800b70c:	bf04      	itt	eq
 800b70e:	091b      	lsreq	r3, r3, #4
 800b710:	3004      	addeq	r0, #4
 800b712:	079a      	lsls	r2, r3, #30
 800b714:	bf04      	itt	eq
 800b716:	089b      	lsreq	r3, r3, #2
 800b718:	3002      	addeq	r0, #2
 800b71a:	07da      	lsls	r2, r3, #31
 800b71c:	d403      	bmi.n	800b726 <__lo0bits+0x4e>
 800b71e:	085b      	lsrs	r3, r3, #1
 800b720:	f100 0001 	add.w	r0, r0, #1
 800b724:	d005      	beq.n	800b732 <__lo0bits+0x5a>
 800b726:	600b      	str	r3, [r1, #0]
 800b728:	4770      	bx	lr
 800b72a:	4610      	mov	r0, r2
 800b72c:	e7e9      	b.n	800b702 <__lo0bits+0x2a>
 800b72e:	2000      	movs	r0, #0
 800b730:	4770      	bx	lr
 800b732:	2020      	movs	r0, #32
 800b734:	4770      	bx	lr
	...

0800b738 <__i2b>:
 800b738:	b510      	push	{r4, lr}
 800b73a:	460c      	mov	r4, r1
 800b73c:	2101      	movs	r1, #1
 800b73e:	f7ff feb9 	bl	800b4b4 <_Balloc>
 800b742:	4602      	mov	r2, r0
 800b744:	b928      	cbnz	r0, 800b752 <__i2b+0x1a>
 800b746:	4b05      	ldr	r3, [pc, #20]	; (800b75c <__i2b+0x24>)
 800b748:	4805      	ldr	r0, [pc, #20]	; (800b760 <__i2b+0x28>)
 800b74a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b74e:	f000 fdfd 	bl	800c34c <__assert_func>
 800b752:	2301      	movs	r3, #1
 800b754:	6144      	str	r4, [r0, #20]
 800b756:	6103      	str	r3, [r0, #16]
 800b758:	bd10      	pop	{r4, pc}
 800b75a:	bf00      	nop
 800b75c:	0800d178 	.word	0x0800d178
 800b760:	0800d204 	.word	0x0800d204

0800b764 <__multiply>:
 800b764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b768:	4691      	mov	r9, r2
 800b76a:	690a      	ldr	r2, [r1, #16]
 800b76c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b770:	429a      	cmp	r2, r3
 800b772:	bfb8      	it	lt
 800b774:	460b      	movlt	r3, r1
 800b776:	460c      	mov	r4, r1
 800b778:	bfbc      	itt	lt
 800b77a:	464c      	movlt	r4, r9
 800b77c:	4699      	movlt	r9, r3
 800b77e:	6927      	ldr	r7, [r4, #16]
 800b780:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b784:	68a3      	ldr	r3, [r4, #8]
 800b786:	6861      	ldr	r1, [r4, #4]
 800b788:	eb07 060a 	add.w	r6, r7, sl
 800b78c:	42b3      	cmp	r3, r6
 800b78e:	b085      	sub	sp, #20
 800b790:	bfb8      	it	lt
 800b792:	3101      	addlt	r1, #1
 800b794:	f7ff fe8e 	bl	800b4b4 <_Balloc>
 800b798:	b930      	cbnz	r0, 800b7a8 <__multiply+0x44>
 800b79a:	4602      	mov	r2, r0
 800b79c:	4b44      	ldr	r3, [pc, #272]	; (800b8b0 <__multiply+0x14c>)
 800b79e:	4845      	ldr	r0, [pc, #276]	; (800b8b4 <__multiply+0x150>)
 800b7a0:	f240 115d 	movw	r1, #349	; 0x15d
 800b7a4:	f000 fdd2 	bl	800c34c <__assert_func>
 800b7a8:	f100 0514 	add.w	r5, r0, #20
 800b7ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7b0:	462b      	mov	r3, r5
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	4543      	cmp	r3, r8
 800b7b6:	d321      	bcc.n	800b7fc <__multiply+0x98>
 800b7b8:	f104 0314 	add.w	r3, r4, #20
 800b7bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b7c0:	f109 0314 	add.w	r3, r9, #20
 800b7c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b7c8:	9202      	str	r2, [sp, #8]
 800b7ca:	1b3a      	subs	r2, r7, r4
 800b7cc:	3a15      	subs	r2, #21
 800b7ce:	f022 0203 	bic.w	r2, r2, #3
 800b7d2:	3204      	adds	r2, #4
 800b7d4:	f104 0115 	add.w	r1, r4, #21
 800b7d8:	428f      	cmp	r7, r1
 800b7da:	bf38      	it	cc
 800b7dc:	2204      	movcc	r2, #4
 800b7de:	9201      	str	r2, [sp, #4]
 800b7e0:	9a02      	ldr	r2, [sp, #8]
 800b7e2:	9303      	str	r3, [sp, #12]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d80c      	bhi.n	800b802 <__multiply+0x9e>
 800b7e8:	2e00      	cmp	r6, #0
 800b7ea:	dd03      	ble.n	800b7f4 <__multiply+0x90>
 800b7ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d05a      	beq.n	800b8aa <__multiply+0x146>
 800b7f4:	6106      	str	r6, [r0, #16]
 800b7f6:	b005      	add	sp, #20
 800b7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fc:	f843 2b04 	str.w	r2, [r3], #4
 800b800:	e7d8      	b.n	800b7b4 <__multiply+0x50>
 800b802:	f8b3 a000 	ldrh.w	sl, [r3]
 800b806:	f1ba 0f00 	cmp.w	sl, #0
 800b80a:	d024      	beq.n	800b856 <__multiply+0xf2>
 800b80c:	f104 0e14 	add.w	lr, r4, #20
 800b810:	46a9      	mov	r9, r5
 800b812:	f04f 0c00 	mov.w	ip, #0
 800b816:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b81a:	f8d9 1000 	ldr.w	r1, [r9]
 800b81e:	fa1f fb82 	uxth.w	fp, r2
 800b822:	b289      	uxth	r1, r1
 800b824:	fb0a 110b 	mla	r1, sl, fp, r1
 800b828:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b82c:	f8d9 2000 	ldr.w	r2, [r9]
 800b830:	4461      	add	r1, ip
 800b832:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b836:	fb0a c20b 	mla	r2, sl, fp, ip
 800b83a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b83e:	b289      	uxth	r1, r1
 800b840:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b844:	4577      	cmp	r7, lr
 800b846:	f849 1b04 	str.w	r1, [r9], #4
 800b84a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b84e:	d8e2      	bhi.n	800b816 <__multiply+0xb2>
 800b850:	9a01      	ldr	r2, [sp, #4]
 800b852:	f845 c002 	str.w	ip, [r5, r2]
 800b856:	9a03      	ldr	r2, [sp, #12]
 800b858:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b85c:	3304      	adds	r3, #4
 800b85e:	f1b9 0f00 	cmp.w	r9, #0
 800b862:	d020      	beq.n	800b8a6 <__multiply+0x142>
 800b864:	6829      	ldr	r1, [r5, #0]
 800b866:	f104 0c14 	add.w	ip, r4, #20
 800b86a:	46ae      	mov	lr, r5
 800b86c:	f04f 0a00 	mov.w	sl, #0
 800b870:	f8bc b000 	ldrh.w	fp, [ip]
 800b874:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b878:	fb09 220b 	mla	r2, r9, fp, r2
 800b87c:	4492      	add	sl, r2
 800b87e:	b289      	uxth	r1, r1
 800b880:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b884:	f84e 1b04 	str.w	r1, [lr], #4
 800b888:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b88c:	f8be 1000 	ldrh.w	r1, [lr]
 800b890:	0c12      	lsrs	r2, r2, #16
 800b892:	fb09 1102 	mla	r1, r9, r2, r1
 800b896:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b89a:	4567      	cmp	r7, ip
 800b89c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8a0:	d8e6      	bhi.n	800b870 <__multiply+0x10c>
 800b8a2:	9a01      	ldr	r2, [sp, #4]
 800b8a4:	50a9      	str	r1, [r5, r2]
 800b8a6:	3504      	adds	r5, #4
 800b8a8:	e79a      	b.n	800b7e0 <__multiply+0x7c>
 800b8aa:	3e01      	subs	r6, #1
 800b8ac:	e79c      	b.n	800b7e8 <__multiply+0x84>
 800b8ae:	bf00      	nop
 800b8b0:	0800d178 	.word	0x0800d178
 800b8b4:	0800d204 	.word	0x0800d204

0800b8b8 <__pow5mult>:
 800b8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8bc:	4615      	mov	r5, r2
 800b8be:	f012 0203 	ands.w	r2, r2, #3
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	460f      	mov	r7, r1
 800b8c6:	d007      	beq.n	800b8d8 <__pow5mult+0x20>
 800b8c8:	4c25      	ldr	r4, [pc, #148]	; (800b960 <__pow5mult+0xa8>)
 800b8ca:	3a01      	subs	r2, #1
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8d2:	f7ff fe51 	bl	800b578 <__multadd>
 800b8d6:	4607      	mov	r7, r0
 800b8d8:	10ad      	asrs	r5, r5, #2
 800b8da:	d03d      	beq.n	800b958 <__pow5mult+0xa0>
 800b8dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b8de:	b97c      	cbnz	r4, 800b900 <__pow5mult+0x48>
 800b8e0:	2010      	movs	r0, #16
 800b8e2:	f7ff fdbf 	bl	800b464 <malloc>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	6270      	str	r0, [r6, #36]	; 0x24
 800b8ea:	b928      	cbnz	r0, 800b8f8 <__pow5mult+0x40>
 800b8ec:	4b1d      	ldr	r3, [pc, #116]	; (800b964 <__pow5mult+0xac>)
 800b8ee:	481e      	ldr	r0, [pc, #120]	; (800b968 <__pow5mult+0xb0>)
 800b8f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b8f4:	f000 fd2a 	bl	800c34c <__assert_func>
 800b8f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8fc:	6004      	str	r4, [r0, #0]
 800b8fe:	60c4      	str	r4, [r0, #12]
 800b900:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b908:	b94c      	cbnz	r4, 800b91e <__pow5mult+0x66>
 800b90a:	f240 2171 	movw	r1, #625	; 0x271
 800b90e:	4630      	mov	r0, r6
 800b910:	f7ff ff12 	bl	800b738 <__i2b>
 800b914:	2300      	movs	r3, #0
 800b916:	f8c8 0008 	str.w	r0, [r8, #8]
 800b91a:	4604      	mov	r4, r0
 800b91c:	6003      	str	r3, [r0, #0]
 800b91e:	f04f 0900 	mov.w	r9, #0
 800b922:	07eb      	lsls	r3, r5, #31
 800b924:	d50a      	bpl.n	800b93c <__pow5mult+0x84>
 800b926:	4639      	mov	r1, r7
 800b928:	4622      	mov	r2, r4
 800b92a:	4630      	mov	r0, r6
 800b92c:	f7ff ff1a 	bl	800b764 <__multiply>
 800b930:	4639      	mov	r1, r7
 800b932:	4680      	mov	r8, r0
 800b934:	4630      	mov	r0, r6
 800b936:	f7ff fdfd 	bl	800b534 <_Bfree>
 800b93a:	4647      	mov	r7, r8
 800b93c:	106d      	asrs	r5, r5, #1
 800b93e:	d00b      	beq.n	800b958 <__pow5mult+0xa0>
 800b940:	6820      	ldr	r0, [r4, #0]
 800b942:	b938      	cbnz	r0, 800b954 <__pow5mult+0x9c>
 800b944:	4622      	mov	r2, r4
 800b946:	4621      	mov	r1, r4
 800b948:	4630      	mov	r0, r6
 800b94a:	f7ff ff0b 	bl	800b764 <__multiply>
 800b94e:	6020      	str	r0, [r4, #0]
 800b950:	f8c0 9000 	str.w	r9, [r0]
 800b954:	4604      	mov	r4, r0
 800b956:	e7e4      	b.n	800b922 <__pow5mult+0x6a>
 800b958:	4638      	mov	r0, r7
 800b95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b95e:	bf00      	nop
 800b960:	0800d350 	.word	0x0800d350
 800b964:	0800d106 	.word	0x0800d106
 800b968:	0800d204 	.word	0x0800d204

0800b96c <__lshift>:
 800b96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b970:	460c      	mov	r4, r1
 800b972:	6849      	ldr	r1, [r1, #4]
 800b974:	6923      	ldr	r3, [r4, #16]
 800b976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b97a:	68a3      	ldr	r3, [r4, #8]
 800b97c:	4607      	mov	r7, r0
 800b97e:	4691      	mov	r9, r2
 800b980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b984:	f108 0601 	add.w	r6, r8, #1
 800b988:	42b3      	cmp	r3, r6
 800b98a:	db0b      	blt.n	800b9a4 <__lshift+0x38>
 800b98c:	4638      	mov	r0, r7
 800b98e:	f7ff fd91 	bl	800b4b4 <_Balloc>
 800b992:	4605      	mov	r5, r0
 800b994:	b948      	cbnz	r0, 800b9aa <__lshift+0x3e>
 800b996:	4602      	mov	r2, r0
 800b998:	4b2a      	ldr	r3, [pc, #168]	; (800ba44 <__lshift+0xd8>)
 800b99a:	482b      	ldr	r0, [pc, #172]	; (800ba48 <__lshift+0xdc>)
 800b99c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b9a0:	f000 fcd4 	bl	800c34c <__assert_func>
 800b9a4:	3101      	adds	r1, #1
 800b9a6:	005b      	lsls	r3, r3, #1
 800b9a8:	e7ee      	b.n	800b988 <__lshift+0x1c>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f100 0114 	add.w	r1, r0, #20
 800b9b0:	f100 0210 	add.w	r2, r0, #16
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	4553      	cmp	r3, sl
 800b9b8:	db37      	blt.n	800ba2a <__lshift+0xbe>
 800b9ba:	6920      	ldr	r0, [r4, #16]
 800b9bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9c0:	f104 0314 	add.w	r3, r4, #20
 800b9c4:	f019 091f 	ands.w	r9, r9, #31
 800b9c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b9d0:	d02f      	beq.n	800ba32 <__lshift+0xc6>
 800b9d2:	f1c9 0e20 	rsb	lr, r9, #32
 800b9d6:	468a      	mov	sl, r1
 800b9d8:	f04f 0c00 	mov.w	ip, #0
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	fa02 f209 	lsl.w	r2, r2, r9
 800b9e2:	ea42 020c 	orr.w	r2, r2, ip
 800b9e6:	f84a 2b04 	str.w	r2, [sl], #4
 800b9ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ee:	4298      	cmp	r0, r3
 800b9f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b9f4:	d8f2      	bhi.n	800b9dc <__lshift+0x70>
 800b9f6:	1b03      	subs	r3, r0, r4
 800b9f8:	3b15      	subs	r3, #21
 800b9fa:	f023 0303 	bic.w	r3, r3, #3
 800b9fe:	3304      	adds	r3, #4
 800ba00:	f104 0215 	add.w	r2, r4, #21
 800ba04:	4290      	cmp	r0, r2
 800ba06:	bf38      	it	cc
 800ba08:	2304      	movcc	r3, #4
 800ba0a:	f841 c003 	str.w	ip, [r1, r3]
 800ba0e:	f1bc 0f00 	cmp.w	ip, #0
 800ba12:	d001      	beq.n	800ba18 <__lshift+0xac>
 800ba14:	f108 0602 	add.w	r6, r8, #2
 800ba18:	3e01      	subs	r6, #1
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	612e      	str	r6, [r5, #16]
 800ba1e:	4621      	mov	r1, r4
 800ba20:	f7ff fd88 	bl	800b534 <_Bfree>
 800ba24:	4628      	mov	r0, r5
 800ba26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba2e:	3301      	adds	r3, #1
 800ba30:	e7c1      	b.n	800b9b6 <__lshift+0x4a>
 800ba32:	3904      	subs	r1, #4
 800ba34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba38:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba3c:	4298      	cmp	r0, r3
 800ba3e:	d8f9      	bhi.n	800ba34 <__lshift+0xc8>
 800ba40:	e7ea      	b.n	800ba18 <__lshift+0xac>
 800ba42:	bf00      	nop
 800ba44:	0800d178 	.word	0x0800d178
 800ba48:	0800d204 	.word	0x0800d204

0800ba4c <__mcmp>:
 800ba4c:	b530      	push	{r4, r5, lr}
 800ba4e:	6902      	ldr	r2, [r0, #16]
 800ba50:	690c      	ldr	r4, [r1, #16]
 800ba52:	1b12      	subs	r2, r2, r4
 800ba54:	d10e      	bne.n	800ba74 <__mcmp+0x28>
 800ba56:	f100 0314 	add.w	r3, r0, #20
 800ba5a:	3114      	adds	r1, #20
 800ba5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba6c:	42a5      	cmp	r5, r4
 800ba6e:	d003      	beq.n	800ba78 <__mcmp+0x2c>
 800ba70:	d305      	bcc.n	800ba7e <__mcmp+0x32>
 800ba72:	2201      	movs	r2, #1
 800ba74:	4610      	mov	r0, r2
 800ba76:	bd30      	pop	{r4, r5, pc}
 800ba78:	4283      	cmp	r3, r0
 800ba7a:	d3f3      	bcc.n	800ba64 <__mcmp+0x18>
 800ba7c:	e7fa      	b.n	800ba74 <__mcmp+0x28>
 800ba7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba82:	e7f7      	b.n	800ba74 <__mcmp+0x28>

0800ba84 <__mdiff>:
 800ba84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba88:	460c      	mov	r4, r1
 800ba8a:	4606      	mov	r6, r0
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	4620      	mov	r0, r4
 800ba90:	4690      	mov	r8, r2
 800ba92:	f7ff ffdb 	bl	800ba4c <__mcmp>
 800ba96:	1e05      	subs	r5, r0, #0
 800ba98:	d110      	bne.n	800babc <__mdiff+0x38>
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f7ff fd09 	bl	800b4b4 <_Balloc>
 800baa2:	b930      	cbnz	r0, 800bab2 <__mdiff+0x2e>
 800baa4:	4b3a      	ldr	r3, [pc, #232]	; (800bb90 <__mdiff+0x10c>)
 800baa6:	4602      	mov	r2, r0
 800baa8:	f240 2132 	movw	r1, #562	; 0x232
 800baac:	4839      	ldr	r0, [pc, #228]	; (800bb94 <__mdiff+0x110>)
 800baae:	f000 fc4d 	bl	800c34c <__assert_func>
 800bab2:	2301      	movs	r3, #1
 800bab4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800babc:	bfa4      	itt	ge
 800babe:	4643      	movge	r3, r8
 800bac0:	46a0      	movge	r8, r4
 800bac2:	4630      	mov	r0, r6
 800bac4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bac8:	bfa6      	itte	ge
 800baca:	461c      	movge	r4, r3
 800bacc:	2500      	movge	r5, #0
 800bace:	2501      	movlt	r5, #1
 800bad0:	f7ff fcf0 	bl	800b4b4 <_Balloc>
 800bad4:	b920      	cbnz	r0, 800bae0 <__mdiff+0x5c>
 800bad6:	4b2e      	ldr	r3, [pc, #184]	; (800bb90 <__mdiff+0x10c>)
 800bad8:	4602      	mov	r2, r0
 800bada:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bade:	e7e5      	b.n	800baac <__mdiff+0x28>
 800bae0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bae4:	6926      	ldr	r6, [r4, #16]
 800bae6:	60c5      	str	r5, [r0, #12]
 800bae8:	f104 0914 	add.w	r9, r4, #20
 800baec:	f108 0514 	add.w	r5, r8, #20
 800baf0:	f100 0e14 	add.w	lr, r0, #20
 800baf4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800baf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bafc:	f108 0210 	add.w	r2, r8, #16
 800bb00:	46f2      	mov	sl, lr
 800bb02:	2100      	movs	r1, #0
 800bb04:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb0c:	fa1f f883 	uxth.w	r8, r3
 800bb10:	fa11 f18b 	uxtah	r1, r1, fp
 800bb14:	0c1b      	lsrs	r3, r3, #16
 800bb16:	eba1 0808 	sub.w	r8, r1, r8
 800bb1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb22:	fa1f f888 	uxth.w	r8, r8
 800bb26:	1419      	asrs	r1, r3, #16
 800bb28:	454e      	cmp	r6, r9
 800bb2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb2e:	f84a 3b04 	str.w	r3, [sl], #4
 800bb32:	d8e7      	bhi.n	800bb04 <__mdiff+0x80>
 800bb34:	1b33      	subs	r3, r6, r4
 800bb36:	3b15      	subs	r3, #21
 800bb38:	f023 0303 	bic.w	r3, r3, #3
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	3415      	adds	r4, #21
 800bb40:	42a6      	cmp	r6, r4
 800bb42:	bf38      	it	cc
 800bb44:	2304      	movcc	r3, #4
 800bb46:	441d      	add	r5, r3
 800bb48:	4473      	add	r3, lr
 800bb4a:	469e      	mov	lr, r3
 800bb4c:	462e      	mov	r6, r5
 800bb4e:	4566      	cmp	r6, ip
 800bb50:	d30e      	bcc.n	800bb70 <__mdiff+0xec>
 800bb52:	f10c 0203 	add.w	r2, ip, #3
 800bb56:	1b52      	subs	r2, r2, r5
 800bb58:	f022 0203 	bic.w	r2, r2, #3
 800bb5c:	3d03      	subs	r5, #3
 800bb5e:	45ac      	cmp	ip, r5
 800bb60:	bf38      	it	cc
 800bb62:	2200      	movcc	r2, #0
 800bb64:	441a      	add	r2, r3
 800bb66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bb6a:	b17b      	cbz	r3, 800bb8c <__mdiff+0x108>
 800bb6c:	6107      	str	r7, [r0, #16]
 800bb6e:	e7a3      	b.n	800bab8 <__mdiff+0x34>
 800bb70:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb74:	fa11 f288 	uxtah	r2, r1, r8
 800bb78:	1414      	asrs	r4, r2, #16
 800bb7a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb7e:	b292      	uxth	r2, r2
 800bb80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb84:	f84e 2b04 	str.w	r2, [lr], #4
 800bb88:	1421      	asrs	r1, r4, #16
 800bb8a:	e7e0      	b.n	800bb4e <__mdiff+0xca>
 800bb8c:	3f01      	subs	r7, #1
 800bb8e:	e7ea      	b.n	800bb66 <__mdiff+0xe2>
 800bb90:	0800d178 	.word	0x0800d178
 800bb94:	0800d204 	.word	0x0800d204

0800bb98 <__ulp>:
 800bb98:	b082      	sub	sp, #8
 800bb9a:	ed8d 0b00 	vstr	d0, [sp]
 800bb9e:	9b01      	ldr	r3, [sp, #4]
 800bba0:	4912      	ldr	r1, [pc, #72]	; (800bbec <__ulp+0x54>)
 800bba2:	4019      	ands	r1, r3
 800bba4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	dd05      	ble.n	800bbb8 <__ulp+0x20>
 800bbac:	2200      	movs	r2, #0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	ec43 2b10 	vmov	d0, r2, r3
 800bbb4:	b002      	add	sp, #8
 800bbb6:	4770      	bx	lr
 800bbb8:	4249      	negs	r1, r1
 800bbba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bbbe:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bbc2:	f04f 0200 	mov.w	r2, #0
 800bbc6:	f04f 0300 	mov.w	r3, #0
 800bbca:	da04      	bge.n	800bbd6 <__ulp+0x3e>
 800bbcc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bbd0:	fa41 f300 	asr.w	r3, r1, r0
 800bbd4:	e7ec      	b.n	800bbb0 <__ulp+0x18>
 800bbd6:	f1a0 0114 	sub.w	r1, r0, #20
 800bbda:	291e      	cmp	r1, #30
 800bbdc:	bfda      	itte	le
 800bbde:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bbe2:	fa20 f101 	lsrle.w	r1, r0, r1
 800bbe6:	2101      	movgt	r1, #1
 800bbe8:	460a      	mov	r2, r1
 800bbea:	e7e1      	b.n	800bbb0 <__ulp+0x18>
 800bbec:	7ff00000 	.word	0x7ff00000

0800bbf0 <__b2d>:
 800bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf2:	6905      	ldr	r5, [r0, #16]
 800bbf4:	f100 0714 	add.w	r7, r0, #20
 800bbf8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bbfc:	1f2e      	subs	r6, r5, #4
 800bbfe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bc02:	4620      	mov	r0, r4
 800bc04:	f7ff fd48 	bl	800b698 <__hi0bits>
 800bc08:	f1c0 0320 	rsb	r3, r0, #32
 800bc0c:	280a      	cmp	r0, #10
 800bc0e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bc8c <__b2d+0x9c>
 800bc12:	600b      	str	r3, [r1, #0]
 800bc14:	dc14      	bgt.n	800bc40 <__b2d+0x50>
 800bc16:	f1c0 0e0b 	rsb	lr, r0, #11
 800bc1a:	fa24 f10e 	lsr.w	r1, r4, lr
 800bc1e:	42b7      	cmp	r7, r6
 800bc20:	ea41 030c 	orr.w	r3, r1, ip
 800bc24:	bf34      	ite	cc
 800bc26:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bc2a:	2100      	movcs	r1, #0
 800bc2c:	3015      	adds	r0, #21
 800bc2e:	fa04 f000 	lsl.w	r0, r4, r0
 800bc32:	fa21 f10e 	lsr.w	r1, r1, lr
 800bc36:	ea40 0201 	orr.w	r2, r0, r1
 800bc3a:	ec43 2b10 	vmov	d0, r2, r3
 800bc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc40:	42b7      	cmp	r7, r6
 800bc42:	bf3a      	itte	cc
 800bc44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bc48:	f1a5 0608 	subcc.w	r6, r5, #8
 800bc4c:	2100      	movcs	r1, #0
 800bc4e:	380b      	subs	r0, #11
 800bc50:	d017      	beq.n	800bc82 <__b2d+0x92>
 800bc52:	f1c0 0c20 	rsb	ip, r0, #32
 800bc56:	fa04 f500 	lsl.w	r5, r4, r0
 800bc5a:	42be      	cmp	r6, r7
 800bc5c:	fa21 f40c 	lsr.w	r4, r1, ip
 800bc60:	ea45 0504 	orr.w	r5, r5, r4
 800bc64:	bf8c      	ite	hi
 800bc66:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bc6a:	2400      	movls	r4, #0
 800bc6c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bc70:	fa01 f000 	lsl.w	r0, r1, r0
 800bc74:	fa24 f40c 	lsr.w	r4, r4, ip
 800bc78:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc7c:	ea40 0204 	orr.w	r2, r0, r4
 800bc80:	e7db      	b.n	800bc3a <__b2d+0x4a>
 800bc82:	ea44 030c 	orr.w	r3, r4, ip
 800bc86:	460a      	mov	r2, r1
 800bc88:	e7d7      	b.n	800bc3a <__b2d+0x4a>
 800bc8a:	bf00      	nop
 800bc8c:	3ff00000 	.word	0x3ff00000

0800bc90 <__d2b>:
 800bc90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc94:	4689      	mov	r9, r1
 800bc96:	2101      	movs	r1, #1
 800bc98:	ec57 6b10 	vmov	r6, r7, d0
 800bc9c:	4690      	mov	r8, r2
 800bc9e:	f7ff fc09 	bl	800b4b4 <_Balloc>
 800bca2:	4604      	mov	r4, r0
 800bca4:	b930      	cbnz	r0, 800bcb4 <__d2b+0x24>
 800bca6:	4602      	mov	r2, r0
 800bca8:	4b25      	ldr	r3, [pc, #148]	; (800bd40 <__d2b+0xb0>)
 800bcaa:	4826      	ldr	r0, [pc, #152]	; (800bd44 <__d2b+0xb4>)
 800bcac:	f240 310a 	movw	r1, #778	; 0x30a
 800bcb0:	f000 fb4c 	bl	800c34c <__assert_func>
 800bcb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bcb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bcbc:	bb35      	cbnz	r5, 800bd0c <__d2b+0x7c>
 800bcbe:	2e00      	cmp	r6, #0
 800bcc0:	9301      	str	r3, [sp, #4]
 800bcc2:	d028      	beq.n	800bd16 <__d2b+0x86>
 800bcc4:	4668      	mov	r0, sp
 800bcc6:	9600      	str	r6, [sp, #0]
 800bcc8:	f7ff fd06 	bl	800b6d8 <__lo0bits>
 800bccc:	9900      	ldr	r1, [sp, #0]
 800bcce:	b300      	cbz	r0, 800bd12 <__d2b+0x82>
 800bcd0:	9a01      	ldr	r2, [sp, #4]
 800bcd2:	f1c0 0320 	rsb	r3, r0, #32
 800bcd6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcda:	430b      	orrs	r3, r1
 800bcdc:	40c2      	lsrs	r2, r0
 800bcde:	6163      	str	r3, [r4, #20]
 800bce0:	9201      	str	r2, [sp, #4]
 800bce2:	9b01      	ldr	r3, [sp, #4]
 800bce4:	61a3      	str	r3, [r4, #24]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	bf14      	ite	ne
 800bcea:	2202      	movne	r2, #2
 800bcec:	2201      	moveq	r2, #1
 800bcee:	6122      	str	r2, [r4, #16]
 800bcf0:	b1d5      	cbz	r5, 800bd28 <__d2b+0x98>
 800bcf2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bcf6:	4405      	add	r5, r0
 800bcf8:	f8c9 5000 	str.w	r5, [r9]
 800bcfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd00:	f8c8 0000 	str.w	r0, [r8]
 800bd04:	4620      	mov	r0, r4
 800bd06:	b003      	add	sp, #12
 800bd08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd10:	e7d5      	b.n	800bcbe <__d2b+0x2e>
 800bd12:	6161      	str	r1, [r4, #20]
 800bd14:	e7e5      	b.n	800bce2 <__d2b+0x52>
 800bd16:	a801      	add	r0, sp, #4
 800bd18:	f7ff fcde 	bl	800b6d8 <__lo0bits>
 800bd1c:	9b01      	ldr	r3, [sp, #4]
 800bd1e:	6163      	str	r3, [r4, #20]
 800bd20:	2201      	movs	r2, #1
 800bd22:	6122      	str	r2, [r4, #16]
 800bd24:	3020      	adds	r0, #32
 800bd26:	e7e3      	b.n	800bcf0 <__d2b+0x60>
 800bd28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd30:	f8c9 0000 	str.w	r0, [r9]
 800bd34:	6918      	ldr	r0, [r3, #16]
 800bd36:	f7ff fcaf 	bl	800b698 <__hi0bits>
 800bd3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd3e:	e7df      	b.n	800bd00 <__d2b+0x70>
 800bd40:	0800d178 	.word	0x0800d178
 800bd44:	0800d204 	.word	0x0800d204

0800bd48 <__ratio>:
 800bd48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	4688      	mov	r8, r1
 800bd4e:	4669      	mov	r1, sp
 800bd50:	4681      	mov	r9, r0
 800bd52:	f7ff ff4d 	bl	800bbf0 <__b2d>
 800bd56:	a901      	add	r1, sp, #4
 800bd58:	4640      	mov	r0, r8
 800bd5a:	ec55 4b10 	vmov	r4, r5, d0
 800bd5e:	ee10 aa10 	vmov	sl, s0
 800bd62:	f7ff ff45 	bl	800bbf0 <__b2d>
 800bd66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd6a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bd6e:	1a59      	subs	r1, r3, r1
 800bd70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bd7a:	ec57 6b10 	vmov	r6, r7, d0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	bfd6      	itet	le
 800bd82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd86:	462a      	movgt	r2, r5
 800bd88:	463a      	movle	r2, r7
 800bd8a:	46ab      	mov	fp, r5
 800bd8c:	bfd6      	itet	le
 800bd8e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bd92:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bd96:	ee00 3a90 	vmovle	s1, r3
 800bd9a:	ec4b ab17 	vmov	d7, sl, fp
 800bd9e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bda2:	b003      	add	sp, #12
 800bda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bda8 <__copybits>:
 800bda8:	3901      	subs	r1, #1
 800bdaa:	b570      	push	{r4, r5, r6, lr}
 800bdac:	1149      	asrs	r1, r1, #5
 800bdae:	6914      	ldr	r4, [r2, #16]
 800bdb0:	3101      	adds	r1, #1
 800bdb2:	f102 0314 	add.w	r3, r2, #20
 800bdb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bdba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bdbe:	1f05      	subs	r5, r0, #4
 800bdc0:	42a3      	cmp	r3, r4
 800bdc2:	d30c      	bcc.n	800bdde <__copybits+0x36>
 800bdc4:	1aa3      	subs	r3, r4, r2
 800bdc6:	3b11      	subs	r3, #17
 800bdc8:	f023 0303 	bic.w	r3, r3, #3
 800bdcc:	3211      	adds	r2, #17
 800bdce:	42a2      	cmp	r2, r4
 800bdd0:	bf88      	it	hi
 800bdd2:	2300      	movhi	r3, #0
 800bdd4:	4418      	add	r0, r3
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	4288      	cmp	r0, r1
 800bdda:	d305      	bcc.n	800bde8 <__copybits+0x40>
 800bddc:	bd70      	pop	{r4, r5, r6, pc}
 800bdde:	f853 6b04 	ldr.w	r6, [r3], #4
 800bde2:	f845 6f04 	str.w	r6, [r5, #4]!
 800bde6:	e7eb      	b.n	800bdc0 <__copybits+0x18>
 800bde8:	f840 3b04 	str.w	r3, [r0], #4
 800bdec:	e7f4      	b.n	800bdd8 <__copybits+0x30>

0800bdee <__any_on>:
 800bdee:	f100 0214 	add.w	r2, r0, #20
 800bdf2:	6900      	ldr	r0, [r0, #16]
 800bdf4:	114b      	asrs	r3, r1, #5
 800bdf6:	4298      	cmp	r0, r3
 800bdf8:	b510      	push	{r4, lr}
 800bdfa:	db11      	blt.n	800be20 <__any_on+0x32>
 800bdfc:	dd0a      	ble.n	800be14 <__any_on+0x26>
 800bdfe:	f011 011f 	ands.w	r1, r1, #31
 800be02:	d007      	beq.n	800be14 <__any_on+0x26>
 800be04:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be08:	fa24 f001 	lsr.w	r0, r4, r1
 800be0c:	fa00 f101 	lsl.w	r1, r0, r1
 800be10:	428c      	cmp	r4, r1
 800be12:	d10b      	bne.n	800be2c <__any_on+0x3e>
 800be14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be18:	4293      	cmp	r3, r2
 800be1a:	d803      	bhi.n	800be24 <__any_on+0x36>
 800be1c:	2000      	movs	r0, #0
 800be1e:	bd10      	pop	{r4, pc}
 800be20:	4603      	mov	r3, r0
 800be22:	e7f7      	b.n	800be14 <__any_on+0x26>
 800be24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be28:	2900      	cmp	r1, #0
 800be2a:	d0f5      	beq.n	800be18 <__any_on+0x2a>
 800be2c:	2001      	movs	r0, #1
 800be2e:	e7f6      	b.n	800be1e <__any_on+0x30>

0800be30 <_calloc_r>:
 800be30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be32:	fba1 2402 	umull	r2, r4, r1, r2
 800be36:	b94c      	cbnz	r4, 800be4c <_calloc_r+0x1c>
 800be38:	4611      	mov	r1, r2
 800be3a:	9201      	str	r2, [sp, #4]
 800be3c:	f000 f87a 	bl	800bf34 <_malloc_r>
 800be40:	9a01      	ldr	r2, [sp, #4]
 800be42:	4605      	mov	r5, r0
 800be44:	b930      	cbnz	r0, 800be54 <_calloc_r+0x24>
 800be46:	4628      	mov	r0, r5
 800be48:	b003      	add	sp, #12
 800be4a:	bd30      	pop	{r4, r5, pc}
 800be4c:	220c      	movs	r2, #12
 800be4e:	6002      	str	r2, [r0, #0]
 800be50:	2500      	movs	r5, #0
 800be52:	e7f8      	b.n	800be46 <_calloc_r+0x16>
 800be54:	4621      	mov	r1, r4
 800be56:	f7fc fcc7 	bl	80087e8 <memset>
 800be5a:	e7f4      	b.n	800be46 <_calloc_r+0x16>

0800be5c <_free_r>:
 800be5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be5e:	2900      	cmp	r1, #0
 800be60:	d044      	beq.n	800beec <_free_r+0x90>
 800be62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be66:	9001      	str	r0, [sp, #4]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f1a1 0404 	sub.w	r4, r1, #4
 800be6e:	bfb8      	it	lt
 800be70:	18e4      	addlt	r4, r4, r3
 800be72:	f000 fab5 	bl	800c3e0 <__malloc_lock>
 800be76:	4a1e      	ldr	r2, [pc, #120]	; (800bef0 <_free_r+0x94>)
 800be78:	9801      	ldr	r0, [sp, #4]
 800be7a:	6813      	ldr	r3, [r2, #0]
 800be7c:	b933      	cbnz	r3, 800be8c <_free_r+0x30>
 800be7e:	6063      	str	r3, [r4, #4]
 800be80:	6014      	str	r4, [r2, #0]
 800be82:	b003      	add	sp, #12
 800be84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be88:	f000 bab0 	b.w	800c3ec <__malloc_unlock>
 800be8c:	42a3      	cmp	r3, r4
 800be8e:	d908      	bls.n	800bea2 <_free_r+0x46>
 800be90:	6825      	ldr	r5, [r4, #0]
 800be92:	1961      	adds	r1, r4, r5
 800be94:	428b      	cmp	r3, r1
 800be96:	bf01      	itttt	eq
 800be98:	6819      	ldreq	r1, [r3, #0]
 800be9a:	685b      	ldreq	r3, [r3, #4]
 800be9c:	1949      	addeq	r1, r1, r5
 800be9e:	6021      	streq	r1, [r4, #0]
 800bea0:	e7ed      	b.n	800be7e <_free_r+0x22>
 800bea2:	461a      	mov	r2, r3
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	b10b      	cbz	r3, 800beac <_free_r+0x50>
 800bea8:	42a3      	cmp	r3, r4
 800beaa:	d9fa      	bls.n	800bea2 <_free_r+0x46>
 800beac:	6811      	ldr	r1, [r2, #0]
 800beae:	1855      	adds	r5, r2, r1
 800beb0:	42a5      	cmp	r5, r4
 800beb2:	d10b      	bne.n	800becc <_free_r+0x70>
 800beb4:	6824      	ldr	r4, [r4, #0]
 800beb6:	4421      	add	r1, r4
 800beb8:	1854      	adds	r4, r2, r1
 800beba:	42a3      	cmp	r3, r4
 800bebc:	6011      	str	r1, [r2, #0]
 800bebe:	d1e0      	bne.n	800be82 <_free_r+0x26>
 800bec0:	681c      	ldr	r4, [r3, #0]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	6053      	str	r3, [r2, #4]
 800bec6:	4421      	add	r1, r4
 800bec8:	6011      	str	r1, [r2, #0]
 800beca:	e7da      	b.n	800be82 <_free_r+0x26>
 800becc:	d902      	bls.n	800bed4 <_free_r+0x78>
 800bece:	230c      	movs	r3, #12
 800bed0:	6003      	str	r3, [r0, #0]
 800bed2:	e7d6      	b.n	800be82 <_free_r+0x26>
 800bed4:	6825      	ldr	r5, [r4, #0]
 800bed6:	1961      	adds	r1, r4, r5
 800bed8:	428b      	cmp	r3, r1
 800beda:	bf04      	itt	eq
 800bedc:	6819      	ldreq	r1, [r3, #0]
 800bede:	685b      	ldreq	r3, [r3, #4]
 800bee0:	6063      	str	r3, [r4, #4]
 800bee2:	bf04      	itt	eq
 800bee4:	1949      	addeq	r1, r1, r5
 800bee6:	6021      	streq	r1, [r4, #0]
 800bee8:	6054      	str	r4, [r2, #4]
 800beea:	e7ca      	b.n	800be82 <_free_r+0x26>
 800beec:	b003      	add	sp, #12
 800beee:	bd30      	pop	{r4, r5, pc}
 800bef0:	24000488 	.word	0x24000488

0800bef4 <sbrk_aligned>:
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	4e0e      	ldr	r6, [pc, #56]	; (800bf30 <sbrk_aligned+0x3c>)
 800bef8:	460c      	mov	r4, r1
 800befa:	6831      	ldr	r1, [r6, #0]
 800befc:	4605      	mov	r5, r0
 800befe:	b911      	cbnz	r1, 800bf06 <sbrk_aligned+0x12>
 800bf00:	f000 f9f2 	bl	800c2e8 <_sbrk_r>
 800bf04:	6030      	str	r0, [r6, #0]
 800bf06:	4621      	mov	r1, r4
 800bf08:	4628      	mov	r0, r5
 800bf0a:	f000 f9ed 	bl	800c2e8 <_sbrk_r>
 800bf0e:	1c43      	adds	r3, r0, #1
 800bf10:	d00a      	beq.n	800bf28 <sbrk_aligned+0x34>
 800bf12:	1cc4      	adds	r4, r0, #3
 800bf14:	f024 0403 	bic.w	r4, r4, #3
 800bf18:	42a0      	cmp	r0, r4
 800bf1a:	d007      	beq.n	800bf2c <sbrk_aligned+0x38>
 800bf1c:	1a21      	subs	r1, r4, r0
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f000 f9e2 	bl	800c2e8 <_sbrk_r>
 800bf24:	3001      	adds	r0, #1
 800bf26:	d101      	bne.n	800bf2c <sbrk_aligned+0x38>
 800bf28:	f04f 34ff 	mov.w	r4, #4294967295
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	2400048c 	.word	0x2400048c

0800bf34 <_malloc_r>:
 800bf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf38:	1ccd      	adds	r5, r1, #3
 800bf3a:	f025 0503 	bic.w	r5, r5, #3
 800bf3e:	3508      	adds	r5, #8
 800bf40:	2d0c      	cmp	r5, #12
 800bf42:	bf38      	it	cc
 800bf44:	250c      	movcc	r5, #12
 800bf46:	2d00      	cmp	r5, #0
 800bf48:	4607      	mov	r7, r0
 800bf4a:	db01      	blt.n	800bf50 <_malloc_r+0x1c>
 800bf4c:	42a9      	cmp	r1, r5
 800bf4e:	d905      	bls.n	800bf5c <_malloc_r+0x28>
 800bf50:	230c      	movs	r3, #12
 800bf52:	603b      	str	r3, [r7, #0]
 800bf54:	2600      	movs	r6, #0
 800bf56:	4630      	mov	r0, r6
 800bf58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf5c:	4e2e      	ldr	r6, [pc, #184]	; (800c018 <_malloc_r+0xe4>)
 800bf5e:	f000 fa3f 	bl	800c3e0 <__malloc_lock>
 800bf62:	6833      	ldr	r3, [r6, #0]
 800bf64:	461c      	mov	r4, r3
 800bf66:	bb34      	cbnz	r4, 800bfb6 <_malloc_r+0x82>
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	f7ff ffc2 	bl	800bef4 <sbrk_aligned>
 800bf70:	1c43      	adds	r3, r0, #1
 800bf72:	4604      	mov	r4, r0
 800bf74:	d14d      	bne.n	800c012 <_malloc_r+0xde>
 800bf76:	6834      	ldr	r4, [r6, #0]
 800bf78:	4626      	mov	r6, r4
 800bf7a:	2e00      	cmp	r6, #0
 800bf7c:	d140      	bne.n	800c000 <_malloc_r+0xcc>
 800bf7e:	6823      	ldr	r3, [r4, #0]
 800bf80:	4631      	mov	r1, r6
 800bf82:	4638      	mov	r0, r7
 800bf84:	eb04 0803 	add.w	r8, r4, r3
 800bf88:	f000 f9ae 	bl	800c2e8 <_sbrk_r>
 800bf8c:	4580      	cmp	r8, r0
 800bf8e:	d13a      	bne.n	800c006 <_malloc_r+0xd2>
 800bf90:	6821      	ldr	r1, [r4, #0]
 800bf92:	3503      	adds	r5, #3
 800bf94:	1a6d      	subs	r5, r5, r1
 800bf96:	f025 0503 	bic.w	r5, r5, #3
 800bf9a:	3508      	adds	r5, #8
 800bf9c:	2d0c      	cmp	r5, #12
 800bf9e:	bf38      	it	cc
 800bfa0:	250c      	movcc	r5, #12
 800bfa2:	4629      	mov	r1, r5
 800bfa4:	4638      	mov	r0, r7
 800bfa6:	f7ff ffa5 	bl	800bef4 <sbrk_aligned>
 800bfaa:	3001      	adds	r0, #1
 800bfac:	d02b      	beq.n	800c006 <_malloc_r+0xd2>
 800bfae:	6823      	ldr	r3, [r4, #0]
 800bfb0:	442b      	add	r3, r5
 800bfb2:	6023      	str	r3, [r4, #0]
 800bfb4:	e00e      	b.n	800bfd4 <_malloc_r+0xa0>
 800bfb6:	6822      	ldr	r2, [r4, #0]
 800bfb8:	1b52      	subs	r2, r2, r5
 800bfba:	d41e      	bmi.n	800bffa <_malloc_r+0xc6>
 800bfbc:	2a0b      	cmp	r2, #11
 800bfbe:	d916      	bls.n	800bfee <_malloc_r+0xba>
 800bfc0:	1961      	adds	r1, r4, r5
 800bfc2:	42a3      	cmp	r3, r4
 800bfc4:	6025      	str	r5, [r4, #0]
 800bfc6:	bf18      	it	ne
 800bfc8:	6059      	strne	r1, [r3, #4]
 800bfca:	6863      	ldr	r3, [r4, #4]
 800bfcc:	bf08      	it	eq
 800bfce:	6031      	streq	r1, [r6, #0]
 800bfd0:	5162      	str	r2, [r4, r5]
 800bfd2:	604b      	str	r3, [r1, #4]
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	f104 060b 	add.w	r6, r4, #11
 800bfda:	f000 fa07 	bl	800c3ec <__malloc_unlock>
 800bfde:	f026 0607 	bic.w	r6, r6, #7
 800bfe2:	1d23      	adds	r3, r4, #4
 800bfe4:	1af2      	subs	r2, r6, r3
 800bfe6:	d0b6      	beq.n	800bf56 <_malloc_r+0x22>
 800bfe8:	1b9b      	subs	r3, r3, r6
 800bfea:	50a3      	str	r3, [r4, r2]
 800bfec:	e7b3      	b.n	800bf56 <_malloc_r+0x22>
 800bfee:	6862      	ldr	r2, [r4, #4]
 800bff0:	42a3      	cmp	r3, r4
 800bff2:	bf0c      	ite	eq
 800bff4:	6032      	streq	r2, [r6, #0]
 800bff6:	605a      	strne	r2, [r3, #4]
 800bff8:	e7ec      	b.n	800bfd4 <_malloc_r+0xa0>
 800bffa:	4623      	mov	r3, r4
 800bffc:	6864      	ldr	r4, [r4, #4]
 800bffe:	e7b2      	b.n	800bf66 <_malloc_r+0x32>
 800c000:	4634      	mov	r4, r6
 800c002:	6876      	ldr	r6, [r6, #4]
 800c004:	e7b9      	b.n	800bf7a <_malloc_r+0x46>
 800c006:	230c      	movs	r3, #12
 800c008:	603b      	str	r3, [r7, #0]
 800c00a:	4638      	mov	r0, r7
 800c00c:	f000 f9ee 	bl	800c3ec <__malloc_unlock>
 800c010:	e7a1      	b.n	800bf56 <_malloc_r+0x22>
 800c012:	6025      	str	r5, [r4, #0]
 800c014:	e7de      	b.n	800bfd4 <_malloc_r+0xa0>
 800c016:	bf00      	nop
 800c018:	24000488 	.word	0x24000488

0800c01c <__ssputs_r>:
 800c01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c020:	688e      	ldr	r6, [r1, #8]
 800c022:	429e      	cmp	r6, r3
 800c024:	4682      	mov	sl, r0
 800c026:	460c      	mov	r4, r1
 800c028:	4690      	mov	r8, r2
 800c02a:	461f      	mov	r7, r3
 800c02c:	d838      	bhi.n	800c0a0 <__ssputs_r+0x84>
 800c02e:	898a      	ldrh	r2, [r1, #12]
 800c030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c034:	d032      	beq.n	800c09c <__ssputs_r+0x80>
 800c036:	6825      	ldr	r5, [r4, #0]
 800c038:	6909      	ldr	r1, [r1, #16]
 800c03a:	eba5 0901 	sub.w	r9, r5, r1
 800c03e:	6965      	ldr	r5, [r4, #20]
 800c040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c044:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c048:	3301      	adds	r3, #1
 800c04a:	444b      	add	r3, r9
 800c04c:	106d      	asrs	r5, r5, #1
 800c04e:	429d      	cmp	r5, r3
 800c050:	bf38      	it	cc
 800c052:	461d      	movcc	r5, r3
 800c054:	0553      	lsls	r3, r2, #21
 800c056:	d531      	bpl.n	800c0bc <__ssputs_r+0xa0>
 800c058:	4629      	mov	r1, r5
 800c05a:	f7ff ff6b 	bl	800bf34 <_malloc_r>
 800c05e:	4606      	mov	r6, r0
 800c060:	b950      	cbnz	r0, 800c078 <__ssputs_r+0x5c>
 800c062:	230c      	movs	r3, #12
 800c064:	f8ca 3000 	str.w	r3, [sl]
 800c068:	89a3      	ldrh	r3, [r4, #12]
 800c06a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c06e:	81a3      	strh	r3, [r4, #12]
 800c070:	f04f 30ff 	mov.w	r0, #4294967295
 800c074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c078:	6921      	ldr	r1, [r4, #16]
 800c07a:	464a      	mov	r2, r9
 800c07c:	f7ff fa0c 	bl	800b498 <memcpy>
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c08a:	81a3      	strh	r3, [r4, #12]
 800c08c:	6126      	str	r6, [r4, #16]
 800c08e:	6165      	str	r5, [r4, #20]
 800c090:	444e      	add	r6, r9
 800c092:	eba5 0509 	sub.w	r5, r5, r9
 800c096:	6026      	str	r6, [r4, #0]
 800c098:	60a5      	str	r5, [r4, #8]
 800c09a:	463e      	mov	r6, r7
 800c09c:	42be      	cmp	r6, r7
 800c09e:	d900      	bls.n	800c0a2 <__ssputs_r+0x86>
 800c0a0:	463e      	mov	r6, r7
 800c0a2:	6820      	ldr	r0, [r4, #0]
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	4641      	mov	r1, r8
 800c0a8:	f000 f980 	bl	800c3ac <memmove>
 800c0ac:	68a3      	ldr	r3, [r4, #8]
 800c0ae:	1b9b      	subs	r3, r3, r6
 800c0b0:	60a3      	str	r3, [r4, #8]
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	4433      	add	r3, r6
 800c0b6:	6023      	str	r3, [r4, #0]
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	e7db      	b.n	800c074 <__ssputs_r+0x58>
 800c0bc:	462a      	mov	r2, r5
 800c0be:	f000 f99b 	bl	800c3f8 <_realloc_r>
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d1e1      	bne.n	800c08c <__ssputs_r+0x70>
 800c0c8:	6921      	ldr	r1, [r4, #16]
 800c0ca:	4650      	mov	r0, sl
 800c0cc:	f7ff fec6 	bl	800be5c <_free_r>
 800c0d0:	e7c7      	b.n	800c062 <__ssputs_r+0x46>
	...

0800c0d4 <_svfiprintf_r>:
 800c0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d8:	4698      	mov	r8, r3
 800c0da:	898b      	ldrh	r3, [r1, #12]
 800c0dc:	061b      	lsls	r3, r3, #24
 800c0de:	b09d      	sub	sp, #116	; 0x74
 800c0e0:	4607      	mov	r7, r0
 800c0e2:	460d      	mov	r5, r1
 800c0e4:	4614      	mov	r4, r2
 800c0e6:	d50e      	bpl.n	800c106 <_svfiprintf_r+0x32>
 800c0e8:	690b      	ldr	r3, [r1, #16]
 800c0ea:	b963      	cbnz	r3, 800c106 <_svfiprintf_r+0x32>
 800c0ec:	2140      	movs	r1, #64	; 0x40
 800c0ee:	f7ff ff21 	bl	800bf34 <_malloc_r>
 800c0f2:	6028      	str	r0, [r5, #0]
 800c0f4:	6128      	str	r0, [r5, #16]
 800c0f6:	b920      	cbnz	r0, 800c102 <_svfiprintf_r+0x2e>
 800c0f8:	230c      	movs	r3, #12
 800c0fa:	603b      	str	r3, [r7, #0]
 800c0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c100:	e0d1      	b.n	800c2a6 <_svfiprintf_r+0x1d2>
 800c102:	2340      	movs	r3, #64	; 0x40
 800c104:	616b      	str	r3, [r5, #20]
 800c106:	2300      	movs	r3, #0
 800c108:	9309      	str	r3, [sp, #36]	; 0x24
 800c10a:	2320      	movs	r3, #32
 800c10c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c110:	f8cd 800c 	str.w	r8, [sp, #12]
 800c114:	2330      	movs	r3, #48	; 0x30
 800c116:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c2c0 <_svfiprintf_r+0x1ec>
 800c11a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c11e:	f04f 0901 	mov.w	r9, #1
 800c122:	4623      	mov	r3, r4
 800c124:	469a      	mov	sl, r3
 800c126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c12a:	b10a      	cbz	r2, 800c130 <_svfiprintf_r+0x5c>
 800c12c:	2a25      	cmp	r2, #37	; 0x25
 800c12e:	d1f9      	bne.n	800c124 <_svfiprintf_r+0x50>
 800c130:	ebba 0b04 	subs.w	fp, sl, r4
 800c134:	d00b      	beq.n	800c14e <_svfiprintf_r+0x7a>
 800c136:	465b      	mov	r3, fp
 800c138:	4622      	mov	r2, r4
 800c13a:	4629      	mov	r1, r5
 800c13c:	4638      	mov	r0, r7
 800c13e:	f7ff ff6d 	bl	800c01c <__ssputs_r>
 800c142:	3001      	adds	r0, #1
 800c144:	f000 80aa 	beq.w	800c29c <_svfiprintf_r+0x1c8>
 800c148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c14a:	445a      	add	r2, fp
 800c14c:	9209      	str	r2, [sp, #36]	; 0x24
 800c14e:	f89a 3000 	ldrb.w	r3, [sl]
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 80a2 	beq.w	800c29c <_svfiprintf_r+0x1c8>
 800c158:	2300      	movs	r3, #0
 800c15a:	f04f 32ff 	mov.w	r2, #4294967295
 800c15e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c162:	f10a 0a01 	add.w	sl, sl, #1
 800c166:	9304      	str	r3, [sp, #16]
 800c168:	9307      	str	r3, [sp, #28]
 800c16a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c16e:	931a      	str	r3, [sp, #104]	; 0x68
 800c170:	4654      	mov	r4, sl
 800c172:	2205      	movs	r2, #5
 800c174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c178:	4851      	ldr	r0, [pc, #324]	; (800c2c0 <_svfiprintf_r+0x1ec>)
 800c17a:	f7f4 f8b9 	bl	80002f0 <memchr>
 800c17e:	9a04      	ldr	r2, [sp, #16]
 800c180:	b9d8      	cbnz	r0, 800c1ba <_svfiprintf_r+0xe6>
 800c182:	06d0      	lsls	r0, r2, #27
 800c184:	bf44      	itt	mi
 800c186:	2320      	movmi	r3, #32
 800c188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c18c:	0711      	lsls	r1, r2, #28
 800c18e:	bf44      	itt	mi
 800c190:	232b      	movmi	r3, #43	; 0x2b
 800c192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c196:	f89a 3000 	ldrb.w	r3, [sl]
 800c19a:	2b2a      	cmp	r3, #42	; 0x2a
 800c19c:	d015      	beq.n	800c1ca <_svfiprintf_r+0xf6>
 800c19e:	9a07      	ldr	r2, [sp, #28]
 800c1a0:	4654      	mov	r4, sl
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	f04f 0c0a 	mov.w	ip, #10
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ae:	3b30      	subs	r3, #48	; 0x30
 800c1b0:	2b09      	cmp	r3, #9
 800c1b2:	d94e      	bls.n	800c252 <_svfiprintf_r+0x17e>
 800c1b4:	b1b0      	cbz	r0, 800c1e4 <_svfiprintf_r+0x110>
 800c1b6:	9207      	str	r2, [sp, #28]
 800c1b8:	e014      	b.n	800c1e4 <_svfiprintf_r+0x110>
 800c1ba:	eba0 0308 	sub.w	r3, r0, r8
 800c1be:	fa09 f303 	lsl.w	r3, r9, r3
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	9304      	str	r3, [sp, #16]
 800c1c6:	46a2      	mov	sl, r4
 800c1c8:	e7d2      	b.n	800c170 <_svfiprintf_r+0x9c>
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	1d19      	adds	r1, r3, #4
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	9103      	str	r1, [sp, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	bfbb      	ittet	lt
 800c1d6:	425b      	neglt	r3, r3
 800c1d8:	f042 0202 	orrlt.w	r2, r2, #2
 800c1dc:	9307      	strge	r3, [sp, #28]
 800c1de:	9307      	strlt	r3, [sp, #28]
 800c1e0:	bfb8      	it	lt
 800c1e2:	9204      	strlt	r2, [sp, #16]
 800c1e4:	7823      	ldrb	r3, [r4, #0]
 800c1e6:	2b2e      	cmp	r3, #46	; 0x2e
 800c1e8:	d10c      	bne.n	800c204 <_svfiprintf_r+0x130>
 800c1ea:	7863      	ldrb	r3, [r4, #1]
 800c1ec:	2b2a      	cmp	r3, #42	; 0x2a
 800c1ee:	d135      	bne.n	800c25c <_svfiprintf_r+0x188>
 800c1f0:	9b03      	ldr	r3, [sp, #12]
 800c1f2:	1d1a      	adds	r2, r3, #4
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	9203      	str	r2, [sp, #12]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	bfb8      	it	lt
 800c1fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c200:	3402      	adds	r4, #2
 800c202:	9305      	str	r3, [sp, #20]
 800c204:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2d0 <_svfiprintf_r+0x1fc>
 800c208:	7821      	ldrb	r1, [r4, #0]
 800c20a:	2203      	movs	r2, #3
 800c20c:	4650      	mov	r0, sl
 800c20e:	f7f4 f86f 	bl	80002f0 <memchr>
 800c212:	b140      	cbz	r0, 800c226 <_svfiprintf_r+0x152>
 800c214:	2340      	movs	r3, #64	; 0x40
 800c216:	eba0 000a 	sub.w	r0, r0, sl
 800c21a:	fa03 f000 	lsl.w	r0, r3, r0
 800c21e:	9b04      	ldr	r3, [sp, #16]
 800c220:	4303      	orrs	r3, r0
 800c222:	3401      	adds	r4, #1
 800c224:	9304      	str	r3, [sp, #16]
 800c226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c22a:	4826      	ldr	r0, [pc, #152]	; (800c2c4 <_svfiprintf_r+0x1f0>)
 800c22c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c230:	2206      	movs	r2, #6
 800c232:	f7f4 f85d 	bl	80002f0 <memchr>
 800c236:	2800      	cmp	r0, #0
 800c238:	d038      	beq.n	800c2ac <_svfiprintf_r+0x1d8>
 800c23a:	4b23      	ldr	r3, [pc, #140]	; (800c2c8 <_svfiprintf_r+0x1f4>)
 800c23c:	bb1b      	cbnz	r3, 800c286 <_svfiprintf_r+0x1b2>
 800c23e:	9b03      	ldr	r3, [sp, #12]
 800c240:	3307      	adds	r3, #7
 800c242:	f023 0307 	bic.w	r3, r3, #7
 800c246:	3308      	adds	r3, #8
 800c248:	9303      	str	r3, [sp, #12]
 800c24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c24c:	4433      	add	r3, r6
 800c24e:	9309      	str	r3, [sp, #36]	; 0x24
 800c250:	e767      	b.n	800c122 <_svfiprintf_r+0x4e>
 800c252:	fb0c 3202 	mla	r2, ip, r2, r3
 800c256:	460c      	mov	r4, r1
 800c258:	2001      	movs	r0, #1
 800c25a:	e7a5      	b.n	800c1a8 <_svfiprintf_r+0xd4>
 800c25c:	2300      	movs	r3, #0
 800c25e:	3401      	adds	r4, #1
 800c260:	9305      	str	r3, [sp, #20]
 800c262:	4619      	mov	r1, r3
 800c264:	f04f 0c0a 	mov.w	ip, #10
 800c268:	4620      	mov	r0, r4
 800c26a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c26e:	3a30      	subs	r2, #48	; 0x30
 800c270:	2a09      	cmp	r2, #9
 800c272:	d903      	bls.n	800c27c <_svfiprintf_r+0x1a8>
 800c274:	2b00      	cmp	r3, #0
 800c276:	d0c5      	beq.n	800c204 <_svfiprintf_r+0x130>
 800c278:	9105      	str	r1, [sp, #20]
 800c27a:	e7c3      	b.n	800c204 <_svfiprintf_r+0x130>
 800c27c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c280:	4604      	mov	r4, r0
 800c282:	2301      	movs	r3, #1
 800c284:	e7f0      	b.n	800c268 <_svfiprintf_r+0x194>
 800c286:	ab03      	add	r3, sp, #12
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	462a      	mov	r2, r5
 800c28c:	4b0f      	ldr	r3, [pc, #60]	; (800c2cc <_svfiprintf_r+0x1f8>)
 800c28e:	a904      	add	r1, sp, #16
 800c290:	4638      	mov	r0, r7
 800c292:	f7fc fb41 	bl	8008918 <_printf_float>
 800c296:	1c42      	adds	r2, r0, #1
 800c298:	4606      	mov	r6, r0
 800c29a:	d1d6      	bne.n	800c24a <_svfiprintf_r+0x176>
 800c29c:	89ab      	ldrh	r3, [r5, #12]
 800c29e:	065b      	lsls	r3, r3, #25
 800c2a0:	f53f af2c 	bmi.w	800c0fc <_svfiprintf_r+0x28>
 800c2a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2a6:	b01d      	add	sp, #116	; 0x74
 800c2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ac:	ab03      	add	r3, sp, #12
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	462a      	mov	r2, r5
 800c2b2:	4b06      	ldr	r3, [pc, #24]	; (800c2cc <_svfiprintf_r+0x1f8>)
 800c2b4:	a904      	add	r1, sp, #16
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	f7fc fdba 	bl	8008e30 <_printf_i>
 800c2bc:	e7eb      	b.n	800c296 <_svfiprintf_r+0x1c2>
 800c2be:	bf00      	nop
 800c2c0:	0800d35c 	.word	0x0800d35c
 800c2c4:	0800d366 	.word	0x0800d366
 800c2c8:	08008919 	.word	0x08008919
 800c2cc:	0800c01d 	.word	0x0800c01d
 800c2d0:	0800d362 	.word	0x0800d362
 800c2d4:	00000000 	.word	0x00000000

0800c2d8 <nan>:
 800c2d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2e0 <nan+0x8>
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	00000000 	.word	0x00000000
 800c2e4:	7ff80000 	.word	0x7ff80000

0800c2e8 <_sbrk_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d06      	ldr	r5, [pc, #24]	; (800c304 <_sbrk_r+0x1c>)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	602b      	str	r3, [r5, #0]
 800c2f4:	f7f5 fc96 	bl	8001c24 <_sbrk>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_sbrk_r+0x1a>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_sbrk_r+0x1a>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	24000490 	.word	0x24000490

0800c308 <strncmp>:
 800c308:	b510      	push	{r4, lr}
 800c30a:	b17a      	cbz	r2, 800c32c <strncmp+0x24>
 800c30c:	4603      	mov	r3, r0
 800c30e:	3901      	subs	r1, #1
 800c310:	1884      	adds	r4, r0, r2
 800c312:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c316:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c31a:	4290      	cmp	r0, r2
 800c31c:	d101      	bne.n	800c322 <strncmp+0x1a>
 800c31e:	42a3      	cmp	r3, r4
 800c320:	d101      	bne.n	800c326 <strncmp+0x1e>
 800c322:	1a80      	subs	r0, r0, r2
 800c324:	bd10      	pop	{r4, pc}
 800c326:	2800      	cmp	r0, #0
 800c328:	d1f3      	bne.n	800c312 <strncmp+0xa>
 800c32a:	e7fa      	b.n	800c322 <strncmp+0x1a>
 800c32c:	4610      	mov	r0, r2
 800c32e:	e7f9      	b.n	800c324 <strncmp+0x1c>

0800c330 <__ascii_wctomb>:
 800c330:	b149      	cbz	r1, 800c346 <__ascii_wctomb+0x16>
 800c332:	2aff      	cmp	r2, #255	; 0xff
 800c334:	bf85      	ittet	hi
 800c336:	238a      	movhi	r3, #138	; 0x8a
 800c338:	6003      	strhi	r3, [r0, #0]
 800c33a:	700a      	strbls	r2, [r1, #0]
 800c33c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c340:	bf98      	it	ls
 800c342:	2001      	movls	r0, #1
 800c344:	4770      	bx	lr
 800c346:	4608      	mov	r0, r1
 800c348:	4770      	bx	lr
	...

0800c34c <__assert_func>:
 800c34c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c34e:	4614      	mov	r4, r2
 800c350:	461a      	mov	r2, r3
 800c352:	4b09      	ldr	r3, [pc, #36]	; (800c378 <__assert_func+0x2c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4605      	mov	r5, r0
 800c358:	68d8      	ldr	r0, [r3, #12]
 800c35a:	b14c      	cbz	r4, 800c370 <__assert_func+0x24>
 800c35c:	4b07      	ldr	r3, [pc, #28]	; (800c37c <__assert_func+0x30>)
 800c35e:	9100      	str	r1, [sp, #0]
 800c360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c364:	4906      	ldr	r1, [pc, #24]	; (800c380 <__assert_func+0x34>)
 800c366:	462b      	mov	r3, r5
 800c368:	f000 f80e 	bl	800c388 <fiprintf>
 800c36c:	f000 fa8c 	bl	800c888 <abort>
 800c370:	4b04      	ldr	r3, [pc, #16]	; (800c384 <__assert_func+0x38>)
 800c372:	461c      	mov	r4, r3
 800c374:	e7f3      	b.n	800c35e <__assert_func+0x12>
 800c376:	bf00      	nop
 800c378:	24000028 	.word	0x24000028
 800c37c:	0800d36d 	.word	0x0800d36d
 800c380:	0800d37a 	.word	0x0800d37a
 800c384:	0800d3a8 	.word	0x0800d3a8

0800c388 <fiprintf>:
 800c388:	b40e      	push	{r1, r2, r3}
 800c38a:	b503      	push	{r0, r1, lr}
 800c38c:	4601      	mov	r1, r0
 800c38e:	ab03      	add	r3, sp, #12
 800c390:	4805      	ldr	r0, [pc, #20]	; (800c3a8 <fiprintf+0x20>)
 800c392:	f853 2b04 	ldr.w	r2, [r3], #4
 800c396:	6800      	ldr	r0, [r0, #0]
 800c398:	9301      	str	r3, [sp, #4]
 800c39a:	f000 f885 	bl	800c4a8 <_vfiprintf_r>
 800c39e:	b002      	add	sp, #8
 800c3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3a4:	b003      	add	sp, #12
 800c3a6:	4770      	bx	lr
 800c3a8:	24000028 	.word	0x24000028

0800c3ac <memmove>:
 800c3ac:	4288      	cmp	r0, r1
 800c3ae:	b510      	push	{r4, lr}
 800c3b0:	eb01 0402 	add.w	r4, r1, r2
 800c3b4:	d902      	bls.n	800c3bc <memmove+0x10>
 800c3b6:	4284      	cmp	r4, r0
 800c3b8:	4623      	mov	r3, r4
 800c3ba:	d807      	bhi.n	800c3cc <memmove+0x20>
 800c3bc:	1e43      	subs	r3, r0, #1
 800c3be:	42a1      	cmp	r1, r4
 800c3c0:	d008      	beq.n	800c3d4 <memmove+0x28>
 800c3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3ca:	e7f8      	b.n	800c3be <memmove+0x12>
 800c3cc:	4402      	add	r2, r0
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	428a      	cmp	r2, r1
 800c3d2:	d100      	bne.n	800c3d6 <memmove+0x2a>
 800c3d4:	bd10      	pop	{r4, pc}
 800c3d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3de:	e7f7      	b.n	800c3d0 <memmove+0x24>

0800c3e0 <__malloc_lock>:
 800c3e0:	4801      	ldr	r0, [pc, #4]	; (800c3e8 <__malloc_lock+0x8>)
 800c3e2:	f000 bc11 	b.w	800cc08 <__retarget_lock_acquire_recursive>
 800c3e6:	bf00      	nop
 800c3e8:	24000494 	.word	0x24000494

0800c3ec <__malloc_unlock>:
 800c3ec:	4801      	ldr	r0, [pc, #4]	; (800c3f4 <__malloc_unlock+0x8>)
 800c3ee:	f000 bc0c 	b.w	800cc0a <__retarget_lock_release_recursive>
 800c3f2:	bf00      	nop
 800c3f4:	24000494 	.word	0x24000494

0800c3f8 <_realloc_r>:
 800c3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3fc:	4680      	mov	r8, r0
 800c3fe:	4614      	mov	r4, r2
 800c400:	460e      	mov	r6, r1
 800c402:	b921      	cbnz	r1, 800c40e <_realloc_r+0x16>
 800c404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c408:	4611      	mov	r1, r2
 800c40a:	f7ff bd93 	b.w	800bf34 <_malloc_r>
 800c40e:	b92a      	cbnz	r2, 800c41c <_realloc_r+0x24>
 800c410:	f7ff fd24 	bl	800be5c <_free_r>
 800c414:	4625      	mov	r5, r4
 800c416:	4628      	mov	r0, r5
 800c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c41c:	f000 fc5c 	bl	800ccd8 <_malloc_usable_size_r>
 800c420:	4284      	cmp	r4, r0
 800c422:	4607      	mov	r7, r0
 800c424:	d802      	bhi.n	800c42c <_realloc_r+0x34>
 800c426:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c42a:	d812      	bhi.n	800c452 <_realloc_r+0x5a>
 800c42c:	4621      	mov	r1, r4
 800c42e:	4640      	mov	r0, r8
 800c430:	f7ff fd80 	bl	800bf34 <_malloc_r>
 800c434:	4605      	mov	r5, r0
 800c436:	2800      	cmp	r0, #0
 800c438:	d0ed      	beq.n	800c416 <_realloc_r+0x1e>
 800c43a:	42bc      	cmp	r4, r7
 800c43c:	4622      	mov	r2, r4
 800c43e:	4631      	mov	r1, r6
 800c440:	bf28      	it	cs
 800c442:	463a      	movcs	r2, r7
 800c444:	f7ff f828 	bl	800b498 <memcpy>
 800c448:	4631      	mov	r1, r6
 800c44a:	4640      	mov	r0, r8
 800c44c:	f7ff fd06 	bl	800be5c <_free_r>
 800c450:	e7e1      	b.n	800c416 <_realloc_r+0x1e>
 800c452:	4635      	mov	r5, r6
 800c454:	e7df      	b.n	800c416 <_realloc_r+0x1e>

0800c456 <__sfputc_r>:
 800c456:	6893      	ldr	r3, [r2, #8]
 800c458:	3b01      	subs	r3, #1
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	b410      	push	{r4}
 800c45e:	6093      	str	r3, [r2, #8]
 800c460:	da08      	bge.n	800c474 <__sfputc_r+0x1e>
 800c462:	6994      	ldr	r4, [r2, #24]
 800c464:	42a3      	cmp	r3, r4
 800c466:	db01      	blt.n	800c46c <__sfputc_r+0x16>
 800c468:	290a      	cmp	r1, #10
 800c46a:	d103      	bne.n	800c474 <__sfputc_r+0x1e>
 800c46c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c470:	f000 b94a 	b.w	800c708 <__swbuf_r>
 800c474:	6813      	ldr	r3, [r2, #0]
 800c476:	1c58      	adds	r0, r3, #1
 800c478:	6010      	str	r0, [r2, #0]
 800c47a:	7019      	strb	r1, [r3, #0]
 800c47c:	4608      	mov	r0, r1
 800c47e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <__sfputs_r>:
 800c484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c486:	4606      	mov	r6, r0
 800c488:	460f      	mov	r7, r1
 800c48a:	4614      	mov	r4, r2
 800c48c:	18d5      	adds	r5, r2, r3
 800c48e:	42ac      	cmp	r4, r5
 800c490:	d101      	bne.n	800c496 <__sfputs_r+0x12>
 800c492:	2000      	movs	r0, #0
 800c494:	e007      	b.n	800c4a6 <__sfputs_r+0x22>
 800c496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c49a:	463a      	mov	r2, r7
 800c49c:	4630      	mov	r0, r6
 800c49e:	f7ff ffda 	bl	800c456 <__sfputc_r>
 800c4a2:	1c43      	adds	r3, r0, #1
 800c4a4:	d1f3      	bne.n	800c48e <__sfputs_r+0xa>
 800c4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4a8 <_vfiprintf_r>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	460d      	mov	r5, r1
 800c4ae:	b09d      	sub	sp, #116	; 0x74
 800c4b0:	4614      	mov	r4, r2
 800c4b2:	4698      	mov	r8, r3
 800c4b4:	4606      	mov	r6, r0
 800c4b6:	b118      	cbz	r0, 800c4c0 <_vfiprintf_r+0x18>
 800c4b8:	6983      	ldr	r3, [r0, #24]
 800c4ba:	b90b      	cbnz	r3, 800c4c0 <_vfiprintf_r+0x18>
 800c4bc:	f000 fb06 	bl	800cacc <__sinit>
 800c4c0:	4b89      	ldr	r3, [pc, #548]	; (800c6e8 <_vfiprintf_r+0x240>)
 800c4c2:	429d      	cmp	r5, r3
 800c4c4:	d11b      	bne.n	800c4fe <_vfiprintf_r+0x56>
 800c4c6:	6875      	ldr	r5, [r6, #4]
 800c4c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4ca:	07d9      	lsls	r1, r3, #31
 800c4cc:	d405      	bmi.n	800c4da <_vfiprintf_r+0x32>
 800c4ce:	89ab      	ldrh	r3, [r5, #12]
 800c4d0:	059a      	lsls	r2, r3, #22
 800c4d2:	d402      	bmi.n	800c4da <_vfiprintf_r+0x32>
 800c4d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4d6:	f000 fb97 	bl	800cc08 <__retarget_lock_acquire_recursive>
 800c4da:	89ab      	ldrh	r3, [r5, #12]
 800c4dc:	071b      	lsls	r3, r3, #28
 800c4de:	d501      	bpl.n	800c4e4 <_vfiprintf_r+0x3c>
 800c4e0:	692b      	ldr	r3, [r5, #16]
 800c4e2:	b9eb      	cbnz	r3, 800c520 <_vfiprintf_r+0x78>
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f000 f960 	bl	800c7ac <__swsetup_r>
 800c4ec:	b1c0      	cbz	r0, 800c520 <_vfiprintf_r+0x78>
 800c4ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4f0:	07dc      	lsls	r4, r3, #31
 800c4f2:	d50e      	bpl.n	800c512 <_vfiprintf_r+0x6a>
 800c4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f8:	b01d      	add	sp, #116	; 0x74
 800c4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4fe:	4b7b      	ldr	r3, [pc, #492]	; (800c6ec <_vfiprintf_r+0x244>)
 800c500:	429d      	cmp	r5, r3
 800c502:	d101      	bne.n	800c508 <_vfiprintf_r+0x60>
 800c504:	68b5      	ldr	r5, [r6, #8]
 800c506:	e7df      	b.n	800c4c8 <_vfiprintf_r+0x20>
 800c508:	4b79      	ldr	r3, [pc, #484]	; (800c6f0 <_vfiprintf_r+0x248>)
 800c50a:	429d      	cmp	r5, r3
 800c50c:	bf08      	it	eq
 800c50e:	68f5      	ldreq	r5, [r6, #12]
 800c510:	e7da      	b.n	800c4c8 <_vfiprintf_r+0x20>
 800c512:	89ab      	ldrh	r3, [r5, #12]
 800c514:	0598      	lsls	r0, r3, #22
 800c516:	d4ed      	bmi.n	800c4f4 <_vfiprintf_r+0x4c>
 800c518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c51a:	f000 fb76 	bl	800cc0a <__retarget_lock_release_recursive>
 800c51e:	e7e9      	b.n	800c4f4 <_vfiprintf_r+0x4c>
 800c520:	2300      	movs	r3, #0
 800c522:	9309      	str	r3, [sp, #36]	; 0x24
 800c524:	2320      	movs	r3, #32
 800c526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c52a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c52e:	2330      	movs	r3, #48	; 0x30
 800c530:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6f4 <_vfiprintf_r+0x24c>
 800c534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c538:	f04f 0901 	mov.w	r9, #1
 800c53c:	4623      	mov	r3, r4
 800c53e:	469a      	mov	sl, r3
 800c540:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c544:	b10a      	cbz	r2, 800c54a <_vfiprintf_r+0xa2>
 800c546:	2a25      	cmp	r2, #37	; 0x25
 800c548:	d1f9      	bne.n	800c53e <_vfiprintf_r+0x96>
 800c54a:	ebba 0b04 	subs.w	fp, sl, r4
 800c54e:	d00b      	beq.n	800c568 <_vfiprintf_r+0xc0>
 800c550:	465b      	mov	r3, fp
 800c552:	4622      	mov	r2, r4
 800c554:	4629      	mov	r1, r5
 800c556:	4630      	mov	r0, r6
 800c558:	f7ff ff94 	bl	800c484 <__sfputs_r>
 800c55c:	3001      	adds	r0, #1
 800c55e:	f000 80aa 	beq.w	800c6b6 <_vfiprintf_r+0x20e>
 800c562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c564:	445a      	add	r2, fp
 800c566:	9209      	str	r2, [sp, #36]	; 0x24
 800c568:	f89a 3000 	ldrb.w	r3, [sl]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f000 80a2 	beq.w	800c6b6 <_vfiprintf_r+0x20e>
 800c572:	2300      	movs	r3, #0
 800c574:	f04f 32ff 	mov.w	r2, #4294967295
 800c578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c57c:	f10a 0a01 	add.w	sl, sl, #1
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	9307      	str	r3, [sp, #28]
 800c584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c588:	931a      	str	r3, [sp, #104]	; 0x68
 800c58a:	4654      	mov	r4, sl
 800c58c:	2205      	movs	r2, #5
 800c58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c592:	4858      	ldr	r0, [pc, #352]	; (800c6f4 <_vfiprintf_r+0x24c>)
 800c594:	f7f3 feac 	bl	80002f0 <memchr>
 800c598:	9a04      	ldr	r2, [sp, #16]
 800c59a:	b9d8      	cbnz	r0, 800c5d4 <_vfiprintf_r+0x12c>
 800c59c:	06d1      	lsls	r1, r2, #27
 800c59e:	bf44      	itt	mi
 800c5a0:	2320      	movmi	r3, #32
 800c5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5a6:	0713      	lsls	r3, r2, #28
 800c5a8:	bf44      	itt	mi
 800c5aa:	232b      	movmi	r3, #43	; 0x2b
 800c5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c5b6:	d015      	beq.n	800c5e4 <_vfiprintf_r+0x13c>
 800c5b8:	9a07      	ldr	r2, [sp, #28]
 800c5ba:	4654      	mov	r4, sl
 800c5bc:	2000      	movs	r0, #0
 800c5be:	f04f 0c0a 	mov.w	ip, #10
 800c5c2:	4621      	mov	r1, r4
 800c5c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5c8:	3b30      	subs	r3, #48	; 0x30
 800c5ca:	2b09      	cmp	r3, #9
 800c5cc:	d94e      	bls.n	800c66c <_vfiprintf_r+0x1c4>
 800c5ce:	b1b0      	cbz	r0, 800c5fe <_vfiprintf_r+0x156>
 800c5d0:	9207      	str	r2, [sp, #28]
 800c5d2:	e014      	b.n	800c5fe <_vfiprintf_r+0x156>
 800c5d4:	eba0 0308 	sub.w	r3, r0, r8
 800c5d8:	fa09 f303 	lsl.w	r3, r9, r3
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	9304      	str	r3, [sp, #16]
 800c5e0:	46a2      	mov	sl, r4
 800c5e2:	e7d2      	b.n	800c58a <_vfiprintf_r+0xe2>
 800c5e4:	9b03      	ldr	r3, [sp, #12]
 800c5e6:	1d19      	adds	r1, r3, #4
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	9103      	str	r1, [sp, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	bfbb      	ittet	lt
 800c5f0:	425b      	neglt	r3, r3
 800c5f2:	f042 0202 	orrlt.w	r2, r2, #2
 800c5f6:	9307      	strge	r3, [sp, #28]
 800c5f8:	9307      	strlt	r3, [sp, #28]
 800c5fa:	bfb8      	it	lt
 800c5fc:	9204      	strlt	r2, [sp, #16]
 800c5fe:	7823      	ldrb	r3, [r4, #0]
 800c600:	2b2e      	cmp	r3, #46	; 0x2e
 800c602:	d10c      	bne.n	800c61e <_vfiprintf_r+0x176>
 800c604:	7863      	ldrb	r3, [r4, #1]
 800c606:	2b2a      	cmp	r3, #42	; 0x2a
 800c608:	d135      	bne.n	800c676 <_vfiprintf_r+0x1ce>
 800c60a:	9b03      	ldr	r3, [sp, #12]
 800c60c:	1d1a      	adds	r2, r3, #4
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	9203      	str	r2, [sp, #12]
 800c612:	2b00      	cmp	r3, #0
 800c614:	bfb8      	it	lt
 800c616:	f04f 33ff 	movlt.w	r3, #4294967295
 800c61a:	3402      	adds	r4, #2
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c704 <_vfiprintf_r+0x25c>
 800c622:	7821      	ldrb	r1, [r4, #0]
 800c624:	2203      	movs	r2, #3
 800c626:	4650      	mov	r0, sl
 800c628:	f7f3 fe62 	bl	80002f0 <memchr>
 800c62c:	b140      	cbz	r0, 800c640 <_vfiprintf_r+0x198>
 800c62e:	2340      	movs	r3, #64	; 0x40
 800c630:	eba0 000a 	sub.w	r0, r0, sl
 800c634:	fa03 f000 	lsl.w	r0, r3, r0
 800c638:	9b04      	ldr	r3, [sp, #16]
 800c63a:	4303      	orrs	r3, r0
 800c63c:	3401      	adds	r4, #1
 800c63e:	9304      	str	r3, [sp, #16]
 800c640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c644:	482c      	ldr	r0, [pc, #176]	; (800c6f8 <_vfiprintf_r+0x250>)
 800c646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c64a:	2206      	movs	r2, #6
 800c64c:	f7f3 fe50 	bl	80002f0 <memchr>
 800c650:	2800      	cmp	r0, #0
 800c652:	d03f      	beq.n	800c6d4 <_vfiprintf_r+0x22c>
 800c654:	4b29      	ldr	r3, [pc, #164]	; (800c6fc <_vfiprintf_r+0x254>)
 800c656:	bb1b      	cbnz	r3, 800c6a0 <_vfiprintf_r+0x1f8>
 800c658:	9b03      	ldr	r3, [sp, #12]
 800c65a:	3307      	adds	r3, #7
 800c65c:	f023 0307 	bic.w	r3, r3, #7
 800c660:	3308      	adds	r3, #8
 800c662:	9303      	str	r3, [sp, #12]
 800c664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c666:	443b      	add	r3, r7
 800c668:	9309      	str	r3, [sp, #36]	; 0x24
 800c66a:	e767      	b.n	800c53c <_vfiprintf_r+0x94>
 800c66c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c670:	460c      	mov	r4, r1
 800c672:	2001      	movs	r0, #1
 800c674:	e7a5      	b.n	800c5c2 <_vfiprintf_r+0x11a>
 800c676:	2300      	movs	r3, #0
 800c678:	3401      	adds	r4, #1
 800c67a:	9305      	str	r3, [sp, #20]
 800c67c:	4619      	mov	r1, r3
 800c67e:	f04f 0c0a 	mov.w	ip, #10
 800c682:	4620      	mov	r0, r4
 800c684:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c688:	3a30      	subs	r2, #48	; 0x30
 800c68a:	2a09      	cmp	r2, #9
 800c68c:	d903      	bls.n	800c696 <_vfiprintf_r+0x1ee>
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d0c5      	beq.n	800c61e <_vfiprintf_r+0x176>
 800c692:	9105      	str	r1, [sp, #20]
 800c694:	e7c3      	b.n	800c61e <_vfiprintf_r+0x176>
 800c696:	fb0c 2101 	mla	r1, ip, r1, r2
 800c69a:	4604      	mov	r4, r0
 800c69c:	2301      	movs	r3, #1
 800c69e:	e7f0      	b.n	800c682 <_vfiprintf_r+0x1da>
 800c6a0:	ab03      	add	r3, sp, #12
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	462a      	mov	r2, r5
 800c6a6:	4b16      	ldr	r3, [pc, #88]	; (800c700 <_vfiprintf_r+0x258>)
 800c6a8:	a904      	add	r1, sp, #16
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f7fc f934 	bl	8008918 <_printf_float>
 800c6b0:	4607      	mov	r7, r0
 800c6b2:	1c78      	adds	r0, r7, #1
 800c6b4:	d1d6      	bne.n	800c664 <_vfiprintf_r+0x1bc>
 800c6b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6b8:	07d9      	lsls	r1, r3, #31
 800c6ba:	d405      	bmi.n	800c6c8 <_vfiprintf_r+0x220>
 800c6bc:	89ab      	ldrh	r3, [r5, #12]
 800c6be:	059a      	lsls	r2, r3, #22
 800c6c0:	d402      	bmi.n	800c6c8 <_vfiprintf_r+0x220>
 800c6c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6c4:	f000 faa1 	bl	800cc0a <__retarget_lock_release_recursive>
 800c6c8:	89ab      	ldrh	r3, [r5, #12]
 800c6ca:	065b      	lsls	r3, r3, #25
 800c6cc:	f53f af12 	bmi.w	800c4f4 <_vfiprintf_r+0x4c>
 800c6d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6d2:	e711      	b.n	800c4f8 <_vfiprintf_r+0x50>
 800c6d4:	ab03      	add	r3, sp, #12
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	462a      	mov	r2, r5
 800c6da:	4b09      	ldr	r3, [pc, #36]	; (800c700 <_vfiprintf_r+0x258>)
 800c6dc:	a904      	add	r1, sp, #16
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f7fc fba6 	bl	8008e30 <_printf_i>
 800c6e4:	e7e4      	b.n	800c6b0 <_vfiprintf_r+0x208>
 800c6e6:	bf00      	nop
 800c6e8:	0800d3cc 	.word	0x0800d3cc
 800c6ec:	0800d3ec 	.word	0x0800d3ec
 800c6f0:	0800d3ac 	.word	0x0800d3ac
 800c6f4:	0800d35c 	.word	0x0800d35c
 800c6f8:	0800d366 	.word	0x0800d366
 800c6fc:	08008919 	.word	0x08008919
 800c700:	0800c485 	.word	0x0800c485
 800c704:	0800d362 	.word	0x0800d362

0800c708 <__swbuf_r>:
 800c708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70a:	460e      	mov	r6, r1
 800c70c:	4614      	mov	r4, r2
 800c70e:	4605      	mov	r5, r0
 800c710:	b118      	cbz	r0, 800c71a <__swbuf_r+0x12>
 800c712:	6983      	ldr	r3, [r0, #24]
 800c714:	b90b      	cbnz	r3, 800c71a <__swbuf_r+0x12>
 800c716:	f000 f9d9 	bl	800cacc <__sinit>
 800c71a:	4b21      	ldr	r3, [pc, #132]	; (800c7a0 <__swbuf_r+0x98>)
 800c71c:	429c      	cmp	r4, r3
 800c71e:	d12b      	bne.n	800c778 <__swbuf_r+0x70>
 800c720:	686c      	ldr	r4, [r5, #4]
 800c722:	69a3      	ldr	r3, [r4, #24]
 800c724:	60a3      	str	r3, [r4, #8]
 800c726:	89a3      	ldrh	r3, [r4, #12]
 800c728:	071a      	lsls	r2, r3, #28
 800c72a:	d52f      	bpl.n	800c78c <__swbuf_r+0x84>
 800c72c:	6923      	ldr	r3, [r4, #16]
 800c72e:	b36b      	cbz	r3, 800c78c <__swbuf_r+0x84>
 800c730:	6923      	ldr	r3, [r4, #16]
 800c732:	6820      	ldr	r0, [r4, #0]
 800c734:	1ac0      	subs	r0, r0, r3
 800c736:	6963      	ldr	r3, [r4, #20]
 800c738:	b2f6      	uxtb	r6, r6
 800c73a:	4283      	cmp	r3, r0
 800c73c:	4637      	mov	r7, r6
 800c73e:	dc04      	bgt.n	800c74a <__swbuf_r+0x42>
 800c740:	4621      	mov	r1, r4
 800c742:	4628      	mov	r0, r5
 800c744:	f000 f92e 	bl	800c9a4 <_fflush_r>
 800c748:	bb30      	cbnz	r0, 800c798 <__swbuf_r+0x90>
 800c74a:	68a3      	ldr	r3, [r4, #8]
 800c74c:	3b01      	subs	r3, #1
 800c74e:	60a3      	str	r3, [r4, #8]
 800c750:	6823      	ldr	r3, [r4, #0]
 800c752:	1c5a      	adds	r2, r3, #1
 800c754:	6022      	str	r2, [r4, #0]
 800c756:	701e      	strb	r6, [r3, #0]
 800c758:	6963      	ldr	r3, [r4, #20]
 800c75a:	3001      	adds	r0, #1
 800c75c:	4283      	cmp	r3, r0
 800c75e:	d004      	beq.n	800c76a <__swbuf_r+0x62>
 800c760:	89a3      	ldrh	r3, [r4, #12]
 800c762:	07db      	lsls	r3, r3, #31
 800c764:	d506      	bpl.n	800c774 <__swbuf_r+0x6c>
 800c766:	2e0a      	cmp	r6, #10
 800c768:	d104      	bne.n	800c774 <__swbuf_r+0x6c>
 800c76a:	4621      	mov	r1, r4
 800c76c:	4628      	mov	r0, r5
 800c76e:	f000 f919 	bl	800c9a4 <_fflush_r>
 800c772:	b988      	cbnz	r0, 800c798 <__swbuf_r+0x90>
 800c774:	4638      	mov	r0, r7
 800c776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c778:	4b0a      	ldr	r3, [pc, #40]	; (800c7a4 <__swbuf_r+0x9c>)
 800c77a:	429c      	cmp	r4, r3
 800c77c:	d101      	bne.n	800c782 <__swbuf_r+0x7a>
 800c77e:	68ac      	ldr	r4, [r5, #8]
 800c780:	e7cf      	b.n	800c722 <__swbuf_r+0x1a>
 800c782:	4b09      	ldr	r3, [pc, #36]	; (800c7a8 <__swbuf_r+0xa0>)
 800c784:	429c      	cmp	r4, r3
 800c786:	bf08      	it	eq
 800c788:	68ec      	ldreq	r4, [r5, #12]
 800c78a:	e7ca      	b.n	800c722 <__swbuf_r+0x1a>
 800c78c:	4621      	mov	r1, r4
 800c78e:	4628      	mov	r0, r5
 800c790:	f000 f80c 	bl	800c7ac <__swsetup_r>
 800c794:	2800      	cmp	r0, #0
 800c796:	d0cb      	beq.n	800c730 <__swbuf_r+0x28>
 800c798:	f04f 37ff 	mov.w	r7, #4294967295
 800c79c:	e7ea      	b.n	800c774 <__swbuf_r+0x6c>
 800c79e:	bf00      	nop
 800c7a0:	0800d3cc 	.word	0x0800d3cc
 800c7a4:	0800d3ec 	.word	0x0800d3ec
 800c7a8:	0800d3ac 	.word	0x0800d3ac

0800c7ac <__swsetup_r>:
 800c7ac:	4b32      	ldr	r3, [pc, #200]	; (800c878 <__swsetup_r+0xcc>)
 800c7ae:	b570      	push	{r4, r5, r6, lr}
 800c7b0:	681d      	ldr	r5, [r3, #0]
 800c7b2:	4606      	mov	r6, r0
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	b125      	cbz	r5, 800c7c2 <__swsetup_r+0x16>
 800c7b8:	69ab      	ldr	r3, [r5, #24]
 800c7ba:	b913      	cbnz	r3, 800c7c2 <__swsetup_r+0x16>
 800c7bc:	4628      	mov	r0, r5
 800c7be:	f000 f985 	bl	800cacc <__sinit>
 800c7c2:	4b2e      	ldr	r3, [pc, #184]	; (800c87c <__swsetup_r+0xd0>)
 800c7c4:	429c      	cmp	r4, r3
 800c7c6:	d10f      	bne.n	800c7e8 <__swsetup_r+0x3c>
 800c7c8:	686c      	ldr	r4, [r5, #4]
 800c7ca:	89a3      	ldrh	r3, [r4, #12]
 800c7cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7d0:	0719      	lsls	r1, r3, #28
 800c7d2:	d42c      	bmi.n	800c82e <__swsetup_r+0x82>
 800c7d4:	06dd      	lsls	r5, r3, #27
 800c7d6:	d411      	bmi.n	800c7fc <__swsetup_r+0x50>
 800c7d8:	2309      	movs	r3, #9
 800c7da:	6033      	str	r3, [r6, #0]
 800c7dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c7e0:	81a3      	strh	r3, [r4, #12]
 800c7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e6:	e03e      	b.n	800c866 <__swsetup_r+0xba>
 800c7e8:	4b25      	ldr	r3, [pc, #148]	; (800c880 <__swsetup_r+0xd4>)
 800c7ea:	429c      	cmp	r4, r3
 800c7ec:	d101      	bne.n	800c7f2 <__swsetup_r+0x46>
 800c7ee:	68ac      	ldr	r4, [r5, #8]
 800c7f0:	e7eb      	b.n	800c7ca <__swsetup_r+0x1e>
 800c7f2:	4b24      	ldr	r3, [pc, #144]	; (800c884 <__swsetup_r+0xd8>)
 800c7f4:	429c      	cmp	r4, r3
 800c7f6:	bf08      	it	eq
 800c7f8:	68ec      	ldreq	r4, [r5, #12]
 800c7fa:	e7e6      	b.n	800c7ca <__swsetup_r+0x1e>
 800c7fc:	0758      	lsls	r0, r3, #29
 800c7fe:	d512      	bpl.n	800c826 <__swsetup_r+0x7a>
 800c800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c802:	b141      	cbz	r1, 800c816 <__swsetup_r+0x6a>
 800c804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c808:	4299      	cmp	r1, r3
 800c80a:	d002      	beq.n	800c812 <__swsetup_r+0x66>
 800c80c:	4630      	mov	r0, r6
 800c80e:	f7ff fb25 	bl	800be5c <_free_r>
 800c812:	2300      	movs	r3, #0
 800c814:	6363      	str	r3, [r4, #52]	; 0x34
 800c816:	89a3      	ldrh	r3, [r4, #12]
 800c818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	2300      	movs	r3, #0
 800c820:	6063      	str	r3, [r4, #4]
 800c822:	6923      	ldr	r3, [r4, #16]
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	89a3      	ldrh	r3, [r4, #12]
 800c828:	f043 0308 	orr.w	r3, r3, #8
 800c82c:	81a3      	strh	r3, [r4, #12]
 800c82e:	6923      	ldr	r3, [r4, #16]
 800c830:	b94b      	cbnz	r3, 800c846 <__swsetup_r+0x9a>
 800c832:	89a3      	ldrh	r3, [r4, #12]
 800c834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c83c:	d003      	beq.n	800c846 <__swsetup_r+0x9a>
 800c83e:	4621      	mov	r1, r4
 800c840:	4630      	mov	r0, r6
 800c842:	f000 fa09 	bl	800cc58 <__smakebuf_r>
 800c846:	89a0      	ldrh	r0, [r4, #12]
 800c848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c84c:	f010 0301 	ands.w	r3, r0, #1
 800c850:	d00a      	beq.n	800c868 <__swsetup_r+0xbc>
 800c852:	2300      	movs	r3, #0
 800c854:	60a3      	str	r3, [r4, #8]
 800c856:	6963      	ldr	r3, [r4, #20]
 800c858:	425b      	negs	r3, r3
 800c85a:	61a3      	str	r3, [r4, #24]
 800c85c:	6923      	ldr	r3, [r4, #16]
 800c85e:	b943      	cbnz	r3, 800c872 <__swsetup_r+0xc6>
 800c860:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c864:	d1ba      	bne.n	800c7dc <__swsetup_r+0x30>
 800c866:	bd70      	pop	{r4, r5, r6, pc}
 800c868:	0781      	lsls	r1, r0, #30
 800c86a:	bf58      	it	pl
 800c86c:	6963      	ldrpl	r3, [r4, #20]
 800c86e:	60a3      	str	r3, [r4, #8]
 800c870:	e7f4      	b.n	800c85c <__swsetup_r+0xb0>
 800c872:	2000      	movs	r0, #0
 800c874:	e7f7      	b.n	800c866 <__swsetup_r+0xba>
 800c876:	bf00      	nop
 800c878:	24000028 	.word	0x24000028
 800c87c:	0800d3cc 	.word	0x0800d3cc
 800c880:	0800d3ec 	.word	0x0800d3ec
 800c884:	0800d3ac 	.word	0x0800d3ac

0800c888 <abort>:
 800c888:	b508      	push	{r3, lr}
 800c88a:	2006      	movs	r0, #6
 800c88c:	f000 fa54 	bl	800cd38 <raise>
 800c890:	2001      	movs	r0, #1
 800c892:	f7f5 f94f 	bl	8001b34 <_exit>
	...

0800c898 <__sflush_r>:
 800c898:	898a      	ldrh	r2, [r1, #12]
 800c89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c89e:	4605      	mov	r5, r0
 800c8a0:	0710      	lsls	r0, r2, #28
 800c8a2:	460c      	mov	r4, r1
 800c8a4:	d458      	bmi.n	800c958 <__sflush_r+0xc0>
 800c8a6:	684b      	ldr	r3, [r1, #4]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	dc05      	bgt.n	800c8b8 <__sflush_r+0x20>
 800c8ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	dc02      	bgt.n	800c8b8 <__sflush_r+0x20>
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8ba:	2e00      	cmp	r6, #0
 800c8bc:	d0f9      	beq.n	800c8b2 <__sflush_r+0x1a>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c8c4:	682f      	ldr	r7, [r5, #0]
 800c8c6:	602b      	str	r3, [r5, #0]
 800c8c8:	d032      	beq.n	800c930 <__sflush_r+0x98>
 800c8ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c8cc:	89a3      	ldrh	r3, [r4, #12]
 800c8ce:	075a      	lsls	r2, r3, #29
 800c8d0:	d505      	bpl.n	800c8de <__sflush_r+0x46>
 800c8d2:	6863      	ldr	r3, [r4, #4]
 800c8d4:	1ac0      	subs	r0, r0, r3
 800c8d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8d8:	b10b      	cbz	r3, 800c8de <__sflush_r+0x46>
 800c8da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8dc:	1ac0      	subs	r0, r0, r3
 800c8de:	2300      	movs	r3, #0
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8e4:	6a21      	ldr	r1, [r4, #32]
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	47b0      	blx	r6
 800c8ea:	1c43      	adds	r3, r0, #1
 800c8ec:	89a3      	ldrh	r3, [r4, #12]
 800c8ee:	d106      	bne.n	800c8fe <__sflush_r+0x66>
 800c8f0:	6829      	ldr	r1, [r5, #0]
 800c8f2:	291d      	cmp	r1, #29
 800c8f4:	d82c      	bhi.n	800c950 <__sflush_r+0xb8>
 800c8f6:	4a2a      	ldr	r2, [pc, #168]	; (800c9a0 <__sflush_r+0x108>)
 800c8f8:	40ca      	lsrs	r2, r1
 800c8fa:	07d6      	lsls	r6, r2, #31
 800c8fc:	d528      	bpl.n	800c950 <__sflush_r+0xb8>
 800c8fe:	2200      	movs	r2, #0
 800c900:	6062      	str	r2, [r4, #4]
 800c902:	04d9      	lsls	r1, r3, #19
 800c904:	6922      	ldr	r2, [r4, #16]
 800c906:	6022      	str	r2, [r4, #0]
 800c908:	d504      	bpl.n	800c914 <__sflush_r+0x7c>
 800c90a:	1c42      	adds	r2, r0, #1
 800c90c:	d101      	bne.n	800c912 <__sflush_r+0x7a>
 800c90e:	682b      	ldr	r3, [r5, #0]
 800c910:	b903      	cbnz	r3, 800c914 <__sflush_r+0x7c>
 800c912:	6560      	str	r0, [r4, #84]	; 0x54
 800c914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c916:	602f      	str	r7, [r5, #0]
 800c918:	2900      	cmp	r1, #0
 800c91a:	d0ca      	beq.n	800c8b2 <__sflush_r+0x1a>
 800c91c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c920:	4299      	cmp	r1, r3
 800c922:	d002      	beq.n	800c92a <__sflush_r+0x92>
 800c924:	4628      	mov	r0, r5
 800c926:	f7ff fa99 	bl	800be5c <_free_r>
 800c92a:	2000      	movs	r0, #0
 800c92c:	6360      	str	r0, [r4, #52]	; 0x34
 800c92e:	e7c1      	b.n	800c8b4 <__sflush_r+0x1c>
 800c930:	6a21      	ldr	r1, [r4, #32]
 800c932:	2301      	movs	r3, #1
 800c934:	4628      	mov	r0, r5
 800c936:	47b0      	blx	r6
 800c938:	1c41      	adds	r1, r0, #1
 800c93a:	d1c7      	bne.n	800c8cc <__sflush_r+0x34>
 800c93c:	682b      	ldr	r3, [r5, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d0c4      	beq.n	800c8cc <__sflush_r+0x34>
 800c942:	2b1d      	cmp	r3, #29
 800c944:	d001      	beq.n	800c94a <__sflush_r+0xb2>
 800c946:	2b16      	cmp	r3, #22
 800c948:	d101      	bne.n	800c94e <__sflush_r+0xb6>
 800c94a:	602f      	str	r7, [r5, #0]
 800c94c:	e7b1      	b.n	800c8b2 <__sflush_r+0x1a>
 800c94e:	89a3      	ldrh	r3, [r4, #12]
 800c950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c954:	81a3      	strh	r3, [r4, #12]
 800c956:	e7ad      	b.n	800c8b4 <__sflush_r+0x1c>
 800c958:	690f      	ldr	r7, [r1, #16]
 800c95a:	2f00      	cmp	r7, #0
 800c95c:	d0a9      	beq.n	800c8b2 <__sflush_r+0x1a>
 800c95e:	0793      	lsls	r3, r2, #30
 800c960:	680e      	ldr	r6, [r1, #0]
 800c962:	bf08      	it	eq
 800c964:	694b      	ldreq	r3, [r1, #20]
 800c966:	600f      	str	r7, [r1, #0]
 800c968:	bf18      	it	ne
 800c96a:	2300      	movne	r3, #0
 800c96c:	eba6 0807 	sub.w	r8, r6, r7
 800c970:	608b      	str	r3, [r1, #8]
 800c972:	f1b8 0f00 	cmp.w	r8, #0
 800c976:	dd9c      	ble.n	800c8b2 <__sflush_r+0x1a>
 800c978:	6a21      	ldr	r1, [r4, #32]
 800c97a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c97c:	4643      	mov	r3, r8
 800c97e:	463a      	mov	r2, r7
 800c980:	4628      	mov	r0, r5
 800c982:	47b0      	blx	r6
 800c984:	2800      	cmp	r0, #0
 800c986:	dc06      	bgt.n	800c996 <__sflush_r+0xfe>
 800c988:	89a3      	ldrh	r3, [r4, #12]
 800c98a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c98e:	81a3      	strh	r3, [r4, #12]
 800c990:	f04f 30ff 	mov.w	r0, #4294967295
 800c994:	e78e      	b.n	800c8b4 <__sflush_r+0x1c>
 800c996:	4407      	add	r7, r0
 800c998:	eba8 0800 	sub.w	r8, r8, r0
 800c99c:	e7e9      	b.n	800c972 <__sflush_r+0xda>
 800c99e:	bf00      	nop
 800c9a0:	20400001 	.word	0x20400001

0800c9a4 <_fflush_r>:
 800c9a4:	b538      	push	{r3, r4, r5, lr}
 800c9a6:	690b      	ldr	r3, [r1, #16]
 800c9a8:	4605      	mov	r5, r0
 800c9aa:	460c      	mov	r4, r1
 800c9ac:	b913      	cbnz	r3, 800c9b4 <_fflush_r+0x10>
 800c9ae:	2500      	movs	r5, #0
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	bd38      	pop	{r3, r4, r5, pc}
 800c9b4:	b118      	cbz	r0, 800c9be <_fflush_r+0x1a>
 800c9b6:	6983      	ldr	r3, [r0, #24]
 800c9b8:	b90b      	cbnz	r3, 800c9be <_fflush_r+0x1a>
 800c9ba:	f000 f887 	bl	800cacc <__sinit>
 800c9be:	4b14      	ldr	r3, [pc, #80]	; (800ca10 <_fflush_r+0x6c>)
 800c9c0:	429c      	cmp	r4, r3
 800c9c2:	d11b      	bne.n	800c9fc <_fflush_r+0x58>
 800c9c4:	686c      	ldr	r4, [r5, #4]
 800c9c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0ef      	beq.n	800c9ae <_fflush_r+0xa>
 800c9ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9d0:	07d0      	lsls	r0, r2, #31
 800c9d2:	d404      	bmi.n	800c9de <_fflush_r+0x3a>
 800c9d4:	0599      	lsls	r1, r3, #22
 800c9d6:	d402      	bmi.n	800c9de <_fflush_r+0x3a>
 800c9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9da:	f000 f915 	bl	800cc08 <__retarget_lock_acquire_recursive>
 800c9de:	4628      	mov	r0, r5
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	f7ff ff59 	bl	800c898 <__sflush_r>
 800c9e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9e8:	07da      	lsls	r2, r3, #31
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	d4e0      	bmi.n	800c9b0 <_fflush_r+0xc>
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	059b      	lsls	r3, r3, #22
 800c9f2:	d4dd      	bmi.n	800c9b0 <_fflush_r+0xc>
 800c9f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9f6:	f000 f908 	bl	800cc0a <__retarget_lock_release_recursive>
 800c9fa:	e7d9      	b.n	800c9b0 <_fflush_r+0xc>
 800c9fc:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <_fflush_r+0x70>)
 800c9fe:	429c      	cmp	r4, r3
 800ca00:	d101      	bne.n	800ca06 <_fflush_r+0x62>
 800ca02:	68ac      	ldr	r4, [r5, #8]
 800ca04:	e7df      	b.n	800c9c6 <_fflush_r+0x22>
 800ca06:	4b04      	ldr	r3, [pc, #16]	; (800ca18 <_fflush_r+0x74>)
 800ca08:	429c      	cmp	r4, r3
 800ca0a:	bf08      	it	eq
 800ca0c:	68ec      	ldreq	r4, [r5, #12]
 800ca0e:	e7da      	b.n	800c9c6 <_fflush_r+0x22>
 800ca10:	0800d3cc 	.word	0x0800d3cc
 800ca14:	0800d3ec 	.word	0x0800d3ec
 800ca18:	0800d3ac 	.word	0x0800d3ac

0800ca1c <std>:
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	b510      	push	{r4, lr}
 800ca20:	4604      	mov	r4, r0
 800ca22:	e9c0 3300 	strd	r3, r3, [r0]
 800ca26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca2a:	6083      	str	r3, [r0, #8]
 800ca2c:	8181      	strh	r1, [r0, #12]
 800ca2e:	6643      	str	r3, [r0, #100]	; 0x64
 800ca30:	81c2      	strh	r2, [r0, #14]
 800ca32:	6183      	str	r3, [r0, #24]
 800ca34:	4619      	mov	r1, r3
 800ca36:	2208      	movs	r2, #8
 800ca38:	305c      	adds	r0, #92	; 0x5c
 800ca3a:	f7fb fed5 	bl	80087e8 <memset>
 800ca3e:	4b05      	ldr	r3, [pc, #20]	; (800ca54 <std+0x38>)
 800ca40:	6263      	str	r3, [r4, #36]	; 0x24
 800ca42:	4b05      	ldr	r3, [pc, #20]	; (800ca58 <std+0x3c>)
 800ca44:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca46:	4b05      	ldr	r3, [pc, #20]	; (800ca5c <std+0x40>)
 800ca48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca4a:	4b05      	ldr	r3, [pc, #20]	; (800ca60 <std+0x44>)
 800ca4c:	6224      	str	r4, [r4, #32]
 800ca4e:	6323      	str	r3, [r4, #48]	; 0x30
 800ca50:	bd10      	pop	{r4, pc}
 800ca52:	bf00      	nop
 800ca54:	0800cd71 	.word	0x0800cd71
 800ca58:	0800cd93 	.word	0x0800cd93
 800ca5c:	0800cdcb 	.word	0x0800cdcb
 800ca60:	0800cdef 	.word	0x0800cdef

0800ca64 <_cleanup_r>:
 800ca64:	4901      	ldr	r1, [pc, #4]	; (800ca6c <_cleanup_r+0x8>)
 800ca66:	f000 b8af 	b.w	800cbc8 <_fwalk_reent>
 800ca6a:	bf00      	nop
 800ca6c:	0800c9a5 	.word	0x0800c9a5

0800ca70 <__sfmoreglue>:
 800ca70:	b570      	push	{r4, r5, r6, lr}
 800ca72:	2268      	movs	r2, #104	; 0x68
 800ca74:	1e4d      	subs	r5, r1, #1
 800ca76:	4355      	muls	r5, r2
 800ca78:	460e      	mov	r6, r1
 800ca7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca7e:	f7ff fa59 	bl	800bf34 <_malloc_r>
 800ca82:	4604      	mov	r4, r0
 800ca84:	b140      	cbz	r0, 800ca98 <__sfmoreglue+0x28>
 800ca86:	2100      	movs	r1, #0
 800ca88:	e9c0 1600 	strd	r1, r6, [r0]
 800ca8c:	300c      	adds	r0, #12
 800ca8e:	60a0      	str	r0, [r4, #8]
 800ca90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca94:	f7fb fea8 	bl	80087e8 <memset>
 800ca98:	4620      	mov	r0, r4
 800ca9a:	bd70      	pop	{r4, r5, r6, pc}

0800ca9c <__sfp_lock_acquire>:
 800ca9c:	4801      	ldr	r0, [pc, #4]	; (800caa4 <__sfp_lock_acquire+0x8>)
 800ca9e:	f000 b8b3 	b.w	800cc08 <__retarget_lock_acquire_recursive>
 800caa2:	bf00      	nop
 800caa4:	24000495 	.word	0x24000495

0800caa8 <__sfp_lock_release>:
 800caa8:	4801      	ldr	r0, [pc, #4]	; (800cab0 <__sfp_lock_release+0x8>)
 800caaa:	f000 b8ae 	b.w	800cc0a <__retarget_lock_release_recursive>
 800caae:	bf00      	nop
 800cab0:	24000495 	.word	0x24000495

0800cab4 <__sinit_lock_acquire>:
 800cab4:	4801      	ldr	r0, [pc, #4]	; (800cabc <__sinit_lock_acquire+0x8>)
 800cab6:	f000 b8a7 	b.w	800cc08 <__retarget_lock_acquire_recursive>
 800caba:	bf00      	nop
 800cabc:	24000496 	.word	0x24000496

0800cac0 <__sinit_lock_release>:
 800cac0:	4801      	ldr	r0, [pc, #4]	; (800cac8 <__sinit_lock_release+0x8>)
 800cac2:	f000 b8a2 	b.w	800cc0a <__retarget_lock_release_recursive>
 800cac6:	bf00      	nop
 800cac8:	24000496 	.word	0x24000496

0800cacc <__sinit>:
 800cacc:	b510      	push	{r4, lr}
 800cace:	4604      	mov	r4, r0
 800cad0:	f7ff fff0 	bl	800cab4 <__sinit_lock_acquire>
 800cad4:	69a3      	ldr	r3, [r4, #24]
 800cad6:	b11b      	cbz	r3, 800cae0 <__sinit+0x14>
 800cad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cadc:	f7ff bff0 	b.w	800cac0 <__sinit_lock_release>
 800cae0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cae4:	6523      	str	r3, [r4, #80]	; 0x50
 800cae6:	4b13      	ldr	r3, [pc, #76]	; (800cb34 <__sinit+0x68>)
 800cae8:	4a13      	ldr	r2, [pc, #76]	; (800cb38 <__sinit+0x6c>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	62a2      	str	r2, [r4, #40]	; 0x28
 800caee:	42a3      	cmp	r3, r4
 800caf0:	bf04      	itt	eq
 800caf2:	2301      	moveq	r3, #1
 800caf4:	61a3      	streq	r3, [r4, #24]
 800caf6:	4620      	mov	r0, r4
 800caf8:	f000 f820 	bl	800cb3c <__sfp>
 800cafc:	6060      	str	r0, [r4, #4]
 800cafe:	4620      	mov	r0, r4
 800cb00:	f000 f81c 	bl	800cb3c <__sfp>
 800cb04:	60a0      	str	r0, [r4, #8]
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 f818 	bl	800cb3c <__sfp>
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	60e0      	str	r0, [r4, #12]
 800cb10:	2104      	movs	r1, #4
 800cb12:	6860      	ldr	r0, [r4, #4]
 800cb14:	f7ff ff82 	bl	800ca1c <std>
 800cb18:	68a0      	ldr	r0, [r4, #8]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	2109      	movs	r1, #9
 800cb1e:	f7ff ff7d 	bl	800ca1c <std>
 800cb22:	68e0      	ldr	r0, [r4, #12]
 800cb24:	2202      	movs	r2, #2
 800cb26:	2112      	movs	r1, #18
 800cb28:	f7ff ff78 	bl	800ca1c <std>
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	61a3      	str	r3, [r4, #24]
 800cb30:	e7d2      	b.n	800cad8 <__sinit+0xc>
 800cb32:	bf00      	nop
 800cb34:	0800cf64 	.word	0x0800cf64
 800cb38:	0800ca65 	.word	0x0800ca65

0800cb3c <__sfp>:
 800cb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb3e:	4607      	mov	r7, r0
 800cb40:	f7ff ffac 	bl	800ca9c <__sfp_lock_acquire>
 800cb44:	4b1e      	ldr	r3, [pc, #120]	; (800cbc0 <__sfp+0x84>)
 800cb46:	681e      	ldr	r6, [r3, #0]
 800cb48:	69b3      	ldr	r3, [r6, #24]
 800cb4a:	b913      	cbnz	r3, 800cb52 <__sfp+0x16>
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	f7ff ffbd 	bl	800cacc <__sinit>
 800cb52:	3648      	adds	r6, #72	; 0x48
 800cb54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb58:	3b01      	subs	r3, #1
 800cb5a:	d503      	bpl.n	800cb64 <__sfp+0x28>
 800cb5c:	6833      	ldr	r3, [r6, #0]
 800cb5e:	b30b      	cbz	r3, 800cba4 <__sfp+0x68>
 800cb60:	6836      	ldr	r6, [r6, #0]
 800cb62:	e7f7      	b.n	800cb54 <__sfp+0x18>
 800cb64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb68:	b9d5      	cbnz	r5, 800cba0 <__sfp+0x64>
 800cb6a:	4b16      	ldr	r3, [pc, #88]	; (800cbc4 <__sfp+0x88>)
 800cb6c:	60e3      	str	r3, [r4, #12]
 800cb6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb72:	6665      	str	r5, [r4, #100]	; 0x64
 800cb74:	f000 f847 	bl	800cc06 <__retarget_lock_init_recursive>
 800cb78:	f7ff ff96 	bl	800caa8 <__sfp_lock_release>
 800cb7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb84:	6025      	str	r5, [r4, #0]
 800cb86:	61a5      	str	r5, [r4, #24]
 800cb88:	2208      	movs	r2, #8
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb90:	f7fb fe2a 	bl	80087e8 <memset>
 800cb94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cba0:	3468      	adds	r4, #104	; 0x68
 800cba2:	e7d9      	b.n	800cb58 <__sfp+0x1c>
 800cba4:	2104      	movs	r1, #4
 800cba6:	4638      	mov	r0, r7
 800cba8:	f7ff ff62 	bl	800ca70 <__sfmoreglue>
 800cbac:	4604      	mov	r4, r0
 800cbae:	6030      	str	r0, [r6, #0]
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d1d5      	bne.n	800cb60 <__sfp+0x24>
 800cbb4:	f7ff ff78 	bl	800caa8 <__sfp_lock_release>
 800cbb8:	230c      	movs	r3, #12
 800cbba:	603b      	str	r3, [r7, #0]
 800cbbc:	e7ee      	b.n	800cb9c <__sfp+0x60>
 800cbbe:	bf00      	nop
 800cbc0:	0800cf64 	.word	0x0800cf64
 800cbc4:	ffff0001 	.word	0xffff0001

0800cbc8 <_fwalk_reent>:
 800cbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbcc:	4606      	mov	r6, r0
 800cbce:	4688      	mov	r8, r1
 800cbd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cbd4:	2700      	movs	r7, #0
 800cbd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbda:	f1b9 0901 	subs.w	r9, r9, #1
 800cbde:	d505      	bpl.n	800cbec <_fwalk_reent+0x24>
 800cbe0:	6824      	ldr	r4, [r4, #0]
 800cbe2:	2c00      	cmp	r4, #0
 800cbe4:	d1f7      	bne.n	800cbd6 <_fwalk_reent+0xe>
 800cbe6:	4638      	mov	r0, r7
 800cbe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbec:	89ab      	ldrh	r3, [r5, #12]
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d907      	bls.n	800cc02 <_fwalk_reent+0x3a>
 800cbf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	d003      	beq.n	800cc02 <_fwalk_reent+0x3a>
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	47c0      	blx	r8
 800cc00:	4307      	orrs	r7, r0
 800cc02:	3568      	adds	r5, #104	; 0x68
 800cc04:	e7e9      	b.n	800cbda <_fwalk_reent+0x12>

0800cc06 <__retarget_lock_init_recursive>:
 800cc06:	4770      	bx	lr

0800cc08 <__retarget_lock_acquire_recursive>:
 800cc08:	4770      	bx	lr

0800cc0a <__retarget_lock_release_recursive>:
 800cc0a:	4770      	bx	lr

0800cc0c <__swhatbuf_r>:
 800cc0c:	b570      	push	{r4, r5, r6, lr}
 800cc0e:	460e      	mov	r6, r1
 800cc10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc14:	2900      	cmp	r1, #0
 800cc16:	b096      	sub	sp, #88	; 0x58
 800cc18:	4614      	mov	r4, r2
 800cc1a:	461d      	mov	r5, r3
 800cc1c:	da08      	bge.n	800cc30 <__swhatbuf_r+0x24>
 800cc1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	602a      	str	r2, [r5, #0]
 800cc26:	061a      	lsls	r2, r3, #24
 800cc28:	d410      	bmi.n	800cc4c <__swhatbuf_r+0x40>
 800cc2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc2e:	e00e      	b.n	800cc4e <__swhatbuf_r+0x42>
 800cc30:	466a      	mov	r2, sp
 800cc32:	f000 f903 	bl	800ce3c <_fstat_r>
 800cc36:	2800      	cmp	r0, #0
 800cc38:	dbf1      	blt.n	800cc1e <__swhatbuf_r+0x12>
 800cc3a:	9a01      	ldr	r2, [sp, #4]
 800cc3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc44:	425a      	negs	r2, r3
 800cc46:	415a      	adcs	r2, r3
 800cc48:	602a      	str	r2, [r5, #0]
 800cc4a:	e7ee      	b.n	800cc2a <__swhatbuf_r+0x1e>
 800cc4c:	2340      	movs	r3, #64	; 0x40
 800cc4e:	2000      	movs	r0, #0
 800cc50:	6023      	str	r3, [r4, #0]
 800cc52:	b016      	add	sp, #88	; 0x58
 800cc54:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cc58 <__smakebuf_r>:
 800cc58:	898b      	ldrh	r3, [r1, #12]
 800cc5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc5c:	079d      	lsls	r5, r3, #30
 800cc5e:	4606      	mov	r6, r0
 800cc60:	460c      	mov	r4, r1
 800cc62:	d507      	bpl.n	800cc74 <__smakebuf_r+0x1c>
 800cc64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc68:	6023      	str	r3, [r4, #0]
 800cc6a:	6123      	str	r3, [r4, #16]
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	6163      	str	r3, [r4, #20]
 800cc70:	b002      	add	sp, #8
 800cc72:	bd70      	pop	{r4, r5, r6, pc}
 800cc74:	ab01      	add	r3, sp, #4
 800cc76:	466a      	mov	r2, sp
 800cc78:	f7ff ffc8 	bl	800cc0c <__swhatbuf_r>
 800cc7c:	9900      	ldr	r1, [sp, #0]
 800cc7e:	4605      	mov	r5, r0
 800cc80:	4630      	mov	r0, r6
 800cc82:	f7ff f957 	bl	800bf34 <_malloc_r>
 800cc86:	b948      	cbnz	r0, 800cc9c <__smakebuf_r+0x44>
 800cc88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc8c:	059a      	lsls	r2, r3, #22
 800cc8e:	d4ef      	bmi.n	800cc70 <__smakebuf_r+0x18>
 800cc90:	f023 0303 	bic.w	r3, r3, #3
 800cc94:	f043 0302 	orr.w	r3, r3, #2
 800cc98:	81a3      	strh	r3, [r4, #12]
 800cc9a:	e7e3      	b.n	800cc64 <__smakebuf_r+0xc>
 800cc9c:	4b0d      	ldr	r3, [pc, #52]	; (800ccd4 <__smakebuf_r+0x7c>)
 800cc9e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	6020      	str	r0, [r4, #0]
 800cca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cca8:	81a3      	strh	r3, [r4, #12]
 800ccaa:	9b00      	ldr	r3, [sp, #0]
 800ccac:	6163      	str	r3, [r4, #20]
 800ccae:	9b01      	ldr	r3, [sp, #4]
 800ccb0:	6120      	str	r0, [r4, #16]
 800ccb2:	b15b      	cbz	r3, 800cccc <__smakebuf_r+0x74>
 800ccb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccb8:	4630      	mov	r0, r6
 800ccba:	f000 f8d1 	bl	800ce60 <_isatty_r>
 800ccbe:	b128      	cbz	r0, 800cccc <__smakebuf_r+0x74>
 800ccc0:	89a3      	ldrh	r3, [r4, #12]
 800ccc2:	f023 0303 	bic.w	r3, r3, #3
 800ccc6:	f043 0301 	orr.w	r3, r3, #1
 800ccca:	81a3      	strh	r3, [r4, #12]
 800cccc:	89a0      	ldrh	r0, [r4, #12]
 800ccce:	4305      	orrs	r5, r0
 800ccd0:	81a5      	strh	r5, [r4, #12]
 800ccd2:	e7cd      	b.n	800cc70 <__smakebuf_r+0x18>
 800ccd4:	0800ca65 	.word	0x0800ca65

0800ccd8 <_malloc_usable_size_r>:
 800ccd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccdc:	1f18      	subs	r0, r3, #4
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	bfbc      	itt	lt
 800cce2:	580b      	ldrlt	r3, [r1, r0]
 800cce4:	18c0      	addlt	r0, r0, r3
 800cce6:	4770      	bx	lr

0800cce8 <_raise_r>:
 800cce8:	291f      	cmp	r1, #31
 800ccea:	b538      	push	{r3, r4, r5, lr}
 800ccec:	4604      	mov	r4, r0
 800ccee:	460d      	mov	r5, r1
 800ccf0:	d904      	bls.n	800ccfc <_raise_r+0x14>
 800ccf2:	2316      	movs	r3, #22
 800ccf4:	6003      	str	r3, [r0, #0]
 800ccf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccfa:	bd38      	pop	{r3, r4, r5, pc}
 800ccfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ccfe:	b112      	cbz	r2, 800cd06 <_raise_r+0x1e>
 800cd00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd04:	b94b      	cbnz	r3, 800cd1a <_raise_r+0x32>
 800cd06:	4620      	mov	r0, r4
 800cd08:	f000 f830 	bl	800cd6c <_getpid_r>
 800cd0c:	462a      	mov	r2, r5
 800cd0e:	4601      	mov	r1, r0
 800cd10:	4620      	mov	r0, r4
 800cd12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd16:	f000 b817 	b.w	800cd48 <_kill_r>
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d00a      	beq.n	800cd34 <_raise_r+0x4c>
 800cd1e:	1c59      	adds	r1, r3, #1
 800cd20:	d103      	bne.n	800cd2a <_raise_r+0x42>
 800cd22:	2316      	movs	r3, #22
 800cd24:	6003      	str	r3, [r0, #0]
 800cd26:	2001      	movs	r0, #1
 800cd28:	e7e7      	b.n	800ccfa <_raise_r+0x12>
 800cd2a:	2400      	movs	r4, #0
 800cd2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd30:	4628      	mov	r0, r5
 800cd32:	4798      	blx	r3
 800cd34:	2000      	movs	r0, #0
 800cd36:	e7e0      	b.n	800ccfa <_raise_r+0x12>

0800cd38 <raise>:
 800cd38:	4b02      	ldr	r3, [pc, #8]	; (800cd44 <raise+0xc>)
 800cd3a:	4601      	mov	r1, r0
 800cd3c:	6818      	ldr	r0, [r3, #0]
 800cd3e:	f7ff bfd3 	b.w	800cce8 <_raise_r>
 800cd42:	bf00      	nop
 800cd44:	24000028 	.word	0x24000028

0800cd48 <_kill_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4d07      	ldr	r5, [pc, #28]	; (800cd68 <_kill_r+0x20>)
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	4604      	mov	r4, r0
 800cd50:	4608      	mov	r0, r1
 800cd52:	4611      	mov	r1, r2
 800cd54:	602b      	str	r3, [r5, #0]
 800cd56:	f7f4 fedd 	bl	8001b14 <_kill>
 800cd5a:	1c43      	adds	r3, r0, #1
 800cd5c:	d102      	bne.n	800cd64 <_kill_r+0x1c>
 800cd5e:	682b      	ldr	r3, [r5, #0]
 800cd60:	b103      	cbz	r3, 800cd64 <_kill_r+0x1c>
 800cd62:	6023      	str	r3, [r4, #0]
 800cd64:	bd38      	pop	{r3, r4, r5, pc}
 800cd66:	bf00      	nop
 800cd68:	24000490 	.word	0x24000490

0800cd6c <_getpid_r>:
 800cd6c:	f7f4 beca 	b.w	8001b04 <_getpid>

0800cd70 <__sread>:
 800cd70:	b510      	push	{r4, lr}
 800cd72:	460c      	mov	r4, r1
 800cd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd78:	f000 f894 	bl	800cea4 <_read_r>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	bfab      	itete	ge
 800cd80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd82:	89a3      	ldrhlt	r3, [r4, #12]
 800cd84:	181b      	addge	r3, r3, r0
 800cd86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd8a:	bfac      	ite	ge
 800cd8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd8e:	81a3      	strhlt	r3, [r4, #12]
 800cd90:	bd10      	pop	{r4, pc}

0800cd92 <__swrite>:
 800cd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd96:	461f      	mov	r7, r3
 800cd98:	898b      	ldrh	r3, [r1, #12]
 800cd9a:	05db      	lsls	r3, r3, #23
 800cd9c:	4605      	mov	r5, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	4616      	mov	r6, r2
 800cda2:	d505      	bpl.n	800cdb0 <__swrite+0x1e>
 800cda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda8:	2302      	movs	r3, #2
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f000 f868 	bl	800ce80 <_lseek_r>
 800cdb0:	89a3      	ldrh	r3, [r4, #12]
 800cdb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdba:	81a3      	strh	r3, [r4, #12]
 800cdbc:	4632      	mov	r2, r6
 800cdbe:	463b      	mov	r3, r7
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc6:	f000 b817 	b.w	800cdf8 <_write_r>

0800cdca <__sseek>:
 800cdca:	b510      	push	{r4, lr}
 800cdcc:	460c      	mov	r4, r1
 800cdce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd2:	f000 f855 	bl	800ce80 <_lseek_r>
 800cdd6:	1c43      	adds	r3, r0, #1
 800cdd8:	89a3      	ldrh	r3, [r4, #12]
 800cdda:	bf15      	itete	ne
 800cddc:	6560      	strne	r0, [r4, #84]	; 0x54
 800cdde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cde2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cde6:	81a3      	strheq	r3, [r4, #12]
 800cde8:	bf18      	it	ne
 800cdea:	81a3      	strhne	r3, [r4, #12]
 800cdec:	bd10      	pop	{r4, pc}

0800cdee <__sclose>:
 800cdee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf2:	f000 b813 	b.w	800ce1c <_close_r>
	...

0800cdf8 <_write_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	4d07      	ldr	r5, [pc, #28]	; (800ce18 <_write_r+0x20>)
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	4608      	mov	r0, r1
 800ce00:	4611      	mov	r1, r2
 800ce02:	2200      	movs	r2, #0
 800ce04:	602a      	str	r2, [r5, #0]
 800ce06:	461a      	mov	r2, r3
 800ce08:	f7f4 febb 	bl	8001b82 <_write>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d102      	bne.n	800ce16 <_write_r+0x1e>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	b103      	cbz	r3, 800ce16 <_write_r+0x1e>
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	bd38      	pop	{r3, r4, r5, pc}
 800ce18:	24000490 	.word	0x24000490

0800ce1c <_close_r>:
 800ce1c:	b538      	push	{r3, r4, r5, lr}
 800ce1e:	4d06      	ldr	r5, [pc, #24]	; (800ce38 <_close_r+0x1c>)
 800ce20:	2300      	movs	r3, #0
 800ce22:	4604      	mov	r4, r0
 800ce24:	4608      	mov	r0, r1
 800ce26:	602b      	str	r3, [r5, #0]
 800ce28:	f7f4 fec7 	bl	8001bba <_close>
 800ce2c:	1c43      	adds	r3, r0, #1
 800ce2e:	d102      	bne.n	800ce36 <_close_r+0x1a>
 800ce30:	682b      	ldr	r3, [r5, #0]
 800ce32:	b103      	cbz	r3, 800ce36 <_close_r+0x1a>
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	bd38      	pop	{r3, r4, r5, pc}
 800ce38:	24000490 	.word	0x24000490

0800ce3c <_fstat_r>:
 800ce3c:	b538      	push	{r3, r4, r5, lr}
 800ce3e:	4d07      	ldr	r5, [pc, #28]	; (800ce5c <_fstat_r+0x20>)
 800ce40:	2300      	movs	r3, #0
 800ce42:	4604      	mov	r4, r0
 800ce44:	4608      	mov	r0, r1
 800ce46:	4611      	mov	r1, r2
 800ce48:	602b      	str	r3, [r5, #0]
 800ce4a:	f7f4 fec2 	bl	8001bd2 <_fstat>
 800ce4e:	1c43      	adds	r3, r0, #1
 800ce50:	d102      	bne.n	800ce58 <_fstat_r+0x1c>
 800ce52:	682b      	ldr	r3, [r5, #0]
 800ce54:	b103      	cbz	r3, 800ce58 <_fstat_r+0x1c>
 800ce56:	6023      	str	r3, [r4, #0]
 800ce58:	bd38      	pop	{r3, r4, r5, pc}
 800ce5a:	bf00      	nop
 800ce5c:	24000490 	.word	0x24000490

0800ce60 <_isatty_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	4d06      	ldr	r5, [pc, #24]	; (800ce7c <_isatty_r+0x1c>)
 800ce64:	2300      	movs	r3, #0
 800ce66:	4604      	mov	r4, r0
 800ce68:	4608      	mov	r0, r1
 800ce6a:	602b      	str	r3, [r5, #0]
 800ce6c:	f7f4 fec1 	bl	8001bf2 <_isatty>
 800ce70:	1c43      	adds	r3, r0, #1
 800ce72:	d102      	bne.n	800ce7a <_isatty_r+0x1a>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	b103      	cbz	r3, 800ce7a <_isatty_r+0x1a>
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	bd38      	pop	{r3, r4, r5, pc}
 800ce7c:	24000490 	.word	0x24000490

0800ce80 <_lseek_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4d07      	ldr	r5, [pc, #28]	; (800cea0 <_lseek_r+0x20>)
 800ce84:	4604      	mov	r4, r0
 800ce86:	4608      	mov	r0, r1
 800ce88:	4611      	mov	r1, r2
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	602a      	str	r2, [r5, #0]
 800ce8e:	461a      	mov	r2, r3
 800ce90:	f7f4 feba 	bl	8001c08 <_lseek>
 800ce94:	1c43      	adds	r3, r0, #1
 800ce96:	d102      	bne.n	800ce9e <_lseek_r+0x1e>
 800ce98:	682b      	ldr	r3, [r5, #0]
 800ce9a:	b103      	cbz	r3, 800ce9e <_lseek_r+0x1e>
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	bd38      	pop	{r3, r4, r5, pc}
 800cea0:	24000490 	.word	0x24000490

0800cea4 <_read_r>:
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	4d07      	ldr	r5, [pc, #28]	; (800cec4 <_read_r+0x20>)
 800cea8:	4604      	mov	r4, r0
 800ceaa:	4608      	mov	r0, r1
 800ceac:	4611      	mov	r1, r2
 800ceae:	2200      	movs	r2, #0
 800ceb0:	602a      	str	r2, [r5, #0]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	f7f4 fe48 	bl	8001b48 <_read>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	d102      	bne.n	800cec2 <_read_r+0x1e>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	b103      	cbz	r3, 800cec2 <_read_r+0x1e>
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	bd38      	pop	{r3, r4, r5, pc}
 800cec4:	24000490 	.word	0x24000490

0800cec8 <_init>:
 800cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceca:	bf00      	nop
 800cecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cece:	bc08      	pop	{r3}
 800ced0:	469e      	mov	lr, r3
 800ced2:	4770      	bx	lr

0800ced4 <_fini>:
 800ced4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced6:	bf00      	nop
 800ced8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceda:	bc08      	pop	{r3}
 800cedc:	469e      	mov	lr, r3
 800cede:	4770      	bx	lr
